{"version":3,"sources":["../../src/fields/fields.js"],"names":["prepareValue","value","instanceOf","newValue","populate","WithFieldsError","MODEL_POPULATE_MISSING","fields","list","rest","MODEL_FIELD_INSTANCEOF_NOT_SET","field","type","instance","setValue","validate","isDirty","clean","call","current","i","length","currentElement","preparedValues","forEach","item","push","preparedValue"],"mappings":"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","sourcesContent":["// @flow\nimport type { FieldFactory } from \"@commodo/fields/types\";\nimport WithFieldsError from \"./../WithFieldsError\";\nimport { withProps } from \"repropose\";\nimport { hasFields } from \"@commodo/fields\";\nimport { getName, hasName } from \"@commodo/name\";\nimport withFieldDataTypeValidation from \"./withFieldDataTypeValidation\";\nimport createField from \"./createField\";\n\nconst prepareValue = ({ value, instanceOf }) => {\n    let newValue = null;\n    if (value) {\n        if (hasFields(value)) {\n            newValue = value;\n        } else {\n            newValue = new instanceOf();\n            if (typeof newValue.populate === \"function\") {\n                newValue.populate(value);\n            } else {\n                throw new WithFieldsError(\n                    `Cannot populate model \"${instanceOf}\" - \"populate\" method missing. Forgot to use \"withFields\"?`,\n                    WithFieldsError.MODEL_POPULATE_MISSING\n                );\n            }\n        }\n    }\n\n    return newValue;\n};\n\nconst fields: FieldFactory = ({ list, instanceOf, ...rest }: Object) => {\n    if (!instanceOf) {\n        throw new WithFieldsError(\n            `When defining a \"fields\" field, \"instanceOf\" argument must be set.`,\n            WithFieldsError.MODEL_FIELD_INSTANCEOF_NOT_SET\n        );\n    }\n\n    const field = createField({ ...rest, list, type: \"fields\" });\n    withProps(instance => {\n        const { setValue, validate, isDirty, clean } = instance;\n\n        return {\n            instanceOf,\n            isDirty() {\n                if (isDirty.call(this)) {\n                    return true;\n                }\n\n                if (instance.current === null) {\n                    return false;\n                }\n\n                if (instance.list) {\n                    for (let i = 0; i < instance.current.length; i++) {\n                        let currentElement = instance.current[i];\n                        if (currentElement.isDirty()) {\n                            return true;\n                        }\n                    }\n                    return false;\n                }\n\n                return hasFields(instance.current) && instance.current.isDirty();\n            },\n            clean() {\n                clean.call(this);\n                if (instance.current === null) {\n                    return this;\n                }\n\n                if (instance.list) {\n                    for (let i = 0; i < instance.current.length; i++) {\n                        let currentElement = instance.current[i];\n                        if (currentElement.isDirty()) {\n                            currentElement.clean();\n                        }\n                    }\n                    return this;\n                }\n\n                if (instance.current.isDirty()) {\n                    instance.current.clean();\n                }\n\n                return this;\n            },\n            setValue(value) {\n                if (value === null) {\n                    return setValue.call(this, null);\n                }\n\n                if (this.list) {\n                    const preparedValues = [];\n                    value.forEach(item =>\n                        preparedValues.push(prepareValue({ value: item, instanceOf }))\n                    );\n                    return setValue.call(this, preparedValues);\n                }\n\n                const preparedValue = prepareValue({ value, instanceOf });\n                return setValue.call(this, preparedValue);\n            },\n            async validate() {\n                await validate.call(this);\n\n                if (this.current === null) {\n                    return;\n                }\n\n                if (this.list) {\n                    for (let i = 0; i < this.current.length; i++) {\n                        const current = this.current[i];\n                        current && (await current.validate());\n                    }\n                    return;\n                }\n\n                this.current && (await this.current.validate());\n            }\n        };\n    })(field);\n\n    withFieldDataTypeValidation(value => {\n        if (typeof value === \"object\") {\n            if (hasFields(value)) {\n                // If both received value and instanceOf has a name attached, let's compare by it.\n                if (hasName(value) && hasName(instanceOf)) {\n                    return getName(value) === getName(instanceOf);\n                }\n\n                return value instanceof instanceOf;\n            }\n            return true;\n        }\n        return false;\n    })(field);\n\n    return field;\n};\n\nexport default fields;\n"],"file":"fields.js"}