{"version":3,"sources":["../../src/fields/createField.js"],"names":["createField","type","list","validation","get","set","value","rest","name","parent","current","state","loading","loaded","dirty","Object","assign","getValue","setValue","options","skipDifferenceCheck","forceSetAsDirty","forceSetAsClean","isDifferentFrom","isDirty","clean","isEmpty","isSet","reset","validate","construct","init"],"mappings":"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","sourcesContent":["import { FieldFactory } from \"@commodo/fields/types\";\n\nconst createField: FieldFactory = ({ type, list, validation, get, set, value, ...rest }) => {\n    return function(name, parent) {\n        this.get = get;\n        this.set = set;\n        this.name = name;\n        this.parent = parent;\n        this.type = type;\n        this.list = list;\n        this.validation = validation;\n        this.current = null;\n        this.state = { loading: false, loaded: false, dirty: false, set: false };\n\n        Object.assign(this, rest);\n\n        this.getValue = () => {\n            return this.current;\n        };\n\n        this.setValue = (value: any, options: Object = {}) => {\n            // If needed, implement skipMarkAsSet option (at the time of implementation, it was not needed).\n            this.state.set = true;\n\n            if (options.skipDifferenceCheck) {\n                if (options.forceSetAsDirty) {\n                    this.state.dirty = true;\n                } else {\n                    if (options.forceSetAsClean) {\n                        this.state.dirty = false;\n                    }\n                }\n            } else {\n                if (!this.state.dirty && this.isDifferentFrom(value)) {\n                    this.state.dirty = true;\n                }\n            }\n\n            this.current = value;\n            return this;\n        };\n\n        this.isDifferentFrom = (value: mixed) => {\n            return this.current !== value;\n        };\n\n        this.isDirty = () => {\n            return this.state.dirty;\n        };\n\n        this.clean = () => {\n            this.state.dirty = false;\n            return this;\n        };\n\n        this.isEmpty = () => {\n            return this.current === null || typeof this.current === \"undefined\";\n        };\n\n        this.isSet = () => {\n            return this.state.set;\n        };\n\n        this.reset = () => {\n            this.current = null;\n            this.state.dirty = false;\n            this.state.set = false;\n        };\n\n        this.validate = async () => {\n            if (typeof this.validation === \"function\") {\n                await this.validation(await this.getValue());\n            }\n        };\n\n        typeof this.construct === \"function\" && this.construct();\n        typeof this.init === \"function\" && this.init();\n\n        if (typeof value !== \"undefined\") {\n            this.setValue(value);\n        }\n    };\n};\n\nexport default createField;\n"],"file":"createField.js"}