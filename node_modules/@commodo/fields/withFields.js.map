{"version":3,"sources":["../src/withFields.js"],"names":["withFields","fields","baseFn","fn","props","__withFields","processing","validation","dirty","getFields","getField","name","populate","data","fieldName","field","skipOnPopulate","undefined","setValue","toJSON","onlyDirty","onlyClean","output","isDirty","getJSONValue","getValue","validate","invalidFields","e","code","WithFieldsError","VALIDATION_FAILED_INVALID_FIELD","message","Object","keys","length","VALIDATION_FAILED_INVALID_FIELDS","clean","values","valueKey","value","instance","fieldsList","newFieldName","valueFactory","defineProperty","get","call","set"],"mappings":"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","sourcesContent":["import { withProps, withStaticProps } from \"repropose\";\nimport { WithFieldsError } from \"@commodo/fields\";\n\nconst withFields = (fields: Object) => {\n    return baseFn => {\n        let fn = withProps(props => {\n            if (props.__withFields) {\n                return {};\n            }\n\n            return {\n                __withFields: {\n                    fields: {},\n                    processing: { validation: false, dirty: false }\n                },\n\n                getFields() {\n                    return this.__withFields.fields;\n                },\n                getField(name) {\n                    return this.__withFields.fields[name];\n                },\n                populate(data) {\n                    if (data && typeof data === \"object\") {\n                        const fields = this.getFields();\n                        for (let fieldName in fields) {\n                            const field = fields[fieldName];\n\n                            if (!field || field.skipOnPopulate) {\n                                continue;\n                            }\n\n                            if (fieldName in data && data[fieldName] !== undefined) {\n                                fields[fieldName].setValue(data[fieldName]);\n                            }\n                        }\n                    }\n\n                    return this;\n                },\n\n                async toJSON({ onlyDirty, onlyClean } = {}) {\n                    const fields = this.getFields();\n                    const output = {};\n                    for (let name in fields) {\n                        const field = fields[name];\n\n                        // Let's check if the field is dirty or clean, and if \"onlyDirty\" or \"onlyClean\" flag has been\n                        // set to true. If so, we want to return only dirty / only clean field values, respectively.\n                        if (onlyDirty === true || onlyClean === true) {\n                            const isDirty = field.isDirty();\n                            if (onlyDirty) {\n                                if (!isDirty) {\n                                    continue;\n                                }\n                            } else {\n                                if (isDirty) {\n                                    continue;\n                                }\n                            }\n                        }\n\n                        if (typeof field.getJSONValue === \"function\") {\n                            output[name] = await field.getJSONValue();\n                        } else {\n                            output[name] = field.getValue();\n                        }\n                    }\n                    return output;\n                },\n\n                async validate() {\n                    if (this.__withFields.processing.validation) {\n                        return;\n                    }\n                    this.__withFields.processing.validation = true;\n\n                    const invalidFields = {};\n                    const fields = this.getFields();\n\n                    for (let name in fields) {\n                        const field = fields[name];\n                        try {\n                            await field.validate();\n                        } catch (e) {\n                            invalidFields[name] = {\n                                code: e.code || WithFieldsError.VALIDATION_FAILED_INVALID_FIELD,\n                                data: e.data || null,\n                                message: e.message\n                            };\n                        }\n                    }\n\n                    this.__withFields.processing.validation = false;\n\n                    if (Object.keys(invalidFields).length > 0) {\n                        throw new WithFieldsError(\n                            \"Validation failed.\",\n                            WithFieldsError.VALIDATION_FAILED_INVALID_FIELDS,\n                            {\n                                invalidFields\n                            }\n                        );\n                    }\n                },\n\n                clean(): void {\n                    const values = this.getFields();\n                    for (let valueKey in values) {\n                        const value = values[valueKey];\n                        value && value.isDirty() && value.clean();\n                    }\n                },\n\n                isDirty(): boolean {\n                    if (this.__withFields.processing.dirty) {\n                        return false;\n                    }\n\n                    this.__withFields.processing.dirty = true;\n\n                    const fields = this.getFields();\n                    for (let valueKey in fields) {\n                        const field = fields[valueKey];\n                        if (field && field.isDirty()) {\n                            this.__withFields.processing.dirty = false;\n                            return true;\n                        }\n                    }\n\n                    this.__withFields.processing.dirty = false;\n                    return false;\n                }\n            };\n        })(baseFn);\n\n        fn = withProps(instance => {\n            let fieldsList = fields;\n            if (typeof fields === \"function\") {\n                fieldsList = fields(instance);\n            }\n\n            for (let newFieldName in fieldsList) {\n                const valueFactory = fieldsList[newFieldName];\n                instance.__withFields.fields[newFieldName] = new valueFactory(\n                    newFieldName,\n                    instance\n                );\n\n                Object.defineProperty(instance, newFieldName, {\n                    get() {\n                        if (this.__withFields.fields[newFieldName].get) {\n                            return this.__withFields.fields[newFieldName].get.call(\n                                this,\n                                this.__withFields.fields[newFieldName]\n                            );\n                        }\n                        return this.__withFields.fields[newFieldName].getValue();\n                    },\n                    set(value) {\n                        if (this.__withFields.fields[newFieldName].set) {\n                            this.__withFields.fields[newFieldName].set.call(\n                                this,\n                                this.__withFields.fields[newFieldName],\n                                value\n                            );\n                        } else {\n                            this.__withFields.fields[newFieldName].setValue(value);\n                        }\n                    }\n                });\n            }\n\n            return {};\n        })(fn);\n\n        fn = withStaticProps({\n            __withFields: true // For satisfying hasFields helper function.\n        })(fn);\n\n        return fn;\n    };\n};\n\nexport default withFields;\n"],"file":"withFields.js"}