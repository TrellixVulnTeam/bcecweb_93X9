{"version":3,"sources":["../src/onSet.js"],"names":["isPromise","value","Boolean","then","onSet","callback","props","setValue","newValue","Error","name","call"],"mappings":";;;;;;;AACA;;AAEA,SAASA,SAAT,CAAmBC,KAAnB,EAA0B;AACtB,SAAOC,OAAO,CAACD,KAAK,IAAI,OAAOA,KAAK,CAACE,IAAb,KAAsB,UAAhC,CAAd;AACH;;AAED,MAAMC,KAAK,GAAIC,QAAD,IAAmC;AAC7C,SAAO,0BAAUC,KAAK,IAAI;AACtB,UAAM;AAAEC,MAAAA;AAAF,QAAeD,KAArB;AACA,WAAO;AACHC,MAAAA,QAAQ,CAACN,KAAD,EAAQ;AACZ,cAAMO,QAAQ,GAAGH,QAAQ,CAACJ,KAAD,CAAzB;;AACA,YAAID,SAAS,CAACQ,QAAD,CAAb,EAAyB;AACrB,gBAAM,IAAIC,KAAJ,CACD,qEAAoEH,KAAK,CAACI,IAAK,+DAD9E,CAAN;AAGH;;AACD,eAAOH,QAAQ,CAACI,IAAT,CAAc,IAAd,EAAoBH,QAApB,CAAP;AACH;;AATE,KAAP;AAWH,GAbM,CAAP;AAcH,CAfD;;eAiBeJ,K","sourcesContent":["// @flow\nimport { withProps } from \"repropose\";\n\nfunction isPromise(value) {\n    return Boolean(value && typeof value.then === \"function\");\n}\n\nconst onSet = (callback: (value: any) => any) => {\n    return withProps(props => {\n        const { setValue } = props;\n        return {\n            setValue(value) {\n                const newValue = callback(value);\n                if (isPromise(newValue)) {\n                    throw new Error(\n                        `A promise was returned from the \"onSet\" callback (applied on the \"${props.name}\" field). Provided callbacks cannot perform async operations.`\n                    );\n                }\n                return setValue.call(this, newValue);\n            }\n        };\n    });\n};\n\nexport default onSet;\n"],"file":"onSet.js"}