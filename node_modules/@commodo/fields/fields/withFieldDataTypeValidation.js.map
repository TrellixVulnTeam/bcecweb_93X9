{"version":3,"sources":["../../src/fields/withFieldDataTypeValidation.js"],"names":["throwDataTypeError","fieldType","fieldName","value","WithFieldsError","FIELD_DATA_TYPE_ERROR","validateValue","validate","name","type","undefined","withFieldDataTypeValidation","props","setValue","args","call","list","Array","isArray","forEach","item"],"mappings":";;;;;;;AACA;;AAEA;;AAEA,MAAMA,kBAAkB,GAAG,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,KAAvB,KAAiC;AACxD,QAAM,IAAIC,uBAAJ,CACD,sBAAqBH,SAAU,WAAUC,SAAU,yBAAwBC,KAAM,GADhF,EAEFC,wBAAgBC,qBAFd,CAAN;AAIH,CALD;;AAOA,MAAMC,aAAa,GAAG,CAAC;AACnBH,EAAAA,KADmB;AAEnBI,EAAAA,QAFmB;AAGnBC,EAAAA,IAHmB;AAInBC,EAAAA;AAJmB,CAAD,KAUhB;AACF,MAAIN,KAAK,KAAKO,SAAV,IAAuBP,KAAK,KAAK,IAArC,EAA2C;AACvC,QAAI,CAACI,QAAQ,CAACJ,KAAD,SAAb,EAA4B;AACxBH,MAAAA,kBAAkB,CAACS,IAAD,EAAOD,IAAP,EAAaL,KAAb,CAAlB;AACH;AACJ;AACJ,CAhBD;;AAkBA,MAAMQ,2BAA2B,GAAIJ,QAAD,IAA6D;AAC7F,SAAO,0BAAUK,KAAK,IAAI;AACtB,UAAM;AAAEC,MAAAA;AAAF,QAAeD,KAArB;AAEA,WAAO;AACHC,MAAAA,QAAQ,CAACV,KAAD,EAAQ,GAAGW,IAAX,EAAiB;AACrB,YAAIX,KAAK,KAAK,IAAd,EAAoB;AAChB,iBAAOU,QAAQ,CAACE,IAAT,CAAc,IAAd,EAAoBZ,KAApB,EAA2B,GAAGW,IAA9B,CAAP;AACH;;AAED,cAAM;AAAEE,UAAAA,IAAF;AAAQP,UAAAA,IAAR;AAAcD,UAAAA;AAAd,YAAuB,IAA7B;;AACA,YAAIQ,IAAJ,EAAU;AACN,cAAI,CAACC,KAAK,CAACC,OAAN,CAAcf,KAAd,CAAL,EAA2B;AACvBH,YAAAA,kBAAkB,CAAE,GAAES,IAAK,SAAT,EAAmBD,IAAnB,EAA0B,GAAEL,KAAM,aAAlC,CAAlB;AACH;;AAEDA,UAAAA,KAAK,CAACgB,OAAN,CAAcC,IAAI,IAAId,aAAa,CAAC;AAAEH,YAAAA,KAAK,EAAEiB,IAAT;AAAeb,YAAAA,QAAf;AAAyBC,YAAAA,IAAzB;AAA+BC,YAAAA;AAA/B,WAAD,CAAnC;AACH,SAND,MAMO;AACHH,UAAAA,aAAa,CAAC;AAAEH,YAAAA,KAAF;AAASI,YAAAA,QAAT;AAAmBC,YAAAA,IAAnB;AAAyBC,YAAAA;AAAzB,WAAD,CAAb;AACH;;AAED,eAAOI,QAAQ,CAACE,IAAT,CAAc,IAAd,EAAoBZ,KAApB,EAA2B,GAAGW,IAA9B,CAAP;AACH;;AAlBE,KAAP;AAoBH,GAvBM,CAAP;AAwBH,CAzBD;;eA2BeH,2B","sourcesContent":["// @flow\nimport { withProps } from \"repropose\";\nimport type { FieldValue } from \"@commodo/fields/types\";\nimport { WithFieldsError } from \"@commodo/fields\";\n\nconst throwDataTypeError = (fieldType, fieldName, value) => {\n    throw new WithFieldsError(\n        `Invalid data type: ${fieldType} field \"${fieldName}\" cannot accept value ${value}.`,\n        WithFieldsError.FIELD_DATA_TYPE_ERROR\n    );\n};\n\nconst validateValue = ({\n    value,\n    validate,\n    name,\n    type\n}: {\n    value: mixed,\n    validate: Function,\n    name: string,\n    type: string\n}) => {\n    if (value !== undefined && value !== null) {\n        if (!validate(value, this)) {\n            throwDataTypeError(type, name, value);\n        }\n    }\n};\n\nconst withFieldDataTypeValidation = (validate: (value: FieldValue, field: Object) => boolean) => {\n    return withProps(props => {\n        const { setValue } = props;\n\n        return {\n            setValue(value, ...args) {\n                if (value === null) {\n                    return setValue.call(this, value, ...args);\n                }\n                \n                const { list, type, name } = this;\n                if (list) {\n                    if (!Array.isArray(value)) {\n                        throwDataTypeError(`${type} (list)`, name, `${value} (non-list)`);\n                    }\n\n                    value.forEach(item => validateValue({ value: item, validate, name, type }));\n                } else {\n                    validateValue({ value, validate, name, type });\n                }\n\n                return setValue.call(this, value, ...args);\n            }\n        };\n    });\n};\n\nexport default withFieldDataTypeValidation;\n"],"file":"withFieldDataTypeValidation.js"}