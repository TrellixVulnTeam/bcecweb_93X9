import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import * as React from "react";
import { Route } from "@webiny/react-router";
import { AdminLayout } from "@webiny/app-admin/components/AdminLayout";
import { SecureRoute } from "@webiny/app-security/components";
import { NavigationMenuElement } from "@webiny/app-admin/ui/elements/NavigationMenuElement";
import { NavigationView } from "@webiny/app-admin/ui/views/NavigationView";
import { RoutePlugin } from "@webiny/app/plugins/RoutePlugin";
import { UIViewPlugin } from "@webiny/app-admin/ui/UIView";
import FileManagerSettings from "../views/FileManagerSettings";
var PERMISSION_FM_SETTINGS = "fm.settings";

/**
 * !EXAMPLE!
 * This demonstrates how you can create your sub-classes to expose a nicer public API.
 */
var ProtectedMenuElement = /*#__PURE__*/function (_NavigationMenuElemen) {
  _inherits(ProtectedMenuElement, _NavigationMenuElemen);

  var _super = _createSuper(ProtectedMenuElement);

  function ProtectedMenuElement(id, config) {
    var _this;

    _classCallCheck(this, ProtectedMenuElement);

    if (config.permission) {
      config.shouldRender = function () {
        var _this$getView$getSecu = _this.getView().getSecurityHook(),
            identity = _this$getView$getSecu.identity;

        return identity.getPermission(PERMISSION_FM_SETTINGS) !== undefined;
      };
    }

    return _this = _super.call(this, id, config);
  }

  return ProtectedMenuElement;
}(NavigationMenuElement);

export default [new RoutePlugin({
  route: /*#__PURE__*/React.createElement(Route, {
    path: "/settings/file-manager/general",
    render: function render() {
      return /*#__PURE__*/React.createElement(SecureRoute, {
        permission: PERMISSION_FM_SETTINGS
      }, /*#__PURE__*/React.createElement(AdminLayout, {
        title: "File Manager Settings - General"
      }, /*#__PURE__*/React.createElement(FileManagerSettings, null)));
    }
  })
}), new UIViewPlugin(NavigationView, /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(view) {
    var _view$getSecurityHook, identity, hasPermissions, fileManagerSettings;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return view.isRendered();

          case 2:
            _view$getSecurityHook = view.getSecurityHook(), identity = _view$getSecurityHook.identity;
            hasPermissions = identity.getPermission(PERMISSION_FM_SETTINGS) !== undefined;

            if (hasPermissions) {
              _context.next = 6;
              break;
            }

            return _context.abrupt("return");

          case 6:
            fileManagerSettings = new ProtectedMenuElement("menu.settings.fileManager", {
              label: "File Manager",
              permission: PERMISSION_FM_SETTINGS
            });
            fileManagerSettings.addElement(new NavigationMenuElement("menu.settings.fileManager.general", {
              label: "General",
              path: "/settings/file-manager/general"
            }));
            view.addSettingsMenuElement(fileManagerSettings);

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}())];
//# sourceMappingURL=menus.js.map