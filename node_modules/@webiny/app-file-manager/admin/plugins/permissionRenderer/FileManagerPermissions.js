import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18;

import React, { Fragment, useCallback, useMemo } from "react";
import { Grid, Cell } from "@webiny/ui/Grid";
import { Select } from "@webiny/ui/Select";
import { i18n } from "@webiny/app/i18n";
import { PermissionInfo, gridNoPaddingClass } from "@webiny/app-admin/components/Permissions";
import { Form } from "@webiny/form";
import { Elevation } from "@webiny/ui/Elevation";
import { Typography } from "@webiny/ui/Typography";
var t = i18n.ns("app-file-manager/admin/plugins/permissionRenderer");
var FILE_MANAGER = "fm";
var FILE_MANAGER_FULL_ACCESS = "".concat(FILE_MANAGER, ".*");
var FILE_MANAGER_ACCESS_FILE = "".concat(FILE_MANAGER, ".file");
var FILE_MANAGER_ACCESS_SETTINGS = "".concat(FILE_MANAGER, ".settings");
var FULL_ACCESS = "full";
var NO_ACCESS = "no";
var CUSTOM_ACCESS = "custom";
export var FileManagerPermissions = function FileManagerPermissions(_ref) {
  var value = _ref.value,
      onChange = _ref.onChange;
  var onFormChange = useCallback(function (data) {
    var newValue = [];

    if (Array.isArray(value)) {
      // Let's just filter out the `file-manager*` permission objects, it's easier to build new ones from scratch.
      newValue = value.filter(function (item) {
        return !item.name.startsWith(FILE_MANAGER);
      });
    }

    if (data.accessLevel === NO_ACCESS) {
      onChange(newValue);
      return;
    }

    if (data.accessLevel === FULL_ACCESS) {
      newValue.push({
        name: FILE_MANAGER_FULL_ACCESS
      });
      onChange(newValue);
      return;
    } // Handling custom access level.
    // Files first.


    if (data.filesAccessScope && data.filesAccessScope !== NO_ACCESS) {
      var permission = {
        name: FILE_MANAGER_ACCESS_FILE,
        own: false,
        rwd: undefined
      };

      if (data.filesAccessScope === "own") {
        permission.own = true;
        permission.rwd = "rwd";
      } else {
        permission.rwd = data.filesRWD || "r";
      }

      newValue.push(permission);
    } // Settings second.


    if (data.settingsAccessScope === FULL_ACCESS) {
      newValue.push({
        name: FILE_MANAGER_ACCESS_SETTINGS
      });
    }

    onChange(newValue);
  }, [value]);
  var formData = useMemo(function () {
    if (!Array.isArray(value)) {
      return {
        accessLevel: NO_ACCESS
      };
    }

    var hasFullAccess = value.find(function (item) {
      return item.name === FILE_MANAGER_FULL_ACCESS || item.name === "*";
    });

    if (hasFullAccess) {
      return {
        accessLevel: FULL_ACCESS
      };
    }

    var permissions = value.filter(function (item) {
      return item.name.startsWith(FILE_MANAGER);
    });

    if (!permissions.length) {
      return {
        accessLevel: NO_ACCESS
      };
    }

    var data = {
      accessLevel: CUSTOM_ACCESS,
      filesAccessScope: NO_ACCESS,
      settingsAccessScope: NO_ACCESS,
      filesRWD: "r"
    };
    var filesPermission = permissions.find(function (item) {
      return item.name === FILE_MANAGER_ACCESS_FILE;
    });

    if (filesPermission) {
      data.filesAccessScope = filesPermission.own ? "own" : FULL_ACCESS;

      if (data.filesAccessScope === FULL_ACCESS) {
        data.filesRWD = filesPermission.rwd;
      } else {
        data.filesRWD = "rwd";
      }
    }

    var hasSettingsAccess = permissions.find(function (item) {
      return item.name === FILE_MANAGER_ACCESS_SETTINGS;
    });

    if (hasSettingsAccess) {
      data.settingsAccessScope = FULL_ACCESS;
    }

    return data;
  }, []);
  return /*#__PURE__*/React.createElement(Form, {
    data: formData,
    onChange: onFormChange
  }, function (_ref2) {
    var data = _ref2.data,
        Bind = _ref2.Bind,
        setValue = _ref2.setValue;
    return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(Grid, {
      className: gridNoPaddingClass
    }, /*#__PURE__*/React.createElement(Cell, {
      span: 6
    }, /*#__PURE__*/React.createElement(PermissionInfo, {
      title: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Access Level"])))
    })), /*#__PURE__*/React.createElement(Cell, {
      span: 6
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "accessLevel"
    }, /*#__PURE__*/React.createElement(Select, {
      label: t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Access Level"])))
    }, /*#__PURE__*/React.createElement("option", {
      value: NO_ACCESS
    }, t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["No access"])))), /*#__PURE__*/React.createElement("option", {
      value: FULL_ACCESS
    }, t(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Full access"])))), /*#__PURE__*/React.createElement("option", {
      value: CUSTOM_ACCESS
    }, t(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["Custom access"])))))))), data.accessLevel === "custom" && /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(Elevation, {
      z: 1,
      style: {
        marginTop: 10
      }
    }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Typography, {
      use: "overline"
    }, t(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["Files"]))))), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Grid, {
      style: {
        padding: 0,
        paddingBottom: 24
      }
    }, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "filesAccessScope",
      beforeChange: function beforeChange(value, cb) {
        if (value === "own") {
          setValue("filesRWD", "rwd");
        }

        cb(value);
      }
    }, /*#__PURE__*/React.createElement(Select, {
      label: t(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["Access Scope"])))
    }, /*#__PURE__*/React.createElement("option", {
      value: NO_ACCESS
    }, t(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["No access"])))), /*#__PURE__*/React.createElement("option", {
      value: FULL_ACCESS
    }, t(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["All files"])))), /*#__PURE__*/React.createElement("option", {
      value: "own"
    }, t(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["Only files created by the user"]))))))), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "filesRWD"
    }, /*#__PURE__*/React.createElement(Select, {
      label: t(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["Primary Actions"]))),
      disabled: data.filesAccessScope !== "full"
    }, /*#__PURE__*/React.createElement("option", {
      value: "r"
    }, t(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["Read"])))), /*#__PURE__*/React.createElement("option", {
      value: "rw"
    }, t(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["Read, write"])))), /*#__PURE__*/React.createElement("option", {
      value: "rwd"
    }, t(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["Read, write, delete"]))))))))))), /*#__PURE__*/React.createElement(Elevation, {
      z: 1,
      style: {
        marginTop: 10
      }
    }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Typography, {
      use: "overline"
    }, t(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["Settings"]))))), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "settingsAccessScope"
    }, /*#__PURE__*/React.createElement(Select, {
      label: t(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["Access Scope"])))
    }, /*#__PURE__*/React.createElement("option", {
      value: NO_ACCESS
    }, t(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["No access"])))), /*#__PURE__*/React.createElement("option", {
      value: FULL_ACCESS
    }, t(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral(["Full access"])))))))))));
  });
};
//# sourceMappingURL=FileManagerPermissions.js.map