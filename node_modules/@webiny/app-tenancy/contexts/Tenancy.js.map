{"version":3,"sources":["../../src/contexts/Tenancy.tsx"],"names":["React","useState","useMemo","useCallback","Fragment","useRef","plugins","useSecurity","TenantHeaderLinkPlugin","TenantPlugin","TenancyContext","createContext","TenancyProvider","props","currentTenant","setCurrentTenant","identity","onChangeCallbacks","Set","tenantPlugins","byType","type","pluginElements","map","plugin","render","changeTenant","tenant","callbacks","current","values","callback","register","id","value","tenants","access","setTenant","onChange","cb","add","delete","children"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,EAAmCC,WAAnC,EAAgDC,QAAhD,EAA0DC,MAA1D,QAAwE,OAAxE;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,sBAAT,QAAuC,4CAAvC;AACA,SAASC,YAAT;AACA,OAAO,IAAMC,cAAc,gBAAGV,KAAK,CAACW,aAAN,CAAoB,IAApB,CAAvB;AAcP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AACpC,kBAA0CZ,QAAQ,CAAS,IAAT,CAAlD;AAAA;AAAA,MAAOa,aAAP;AAAA,MAAsBC,gBAAtB;;AACA,qBAAqBR,WAAW,EAAhC;AAAA,MAAQS,QAAR,gBAAQA,QAAR;;AACA,MAAMC,iBAAiB,GAAGZ,MAAM,CAAC,IAAIa,GAAJ,EAAD,CAAhC;AAEA,MAAMC,aAAa,GAAGb,OAAO,CAACc,MAAR,CAA6BX,YAAY,CAACY,IAA1C,CAAtB;AAEA;AACJ;AACA;AACA;AACA;;AACI,MAAMC,cAAc,GAAGpB,OAAO,CAAC,YAAM;AACjC,WAAOiB,aAAa,CAACI,GAAd,CAAkB,UAAAC,MAAM;AAAA,aAAIA,MAAM,CAACC,MAAP,EAAJ;AAAA,KAAxB,CAAP;AACH,GAF6B,EAE3B,CAACN,aAAD,CAF2B,CAA9B;AAIA,MAAMO,YAAY,GAAGvB,WAAW;AAAA,wEAAC,iBAAOwB,MAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACvBC,cAAAA,SADuB,GACXX,iBAAiB,CAACY,OAAlB,CAA0BC,MAA1B,EADW;AAAA,qDAENF,SAFM;;AAAA;AAE7B,oEAAkC;AAAvBG,kBAAAA,QAAuB;AAC9BA,kBAAAA,QAAQ,CAACJ,MAAD,CAAR;AACH;AAJ4B;AAAA;AAAA;AAAA;AAAA;;AAK7BZ,cAAAA,gBAAgB,CAACY,MAAD,CAAhB;AACArB,cAAAA,OAAO,CAAC0B,QAAR,CAAiB,IAAIxB,sBAAJ,CAA2BmB,MAAM,CAACM,EAAlC,CAAjB;;AAN6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA;AAAA;AAAA;AAAA,OAO7B,EAP6B,CAAhC;AASA,MAAMC,KAAK,GAAGhC,OAAO,CACjB;AAAA,WAAO;AACHyB,MAAAA,MAAM,EAAEb,aADL;AAEHqB,MAAAA,OAAO,EAAEnB,QAAQ,CAACoB,MAFf;AAGHC,MAAAA,SAAS,EAAEX,YAHR;AAIHY,MAAAA,QAAQ,EAAE,kBAAAC,EAAE,EAAI;AACZtB,QAAAA,iBAAiB,CAACY,OAAlB,CAA0BW,GAA1B,CAA8BD,EAA9B;AACA,eAAO;AAAA,iBAAMtB,iBAAiB,CAACY,OAAlB,CAA0BY,MAA1B,CAAiCF,EAAjC,CAAN;AAAA,SAAP;AACH;AAPE,KAAP;AAAA,GADiB,EAUjB,CAACvB,QAAD,EAAWF,aAAX,CAViB,CAArB;AAaA,sBACI,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAEoB;AAAhC,kBACI,oBAAC,QAAD,QACKZ,cADL,EAEKR,aAAa,GAAGD,KAAK,CAAC6B,QAAT,GAAoB,IAFtC,CADJ,CADJ;AAQH,CA9CM","sourcesContent":["import React, { useState, useMemo, useCallback, Fragment, useRef } from \"react\";\nimport { plugins } from \"@webiny/plugins\";\nimport { useSecurity } from \"@webiny/app-security\";\nimport { TenantHeaderLinkPlugin } from \"@webiny/app/plugins/TenantHeaderLinkPlugin\";\nimport { TenantPlugin } from \"../plugins/TenantPlugin\";\nexport const TenancyContext = React.createContext(null);\n\nexport interface Tenant {\n    id: string;\n    name: string;\n}\n\nexport type TenancyContextValue<TTenant = Tenant> = {\n    tenant: TTenant | null;\n    tenants: TTenant[];\n    setTenant(tenant: TTenant): void;\n    onChange(cb: (tenant: TTenant) => void);\n};\n\nexport const TenancyProvider = props => {\n    const [currentTenant, setCurrentTenant] = useState<Tenant>(null);\n    const { identity } = useSecurity();\n    const onChangeCallbacks = useRef(new Set<Function>());\n\n    const tenantPlugins = plugins.byType<TenantPlugin>(TenantPlugin.type);\n\n    /**\n     * Create plugin elements. Once mounted, they will attach to Tenancy using `useTenancy()` hook.\n     * Why mounting an element? Because that will allow the plugin authors to access any available context\n     * using hooks and we won't need to think about all the possible dependencies we need to provide to the plugin.\n     */\n    const pluginElements = useMemo(() => {\n        return tenantPlugins.map(plugin => plugin.render());\n    }, [tenantPlugins]);\n\n    const changeTenant = useCallback(async (tenant: Tenant) => {\n        const callbacks = onChangeCallbacks.current.values();\n        for (const callback of callbacks) {\n            callback(tenant);\n        }\n        setCurrentTenant(tenant);\n        plugins.register(new TenantHeaderLinkPlugin(tenant.id));\n    }, []);\n\n    const value = useMemo<TenancyContextValue>(\n        () => ({\n            tenant: currentTenant,\n            tenants: identity.access,\n            setTenant: changeTenant,\n            onChange: cb => {\n                onChangeCallbacks.current.add(cb);\n                return () => onChangeCallbacks.current.delete(cb);\n            }\n        }),\n        [identity, currentTenant]\n    );\n\n    return (\n        <TenancyContext.Provider value={value}>\n            <Fragment>\n                {pluginElements}\n                {currentTenant ? props.children : null}\n            </Fragment>\n        </TenancyContext.Provider>\n    );\n};\n"],"file":"Tenancy.js"}