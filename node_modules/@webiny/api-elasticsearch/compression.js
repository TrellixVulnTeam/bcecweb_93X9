"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decompress = exports.compress = void 0;

var _CompressionPlugin = require("./plugins/definition/CompressionPlugin");

/**
 * Get the compression plugins, in reverse order, because we want to use the last one added - first.
 */
const getCompressionPlugins = context => {
  return context.plugins.byType(_CompressionPlugin.CompressionPlugin.type).reverse();
};
/**
 * Method to compress the elasticsearch data that is going to be stored into the DynamoDB table that is meant for elasticsearch.
 */


const compress = async (context, data) => {
  const plugins = getCompressionPlugins(context);

  if (plugins.length === 0) {
    return data;
  }

  for (const plugin of plugins) {
    if (plugin.canCompress(data) === false) {
      continue;
    }

    return await plugin.compress(data);
  }
  /**
   * Possibly no plugins that can compress, just return the data.
   */


  return data;
};

exports.compress = compress;

const decompress = async (context, data) => {
  const plugins = getCompressionPlugins(context);

  if (plugins.length === 0) {
    return data;
  }

  for (const plugin of plugins) {
    if (plugin.canDecompress(data) === false) {
      continue;
    }

    return await plugin.decompress(data);
  }
  /**
   * Possibly no plugins that can decompress, just return the data.
   */


  return data;
};

exports.decompress = decompress;
//# sourceMappingURL=compression.js.map