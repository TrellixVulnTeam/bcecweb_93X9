{"version":3,"sources":["../src/sort.ts"],"names":["sortRegExp","RegExp","createSort","params","sort","defaults","plugins","length","field","order","unmapped_type","unmappedType","undefined","reduce","acc","value","match","WebinyError","initialOrder","toLowerCase","plugin","path","getPath","getSortOptions"],"mappings":";;;;;;;;;AAKA;;AAIA,MAAMA,UAAU,GAAG,IAAIC,MAAJ,CAAW,+BAAX,CAAnB;;AAYO,MAAMC,UAAU,GAAIC,MAAD,IAAiD;AACvE,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA;AAAlB,MAA8BH,MAApC;;AACA,MAAIC,IAAI,CAACG,MAAL,KAAgB,CAApB,EAAuB;AACnB;AACR;AACA;AACQ,WAAO;AACH,OAACF,QAAQ,CAACG,KAAT,IAAkB,YAAnB,GAAkC;AAC9BC,QAAAA,KAAK,EAAEJ,QAAQ,CAACI,KAAT,IAAkB,MADK;AAE9BC,QAAAA,aAAa,EAAEL,QAAQ,CAACM,YAAT,IAAyBC;AAFV;AAD/B,KAAP;AAMH;;AAED,SAAOR,IAAI,CAACS,MAAL,CAAY,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC/B,UAAMC,KAAK,GAAGD,KAAK,CAACC,KAAN,CAAYhB,UAAZ,CAAd;;AAEA,QAAI,CAACgB,KAAL,EAAY;AACR,YAAM,IAAIC,cAAJ,CAAiB,mBAAkBF,KAAM,IAAzC,CAAN;AACH;;AAED,UAAM,GAAGP,KAAH,EAAUU,YAAV,IAA0BF,KAAhC;AACA,UAAMP,KAAyB,GAAGS,YAAY,CAACC,WAAb,OAA+B,KAA/B,GAAuC,KAAvC,GAA+C,MAAjF;AAEA,UAAMC,MAAgC,GAAGd,OAAO,CAACE,KAAD,CAAP,IAAkBF,OAAO,CAAC,GAAD,CAAlE;;AACA,QAAI,CAACc,MAAL,EAAa;AACT,YAAM,IAAIH,cAAJ,CAAiB,iCAAgCT,KAAM,GAAvD,EAA2D,cAA3D,EAA2E;AAC7EA,QAAAA;AAD6E,OAA3E,CAAN;AAGH;AACD;AACR;AACA;AACA;;;AACQ,UAAMa,IAAI,GAAGD,MAAM,CAACE,OAAP,CAAed,KAAf,CAAb;AAEAM,IAAAA,GAAG,CAACO,IAAD,CAAH,GAAYD,MAAM,CAACG,cAAP,CAAsBd,KAAtB,CAAZ;AAEA,WAAOK,GAAP;AACH,GAzBM,EAyBJ,EAzBI,CAAP;AA0BH,CAxCM","sourcesContent":["import {\n    FieldSortOptions,\n    SortType as ElasticTsSortType,\n    SortOrder as ElasticTsSortOrder\n} from \"./types\";\nimport WebinyError from \"@webiny/error\";\nimport { ElasticsearchFieldPlugin } from \"./plugins/definition/ElasticsearchFieldPlugin\";\nimport { ContextInterface } from \"@webiny/handler/types\";\n\nconst sortRegExp = new RegExp(/^([a-zA-Z-0-9_]+)_(ASC|DESC)$/);\n\ninterface CreateSortParams {\n    context: ContextInterface;\n    sort: string[];\n    defaults?: {\n        field?: string;\n        order?: ElasticTsSortOrder;\n        unmappedType?: string;\n    };\n    plugins: Record<string, ElasticsearchFieldPlugin>;\n}\nexport const createSort = (params: CreateSortParams): ElasticTsSortType => {\n    const { sort, defaults, plugins } = params;\n    if (sort.length === 0) {\n        /**\n         * We say that our system defaults is always id since all records we create have some kind of primary ID.\n         */\n        return {\n            [defaults.field || \"id.keyword\"]: {\n                order: defaults.order || \"desc\",\n                unmapped_type: defaults.unmappedType || undefined\n            }\n        };\n    }\n\n    return sort.reduce((acc, value) => {\n        const match = value.match(sortRegExp);\n\n        if (!match) {\n            throw new WebinyError(`Cannot sort by \"${value}\".`);\n        }\n\n        const [, field, initialOrder] = match;\n        const order: ElasticTsSortOrder = initialOrder.toLowerCase() === \"asc\" ? \"asc\" : \"desc\";\n\n        const plugin: ElasticsearchFieldPlugin = plugins[field] || plugins[\"*\"];\n        if (!plugin) {\n            throw new WebinyError(`Missing plugin for the field \"${field}\"`, \"PLUGIN_ERROR\", {\n                field\n            });\n        }\n        /**\n         * In case field plugin is the global one, change the * with actual field name.\n         * Custom path methods will return their own values anyway so replacing * will not matter.\n         */\n        const path = plugin.getPath(field);\n\n        acc[path] = plugin.getSortOptions(order);\n\n        return acc;\n    }, {} as Record<string, FieldSortOptions>);\n};\n"],"file":"sort.js"}