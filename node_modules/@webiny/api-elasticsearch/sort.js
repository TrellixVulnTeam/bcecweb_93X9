"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSort = void 0;

var _error = _interopRequireDefault(require("@webiny/error"));

const sortRegExp = new RegExp(/^([a-zA-Z-0-9_]+)_(ASC|DESC)$/);

const createSort = params => {
  const {
    sort,
    defaults,
    plugins
  } = params;

  if (sort.length === 0) {
    /**
     * We say that our system defaults is always id since all records we create have some kind of primary ID.
     */
    return {
      [defaults.field || "id.keyword"]: {
        order: defaults.order || "desc",
        unmapped_type: defaults.unmappedType || undefined
      }
    };
  }

  return sort.reduce((acc, value) => {
    const match = value.match(sortRegExp);

    if (!match) {
      throw new _error.default(`Cannot sort by "${value}".`);
    }

    const [, field, initialOrder] = match;
    const order = initialOrder.toLowerCase() === "asc" ? "asc" : "desc";
    const plugin = plugins[field] || plugins["*"];

    if (!plugin) {
      throw new _error.default(`Missing plugin for the field "${field}"`, "PLUGIN_ERROR", {
        field
      });
    }
    /**
     * In case field plugin is the global one, change the * with actual field name.
     * Custom path methods will return their own values anyway so replacing * will not matter.
     */


    const path = plugin.getPath(field);
    acc[path] = plugin.getSortOptions(order);
    return acc;
  }, {});
};

exports.createSort = createSort;
//# sourceMappingURL=sort.js.map