/// <reference types="node" />
import { CompressionPlugin } from "./definition/CompressionPlugin";
import zlib from "zlib";
export declare const gzip: (input: zlib.InputType, options?: zlib.ZlibOptions) => Promise<Buffer>;
export declare const ungzip: (input: zlib.InputType, options?: zlib.ZlibOptions) => Promise<Buffer>;
export interface CompressedData {
    compression: string;
    value: string;
}
interface OriginalData {
    [key: string]: any;
}
declare class GzipCompression extends CompressionPlugin {
    canCompress(data: any): boolean;
    compress(data: any): Promise<{
        compression: string;
        value: string;
    }>;
    canDecompress(data: CompressedData | Record<string, any>): boolean;
    decompress(data: CompressedData): Promise<OriginalData | null>;
}
declare const _default: () => GzipCompression;
export default _default;
