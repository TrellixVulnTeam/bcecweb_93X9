import { Plugin } from "@webiny/plugins";
import { FieldSortOptions, SortOrder } from "elastic-ts";
import { ContextInterface } from "@webiny/handler/types";
export declare type UnmappedTypes = "date" | "long" | string;
export interface ToSearchValueParams {
    /**
     * Some variable that has a ContextInterface as a base.
     */
    context: ContextInterface;
    /**
     * The value to transform.
     */
    value: any;
    /**
     * When using toSearchValue() in our code we send a field.getPath() value here.
     */
    path: string;
    /**
     * When using toSearchValue() in our code we send a field.getBasePath() value here.
     */
    basePath: string;
}
export interface Params {
    /**
     * Which entity is this plugin for.
     */
    entity: string;
    /**
     * Which field is this plugin for.
     */
    field: string;
    /**
     * Some specific path of a field?
     * Example: createdBy is createdBy.id
     */
    path?: string;
    /**
     * Add a .keyword at the end of the field path?
     */
    keyword?: boolean;
    /**
     * Is the field of a specific type, but possibly not mapped?
     * Happens when inserting a date in string format.
     * You need to cast it as date when running the search/sort to work correctly.
     */
    unmappedType?: UnmappedTypes;
    /**
     * Is the field sortable?
     */
    sortable?: boolean;
    /**
     * Is the field searchable?
     */
    searchable?: boolean;
    /**
     * Used to transform the input value for the search.
     */
    toSearchValue?: (params: ToSearchValueParams) => any;
}
export declare class ElasticsearchFieldPlugin extends Plugin {
    static readonly type = "elasticsearch.fieldDefinition";
    static readonly ALL = "*";
    private readonly _entity;
    private readonly _field;
    private readonly _path;
    private readonly _keyword;
    private readonly _unmappedType;
    private readonly _sortable;
    private readonly _searchable;
    get entity(): string;
    get field(): string;
    get path(): string;
    get keyword(): boolean;
    get unmappedType(): string | undefined;
    get sortable(): boolean;
    get searchable(): boolean;
    constructor(params: Params);
    /**
     * The default sort options. Extend in your own plugin if you want to add more options.
     */
    getSortOptions(order: SortOrder): FieldSortOptions;
    /**
     * The default path generator. Extend in your own plugin if you want to add more options.
     * Field parameter is here because there is a possibility that this is the ALL field plugin, so we need to know which field are we working on.
     */
    getPath(field: string): string;
    /**
     * @see getPath
     *
     * This is the default base path generator. Basically it replaces ALL with given field name.
     */
    getBasePath(field: string): string;
    /**
     * The default transformer. Just returns the value by default.
     * Override to implement what ever is required.
     */
    toSearchValue(params: ToSearchValueParams): any;
}
