{"version":3,"sources":["../../../src/plugins/definition/ElasticsearchFieldPlugin.ts"],"names":["ElasticsearchFieldPlugin","Plugin","entity","_entity","field","_field","path","_path","keyword","_keyword","unmappedType","_unmappedType","sortable","_sortable","searchable","_searchable","constructor","params","undefined","getSortOptions","order","options","unmapped_type","getPath","getBasePath","ALL","toSearchValue","value"],"mappings":";;;;;;;;;;;AAAA;;;;;;AA8DO,MAAMA,wBAAN,SAAuCC,eAAvC,CAA8C;AAYhC,MAANC,MAAM,GAAW;AACxB,WAAO,KAAKC,OAAZ;AACH;;AAEe,MAALC,KAAK,GAAW;AACvB,WAAO,KAAKC,MAAZ;AACH;;AAEc,MAAJC,IAAI,GAAW;AACtB,WAAO,KAAKC,KAAZ;AACH;;AAEiB,MAAPC,OAAO,GAAY;AAC1B,WAAO,KAAKC,QAAZ;AACH;;AAEsB,MAAZC,YAAY,GAAuB;AAC1C,WAAO,KAAKC,aAAZ;AACH;;AAEkB,MAARC,QAAQ,GAAY;AAC3B,WAAO,KAAKC,SAAZ;AACH;;AAEoB,MAAVC,UAAU,GAAY;AAC7B,WAAO,KAAKC,WAAZ;AACH;;AAEDC,EAAAA,WAAW,CAACC,MAAD,EAAiB;AACxB;AADwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAExB,SAAKd,OAAL,GAAec,MAAM,CAACf,MAAtB;AACA,SAAKG,MAAL,GAAcY,MAAM,CAACb,KAArB;AACA,SAAKG,KAAL,GAAaU,MAAM,CAACX,IAAP,IAAeW,MAAM,CAACb,KAAnC;AACA,SAAKK,QAAL,GAAgBQ,MAAM,CAACT,OAAP,KAAmBU,SAAnB,GAA+B,IAA/B,GAAsCD,MAAM,CAACT,OAA7D;AACA,SAAKG,aAAL,GAAqBM,MAAM,CAACP,YAA5B;AACA,SAAKG,SAAL,GAAiBI,MAAM,CAACL,QAAP,KAAoBM,SAApB,GAAgC,IAAhC,GAAuCD,MAAM,CAACL,QAA/D;AACA,SAAKG,WAAL,GAAmBE,MAAM,CAACH,UAAP,KAAsBI,SAAtB,GAAkC,IAAlC,GAAyCD,MAAM,CAACH,UAAnE;AACH;AACD;AACJ;AACA;;;AACWK,EAAAA,cAAc,CAACC,KAAD,EAAqC;AACtD,UAAMC,OAAO,GAAG;AACZD,MAAAA;AADY,KAAhB;;AAGA,QAAI,CAAC,KAAKT,aAAV,EAAyB;AACrB,aAAOU,OAAP;AACH;;AACD,2CACOA,OADP;AAEIC,MAAAA,aAAa,EAAE,KAAKX;AAFxB;AAIH;AACD;AACJ;AACA;AACA;;;AACWY,EAAAA,OAAO,CAACnB,KAAD,EAAwB;AAClC,WAAQ,GAAE,KAAKoB,WAAL,CAAiBpB,KAAjB,CAAwB,GAAE,KAAKK,QAAL,GAAgB,UAAhB,GAA6B,EAAG,EAApE;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACWe,EAAAA,WAAW,CAACpB,KAAD,EAAwB;AACtC,QAAI,KAAKG,KAAL,KAAgB,KAAKS,WAAN,CAA0BS,GAA7C,EAAkD;AAC9C,aAAOrB,KAAP;AACH;;AACD,WAAO,KAAKG,KAAZ;AACH;AACD;AACJ;AACA;AACA;;;AACWmB,EAAAA,aAAa,CAACT,MAAD,EAAmC;AACnD,WAAOA,MAAM,CAACU,KAAd;AACH;;AAzFgD;;;8BAAxC3B,wB,UACqB,+B;8BADrBA,wB,SAEoB,G","sourcesContent":["import { Plugin } from \"@webiny/plugins\";\nimport { FieldSortOptions, SortOrder } from \"elastic-ts\";\nimport { ContextInterface } from \"@webiny/handler/types\";\n\nexport type UnmappedTypes = \"date\" | \"long\" | string;\n\nexport interface ToSearchValueParams {\n    /**\n     * Some variable that has a ContextInterface as a base.\n     */\n    context: ContextInterface;\n    /**\n     * The value to transform.\n     */\n    value: any;\n    /**\n     * When using toSearchValue() in our code we send a field.getPath() value here.\n     */\n    path: string;\n    /**\n     * When using toSearchValue() in our code we send a field.getBasePath() value here.\n     */\n    basePath: string;\n}\nexport interface Params {\n    /**\n     * Which entity is this plugin for.\n     */\n    entity: string;\n    /**\n     * Which field is this plugin for.\n     */\n    field: string;\n    /**\n     * Some specific path of a field?\n     * Example: createdBy is createdBy.id\n     */\n    path?: string;\n    /**\n     * Add a .keyword at the end of the field path?\n     */\n    keyword?: boolean;\n    /**\n     * Is the field of a specific type, but possibly not mapped?\n     * Happens when inserting a date in string format.\n     * You need to cast it as date when running the search/sort to work correctly.\n     */\n    unmappedType?: UnmappedTypes;\n    /**\n     * Is the field sortable?\n     */\n    sortable?: boolean;\n    /**\n     * Is the field searchable?\n     */\n    searchable?: boolean;\n    /**\n     * Used to transform the input value for the search.\n     */\n    toSearchValue?: (params: ToSearchValueParams) => any;\n}\n\nexport class ElasticsearchFieldPlugin extends Plugin {\n    public static readonly type = \"elasticsearch.fieldDefinition\";\n    public static readonly ALL = \"*\";\n\n    private readonly _entity: string;\n    private readonly _field: string;\n    private readonly _path: string;\n    private readonly _keyword: boolean;\n    private readonly _unmappedType: string;\n    private readonly _sortable: boolean;\n    private readonly _searchable: boolean;\n\n    public get entity(): string {\n        return this._entity;\n    }\n\n    public get field(): string {\n        return this._field;\n    }\n\n    public get path(): string {\n        return this._path;\n    }\n\n    public get keyword(): boolean {\n        return this._keyword;\n    }\n\n    public get unmappedType(): string | undefined {\n        return this._unmappedType;\n    }\n\n    public get sortable(): boolean {\n        return this._sortable;\n    }\n\n    public get searchable(): boolean {\n        return this._searchable;\n    }\n\n    constructor(params: Params) {\n        super();\n        this._entity = params.entity;\n        this._field = params.field;\n        this._path = params.path || params.field;\n        this._keyword = params.keyword === undefined ? true : params.keyword;\n        this._unmappedType = params.unmappedType;\n        this._sortable = params.sortable === undefined ? true : params.sortable;\n        this._searchable = params.searchable === undefined ? true : params.searchable;\n    }\n    /**\n     * The default sort options. Extend in your own plugin if you want to add more options.\n     */\n    public getSortOptions(order: SortOrder): FieldSortOptions {\n        const options = {\n            order\n        };\n        if (!this._unmappedType) {\n            return options;\n        }\n        return {\n            ...options,\n            unmapped_type: this._unmappedType\n        };\n    }\n    /**\n     * The default path generator. Extend in your own plugin if you want to add more options.\n     * Field parameter is here because there is a possibility that this is the ALL field plugin, so we need to know which field are we working on.\n     */\n    public getPath(field: string): string {\n        return `${this.getBasePath(field)}${this._keyword ? \".keyword\" : \"\"}`;\n    }\n    /**\n     * @see getPath\n     *\n     * This is the default base path generator. Basically it replaces ALL with given field name.\n     */\n    public getBasePath(field: string): string {\n        if (this._path === (this.constructor as any).ALL) {\n            return field;\n        }\n        return this._path;\n    }\n    /**\n     * The default transformer. Just returns the value by default.\n     * Override to implement what ever is required.\n     */\n    public toSearchValue(params: ToSearchValueParams): any {\n        return params.value;\n    }\n}\n"],"file":"ElasticsearchFieldPlugin.js"}