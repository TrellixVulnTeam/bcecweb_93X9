"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ungzip = exports.gzip = void 0;

var _CompressionPlugin = require("./definition/CompressionPlugin");

var _zlib = _interopRequireDefault(require("zlib"));

const gzip = (input, options) => {
  return new Promise(function (resolve, reject) {
    _zlib.default.gzip(input, options, function (error, result) {
      if (!error) {
        resolve(result);
      } else {
        reject(error);
      }
    });
  });
};

exports.gzip = gzip;

const ungzip = (input, options) => {
  return new Promise(function (resolve, reject) {
    _zlib.default.gunzip(input, options, function (error, result) {
      if (!error) {
        resolve(result);
      } else {
        reject(error);
      }
    });
  });
};

exports.ungzip = ungzip;
const GZIP = "gzip";
const TO_STORAGE_ENCODING = "base64";
const FROM_STORAGE_ENCODING = "utf8";

const convertToBuffer = value => {
  if (typeof value === "string") {
    return Buffer.from(value, TO_STORAGE_ENCODING);
  }

  return value;
};

class GzipCompression extends _CompressionPlugin.CompressionPlugin {
  canCompress(data) {
    /**
     * If already compressed, skip this.
     */
    if (data.compression) {
      if (data.compression !== "GZIP") {
        console.log(`Data is already compressed with "${data.compression}".`);
      }

      return false;
    }

    return true;
  }

  async compress(data) {
    const value = await gzip(JSON.stringify(data));
    return {
      compression: GZIP,
      value: value.toString(TO_STORAGE_ENCODING)
    };
  }

  canDecompress(data) {
    if (!data || !data.compression) {
      return false;
    } else if (data.compression !== GZIP) {
      console.log(`Could not decompress given data since its compression is not "${GZIP}". It is "${data.compression}".`);
      return false;
    }

    return true;
  }

  async decompress(data) {
    try {
      const buf = await ungzip(convertToBuffer(data.value));
      const value = buf.toString(FROM_STORAGE_ENCODING);
      return JSON.parse(value);
    } catch (ex) {
      return null;
    }
  }

}

var _default = () => {
  return new GzipCompression();
};

exports.default = _default;
//# sourceMappingURL=GzipCompression.js.map