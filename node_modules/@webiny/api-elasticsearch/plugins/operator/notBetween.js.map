{"version":3,"sources":["../../../src/plugins/operator/notBetween.ts"],"names":["ElasticsearchQueryBuilderOperatorNotBetweenPlugin","ElasticsearchQueryBuilderOperatorPlugin","getOperator","apply","query","params","value","basePath","Array","isArray","Error","length","gte","lte","must_not","push","range"],"mappings":";;;;;;;;;;;AAAA;;AAGO,MAAMA,iDAAN,SAAgEC,gFAAhE,CAAwG;AAAA;AAAA;AAAA,gDAC7F,wDAD6F;AAAA;;AAGpGC,EAAAA,WAAW,GAAW;AACzB,WAAO,aAAP;AACH;;AAEMC,EAAAA,KAAK,CACRC,KADQ,EAERC,MAFQ,EAGJ;AACJ,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBF,MAA5B;;AACA,QAAIG,KAAK,CAACC,OAAN,CAAcH,KAAd,MAAyB,KAA7B,EAAoC;AAChC,YAAM,IAAII,KAAJ,CACD,iCAAgCH,QAAS,uDADxC,CAAN;AAGH,KAJD,MAIO,IAAID,KAAK,CAACK,MAAN,KAAiB,CAArB,EAAwB;AAC3B,YAAM,IAAID,KAAJ,CACD,uDAAsDH,QAAS,cAD9D,CAAN;AAGH,KAVG,CAWJ;AACA;;;AACA,UAAM,CAACK,GAAD,EAAMC,GAAN,IAAaP,KAAnB;AACAF,IAAAA,KAAK,CAACU,QAAN,CAAeC,IAAf,CAAoB;AAChBC,MAAAA,KAAK,EAAE;AACH,SAACT,QAAD,GAAY;AACRM,UAAAA,GADQ;AAERD,UAAAA;AAFQ;AADT;AADS,KAApB;AAQH;;AAhC0G","sourcesContent":["import { ElasticsearchQueryBuilderOperatorPlugin } from \"~/plugins/definition/ElasticsearchQueryBuilderOperatorPlugin\";\nimport { ElasticsearchBoolQueryConfig, ElasticsearchQueryBuilderArgsPlugin } from \"~/types\";\n\nexport class ElasticsearchQueryBuilderOperatorNotBetweenPlugin extends ElasticsearchQueryBuilderOperatorPlugin {\n    public name = \"elasticsearch.queryBuilder.operator.notBetween.default\";\n\n    public getOperator(): string {\n        return \"not_between\";\n    }\n\n    public apply(\n        query: ElasticsearchBoolQueryConfig,\n        params: ElasticsearchQueryBuilderArgsPlugin\n    ): void {\n        const { value, basePath } = params;\n        if (Array.isArray(value) === false) {\n            throw new Error(\n                `You cannot filter field path \"${basePath}\" with between query and not send an array of values.`\n            );\n        } else if (value.length !== 2) {\n            throw new Error(\n                `You must pass 2 values in the array for field path \"${basePath}\" filtering.`\n            );\n        }\n        // we take gte first because it should be a lesser value than lte, eg [5, 10]\n        // 6 >= gte && 6 <= lte === true which in this case it means that record will not match\n        const [gte, lte] = value;\n        query.must_not.push({\n            range: {\n                [basePath]: {\n                    lte,\n                    gte\n                }\n            }\n        });\n    }\n}\n"],"file":"notBetween.js"}