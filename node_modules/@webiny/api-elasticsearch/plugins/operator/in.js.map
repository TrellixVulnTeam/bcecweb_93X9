{"version":3,"sources":["../../../src/plugins/operator/in.ts"],"names":["ElasticsearchQueryBuilderOperatorInPlugin","ElasticsearchQueryBuilderOperatorPlugin","getOperator","apply","query","params","value","values","path","basePath","isArray","Array","length","Error","useBasePath","must","push","terms"],"mappings":";;;;;;;;;;;AAAA;;AAGO,MAAMA,yCAAN,SAAwDC,gFAAxD,CAAgG;AAAA;AAAA;AAAA,gDACrF,gDADqF;AAAA;;AAG5FC,EAAAA,WAAW,GAAW;AACzB,WAAO,IAAP;AACH;;AAEMC,EAAAA,KAAK,CACRC,KADQ,EAERC,MAFQ,EAGJ;AACJ,UAAM;AAAEC,MAAAA,KAAK,EAAEC,MAAT;AAAiBC,MAAAA,IAAjB;AAAuBC,MAAAA;AAAvB,QAAoCJ,MAA1C;AACA,UAAMK,OAAO,GAAGC,KAAK,CAACD,OAAN,CAAcH,MAAd,CAAhB;;AACA,QAAIG,OAAO,KAAK,KAAZ,IAAqBH,MAAM,CAACK,MAAP,KAAkB,CAA3C,EAA8C;AAC1C,YAAM,IAAIC,KAAJ,CACD,4BAA2BL,IAAK,uDAD/B,CAAN;AAGH;;AAED,QAAIM,WAAW,GAAG,KAAlB,CATI,CAUJ;;AACA,SAAK,MAAMR,KAAX,IAAoBC,MAApB,EAA4B;AACxB,UAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC3BQ,QAAAA,WAAW,GAAG,IAAd;AACA;AACH;AACJ;;AAEDV,IAAAA,KAAK,CAACW,IAAN,CAAWC,IAAX,CAAgB;AACZC,MAAAA,KAAK,EAAE;AACH,SAACH,WAAW,GAAGL,QAAH,GAAcD,IAA1B,GAAiCD;AAD9B;AADK,KAAhB;AAKH;;AAjCkG","sourcesContent":["import { ElasticsearchQueryBuilderOperatorPlugin } from \"~/plugins/definition/ElasticsearchQueryBuilderOperatorPlugin\";\nimport { ElasticsearchBoolQueryConfig, ElasticsearchQueryBuilderArgsPlugin } from \"~/types\";\n\nexport class ElasticsearchQueryBuilderOperatorInPlugin extends ElasticsearchQueryBuilderOperatorPlugin {\n    public name = \"elasticsearch.queryBuilder.operator.in.default\";\n\n    public getOperator(): string {\n        return \"in\";\n    }\n\n    public apply(\n        query: ElasticsearchBoolQueryConfig,\n        params: ElasticsearchQueryBuilderArgsPlugin\n    ): void {\n        const { value: values, path, basePath } = params;\n        const isArray = Array.isArray(values);\n        if (isArray === false || values.length === 0) {\n            throw new Error(\n                `You cannot filter field \"${path}\" with \"in\" operator and not send an array of values.`\n            );\n        }\n\n        let useBasePath = false;\n        // Only use \".keyword\" if all of the provided values are strings.\n        for (const value of values) {\n            if (typeof value !== \"string\") {\n                useBasePath = true;\n                break;\n            }\n        }\n\n        query.must.push({\n            terms: {\n                [useBasePath ? basePath : path]: values\n            }\n        });\n    }\n}\n"],"file":"in.js"}