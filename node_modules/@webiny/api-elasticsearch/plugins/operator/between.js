"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ElasticsearchQueryBuilderOperatorBetweenPlugin = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _ElasticsearchQueryBuilderOperatorPlugin = require("../definition/ElasticsearchQueryBuilderOperatorPlugin");

class ElasticsearchQueryBuilderOperatorBetweenPlugin extends _ElasticsearchQueryBuilderOperatorPlugin.ElasticsearchQueryBuilderOperatorPlugin {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "name", "elasticsearch.queryBuilder.operator.between.default");
  }

  getOperator() {
    return "between";
  }

  apply(query, params) {
    const {
      value,
      basePath
    } = params;

    if (Array.isArray(value) === false) {
      throw new Error(`You cannot filter field path "${basePath}" with between query and not send an array of values.`);
    } else if (value.length !== 2) {
      throw new Error(`You must pass 2 values in the array for field path "${basePath}" filtering.`);
    } // we take gte first because it should be a lesser value than lte, eg [5, 10]
    // 6 >= gte && 6 <= lte


    const [gte, lte] = value;
    query.must.push({
      range: {
        [basePath]: {
          lte,
          gte
        }
      }
    });
  }

}

exports.ElasticsearchQueryBuilderOperatorBetweenPlugin = ElasticsearchQueryBuilderOperatorBetweenPlugin;
//# sourceMappingURL=between.js.map