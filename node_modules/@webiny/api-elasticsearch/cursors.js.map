{"version":3,"sources":["../src/cursors.ts"],"names":["encodeCursor","cursor","undefined","Buffer","from","JSON","stringify","toString","decodeCursor","parse","ex","console","log","message"],"mappings":";;;;;;;AAAA;AACA;AACA;AACO,MAAMA,YAAY,GAAIC,MAAD,IAAyC;AACjE,MAAI,CAACA,MAAL,EAAa;AACT,WAAOC,SAAP;AACH;;AAED,SAAOC,MAAM,CAACC,IAAP,CAAYC,IAAI,CAACC,SAAL,CAAeL,MAAf,CAAZ,EAAoCM,QAApC,CAA6C,QAA7C,CAAP;AACH,CANM;AAOP;AACA;AACA;AACA;;;;;AACO,MAAMC,YAAY,GAAIP,MAAD,IAAyC;AACjE,MAAI,CAACA,MAAL,EAAa;AACT,WAAOC,SAAP;AACH;;AACD,MAAI;AACA,WAAOG,IAAI,CAACI,KAAL,CAAWN,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoB,QAApB,EAA8BM,QAA9B,CAAuC,OAAvC,CAAX,CAAP;AACH,GAFD,CAEE,OAAOG,EAAP,EAAW;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAYF,EAAE,CAACG,OAAf;AACH;;AACD,SAAOX,SAAP;AACH,CAVM","sourcesContent":["/**\n * Encode a received cursor value into something that can be passed on to the user.\n */\nexport const encodeCursor = (cursor?: string): string | undefined => {\n    if (!cursor) {\n        return undefined;\n    }\n\n    return Buffer.from(JSON.stringify(cursor)).toString(\"base64\");\n};\n/**\n * Decode a received value into a Elasticsearch cursor.\n * If no value is received or is not decodable, return undefined.\n */\nexport const decodeCursor = (cursor?: string): string | undefined => {\n    if (!cursor) {\n        return undefined;\n    }\n    try {\n        return JSON.parse(Buffer.from(cursor, \"base64\").toString(\"ascii\"));\n    } catch (ex) {\n        console.log(ex.message);\n    }\n    return undefined;\n};\n"],"file":"cursors.js"}