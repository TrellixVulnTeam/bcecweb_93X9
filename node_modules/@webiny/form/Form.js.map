{"version":3,"sources":["../src/Form.tsx"],"names":["React","set","createBind","linkState","ValidationError","Form","data","props","originalData","wasSubmitted","validation","onInvalid","event","preventDefault","setState","validate","then","valid","state","inputNames","Object","keys","inputs","forEach","name","defaultValue","onSubmit","promises","map","validators","length","hasValue","isInputValid","isValid","undefined","shouldValidate","validateInput","result","Promise","all","results","every","value","res","setTimeout","validateOnFirstSubmit","resolve","hasValidators","formData","isValidating","executeValidators","validationResults","message","catch","validationError","getMessage","beforeChange","afterChange","onChangeFns","linkStateChange","baseOnChange","newValue","cb","onChange","validateFns","e","submitOnEnter","metaKey","ctrlKey","key","isDefaultPrevented","target","blur","stopPropagation","submit","lastRender","includes","children","Error","createElement","onKeyDown","__onKeyDown","setValue","form","Bind","invalidFields","Component","disabled","Array","isArray","i","validator"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport _ from \"lodash\";\nimport set from \"lodash/fp/set\";\nimport { createBind } from \"./Bind\";\nimport { linkState } from \"./linkState\";\nimport { BindComponent } from \"./Bind\";\nimport ValidationError from \"./ValidationError\";\n\nexport type FormRenderPropParamsSubmit = (event?: React.SyntheticEvent<any, any>) => Promise<void>;\n\nexport type FormSetValue = (name: string, value: any) => void;\n\nexport type FormRenderPropParams = {\n    data: { [key: string]: any };\n    form: Form;\n    submit: FormRenderPropParamsSubmit;\n    Bind: BindComponent;\n    setValue: FormSetValue;\n};\n\nexport type FormRenderProp = (params: FormRenderPropParams) => React.ReactElement;\n\nexport type FormData = { [key: string]: any };\n\nexport type Validation = { [key: string]: any };\n\nexport type FormOnSubmit = (data: FormData, form?: Form) => void;\n\nexport type FormProps = {\n    invalidFields?: { [key: string]: any };\n    data?: FormData;\n    disabled?: boolean | Function;\n    validateOnFirstSubmit?: boolean;\n    submitOnEnter?: boolean;\n    onSubmit?: FormOnSubmit;\n    onInvalid?: () => void;\n    onChange?: FormOnSubmit;\n    children: FormRenderProp;\n};\n\n/**\n * Use when creating standalone form components which receives props from the parent Bind component.\n */\nexport interface FormComponentProps {\n    validation?: {\n        /* Is form element's value valid? */\n        isValid: boolean;\n        /* Error message if value is not valid. */\n        message: string;\n        /* Any validation result returned by the validator. */\n        results?: { [key: string]: any };\n    };\n\n    /* Provided by <Form> component to perform validation when value has changed. */\n    validate?: () => Promise<boolean | any>;\n\n    /* Form component's value. */\n    value?: any;\n\n    /* A callback that is executed each time a value is changed. */\n    onChange?: (value: any) => void;\n}\n\ntype State = {\n    data: FormData;\n    originalData: FormData;\n    wasSubmitted: boolean;\n    validation: Validation;\n};\n\nexport class Form extends React.Component<FormProps, State> {\n    static defaultProps = {\n        data: {},\n        disabled: false,\n        validateOnFirstSubmit: false,\n        onSubmit: null\n    };\n\n    state = {\n        data: this.props.data || {},\n        originalData: this.props.data || {},\n        wasSubmitted: false,\n        validation: {}\n    };\n\n    isValid = null;\n    inputs = {};\n    lastRender = [];\n    validateFns = {};\n    onChangeFns = {};\n    Bind = createBind(this);\n\n    static getDerivedStateFromProps({ data, invalidFields = {} }: FormProps, state: State) {\n        // If we received new `data`, overwrite current `data` in the state\n        if (!_.isEqual(state.originalData, data)) {\n            return { data, originalData: data, validation: {} };\n        }\n\n        // Check for validation errors\n        let validation = _.cloneDeep(state.validation);\n        if (_.isPlainObject(invalidFields) && Object.keys(invalidFields).length) {\n            _.each(invalidFields, (message, name) => {\n                validation = {\n                    ...validation,\n                    [name]: {\n                        isValid: false,\n                        message\n                    }\n                };\n            });\n        }\n\n        // Return new state only if something has changed\n        return !_.isEqual(validation, state.validation) ? { validation } : null;\n    }\n\n    get data() {\n        return this.state.data;\n    }\n\n    static executeValidators = async (\n        value: any,\n        validators: Function | Array<Function>,\n        formData: Object = {}\n    ): Promise<any> => {\n        validators = Array.isArray(validators) ? [...validators] : [validators];\n\n        const results = {};\n        for (let i = 0; i < validators.length; i++) {\n            const validator = validators[i];\n            try {\n                await Promise.resolve(validator(value, formData))\n                    .then(result => {\n                        if (result instanceof Error) {\n                            throw result;\n                        }\n                        results[i] = result;\n                    })\n                    .catch(e => {\n                        throw new ValidationError(e.message, value);\n                    });\n            } catch (e) {\n                throw new ValidationError(e.message, value);\n            }\n        }\n\n        return results;\n    };\n\n    componentDidUpdate() {\n        Object.keys(this.inputs).forEach(name => {\n            if (!this.lastRender.includes(name)) {\n                delete this.inputs[name];\n                this.setState((state: State) => {\n                    const validation = { ...state.validation };\n                    delete validation[name];\n                    return { validation };\n                });\n            }\n        });\n    }\n\n    onInvalid = () => {\n        if (typeof this.props.onInvalid === \"function\") {\n            this.props.onInvalid();\n        }\n    };\n\n    /**\n     * MAIN FORM ACTION METHODS\n     */\n    submit = (event?: React.SyntheticEvent<any, any>): Promise<any> => {\n        // If event is present - prevent default behaviour\n        if (event && event.preventDefault) {\n            event.preventDefault();\n        }\n\n        this.setState({ wasSubmitted: true });\n\n        return this.validate().then(valid => {\n            if (valid) {\n                let { data } = this.state;\n\n                // Make sure all current inputs have a value in the model (defaultValues do not exist in form data)\n                const inputNames = Object.keys(this.inputs);\n                inputNames.forEach(name => {\n                    const defaultValue = this.inputs[name].defaultValue;\n                    if (!_.has(data, name) && typeof defaultValue !== \"undefined\") {\n                        data = set(name, defaultValue, data);\n                    }\n                });\n\n                if (this.props.onSubmit) {\n                    return this.props.onSubmit(data, this);\n                }\n                return;\n            }\n            return this.onInvalid();\n        });\n    };\n\n    validate = async () => {\n        const { data = {}, validation = {} } = this.state;\n        const promises = Object.keys(this.inputs).map(async (name): Promise<boolean> => {\n            const { validators } = this.inputs[name];\n            if (!validators || validators.length === 0) {\n                return true;\n            }\n            const hasValue = !!data[name];\n            const isInputValid = validation[name] ? validation[name].isValid : undefined;\n            const shouldValidate = !hasValue || (hasValue && isInputValid !== true);\n            if (!shouldValidate) {\n                return true;\n            }\n            if (isInputValid) {\n                return true;\n            }\n            const result = await this.validateInput(name);\n            if (result === false) {\n                return false;\n            }\n            return true;\n        });\n\n        const results = await Promise.all(promises);\n        // all values must be true to pass the validation\n        return results.every(value => value === true);\n    };\n\n    validateInput = async (name: string) => {\n        // Want to know why this nonsense is here?\n        // When you have a <Tabs> component which has an <Input>, and you try to switch tabs\n        // while your input is focused, Tabs end up in an eternal switching loop.\n        // I know this is a `webiny-form` package and has nothing to do with\n        // who uses it from the outside, but there is no time to come up with a better solution :(\n        await new Promise(res => setTimeout(res, 10));\n\n        // Proceed with validation...\n        if ((this.props.validateOnFirstSubmit && !this.state.wasSubmitted) || !this.inputs[name]) {\n            return Promise.resolve(null);\n        }\n        const value = _.get(this.state.data, name, this.inputs[name].defaultValue);\n        const { validators } = this.inputs[name];\n        const hasValidators = _.keys(validators).length;\n\n        // Validate input\n        const formData = {\n            inputs: this.inputs,\n            data: { ...this.state.data }\n        };\n\n        this.setState(state => ({\n            ...state,\n            validation: {\n                ...state.validation,\n                [name]: {\n                    ...state.validation[name],\n                    isValidating: true\n                }\n            }\n        }));\n\n        return Promise.resolve(Form.executeValidators(value, validators, formData))\n            .then(validationResults => {\n                const isValid = hasValidators ? (value === null ? null : true) : null;\n\n                this.setState(state => ({\n                    ...state,\n                    validation: {\n                        ...state.validation,\n                        [name]: {\n                            isValid,\n                            message: null,\n                            results: validationResults\n                        }\n                    }\n                }));\n\n                return validationResults;\n            })\n            .catch(validationError => {\n                // Set component state to reflect validation error\n                this.setState(state => ({\n                    ...state,\n                    validation: {\n                        ...state.validation,\n                        [name]: {\n                            isValid: false,\n                            message: validationError.getMessage(),\n                            results: false\n                        }\n                    }\n                }));\n\n                return false;\n            });\n    };\n\n    getOnChangeFn = ({\n        name,\n        beforeChange,\n        afterChange\n    }: {\n        name: string;\n        beforeChange: any;\n        afterChange: any;\n    }) => {\n        if (!this.onChangeFns[name]) {\n            const linkStateChange = linkState(this, `data.${name}`);\n\n            const baseOnChange = (newValue, cb) => {\n                // When linkState is done processing the value change...\n                return linkStateChange(newValue, cb).then(value => {\n                    // call the Form onChange with updated data\n                    if (typeof this.props.onChange === \"function\") {\n                        this.props.onChange({ ...this.state.data }, this);\n                    }\n\n                    // Execute onAfterChange\n                    afterChange && afterChange(value, this);\n\n                    return value;\n                });\n            };\n\n            const onChange = beforeChange\n                ? newValue => beforeChange(newValue, baseOnChange)\n                : baseOnChange;\n\n            this.onChangeFns[name] = onChange;\n        }\n\n        return this.onChangeFns[name];\n    };\n\n    getValidateFn = (name: string) => {\n        if (!this.validateFns[name]) {\n            this.validateFns[name] = () => this.validateInput(name);\n        }\n\n        return this.validateFns[name];\n    };\n\n    setValue = (name: string, value: any) => {\n        this.onChangeFns[name](value);\n    };\n\n    reset = () => {\n        this.setState({ data: _.cloneDeep(this.state.originalData) });\n    };\n\n    __onKeyDown = (e: React.KeyboardEvent<any>) => {\n        const { submitOnEnter = false } = this.props;\n        if (\n            (submitOnEnter || e.metaKey || e.ctrlKey) &&\n            e.key === \"Enter\" &&\n            !e.isDefaultPrevented()\n        ) {\n            // Need to blur current target in case of input fields to trigger validation\n            // @ts-ignore\n            e.target && e.target.blur();\n            e.preventDefault();\n            e.stopPropagation();\n            // Fire submit with a small delay to allow input validation to complete.\n            // Not an ideal solution but works fine at this point. Will revisit this later.\n            setTimeout(() => this.submit(), 100);\n        }\n    };\n\n    render() {\n        const children = this.props.children;\n        if (!_.isFunction(children)) {\n            throw new Error(\"Form must have a function as its only child!\");\n        }\n\n        this.lastRender = [];\n\n        return React.createElement(\n            \"webiny-form-container\",\n            { onKeyDown: this.__onKeyDown },\n            children({\n                data: _.cloneDeep(this.state.data),\n                setValue: this.setValue,\n                form: this,\n                submit: this.submit,\n                Bind: this.Bind\n            })\n        );\n    }\n}\n"],"file":"Form.js"}