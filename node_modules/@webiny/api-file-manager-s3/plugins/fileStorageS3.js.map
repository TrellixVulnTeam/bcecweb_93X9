{"version":3,"sources":["../../src/plugins/fileStorageS3.ts"],"names":["S3_BUCKET","process","env","FilePhysicalStoragePlugin","upload","args","settings","buffer","data","preSignedPostPayload","file","response","ok","Error","delete","key","s3","S3","deleteObject","Bucket","Key","promise"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAACC,GAAR,CAAYF,SAA9B;;eAEe,MAAiC;AAC5C,SAAO,IAAIG,oDAAJ,CAA8B;AACjCC,IAAAA,MAAM,EAAE,MAAMC,IAAN,IAAc;AAClB,YAAM;AAAEC,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,UAAgCF,IAAtC;AAAA,YAA6BG,IAA7B,0CAAsCH,IAAtC;AAEA,YAAM;AAAEG,QAAAA,IAAI,EAAEC,oBAAR;AAA8BC,QAAAA;AAA9B,UAAuC,MAAM,sCAC/CF,IAD+C,EAE/CF,QAF+C,CAAnD;AAKA,YAAMK,QAAQ,GAAG,MAAM,4BAAeJ,MAAf,EAAuBE,oBAAvB,CAAvB;;AACA,UAAI,CAACE,QAAQ,CAACC,EAAd,EAAkB;AACd,cAAMC,KAAK,CAAC,wBAAD,CAAX;AACH;;AAED,aAAO;AACHL,QAAAA,IAAI,EAAEC,oBADH;AAEHC,QAAAA;AAFG,OAAP;AAIH,KAlBgC;AAmBjCI,IAAAA,MAAM,EAAE,MAAMT,IAAN,IAAc;AAClB,YAAM;AAAEU,QAAAA;AAAF,UAAUV,IAAhB;AACA,YAAMW,EAAE,GAAG,IAAIC,UAAJ,EAAX;AAEA,YAAMD,EAAE,CACHE,YADC,CACY;AACVC,QAAAA,MAAM,EAAEnB,SADE;AAEVoB,QAAAA,GAAG,EAAEL;AAFK,OADZ,EAKDM,OALC,EAAN;AAMH;AA7BgC,GAA9B,CAAP;AA+BH,C","sourcesContent":["import S3 from \"aws-sdk/clients/s3\";\nimport getPresignedPostPayload from \"../utils/getPresignedPostPayload\";\nimport uploadFileToS3 from \"../utils/uploadFileToS3\";\nimport { FilePhysicalStoragePlugin } from \"@webiny/api-file-manager/plugins/definitions/FilePhysicalStoragePlugin\";\n\nconst S3_BUCKET = process.env.S3_BUCKET;\n\nexport default (): FilePhysicalStoragePlugin => {\n    return new FilePhysicalStoragePlugin({\n        upload: async args => {\n            const { settings, buffer, ...data } = args;\n\n            const { data: preSignedPostPayload, file } = await getPresignedPostPayload(\n                data,\n                settings\n            );\n\n            const response = await uploadFileToS3(buffer, preSignedPostPayload);\n            if (!response.ok) {\n                throw Error(\"Unable to upload file.\");\n            }\n\n            return {\n                data: preSignedPostPayload,\n                file\n            };\n        },\n        delete: async args => {\n            const { key } = args;\n            const s3 = new S3();\n\n            await s3\n                .deleteObject({\n                    Bucket: S3_BUCKET,\n                    Key: key\n                })\n                .promise();\n        }\n    });\n};\n"],"file":"fileStorageS3.js"}