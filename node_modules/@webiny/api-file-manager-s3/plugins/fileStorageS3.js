"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _s = _interopRequireDefault(require("aws-sdk/clients/s3"));

var _getPresignedPostPayload = _interopRequireDefault(require("../utils/getPresignedPostPayload"));

var _uploadFileToS = _interopRequireDefault(require("../utils/uploadFileToS3"));

var _FilePhysicalStoragePlugin = require("@webiny/api-file-manager/plugins/definitions/FilePhysicalStoragePlugin");

const _excluded = ["settings", "buffer"];
const S3_BUCKET = process.env.S3_BUCKET;

var _default = () => {
  return new _FilePhysicalStoragePlugin.FilePhysicalStoragePlugin({
    upload: async args => {
      const {
        settings,
        buffer
      } = args,
            data = (0, _objectWithoutProperties2.default)(args, _excluded);
      const {
        data: preSignedPostPayload,
        file
      } = await (0, _getPresignedPostPayload.default)(data, settings);
      const response = await (0, _uploadFileToS.default)(buffer, preSignedPostPayload);

      if (!response.ok) {
        throw Error("Unable to upload file.");
      }

      return {
        data: preSignedPostPayload,
        file
      };
    },
    delete: async args => {
      const {
        key
      } = args;
      const s3 = new _s.default();
      await s3.deleteObject({
        Bucket: S3_BUCKET,
        Key: key
      }).promise();
    }
  });
};

exports.default = _default;
//# sourceMappingURL=fileStorageS3.js.map