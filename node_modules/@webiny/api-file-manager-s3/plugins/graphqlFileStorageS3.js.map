{"version":3,"sources":["../../src/plugins/graphqlFileStorageS3.ts"],"names":["BATCH_UPLOAD_MAX_FILES","plugin","type","name","schema","typeDefs","resolvers","FmQuery","getPreSignedPostPayload","root","args","context","rwd","data","settings","fileManager","getSettings","response","Response","e","ErrorResponse","message","code","getPreSignedPostPayloads","files","Array","isArray","length","promises","i","item","push","Promise","all"],"mappings":"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","sourcesContent":["import { GraphQLSchemaPlugin } from \"@webiny/handler-graphql/types\";\nimport { ErrorResponse, Response } from \"@webiny/handler-graphql/responses\";\nimport checkBasePermissions from \"@webiny/api-file-manager/plugins/crud/utils/checkBasePermissions\";\nimport { FileManagerContext } from \"@webiny/api-file-manager/types\";\nimport getPresignedPostPayload from \"../utils/getPresignedPostPayload\";\n\nconst BATCH_UPLOAD_MAX_FILES = 20;\n\nconst plugin: GraphQLSchemaPlugin<FileManagerContext> = {\n    type: \"graphql-schema\",\n    name: \"graphql-schema-api-file-manager-s3\",\n    schema: {\n        typeDefs: /* GraphQL */ `\n            input PreSignedPostPayloadInput {\n                name: String!\n                type: String!\n                size: Int!\n            }\n\n            type GetPreSignedPostPayloadResponseDataFile {\n                name: String\n                type: String\n                size: Int\n                key: String\n            }\n\n            type GetPreSignedPostPayloadResponseData {\n                # Contains data that is necessary for initiating a file upload.\n                data: JSON\n                file: UploadFileResponseDataFile\n            }\n\n            type GetPreSignedPostPayloadResponse {\n                error: FileError\n                data: GetPreSignedPostPayloadResponseData\n            }\n\n            type GetPreSignedPostPayloadsResponse {\n                error: FileError\n                data: [GetPreSignedPostPayloadResponseData]!\n            }\n\n            extend type FmQuery {\n                getPreSignedPostPayload(\n                    data: PreSignedPostPayloadInput!\n                ): GetPreSignedPostPayloadResponse\n                getPreSignedPostPayloads(\n                    data: [PreSignedPostPayloadInput]!\n                ): GetPreSignedPostPayloadsResponse\n            }\n        `,\n        resolvers: {\n            FmQuery: {\n                getPreSignedPostPayload: async (root, args, context) => {\n                    try {\n                        await checkBasePermissions(context, { rwd: \"w\" });\n\n                        const { data } = args;\n                        const settings = await context.fileManager.settings.getSettings();\n                        const response = await getPresignedPostPayload(data, settings);\n\n                        return new Response(response);\n                    } catch (e) {\n                        return new ErrorResponse({\n                            message: e.message,\n                            code: e.code,\n                            data: e.data\n                        });\n                    }\n                },\n                getPreSignedPostPayloads: async (root, args, context) => {\n                    await checkBasePermissions(context, { rwd: \"w\" });\n\n                    const { data: files } = args;\n                    if (!Array.isArray(files)) {\n                        return new ErrorResponse({\n                            code: \"UPLOAD_FILES_NON_ARRAY\",\n                            message: `\"data\" argument must be an array.`\n                        });\n                    }\n\n                    if (files.length === 0) {\n                        return new ErrorResponse({\n                            code: \"UPLOAD_FILES_MIN_FILES\",\n                            message: `\"data\" argument must contain at least one file.`\n                        });\n                    }\n\n                    if (files.length > BATCH_UPLOAD_MAX_FILES) {\n                        return new ErrorResponse({\n                            code: \"UPLOAD_FILES_MAX_FILES\",\n                            message: `\"data\" argument must not contain more than ${BATCH_UPLOAD_MAX_FILES} files.`\n                        });\n                    }\n\n                    try {\n                        const settings = await context.fileManager.settings.getSettings();\n\n                        const promises = [];\n                        for (let i = 0; i < files.length; i++) {\n                            const item = files[i];\n                            promises.push(getPresignedPostPayload(item, settings));\n                        }\n\n                        return new Response(await Promise.all(promises));\n                    } catch (e) {\n                        return new ErrorResponse({\n                            message: e.message,\n                            code: e.code,\n                            data: e.data\n                        });\n                    }\n                }\n            }\n        }\n    }\n};\n\nexport default plugin;\n"],"file":"graphqlFileStorageS3.js"}