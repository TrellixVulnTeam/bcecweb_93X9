"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _responses = require("@webiny/handler-graphql/responses");

var _checkBasePermissions = _interopRequireDefault(require("@webiny/api-file-manager/plugins/crud/utils/checkBasePermissions"));

var _getPresignedPostPayload = _interopRequireDefault(require("../utils/getPresignedPostPayload"));

const BATCH_UPLOAD_MAX_FILES = 20;
const plugin = {
  type: "graphql-schema",
  name: "graphql-schema-api-file-manager-s3",
  schema: {
    typeDefs:
    /* GraphQL */
    `
            input PreSignedPostPayloadInput {
                name: String!
                type: String!
                size: Int!
            }

            type GetPreSignedPostPayloadResponseDataFile {
                name: String
                type: String
                size: Int
                key: String
            }

            type GetPreSignedPostPayloadResponseData {
                # Contains data that is necessary for initiating a file upload.
                data: JSON
                file: UploadFileResponseDataFile
            }

            type GetPreSignedPostPayloadResponse {
                error: FileError
                data: GetPreSignedPostPayloadResponseData
            }

            type GetPreSignedPostPayloadsResponse {
                error: FileError
                data: [GetPreSignedPostPayloadResponseData]!
            }

            extend type FmQuery {
                getPreSignedPostPayload(
                    data: PreSignedPostPayloadInput!
                ): GetPreSignedPostPayloadResponse
                getPreSignedPostPayloads(
                    data: [PreSignedPostPayloadInput]!
                ): GetPreSignedPostPayloadsResponse
            }
        `,
    resolvers: {
      FmQuery: {
        getPreSignedPostPayload: async (root, args, context) => {
          try {
            await (0, _checkBasePermissions.default)(context, {
              rwd: "w"
            });
            const {
              data
            } = args;
            const settings = await context.fileManager.settings.getSettings();
            const response = await (0, _getPresignedPostPayload.default)(data, settings);
            return new _responses.Response(response);
          } catch (e) {
            return new _responses.ErrorResponse({
              message: e.message,
              code: e.code,
              data: e.data
            });
          }
        },
        getPreSignedPostPayloads: async (root, args, context) => {
          await (0, _checkBasePermissions.default)(context, {
            rwd: "w"
          });
          const {
            data: files
          } = args;

          if (!Array.isArray(files)) {
            return new _responses.ErrorResponse({
              code: "UPLOAD_FILES_NON_ARRAY",
              message: `"data" argument must be an array.`
            });
          }

          if (files.length === 0) {
            return new _responses.ErrorResponse({
              code: "UPLOAD_FILES_MIN_FILES",
              message: `"data" argument must contain at least one file.`
            });
          }

          if (files.length > BATCH_UPLOAD_MAX_FILES) {
            return new _responses.ErrorResponse({
              code: "UPLOAD_FILES_MAX_FILES",
              message: `"data" argument must not contain more than ${BATCH_UPLOAD_MAX_FILES} files.`
            });
          }

          try {
            const settings = await context.fileManager.settings.getSettings();
            const promises = [];

            for (let i = 0; i < files.length; i++) {
              const item = files[i];
              promises.push((0, _getPresignedPostPayload.default)(item, settings));
            }

            return new _responses.Response(await Promise.all(promises));
          } catch (e) {
            return new _responses.ErrorResponse({
              message: e.message,
              code: e.code,
              data: e.data
            });
          }
        }
      }
    }
  }
};
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=graphqlFileStorageS3.js.map