{"version":3,"sources":["../../src/utils/getPresignedPostPayload.ts"],"names":["S3_BUCKET","process","env","UPLOAD_MAX_FILE_SIZE_DEFAULT","sanitizeFileSizeValue","value","defaultValue","validation","validateSync","e","data","settings","type","contentType","Error","key","name","keyPrefix","replace","uploadMinFileSize","uploadMaxFileSize","params","Expires","Bucket","Conditions","Fields","startsWith","substr","s3","S3","payload","createPresignedPost","file","size"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAACC,GAAR,CAAYF,SAA9B;AACA,MAAMG,4BAA4B,GAAG,QAArC,C,CAA+C;;AAE/C,MAAMC,qBAAqB,GAAG,CAACC,KAAD,EAAQC,YAAR,KAAyB;AACnD,MAAI;AACAC,2BAAWC,YAAX,CAAwBH,KAAxB,EAA+B,wBAA/B;;AACA,WAAOA,KAAP;AACH,GAHD,CAGE,OAAOI,CAAP,EAAU;AACR,WAAOH,YAAP;AACH;AACJ,CAPD;;eASe,OAAOI,IAAP,EAAaC,QAAb,KAA0B;AACrC;AACA;AACA,MAAI,CAACD,IAAI,CAACE,IAAV,EAAgB;AACZF,IAAAA,IAAI,CAACE,IAAL,GAAY,0BAAZ;AACH;;AAED,QAAMC,WAAW,GAAGH,IAAI,CAACE,IAAzB;;AACA,MAAI,CAACC,WAAL,EAAkB;AACd,UAAMC,KAAK,CAAE,4CAAF,CAAX;AACH;;AAED,MAAIC,GAAG,GAAG,+BAAiBL,IAAI,CAACM,IAAtB,CAAV;;AACA,MAAID,GAAJ,EAAS;AACLA,IAAAA,GAAG,GAAG,yBAAa,GAAb,GAAmBA,GAAzB;AACH;;AAED,MAAIL,IAAI,CAACO,SAAT,EAAoB;AAChBF,IAAAA,GAAG,GAAI,GAAE,+BAAiBL,IAAI,CAACO,SAAtB,CAAiC,IAAGF,GAAI,EAAjD;AACH,GAnBoC,CAqBrC;;;AACAA,EAAAA,GAAG,GAAGA,GAAG,CAACG,OAAJ,CAAY,KAAZ,EAAmB,EAAnB,CAAN;AAEA,QAAMC,iBAAiB,GAAGf,qBAAqB,CAACO,QAAQ,CAACQ,iBAAV,EAA6B,CAA7B,CAA/C;AACA,QAAMC,iBAAiB,GAAGhB,qBAAqB,CAC3CO,QAAQ,CAACS,iBADkC,EAE3CjB,4BAF2C,CAA/C;AAKA,QAAMkB,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE,EADE;AAEXC,IAAAA,MAAM,EAAEvB,SAFG;AAGXwB,IAAAA,UAAU,EAAE,CAAC,CAAC,sBAAD,EAAyBL,iBAAzB,EAA4CC,iBAA5C,CAAD,CAHD;AAGmE;AAC9EK,IAAAA,MAAM,EAAE;AACJ,sBAAgBZ,WADZ;AAEJE,MAAAA;AAFI;AAJG,GAAf;;AAUA,MAAIM,MAAM,CAACI,MAAP,CAAcV,GAAd,CAAkBW,UAAlB,CAA6B,GAA7B,CAAJ,EAAuC;AACnCL,IAAAA,MAAM,CAACI,MAAP,CAAcV,GAAd,GAAoBM,MAAM,CAACI,MAAP,CAAcV,GAAd,CAAkBY,MAAlB,CAAyB,CAAzB,CAApB;AACH;;AAED,QAAMC,EAAE,GAAG,IAAIC,UAAJ,EAAX;AACA,QAAMC,OAAO,GAAGF,EAAE,CAACG,mBAAH,CAAuBV,MAAvB,CAAhB;AAEA,SAAO;AACHX,IAAAA,IAAI,EAAEoB,OADH;AAEHE,IAAAA,IAAI,EAAE;AACFhB,MAAAA,IAAI,EAAED,GADJ;AAEFA,MAAAA,GAFE;AAGFH,MAAAA,IAAI,EAAEC,WAHJ;AAIFoB,MAAAA,IAAI,EAAEvB,IAAI,CAACuB;AAJT;AAFH,GAAP;AASH,C","sourcesContent":["import uniqueId from \"uniqid\";\nimport sanitizeFilename from \"sanitize-filename\";\nimport S3 from \"aws-sdk/clients/s3\";\nimport { validation } from \"@webiny/validation\";\n\nconst S3_BUCKET = process.env.S3_BUCKET;\nconst UPLOAD_MAX_FILE_SIZE_DEFAULT = 26214400; // 25MB\n\nconst sanitizeFileSizeValue = (value, defaultValue) => {\n    try {\n        validation.validateSync(value, \"required,numeric,gte:0\");\n        return value;\n    } catch (e) {\n        return defaultValue;\n    }\n};\n\nexport default async (data, settings) => {\n    // If type is missing, let's use the default \"application/octet-stream\" type,\n    // which is also the default type that the Amazon S3 would use.\n    if (!data.type) {\n        data.type = \"application/octet-stream\";\n    }\n\n    const contentType = data.type;\n    if (!contentType) {\n        throw Error(`File's content type could not be resolved.`);\n    }\n\n    let key = sanitizeFilename(data.name);\n    if (key) {\n        key = uniqueId() + \"-\" + key;\n    }\n\n    if (data.keyPrefix) {\n        key = `${sanitizeFilename(data.keyPrefix)}-${key}`;\n    }\n\n    // Replace all whitespace.\n    key = key.replace(/\\s/g, \"\");\n\n    const uploadMinFileSize = sanitizeFileSizeValue(settings.uploadMinFileSize, 0);\n    const uploadMaxFileSize = sanitizeFileSizeValue(\n        settings.uploadMaxFileSize,\n        UPLOAD_MAX_FILE_SIZE_DEFAULT\n    );\n\n    const params = {\n        Expires: 60,\n        Bucket: S3_BUCKET,\n        Conditions: [[\"content-length-range\", uploadMinFileSize, uploadMaxFileSize]], // 0 Bytes - 25MB\n        Fields: {\n            \"Content-Type\": contentType,\n            key\n        }\n    };\n\n    if (params.Fields.key.startsWith(\"/\")) {\n        params.Fields.key = params.Fields.key.substr(1);\n    }\n\n    const s3 = new S3();\n    const payload = s3.createPresignedPost(params);\n\n    return {\n        data: payload,\n        file: {\n            name: key,\n            key,\n            type: contentType,\n            size: data.size\n        }\n    };\n};\n"],"file":"getPresignedPostPayload.js"}