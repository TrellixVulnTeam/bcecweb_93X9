"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _uniqid = _interopRequireDefault(require("uniqid"));

var _sanitizeFilename = _interopRequireDefault(require("sanitize-filename"));

var _s = _interopRequireDefault(require("aws-sdk/clients/s3"));

var _validation = require("@webiny/validation");

const S3_BUCKET = process.env.S3_BUCKET;
const UPLOAD_MAX_FILE_SIZE_DEFAULT = 26214400; // 25MB

const sanitizeFileSizeValue = (value, defaultValue) => {
  try {
    _validation.validation.validateSync(value, "required,numeric,gte:0");

    return value;
  } catch (e) {
    return defaultValue;
  }
};

var _default = async (data, settings) => {
  // If type is missing, let's use the default "application/octet-stream" type,
  // which is also the default type that the Amazon S3 would use.
  if (!data.type) {
    data.type = "application/octet-stream";
  }

  const contentType = data.type;

  if (!contentType) {
    throw Error(`File's content type could not be resolved.`);
  }

  let key = (0, _sanitizeFilename.default)(data.name);

  if (key) {
    key = (0, _uniqid.default)() + "-" + key;
  }

  if (data.keyPrefix) {
    key = `${(0, _sanitizeFilename.default)(data.keyPrefix)}-${key}`;
  } // Replace all whitespace.


  key = key.replace(/\s/g, "");
  const uploadMinFileSize = sanitizeFileSizeValue(settings.uploadMinFileSize, 0);
  const uploadMaxFileSize = sanitizeFileSizeValue(settings.uploadMaxFileSize, UPLOAD_MAX_FILE_SIZE_DEFAULT);
  const params = {
    Expires: 60,
    Bucket: S3_BUCKET,
    Conditions: [["content-length-range", uploadMinFileSize, uploadMaxFileSize]],
    // 0 Bytes - 25MB
    Fields: {
      "Content-Type": contentType,
      key
    }
  };

  if (params.Fields.key.startsWith("/")) {
    params.Fields.key = params.Fields.key.substr(1);
  }

  const s3 = new _s.default();
  const payload = s3.createPresignedPost(params);
  return {
    data: payload,
    file: {
      name: key,
      key,
      type: contentType,
      size: data.size
    }
  };
};

exports.default = _default;
//# sourceMappingURL=getPresignedPostPayload.js.map