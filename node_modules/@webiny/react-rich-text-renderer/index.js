import React from "react";
import classNames from "classnames";

function renderParagraph(block) {
  var props = {
    style: {},
    className: null
  };

  if (block.data.textAlign) {
    props.style["textAlign"] = block.data.textAlign;
  }

  if (block.data.className) {
    props.className = block.data.className;
  }

  return /*#__PURE__*/React.createElement("p", Object.assign({}, props, {
    className: classNames("rte-block-paragraph", props.className),
    dangerouslySetInnerHTML: {
      __html: block.data.text
    }
  }));
}

function renderDelimiter() {
  return /*#__PURE__*/React.createElement("div", {
    className: "rte-block-delimiter"
  });
}

function renderHeader(block) {
  var props = {
    style: {},
    className: null
  };

  if (block.data.textAlign) {
    props.style["textAlign"] = block.data.textAlign;
  }

  if (block.data.className) {
    props.className = block.data.className;
  }

  switch (block.data.level) {
    case 1:
      return /*#__PURE__*/React.createElement("h1", Object.assign({}, props, {
        className: classNames(props.className, "rte-block-heading rte-block-heading--h1"),
        dangerouslySetInnerHTML: {
          __html: block.data.text
        }
      }));

    case 2:
      return /*#__PURE__*/React.createElement("h2", Object.assign({}, props, {
        className: classNames(props.className, "rte-block-heading rte-block-heading--h2"),
        dangerouslySetInnerHTML: {
          __html: block.data.text
        }
      }));

    case 3:
      return /*#__PURE__*/React.createElement("h3", Object.assign({}, props, {
        className: classNames(props.className, "rte-block-heading rte-block-heading--h3"),
        dangerouslySetInnerHTML: {
          __html: block.data.text
        }
      }));

    case 4:
      return /*#__PURE__*/React.createElement("h4", Object.assign({}, props, {
        className: classNames(props.className, "rte-block-heading rte-block-heading--h4"),
        dangerouslySetInnerHTML: {
          __html: block.data.text
        }
      }));

    case 5:
      return /*#__PURE__*/React.createElement("h5", Object.assign({}, props, {
        className: classNames(props.className, "rte-block-heading rte-block-heading--h5"),
        dangerouslySetInnerHTML: {
          __html: block.data.text
        }
      }));

    case 6:
      return /*#__PURE__*/React.createElement("h6", Object.assign({}, props, {
        className: classNames(props.className, "rte-block-heading rte-block-heading--h6"),
        dangerouslySetInnerHTML: {
          __html: block.data.text
        }
      }));
  }
}

function renderImage(block) {
  return /*#__PURE__*/React.createElement("img", {
    className: "rte-block-image",
    alt: block.data.caption,
    src: block.data.file
  });
}

function renderList(block) {
  switch (block.data.style) {
    case "unordered":
      return /*#__PURE__*/React.createElement("ul", {
        className: "rte-block-list"
      }, block.data.items.map(function (text, i) {
        return /*#__PURE__*/React.createElement("li", {
          key: i
        }, text);
      }));

    case "ordered":
      return /*#__PURE__*/React.createElement("ol", {
        className: "rte-block-list"
      }, block.data.items.map(function (text, i) {
        return /*#__PURE__*/React.createElement("li", {
          key: i
        }, text);
      }));

    default:
      return null;
  }
}

function renderQuote(block) {
  return /*#__PURE__*/React.createElement("blockquote", {
    className: "rte-block-blockquote"
  }, /*#__PURE__*/React.createElement("p", null, block.data.text));
}

var defaultRenderers = {
  delimiter: renderDelimiter,
  header: renderHeader,
  image: renderImage,
  list: renderList,
  paragraph: renderParagraph,
  quote: renderQuote
};
export var RichTextRenderer = function RichTextRenderer(props) {
  // Combine default renderers with custom renderers
  var renderers = Object.assign({}, defaultRenderers, props.renderers);
  return /*#__PURE__*/React.createElement(React.Fragment, null, props.data.map(function (block, index) {
    var renderer = renderers[block.type];

    if (!renderer) {
      return null;
    }

    var node = renderer(block);

    if ( /*#__PURE__*/React.isValidElement(node)) {
      return /*#__PURE__*/React.cloneElement(node, {
        key: index
      });
    }

    return null;
  }));
};
//# sourceMappingURL=index.js.map