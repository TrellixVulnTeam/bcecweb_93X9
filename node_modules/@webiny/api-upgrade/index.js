"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getApplicablePlugin = getApplicablePlugin;

var _error = _interopRequireDefault(require("@webiny/error"));

var _semver = require("semver");

function getApplicablePlugin(args) {
  const {
    upgradePlugins,
    installedAppVersion,
    upgradeToVersion
  } = args;
  const {
    version: deployedVersion
  } = (0, _semver.coerce)(args.deployedVersion);

  if (upgradeToVersion !== deployedVersion) {
    throw new _error.default(`The requested upgrade version does not match the deployed version.`, "UPGRADE_VERSION_MISMATCH", {
      deployedVersion: deployedVersion,
      requestedUpgradeTo: upgradeToVersion
    });
  }

  if (installedAppVersion === upgradeToVersion) {
    throw new _error.default(`Version ${upgradeToVersion} is already installed!`, "VERSION_ALREADY_INSTALLED");
  }

  const upgrades = upgradePlugins.filter(pl => {
    return (0, _semver.lt)(pl.version, deployedVersion) && (0, _semver.gt)(pl.version, installedAppVersion);
  });

  if (upgrades.length > 0) {
    throw new _error.default(`Skipping of upgrades is not allowed: https://docs.webiny.com/docs/how-to-guides/upgrade-webiny`, "SKIPPING_UPGRADES_NOT_ALLOWED", {
      deployedVersion: deployedVersion,
      skippedVersions: upgrades.map(pl => pl.version),
      installedAppVersion
    });
  }

  const upgrade = upgradePlugins.find(pl => pl.version === upgradeToVersion);

  if (!upgrade) {
    throw new _error.default(`Upgrade to version ${upgradeToVersion} is not available.`, "UPGRADE_NOT_AVAILABLE");
  }

  return upgrade;
}
//# sourceMappingURL=index.js.map