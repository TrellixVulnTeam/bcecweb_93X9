{"version":3,"sources":["../src/index.ts"],"names":["getApplicablePlugin","args","upgradePlugins","installedAppVersion","upgradeToVersion","version","deployedVersion","Error","requestedUpgradeTo","upgrades","filter","pl","length","skippedVersions","map","upgrade","find"],"mappings":";;;;;;;;;AACA;;AACA;;AAuBO,SAASA,mBAAT,CAA6BC,IAA7B,EAAkE;AACrE,QAAM;AAAEC,IAAAA,cAAF;AAAkBC,IAAAA,mBAAlB;AAAuCC,IAAAA;AAAvC,MAA4DH,IAAlE;AACA,QAAM;AAAEI,IAAAA,OAAO,EAAEC;AAAX,MAA+B,oBAAOL,IAAI,CAACK,eAAZ,CAArC;;AAEA,MAAIF,gBAAgB,KAAKE,eAAzB,EAA0C;AACtC,UAAM,IAAIC,cAAJ,CACD,oEADC,EAEF,0BAFE,EAGF;AACID,MAAAA,eAAe,EAAEA,eADrB;AAEIE,MAAAA,kBAAkB,EAAEJ;AAFxB,KAHE,CAAN;AAQH;;AAED,MAAID,mBAAmB,KAAKC,gBAA5B,EAA8C;AAC1C,UAAM,IAAIG,cAAJ,CACD,WAAUH,gBAAiB,wBAD1B,EAEF,2BAFE,CAAN;AAIH;;AAED,QAAMK,QAAQ,GAAGP,cAAc,CAACQ,MAAf,CAAsBC,EAAE,IAAI;AACzC,WAAO,gBAAGA,EAAE,CAACN,OAAN,EAAeC,eAAf,KAAmC,gBAAGK,EAAE,CAACN,OAAN,EAAeF,mBAAf,CAA1C;AACH,GAFgB,CAAjB;;AAIA,MAAIM,QAAQ,CAACG,MAAT,GAAkB,CAAtB,EAAyB;AACrB,UAAM,IAAIL,cAAJ,CACD,gGADC,EAEF,+BAFE,EAGF;AACID,MAAAA,eAAe,EAAEA,eADrB;AAEIO,MAAAA,eAAe,EAAEJ,QAAQ,CAACK,GAAT,CAAaH,EAAE,IAAIA,EAAE,CAACN,OAAtB,CAFrB;AAGIF,MAAAA;AAHJ,KAHE,CAAN;AASH;;AAED,QAAMY,OAAO,GAAGb,cAAc,CAACc,IAAf,CAAoBL,EAAE,IAAIA,EAAE,CAACN,OAAH,KAAeD,gBAAzC,CAAhB;;AAEA,MAAI,CAACW,OAAL,EAAc;AACV,UAAM,IAAIR,cAAJ,CACD,sBAAqBH,gBAAiB,oBADrC,EAEF,uBAFE,CAAN;AAIH;;AAED,SAAOW,OAAP;AACH","sourcesContent":["import { UpgradePlugin } from \"./types\";\nimport Error from \"@webiny/error\";\nimport { gt, lt, coerce } from \"semver\";\ninterface RunUpgradeArgs {\n    /**\n     * Version of Webiny that is currently deployed (context.WEBINY_VERSION).\n     */\n    deployedVersion: string;\n    /**\n     * Version you want to upgrade to, eg: 5.1.0\n     */\n    upgradeToVersion: string;\n    /**\n     * App version that is currently installed (this usually comes from DB and each app tracks this independently).\n     * Note that this does not have to match the `deployedVersion`. The `installedAppVersion` will tell you which\n     * version of Webiny was running at the time of installing/upgrading the app.\n     */\n    installedAppVersion: string;\n    /**\n     * A collection of upgrade plugins you want to check for an applicable plugin. Make sure you only pass plugins\n     * that belong to the app you're upgrading. For example: if upgrading `file-manager`, make sure you exclude\n     * all other upgrade plugins.\n     */\n    upgradePlugins: UpgradePlugin[];\n}\nexport function getApplicablePlugin(args: RunUpgradeArgs): UpgradePlugin {\n    const { upgradePlugins, installedAppVersion, upgradeToVersion } = args;\n    const { version: deployedVersion } = coerce(args.deployedVersion);\n\n    if (upgradeToVersion !== deployedVersion) {\n        throw new Error(\n            `The requested upgrade version does not match the deployed version.`,\n            \"UPGRADE_VERSION_MISMATCH\",\n            {\n                deployedVersion: deployedVersion,\n                requestedUpgradeTo: upgradeToVersion\n            }\n        );\n    }\n\n    if (installedAppVersion === upgradeToVersion) {\n        throw new Error(\n            `Version ${upgradeToVersion} is already installed!`,\n            \"VERSION_ALREADY_INSTALLED\"\n        );\n    }\n\n    const upgrades = upgradePlugins.filter(pl => {\n        return lt(pl.version, deployedVersion) && gt(pl.version, installedAppVersion);\n    });\n\n    if (upgrades.length > 0) {\n        throw new Error(\n            `Skipping of upgrades is not allowed: https://docs.webiny.com/docs/how-to-guides/upgrade-webiny`,\n            \"SKIPPING_UPGRADES_NOT_ALLOWED\",\n            {\n                deployedVersion: deployedVersion,\n                skippedVersions: upgrades.map(pl => pl.version),\n                installedAppVersion\n            }\n        );\n    }\n\n    const upgrade = upgradePlugins.find(pl => pl.version === upgradeToVersion);\n\n    if (!upgrade) {\n        throw new Error(\n            `Upgrade to version ${upgradeToVersion} is not available.`,\n            \"UPGRADE_NOT_AVAILABLE\"\n        );\n    }\n\n    return upgrade;\n}\n"],"file":"index.js"}