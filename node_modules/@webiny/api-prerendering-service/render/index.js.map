{"version":3,"sources":["../../src/render/index.ts"],"names":["sleep","Promise","resolve","setTimeout","s3","S3","region","process","env","AWS_REGION","storeFile","key","contentType","body","storageName","putObject","Bucket","Key","ACL","ContentType","CacheControl","Body","promise","configuration","type","handle","context","invocationArgs","handlerArgs","Array","isArray","handlerHookPlugins","plugins","byType","console","log","JSON","stringify","i","length","args","j","plugin","beforeRender","dbNamespace","storageFolder","url","PK","filter","Boolean","join","currentRenderData","db","read","defaults","query","SK","files","file","path","name","data","TYPE","DbRender","map","item","create","currentIndexHtml","find","endsWith","currentIndexHtmlTags","meta","tags","batch","k","tag","delete","execute","newIndexHtml","newIndexHtmlTags","DbTagUrlLink","value","afterRender","error","e","message"],"mappings":"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","sourcesContent":["import renderUrl, { File } from \"./renderUrl\";\nimport path from \"path\";\nimport S3 from \"aws-sdk/clients/s3\";\nimport getStorageName from \"./../utils/getStorageName\";\nimport getStorageFolder from \"./../utils/getStorageFolder\";\nimport getDbNamespace from \"./../utils/getDbNamespace\";\nimport getRenderUrl from \"./../utils/getRenderUrl\";\nimport getTagUrlLinkPKSK from \"./../utils/getTagUrlLinkPKSK\";\nimport { HandlerPlugin, Configuration, RenderHookPlugin } from \"./types\";\nimport { DbRender, TYPE, HandlerResponse, DbTagUrlLink } from \"../types\";\nimport defaults from \"./../utils/defaults\";\nimport omit from \"lodash/omit\";\n\nconst sleep = () => new Promise(resolve => setTimeout(resolve, 1000));\n\nconst s3 = new S3({ region: process.env.AWS_REGION });\n\nconst storeFile = ({ key, contentType, body, storageName }) => {\n    return s3\n        .putObject({\n            Bucket: storageName,\n            Key: key,\n            ACL: \"public-read\",\n            ContentType: contentType,\n            CacheControl: \"max-age=30\",\n            Body: body\n        })\n        .promise();\n};\n\nexport default (configuration?: Configuration): HandlerPlugin => ({\n    type: \"handler\",\n    async handle(context): Promise<HandlerResponse> {\n        const { invocationArgs } = context;\n        const handlerArgs = Array.isArray(invocationArgs) ? invocationArgs : [invocationArgs];\n        const handlerHookPlugins = context.plugins.byType<RenderHookPlugin>(\"ps-render-hook\");\n\n        console.log(\"Received args: \", JSON.stringify(invocationArgs));\n\n        try {\n            await sleep();\n            for (let i = 0; i < handlerArgs.length; i++) {\n                const args = handlerArgs[i];\n\n                for (let j = 0; j < handlerHookPlugins.length; j++) {\n                    const plugin = handlerHookPlugins[j];\n                    if (typeof plugin.beforeRender === \"function\") {\n                        await plugin.beforeRender({\n                            context,\n                            configuration,\n                            args\n                        });\n                    }\n                }\n\n                const dbNamespace = getDbNamespace(args, configuration);\n                const storageName = getStorageName(args, configuration);\n                const storageFolder = getStorageFolder(args, configuration);\n                const url = getRenderUrl(args, configuration);\n\n                // Check if render data for given URL already exists. If so, delete it.\n                const PK = [dbNamespace, \"PS\", \"RENDER\"].filter(Boolean).join(\"#\");\n                const [[currentRenderData]] = await context.db.read<DbRender>({\n                    ...defaults.db,\n                    query: {\n                        PK,\n                        SK: url\n                    }\n                });\n\n                // TODO: will need to add flushing of all files created in the render process.\n                const [files] = await renderUrl(url, {\n                    context,\n                    configuration,\n                    args\n                });\n\n                for (let j = 0; j < files.length; j++) {\n                    const file = files[j];\n                    const key = path.join(storageFolder, file.name);\n\n                    console.log(`Storing file \"${key}\" to storage \"${storageName}\".`);\n                    await storeFile({\n                        storageName,\n                        key,\n                        body: file.body,\n                        contentType: file.type\n                    });\n                }\n\n                const data: DbRender = {\n                    PK,\n                    SK: url,\n                    TYPE: TYPE.DbRender,\n                    url,\n                    args,\n                    configuration,\n                    files: files.map(item => omit(item, [\"body\"]))\n                };\n\n                await context.db.create({\n                    ...defaults.db,\n                    data\n                });\n\n                // Let's delete existing tag / URL links.\n                // TODO: improve - no need to do any DB calls if tags didn't change. So, let's\n                // TODO: compare tags in `currentIndexHtml` and `newIndexHtml`.\n                console.log(\"Checking if there are existing tag / URL links to remove...\");\n                if (currentRenderData) {\n                    // Get currently stored tags and delete all tag-URL links.\n                    const currentIndexHtml = currentRenderData.files.find(item =>\n                        item.name.endsWith(\".html\")\n                    );\n                    const currentIndexHtmlTags = currentIndexHtml?.meta?.tags;\n                    if (Array.isArray(currentIndexHtmlTags) && currentIndexHtmlTags.length) {\n                        console.log(\n                            \"There are existing tag / URL links to be deleted...\",\n                            currentIndexHtmlTags\n                        );\n                        const batch = context.db.batch();\n\n                        for (let k = 0; k < currentIndexHtmlTags.length; k++) {\n                            const tag = currentIndexHtmlTags[k];\n                            const [PK, SK] = getTagUrlLinkPKSK({ tag, url, dbNamespace });\n                            if (PK && SK) {\n                                batch.delete({ query: { PK, SK } });\n                            }\n                        }\n\n                        await batch.execute();\n                        console.log(\"Existing tag / URL links deleted.\");\n                    } else {\n                        console.log(\"There are no existing tag / URL links to delete.\");\n                    }\n                }\n\n                // Let's save tags - we link each distinct tag with the URL.\n                console.log(\"Checking if there are new tag / URL links to save...\");\n                const newIndexHtml = files.find((item: File) => item.name.endsWith(\".html\"));\n                const newIndexHtmlTags = newIndexHtml?.meta?.tags;\n                if (Array.isArray(newIndexHtmlTags) && newIndexHtmlTags.length) {\n                    console.log(\"There are new tag / URL links to be saved...\", newIndexHtmlTags);\n                    const batch = context.db.batch();\n\n                    for (let k = 0; k < newIndexHtmlTags.length; k++) {\n                        const tag = newIndexHtmlTags[k];\n                        const [PK, SK] = getTagUrlLinkPKSK({ tag, url, dbNamespace });\n                        if (PK && SK) {\n                            const data: DbTagUrlLink = {\n                                PK,\n                                SK,\n                                TYPE: TYPE.DbTagUrlLink,\n                                url,\n                                key: tag.key,\n                                value: tag.value\n                            };\n\n                            batch.create({\n                                ...defaults.db,\n                                data\n                            });\n                        }\n                    }\n\n                    await batch.execute();\n                    console.log(\"New tag / URL links saved.\");\n                } else {\n                    console.log(\"There are no new tag / URL links to save.\");\n                }\n\n                for (let j = 0; j < handlerHookPlugins.length; j++) {\n                    const plugin = handlerHookPlugins[j];\n                    if (typeof plugin.afterRender === \"function\") {\n                        await plugin.afterRender({\n                            context,\n                            configuration,\n                            args\n                        });\n                    }\n                }\n            }\n\n            return { data: null, error: null };\n        } catch (e) {\n            console.log(\"An error occurred while prerendering...\", e);\n            console.log(JSON.stringify(e.message));\n            return { data: null, error: e };\n        }\n    }\n});\n"],"file":"index.js"}