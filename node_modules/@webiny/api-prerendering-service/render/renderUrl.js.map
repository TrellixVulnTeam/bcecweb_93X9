{"version":3,"sources":["../../src/render/renderUrl.ts"],"names":["windowSet","page","name","value","evaluateOnNewDocument","url","args","id","shortid","generate","ts","Date","getTime","console","log","renderUrl","renderUrlFunction","defaultRenderUrlFunction","render","regex","subst","content","replace","allArgs","html","process","body","type","meta","tags","JSON","stringify","gqlCache","browser","chromium","puppeteer","launch","defaultViewport","executablePath","headless","ignoreHTTPSErrors","browserPage","newPage","tenant","configuration","locale","notFoundPage","skipResources","setRequestInterception","on","request","includes","resourceType","abort","continue","response","method","responses","json","postData","parse","operations","Array","isArray","i","length","operationName","query","variables","operationsAllowedToCached","push","data","goto","waitUntil","apolloState","evaluate","window","getApolloState"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAGA,MAAMA,SAAS,GAAG,CAACC,IAAD,EAAOC,IAAP,EAAaC,KAAb,KAAuB;AACrCF,EAAAA,IAAI,CAACG,qBAAL,CAA4B;AAChC,qCAAqCF,IAAK;AAC1C;AACA,kBAAkBC,KAAM;AACxB;AACA,OALI;AAMH,CAPD;;eAWe,OAAOE,GAAP,EAAoBC,IAApB,KAA4D;AACvE,QAAMC,EAAE,GAAGC,iBAAQC,QAAR,EAAX;;AACA,QAAMC,EAAE,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAX;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAa,cAAaT,GAAI,iBAAgBE,EAAG,MAAjD;AAEA,QAAMQ,SAAS,GACX,OAAOT,IAAI,CAACU,iBAAZ,KAAkC,UAAlC,GACMV,IAAI,CAACU,iBADX,GAEMC,wBAHV;AAIA,QAAMC,MAAM,GAAG,MAAMH,SAAS,CAACV,GAAD,EAAMC,IAAN,CAA9B,CAVuE,CAYvE;AACA;;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAduE,CAgBvE;;AAEA;AACI,UAAMK,KAAK,GAAG,iCAAd;AACA,UAAMC,KAAK,GAAI,4EAAf;AACAF,IAAAA,MAAM,CAACG,OAAP,GAAiBH,MAAM,CAACG,OAAP,CAAeC,OAAf,CAAuBH,KAAvB,EAA8BC,KAA9B,CAAjB;AACH;AAED;AACI,UAAMD,KAAK,GAAG,+BAAd;AACA,UAAMC,KAAK,GAAI,4EAAf;AACAF,IAAAA,MAAM,CAACG,OAAP,GAAiBH,MAAM,CAACG,OAAP,CAAeC,OAAf,CAAuBH,KAAvB,EAA8BC,KAA9B,CAAjB;AACH;AAED,QAAMG,OAAO,GAAG;AAAEL,IAAAA,MAAF;AAAUZ,IAAAA,IAAV;AAAgBD,IAAAA,GAAhB;AAAqBE,IAAAA,EAArB;AAAyBG,IAAAA;AAAzB,GAAhB;AACA,QAAM;AAAEc,IAAAA;AAAF,MAAW,MAAM,uBAAS,CAC5B,iCAD4B,EAE5B,yCAF4B,EAG5B;AACA,+BAAeD,OAAf,CAJ4B,EAK5B;AACA,+BAAeA,OAAf,CAN4B,EAO5B;AACA,kCAAkBA,OAAlB,CAR4B,EAS5B;AACA,mCAAmBA,OAAnB,CAV4B,EAW5B;AACA,uCAAuBA,OAAvB,CAZ4B,CAAT,EAapBE,OAboB,CAaZP,MAAM,CAACG,OAbK,CAAvB;AAeAR,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AAEAD,EAAAA,OAAO,CAACC,GAAR,CAAa,cAAaT,GAAI,cAA9B,EAhDuE,CAkDvE;;AACA,SAAO,CACH,CACI;AACIH,IAAAA,IAAI,EAAE,YADV;AAEIwB,IAAAA,IAAI,EAAEF,IAFV;AAGIG,IAAAA,IAAI,EAAE,WAHV;AAIIC,IAAAA,IAAI,EAAE;AACFC,MAAAA,IAAI,EAAE,wBAAUL,IAAV;AADJ;AAJV,GADJ,EASI;AACItB,IAAAA,IAAI,EAAE,cADV;AAEIwB,IAAAA,IAAI,EAAEI,IAAI,CAACC,SAAL,CAAeb,MAAM,CAACU,IAAP,CAAYI,QAA3B,CAFV;AAGIL,IAAAA,IAAI,EAAE,kBAHV;AAIIC,IAAAA,IAAI,EAAE;AAJV,GATJ,CADG,EAiBHL,OAjBG,CAAP;AAmBH,C;;;AAED,IAAIU,OAAJ;;AAsBO,MAAMhB,wBAAwB,GAAG,OAAOZ,GAAP,EAAoBC,IAApB,KAA0D;AAAA;;AAC9F,MAAI,CAAC2B,OAAL,EAAc;AACVA,IAAAA,OAAO,GAAG,MAAMC,yBAASC,SAAT,CAAmBC,MAAnB,CAA0B;AACtC9B,MAAAA,IAAI,EAAE4B,yBAAS5B,IADuB;AAEtC+B,MAAAA,eAAe,EAAEH,yBAASG,eAFY;AAGtCC,MAAAA,cAAc,EAAE,MAAMJ,yBAASI,cAHO;AAItCC,MAAAA,QAAQ,EAAEL,yBAASK,QAJmB;AAKtCC,MAAAA,iBAAiB,EAAE;AALmB,KAA1B,CAAhB;AAOH;;AAED,QAAMC,WAAW,GAAG,MAAMR,OAAO,CAACS,OAAR,EAA1B,CAX8F,CAa9F;;AACA1C,EAAAA,SAAS,CAACyC,WAAD,EAAc,eAAd,EAA+B,IAA/B,CAAT;AAEA,QAAME,MAAM,GAAGrC,IAAH,aAAGA,IAAH,qCAAGA,IAAI,CAAEA,IAAT,wEAAG,WAAYsC,aAAf,oFAAG,sBAA2BhB,IAA9B,2DAAG,uBAAiCe,MAAhD;;AACA,MAAIA,MAAJ,EAAY;AACR9B,IAAAA,OAAO,CAACC,GAAR,CAAY,4DAAZ;AACAd,IAAAA,SAAS,CAACyC,WAAD,EAAc,sBAAd,EAAsCE,MAAtC,CAAT;AACH;;AAED,QAAME,MAAM,GAAGvC,IAAH,aAAGA,IAAH,sCAAGA,IAAI,CAAEA,IAAT,yEAAG,YAAYsC,aAAf,oFAAG,sBAA2BhB,IAA9B,2DAAG,uBAAiCiB,MAAhD;;AACA,MAAIA,MAAJ,EAAY;AACRhC,IAAAA,OAAO,CAACC,GAAR,CAAY,4DAAZ;AACAd,IAAAA,SAAS,CAACyC,WAAD,EAAc,sBAAd,EAAsCI,MAAtC,CAAT;AACH;;AAED,QAAMC,YAAY,GAAGxC,IAAH,aAAGA,IAAH,sCAAGA,IAAI,CAAEA,IAAT,yEAAG,YAAYsC,aAAf,oFAAG,sBAA2BhB,IAA9B,2DAAG,uBAAiCkB,YAAtD;;AACA,MAAIA,YAAJ,EAAkB;AACdjC,IAAAA,OAAO,CAACC,GAAR,CAAY,6DAAZ;AACAd,IAAAA,SAAS,CAACyC,WAAD,EAAc,uBAAd,EAAuC,IAAvC,CAAT;AACH,GAhC6F,CAkC9F;;;AACA,QAAMM,aAAa,GAAG,CAAC,OAAD,EAAU,YAAV,CAAtB;AACA,QAAMN,WAAW,CAACO,sBAAZ,CAAmC,IAAnC,CAAN;AAEA,QAAMhB,QAAQ,GAAG,EAAjB;AAEAS,EAAAA,WAAW,CAACQ,EAAZ,CAAe,SAAf,EAA0BC,OAAO,IAAI;AACjC,QAAIH,aAAa,CAACI,QAAd,CAAuBD,OAAO,CAACE,YAAR,EAAvB,CAAJ,EAAoD;AAChDF,MAAAA,OAAO,CAACG,KAAR;AACH,KAFD,MAEO;AACHH,MAAAA,OAAO,CAACI,QAAR;AACH;AACJ,GAND,EAxC8F,CAgD9F;;AACAb,EAAAA,WAAW,CAACQ,EAAZ,CAAe,UAAf,EAA2B,MAAMM,QAAN,IAAkB;AACzC,UAAML,OAAO,GAAGK,QAAQ,CAACL,OAAT,EAAhB;AACA,UAAM7C,GAAG,GAAG6C,OAAO,CAAC7C,GAAR,EAAZ;;AACA,QAAIA,GAAG,CAAC8C,QAAJ,CAAa,UAAb,KAA4BD,OAAO,CAACM,MAAR,OAAqB,MAArD,EAA6D;AACzD,YAAMC,SAAS,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAxB;AACA,YAAMC,QAAQ,GAAG7B,IAAI,CAAC8B,KAAL,CAAWV,OAAO,CAACS,QAAR,EAAX,CAAjB;AACA,YAAME,UAAU,GAAGC,KAAK,CAACC,OAAN,CAAcJ,QAAd,IAA0BA,QAA1B,GAAqC,CAACA,QAAD,CAAxD;;AAEA,WAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,UAAU,CAACI,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,cAAM;AAAEE,UAAAA,aAAF;AAAiBC,UAAAA,KAAjB;AAAwBC,UAAAA;AAAxB,YAAsCP,UAAU,CAACG,CAAD,CAAtD,CADwC,CAGxC;;AACA,cAAMK,yBAAyB,GAAG,CAAC,oBAAD,EAAuB,oBAAvB,CAAlC;;AACA,YAAIA,yBAAyB,CAAClB,QAA1B,CAAmCe,aAAnC,CAAJ,EAAuD;AACnDlC,UAAAA,QAAQ,CAACsC,IAAT,CAAc;AACVH,YAAAA,KADU;AAEVC,YAAAA,SAFU;AAGVG,YAAAA,IAAI,EAAEd,SAAS,CAACO,CAAD,CAAT,CAAaO;AAHT,WAAd;AAKH;AACJ;;AACD;AACH;AACJ,GAvBD,EAjD8F,CA0E9F;;AACA,QAAM9B,WAAW,CAAC+B,IAAZ,CAAiBnE,GAAjB,EAAsB;AAAEoE,IAAAA,SAAS,EAAE;AAAb,GAAtB,CAAN;AAEA,QAAMC,WAAW,GAAG,MAAMjC,WAAW,CAACkC,QAAZ,CAAqB,MAAM;AACjD;AACA,WAAOC,MAAM,CAACC,cAAP,EAAP;AACH,GAHyB,CAA1B;AAKA,SAAO;AACHxD,IAAAA,OAAO,EAAE,MAAMoB,WAAW,CAACpB,OAAZ,EADZ;AAEH;AACAO,IAAAA,IAAI,EAAE;AACFI,MAAAA,QADE;AAEF0C,MAAAA;AAFE;AAHH,GAAP;AAQH,CA1FM","sourcesContent":["import chromium from \"chrome-aws-lambda\";\nimport posthtml from \"posthtml\";\nimport { noopener } from \"posthtml-noopener\";\nimport posthtmlPluginLinkPreload from \"posthtml-plugin-link-preload\";\nimport injectApolloState from \"./injectApolloState\";\nimport injectRenderId from \"./injectRenderId\";\nimport injectRenderTs from \"./injectRenderTs\";\nimport injectTenantLocale from \"./injectTenantLocale\";\nimport injectNotFoundPageFlag from \"./injectNotFoundPageFlag\";\nimport getPsTags from \"./getPsTags\";\nimport shortid from \"shortid\";\nimport { Args as BaseHandlerArgs, Configuration, HandlerContext } from \"./types\";\n\nconst windowSet = (page, name, value) => {\n    page.evaluateOnNewDocument(`\n    Object.defineProperty(window, '${name}', {\n      get() {\n        return '${value}'\n      }\n    })`);\n};\n\nexport type File = { type: string; body: any; name: string; meta: Record<string, any> };\n\nexport default async (url: string, args: Args): Promise<[File[], Meta]> => {\n    const id = shortid.generate();\n    const ts = new Date().getTime();\n\n    console.log(`Rendering \"${url}\" (render ID: ${id})...`);\n\n    const renderUrl =\n        typeof args.renderUrlFunction === \"function\"\n            ? args.renderUrlFunction\n            : defaultRenderUrlFunction;\n    const render = await renderUrl(url, args);\n\n    // Process HTML.\n    // TODO: should be plugins (will also eliminate lower @ts-ignore instructions).\n    console.log(\"Processing HTML...\");\n\n    // TODO: regular text processing plugins...\n\n    {\n        const regex = /<script (src=\"\\/static\\/js\\/)/gm;\n        const subst = `<script data-link-preload data-link-preload-type=\"markup\" src=\"/static/js/`;\n        render.content = render.content.replace(regex, subst);\n    }\n\n    {\n        const regex = /<link href=\"\\/static\\/css\\//gm;\n        const subst = `<link data-link-preload data-link-preload-type=\"markup\" href=\"/static/css/`;\n        render.content = render.content.replace(regex, subst);\n    }\n\n    const allArgs = { render, args, url, id, ts };\n    const { html } = await posthtml([\n        noopener(),\n        posthtmlPluginLinkPreload(),\n        // @ts-ignore\n        injectRenderId(allArgs),\n        // @ts-ignore\n        injectRenderTs(allArgs),\n        // @ts-ignore\n        injectApolloState(allArgs),\n        // @ts-ignore\n        injectTenantLocale(allArgs),\n        // @ts-ignore\n        injectNotFoundPageFlag(allArgs)\n    ]).process(render.content);\n\n    console.log(\"Processing HTML done.\");\n\n    console.log(`Rendering \"${url}\" completed.`);\n\n    // TODO: should be plugins.\n    return [\n        [\n            {\n                name: \"index.html\",\n                body: html,\n                type: \"text/html\",\n                meta: {\n                    tags: getPsTags(html)\n                }\n            },\n            {\n                name: \"graphql.json\",\n                body: JSON.stringify(render.meta.gqlCache),\n                type: \"application/json\",\n                meta: {}\n            }\n        ],\n        allArgs\n    ];\n};\n\nlet browser;\n\ntype RenderResult = {\n    content: string;\n    meta: Record<string, any>;\n};\n\ntype Args = {\n    context: HandlerContext;\n    args: BaseHandlerArgs;\n    configuration: Configuration;\n    renderUrlFunction?: (url: string) => RenderResult;\n};\n\ntype Meta = {\n    url: string;\n    id: string;\n    ts: number;\n    render: RenderResult;\n    args: Args;\n};\n\nexport const defaultRenderUrlFunction = async (url: string, args: Args): Promise<RenderResult> => {\n    if (!browser) {\n        browser = await chromium.puppeteer.launch({\n            args: chromium.args,\n            defaultViewport: chromium.defaultViewport,\n            executablePath: await chromium.executablePath,\n            headless: chromium.headless,\n            ignoreHTTPSErrors: true\n        });\n    }\n\n    const browserPage = await browser.newPage();\n\n    // Can be used to add additional logic - e.g. skip a GraphQL query to be made when in pre-rendering process.\n    windowSet(browserPage, \"__PS_RENDER__\", true);\n\n    const tenant = args?.args?.configuration?.meta?.tenant;\n    if (tenant) {\n        console.log(\"Setting tenant (__PS_RENDER_TENANT__) to window object....\");\n        windowSet(browserPage, \"__PS_RENDER_TENANT__\", tenant);\n    }\n\n    const locale = args?.args?.configuration?.meta?.locale;\n    if (locale) {\n        console.log(\"Setting locale (__PS_RENDER_LOCALE__) to window object....\");\n        windowSet(browserPage, \"__PS_RENDER_LOCALE__\", locale);\n    }\n\n    const notFoundPage = args?.args?.configuration?.meta?.notFoundPage;\n    if (notFoundPage) {\n        console.log(\"Setting locale (__PS_NOT_FOUND_PAGE__) to window object....\");\n        windowSet(browserPage, \"__PS_NOT_FOUND_PAGE__\", true);\n    }\n\n    // Don't load these resources during prerender.\n    const skipResources = [\"image\", \"stylesheet\"];\n    await browserPage.setRequestInterception(true);\n\n    const gqlCache = [];\n\n    browserPage.on(\"request\", request => {\n        if (skipResources.includes(request.resourceType())) {\n            request.abort();\n        } else {\n            request.continue();\n        }\n    });\n\n    // TODO: should be a plugin.\n    browserPage.on(\"response\", async response => {\n        const request = response.request();\n        const url = request.url();\n        if (url.includes(\"/graphql\") && request.method() === \"POST\") {\n            const responses = await response.json();\n            const postData = JSON.parse(request.postData());\n            const operations = Array.isArray(postData) ? postData : [postData];\n\n            for (let i = 0; i < operations.length; i++) {\n                const { operationName, query, variables } = operations[i];\n\n                // TODO: Should be handled via a plugin.\n                const operationsAllowedToCached = [\"PbGetPublishedPage\", \"PbPageListResponse\"];\n                if (operationsAllowedToCached.includes(operationName)) {\n                    gqlCache.push({\n                        query,\n                        variables,\n                        data: responses[i].data\n                    });\n                }\n            }\n            return;\n        }\n    });\n\n    // Load URL and wait for all network requests to settle.\n    await browserPage.goto(url, { waitUntil: \"networkidle0\" });\n\n    const apolloState = await browserPage.evaluate(() => {\n        // @ts-ignore\n        return window.getApolloState();\n    });\n\n    return {\n        content: await browserPage.content(),\n        // TODO: ideally, meta should be assigned here in a more \"plugins style\" way, not hardcoded.\n        meta: {\n            gqlCache,\n            apolloState\n        }\n    };\n};\n"],"file":"renderUrl.js"}