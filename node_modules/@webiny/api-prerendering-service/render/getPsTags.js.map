{"version":3,"sources":["../../src/render/getPsTags.ts"],"names":["parseAttributes","content","regex","m","output","exec","index","lastIndex","name","value","type","unique","psTags","attrs","push","length","uniqueMap","i","psTag","key","Object","values"],"mappings":";;;;;;;AAAA,MAAMA,eAAe,GAAGC,OAAO,IAAI;AAC/B,QAAMC,KAAK,GAAG,4CAAd;AACA,MAAIC,CAAJ;AAEA,QAAMC,MAAW,GAAG,EAApB;;AACA,SAAO,CAACD,CAAC,GAAGD,KAAK,CAACG,IAAN,CAAWJ,OAAX,CAAL,MAA8B,IAArC,EAA2C;AACvC;AACA,QAAIE,CAAC,CAACG,KAAF,KAAYJ,KAAK,CAACK,SAAtB,EAAiC;AAC7BL,MAAAA,KAAK,CAACK,SAAN;AACH;;AAED,UAAM,GAAGC,IAAH,EAASC,KAAT,IAAkBN,CAAxB;AACAC,IAAAA,MAAM,CAACI,IAAD,CAAN,GAAeC,KAAf;AACH;;AAED,MAAIL,MAAM,CAACI,IAAP,IAAeJ,MAAM,CAACM,IAA1B,EAAgC;AAC5B,WAAON,MAAP;AACH;;AACD,SAAOA,MAAP;AACH,CAnBD;;eAqBe,CAACH,OAAD,EAAUU,MAAM,GAAG,IAAnB,KAA4B;AACvC,MAAI,CAACV,OAAL,EAAc;AACV,WAAO,EAAP;AACH;;AAED,QAAMW,MAAM,GAAG,EAAf;AACA,QAAMV,KAAK,GAAG,kBAAd;AACA,MAAIC,CAAJ;;AAEA,SAAO,CAACA,CAAC,GAAGD,KAAK,CAACG,IAAN,CAAWJ,OAAX,CAAL,MAA8B,IAArC,EAA2C;AACvC;AACA,QAAIE,CAAC,CAACG,KAAF,KAAYJ,KAAK,CAACK,SAAtB,EAAiC;AAC7BL,MAAAA,KAAK,CAACK,SAAN;AACH;;AAED,UAAM,GAAGM,KAAH,IAAYV,CAAlB;AACAS,IAAAA,MAAM,CAACE,IAAP,CAAYd,eAAe,CAACa,KAAD,CAA3B;AACH;;AAED,MAAIF,MAAM,IAAIC,MAAM,CAACG,MAAP,GAAgB,CAA9B,EAAiC;AAC7B,UAAMC,SAAS,GAAG,EAAlB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAAM,CAACG,MAA3B,EAAmCE,CAAC,EAApC,EAAwC;AACpC,YAAMC,KAAK,GAAGN,MAAM,CAACK,CAAD,CAApB;AACAD,MAAAA,SAAS,CAACE,KAAK,CAACC,GAAN,GAAYD,KAAK,CAACT,KAAnB,CAAT,GAAqCS,KAArC;AACH;;AACD,WAAOE,MAAM,CAACC,MAAP,CAAcL,SAAd,CAAP;AACH;;AACD,SAAOJ,MAAP;AACH,C","sourcesContent":["const parseAttributes = content => {\n    const regex = /data-([a-zA-Z0-9-#]+)=\"([a-zA-Z0-9-#]+)\"/gm;\n    let m;\n\n    const output: any = {};\n    while ((m = regex.exec(content)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n            regex.lastIndex++;\n        }\n\n        const [, name, value] = m;\n        output[name] = value;\n    }\n\n    if (output.name && output.type) {\n        return output;\n    }\n    return output;\n};\n\nexport default (content, unique = true) => {\n    if (!content) {\n        return [];\n    }\n\n    const psTags = [];\n    const regex = /<ps-tag (.*?)>/gm;\n    let m;\n\n    while ((m = regex.exec(content)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n            regex.lastIndex++;\n        }\n\n        const [, attrs] = m;\n        psTags.push(parseAttributes(attrs));\n    }\n\n    if (unique && psTags.length > 0) {\n        const uniqueMap = {};\n        for (let i = 0; i < psTags.length; i++) {\n            const psTag = psTags[i];\n            uniqueMap[psTag.key + psTag.value] = psTag;\n        }\n        return Object.values(uniqueMap);\n    }\n    return psTags;\n};\n"],"file":"getPsTags.js"}