{"version":3,"sources":["../../../src/queue/add/index.ts"],"names":["type","handle","context","log","console","invocationArgs","handlerArgs","Array","isArray","handlerHookPlugins","plugins","byType","JSON","stringify","i","length","args","j","plugin","beforeAdd","data","PK","SK","TYPE","DbQueueJob","db","create","afterAdd","error","e"],"mappings":";;;;;;;;;AACA;;AAEA;;eAEe,OAAsB;AACjCA,EAAAA,IAAI,EAAE,SAD2B;;AAEjC,QAAMC,MAAN,CAAaC,OAAb,EAAgD;AAC5C,UAAMC,GAAG,GAAGC,OAAO,CAACD,GAApB;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAqBH,OAA3B;AACA,UAAMI,WAAW,GAAGC,KAAK,CAACC,OAAN,CAAcH,cAAd,IAAgCA,cAAhC,GAAiD,CAACA,cAAD,CAArE;AACA,UAAMI,kBAAkB,GAAGP,OAAO,CAACQ,OAAR,CAAgBC,MAAhB,CAA2C,mBAA3C,CAA3B;AAEAR,IAAAA,GAAG,CAAC,iBAAD,EAAoBS,IAAI,CAACC,SAAL,CAAeR,cAAf,CAApB,CAAH;;AAEA,QAAI;AACA,WAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,WAAW,CAACS,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzC,cAAME,IAAI,GAAGV,WAAW,CAACQ,CAAD,CAAxB;;AAEA,aAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,kBAAkB,CAACM,MAAvC,EAA+CE,CAAC,EAAhD,EAAoD;AAChD,gBAAMC,MAAM,GAAGT,kBAAkB,CAACQ,CAAD,CAAjC;;AACA,cAAI,OAAOC,MAAM,CAACC,SAAd,KAA4B,UAAhC,EAA4C;AACxC,kBAAMD,MAAM,CAACC,SAAP,CAAiB;AACnBjB,cAAAA,OADmB;AAEnBc,cAAAA,IAFmB;AAGnBb,cAAAA;AAHmB,aAAjB,CAAN;AAKH;AACJ;;AAEDA,QAAAA,GAAG,CAAC,uBAAD,CAAH;AAEA,cAAMiB,IAAgB,GAAG;AACrBC,UAAAA,EAAE,EAAE,UADiB;AAErBC,UAAAA,EAAE,EAAE,qBAFiB;AAGrBC,UAAAA,IAAI,EAAEA,YAAKC,UAHU;AAIrBR,UAAAA;AAJqB,SAAzB;AAOA,cAAMd,OAAO,CAACuB,EAAR,CAAWC,MAAX,CAAkB;AAAEN,UAAAA;AAAF,SAAlB,CAAN;AAEAjB,QAAAA,GAAG,CAAC,kBAAD,EAAqBS,IAAI,CAACC,SAAL,CAAeR,cAAf,CAArB,CAAH;;AAEA,aAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,kBAAkB,CAACM,MAAvC,EAA+CE,CAAC,EAAhD,EAAoD;AAChD,gBAAMC,MAAM,GAAGT,kBAAkB,CAACQ,CAAD,CAAjC;;AACA,cAAI,OAAOC,MAAM,CAACS,QAAd,KAA2B,UAA/B,EAA2C;AACvC,kBAAMT,MAAM,CAACS,QAAP,CAAgB;AAClBzB,cAAAA,OADkB;AAElBc,cAAAA,IAFkB;AAGlBb,cAAAA;AAHkB,aAAhB,CAAN;AAKH;AACJ;AACJ;;AAED,aAAO;AAAEiB,QAAAA,IAAI,EAAE,IAAR;AAAcQ,QAAAA,KAAK,EAAE;AAArB,OAAP;AACH,KAzCD,CAyCE,OAAOC,CAAP,EAAU;AACR1B,MAAAA,GAAG,CAAC,gEAAD,EAAmE0B,CAAnE,CAAH;AACA,aAAO;AAAET,QAAAA,IAAI,EAAE,IAAR;AAAcQ,QAAAA,KAAK,EAAEC;AAArB,OAAP;AACH;AACJ;;AAvDgC,CAAtB,C","sourcesContent":["import { HandlerPlugin, QueueAddHookPlugin } from \"./types\";\nimport { TYPE, DbQueueJob } from \"../../types\";\nimport { HandlerResponse } from \"../../types\";\nimport mdbid from \"mdbid\";\n\nexport default (): HandlerPlugin => ({\n    type: \"handler\",\n    async handle(context): Promise<HandlerResponse> {\n        const log = console.log;\n        const { invocationArgs } = context;\n        const handlerArgs = Array.isArray(invocationArgs) ? invocationArgs : [invocationArgs];\n        const handlerHookPlugins = context.plugins.byType<QueueAddHookPlugin>(\"ps-queue-add-hook\");\n\n        log(\"Received args: \", JSON.stringify(invocationArgs));\n\n        try {\n            for (let i = 0; i < handlerArgs.length; i++) {\n                const args = handlerArgs[i];\n\n                for (let j = 0; j < handlerHookPlugins.length; j++) {\n                    const plugin = handlerHookPlugins[j];\n                    if (typeof plugin.beforeAdd === \"function\") {\n                        await plugin.beforeAdd({\n                            context,\n                            args,\n                            log\n                        });\n                    }\n                }\n\n                log(\"Saving new queue job.\");\n\n                const data: DbQueueJob = {\n                    PK: \"PS#Q#JOB\",\n                    SK: mdbid(),\n                    TYPE: TYPE.DbQueueJob,\n                    args\n                };\n\n                await context.db.create({ data });\n\n                log(\"Queue job saved.\", JSON.stringify(invocationArgs));\n\n                for (let j = 0; j < handlerHookPlugins.length; j++) {\n                    const plugin = handlerHookPlugins[j];\n                    if (typeof plugin.afterAdd === \"function\") {\n                        await plugin.afterAdd({\n                            context,\n                            args,\n                            log\n                        });\n                    }\n                }\n            }\n\n            return { data: null, error: null };\n        } catch (e) {\n            log(\"An error occurred while trying to add to prerendering queue...\", e);\n            return { data: null, error: e };\n        }\n    }\n});\n"],"file":"index.js"}