"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _util = _interopRequireDefault(require("util"));

var _ncp = _interopRequireDefault(require("ncp"));

var _pluralize = _interopRequireDefault(require("pluralize"));

var _case = _interopRequireDefault(require("case"));

var _loadJsonFile = _interopRequireDefault(require("load-json-file"));

var _replaceInPath = require("replace-in-path");

var _chalk = _interopRequireDefault(require("chalk"));

var _findUp = _interopRequireDefault(require("find-up"));

var _terminalLink = _interopRequireDefault(require("terminal-link"));

var _utils = require("@webiny/cli-plugin-scaffold/utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const ncp = _util.default.promisify(_ncp.default.ncp);

const SCAFFOLD_DOCS_LINK = "https://www.webiny.com/docs/how-to-guides/scaffolding/extend-admin-area";

var _default = () => ({
  name: "cli-plugin-scaffold-template-graphql-app",
  type: "cli-plugin-scaffold-template",
  scaffold: {
    name: "Extend Admin Area",
    description: "Creates a new Admin Area module and extends your GraphQL API with\n  supporting CRUD query and mutation operations." + (_terminalLink.default.isSupported ? " " + (0, _terminalLink.default)("Learn more.", SCAFFOLD_DOCS_LINK) : ""),
    questions: ({
      context
    }) => {
      return [{
        name: "graphqlPluginsFolderPath",
        message: "Enter GraphQL API plugins folder path:",
        default: `api/code/graphql/src/plugins`,
        validate: location => {
          if (location.length < 2) {
            return `Please enter GraphQL API ${_chalk.default.cyan("plugins")} folder path.`;
          }

          return true;
        }
      }, {
        name: "adminPluginsFolderPath",
        message: "Enter Admin Area plugins folder path:",
        default: `apps/admin/code/src/plugins`,
        validate: location => {
          if (location.length < 2) {
            return `Please enter Admin Area ${_chalk.default.cyan("plugins")} folder path.`;
          }

          return true;
        }
      }, {
        name: "dataModelName",
        message: "Enter initial entity name:",
        default: "Todo",
        validate: (dataModelName, answers) => {
          if (!dataModelName.match(/^([a-zA-Z]+)$/)) {
            return "A valid name must consist of letters only.";
          }

          const pluralizedCamelCasedDataModelName = (0, _pluralize.default)(_case.default.camel(dataModelName));

          const graphqlPluginsFolderPath = _path.default.resolve(_path.default.join(answers.graphqlPluginsFolderPath, "scaffolds", pluralizedCamelCasedDataModelName));

          if (_fs.default.existsSync(graphqlPluginsFolderPath)) {
            const relativePath = _path.default.relative(context.project.root, graphqlPluginsFolderPath);

            return `Cannot continue - the ${_chalk.default.red(relativePath)} folder already exists.`;
          }

          const adminPluginsFolderPath = _path.default.resolve(_path.default.join(answers.adminPluginsFolderPath, "scaffolds", pluralizedCamelCasedDataModelName));

          if (_fs.default.existsSync(adminPluginsFolderPath)) {
            const relativePath = _path.default.relative(context.project.root, adminPluginsFolderPath);

            return `Cannot continue - the ${_chalk.default.red(relativePath)} folder already exists.`;
          }

          return true;
        }
      }];
    },
    generate: async options => {
      var _packageJson$devDepen;

      const {
        input,
        context,
        inquirer,
        wait,
        ora
      } = options;
      const dataModelName = {
        plural: (0, _pluralize.default)(_case.default.camel(input.dataModelName)),
        singular: _pluralize.default.singular(_case.default.camel(input.dataModelName))
      }; // Admin Area paths.

      const adminScaffoldsPath = _path.default.join(input.adminPluginsFolderPath, "scaffolds");

      const adminScaffoldsIndexPath = _path.default.join(adminScaffoldsPath, "index.ts");

      const adminNewCodePath = _path.default.join(adminScaffoldsPath, _case.default.camel(dataModelName.plural));

      const adminPackageJsonPath = _path.default.relative(context.project.root, _findUp.default.sync("package.json", {
        cwd: input.graphqlPluginsFolderPath
      }));

      const adminDependenciesUpdates = []; // GraphQL API paths.

      const graphqlScaffoldsPath = _path.default.join(input.graphqlPluginsFolderPath, "scaffolds");

      const graphqlScaffoldsIndexPath = _path.default.join(graphqlScaffoldsPath, "index.ts");

      const graphqlNewCodePath = _path.default.join(graphqlScaffoldsPath, _case.default.camel(dataModelName.plural));

      const graphqlPackageJsonPath = _path.default.relative(context.project.root, _findUp.default.sync("package.json", {
        cwd: input.graphqlPluginsFolderPath
      })); // Get needed dependencies updates.


      const graphqlDependenciesUpdates = [];
      const packageJson = await (0, _loadJsonFile.default)(graphqlPackageJsonPath);

      if (!(packageJson !== null && packageJson !== void 0 && (_packageJson$devDepen = packageJson.devDependencies) !== null && _packageJson$devDepen !== void 0 && _packageJson$devDepen["graphql-request"])) {
        graphqlDependenciesUpdates.push(["devDependencies", "graphql-request", "^3.4.0"]);
      }

      const templateFolderPath = _path.default.join(__dirname, "template");

      if (input.showConfirmation !== false) {
        console.log();
        console.log(`${_chalk.default.bold("The following operations will be performed on your behalf:")}`);
        console.log("- GraphQL API");
        console.log(`  - new plugins will be created in ${_chalk.default.green(graphqlNewCodePath)}`);
        console.log(`  - created plugins will be imported in ${_chalk.default.green(graphqlScaffoldsIndexPath)}`);

        if (graphqlDependenciesUpdates.length) {
          console.log(`  - dependencies in ${_chalk.default.green(graphqlPackageJsonPath)} will be updated `);
        }

        console.log("- Admin Area");
        console.log(`  - new plugins will be created in ${_chalk.default.green(adminNewCodePath)}`);
        console.log(`  - created plugins will be imported in ${_chalk.default.green(adminScaffoldsIndexPath)}`);

        if (adminDependenciesUpdates.length) {
          console.log(`  - dependencies in ${_chalk.default.green(adminPackageJsonPath)} will be updated `);
        }

        const prompt = inquirer.createPromptModule();
        const {
          proceed
        } = await prompt({
          name: "proceed",
          message: `Are you sure you want to continue?`,
          type: "confirm",
          default: false
        });

        if (!proceed) {
          process.exit(0);
        }

        console.log();
      }

      const cliPluginScaffoldGraphQl = context.plugins.byName("cli-plugin-scaffold-graphql");
      await cliPluginScaffoldGraphQl.scaffold.generate(_objectSpread(_objectSpread({}, options), {}, {
        input: {
          showConfirmation: false,
          dataModelName: input.dataModelName,
          pluginsFolderPath: input.graphqlPluginsFolderPath
        }
      }));
      ora.start(`Creating new plugins in ${_chalk.default.green(adminNewCodePath)}...`);
      await wait(1000);

      _fs.default.mkdirSync(adminNewCodePath, {
        recursive: true
      });

      await ncp(templateFolderPath, adminNewCodePath); // Replace generic "Target" with received "dataModelName" argument.

      const codeReplacements = [{
        find: "targetDataModels",
        replaceWith: _case.default.camel(dataModelName.plural)
      }, {
        find: "TargetDataModels",
        replaceWith: _case.default.pascal(dataModelName.plural)
      }, {
        find: "TARGET_DATA_MODELS",
        replaceWith: _case.default.constant(dataModelName.plural)
      }, {
        find: "target-data-models",
        replaceWith: _case.default.kebab(dataModelName.plural)
      }, {
        find: "Target Data Models",
        replaceWith: _case.default.title(dataModelName.plural)
      }, {
        find: "targetDataModel",
        replaceWith: _case.default.camel(dataModelName.singular)
      }, {
        find: "TargetDataModel",
        replaceWith: _case.default.pascal(dataModelName.singular)
      }, {
        find: "TARGET_DATA_MODEL",
        replaceWith: _case.default.constant(dataModelName.singular)
      }, {
        find: "target-data-model",
        replaceWith: _case.default.kebab(dataModelName.singular)
      }, {
        find: "Target Data Model",
        replaceWith: _case.default.title(dataModelName.singular)
      }];
      (0, _replaceInPath.replaceInPath)(_path.default.join(adminNewCodePath, "/**/*.ts"), codeReplacements);
      (0, _replaceInPath.replaceInPath)(_path.default.join(adminNewCodePath, "/**/*.tsx"), codeReplacements);
      const fileNameReplacements = [{
        find: "views/TargetDataModelsDataList.tsx",
        replaceWith: `views/${_case.default.pascal(dataModelName.plural)}DataList.tsx`
      }, {
        find: "views/TargetDataModelsForm.tsx",
        replaceWith: `views/${_case.default.pascal(dataModelName.plural)}Form.tsx`
      }, {
        find: "views/hooks/useTargetDataModelsForm.ts",
        replaceWith: `views/hooks/use${_case.default.pascal(dataModelName.plural)}Form.ts`
      }, {
        find: "views/hooks/useTargetDataModelsDataList.ts",
        replaceWith: `views/hooks/use${_case.default.pascal(dataModelName.plural)}DataList.ts`
      }];

      for (const fileNameReplacement of fileNameReplacements) {
        _fs.default.renameSync(_path.default.join(adminNewCodePath, fileNameReplacement.find), _path.default.join(adminNewCodePath, fileNameReplacement.replaceWith));
      }

      ora.stopAndPersist({
        symbol: _chalk.default.green("✔"),
        text: `New plugins created in ${_chalk.default.green(adminNewCodePath)}.`
      });
      ora.start(`Importing created plugins in ${_chalk.default.green(adminScaffoldsIndexPath)}.`);
      await wait(1000);
      (0, _utils.createScaffoldsIndexFile)(adminScaffoldsPath);
      await (0, _utils.updateScaffoldsIndexFile)({
        scaffoldsIndexPath: adminScaffoldsIndexPath,
        importName: dataModelName.plural,
        importPath: `./${dataModelName.plural}`
      });
      ora.stopAndPersist({
        symbol: _chalk.default.green("✔"),
        text: `Imported created plugins in ${_chalk.default.green(adminScaffoldsIndexPath)}.`
      });
      await (0, _utils.formatCode)(["**/*.ts", "**/*.tsx"], {
        cwd: adminNewCodePath
      });
    },
    onSuccess: async () => {
      console.log();
      console.log(`${_chalk.default.green("✔")} New GraphQL API and Admin Area plugins created and imported successfully.`);
      console.log();
      console.log(_chalk.default.bold("Next Steps"));
      console.log(`‣ deploy the extended GraphQL API and continue developing by running the ${_chalk.default.green("yarn webiny watch api/code/graphql --env dev")} command`);
      console.log(`‣ after you've deployed the extended GraphQL API, continue developing your Admin Area React application locally by running the ${_chalk.default.green("yarn webiny watch apps/admin --env dev")} command`);
      console.log();
      console.log(_chalk.default.bold("Useful Links"));
      const links = [["Extend Admin Area", SCAFFOLD_DOCS_LINK], ["Use the Watch Command", "https://www.webiny.com/docs/how-to-guides/use-watch-command"]];
      links.forEach(([text, url]) => console.log((0, _terminalLink.default)("‣ " + text, url, {
        fallback: (text, link) => text + " - " + link
      })));
    }
  }
});

exports.default = _default;
//# sourceMappingURL=index.js.map