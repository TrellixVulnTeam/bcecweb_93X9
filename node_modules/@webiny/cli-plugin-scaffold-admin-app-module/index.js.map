{"version":3,"sources":["../src/index.ts"],"names":["ncp","util","promisify","ncpBase","SCAFFOLD_DOCS_LINK","name","type","scaffold","description","link","isSupported","questions","context","message","default","validate","location","length","chalk","cyan","dataModelName","answers","match","pluralizedCamelCasedDataModelName","Case","camel","graphqlPluginsFolderPath","path","resolve","join","fs","existsSync","relativePath","relative","project","root","red","adminPluginsFolderPath","generate","options","input","inquirer","wait","ora","plural","singular","pluralize","adminScaffoldsPath","adminScaffoldsIndexPath","adminNewCodePath","adminPackageJsonPath","findUp","sync","cwd","adminDependenciesUpdates","graphqlScaffoldsPath","graphqlScaffoldsIndexPath","graphqlNewCodePath","graphqlPackageJsonPath","graphqlDependenciesUpdates","packageJson","devDependencies","push","templateFolderPath","__dirname","showConfirmation","console","log","bold","green","prompt","createPromptModule","proceed","process","exit","cliPluginScaffoldGraphQl","plugins","byName","pluginsFolderPath","start","mkdirSync","recursive","codeReplacements","find","replaceWith","pascal","constant","kebab","title","fileNameReplacements","fileNameReplacement","renameSync","stopAndPersist","symbol","text","scaffoldsIndexPath","importName","importPath","onSuccess","links","forEach","url","fallback"],"mappings":"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","sourcesContent":["import { CliCommandScaffoldTemplate } from \"@webiny/cli-plugin-scaffold/types\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport util from \"util\";\nimport ncpBase from \"ncp\";\nimport pluralize from \"pluralize\";\nimport Case from \"case\";\nimport loadJsonFile from \"load-json-file\";\nimport { replaceInPath } from \"replace-in-path\";\nimport chalk from \"chalk\";\nimport findUp from \"find-up\";\nimport link from \"terminal-link\";\nimport {\n    createScaffoldsIndexFile,\n    updateScaffoldsIndexFile,\n    formatCode\n} from \"@webiny/cli-plugin-scaffold/utils\";\n\nconst ncp = util.promisify(ncpBase.ncp);\n\ninterface Input {\n    dataModelName: string;\n    graphqlPluginsFolderPath: string;\n    adminPluginsFolderPath: string;\n    showConfirmation?: boolean;\n}\n\nconst SCAFFOLD_DOCS_LINK =\n    \"https://www.webiny.com/docs/how-to-guides/scaffolding/extend-admin-area\";\n\nexport default (): CliCommandScaffoldTemplate<Input> => ({\n    name: \"cli-plugin-scaffold-template-graphql-app\",\n    type: \"cli-plugin-scaffold-template\",\n    scaffold: {\n        name: \"Extend Admin Area\",\n        description:\n            \"Creates a new Admin Area module and extends your GraphQL API with\\n  supporting CRUD query and mutation operations.\" +\n            (link.isSupported ? \" \" + link(\"Learn more.\", SCAFFOLD_DOCS_LINK) : \"\"),\n        questions: ({ context }) => {\n            return [\n                {\n                    name: \"graphqlPluginsFolderPath\",\n                    message: \"Enter GraphQL API plugins folder path:\",\n                    default: `api/code/graphql/src/plugins`,\n                    validate: location => {\n                        if (location.length < 2) {\n                            return `Please enter GraphQL API ${chalk.cyan(\"plugins\")} folder path.`;\n                        }\n\n                        return true;\n                    }\n                },\n                {\n                    name: \"adminPluginsFolderPath\",\n                    message: \"Enter Admin Area plugins folder path:\",\n                    default: `apps/admin/code/src/plugins`,\n                    validate: location => {\n                        if (location.length < 2) {\n                            return `Please enter Admin Area ${chalk.cyan(\"plugins\")} folder path.`;\n                        }\n\n                        return true;\n                    }\n                },\n                {\n                    name: \"dataModelName\",\n                    message: \"Enter initial entity name:\",\n                    default: \"Todo\",\n                    validate: (dataModelName, answers) => {\n                        if (!dataModelName.match(/^([a-zA-Z]+)$/)) {\n                            return \"A valid name must consist of letters only.\";\n                        }\n\n                        const pluralizedCamelCasedDataModelName = pluralize(\n                            Case.camel(dataModelName)\n                        );\n\n                        const graphqlPluginsFolderPath = path.resolve(\n                            path.join(\n                                answers.graphqlPluginsFolderPath,\n                                \"scaffolds\",\n                                pluralizedCamelCasedDataModelName\n                            )\n                        );\n\n                        if (fs.existsSync(graphqlPluginsFolderPath)) {\n                            const relativePath = path.relative(\n                                context.project.root,\n                                graphqlPluginsFolderPath\n                            );\n                            return `Cannot continue - the ${chalk.red(\n                                relativePath\n                            )} folder already exists.`;\n                        }\n\n                        const adminPluginsFolderPath = path.resolve(\n                            path.join(\n                                answers.adminPluginsFolderPath,\n                                \"scaffolds\",\n                                pluralizedCamelCasedDataModelName\n                            )\n                        );\n\n                        if (fs.existsSync(adminPluginsFolderPath)) {\n                            const relativePath = path.relative(\n                                context.project.root,\n                                adminPluginsFolderPath\n                            );\n                            return `Cannot continue - the ${chalk.red(\n                                relativePath\n                            )} folder already exists.`;\n                        }\n\n                        return true;\n                    }\n                }\n            ];\n        },\n        generate: async options => {\n            const { input, context, inquirer, wait, ora } = options;\n\n            const dataModelName = {\n                plural: pluralize(Case.camel(input.dataModelName)),\n                singular: pluralize.singular(Case.camel(input.dataModelName))\n            };\n\n            // Admin Area paths.\n            const adminScaffoldsPath = path.join(input.adminPluginsFolderPath, \"scaffolds\");\n            const adminScaffoldsIndexPath = path.join(adminScaffoldsPath, \"index.ts\");\n            const adminNewCodePath = path.join(\n                adminScaffoldsPath,\n                Case.camel(dataModelName.plural)\n            );\n            const adminPackageJsonPath = path.relative(\n                context.project.root,\n                findUp.sync(\"package.json\", { cwd: input.graphqlPluginsFolderPath })\n            );\n\n            const adminDependenciesUpdates = [];\n\n            // GraphQL API paths.\n            const graphqlScaffoldsPath = path.join(input.graphqlPluginsFolderPath, \"scaffolds\");\n            const graphqlScaffoldsIndexPath = path.join(graphqlScaffoldsPath, \"index.ts\");\n            const graphqlNewCodePath = path.join(\n                graphqlScaffoldsPath,\n                Case.camel(dataModelName.plural)\n            );\n            const graphqlPackageJsonPath = path.relative(\n                context.project.root,\n                findUp.sync(\"package.json\", { cwd: input.graphqlPluginsFolderPath })\n            );\n\n            // Get needed dependencies updates.\n            const graphqlDependenciesUpdates = [];\n            const packageJson = await loadJsonFile<Record<string, any>>(graphqlPackageJsonPath);\n            if (!packageJson?.devDependencies?.[\"graphql-request\"]) {\n                graphqlDependenciesUpdates.push([\"devDependencies\", \"graphql-request\", \"^3.4.0\"]);\n            }\n\n            const templateFolderPath = path.join(__dirname, \"template\");\n\n            if (input.showConfirmation !== false) {\n                console.log();\n                console.log(\n                    `${chalk.bold(\"The following operations will be performed on your behalf:\")}`\n                );\n\n                console.log(\"- GraphQL API\");\n                console.log(\n                    `  - new plugins will be created in ${chalk.green(graphqlNewCodePath)}`\n                );\n                console.log(\n                    `  - created plugins will be imported in ${chalk.green(\n                        graphqlScaffoldsIndexPath\n                    )}`\n                );\n\n                if (graphqlDependenciesUpdates.length) {\n                    console.log(\n                        `  - dependencies in ${chalk.green(\n                            graphqlPackageJsonPath\n                        )} will be updated `\n                    );\n                }\n\n                console.log(\"- Admin Area\");\n                console.log(`  - new plugins will be created in ${chalk.green(adminNewCodePath)}`);\n                console.log(\n                    `  - created plugins will be imported in ${chalk.green(\n                        adminScaffoldsIndexPath\n                    )}`\n                );\n\n                if (adminDependenciesUpdates.length) {\n                    console.log(\n                        `  - dependencies in ${chalk.green(adminPackageJsonPath)} will be updated `\n                    );\n                }\n\n                const prompt = inquirer.createPromptModule();\n\n                const { proceed } = await prompt({\n                    name: \"proceed\",\n                    message: `Are you sure you want to continue?`,\n                    type: \"confirm\",\n                    default: false\n                });\n\n                if (!proceed) {\n                    process.exit(0);\n                }\n                console.log();\n            }\n\n            const cliPluginScaffoldGraphQl = context.plugins.byName<CliCommandScaffoldTemplate>(\n                \"cli-plugin-scaffold-graphql\"\n            );\n\n            await cliPluginScaffoldGraphQl.scaffold.generate({\n                ...options,\n                input: {\n                    showConfirmation: false,\n                    dataModelName: input.dataModelName,\n                    pluginsFolderPath: input.graphqlPluginsFolderPath\n                }\n            });\n\n            ora.start(`Creating new plugins in ${chalk.green(adminNewCodePath)}...`);\n            await wait(1000);\n\n            fs.mkdirSync(adminNewCodePath, { recursive: true });\n\n            await ncp(templateFolderPath, adminNewCodePath);\n\n            // Replace generic \"Target\" with received \"dataModelName\" argument.\n            const codeReplacements = [\n                { find: \"targetDataModels\", replaceWith: Case.camel(dataModelName.plural) },\n                { find: \"TargetDataModels\", replaceWith: Case.pascal(dataModelName.plural) },\n                { find: \"TARGET_DATA_MODELS\", replaceWith: Case.constant(dataModelName.plural) },\n                { find: \"target-data-models\", replaceWith: Case.kebab(dataModelName.plural) },\n                { find: \"Target Data Models\", replaceWith: Case.title(dataModelName.plural) },\n\n                { find: \"targetDataModel\", replaceWith: Case.camel(dataModelName.singular) },\n                { find: \"TargetDataModel\", replaceWith: Case.pascal(dataModelName.singular) },\n                { find: \"TARGET_DATA_MODEL\", replaceWith: Case.constant(dataModelName.singular) },\n                { find: \"target-data-model\", replaceWith: Case.kebab(dataModelName.singular) },\n                { find: \"Target Data Model\", replaceWith: Case.title(dataModelName.singular) }\n            ];\n\n            replaceInPath(path.join(adminNewCodePath, \"/**/*.ts\"), codeReplacements);\n            replaceInPath(path.join(adminNewCodePath, \"/**/*.tsx\"), codeReplacements);\n\n            const fileNameReplacements = [\n                {\n                    find: \"views/TargetDataModelsDataList.tsx\",\n                    replaceWith: `views/${Case.pascal(dataModelName.plural)}DataList.tsx`\n                },\n                {\n                    find: \"views/TargetDataModelsForm.tsx\",\n                    replaceWith: `views/${Case.pascal(dataModelName.plural)}Form.tsx`\n                },\n\n                {\n                    find: \"views/hooks/useTargetDataModelsForm.ts\",\n                    replaceWith: `views/hooks/use${Case.pascal(dataModelName.plural)}Form.ts`\n                },\n                {\n                    find: \"views/hooks/useTargetDataModelsDataList.ts\",\n                    replaceWith: `views/hooks/use${Case.pascal(dataModelName.plural)}DataList.ts`\n                }\n            ];\n\n            for (const fileNameReplacement of fileNameReplacements) {\n                fs.renameSync(\n                    path.join(adminNewCodePath, fileNameReplacement.find),\n                    path.join(adminNewCodePath, fileNameReplacement.replaceWith)\n                );\n            }\n\n            ora.stopAndPersist({\n                symbol: chalk.green(\"✔\"),\n                text: `New plugins created in ${chalk.green(adminNewCodePath)}.`\n            });\n\n            ora.start(`Importing created plugins in ${chalk.green(adminScaffoldsIndexPath)}.`);\n            await wait(1000);\n\n            createScaffoldsIndexFile(adminScaffoldsPath);\n            await updateScaffoldsIndexFile({\n                scaffoldsIndexPath: adminScaffoldsIndexPath,\n                importName: dataModelName.plural,\n                importPath: `./${dataModelName.plural}`\n            });\n\n            ora.stopAndPersist({\n                symbol: chalk.green(\"✔\"),\n                text: `Imported created plugins in ${chalk.green(adminScaffoldsIndexPath)}.`\n            });\n\n            await formatCode([\"**/*.ts\", \"**/*.tsx\"], { cwd: adminNewCodePath });\n        },\n        onSuccess: async () => {\n            console.log();\n            console.log(\n                `${chalk.green(\n                    \"✔\"\n                )} New GraphQL API and Admin Area plugins created and imported successfully.`\n            );\n            console.log();\n            console.log(chalk.bold(\"Next Steps\"));\n\n            console.log(\n                `‣ deploy the extended GraphQL API and continue developing by running the ${chalk.green(\n                    \"yarn webiny watch api/code/graphql --env dev\"\n                )} command`\n            );\n\n            console.log(\n                `‣ after you've deployed the extended GraphQL API, continue developing your Admin Area React application locally by running the ${chalk.green(\n                    \"yarn webiny watch apps/admin --env dev\"\n                )} command`\n            );\n\n            console.log();\n            console.log(chalk.bold(\"Useful Links\"));\n\n            const links = [\n                [\"Extend Admin Area\", SCAFFOLD_DOCS_LINK],\n                [\n                    \"Use the Watch Command\",\n                    \"https://www.webiny.com/docs/how-to-guides/use-watch-command\"\n                ]\n            ];\n\n            links.forEach(([text, url]) =>\n                console.log(\n                    link(\"‣ \" + text, url, { fallback: (text, link) => text + \" - \" + link })\n                )\n            );\n        }\n    }\n});\n"],"file":"index.js"}