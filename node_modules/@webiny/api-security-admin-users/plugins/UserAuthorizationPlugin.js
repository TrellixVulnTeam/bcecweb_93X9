"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UserAuthorizationPlugin = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _AuthorizationPlugin = require("@webiny/api-security/plugins/AuthorizationPlugin");

var _error = _interopRequireDefault(require("@webiny/error"));

const extractPermissions = tenantAccess => {
  if (!tenantAccess || !tenantAccess.group || !tenantAccess.group.permissions) {
    return null;
  }

  return tenantAccess.group.permissions;
};

class UserAuthorizationPlugin extends _AuthorizationPlugin.AuthorizationPlugin {
  constructor(config) {
    super();
    (0, _defineProperty2.default)(this, "_config", void 0);
    this._config = config || {};
  }

  async getPermissions({
    security,
    tenancy
  }) {
    const identity = security.getIdentity();

    if (!identity || identity.type !== this._config.identityType) {
      return null;
    }

    const tenant = tenancy.getCurrentTenant();
    const user = await security.users.getUser(identity.id, {
      auth: false
    });

    if (!user) {
      throw new _error.default(`User "${identity.id}" was not found!`, "USER_NOT_FOUND", {
        id: identity.id
      });
    }

    const permissions = await security.users.getUserAccess(user.login);
    const tenantAccess = permissions.find(set => set.tenant.id === tenant.id);
    return extractPermissions(tenantAccess);
  }

}

exports.UserAuthorizationPlugin = UserAuthorizationPlugin;
//# sourceMappingURL=UserAuthorizationPlugin.js.map