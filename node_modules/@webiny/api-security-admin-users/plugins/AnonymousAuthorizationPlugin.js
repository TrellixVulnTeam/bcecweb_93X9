"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnonymousAuthorizationPlugin = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _AuthorizationPlugin = require("@webiny/api-security/plugins/AuthorizationPlugin");

class AnonymousAuthorizationPlugin extends _AuthorizationPlugin.AuthorizationPlugin {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "_permissionCache", new Map());
  }

  async getPermissions({
    security,
    tenancy
  }) {
    const tenant = tenancy.getCurrentTenant();

    if (!tenant) {
      return [];
    }

    if (security.getIdentity()) {
      return;
    }

    if (this._permissionCache.has(tenant.id)) {
      return this._permissionCache.get(tenant.id);
    } // We assume that all other authorization plugins have already been executed.
    // If we've reached this far, it means that we have an anonymous user
    // and we need to load permissions from the "anonymous" group.


    const group = await security.groups.getGroup("anonymous", {
      auth: false
    });
    const permissions = group ? group.permissions || [] : [];

    this._permissionCache.set(tenant.id, permissions);

    return permissions;
  }

}

exports.AnonymousAuthorizationPlugin = AnonymousAuthorizationPlugin;
//# sourceMappingURL=AnonymousAuthorizationPlugin.js.map