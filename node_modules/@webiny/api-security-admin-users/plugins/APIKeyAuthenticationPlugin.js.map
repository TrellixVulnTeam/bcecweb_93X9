{"version":3,"sources":["../../src/plugins/APIKeyAuthenticationPlugin.ts"],"names":["APIKeyAuthenticationPlugin","AuthenticationPlugin","constructor","config","_config","authenticate","context","headers","http","request","header","token","split","pop","startsWith","identityType","apiKey","security","apiKeys","getApiKeyByToken","SecurityIdentity","id","displayName","name","type","permissions"],"mappings":";;;;;;;;;;;AAEA;;AACA;;AAQO,MAAMA,0BAAN,SAAyCC,0CAAzC,CAAuE;AAG1EC,EAAAA,WAAW,CAACC,MAAD,EAAkB;AACzB;AADyB;AAEzB,SAAKC,OAAL,GAAeD,MAAM,IAAI,EAAzB;AACH;;AAEiB,QAAZE,YAAY,CAACC,OAAD,EAAmB;AACjC,UAAM;AAAEC,MAAAA;AAAF,QAAcD,OAAO,CAACE,IAAR,CAAaC,OAAjC;AACA,UAAMC,MAAM,GAAGH,OAAO,CAAC,eAAD,CAAP,IAA4BA,OAAO,CAAC,eAAD,CAAlD;AACA,UAAMI,KAAK,GAAGD,MAAM,GAAGA,MAAM,CAACE,KAAP,CAAa,GAAb,EAAkBC,GAAlB,EAAH,GAA6B,IAAjD;;AACA,QAAI,CAACF,KAAD,IAAU,CAACA,KAAK,CAACG,UAAN,CAAiB,GAAjB,CAAf,EAAsC;AAClC;AACH;;AAED,UAAMC,YAAY,GAAG,KAAKX,OAAL,CAAaW,YAAb,IAA6B,SAAlD;AACA,UAAMC,MAAM,GAAG,MAAMV,OAAO,CAACW,QAAR,CAAiBC,OAAjB,CAAyBC,gBAAzB,CAA0CR,KAA1C,CAArB;;AAEA,QAAIK,MAAJ,EAAY;AACR,aAAO,IAAII,6BAAJ,CAAqB;AACxBC,QAAAA,EAAE,EAAEL,MAAM,CAACK,EADa;AAExBC,QAAAA,WAAW,EAAEN,MAAM,CAACO,IAFI;AAGxBC,QAAAA,IAAI,EAAET,YAHkB;AAIxB;AACA;AACAU,QAAAA,WAAW,EAAET,MAAM,CAACS;AANI,OAArB,CAAP;AAQH;AACJ;;AA7ByE","sourcesContent":["import { Context as HandlerContext } from \"@webiny/handler/types\";\nimport { HttpContext } from \"@webiny/handler-http/types\";\nimport { SecurityIdentity } from \"@webiny/api-security\";\nimport { AuthenticationPlugin } from \"@webiny/api-security/plugins/AuthenticationPlugin\";\nimport { TenancyContext } from \"@webiny/api-tenancy/types\";\ntype Context = HandlerContext<HttpContext, TenancyContext>;\n\nexport interface Config {\n    identityType?: string;\n}\n\nexport class APIKeyAuthenticationPlugin extends AuthenticationPlugin<Context> {\n    private _config: Config;\n\n    constructor(config?: Config) {\n        super();\n        this._config = config || {};\n    }\n\n    async authenticate(context: Context) {\n        const { headers } = context.http.request;\n        const header = headers[\"Authorization\"] || headers[\"authorization\"];\n        const token = header ? header.split(\" \").pop() : null;\n        if (!token || !token.startsWith(\"a\")) {\n            return;\n        }\n\n        const identityType = this._config.identityType || \"api-key\";\n        const apiKey = await context.security.apiKeys.getApiKeyByToken(token);\n\n        if (apiKey) {\n            return new SecurityIdentity({\n                id: apiKey.id,\n                displayName: apiKey.name,\n                type: identityType,\n                // Add permissions directly to the identity so we don't have to load them\n                // again when authorization kicks in.\n                permissions: apiKey.permissions\n            });\n        }\n    }\n}\n"],"file":"APIKeyAuthenticationPlugin.js"}