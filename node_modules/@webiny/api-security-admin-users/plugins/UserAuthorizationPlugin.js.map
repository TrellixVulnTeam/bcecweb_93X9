{"version":3,"sources":["../../src/plugins/UserAuthorizationPlugin.ts"],"names":["extractPermissions","tenantAccess","group","permissions","UserAuthorizationPlugin","AuthorizationPlugin","constructor","config","_config","getPermissions","security","tenancy","identity","getIdentity","type","identityType","tenant","getCurrentTenant","user","users","getUser","id","auth","WebinyError","getUserAccess","login","find","set"],"mappings":";;;;;;;;;;;AAEA;;AACA;;AAMA,MAAMA,kBAAkB,GAAIC,YAAD,IAA8D;AACrF,MAAI,CAACA,YAAD,IAAiB,CAACA,YAAY,CAACC,KAA/B,IAAwC,CAACD,YAAY,CAACC,KAAb,CAAmBC,WAAhE,EAA6E;AACzE,WAAO,IAAP;AACH;;AACD,SAAOF,YAAY,CAACC,KAAb,CAAmBC,WAA1B;AACH,CALD;;AAOO,MAAMC,uBAAN,SAAsCC,wCAAtC,CAA6E;AAGhFC,EAAAA,WAAW,CAACC,MAAD,EAAkB;AACzB;AADyB;AAEzB,SAAKC,OAAL,GAAeD,MAAM,IAAI,EAAzB;AACH;;AAEmB,QAAdE,cAAc,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAD,EAA2C;AAC3D,UAAMC,QAAQ,GAAGF,QAAQ,CAACG,WAAT,EAAjB;;AACA,QAAI,CAACD,QAAD,IAAaA,QAAQ,CAACE,IAAT,KAAkB,KAAKN,OAAL,CAAaO,YAAhD,EAA8D;AAC1D,aAAO,IAAP;AACH;;AACD,UAAMC,MAAM,GAAGL,OAAO,CAACM,gBAAR,EAAf;AAEA,UAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,KAAT,CAAeC,OAAf,CAAuBR,QAAQ,CAACS,EAAhC,EAAoC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAApC,CAAnB;;AAEA,QAAI,CAACJ,IAAL,EAAW;AACP,YAAM,IAAIK,cAAJ,CAAiB,SAAQX,QAAQ,CAACS,EAAG,kBAArC,EAAwD,gBAAxD,EAA0E;AAC5EA,QAAAA,EAAE,EAAET,QAAQ,CAACS;AAD+D,OAA1E,CAAN;AAGH;;AAED,UAAMlB,WAAW,GAAG,MAAMO,QAAQ,CAACS,KAAT,CAAeK,aAAf,CAA6BN,IAAI,CAACO,KAAlC,CAA1B;AACA,UAAMxB,YAAY,GAAGE,WAAW,CAACuB,IAAZ,CAAiBC,GAAG,IAAIA,GAAG,CAACX,MAAJ,CAAWK,EAAX,KAAkBL,MAAM,CAACK,EAAjD,CAArB;AACA,WAAOrB,kBAAkB,CAACC,YAAD,CAAzB;AACH;;AA1B+E","sourcesContent":["import { SecurityPermission } from \"@webiny/api-security/types\";\nimport { AdminUsersContext, TenantAccess } from \"~/types\";\nimport { AuthorizationPlugin } from \"@webiny/api-security/plugins/AuthorizationPlugin\";\nimport WebinyError from \"@webiny/error\";\n\nexport interface Config {\n    identityType?: string;\n}\n\nconst extractPermissions = (tenantAccess?: TenantAccess): SecurityPermission[] | null => {\n    if (!tenantAccess || !tenantAccess.group || !tenantAccess.group.permissions) {\n        return null;\n    }\n    return tenantAccess.group.permissions;\n};\n\nexport class UserAuthorizationPlugin extends AuthorizationPlugin<AdminUsersContext> {\n    private readonly _config: Config;\n\n    constructor(config?: Config) {\n        super();\n        this._config = config || {};\n    }\n\n    async getPermissions({ security, tenancy }: AdminUsersContext) {\n        const identity = security.getIdentity();\n        if (!identity || identity.type !== this._config.identityType) {\n            return null;\n        }\n        const tenant = tenancy.getCurrentTenant();\n\n        const user = await security.users.getUser(identity.id, { auth: false });\n\n        if (!user) {\n            throw new WebinyError(`User \"${identity.id}\" was not found!`, \"USER_NOT_FOUND\", {\n                id: identity.id\n            });\n        }\n\n        const permissions = await security.users.getUserAccess(user.login);\n        const tenantAccess = permissions.find(set => set.tenant.id === tenant.id);\n        return extractPermissions(tenantAccess);\n    }\n}\n"],"file":"UserAuthorizationPlugin.js"}