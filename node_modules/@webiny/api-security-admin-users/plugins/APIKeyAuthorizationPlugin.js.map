{"version":3,"sources":["../../src/plugins/APIKeyAuthorizationPlugin.ts"],"names":["APIKeyAuthorizationPlugin","AuthorizationPlugin","constructor","config","_config","getPermissions","security","identityType","identity","getIdentity","type","Array","isArray","permissions"],"mappings":";;;;;;;;;;;AACA;;AAMO,MAAMA,yBAAN,SAAwCC,wCAAxC,CAA+E;AAGlFC,EAAAA,WAAW,CAACC,MAAD,EAAkB;AACzB;AADyB;AAEzB,SAAKC,OAAL,GAAeD,MAAM,IAAI,EAAzB;AACH;;AAEmB,QAAdE,cAAc,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAkC;AAClD,UAAMC,YAAY,GAAG,KAAKH,OAAL,CAAaG,YAAb,IAA6B,SAAlD;AAEA,UAAMC,QAAQ,GAAGF,QAAQ,CAACG,WAAT,EAAjB;;AAEA,QAAI,CAACD,QAAD,IAAaA,QAAQ,CAACE,IAAT,KAAkBH,YAAnC,EAAiD;AAC7C;AACH,KAPiD,CASlD;AACA;;;AACA,WAAOI,KAAK,CAACC,OAAN,CAAcJ,QAAQ,CAACK,WAAvB,IAAsCL,QAAQ,CAACK,WAA/C,GAA6D,EAApE;AACH;;AApBiF","sourcesContent":["import { AdminUsersContext } from \"~/types\";\nimport { AuthorizationPlugin } from \"@webiny/api-security/plugins/AuthorizationPlugin\";\n\nexport interface Config {\n    identityType?: string;\n}\n\nexport class APIKeyAuthorizationPlugin extends AuthorizationPlugin<AdminUsersContext> {\n    private _config: Config;\n\n    constructor(config?: Config) {\n        super();\n        this._config = config || {};\n    }\n\n    async getPermissions({ security }: AdminUsersContext) {\n        const identityType = this._config.identityType || \"api-key\";\n\n        const identity = security.getIdentity();\n\n        if (!identity || identity.type !== identityType) {\n            return;\n        }\n\n        // We can expect `permissions` to exist on the identity, because api-key authentication\n        // plugin sets them on the identity instance to avoid loading them from DB here.\n        return Array.isArray(identity.permissions) ? identity.permissions : [];\n    }\n}\n"],"file":"APIKeyAuthorizationPlugin.js"}