{"version":3,"sources":["../../src/plugins/PersonalAccessTokenAuthenticationPlugin.ts"],"names":["PersonalAccessTokenAuthenticationPlugin","AuthenticationPlugin","constructor","config","_config","authenticate","context","headers","http","request","header","token","split","pop","startsWith","user","security","users","getUserByPersonalAccessToken","SecurityIdentity","id","login","type","identityType","displayName","firstName","lastName"],"mappings":";;;;;;;;;;;AAEA;;AAEA;;AAOO,MAAMA,uCAAN,SAAsDC,0CAAtD,CAAoF;AAGvFC,EAAAA,WAAW,CAACC,MAAD,EAAiB;AACxB;AADwB;AAExB,SAAKC,OAAL,GAAeD,MAAf;AACH;;AAEiB,QAAZE,YAAY,CAACC,OAAD,EAAmB;AACjC,UAAM;AAAEC,MAAAA;AAAF,QAAcD,OAAO,CAACE,IAAR,CAAaC,OAAjC;AACA,UAAMC,MAAM,GAAGH,OAAO,CAAC,eAAD,CAAP,IAA4BA,OAAO,CAAC,eAAD,CAAlD;AACA,UAAMI,KAAK,GAAGD,MAAM,GAAGA,MAAM,CAACE,KAAP,CAAa,GAAb,EAAkBC,GAAlB,EAAH,GAA6B,IAAjD;;AACA,QAAI,CAACF,KAAD,IAAU,CAACA,KAAK,CAACG,UAAN,CAAiB,GAAjB,CAAf,EAAsC;AAClC;AACH,KANgC,CAQjC;;;AACA,UAAMC,IAAI,GAAG,MAAMT,OAAO,CAACU,QAAR,CAAiBC,KAAjB,CAAuBC,4BAAvB,CAAoDP,KAApD,CAAnB;;AAEA,QAAII,IAAJ,EAAU;AACN,aAAO,IAAII,6BAAJ,CAAqB;AACxBC,QAAAA,EAAE,EAAEL,IAAI,CAACM,KADe;AAExBC,QAAAA,IAAI,EAAE,KAAKlB,OAAL,CAAamB,YAFK;AAGxBC,QAAAA,WAAW,EAAG,GAAET,IAAI,CAACU,SAAU,IAAGV,IAAI,CAACW,QAAS,EAHxB;AAIxBD,QAAAA,SAAS,EAAEV,IAAI,CAACU,SAJQ;AAKxBC,QAAAA,QAAQ,EAAEX,IAAI,CAACW;AALS,OAArB,CAAP;AAOH;AACJ;;AA5BsF","sourcesContent":["import { Context as HandlerContext } from \"@webiny/handler/types\";\nimport { HttpContext } from \"@webiny/handler-http/types\";\nimport { SecurityIdentity } from \"@webiny/api-security\";\nimport { TenancyContext } from \"@webiny/api-tenancy/types\";\nimport { AuthenticationPlugin } from \"@webiny/api-security/plugins/AuthenticationPlugin\";\ntype Context = HandlerContext<HttpContext, TenancyContext>;\n\ninterface Config {\n    identityType: string;\n}\n\nexport class PersonalAccessTokenAuthenticationPlugin extends AuthenticationPlugin<Context> {\n    private _config: Config;\n\n    constructor(config: Config) {\n        super();\n        this._config = config;\n    }\n\n    async authenticate(context: Context) {\n        const { headers } = context.http.request;\n        const header = headers[\"Authorization\"] || headers[\"authorization\"];\n        const token = header ? header.split(\" \").pop() : null;\n        if (!token || !token.startsWith(\"p\")) {\n            return;\n        }\n\n        // Try loading a User using the value from header\n        const user = await context.security.users.getUserByPersonalAccessToken(token);\n\n        if (user) {\n            return new SecurityIdentity({\n                id: user.login,\n                type: this._config.identityType,\n                displayName: `${user.firstName} ${user.lastName}`,\n                firstName: user.firstName,\n                lastName: user.lastName\n            });\n        }\n    }\n}\n"],"file":"PersonalAccessTokenAuthenticationPlugin.js"}