"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.APIKeyAuthorizationPlugin = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _AuthorizationPlugin = require("@webiny/api-security/plugins/AuthorizationPlugin");

class APIKeyAuthorizationPlugin extends _AuthorizationPlugin.AuthorizationPlugin {
  constructor(config) {
    super();
    (0, _defineProperty2.default)(this, "_config", void 0);
    this._config = config || {};
  }

  async getPermissions({
    security
  }) {
    const identityType = this._config.identityType || "api-key";
    const identity = security.getIdentity();

    if (!identity || identity.type !== identityType) {
      return;
    } // We can expect `permissions` to exist on the identity, because api-key authentication
    // plugin sets them on the identity instance to avoid loading them from DB here.


    return Array.isArray(identity.permissions) ? identity.permissions : [];
  }

}

exports.APIKeyAuthorizationPlugin = APIKeyAuthorizationPlugin;
//# sourceMappingURL=APIKeyAuthorizationPlugin.js.map