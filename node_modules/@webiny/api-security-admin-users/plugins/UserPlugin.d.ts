import { Plugin } from "@webiny/plugins";
import { AdminUsersContext, User as BaseUser } from "../types";
declare type PromiseVoid = void | Promise<void>;
export interface CreateParams<User, Context> {
    context: Context;
    user: User;
    inputData: Record<string, any>;
}
export interface BeforeUpdateParams<User, Context> {
    context: Context;
    user: User;
    readonly inputData: Record<string, any>;
    updateData: Partial<User>;
}
export interface AfterUpdateParams<User, Context> {
    context: Context;
    user: User;
    readonly inputData: Record<string, any>;
}
export interface DeleteParams<User, Context> {
    context: Context;
    user: User;
}
export interface OnLoginParams<User, Context> {
    context: Context;
    user: User;
    firstLogin: boolean;
}
interface Config<User extends BaseUser = BaseUser, Context extends AdminUsersContext = AdminUsersContext> {
    beforeCreate?: (params: CreateParams<User, Context>) => PromiseVoid;
    afterCreate?: (params: CreateParams<User, Context>) => PromiseVoid;
    beforeUpdate?: (params: BeforeUpdateParams<User, Context>) => PromiseVoid;
    afterUpdate?: (params: AfterUpdateParams<User, Context>) => PromiseVoid;
    beforeDelete?: (params: DeleteParams<User, Context>) => PromiseVoid;
    afterDelete?: (params: DeleteParams<User, Context>) => PromiseVoid;
    onLogin?: (params: OnLoginParams<User, Context>) => PromiseVoid;
}
export declare class UserPlugin<User extends BaseUser = BaseUser, Context extends AdminUsersContext = AdminUsersContext> extends Plugin {
    static readonly type = "security.user";
    private readonly _config;
    constructor(config?: Config<User, Context>);
    beforeCreate(params: CreateParams<User, Context>): PromiseVoid;
    afterCreate(params: CreateParams<User, Context>): PromiseVoid;
    afterUpdate(params: AfterUpdateParams<User, Context>): PromiseVoid;
    beforeUpdate(params: BeforeUpdateParams<User, Context>): PromiseVoid;
    beforeDelete(params: DeleteParams<User, Context>): PromiseVoid;
    afterDelete(params: DeleteParams<User, Context>): PromiseVoid;
    onLogin(params: OnLoginParams<User, Context>): PromiseVoid;
    private _execute;
}
export {};
