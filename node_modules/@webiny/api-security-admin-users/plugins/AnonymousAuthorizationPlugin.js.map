{"version":3,"sources":["../../src/plugins/AnonymousAuthorizationPlugin.ts"],"names":["AnonymousAuthorizationPlugin","AuthorizationPlugin","Map","getPermissions","security","tenancy","tenant","getCurrentTenant","getIdentity","_permissionCache","has","id","get","group","groups","getGroup","auth","permissions","set"],"mappings":";;;;;;;;;;;AAEA;;AAEO,MAAMA,4BAAN,SAA2CC,wCAA3C,CAAkF;AAAA;AAAA;AAAA,4DAC1D,IAAIC,GAAJ,EAD0D;AAAA;;AAGjE,QAAdC,cAAc,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAD,EAA2C;AAC3D,UAAMC,MAAM,GAAGD,OAAO,CAACE,gBAAR,EAAf;;AACA,QAAI,CAACD,MAAL,EAAa;AACT,aAAO,EAAP;AACH;;AAED,QAAIF,QAAQ,CAACI,WAAT,EAAJ,EAA4B;AACxB;AACH;;AAED,QAAI,KAAKC,gBAAL,CAAsBC,GAAtB,CAA0BJ,MAAM,CAACK,EAAjC,CAAJ,EAA0C;AACtC,aAAO,KAAKF,gBAAL,CAAsBG,GAAtB,CAA0BN,MAAM,CAACK,EAAjC,CAAP;AACH,KAZ0D,CAc3D;AACA;AACA;;;AACA,UAAME,KAAK,GAAG,MAAMT,QAAQ,CAACU,MAAT,CAAgBC,QAAhB,CAAyB,WAAzB,EAAsC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAtC,CAApB;AAEA,UAAMC,WAAW,GAAGJ,KAAK,GAAGA,KAAK,CAACI,WAAN,IAAqB,EAAxB,GAA6B,EAAtD;;AACA,SAAKR,gBAAL,CAAsBS,GAAtB,CAA0BZ,MAAM,CAACK,EAAjC,EAAqCM,WAArC;;AAEA,WAAOA,WAAP;AACH;;AA1BoF","sourcesContent":["import { SecurityPermission } from \"@webiny/api-security/types\";\nimport { AdminUsersContext } from \"~/types\";\nimport { AuthorizationPlugin } from \"@webiny/api-security/plugins/AuthorizationPlugin\";\n\nexport class AnonymousAuthorizationPlugin extends AuthorizationPlugin<AdminUsersContext> {\n    private _permissionCache = new Map<string, SecurityPermission[] | null>();\n\n    async getPermissions({ security, tenancy }: AdminUsersContext) {\n        const tenant = tenancy.getCurrentTenant();\n        if (!tenant) {\n            return [];\n        }\n\n        if (security.getIdentity()) {\n            return;\n        }\n\n        if (this._permissionCache.has(tenant.id)) {\n            return this._permissionCache.get(tenant.id);\n        }\n\n        // We assume that all other authorization plugins have already been executed.\n        // If we've reached this far, it means that we have an anonymous user\n        // and we need to load permissions from the \"anonymous\" group.\n        const group = await security.groups.getGroup(\"anonymous\", { auth: false });\n\n        const permissions = group ? group.permissions || [] : [];\n        this._permissionCache.set(tenant.id, permissions);\n\n        return permissions;\n    }\n}\n"],"file":"AnonymousAuthorizationPlugin.js"}