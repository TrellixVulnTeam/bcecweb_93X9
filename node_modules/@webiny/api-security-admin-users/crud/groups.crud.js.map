{"version":3,"sources":["../../src/crud/groups.crud.ts"],"names":["CreateDataModel","tenant","validation","create","name","slug","description","permissions","list","UpdateDataModel","ContextPlugin","context","storageOperations","GroupsStorageOperationsProvider","type","checkPermission","options","auth","permission","security","getPermission","NotAuthorizedError","groups","getGroup","tenancy","getCurrentTenant","group","get","ex","WebinyError","message","code","NotFoundError","listGroups","sort","createGroup","input","identity","getIdentity","populate","id","validate","existing","system","createdOn","Date","toISOString","createdBy","displayName","updateGroup","model","original","data","toJSON","onlyDirty","permissionsChanged","result","update","updateUserLinks","deleteGroup","delete"],"mappings":"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","sourcesContent":["import { object } from \"commodo-fields-object\";\nimport { withFields, string } from \"@commodo/fields\";\nimport { validation } from \"@webiny/validation\";\nimport { AdminUsersContext, CrudOptions, Group, GroupsStorageOperations } from \"~/types\";\nimport WebinyError from \"@webiny/error\";\nimport { ContextPlugin } from \"@webiny/handler/plugins/ContextPlugin\";\nimport { GroupsStorageOperationsProvider } from \"~/plugins/GroupsStorageOperationsProvider\";\nimport { NotFoundError } from \"@webiny/handler-graphql\";\nimport { NotAuthorizedError } from \"@webiny/api-security\";\nimport deepEqual from \"deep-equal\";\nimport { getStorageOperations } from \"~/crud/storageOperations\";\n\nconst CreateDataModel = withFields({\n    tenant: string({ validation: validation.create(\"required\") }),\n    name: string({ validation: validation.create(\"required,minLength:3\") }),\n    slug: string({ validation: validation.create(\"required,minLength:3\") }),\n    description: string({ validation: validation.create(\"maxLength:500\") }),\n    permissions: object({\n        list: true,\n        validation: validation.create(\"required\")\n    })\n})();\n\nconst UpdateDataModel = withFields({\n    name: string({ validation: validation.create(\"minLength:3\") }),\n    description: string({ validation: validation.create(\"maxLength:500\") }),\n    permissions: object({ list: true })\n})();\n\nexport default new ContextPlugin<AdminUsersContext>(async context => {\n    const storageOperations = await getStorageOperations<GroupsStorageOperations>(\n        context,\n        GroupsStorageOperationsProvider.type\n    );\n\n    const checkPermission = async (options?: CrudOptions) => {\n        if (options && options.auth === false) {\n            return;\n        }\n        const permission = await context.security.getPermission(\"security.group\");\n\n        if (!permission) {\n            throw new NotAuthorizedError();\n        }\n    };\n\n    context.security.groups = {\n        async getGroup(slug, options) {\n            await checkPermission(options);\n            const tenant = context.tenancy.getCurrentTenant();\n\n            let group: Group = null;\n            try {\n                group = await storageOperations.get(tenant, {\n                    slug\n                });\n            } catch (ex) {\n                throw new WebinyError(\n                    ex.message || \"Could not get group.\",\n                    ex.code || \"GET_GROUP_ERROR\",\n                    {\n                        slug\n                    }\n                );\n            }\n            if (!group) {\n                throw new NotFoundError(`Unable to find group with slug: ${slug}`);\n            }\n            return group;\n        },\n        async listGroups(options) {\n            await checkPermission(options);\n            const tenant = context.tenancy.getCurrentTenant();\n            try {\n                return await storageOperations.list(tenant, {\n                    sort: [\"createdOn_ASC\"]\n                });\n            } catch (ex) {\n                throw new WebinyError(\n                    ex.message || \"Could not list API keys.\",\n                    ex.code || \"LIST_API_KEY_ERROR\"\n                );\n            }\n        },\n        async createGroup(input, options) {\n            await checkPermission(options);\n\n            const identity = context.security.getIdentity();\n\n            const tenant = context.tenancy.getCurrentTenant();\n\n            await new CreateDataModel().populate({ ...input, tenant: tenant.id }).validate();\n\n            const existing = await storageOperations.get(tenant, {\n                slug: input.slug\n            });\n            if (existing) {\n                throw new WebinyError(\n                    `Group with slug \"${input.slug}\" already exists.`,\n                    \"GROUP_EXISTS\"\n                );\n            }\n\n            const group: Group = {\n                tenant: tenant.id,\n                system: false,\n                ...input,\n                createdOn: new Date().toISOString(),\n                createdBy: identity\n                    ? {\n                          id: identity.id,\n                          displayName: identity.displayName,\n                          type: identity.type\n                      }\n                    : null\n            };\n\n            try {\n                return await storageOperations.create(tenant, {\n                    group\n                });\n            } catch (ex) {\n                throw new WebinyError(\n                    ex.message || \"Could not create group.\",\n                    ex.code || \"CREATE_GROUP_ERROR\",\n                    {\n                        group\n                    }\n                );\n            }\n        },\n        async updateGroup(slug, input) {\n            await checkPermission();\n\n            const tenant = context.tenancy.getCurrentTenant();\n\n            const model = await new UpdateDataModel().populate(input);\n            await model.validate();\n\n            const original = await storageOperations.get(tenant, {\n                slug\n            });\n            if (!original) {\n                throw new NotFoundError(`Group \"${slug}\" was not found!`);\n            }\n\n            const data = await model.toJSON({ onlyDirty: true });\n\n            const permissionsChanged = !deepEqual(data.permissions, original.permissions);\n\n            const group: Group = {\n                ...original,\n                ...data\n            };\n            try {\n                const result = await storageOperations.update(tenant, {\n                    original,\n                    group\n                });\n                if (permissionsChanged) {\n                    await storageOperations.updateUserLinks(tenant, {\n                        group: result\n                    });\n                }\n                return result;\n            } catch (ex) {\n                throw new WebinyError(\n                    ex.message || \"Could not update group.\",\n                    ex.code || \"UPDATE_GROUP_ERROR\",\n                    {\n                        group\n                    }\n                );\n            }\n        },\n        async deleteGroup(slug) {\n            await checkPermission();\n\n            const tenant = context.tenancy.getCurrentTenant();\n\n            const group = await storageOperations.get(tenant, {\n                slug\n            });\n            if (!group) {\n                throw new NotFoundError(`Group \"${slug}\" was not found!`);\n            }\n            try {\n                await storageOperations.delete(tenant, {\n                    group\n                });\n                return true;\n            } catch (ex) {\n                throw new WebinyError(\n                    ex.message || \"Could not delete group.\",\n                    ex.code || \"DELETE_GROUP_ERROR\",\n                    {\n                        group\n                    }\n                );\n            }\n        }\n    };\n});\n"],"file":"groups.crud.js"}