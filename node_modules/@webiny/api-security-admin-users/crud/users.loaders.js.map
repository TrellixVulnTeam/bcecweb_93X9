{"version":3,"sources":["../../src/crud/users.loaders.ts"],"names":["UserLoaders","constructor","params","Map","context","storageOperations","getUser","loaders","get","set","DataLoader","_getUserLoader","bind","getUserAccess","_getUserAccess","ids","length","results","listUsers","where","tenant","undefined","id_in","map","id","item","find","result","login","ex","WebinyError","message","code","data","listUsersLinks","filter","clearLoadersCache","clear","updateDataLoaderUserCache","user","load","prime","addDataLoaderAccessCache","access","concat","clearDataLoaderAccessCache","deleteDataLoaderAccessCache","updatedAccess","acc"],"mappings":"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","sourcesContent":["import DataLoader from \"dataloader\";\nimport WebinyError from \"@webiny/error\";\nimport { Tenant } from \"@webiny/api-tenancy/types\";\nimport { AdminUsersContext, TenantAccess, User, UserStorageOperations } from \"~/types\";\n\ninterface Params {\n    context: AdminUsersContext;\n    storageOperations: UserStorageOperations;\n}\nexport class UserLoaders {\n    private readonly loaders = new Map<string, DataLoader<any, any>>();\n    private readonly context: AdminUsersContext;\n    private readonly storageOperations: UserStorageOperations;\n\n    constructor(params: Params) {\n        this.context = params.context;\n        this.storageOperations = params.storageOperations;\n    }\n\n    get getUser() {\n        if (!this.loaders.get(\"getUser\")) {\n            this.loaders.set(\n                \"getUser\",\n                new DataLoader<string, User>(this._getUserLoader.bind(this))\n            );\n        }\n        return this.loaders.get(\"getUser\");\n    }\n\n    get getUserAccess() {\n        if (!this.loaders.get(\"getUserAccess\")) {\n            this.loaders.set(\n                \"getUserAccess\",\n                new DataLoader<string, TenantAccess>(this._getUserAccess.bind(this))\n            );\n        }\n        return this.loaders.get(\"getUserAccess\");\n    }\n\n    private async _getUserLoader(ids) {\n        if (ids.length === 0) {\n            return [];\n        }\n\n        try {\n            const results = await this.storageOperations.listUsers({\n                where: {\n                    tenant: undefined,\n                    id_in: ids\n                }\n            });\n            return ids.map(id => {\n                const item = results.find(result => {\n                    if (!result.id && result.login === id) {\n                        return true;\n                    }\n                    return result.id === id;\n                });\n                return item || null;\n            });\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not execute batch read in getUser.\",\n                ex.code || \"BATCH_READ_ERROR\",\n                {\n                    ...ex.data,\n                    ids\n                }\n            );\n        }\n    }\n\n    private async _getUserAccess(ids): Promise<TenantAccess[][]> {\n        if (ids.length === 0) {\n            return [];\n        }\n\n        try {\n            const results = await this.storageOperations.listUsersLinks({\n                where: {\n                    id_in: ids\n                }\n            });\n            return ids.map(id =>\n                results.filter(result => {\n                    /**\n                     * This is for the old systems that do not have ID in the db.\n                     */\n                    if (!result.id) {\n                        return true;\n                    }\n                    return result.id === id;\n                })\n            );\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not execute multiple read in getUserAccess.\",\n                ex.code || \"MULTIPLE_READ_ERROR\",\n                {\n                    ids\n                }\n            );\n        }\n    }\n\n    clearLoadersCache(ids: string) {\n        for (const id of ids) {\n            this.getUser.clear(id);\n            this.getUserAccess.clear(id);\n        }\n    }\n\n    async updateDataLoaderUserCache(id: string, data: Partial<User>) {\n        const user = await this.getUser.load(id);\n        this.getUser.clear(id).prime(id, {\n            ...user,\n            ...data\n        });\n    }\n\n    async addDataLoaderAccessCache(id: string, data: TenantAccess) {\n        const access = await this.getUserAccess.load(id);\n\n        this.getUserAccess.clear(id).prime(id, (access || []).concat([data]));\n    }\n\n    clearDataLoaderAccessCache(id: string) {\n        this.getUserAccess.clear(id);\n    }\n\n    async deleteDataLoaderAccessCache(id: string, tenant: Tenant) {\n        const access = await this.getUserAccess.load(id);\n\n        const updatedAccess = (access || []).filter(acc => {\n            return acc.tenant.id !== tenant.id;\n        });\n\n        this.getUserAccess.clear(id).prime(id, updatedAccess);\n    }\n}\n"],"file":"users.loaders.js"}