{"version":3,"sources":["../../src/crud/system.crud.ts"],"names":["createDefaultGroups","context","anonymousGroup","fullAccessGroup","options","auth","groups","security","listGroups","forEach","group","slug","createGroup","name","description","system","permissions","ContextPlugin","storageOperations","SystemStorageOperationsProvider","type","get","rootTenant","tenancy","getRootTenant","ex","WebinyError","message","code","getVersion","version","setVersion","original","update","create","install","input","tenant","createTenant","id","parent","setCurrentTenant","data","user","users","createUser","deleteTenant","WEBINY_VERSION"],"mappings":"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","sourcesContent":["import {\n    AdminUsersContext,\n    CreateUserInput,\n    CrudOptions,\n    Group,\n    System,\n    SystemStorageOperations\n} from \"~/types\";\nimport { ContextPlugin } from \"@webiny/handler/plugins/ContextPlugin\";\nimport { SystemStorageOperationsProvider } from \"~/plugins/SystemStorageOperationsProvider\";\nimport WebinyError from \"@webiny/error\";\nimport { getStorageOperations } from \"~/crud/storageOperations\";\n\nconst createDefaultGroups = async (\n    context: AdminUsersContext\n): Promise<Record<\"fullAccessGroup\" | \"anonymousGroup\", Group>> => {\n    let anonymousGroup: Group = null;\n    let fullAccessGroup: Group = null;\n\n    const options: CrudOptions = {\n        auth: false\n    };\n\n    const groups = await context.security.groups.listGroups(options);\n\n    groups.forEach(group => {\n        if (group.slug === \"full-access\") {\n            fullAccessGroup = group;\n        }\n\n        if (group.slug === \"anonymous\") {\n            anonymousGroup = group;\n        }\n    });\n\n    if (!fullAccessGroup) {\n        fullAccessGroup = await context.security.groups.createGroup(\n            {\n                name: \"Full Access\",\n                description: \"Grants full access to all apps.\",\n                system: true,\n                slug: \"full-access\",\n                permissions: [{ name: \"*\" }]\n            },\n            options\n        );\n    }\n\n    if (!anonymousGroup) {\n        anonymousGroup = await context.security.groups.createGroup(\n            {\n                name: \"Anonymous\",\n                description: \"Permissions for anonymous users (public access).\",\n                system: true,\n                slug: \"anonymous\",\n                permissions: []\n            },\n            options\n        );\n    }\n\n    return { fullAccessGroup, anonymousGroup };\n};\n\nexport default new ContextPlugin<AdminUsersContext>(async context => {\n    const storageOperations = await getStorageOperations<SystemStorageOperations>(\n        context,\n        SystemStorageOperationsProvider.type\n    );\n\n    context.security.system = {\n        async get() {\n            const rootTenant = await context.tenancy.getRootTenant();\n            if (!rootTenant) {\n                return null;\n            }\n\n            try {\n                return await storageOperations.get();\n            } catch (ex) {\n                throw new WebinyError(\n                    ex.message || \"Could not load the system data.\",\n                    ex.code || \"GET_SYSTEM_ERROR\"\n                );\n            }\n        },\n        async getVersion() {\n            const rootTenant = await context.tenancy.getRootTenant();\n            if (!rootTenant) {\n                return null;\n            }\n            const system = await context.security.system.get();\n\n            return system ? system.version : null;\n        },\n        async setVersion(version: string): Promise<System> {\n            const original = await context.security.system.get();\n\n            const system: System = {\n                version\n            };\n\n            if (original) {\n                try {\n                    return await storageOperations.update({\n                        original,\n                        system\n                    });\n                } catch (ex) {\n                    throw new WebinyError(\n                        ex.message || \"Could not update existing system data.\",\n                        ex.code || \"UPDATE_SYSTEM_ERROR\",\n                        {\n                            original,\n                            system\n                        }\n                    );\n                }\n            }\n            try {\n                return await storageOperations.create({\n                    system\n                });\n            } catch (ex) {\n                throw new WebinyError(\n                    ex.message || \"Could not create the system data.\",\n                    ex.code || \"CREATE_SYSTEM_ERROR\",\n                    {\n                        system\n                    }\n                );\n            }\n        },\n        async install(input) {\n            const rootTenant = await context.tenancy.getRootTenant();\n\n            if (rootTenant) {\n                throw new WebinyError(\"Security is already installed.\", \"SECURITY_INSTALL_ABORTED\");\n            }\n\n            // Create root tenant\n            const tenant = await context.tenancy.createTenant({\n                id: \"root\",\n                name: \"Root\",\n                parent: null\n            });\n\n            context.tenancy.setCurrentTenant(tenant);\n\n            let fullAccessGroup;\n            try {\n                // Create default groups\n                const { fullAccessGroup: group } = await createDefaultGroups(context);\n                fullAccessGroup = group;\n            } catch (ex) {\n                throw new WebinyError(\n                    \"Could not create default groups.\",\n                    \"CREATE_DEFAULT_GROUPS_ERROR\",\n                    {\n                        message: ex.message,\n                        code: ex.code,\n                        data: ex.data\n                    }\n                );\n            }\n\n            const user: CreateUserInput = {\n                ...input,\n                group: fullAccessGroup.slug\n            };\n            try {\n                // Create new user\n                await context.security.users.createUser(user, { auth: false });\n            } catch (ex) {\n                await context.tenancy.deleteTenant(\"root\");\n\n                throw new WebinyError(ex.message, \"SECURITY_INSTALL_ABORTED\", ex.data || {});\n            }\n\n            // Store app version\n            await context.security.system.setVersion(context.WEBINY_VERSION);\n        }\n    };\n});\n"],"file":"system.crud.js"}