{"version":3,"sources":["../../src/crud/apiKey.crud.ts"],"names":["APIKeyModel","name","validation","create","description","permissions","list","value","generateToken","tokenLength","token","crypto","randomBytes","Math","ceil","toString","startsWith","slice","ContextPlugin","context","security","tenancy","storageOperations","ApiKeyStorageOperationsProvider","type","apiKeys","getApiKeyByToken","getByToken","ex","WebinyError","message","code","getApiKey","id","permission","getPermission","NotAuthorizedError","get","listApiKeys","sort","createApiKey","data","identity","getIdentity","tenant","getCurrentTenant","populate","validate","apiKey","createdBy","displayName","createdOn","Date","toISOString","updateApiKey","model","changedData","toJSON","onlyDirty","original","NotFoundError","update","deleteApiKey","delete"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA,MAAMA,WAAW,GAAG,wBAAW;AAC3BC,EAAAA,IAAI,EAAE,oBAAO;AAAEC,IAAAA,UAAU,EAAEA,uBAAWC,MAAX,CAAkB,UAAlB;AAAd,GAAP,CADqB;AAE3BC,EAAAA,WAAW,EAAE,oBAAO;AAAEF,IAAAA,UAAU,EAAEA,uBAAWC,MAAX,CAAkB,UAAlB;AAAd,GAAP,CAFc;AAG3BE,EAAAA,WAAW,EAAE,iCAAO;AAAEC,IAAAA,IAAI,EAAE,IAAR;AAAcC,IAAAA,KAAK,EAAE;AAArB,GAAP;AAHc,CAAX,GAApB;;AAMA,MAAMC,aAAa,GAAG,CAACC,WAAW,GAAG,EAAf,KAAsB;AACxC,QAAMC,KAAK,GAAGC,gBAAOC,WAAP,CAAmBC,IAAI,CAACC,IAAL,CAAUL,WAAW,GAAG,CAAxB,CAAnB,EAA+CM,QAA/C,CAAwD,KAAxD,CAAd,CADwC,CAGxC;AACA;AACA;;;AACA,MAAIL,KAAK,CAACM,UAAN,CAAiB,GAAjB,CAAJ,EAA2B;AACvB,WAAON,KAAP;AACH;;AAED,SAAQ,IAAGA,KAAK,CAACO,KAAN,CAAY,CAAZ,EAAeR,WAAW,GAAG,CAA7B,CAAgC,EAA3C;AACH,CAXD;;eAae,IAAIS,4BAAJ,CAAqC,MAAMC,OAAN,IAAiB;AACjE,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAwBF,OAA9B;AAEA,QAAMG,iBAAiB,GAAG,MAAM,6CAC5BH,OAD4B,EAE5BI,iEAAgCC,IAFJ,CAAhC;AAKAL,EAAAA,OAAO,CAACC,QAAR,CAAiBK,OAAjB,GAA2B;AACvB,UAAMC,gBAAN,CAAuBhB,KAAvB,EAA8B;AAC1B,UAAI;AACA,eAAO,MAAMY,iBAAiB,CAACK,UAAlB,CAA6B;AACtCjB,UAAAA;AADsC,SAA7B,CAAb;AAGH,OAJD,CAIE,OAAOkB,EAAP,EAAW;AACT,cAAM,IAAIC,cAAJ,CACFD,EAAE,CAACE,OAAH,IAAc,iCADZ,EAEFF,EAAE,CAACG,IAAH,IAAW,4BAFT,EAGF;AACIrB,UAAAA;AADJ,SAHE,CAAN;AAOH;AACJ,KAfsB;;AAgBvB,UAAMsB,SAAN,CAAgBC,EAAhB,EAAoB;AAChB;AACA,YAAMC,UAAU,GAAG,MAAMd,QAAQ,CAACe,aAAT,CAAyC,iBAAzC,CAAzB;;AAEA,UAAI,CAACD,UAAL,EAAiB;AACb,cAAM,IAAIE,+BAAJ,EAAN;AACH;;AAED,UAAI;AACA,eAAO,MAAMd,iBAAiB,CAACe,GAAlB,CAAsB;AAC/BJ,UAAAA;AAD+B,SAAtB,CAAb;AAGH,OAJD,CAIE,OAAOL,EAAP,EAAW;AACT,cAAM,IAAIC,cAAJ,CACFD,EAAE,CAACE,OAAH,IAAc,wBADZ,EAEFF,EAAE,CAACG,IAAH,IAAW,mBAFT,EAGF;AACIE,UAAAA;AADJ,SAHE,CAAN;AAOH;AACJ,KArCsB;;AAsCvB,UAAMK,WAAN,GAAoB;AAChB,YAAMJ,UAAU,GAAG,MAAMd,QAAQ,CAACe,aAAT,CAAyC,iBAAzC,CAAzB;;AAEA,UAAI,CAACD,UAAL,EAAiB;AACb,cAAM,IAAIE,+BAAJ,EAAN;AACH;;AACD,UAAI;AACA,eAAO,MAAMd,iBAAiB,CAAChB,IAAlB,CAAuB;AAChCiC,UAAAA,IAAI,EAAE,CAAC,eAAD;AAD0B,SAAvB,CAAb;AAGH,OAJD,CAIE,OAAOX,EAAP,EAAW;AACT,cAAM,IAAIC,cAAJ,CACFD,EAAE,CAACE,OAAH,IAAc,0BADZ,EAEFF,EAAE,CAACG,IAAH,IAAW,oBAFT,CAAN;AAIH;AACJ,KAtDsB;;AAuDvB,UAAMS,YAAN,CAAmBC,IAAnB,EAAyB;AACrB,YAAMC,QAAQ,GAAGtB,QAAQ,CAACuB,WAAT,EAAjB;AACA,YAAMC,MAAM,GAAGvB,OAAO,CAACwB,gBAAR,EAAf;AACA,YAAMX,UAAU,GAAG,MAAMd,QAAQ,CAACe,aAAT,CAAyC,iBAAzC,CAAzB;;AAEA,UAAI,CAACD,UAAL,EAAiB;AACb,cAAM,IAAIE,+BAAJ,EAAN;AACH;;AAED,YAAM,IAAIpC,WAAJ,GAAkB8C,QAAlB,CAA2BL,IAA3B,EAAiCM,QAAjC,EAAN;;AAEA,YAAMC,MAAc;AAChBf,QAAAA,EAAE,EAAE,qBADY;AAEhBW,QAAAA,MAAM,EAAEA,MAAM,CAACX,EAFC;AAGhBvB,QAAAA,KAAK,EAAEF,aAAa,EAHJ;AAIhByC,QAAAA,SAAS,EAAE;AACPhB,UAAAA,EAAE,EAAES,QAAQ,CAACT,EADN;AAEPiB,UAAAA,WAAW,EAAER,QAAQ,CAACQ,WAFf;AAGP1B,UAAAA,IAAI,EAAEkB,QAAQ,CAAClB;AAHR,SAJK;AAShB2B,QAAAA,SAAS,EAAE,IAAIC,IAAJ,GAAWC,WAAX;AATK,SAUbZ,IAVa,CAApB;;AAaA,UAAI;AACA,eAAO,MAAMnB,iBAAiB,CAACnB,MAAlB,CAAyB;AAClC6C,UAAAA;AADkC,SAAzB,CAAb;AAGH,OAJD,CAIE,OAAOpB,EAAP,EAAW;AACT,cAAM,IAAIC,cAAJ,CACFD,EAAE,CAACE,OAAH,IAAc,2BADZ,EAEFF,EAAE,CAACG,IAAH,IAAW,sBAFT,EAGF;AACIiB,UAAAA;AADJ,SAHE,CAAN;AAOH;AACJ,KA5FsB;;AA6FvB,UAAMM,YAAN,CAAmBrB,EAAnB,EAAuBQ,IAAvB,EAA6B;AACzB,YAAMP,UAAU,GAAG,MAAMd,QAAQ,CAACe,aAAT,CAAyC,iBAAzC,CAAzB;;AAEA,UAAI,CAACD,UAAL,EAAiB;AACb,cAAM,IAAIE,+BAAJ,EAAN;AACH;;AAED,YAAMmB,KAAK,GAAG,IAAIvD,WAAJ,GAAkB8C,QAAlB,CAA2BL,IAA3B,CAAd;AACA,YAAMc,KAAK,CAACR,QAAN,EAAN;AACA,YAAMS,WAAW,GAAG,MAAMD,KAAK,CAACE,MAAN,CAAa;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAb,CAA1B;AAEA,YAAMC,QAAQ,GAAG,MAAM,KAAK3B,SAAL,CAAeC,EAAf,CAAvB;;AACA,UAAI,CAAC0B,QAAL,EAAe;AACX,cAAM,IAAIC,6BAAJ,CAAmB,YAAW3B,EAAG,kBAAjC,CAAN;AACH;;AAED,YAAMe,MAAc,mCACbW,QADa,GAEbH,WAFa,CAApB;;AAIA,UAAI;AACA,eAAO,MAAMlC,iBAAiB,CAACuC,MAAlB,CAAyB;AAClCF,UAAAA,QADkC;AAElCX,UAAAA;AAFkC,SAAzB,CAAb;AAIH,OALD,CAKE,OAAOpB,EAAP,EAAW;AACT,cAAM,IAAIC,cAAJ,CACFD,EAAE,CAACE,OAAH,IAAc,2BADZ,EAEFF,EAAE,CAACG,IAAH,IAAW,sBAFT,EAGF;AACI4B,UAAAA,QADJ;AAEIX,UAAAA;AAFJ,SAHE,CAAN;AAQH;AACJ,KAhIsB;;AAiIvB,UAAMc,YAAN,CAAmB7B,EAAnB,EAAuB;AACnB,YAAMC,UAAU,GAAG,MAAMd,QAAQ,CAACe,aAAT,CAAyC,iBAAzC,CAAzB;;AAEA,UAAI,CAACD,UAAL,EAAiB;AACb,cAAM,IAAIE,+BAAJ,EAAN;AACH;;AAED,YAAMY,MAAM,GAAG,MAAM,KAAKhB,SAAL,CAAeC,EAAf,CAArB;;AACA,UAAI,CAACe,MAAL,EAAa;AACT,cAAM,IAAIY,6BAAJ,CAAmB,YAAW3B,EAAG,kBAAjC,CAAN;AACH;;AAED,UAAI;AACA,cAAMX,iBAAiB,CAACyC,MAAlB,CAAyB;AAC3Bf,UAAAA;AAD2B,SAAzB,CAAN;AAGA,eAAO,IAAP;AACH,OALD,CAKE,OAAOpB,EAAP,EAAW;AACT,cAAM,IAAIC,cAAJ,CACFD,EAAE,CAACE,OAAH,IAAc,2BADZ,EAEFF,EAAE,CAACG,IAAH,IAAW,sBAFT,EAGF;AACIiB,UAAAA;AADJ,SAHE,CAAN;AAOH;AACJ;;AA3JsB,GAA3B;AA6JH,CArKc,C","sourcesContent":["import crypto from \"crypto\";\nimport { withFields, string } from \"@commodo/fields\";\nimport { object } from \"commodo-fields-object\";\nimport { validation } from \"@webiny/validation\";\nimport mdbid from \"mdbid\";\nimport { AdminUsersContext, ApiKey, ApiKeyPermission, ApiKeyStorageOperations } from \"~/types\";\nimport { NotAuthorizedError } from \"@webiny/api-security\";\nimport { NotFoundError } from \"@webiny/handler-graphql\";\nimport { ApiKeyStorageOperationsProvider } from \"~/plugins/ApiKeyStorageOperationsProvider\";\nimport WebinyError from \"@webiny/error\";\nimport { ContextPlugin } from \"@webiny/handler/plugins/ContextPlugin\";\nimport { getStorageOperations } from \"~/crud/storageOperations\";\n\nconst APIKeyModel = withFields({\n    name: string({ validation: validation.create(\"required\") }),\n    description: string({ validation: validation.create(\"required\") }),\n    permissions: object({ list: true, value: [] })\n})();\n\nconst generateToken = (tokenLength = 48) => {\n    const token = crypto.randomBytes(Math.ceil(tokenLength / 2)).toString(\"hex\");\n\n    // API Keys are prefixed with a letter \"a\" to make token verification easier.\n    // When authentication plugins kick in, they will be able to tell if they should handle the token by\n    // checking the first letter and either process the token or skip authentication completely.\n    if (token.startsWith(\"a\")) {\n        return token;\n    }\n\n    return `a${token.slice(0, tokenLength - 1)}`;\n};\n\nexport default new ContextPlugin<AdminUsersContext>(async context => {\n    const { security, tenancy } = context;\n\n    const storageOperations = await getStorageOperations<ApiKeyStorageOperations>(\n        context,\n        ApiKeyStorageOperationsProvider.type\n    );\n\n    context.security.apiKeys = {\n        async getApiKeyByToken(token) {\n            try {\n                return await storageOperations.getByToken({\n                    token\n                });\n            } catch (ex) {\n                throw new WebinyError(\n                    ex.message || \"Could not get API key by token.\",\n                    ex.code || \"GET_API_KEY_BY_TOKEN_ERROR\",\n                    {\n                        token\n                    }\n                );\n            }\n        },\n        async getApiKey(id) {\n            // Check if it's an ID or an actual API key (API keys start with a letter \"a\")\n            const permission = await security.getPermission<ApiKeyPermission>(\"security.apiKey\");\n\n            if (!permission) {\n                throw new NotAuthorizedError();\n            }\n\n            try {\n                return await storageOperations.get({\n                    id\n                });\n            } catch (ex) {\n                throw new WebinyError(\n                    ex.message || \"Could not get API key.\",\n                    ex.code || \"GET_API_KEY_ERROR\",\n                    {\n                        id\n                    }\n                );\n            }\n        },\n        async listApiKeys() {\n            const permission = await security.getPermission<ApiKeyPermission>(\"security.apiKey\");\n\n            if (!permission) {\n                throw new NotAuthorizedError();\n            }\n            try {\n                return await storageOperations.list({\n                    sort: [\"createdOn_ASC\"]\n                });\n            } catch (ex) {\n                throw new WebinyError(\n                    ex.message || \"Could not list API keys.\",\n                    ex.code || \"LIST_API_KEY_ERROR\"\n                );\n            }\n        },\n        async createApiKey(data) {\n            const identity = security.getIdentity();\n            const tenant = tenancy.getCurrentTenant();\n            const permission = await security.getPermission<ApiKeyPermission>(\"security.apiKey\");\n\n            if (!permission) {\n                throw new NotAuthorizedError();\n            }\n\n            await new APIKeyModel().populate(data).validate();\n\n            const apiKey: ApiKey = {\n                id: mdbid(),\n                tenant: tenant.id,\n                token: generateToken(),\n                createdBy: {\n                    id: identity.id,\n                    displayName: identity.displayName,\n                    type: identity.type\n                },\n                createdOn: new Date().toISOString(),\n                ...data\n            };\n\n            try {\n                return await storageOperations.create({\n                    apiKey\n                });\n            } catch (ex) {\n                throw new WebinyError(\n                    ex.message || \"Could not create API key.\",\n                    ex.code || \"CREATE_API_KEY_ERROR\",\n                    {\n                        apiKey\n                    }\n                );\n            }\n        },\n        async updateApiKey(id, data) {\n            const permission = await security.getPermission<ApiKeyPermission>(\"security.apiKey\");\n\n            if (!permission) {\n                throw new NotAuthorizedError();\n            }\n\n            const model = new APIKeyModel().populate(data);\n            await model.validate();\n            const changedData = await model.toJSON({ onlyDirty: true });\n\n            const original = await this.getApiKey(id);\n            if (!original) {\n                throw new NotFoundError(`API key \"${id}\" was not found!`);\n            }\n\n            const apiKey: ApiKey = {\n                ...original,\n                ...changedData\n            };\n            try {\n                return await storageOperations.update({\n                    original,\n                    apiKey\n                });\n            } catch (ex) {\n                throw new WebinyError(\n                    ex.message || \"Could not update API key.\",\n                    ex.code || \"UPDATE_API_KEY_ERROR\",\n                    {\n                        original,\n                        apiKey\n                    }\n                );\n            }\n        },\n        async deleteApiKey(id) {\n            const permission = await security.getPermission<ApiKeyPermission>(\"security.apiKey\");\n\n            if (!permission) {\n                throw new NotAuthorizedError();\n            }\n\n            const apiKey = await this.getApiKey(id);\n            if (!apiKey) {\n                throw new NotFoundError(`API key \"${id}\" was not found!`);\n            }\n\n            try {\n                await storageOperations.delete({\n                    apiKey\n                });\n                return true;\n            } catch (ex) {\n                throw new WebinyError(\n                    ex.message || \"Could not delete API key.\",\n                    ex.code || \"DELETE_API_KEY_ERROR\",\n                    {\n                        apiKey\n                    }\n                );\n            }\n        }\n    };\n});\n"],"file":"apiKey.crud.js"}