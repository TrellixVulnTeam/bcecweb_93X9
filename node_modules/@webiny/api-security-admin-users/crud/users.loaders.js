"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UserLoaders = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _dataloader = _interopRequireDefault(require("dataloader"));

var _error = _interopRequireDefault(require("@webiny/error"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

class UserLoaders {
  constructor(params) {
    (0, _defineProperty2.default)(this, "loaders", new Map());
    (0, _defineProperty2.default)(this, "context", void 0);
    (0, _defineProperty2.default)(this, "storageOperations", void 0);
    this.context = params.context;
    this.storageOperations = params.storageOperations;
  }

  get getUser() {
    if (!this.loaders.get("getUser")) {
      this.loaders.set("getUser", new _dataloader.default(this._getUserLoader.bind(this)));
    }

    return this.loaders.get("getUser");
  }

  get getUserAccess() {
    if (!this.loaders.get("getUserAccess")) {
      this.loaders.set("getUserAccess", new _dataloader.default(this._getUserAccess.bind(this)));
    }

    return this.loaders.get("getUserAccess");
  }

  async _getUserLoader(ids) {
    if (ids.length === 0) {
      return [];
    }

    try {
      const results = await this.storageOperations.listUsers({
        where: {
          tenant: undefined,
          id_in: ids
        }
      });
      return ids.map(id => {
        const item = results.find(result => {
          if (!result.id && result.login === id) {
            return true;
          }

          return result.id === id;
        });
        return item || null;
      });
    } catch (ex) {
      throw new _error.default(ex.message || "Could not execute batch read in getUser.", ex.code || "BATCH_READ_ERROR", _objectSpread(_objectSpread({}, ex.data), {}, {
        ids
      }));
    }
  }

  async _getUserAccess(ids) {
    if (ids.length === 0) {
      return [];
    }

    try {
      const results = await this.storageOperations.listUsersLinks({
        where: {
          id_in: ids
        }
      });
      return ids.map(id => results.filter(result => {
        /**
         * This is for the old systems that do not have ID in the db.
         */
        if (!result.id) {
          return true;
        }

        return result.id === id;
      }));
    } catch (ex) {
      throw new _error.default(ex.message || "Could not execute multiple read in getUserAccess.", ex.code || "MULTIPLE_READ_ERROR", {
        ids
      });
    }
  }

  clearLoadersCache(ids) {
    for (const id of ids) {
      this.getUser.clear(id);
      this.getUserAccess.clear(id);
    }
  }

  async updateDataLoaderUserCache(id, data) {
    const user = await this.getUser.load(id);
    this.getUser.clear(id).prime(id, _objectSpread(_objectSpread({}, user), data));
  }

  async addDataLoaderAccessCache(id, data) {
    const access = await this.getUserAccess.load(id);
    this.getUserAccess.clear(id).prime(id, (access || []).concat([data]));
  }

  clearDataLoaderAccessCache(id) {
    this.getUserAccess.clear(id);
  }

  async deleteDataLoaderAccessCache(id, tenant) {
    const access = await this.getUserAccess.load(id);
    const updatedAccess = (access || []).filter(acc => {
      return acc.tenant.id !== tenant.id;
    });
    this.getUserAccess.clear(id).prime(id, updatedAccess);
  }

}

exports.UserLoaders = UserLoaders;
//# sourceMappingURL=users.loaders.js.map