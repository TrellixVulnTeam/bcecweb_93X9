{"version":3,"sources":["../../src/crud/storageOperations.ts"],"names":["getStorageOperations","context","type","providers","plugins","byType","provider","pop","WebinyError","provide"],"mappings":";;;;;;;;;AACA;;AAEO,MAAMA,oBAAoB,GAAG,OAChCC,OADgC,EAEhCC,IAFgC,KAGnB;AACb,QAAMC,SAAS,GAAGF,OAAO,CAACG,OAAR,CAAgBC,MAAhB,CAAuBH,IAAvB,CAAlB;AACA;AACJ;AACA;AACA;;AACI,QAAMI,QAAQ,GAAGH,SAAS,CAACI,GAAV,EAAjB;;AACA,MAAI,CAACD,QAAL,EAAe;AACX,UAAM,IAAIE,cAAJ,CACD,qBAAoBN,IAAK,sBADxB,EAEF,uBAFE,EAGF;AACIA,MAAAA;AADJ,KAHE,CAAN;AAOH;;AAED,SAAO,MAAMI,QAAQ,CAACG,OAAT,CAAiB;AAC1BR,IAAAA;AAD0B,GAAjB,CAAb;AAGH,CAvBM","sourcesContent":["import { AdminUsersContext } from \"~/types\";\nimport WebinyError from \"@webiny/error\";\n\nexport const getStorageOperations = async <T>(\n    context: AdminUsersContext,\n    type: string\n): Promise<T> => {\n    const providers = context.plugins.byType(type);\n    /**\n     * Always take the last given provider - although if everything is loaded as it must, there should not be more than one.\n     * We do not check/verify for multiple providers.\n     */\n    const provider = providers.pop();\n    if (!provider) {\n        throw new WebinyError(\n            `Could not find a \"${type}\" plugin registered.`,\n            \"PROVIDER_PLUGIN_ERROR\",\n            {\n                type\n            }\n        );\n    }\n\n    return await provider.provide({\n        context\n    });\n};\n"],"file":"storageOperations.js"}