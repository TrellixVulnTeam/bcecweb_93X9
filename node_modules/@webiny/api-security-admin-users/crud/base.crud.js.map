{"version":3,"sources":["../../src/crud/base.crud.ts"],"names":["Base","constructor","context","executeCallback","callback","params","plugin","plugins"],"mappings":";;;;;;;;;;;AAGO,MAAeA,IAAf,CAAoB;AAGvBC,EAAAA,WAAW,CAACC,OAAD,EAA6B;AAAA;AACpC,SAAKA,OAAL,GAAeA,OAAf;AACH;;AAI8B,QAAfC,eAAe,CAE7BC,QAF6B,EAEXC,MAFW,EAE+B;AAC1D,SAAK,MAAMC,MAAX,IAAqB,KAAKC,OAA1B,EAAmC;AAC/B,UAAI,OAAOD,MAAM,CAACF,QAAD,CAAb,KAA4B,UAAhC,EAA4C;AACxC,cAAME,MAAM,CAACF,QAAD,CAAN,CAAiBC,MAAjB,CAAN;AACH;AACJ;AACJ;;AAjBsB","sourcesContent":["import { Plugin } from \"@webiny/plugins\";\nimport { AdminUsersContext } from \"../types\";\n\nexport abstract class Base {\n    protected context: AdminUsersContext;\n\n    constructor(context: AdminUsersContext) {\n        this.context = context;\n    }\n\n    abstract get plugins(): Plugin[];\n\n    protected async executeCallback<\n        TCallbackFunction extends (params: any) => void | Promise<void>\n    >(callback: string, params: Parameters<TCallbackFunction>[0]) {\n        for (const plugin of this.plugins) {\n            if (typeof plugin[callback] === \"function\") {\n                await plugin[callback](params);\n            }\n        }\n    }\n}\n"],"file":"base.crud.js"}