{"version":3,"sources":["../../src/graphql/group.gql.ts"],"names":["GraphQLSchemaPlugin","typeDefs","resolvers","SecurityQuery","getGroup","_","slug","context","group","security","groups","Response","e","ErrorResponse","listGroups","args","groupList","ListResponse","ListErrorResponse","SecurityMutation","createGroup","data","updateGroup","deleteGroup"],"mappings":";;;;;;;AAAA;;AAOA;;eAEe,IAAIA,wCAAJ,CAA2C;AACtDC,EAAAA,QAAQ;AAAE;AAAe;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KA3C0D;AA4CtDC,EAAAA,SAAS,EAAE;AACPC,IAAAA,aAAa,EAAE;AACXC,MAAAA,QAAQ,EAAE,OAAOC,CAAP,EAAU;AAAEC,QAAAA;AAAF,OAAV,EAAsCC,OAAtC,KAAkD;AACxD,YAAI;AACA,gBAAMC,KAAK,GAAG,MAAMD,OAAO,CAACE,QAAR,CAAiBC,MAAjB,CAAwBN,QAAxB,CAAiCE,IAAjC,CAApB;AACA,iBAAO,IAAIK,mBAAJ,CAAaH,KAAb,CAAP;AACH,SAHD,CAGE,OAAOI,CAAP,EAAU;AACR,iBAAO,IAAIC,wBAAJ,CAAkBD,CAAlB,CAAP;AACH;AACJ,OARU;AASXE,MAAAA,UAAU,EAAE,OAAOT,CAAP,EAAUU,IAAV,EAAgBR,OAAhB,KAA4B;AACpC,YAAI;AACA,gBAAMS,SAAS,GAAG,MAAMT,OAAO,CAACE,QAAR,CAAiBC,MAAjB,CAAwBI,UAAxB,EAAxB;AAEA,iBAAO,IAAIG,uBAAJ,CAAiBD,SAAjB,CAAP;AACH,SAJD,CAIE,OAAOJ,CAAP,EAAU;AACR,iBAAO,IAAIM,4BAAJ,CAAsBN,CAAtB,CAAP;AACH;AACJ;AAjBU,KADR;AAoBPO,IAAAA,gBAAgB,EAAE;AACdC,MAAAA,WAAW,EAAE,OAAOf,CAAP,EAAU;AAAEgB,QAAAA;AAAF,OAAV,EAA0Cd,OAA1C,KAAsD;AAC/D,YAAI;AACA,gBAAMC,KAAK,GAAG,MAAMD,OAAO,CAACE,QAAR,CAAiBC,MAAjB,CAAwBU,WAAxB,CAAoCC,IAApC,CAApB;AAEA,iBAAO,IAAIV,mBAAJ,CAAaH,KAAb,CAAP;AACH,SAJD,CAIE,OAAOI,CAAP,EAAU;AACR,iBAAO,IAAIC,wBAAJ,CAAkBD,CAAlB,CAAP;AACH;AACJ,OATa;AAUdU,MAAAA,WAAW,EAAE,OACTjB,CADS,EAET;AAAEC,QAAAA,IAAF;AAAQe,QAAAA;AAAR,OAFS,EAGTd,OAHS,KAIR;AACD,YAAI;AACA,gBAAMC,KAAK,GAAG,MAAMD,OAAO,CAACE,QAAR,CAAiBC,MAAjB,CAAwBY,WAAxB,CAAoChB,IAApC,EAA0Ce,IAA1C,CAApB;AACA,iBAAO,IAAIV,mBAAJ,CAAaH,KAAb,CAAP;AACH,SAHD,CAGE,OAAOI,CAAP,EAAU;AACR,iBAAO,IAAIC,wBAAJ,CAAkBD,CAAlB,CAAP;AACH;AACJ,OArBa;AAsBdW,MAAAA,WAAW,EAAE,OAAOlB,CAAP,EAAU;AAAEC,QAAAA;AAAF,OAAV,EAAsCC,OAAtC,KAAkD;AAC3D,YAAI;AACA,gBAAMA,OAAO,CAACE,QAAR,CAAiBC,MAAjB,CAAwBa,WAAxB,CAAoCjB,IAApC,CAAN;AAEA,iBAAO,IAAIK,mBAAJ,CAAa,IAAb,CAAP;AACH,SAJD,CAIE,OAAOC,CAAP,EAAU;AACR,iBAAO,IAAIC,wBAAJ,CAAkBD,CAAlB,CAAP;AACH;AACJ;AA9Ba;AApBX;AA5C2C,CAA3C,C","sourcesContent":["import {\n    ErrorResponse,\n    ListErrorResponse,\n    ListResponse,\n    Response\n} from \"@webiny/handler-graphql/responses\";\nimport { AdminUsersContext, GroupInput } from \"~/types\";\nimport { GraphQLSchemaPlugin } from \"@webiny/handler-graphql/plugins/GraphQLSchemaPlugin\";\n\nexport default new GraphQLSchemaPlugin<AdminUsersContext>({\n    typeDefs: /* GraphQL */ `\n        type SecurityGroup {\n            name: String\n            slug: String\n            createdOn: DateTime\n            description: String\n            permissions: [JSON]\n        }\n\n        input SecurityGroupCreateInput {\n            name: String!\n            slug: String!\n            description: String\n            permissions: [JSON!]!\n        }\n\n        input SecurityGroupUpdateInput {\n            name: String\n            description: String\n            permissions: [JSON!]\n        }\n\n        type SecurityGroupResponse {\n            data: SecurityGroup\n            error: SecurityError\n        }\n\n        type SecurityGroupListResponse {\n            data: [SecurityGroup]\n            error: SecurityError\n        }\n\n        extend type SecurityQuery {\n            getGroup(slug: String): SecurityGroupResponse\n            listGroups: SecurityGroupListResponse\n        }\n\n        extend type SecurityMutation {\n            createGroup(data: SecurityGroupCreateInput!): SecurityGroupResponse\n            updateGroup(slug: String!, data: SecurityGroupUpdateInput!): SecurityGroupResponse\n            deleteGroup(slug: String!): SecurityBooleanResponse\n        }\n    `,\n    resolvers: {\n        SecurityQuery: {\n            getGroup: async (_, { slug }: { slug: string }, context) => {\n                try {\n                    const group = await context.security.groups.getGroup(slug);\n                    return new Response(group);\n                } catch (e) {\n                    return new ErrorResponse(e);\n                }\n            },\n            listGroups: async (_, args, context) => {\n                try {\n                    const groupList = await context.security.groups.listGroups();\n\n                    return new ListResponse(groupList);\n                } catch (e) {\n                    return new ListErrorResponse(e);\n                }\n            }\n        },\n        SecurityMutation: {\n            createGroup: async (_, { data }: { data: GroupInput }, context) => {\n                try {\n                    const group = await context.security.groups.createGroup(data);\n\n                    return new Response(group);\n                } catch (e) {\n                    return new ErrorResponse(e);\n                }\n            },\n            updateGroup: async (\n                _,\n                { slug, data }: { slug: string; data: Omit<GroupInput, \"slug\" | \"system\"> },\n                context\n            ) => {\n                try {\n                    const group = await context.security.groups.updateGroup(slug, data);\n                    return new Response(group);\n                } catch (e) {\n                    return new ErrorResponse(e);\n                }\n            },\n            deleteGroup: async (_, { slug }: { slug: string }, context) => {\n                try {\n                    await context.security.groups.deleteGroup(slug);\n\n                    return new Response(true);\n                } catch (e) {\n                    return new ErrorResponse(e);\n                }\n            }\n        }\n    }\n});\n"],"file":"group.gql.js"}