{"version":3,"sources":["../../src/graphql/apiKey.gql.ts"],"names":["GraphQLSchemaPlugin","typeDefs","resolvers","SecurityQuery","listApiKeys","_","args","context","apiKeys","security","ListResponse","error","ErrorResponse","getApiKey","apiKey","id","Response","SecurityMutation","createApiKey","data","updateApiKey","deleteApiKey"],"mappings":";;;;;;;AAAA;;AACA;;eAGe,IAAIA,wCAAJ,CAA2C;AACtDC,EAAAA,QAAQ;AAAE;AAAe;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAtC0D;AAuCtDC,EAAAA,SAAS,EAAE;AACPC,IAAAA,aAAa,EAAE;AACX,YAAMC,WAAN,CAAkBC,CAAlB,EAAqBC,IAArB,EAA2BC,OAA3B,EAAoC;AAChC,YAAI;AACA,gBAAMC,OAAO,GAAG,MAAMD,OAAO,CAACE,QAAR,CAAiBD,OAAjB,CAAyBJ,WAAzB,EAAtB;AAEA,iBAAO,IAAIM,uBAAJ,CAAiBF,OAAjB,CAAP;AACH,SAJD,CAIE,OAAOG,KAAP,EAAc;AACZ,iBAAO,IAAIC,wBAAJ,CAAkBD,KAAlB,CAAP;AACH;AACJ,OATU;;AAUX,YAAME,SAAN,CAAgBR,CAAhB,EAAmBC,IAAnB,EAAyCC,OAAzC,EAAkD;AAC9C,YAAI;AACA,gBAAMO,MAAM,GAAG,MAAMP,OAAO,CAACE,QAAR,CAAiBD,OAAjB,CAAyBK,SAAzB,CAAmCP,IAAI,CAACS,EAAxC,CAArB;AAEA,iBAAO,IAAIC,mBAAJ,CAAaF,MAAb,CAAP;AACH,SAJD,CAIE,OAAOH,KAAP,EAAc;AACZ,iBAAO,IAAIC,wBAAJ,CAAkBD,KAAlB,CAAP;AACH;AACJ;;AAlBU,KADR;AAqBPM,IAAAA,gBAAgB,EAAE;AACd,YAAMC,YAAN,CAAmBb,CAAnB,EAAsBC,IAAtB,EAAmDC,OAAnD,EAA4D;AACxD,YAAI;AACA,gBAAMO,MAAM,GAAG,MAAMP,OAAO,CAACE,QAAR,CAAiBD,OAAjB,CAAyBU,YAAzB,CAAsCZ,IAAI,CAACa,IAA3C,CAArB;AAEA,iBAAO,IAAIH,mBAAJ,CAAaF,MAAb,CAAP;AACH,SAJD,CAIE,OAAOH,KAAP,EAAc;AACZ,iBAAO,IAAIC,wBAAJ,CAAkBD,KAAlB,CAAP;AACH;AACJ,OATa;;AAUd,YAAMS,YAAN,CAAmBf,CAAnB,EAAsBC,IAAtB,EAA+DC,OAA/D,EAAwE;AACpE,YAAI;AACA,gBAAMO,MAAM,GAAG,MAAMP,OAAO,CAACE,QAAR,CAAiBD,OAAjB,CAAyBY,YAAzB,CAAsCd,IAAI,CAACS,EAA3C,EAA+CT,IAAI,CAACa,IAApD,CAArB;AAEA,iBAAO,IAAIH,mBAAJ,CAAaF,MAAb,CAAP;AACH,SAJD,CAIE,OAAOH,KAAP,EAAc;AACZ,iBAAO,IAAIC,wBAAJ,CAAkBD,KAAlB,CAAP;AACH;AACJ,OAlBa;;AAmBd,YAAMU,YAAN,CAAmBhB,CAAnB,EAAsBC,IAAtB,EAA4CC,OAA5C,EAAqD;AACjD,YAAI;AACA,gBAAMA,OAAO,CAACE,QAAR,CAAiBD,OAAjB,CAAyBa,YAAzB,CAAsCf,IAAI,CAACS,EAA3C,CAAN;AAEA,iBAAO,IAAIC,mBAAJ,CAAa,IAAb,CAAP;AACH,SAJD,CAIE,OAAOL,KAAP,EAAc;AACZ,iBAAO,IAAIC,wBAAJ,CAAkBD,KAAlB,CAAP;AACH;AACJ;;AA3Ba;AArBX;AAvC2C,CAA3C,C","sourcesContent":["import { Response, ErrorResponse, ListResponse } from \"@webiny/handler-graphql/responses\";\nimport { GraphQLSchemaPlugin } from \"@webiny/handler-graphql/plugins/GraphQLSchemaPlugin\";\nimport { AdminUsersContext, ApiKeyInput } from \"~/types\";\n\nexport default new GraphQLSchemaPlugin<AdminUsersContext>({\n    typeDefs: /* GraphQL */ `\n        type SecurityApiKey {\n            id: ID\n            name: String\n            description: String\n            token: String\n            permissions: [JSON]\n            createdOn: DateTime\n            createdBy: SecurityCreatedBy\n        }\n\n        input SecurityApiKeyInput {\n            name: String!\n            description: String\n            permissions: [JSON]!\n        }\n\n        type SecurityApiKeyResponse {\n            data: SecurityApiKey\n            error: SecurityError\n        }\n\n        type SecurityApiKeyListResponse {\n            data: [SecurityApiKey]\n            error: SecurityError\n        }\n\n        extend type SecurityQuery {\n            listApiKeys: SecurityApiKeyListResponse\n            getApiKey(id: ID!): SecurityApiKeyResponse\n        }\n\n        extend type SecurityMutation {\n            createApiKey(data: SecurityApiKeyInput!): SecurityApiKeyResponse\n            updateApiKey(id: ID!, data: SecurityApiKeyInput!): SecurityApiKeyResponse\n            deleteApiKey(id: ID!): SecurityBooleanResponse\n        }\n    `,\n    resolvers: {\n        SecurityQuery: {\n            async listApiKeys(_, args, context) {\n                try {\n                    const apiKeys = await context.security.apiKeys.listApiKeys();\n\n                    return new ListResponse(apiKeys);\n                } catch (error) {\n                    return new ErrorResponse(error);\n                }\n            },\n            async getApiKey(_, args: { id: string }, context) {\n                try {\n                    const apiKey = await context.security.apiKeys.getApiKey(args.id);\n\n                    return new Response(apiKey);\n                } catch (error) {\n                    return new ErrorResponse(error);\n                }\n            }\n        },\n        SecurityMutation: {\n            async createApiKey(_, args: { data: ApiKeyInput }, context) {\n                try {\n                    const apiKey = await context.security.apiKeys.createApiKey(args.data);\n\n                    return new Response(apiKey);\n                } catch (error) {\n                    return new ErrorResponse(error);\n                }\n            },\n            async updateApiKey(_, args: { id: string; data: ApiKeyInput }, context) {\n                try {\n                    const apiKey = await context.security.apiKeys.updateApiKey(args.id, args.data);\n\n                    return new Response(apiKey);\n                } catch (error) {\n                    return new ErrorResponse(error);\n                }\n            },\n            async deleteApiKey(_, args: { id: string }, context) {\n                try {\n                    await context.security.apiKeys.deleteApiKey(args.id);\n\n                    return new Response(true);\n                } catch (error) {\n                    return new ErrorResponse(error);\n                }\n            }\n        }\n    }\n});\n"],"file":"apiKey.gql.js"}