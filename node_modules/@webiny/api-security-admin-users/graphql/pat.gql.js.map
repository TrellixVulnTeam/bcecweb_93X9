{"version":3,"sources":["../../src/graphql/pat.gql.ts"],"names":["GraphQLSchemaPlugin","typeDefs","resolvers","SecurityUser","personalAccessTokens","user","args","context","login","security","getIdentity","id","users","listTokens","SecurityPersonalAccessToken","token","pat","substr","SecurityMutation","createPAT","root","data","createToken","Response","ex","ErrorResponse","code","message","updatePAT","updateToken","deletePAT","deleteToken"],"mappings":"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","sourcesContent":["import { Response, ErrorResponse } from \"@webiny/handler-graphql/responses\";\nimport {\n    AdminUsersContext,\n    CreatePersonalAccessTokenInput,\n    UpdatePersonalAccessTokenInput,\n    User\n} from \"~/types\";\nimport { GraphQLSchemaPlugin } from \"@webiny/handler-graphql/plugins/GraphQLSchemaPlugin\";\n\nexport default new GraphQLSchemaPlugin<AdminUsersContext>({\n    typeDefs: /* GraphQL */ `\n        type SecurityPersonalAccessToken {\n            id: ID\n            name: String\n            token: String\n            createdOn: DateTime\n        }\n        input SecurityPersonalAccessTokenInput {\n            name: String\n        }\n\n        type SecurityPersonalAccessTokenCreate {\n            pat: SecurityPersonalAccessToken\n            # The full token - you only receive it once!\n            token: String\n        }\n\n        type SecurityPersonalAccessTokenCreateResponse {\n            data: SecurityPersonalAccessTokenCreate\n            error: SecurityError\n        }\n\n        type SecurityPersonalAccessTokenResponse {\n            data: SecurityPersonalAccessToken\n            error: SecurityError\n        }\n\n        extend type SecurityUser {\n            personalAccessTokens: [SecurityPersonalAccessToken]\n        }\n\n        extend type SecurityMutation {\n            createPAT(\n                data: SecurityPersonalAccessTokenInput!\n            ): SecurityPersonalAccessTokenCreateResponse\n\n            updatePAT(\n                id: ID!\n                data: SecurityPersonalAccessTokenInput!\n            ): SecurityPersonalAccessTokenResponse\n\n            deletePAT(id: ID!): SecurityBooleanResponse\n        }\n    `,\n    resolvers: {\n        SecurityUser: {\n            personalAccessTokens(user: User, args, context) {\n                // A user can only access his own tokens!\n                if (user.login !== context.security.getIdentity().id) {\n                    return null;\n                }\n\n                return context.security.users.listTokens(user.login);\n            }\n        },\n        SecurityPersonalAccessToken: {\n            token: pat => {\n                return pat.token.substr(-4);\n            }\n        },\n        SecurityMutation: {\n            createPAT: async (\n                root,\n                { data }: { data: CreatePersonalAccessTokenInput },\n                context\n            ) => {\n                try {\n                    const pat = await context.security.users.createToken(data);\n\n                    return new Response({\n                        pat,\n                        token: pat.token\n                    });\n                } catch (ex) {\n                    return new ErrorResponse({\n                        code: ex.code,\n                        message: ex.message,\n                        data: ex.data || null\n                    });\n                }\n            },\n            updatePAT: async (\n                root,\n                { id, data }: { id: string; data: UpdatePersonalAccessTokenInput },\n                context\n            ) => {\n                try {\n                    const token = await context.security.users.updateToken(id, data);\n\n                    return new Response(token);\n                } catch (ex) {\n                    return new ErrorResponse({\n                        code: ex.code,\n                        message: ex.message,\n                        data: ex.data || null\n                    });\n                }\n            },\n            deletePAT: async (root, { id }, context) => {\n                try {\n                    await context.security.users.deleteToken(id);\n\n                    return new Response(true);\n                } catch (ex) {\n                    return new ErrorResponse({\n                        code: ex.code,\n                        message: ex.message,\n                        data: ex.data || null\n                    });\n                }\n            }\n        }\n    }\n});\n"],"file":"pat.gql.js"}