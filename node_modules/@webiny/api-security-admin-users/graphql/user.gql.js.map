{"version":3,"sources":["../../src/graphql/user.gql.ts"],"names":["gravatar","user","login","GraphQLSchemaPlugin","typeDefs","resolvers","SecurityUser","avatar","group","args","security","tenancy","tenant","getCurrentTenant","allPermissions","users","getUserAccess","tenantAccess","find","p","id","slug","name","SecurityIdentity","_","context","getIdentity","access","map","item","permissions","SecurityQuery","getUser","NotFoundResponse","Response","e","ErrorResponse","getCurrentUser","identity","NotAuthorizedError","auth","listUsers","userList","ListResponse","ListErrorResponse","SecurityMutation","root","updateCurrentUser","Error","updateUser","data","createUser","deleteUser"],"mappings":"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","sourcesContent":["import md5 from \"md5\";\nimport {\n    Response,\n    NotFoundResponse,\n    ErrorResponse,\n    ListResponse,\n    ListErrorResponse\n} from \"@webiny/handler-graphql/responses\";\nimport { AdminUsersContext, CreateUserInput, UpdateUserInput, User } from \"~/types\";\nimport { GraphQLSchemaPlugin } from \"@webiny/handler-graphql/plugins/GraphQLSchemaPlugin\";\nimport { NotAuthorizedError } from \"@webiny/api-security\";\n\nconst gravatar = (user: User) => {\n    return \"https://www.gravatar.com/avatar/\" + md5(user.login);\n};\n\nexport default new GraphQLSchemaPlugin<AdminUsersContext>({\n    typeDefs: /* GraphQL */ `\n        type TenantAccess {\n            \"\"\"\n            Tenant ID\n            \"\"\"\n            id: ID\n\n            \"\"\"\n            Tenant name\n            \"\"\"\n            name: String\n\n            \"\"\"\n            Tenant permissions\n            \"\"\"\n            permissions: [JSON]\n        }\n\n        type SecurityIdentity {\n            login: String\n            access: [TenantAccess]\n            firstName: String\n            lastName: String\n            avatar: JSON\n            gravatar: String\n        }\n\n        type SecurityUserGroup {\n            name: String\n            slug: String\n        }\n\n        type SecurityUser {\n            login: String\n            firstName: String\n            lastName: String\n            avatar: JSON\n            gravatar: String\n            createdOn: DateTime\n            \"\"\"\n            The group this user belongs to within current tenant.\n            \"\"\"\n            group: SecurityUserGroup\n        }\n\n        \"\"\"\n        This input type is used by administrators to create other user's accounts within the same tenant.\n        \"\"\"\n        input SecurityUserCreateInput {\n            login: String!\n            firstName: String!\n            lastName: String!\n            avatar: JSON\n            group: String!\n        }\n\n        \"\"\"\n        This input type is used by administrators to update other user's accounts within the same tenant.\n        \"\"\"\n        input SecurityUserUpdateInput {\n            firstName: String\n            lastName: String\n            avatar: JSON\n            group: String\n        }\n\n        \"\"\"\n        This input type is used by the user who is updating his own account\n        \"\"\"\n        input SecurityCurrentUserInput {\n            firstName: String\n            lastName: String\n            avatar: JSON\n        }\n\n        type SecurityUserResponse {\n            data: SecurityUser\n            error: SecurityError\n        }\n\n        type SecurityUserListResponse {\n            data: [SecurityUser]\n            error: SecurityError\n        }\n\n        type SecurityIdentityLoginResponse {\n            data: SecurityIdentity\n            error: SecurityError\n        }\n\n        extend type SecurityQuery {\n            \"Get a single user by id or specific search criteria\"\n            getUser(login: String): SecurityUserResponse\n\n            \"Get current user\"\n            getCurrentUser: SecurityUserResponse\n\n            \"Get a list of users\"\n            listUsers: SecurityUserListResponse\n        }\n\n        extend type SecurityMutation {\n            \"Login using idToken obtained from a 3rd party identity provider\"\n            login: SecurityIdentityLoginResponse\n\n            \"Update current user\"\n            updateCurrentUser(data: SecurityCurrentUserInput!): SecurityUserResponse\n\n            createUser(data: SecurityUserCreateInput!): SecurityUserResponse\n\n            updateUser(login: String!, data: SecurityUserUpdateInput!): SecurityUserResponse\n\n            deleteUser(login: String!): SecurityBooleanResponse\n        }\n    `,\n    resolvers: {\n        SecurityUser: {\n            gravatar,\n            async avatar(user: User) {\n                return user.avatar;\n            },\n            async group(user: User, args, { security, tenancy }) {\n                const tenant = tenancy.getCurrentTenant();\n                const allPermissions = await security.users.getUserAccess(user.login);\n                const tenantAccess = allPermissions.find(p => p.tenant.id === tenant.id);\n                if (tenantAccess) {\n                    return { slug: tenantAccess.group.slug, name: tenantAccess.group.name };\n                }\n\n                return null;\n            }\n        },\n        SecurityIdentity: {\n            gravatar,\n            login: (_, args, context) => {\n                return context.security.getIdentity().id;\n            },\n            async avatar(user: User) {\n                return user.avatar;\n            },\n            async access(user: User, args, context) {\n                const access = await context.security.users.getUserAccess(user.login);\n                return access.map(item => ({\n                    id: item.tenant.id,\n                    name: item.tenant.name,\n                    permissions: item.group.permissions\n                }));\n            }\n        },\n        SecurityQuery: {\n            getUser: async (_, args: { login: string }, context) => {\n                const { login } = args;\n\n                try {\n                    const user = await context.security.users.getUser(login);\n                    if (!user) {\n                        return new NotFoundResponse(`User \"${login}\" was not found!`);\n                    }\n                    return new Response(user);\n                } catch (e) {\n                    return new ErrorResponse(e);\n                }\n            },\n            getCurrentUser: async (_, args, context) => {\n                const identity = context.security.getIdentity();\n\n                if (!identity) {\n                    throw new NotAuthorizedError();\n                }\n\n                const user = await context.security.users.getUser(identity.id, { auth: false });\n                if (!user) {\n                    return new NotFoundResponse(`User with ID ${identity.id} was not found!`);\n                }\n\n                return new Response(user);\n            },\n            listUsers: async (_, args, context) => {\n                try {\n                    const userList = await context.security.users.listUsers();\n\n                    return new ListResponse(userList);\n                } catch (e) {\n                    return new ListErrorResponse(e);\n                }\n            }\n        },\n        SecurityMutation: {\n            login: async (root, args, context) => {\n                try {\n                    const user = await context.security.users.login();\n\n                    return new Response(user);\n                } catch (e) {\n                    return new ErrorResponse(e);\n                }\n            },\n            updateCurrentUser: async (_, args: { data: UpdateUserInput }, context) => {\n                const { security } = context;\n                const identity = security.getIdentity();\n                if (!identity) {\n                    throw new Error(\"Not authorized!\");\n                }\n\n                let user = await security.users.getUser(identity.id);\n                if (!user) {\n                    return new NotFoundResponse(\"User not found!\");\n                }\n\n                try {\n                    user = await security.users.updateUser(user.login, args.data);\n\n                    return new Response(user);\n                } catch (e) {\n                    return new ErrorResponse(e);\n                }\n            },\n            createUser: async (_, { data }: { data: CreateUserInput }, context) => {\n                try {\n                    const user = await context.security.users.createUser(data);\n\n                    return new Response(user);\n                } catch (e) {\n                    return new ErrorResponse(e);\n                }\n            },\n            updateUser: async (\n                root,\n                { data, login }: { login: string; data: UpdateUserInput },\n                { security }\n            ) => {\n                try {\n                    const user = await security.users.updateUser(login, data);\n\n                    return new Response(user);\n                } catch (e) {\n                    return new ErrorResponse(e);\n                }\n            },\n            deleteUser: async (root, { login }: { login: string }, context) => {\n                try {\n                    await context.security.users.deleteUser(login);\n\n                    return new Response(true);\n                } catch (e) {\n                    return new ErrorResponse(e);\n                }\n            }\n        }\n    }\n});\n"],"file":"user.gql.js"}