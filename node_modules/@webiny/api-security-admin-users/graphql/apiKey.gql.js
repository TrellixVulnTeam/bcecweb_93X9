"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _responses = require("@webiny/handler-graphql/responses");

var _GraphQLSchemaPlugin = require("@webiny/handler-graphql/plugins/GraphQLSchemaPlugin");

var _default = new _GraphQLSchemaPlugin.GraphQLSchemaPlugin({
  typeDefs:
  /* GraphQL */
  `
        type SecurityApiKey {
            id: ID
            name: String
            description: String
            token: String
            permissions: [JSON]
            createdOn: DateTime
            createdBy: SecurityCreatedBy
        }

        input SecurityApiKeyInput {
            name: String!
            description: String
            permissions: [JSON]!
        }

        type SecurityApiKeyResponse {
            data: SecurityApiKey
            error: SecurityError
        }

        type SecurityApiKeyListResponse {
            data: [SecurityApiKey]
            error: SecurityError
        }

        extend type SecurityQuery {
            listApiKeys: SecurityApiKeyListResponse
            getApiKey(id: ID!): SecurityApiKeyResponse
        }

        extend type SecurityMutation {
            createApiKey(data: SecurityApiKeyInput!): SecurityApiKeyResponse
            updateApiKey(id: ID!, data: SecurityApiKeyInput!): SecurityApiKeyResponse
            deleteApiKey(id: ID!): SecurityBooleanResponse
        }
    `,
  resolvers: {
    SecurityQuery: {
      async listApiKeys(_, args, context) {
        try {
          const apiKeys = await context.security.apiKeys.listApiKeys();
          return new _responses.ListResponse(apiKeys);
        } catch (error) {
          return new _responses.ErrorResponse(error);
        }
      },

      async getApiKey(_, args, context) {
        try {
          const apiKey = await context.security.apiKeys.getApiKey(args.id);
          return new _responses.Response(apiKey);
        } catch (error) {
          return new _responses.ErrorResponse(error);
        }
      }

    },
    SecurityMutation: {
      async createApiKey(_, args, context) {
        try {
          const apiKey = await context.security.apiKeys.createApiKey(args.data);
          return new _responses.Response(apiKey);
        } catch (error) {
          return new _responses.ErrorResponse(error);
        }
      },

      async updateApiKey(_, args, context) {
        try {
          const apiKey = await context.security.apiKeys.updateApiKey(args.id, args.data);
          return new _responses.Response(apiKey);
        } catch (error) {
          return new _responses.ErrorResponse(error);
        }
      },

      async deleteApiKey(_, args, context) {
        try {
          await context.security.apiKeys.deleteApiKey(args.id);
          return new _responses.Response(true);
        } catch (error) {
          return new _responses.ErrorResponse(error);
        }
      }

    }
  }
});

exports.default = _default;
//# sourceMappingURL=apiKey.gql.js.map