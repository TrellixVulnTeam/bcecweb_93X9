"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _responses = require("@webiny/handler-graphql/responses");

var _GraphQLSchemaPlugin = require("@webiny/handler-graphql/plugins/GraphQLSchemaPlugin");

var _default = new _GraphQLSchemaPlugin.GraphQLSchemaPlugin({
  typeDefs:
  /* GraphQL */
  `
        type SecurityGroup {
            name: String
            slug: String
            createdOn: DateTime
            description: String
            permissions: [JSON]
        }

        input SecurityGroupCreateInput {
            name: String!
            slug: String!
            description: String
            permissions: [JSON!]!
        }

        input SecurityGroupUpdateInput {
            name: String
            description: String
            permissions: [JSON!]
        }

        type SecurityGroupResponse {
            data: SecurityGroup
            error: SecurityError
        }

        type SecurityGroupListResponse {
            data: [SecurityGroup]
            error: SecurityError
        }

        extend type SecurityQuery {
            getGroup(slug: String): SecurityGroupResponse
            listGroups: SecurityGroupListResponse
        }

        extend type SecurityMutation {
            createGroup(data: SecurityGroupCreateInput!): SecurityGroupResponse
            updateGroup(slug: String!, data: SecurityGroupUpdateInput!): SecurityGroupResponse
            deleteGroup(slug: String!): SecurityBooleanResponse
        }
    `,
  resolvers: {
    SecurityQuery: {
      getGroup: async (_, {
        slug
      }, context) => {
        try {
          const group = await context.security.groups.getGroup(slug);
          return new _responses.Response(group);
        } catch (e) {
          return new _responses.ErrorResponse(e);
        }
      },
      listGroups: async (_, args, context) => {
        try {
          const groupList = await context.security.groups.listGroups();
          return new _responses.ListResponse(groupList);
        } catch (e) {
          return new _responses.ListErrorResponse(e);
        }
      }
    },
    SecurityMutation: {
      createGroup: async (_, {
        data
      }, context) => {
        try {
          const group = await context.security.groups.createGroup(data);
          return new _responses.Response(group);
        } catch (e) {
          return new _responses.ErrorResponse(e);
        }
      },
      updateGroup: async (_, {
        slug,
        data
      }, context) => {
        try {
          const group = await context.security.groups.updateGroup(slug, data);
          return new _responses.Response(group);
        } catch (e) {
          return new _responses.ErrorResponse(e);
        }
      },
      deleteGroup: async (_, {
        slug
      }, context) => {
        try {
          await context.security.groups.deleteGroup(slug);
          return new _responses.Response(true);
        } catch (e) {
          return new _responses.ErrorResponse(e);
        }
      }
    }
  }
});

exports.default = _default;
//# sourceMappingURL=group.gql.js.map