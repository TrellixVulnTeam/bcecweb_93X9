"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _util = _interopRequireDefault(require("util"));

var _ncp = _interopRequireDefault(require("ncp"));

var _case = _interopRequireDefault(require("case"));

var _loadJsonFile = _interopRequireDefault(require("load-json-file"));

var _writeJsonFile = _interopRequireDefault(require("write-json-file"));

var _replaceInPath = require("replace-in-path");

var _chalk = _interopRequireDefault(require("chalk"));

var _terminalLink = _interopRequireDefault(require("terminal-link"));

var _utils = require("@webiny/cli-plugin-scaffold/utils");

var _execa = _interopRequireDefault(require("execa"));

var _error = _interopRequireDefault(require("@webiny/error"));

const ncp = _util.default.promisify(_ncp.default.ncp);

const SCAFFOLD_DOCS_LINK = "https://www.webiny.com/docs/how-to-guides/scaffolding/react-application";

var _default = () => ({
  name: "cli-plugin-scaffold-template-react-app",
  type: "cli-plugin-scaffold-template",
  scaffold: {
    name: "React Application",
    description: "Creates a new React application, inside of a new project application." + (_terminalLink.default.isSupported ? " " + (0, _terminalLink.default)("Learn more.", SCAFFOLD_DOCS_LINK) : ""),
    questions: () => {
      return [{
        name: "name",
        message: "Enter application name:",
        default: `My New React Application`,
        validate: name => {
          if (name.length < 2) {
            return `Please enter a name for your new React application.`;
          }

          return true;
        }
      }, {
        name: "description",
        message: "Enter application description:",
        default: input => {
          return `This is the ${input.name} React application.`;
        },
        validate: description => {
          if (description.length < 2) {
            return `Please enter a short description for your new React application.`;
          }

          return true;
        }
      }, {
        name: "path",
        message: "Enter application path:",
        default: input => {
          return _case.default.kebab(input.name);
        },
        validate: appPath => {
          if (!appPath || appPath.length < 2) {
            return `Please enter a valid path in which the new React application will be created.`;
          }

          const locationPath = _path.default.resolve(appPath);

          if (_fs.default.existsSync(locationPath)) {
            return `Cannot continue - the ${_chalk.default.red(appPath)} folder already exists.`;
          }

          return true;
        }
      }];
    },
    generate: async options => {
      const {
        input,
        context,
        inquirer,
        wait,
        ora
      } = options;

      const templateFolderPath = _path.default.join(__dirname, "template");

      if (input.showConfirmation !== false) {
        console.log();
        console.log(`${_chalk.default.bold("The following operations will be performed on your behalf:")}`);
        console.log(`- a new React application will be created in ${_chalk.default.green(input.path)}`);
        console.log(`- the list of workspaces will be updated in the root ${_chalk.default.green("package.json")} file`);
        const prompt = inquirer.createPromptModule();
        const {
          proceed
        } = await prompt({
          name: "proceed",
          message: `Are you sure you want to continue?`,
          type: "confirm",
          default: false
        });

        if (!proceed) {
          process.exit(0);
        }
      }

      console.log();
      ora.start(`Creating a new React application in ${_chalk.default.green(input.path)}...`);
      await wait(1000);

      _fs.default.mkdirSync(input.path, {
        recursive: true
      });

      await ncp(templateFolderPath, input.path);
      const replacements = [{
        find: "Project application name",
        replaceWith: input.name
      }, {
        find: "project-application-name",
        replaceWith: _case.default.kebab(input.name)
      }, {
        find: "projectApplicationName",
        replaceWith: _case.default.camel(input.name)
      }, {
        find: "Project application description",
        replaceWith: input.description
      }, {
        find: "project-application-path",
        replaceWith: _case.default.kebab(input.path)
      }];
      (0, _replaceInPath.replaceInPath)(_path.default.join(input.path, "/**/*.*"), replacements);

      const tsConfigJsonPath = _path.default.join(input.path, "code", "tsconfig.json");

      const tsConfigJson = await (0, _loadJsonFile.default)(tsConfigJsonPath);
      tsConfigJson.extends = _path.default.join(_path.default.relative(_path.default.join(input.path, "code"), context.project.root), "tsconfig.json");
      await (0, _writeJsonFile.default)(tsConfigJsonPath, tsConfigJson);
      {
        // Set correct `@webiny/*` package versions in the package.json file.
        const p = _path.default.join(input.path, "code", "package.json");

        const replacements = [{
          find: "WEBINY_VERSION",
          replaceWith: context.version
        }];
        (0, _replaceInPath.replaceInPath)(p, replacements);
      }
      ora.stopAndPersist({
        symbol: _chalk.default.green("✔"),
        text: `New React Application created in ${_chalk.default.green(input.path)}.`
      });
      ora.start(`Updating the list of workspaces in the root ${_chalk.default.green("package.json")} file...`);
      await wait(1000); // Add package to workspaces.

      const rootPackageJsonPath = _path.default.join(context.project.root, "package.json");

      const pathToAdd = `${input.path}/code`;
      await (0, _utils.addWorkspaceToRootPackageJson)(rootPackageJsonPath, pathToAdd);
      ora.stopAndPersist({
        symbol: _chalk.default.green("✔"),
        text: `The list of workspaces in the root ${_chalk.default.green("package.json")} file updated.`
      });
      ora.start(`Finalizing...`); // Once everything is done, run `yarn` so the new packages are automatically installed.

      try {
        await (0, _execa.default)("yarn");
        await (0, _execa.default)("yarn", ["postinstall"]);
      } catch (err) {
        throw new _error.default(`Unable to install dependencies. Try running "yarn" in project root manually.`, err.message);
      }

      await (0, _utils.formatCode)(["**/*.ts", "**/*.tsx"], {
        cwd: input.path
      });
      ora.stopAndPersist({
        symbol: _chalk.default.green("✔"),
        text: `Finalized.`
      });
    },
    onSuccess: async ({
      input
    }) => {
      console.log();
      console.log(`${_chalk.default.green("✔")} New React application created successfully.`);
      console.log();
      console.log(_chalk.default.bold("Next Steps"));
      console.log(`‣ start the React application locally and continue development by running ${_chalk.default.green(`yarn webiny watch ${input.path} --env dev`)}`);
      console.log();
      console.log(_chalk.default.bold("Useful Links"));
      const links = [["React Application Scaffold", SCAFFOLD_DOCS_LINK], ["Create Custom Application Tutorial", "https://www.webiny.com/docs/tutorials/create-custom-application/introduction"], ["Use the Watch Command", "https://www.webiny.com/docs/how-to-guides/use-watch-command"]];
      links.forEach(([text, url]) => console.log((0, _terminalLink.default)("‣ " + text, url, {
        fallback: (text, link) => text + " - " + link
      })));
    }
  }
});

exports.default = _default;
//# sourceMappingURL=index.js.map