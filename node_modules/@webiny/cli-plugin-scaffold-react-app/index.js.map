{"version":3,"sources":["../src/index.ts"],"names":["ncp","util","promisify","ncpBase","SCAFFOLD_DOCS_LINK","name","type","scaffold","description","link","isSupported","questions","message","default","validate","length","input","Case","kebab","appPath","locationPath","path","resolve","fs","existsSync","chalk","red","generate","options","context","inquirer","wait","ora","templateFolderPath","join","__dirname","showConfirmation","console","log","bold","green","prompt","createPromptModule","proceed","process","exit","start","mkdirSync","recursive","replacements","find","replaceWith","camel","tsConfigJsonPath","tsConfigJson","extends","relative","project","root","p","version","stopAndPersist","symbol","text","rootPackageJsonPath","pathToAdd","err","Error","cwd","onSuccess","links","forEach","url","fallback"],"mappings":"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","sourcesContent":["import { CliCommandScaffoldTemplate } from \"@webiny/cli-plugin-scaffold/types\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport util from \"util\";\nimport ncpBase from \"ncp\";\nimport Case from \"case\";\nimport readJson from \"load-json-file\";\nimport writeJson from \"write-json-file\";\nimport { replaceInPath } from \"replace-in-path\";\nimport chalk from \"chalk\";\nimport link from \"terminal-link\";\nimport { formatCode, addWorkspaceToRootPackageJson } from \"@webiny/cli-plugin-scaffold/utils\";\nimport execa from \"execa\";\nimport Error from \"@webiny/error\";\n\nimport { TsConfigJson } from \"@webiny/cli-plugin-scaffold/types\";\n\nconst ncp = util.promisify(ncpBase.ncp);\n\ninterface Input {\n    name: string;\n    description: string;\n    path: string;\n    showConfirmation?: boolean;\n}\n\nconst SCAFFOLD_DOCS_LINK =\n    \"https://www.webiny.com/docs/how-to-guides/scaffolding/react-application\";\n\nexport default (): CliCommandScaffoldTemplate<Input> => ({\n    name: \"cli-plugin-scaffold-template-react-app\",\n    type: \"cli-plugin-scaffold-template\",\n    scaffold: {\n        name: \"React Application\",\n        description:\n            \"Creates a new React application, inside of a new project application.\" +\n            (link.isSupported ? \" \" + link(\"Learn more.\", SCAFFOLD_DOCS_LINK) : \"\"),\n        questions: () => {\n            return [\n                {\n                    name: \"name\",\n                    message: \"Enter application name:\",\n                    default: `My New React Application`,\n                    validate: name => {\n                        if (name.length < 2) {\n                            return `Please enter a name for your new React application.`;\n                        }\n\n                        return true;\n                    }\n                },\n                {\n                    name: \"description\",\n                    message: \"Enter application description:\",\n                    default: input => {\n                        return `This is the ${input.name} React application.`;\n                    },\n                    validate: description => {\n                        if (description.length < 2) {\n                            return `Please enter a short description for your new React application.`;\n                        }\n\n                        return true;\n                    }\n                },\n                {\n                    name: \"path\",\n                    message: \"Enter application path:\",\n                    default: input => {\n                        return Case.kebab(input.name);\n                    },\n                    validate: appPath => {\n                        if (!appPath || appPath.length < 2) {\n                            return `Please enter a valid path in which the new React application will be created.`;\n                        }\n\n                        const locationPath = path.resolve(appPath);\n                        if (fs.existsSync(locationPath)) {\n                            return `Cannot continue - the ${chalk.red(\n                                appPath\n                            )} folder already exists.`;\n                        }\n\n                        return true;\n                    }\n                }\n            ];\n        },\n        generate: async options => {\n            const { input, context, inquirer, wait, ora } = options;\n\n            const templateFolderPath = path.join(__dirname, \"template\");\n\n            if (input.showConfirmation !== false) {\n                console.log();\n                console.log(\n                    `${chalk.bold(\"The following operations will be performed on your behalf:\")}`\n                );\n\n                console.log(\n                    `- a new React application will be created in ${chalk.green(input.path)}`\n                );\n                console.log(\n                    `- the list of workspaces will be updated in the root ${chalk.green(\n                        \"package.json\"\n                    )} file`\n                );\n\n                const prompt = inquirer.createPromptModule();\n\n                const { proceed } = await prompt({\n                    name: \"proceed\",\n                    message: `Are you sure you want to continue?`,\n                    type: \"confirm\",\n                    default: false\n                });\n\n                if (!proceed) {\n                    process.exit(0);\n                }\n            }\n\n            console.log();\n\n            ora.start(`Creating a new React application in ${chalk.green(input.path)}...`);\n            await wait(1000);\n\n            fs.mkdirSync(input.path, { recursive: true });\n\n            await ncp(templateFolderPath, input.path);\n\n            const replacements = [\n                { find: \"Project application name\", replaceWith: input.name },\n                { find: \"project-application-name\", replaceWith: Case.kebab(input.name) },\n                { find: \"projectApplicationName\", replaceWith: Case.camel(input.name) },\n                { find: \"Project application description\", replaceWith: input.description },\n                {\n                    find: \"project-application-path\",\n                    replaceWith: Case.kebab(input.path)\n                }\n            ];\n\n            replaceInPath(path.join(input.path, \"/**/*.*\"), replacements);\n\n            const tsConfigJsonPath = path.join(input.path, \"code\", \"tsconfig.json\");\n            const tsConfigJson = await readJson<TsConfigJson>(tsConfigJsonPath);\n            tsConfigJson.extends = path.join(\n                path.relative(path.join(input.path, \"code\"), context.project.root),\n                \"tsconfig.json\"\n            );\n            await writeJson(tsConfigJsonPath, tsConfigJson);\n\n            {\n                // Set correct `@webiny/*` package versions in the package.json file.\n                const p = path.join(input.path, \"code\", \"package.json\");\n                const replacements = [\n                    {\n                        find: \"WEBINY_VERSION\",\n                        replaceWith: context.version\n                    }\n                ];\n                replaceInPath(p, replacements);\n            }\n\n            ora.stopAndPersist({\n                symbol: chalk.green(\"✔\"),\n                text: `New React Application created in ${chalk.green(input.path)}.`\n            });\n\n            ora.start(\n                `Updating the list of workspaces in the root ${chalk.green(\"package.json\")} file...`\n            );\n            await wait(1000);\n\n            // Add package to workspaces.\n            const rootPackageJsonPath = path.join(context.project.root, \"package.json\");\n            const pathToAdd = `${input.path}/code`;\n            await addWorkspaceToRootPackageJson(rootPackageJsonPath, pathToAdd);\n\n            ora.stopAndPersist({\n                symbol: chalk.green(\"✔\"),\n                text: `The list of workspaces in the root ${chalk.green(\n                    \"package.json\"\n                )} file updated.`\n            });\n\n            ora.start(`Finalizing...`);\n\n            // Once everything is done, run `yarn` so the new packages are automatically installed.\n            try {\n                await execa(\"yarn\");\n                await execa(\"yarn\", [\"postinstall\"]);\n            } catch (err) {\n                throw new Error(\n                    `Unable to install dependencies. Try running \"yarn\" in project root manually.`,\n                    err.message\n                );\n            }\n\n            await formatCode([\"**/*.ts\", \"**/*.tsx\"], { cwd: input.path });\n\n            ora.stopAndPersist({\n                symbol: chalk.green(\"✔\"),\n                text: `Finalized.`\n            });\n        },\n        onSuccess: async ({ input }) => {\n            console.log();\n            console.log(`${chalk.green(\"✔\")} New React application created successfully.`);\n            console.log();\n            console.log(chalk.bold(\"Next Steps\"));\n\n            console.log(\n                `‣ start the React application locally and continue development by running ${chalk.green(\n                    `yarn webiny watch ${input.path} --env dev`\n                )}`\n            );\n\n            console.log();\n            console.log(chalk.bold(\"Useful Links\"));\n\n            const links = [\n                [\"React Application Scaffold\", SCAFFOLD_DOCS_LINK],\n                [\n                    \"Create Custom Application Tutorial\",\n                    \"https://www.webiny.com/docs/tutorials/create-custom-application/introduction\"\n                ],\n                [\n                    \"Use the Watch Command\",\n                    \"https://www.webiny.com/docs/how-to-guides/use-watch-command\"\n                ]\n            ];\n\n            links.forEach(([text, url]) =>\n                console.log(\n                    link(\"‣ \" + text, url, { fallback: (text, link) => text + \" - \" + link })\n                )\n            );\n        }\n    }\n});\n"],"file":"index.js"}