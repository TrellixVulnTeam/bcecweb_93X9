import React, { Fragment } from "react";
import { Cell } from "@webiny/ui/Grid";
import { Input } from "@webiny/ui/Input";
import { validation } from "@webiny/validation";
import cognitoAuthentication from "@webiny/app-security-cognito-authentication";
import { ViewPlugin } from "@webiny/app/plugins/ViewPlugin";
import { createCognitoPasswordValidator } from "./cognitoPasswordValidator";
import { Authentication } from "./Authentication";
import { UIViewPlugin } from "@webiny/app-admin/ui/UIView";
import { UsersFormView } from "@webiny/app-security-admin-users/ui/views/Users/UsersFormView";
import { PasswordElement } from "@webiny/app-admin/ui/elements/form/PasswordElement";
var defaultPasswordPolicy = {
  minimumLength: 8,
  requireLowercase: false,
  requireNumbers: false,
  requireSymbols: false,
  requireUppercase: false
};
export default (function (options) {
  var policy = Object.assign({}, defaultPasswordPolicy, options.passwordPolicy || {});
  var passwordValidators = [createCognitoPasswordValidator(policy)];
  return [// Configure Amplify and register ApolloLinkPlugin to attach Authorization header on each GraphQL request.
  cognitoAuthentication(options), // Add password input to admin user installation
  new ViewPlugin({
    name: "security.installation.fields",
    render: function render(_ref) {
      var children = _ref.children,
          Bind = _ref.Bind;
      return /*#__PURE__*/React.createElement(Fragment, null, children, /*#__PURE__*/React.createElement(Cell, {
        span: 12
      }, /*#__PURE__*/React.createElement(Bind, {
        name: "password",
        validators: [].concat(passwordValidators, [validation.create("required")])
      }, /*#__PURE__*/React.createElement(Input, {
        autoComplete: "off",
        type: "password",
        label: "Password"
      }))));
    }
  }), // Add password input to admin user form
  new ViewPlugin({
    name: "adminUsers.account.form.fields",
    render: function render(_ref2) {
      var children = _ref2.children,
          Bind = _ref2.Bind,
          data = _ref2.data;
      return /*#__PURE__*/React.createElement(Fragment, null, children, /*#__PURE__*/React.createElement(Cell, {
        span: 12
      }, /*#__PURE__*/React.createElement(Bind, {
        name: "password",
        validators: passwordValidators
      }, /*#__PURE__*/React.createElement(Input, {
        autoComplete: "off",
        description: data.id && "Type a new password to reset it.",
        type: "password",
        label: "Password"
      }))));
    }
  }), // Add password input to admin user form
  new UIViewPlugin(UsersFormView, function (view) {
    var bioSection = view.getElement("bio");
    bioSection.addElement(new PasswordElement("password", {
      name: "password",
      label: "Password",
      description: function description(props) {
        var data = props.formProps.data;
        return data.createdOn && "Type a new password to reset it.";
      },
      validators: function validators(props) {
        if (!props.formProps.data.createdOn) {
          return [].concat(passwordValidators, [validation.create("required")]);
        }

        return passwordValidators;
      }
    }));
  }), // Add password input to admin user account form
  new ViewPlugin({
    name: "admin.installation.secureInstaller",
    render: function render(_ref3) {
      var children = _ref3.children;
      return /*#__PURE__*/React.createElement(Authentication, {
        getIdentityData: options.getIdentityData
      }, children);
    }
  })];
});
//# sourceMappingURL=index.js.map