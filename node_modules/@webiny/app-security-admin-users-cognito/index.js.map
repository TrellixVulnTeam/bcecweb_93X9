{"version":3,"sources":["../src/index.tsx"],"names":["React","Fragment","Cell","Input","validation","cognitoAuthentication","ViewPlugin","createCognitoPasswordValidator","Authentication","UIViewPlugin","UsersFormView","PasswordElement","defaultPasswordPolicy","minimumLength","requireLowercase","requireNumbers","requireSymbols","requireUppercase","options","policy","Object","assign","passwordPolicy","passwordValidators","name","render","children","Bind","create","data","id","view","bioSection","getElement","addElement","label","description","props","formProps","createdOn","validators","getIdentityData"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\";\nimport { Cell } from \"@webiny/ui/Grid\";\nimport { Input } from \"@webiny/ui/Input\";\nimport { validation } from \"@webiny/validation\";\nimport cognitoAuthentication, {\n    Options as CognitOptions\n} from \"@webiny/app-security-cognito-authentication\";\nimport { PluginCollection } from \"@webiny/plugins/types\";\nimport { ViewPlugin } from \"@webiny/app/plugins/ViewPlugin\";\nimport { createCognitoPasswordValidator } from \"./cognitoPasswordValidator\";\nimport { Authentication, Props } from \"./Authentication\";\nimport { UIViewPlugin } from \"@webiny/app-admin/ui/UIView\";\nimport { UsersFormView } from \"@webiny/app-security-admin-users/ui/views/Users/UsersFormView\";\nimport { PasswordElement } from \"@webiny/app-admin/ui/elements/form/PasswordElement\";\n\nconst defaultPasswordPolicy = {\n    minimumLength: 8,\n    requireLowercase: false,\n    requireNumbers: false,\n    requireSymbols: false,\n    requireUppercase: false\n};\n\nexport interface PasswordPolicy {\n    minimumLength?: number;\n    requireLowercase?: boolean;\n    requireNumbers?: boolean;\n    requireSymbols?: boolean;\n    requireUppercase?: boolean;\n}\n\nexport interface Options extends CognitOptions {\n    passwordPolicy?: PasswordPolicy;\n    getIdentityData: Props[\"getIdentityData\"];\n}\n\nexport default (options: Options): PluginCollection => {\n    const policy = Object.assign({}, defaultPasswordPolicy, options.passwordPolicy || {});\n    const passwordValidators = [createCognitoPasswordValidator(policy)];\n\n    return [\n        // Configure Amplify and register ApolloLinkPlugin to attach Authorization header on each GraphQL request.\n        cognitoAuthentication(options),\n\n        // Add password input to admin user installation\n        new ViewPlugin({\n            name: \"security.installation.fields\",\n            render({ children, Bind }) {\n                return (\n                    <Fragment>\n                        {children}\n                        <Cell span={12}>\n                            <Bind\n                                name=\"password\"\n                                validators={[...passwordValidators, validation.create(\"required\")]}\n                            >\n                                <Input autoComplete=\"off\" type=\"password\" label={\"Password\"} />\n                            </Bind>\n                        </Cell>\n                    </Fragment>\n                );\n            }\n        }),\n\n        // Add password input to admin user form\n        new ViewPlugin({\n            name: \"adminUsers.account.form.fields\",\n            render({ children, Bind, data }) {\n                return (\n                    <Fragment>\n                        {children}\n                        <Cell span={12}>\n                            <Bind name=\"password\" validators={passwordValidators}>\n                                <Input\n                                    autoComplete=\"off\"\n                                    description={data.id && \"Type a new password to reset it.\"}\n                                    type=\"password\"\n                                    label={\"Password\"}\n                                />\n                            </Bind>\n                        </Cell>\n                    </Fragment>\n                );\n            }\n        }),\n\n        // Add password input to admin user form\n        new UIViewPlugin<UsersFormView>(UsersFormView, view => {\n            const bioSection = view.getElement(\"bio\");\n            bioSection.addElement(\n                new PasswordElement(\"password\", {\n                    name: \"password\",\n                    label: \"Password\",\n                    description: props => {\n                        const { data } = props.formProps;\n                        return data.createdOn && \"Type a new password to reset it.\";\n                    },\n                    validators: props => {\n                        if (!props.formProps.data.createdOn) {\n                            return [...passwordValidators, validation.create(\"required\")];\n                        }\n                        return passwordValidators;\n                    }\n                })\n            );\n        }),\n\n        // Add password input to admin user account form\n        new ViewPlugin({\n            name: \"admin.installation.secureInstaller\",\n            render({ children }) {\n                return (\n                    <Authentication getIdentityData={options.getIdentityData}>\n                        {children}\n                    </Authentication>\n                );\n            }\n        })\n    ];\n};\n"],"file":"index.js"}