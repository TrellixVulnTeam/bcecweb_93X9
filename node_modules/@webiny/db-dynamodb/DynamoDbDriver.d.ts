import { DocumentClient } from "aws-sdk/clients/dynamodb";
import BatchProcess from "./BatchProcess";
import { DbDriver, Args, Result } from "@webiny/db";
declare type ConstructorArgs = {
    documentClient?: DocumentClient;
};
declare class DynamoDbDriver implements DbDriver {
    batchProcesses: Record<string, BatchProcess>;
    documentClient: DocumentClient;
    constructor({ documentClient }?: ConstructorArgs);
    getClient(): DocumentClient;
    create({ table, data, meta, __batch: batch }: Args): Promise<Result>;
    update({ query, data, table, meta, __batch: batch }: Args): Promise<Result>;
    delete({ query, table, meta, __batch: batch }: Args): Promise<Result>;
    read<T>({ table, query, sort, limit, keys, meta, __batch: batch }: Args): Promise<Result<T[]>>;
    createLog({ id, operation, data, table }: {
        id: any;
        operation: any;
        data: any;
        table: any;
    }): Promise<Result>;
    readLogs<T>({ table }: {
        table: any;
    }): Promise<Result<T[]>>;
    getBatchProcess(__batch: any): BatchProcess;
}
export default DynamoDbDriver;
