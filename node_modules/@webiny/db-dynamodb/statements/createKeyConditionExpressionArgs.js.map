{"version":3,"sources":["../../src/statements/createKeyConditionExpressionArgs.ts"],"names":["query","sort","key","args","expression","attributeNames","attributeValues","$and","output","KeyConditionExpression","ExpressionAttributeNames","ExpressionAttributeValues","ScanIndexForward","IndexName","sortKey","fields","name","primary"],"mappings":";;;;;;;;;AAAA;;eAEe,CAAC;AAAEA,EAAAA,KAAF;AAASC,EAAAA,IAAT;AAAeC,EAAAA;AAAf,CAAD,KAA0B;AACrC,QAAMC,IAAI,GAAG;AACTC,IAAAA,UAAU,EAAE,EADH;AAETC,IAAAA,cAAc,EAAE,EAFP;AAGTC,IAAAA,eAAe,EAAE;AAHR,GAAb;AAMA,iCAAiB;AAAEH,IAAAA,IAAF;AAAQH,IAAAA,KAAK,EAAE;AAAEO,MAAAA,IAAI,EAAEP;AAAR;AAAf,GAAjB;AAEA,QAAMQ,MAAM,GAAG;AACXC,IAAAA,sBAAsB,EAAEN,IAAI,CAACC,UADlB;AAEXM,IAAAA,wBAAwB,EAAEP,IAAI,CAACE,cAFpB;AAGXM,IAAAA,yBAAyB,EAAER,IAAI,CAACG,eAHrB;AAIXM,IAAAA,gBAAgB,EAAE,IAJP;AAKXC,IAAAA,SAAS,EAAE;AALA,GAAf;AAQA,QAAMC,OAAO,GAAGZ,GAAG,CAACa,MAAJ,IAAcb,GAAG,CAACa,MAAJ,CAAW,CAAX,CAA9B;;AACA,MAAId,IAAI,IAAIA,IAAI,CAACa,OAAO,CAACE,IAAT,CAAJ,KAAuB,CAAC,CAApC,EAAuC;AACnCR,IAAAA,MAAM,CAACI,gBAAP,GAA0B,KAA1B;AACH;;AAED,MAAI,CAACV,GAAG,CAACe,OAAT,EAAkB;AACdT,IAAAA,MAAM,CAACK,SAAP,GAAmBX,GAAG,CAACc,IAAvB;AACH;;AAED,SAAOR,MAAP;AACH,C","sourcesContent":["import processStatement from \"./processStatement\";\n\nexport default ({ query, sort, key }) => {\n    const args = {\n        expression: \"\",\n        attributeNames: {},\n        attributeValues: {}\n    };\n\n    processStatement({ args, query: { $and: query } });\n\n    const output = {\n        KeyConditionExpression: args.expression,\n        ExpressionAttributeNames: args.attributeNames,\n        ExpressionAttributeValues: args.attributeValues,\n        ScanIndexForward: true,\n        IndexName: null\n    };\n\n    const sortKey = key.fields && key.fields[1];\n    if (sort && sort[sortKey.name] === -1) {\n        output.ScanIndexForward = false;\n    }\n\n    if (!key.primary) {\n        output.IndexName = key.name;\n    }\n\n    return output;\n};\n"],"file":"createKeyConditionExpressionArgs.js"}