{"version":3,"sources":["../../src/utils/cleanup.ts"],"names":["attributesToRemove","cleanupItem","entity","item","removeAttributes","newItem","targets","concat","attributes","schema","key","hasOwnProperty","includes","cleanupItems","items","map"],"mappings":";;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA,MAAMA,kBAAkB,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,SAAb,EAAwB,KAAxB,EAA+B,UAA/B,EAA2C,KAA3C,EAAkD,QAAlD,EAA4D,KAA5D,CAA3B;;AAEO,MAAMC,WAAW,GAAG,CACvBC,MADuB,EAEvBC,IAFuB,EAGvBC,gBAA0B,GAAG,EAHN,KAIZ;AACX,MAAI,CAACD,IAAL,EAAW;AACP,WAAO,IAAP;AACH;;AACD,QAAME,OAAO,qBACNF,IADM,CAAb;;AAGA,QAAMG,OAAO,GAAGN,kBAAkB,CAACO,MAAnB,CAA0BH,gBAA1B,CAAhB;AACA,QAAMI,UAAU,GAAGN,MAAM,CAACO,MAAP,CAAcD,UAAjC;;AACA,OAAK,MAAME,GAAX,IAAkBP,IAAlB,EAAwB;AACpB,QAAIA,IAAI,CAACQ,cAAL,CAAoBD,GAApB,MAA6B,KAAjC,EAAwC;AACpC;AACH;;AACD,QAAIF,UAAU,CAACE,GAAD,CAAV,IAAmBJ,OAAO,CAACM,QAAR,CAAiBF,GAAjB,MAA0B,KAAjD,EAAwD;AACpD;AACH;;AACD,WAAOL,OAAO,CAACK,GAAD,CAAd;AACH;;AACD,SAAOL,OAAP;AACH,CAvBM;;;;AAyBA,MAAMQ,YAAY,GAAG,CACxBX,MADwB,EAExBY,KAFwB,EAGxBV,gBAA0B,GAAG,EAHL,KAIlB;AACN,SAAOU,KAAK,CAACC,GAAN,CAAUZ,IAAI,IAAIF,WAAW,CAAIC,MAAJ,EAAYC,IAAZ,EAAkBC,gBAAlB,CAA7B,CAAP;AACH,CANM","sourcesContent":["import { Entity } from \"dynamodb-toolbox\";\n\n/**\n * The attributes defined by us or the dynamodb-toolbox library.\n * Add more attributes if necessary.\n */\nconst attributesToRemove = [\"PK\", \"SK\", \"created\", \"_ct\", \"modified\", \"_mt\", \"entity\", \"_et\"];\n\nexport const cleanupItem = <T>(\n    entity: Entity<any>,\n    item?: T & Record<string, any>,\n    removeAttributes: string[] = []\n): T | null => {\n    if (!item) {\n        return null;\n    }\n    const newItem = {\n        ...item\n    };\n    const targets = attributesToRemove.concat(removeAttributes);\n    const attributes = entity.schema.attributes;\n    for (const key in item) {\n        if (item.hasOwnProperty(key) === false) {\n            continue;\n        }\n        if (attributes[key] && targets.includes(key) === false) {\n            continue;\n        }\n        delete newItem[key];\n    }\n    return newItem;\n};\n\nexport const cleanupItems = <T>(\n    entity: Entity<any>,\n    items: (T & Record<string, any>)[],\n    removeAttributes: string[] = []\n): T[] => {\n    return items.map(item => cleanupItem<T>(entity, item, removeAttributes));\n};\n"],"file":"cleanup.js"}