{"version":3,"sources":["../../src/utils/batchRead.ts"],"names":["flatten","responses","entries","values","Object","items","push","batchReadAll","params","result","table","batchGet","Responses","next","previous","nextResult"],"mappings":";;;;;;;AAWA,MAAMA,OAAO,GAAIC,SAAD,IAA6C;AACzD,QAAMC,OAAO,GAAG,EAAhB;AACA,QAAMC,MAAM,GAAGC,MAAM,CAACD,MAAP,CAAcF,SAAd,CAAf;;AACA,OAAK,MAAMI,KAAX,IAAoBF,MAApB,EAA4B;AACxBD,IAAAA,OAAO,CAACI,IAAR,CAAa,GAAGD,KAAhB;AACH;;AACD,SAAOH,OAAP;AACH,CAPD;AAQA;AACA;AACA;AACA;;;AACO,MAAMK,YAAY,GAAG,MAAgBC,MAAhB,IAAiD;AACzE,QAAMH,KAAU,GAAG,EAAnB;AACA,QAAMI,MAAM,GAAG,MAAMD,MAAM,CAACE,KAAP,CAAaC,QAAb,CAAsBH,MAAM,CAACH,KAA7B,CAArB;;AAEA,MAAII,MAAM,CAACG,SAAX,EAAsB;AAClBP,IAAAA,KAAK,CAACC,IAAN,CAAW,GAAGN,OAAO,CAACS,MAAM,CAACG,SAAR,CAArB;AACH;;AAED,MAAI,OAAOH,MAAM,CAACI,IAAd,KAAuB,UAA3B,EAAuC;AACnC,QAAIC,QAAQ,GAAGL,MAAf;AACA,QAAIM,UAAJ;;AACA,WAAQA,UAAU,GAAG,MAAMD,QAAQ,CAACD,IAAT,EAA3B,EAA6C;AACzC,UAAI,CAACE,UAAL,EAAiB;AACb,eAAOV,KAAP;AACH;;AACDA,MAAAA,KAAK,CAACC,IAAN,CAAW,GAAGN,OAAO,CAACe,UAAU,CAACH,SAAZ,CAArB;;AACA,UAAI,CAACG,UAAD,IAAe,OAAOA,UAAU,CAACF,IAAlB,KAA2B,UAA9C,EAA0D;AACtD,eAAOR,KAAP;AACH;;AACDS,MAAAA,QAAQ,GAAGC,UAAX;AACH;AACJ;;AAED,SAAOV,KAAP;AACH,CAxBM","sourcesContent":["import { Table } from \"dynamodb-toolbox\";\n\ninterface Item {\n    Table: Table;\n    Key: any;\n}\ninterface Params {\n    table: Table;\n    items: Item[];\n}\n\nconst flatten = (responses: Record<string, any[]>): any[] => {\n    const entries = [];\n    const values = Object.values(responses);\n    for (const items of values) {\n        entries.push(...items);\n    }\n    return entries;\n};\n/**\n * This helper function is meant to be used to batch read from one table.\n * It will fetch all results, as there is a next() method call built in.\n */\nexport const batchReadAll = async <T = any>(params: Params): Promise<T[]> => {\n    const items: T[] = [];\n    const result = await params.table.batchGet(params.items);\n\n    if (result.Responses) {\n        items.push(...flatten(result.Responses));\n    }\n\n    if (typeof result.next === \"function\") {\n        let previous = result;\n        let nextResult;\n        while ((nextResult = await previous.next())) {\n            if (!nextResult) {\n                return items;\n            }\n            items.push(...flatten(nextResult.Responses));\n            if (!nextResult || typeof nextResult.next !== \"function\") {\n                return items;\n            }\n            previous = nextResult;\n        }\n    }\n\n    return items;\n};\n"],"file":"batchRead.js"}