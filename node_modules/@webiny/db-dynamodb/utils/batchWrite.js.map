{"version":3,"sources":["../../src/utils/batchWrite.ts"],"names":["batchWriteAll","params","maxChunk","chunkedItems","items","table","batchWrite"],"mappings":";;;;;;;;;AACA;;AAWA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,aAAa,GAAG,OAAOC,MAAP,EAAuBC,QAAQ,GAAG,EAAlC,KAAwD;AACjF,QAAMC,YAAsB,GAAG,qBAAYF,MAAM,CAACG,KAAnB,EAA0BF,QAA1B,CAA/B;;AACA,OAAK,MAAME,KAAX,IAAoBD,YAApB,EAAkC;AAC9B,UAAMF,MAAM,CAACI,KAAP,CAAaC,UAAb,CAAwBF,KAAxB,CAAN;AACH;AACJ,CALM","sourcesContent":["import { Table } from \"dynamodb-toolbox\";\nimport lodashChunk from \"lodash.chunk\";\nimport { DocumentClient } from \"aws-sdk/clients/dynamodb\";\n\ninterface Item {\n    [key: string]: DocumentClient.WriteRequest;\n}\ninterface Params {\n    table: Table;\n    items: Item[];\n}\n\n/**\n * Method is meant for batch writing to a single table.\n * It expects already prepared items for the write.\n * It can either delete or put items\n * The method does not check items before actually sending them into the underlying library.\n */\nexport const batchWriteAll = async (params: Params, maxChunk = 25): Promise<void> => {\n    const chunkedItems: Item[][] = lodashChunk(params.items, maxChunk);\n    for (const items of chunkedItems) {\n        await params.table.batchWrite(items);\n    }\n};\n"],"file":"batchWrite.js"}