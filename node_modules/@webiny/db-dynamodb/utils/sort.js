"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sortItems = void 0;

var _lodash = _interopRequireDefault(require("lodash.sortby"));

var _error = _interopRequireDefault(require("@webiny/error"));

var _FieldPathPlugin = require("../plugins/definitions/FieldPathPlugin");

const extractSort = (sortBy, fields) => {
  const result = sortBy.split("_");

  if (result.length !== 2) {
    throw new _error.default("Problem in determining the sorting for the entry items.", "SORT_ERROR", {
      sortBy
    });
  }

  const [field, order] = result;

  if (!field) {
    throw new _error.default("Sorting field does not exist.", "SORTING_FIELD_ERROR", {
      field,
      order,
      fields
    });
  } else if (fields.includes(field) === false) {
    throw new _error.default(`Cannot sort by given field: "${field}".`, "UNSUPPORTED_SORT_ERROR", {
      fields,
      field
    });
  }

  return {
    field,
    reverse: order === "DESC"
  };
};

const sortItems = params => {
  const {
    context,
    items,
    sort = [],
    fields
  } = params;

  if (items.length <= 1) {
    return items;
  } else if (sort.length === 0) {
    sort.push("createdOn_DESC");
  } else if (sort.length > 1) {
    throw new _error.default("Sorting is limited to a single field", "SORT_ERROR", {
      sort: sort
    });
  }

  const [firstSort] = sort;

  if (!firstSort) {
    throw new _error.default("Empty sort array item.", "SORT_ERROR", {
      sort
    });
  }

  const {
    field,
    reverse
  } = extractSort(firstSort, fields);
  const fieldPathPlugin = context.plugins.byType(_FieldPathPlugin.FieldPathPlugin.type).find(plugin => plugin.canCreate(field));
  const path = fieldPathPlugin ? fieldPathPlugin.createPath(field) : field;
  const sortedItems = (0, _lodash.default)(items, path);

  if (!reverse) {
    return sortedItems;
  }

  return sortedItems.reverse();
};

exports.sortItems = sortItems;
//# sourceMappingURL=sort.js.map