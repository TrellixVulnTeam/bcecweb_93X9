"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryAll = exports.queryOne = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _error = _interopRequireDefault(require("@webiny/error"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Will run query only once. Pass the previous to run the query again to fetch new data.
 * It returns the result and the items it found.
 * Result is required to fetch the items that were not fetched in the previous run.
 */
const query = async params => {
  const {
    entity,
    previous,
    partitionKey,
    options
  } = params;
  let result;
  /**
   * In case there is no previous result we must make a new query.
   * This is the first query on the given partition key.
   */

  if (!previous) {
    result = await entity.query(partitionKey, options);
  } else if (typeof previous.next === "function") {
    /**
     * In case we have a previous result and it has a next method, we run it.
     * In case result of the next method is false, it means it has nothing else to read
     * and we return a null to keep the query from repeating.
     */
    result = await previous.next();

    if (result === false) {
      return {
        result: null,
        items: []
      };
    }
  } else {
    /**
     * This could probably never happen but keep it here just in case to break the query loop.
     * Basically, either previous does not exist or it exists and it does not have the next method
     * and at that point a result returned will be null and loop should not start again.
     */
    return {
      result: null,
      items: []
    };
  }
  /**
   * We expect the result to contain an Items array and if not, something went wrong, very wrong.
   */


  if (!result || !result.Items || !Array.isArray(result.Items)) {
    throw new _error.default("Error when querying for content entries - no result.", "QUERY_ERROR", {
      partitionKey,
      options
    });
  }

  return {
    result,
    items: result.Items
  };
};
/**
 * Will run the query to fetch the first possible item from the database.
 */


const queryOne = async params => {
  const {
    items
  } = await query(_objectSpread(_objectSpread({}, params), {}, {
    options: _objectSpread(_objectSpread({}, params.options || {}), {}, {
      limit: 1
    })
  }));
  return items[0] || null;
};
/**
 * Will run the query to fetch the results no matter how much iterations it needs to go through.
 */


exports.queryOne = queryOne;

const queryAll = async params => {
  const items = [];
  let results;
  let previousResult = undefined;

  while (results = await query(_objectSpread(_objectSpread({}, params), {}, {
    previous: previousResult
  }))) {
    items.push(...results.items);

    if (!results.result) {
      return items;
    }

    previousResult = results.result;
  }

  return items;
};

exports.queryAll = queryAll;
//# sourceMappingURL=query.js.map