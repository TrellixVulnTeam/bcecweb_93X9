"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cleanupItems = exports.cleanupItem = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * The attributes defined by us or the dynamodb-toolbox library.
 * Add more attributes if necessary.
 */
const attributesToRemove = ["PK", "SK", "created", "_ct", "modified", "_mt", "entity", "_et"];

const cleanupItem = (entity, item, removeAttributes = []) => {
  if (!item) {
    return null;
  }

  const newItem = _objectSpread({}, item);

  const targets = attributesToRemove.concat(removeAttributes);
  const attributes = entity.schema.attributes;

  for (const key in item) {
    if (item.hasOwnProperty(key) === false) {
      continue;
    }

    if (attributes[key] && targets.includes(key) === false) {
      continue;
    }

    delete newItem[key];
  }

  return newItem;
};

exports.cleanupItem = cleanupItem;

const cleanupItems = (entity, items, removeAttributes = []) => {
  return items.map(item => cleanupItem(entity, item, removeAttributes));
};

exports.cleanupItems = cleanupItems;
//# sourceMappingURL=cleanup.js.map