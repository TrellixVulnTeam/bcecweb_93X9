import { queryOptions as DynamoDBToolboxQueryOptions } from "dynamodb-toolbox/dist/classes/Table";
import { Entity } from "dynamodb-toolbox";
export interface QueryAllParams {
    entity: Entity<any>;
    partitionKey: string;
    options?: DynamoDBToolboxQueryOptions;
}
export interface QueryOneParams extends QueryAllParams {
    options?: Omit<DynamoDBToolboxQueryOptions, "limit">;
}
export interface QueryParams extends QueryAllParams {
    previous?: any;
}
export interface QueryResult<T> {
    result: any | null;
    items: T[];
}
/**
 * Will run the query to fetch the first possible item from the database.
 */
export declare const queryOne: <T>(params: QueryOneParams) => Promise<T>;
/**
 * Will run the query to fetch the results no matter how much iterations it needs to go through.
 */
export declare const queryAll: <T>(params: QueryAllParams) => Promise<T[]>;
