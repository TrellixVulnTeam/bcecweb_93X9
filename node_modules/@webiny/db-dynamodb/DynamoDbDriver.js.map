{"version":3,"sources":["../src/DynamoDbDriver.ts"],"names":["LOG_KEYS","primary","unique","name","fields","DynamoDbDriver","constructor","documentClient","batchProcesses","DocumentClient","getClient","create","table","data","meta","__batch","batch","result","put","TableName","Item","ReturnConsumedCapacity","promise","response","$response","batchProcess","getBatchProcess","addBatchWrite","allOperationsAdded","startExecution","waitStartExecution","waitExecution","update","query","UpdateExpression","ExpressionAttributeNames","ExpressionAttributeValues","updateExpression","key","push","join","Key","delete","addBatchDelete","read","sort","limit","keys","queryGenerator","QueryGenerator","queryParams","generate","tableName","Array","isArray","Items","getResult","addBatchGet","createLog","id","operation","PK","SK","readLogs","$gte","instance","BatchProcess"],"mappings":"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","sourcesContent":["import { DocumentClient } from \"aws-sdk/clients/dynamodb\";\nimport BatchProcess from \"./BatchProcess\";\nimport QueryGenerator from \"./QueryGenerator\";\nimport { DbDriver, Args, Result } from \"@webiny/db\";\n\ntype ConstructorArgs = {\n    documentClient?: DocumentClient;\n};\n\nconst LOG_KEYS = [\n    {\n        primary: true,\n        unique: true,\n        name: \"primary\",\n        fields: [{ name: \"PK\" }, { name: \"SK\" }]\n    }\n];\n\nclass DynamoDbDriver implements DbDriver {\n    batchProcesses: Record<string, BatchProcess>;\n    documentClient: DocumentClient;\n    constructor({ documentClient }: ConstructorArgs = {}) {\n        this.batchProcesses = {};\n        this.documentClient = documentClient || new DocumentClient();\n    }\n\n    getClient() {\n        return this.documentClient;\n    }\n\n    async create({ table, data, meta, __batch: batch }: Args): Promise<Result> {\n        if (!batch) {\n            const result = await this.documentClient\n                .put({\n                    TableName: table,\n                    Item: data,\n                    ReturnConsumedCapacity: meta ? \"TOTAL\" : \"NONE\"\n                })\n                .promise();\n            return [true, { response: result.$response }];\n        }\n\n        const batchProcess = this.getBatchProcess(batch);\n        batchProcess.addBatchWrite({ table, data });\n\n        if (batchProcess.allOperationsAdded()) {\n            batchProcess.startExecution();\n        } else {\n            await batchProcess.waitStartExecution();\n        }\n\n        await batchProcess.waitExecution();\n\n        return [true, { response: batchProcess.response }];\n    }\n\n    async update({ query, data, table, meta, __batch: batch }: Args): Promise<Result> {\n        if (!batch) {\n            const update = {\n                UpdateExpression: \"SET \",\n                ExpressionAttributeNames: {},\n                ExpressionAttributeValues: {}\n            };\n\n            const updateExpression = [];\n            for (const key in data) {\n                updateExpression.push(`#${key} = :${key}`);\n                update.ExpressionAttributeNames[`#${key}`] = key;\n                update.ExpressionAttributeValues[`:${key}`] = data[key];\n            }\n\n            update.UpdateExpression += updateExpression.join(\", \");\n\n            const result = await this.documentClient\n                .update({\n                    TableName: table,\n                    Key: query,\n                    ReturnConsumedCapacity: meta ? \"TOTAL\" : \"NONE\",\n                    ...update\n                })\n                .promise();\n\n            return [true, { response: result.$response }];\n        }\n\n        const batchProcess = this.getBatchProcess(batch);\n\n        batchProcess.addBatchWrite({\n            table,\n            data\n        });\n\n        if (batchProcess.allOperationsAdded()) {\n            batchProcess.startExecution();\n        } else {\n            await batchProcess.waitStartExecution();\n        }\n\n        await batchProcess.waitExecution();\n\n        return [true, { response: batchProcess.response }];\n    }\n\n    async delete({ query, table, meta, __batch: batch }: Args): Promise<Result> {\n        if (!batch) {\n            const result = await this.documentClient\n                .delete({\n                    TableName: table,\n                    Key: query,\n                    ReturnConsumedCapacity: meta ? \"TOTAL\" : \"NONE\"\n                })\n                .promise();\n\n            return [true, { response: result.$response }];\n        }\n\n        const batchProcess = this.getBatchProcess(batch);\n        batchProcess.addBatchDelete({\n            table,\n            query\n        });\n\n        if (batchProcess.allOperationsAdded()) {\n            batchProcess.startExecution();\n        } else {\n            await batchProcess.waitStartExecution();\n        }\n\n        await batchProcess.waitExecution();\n\n        return [true, { response: batchProcess.response }];\n    }\n\n    async read<T>({\n        table,\n        query,\n        sort,\n        limit,\n        keys,\n        meta,\n        __batch: batch\n    }: Args): Promise<Result<T[]>> {\n        if (!batch) {\n            const queryGenerator = new QueryGenerator();\n            const queryParams = queryGenerator.generate({\n                query,\n                keys,\n                sort,\n                limit,\n                tableName: table\n            });\n\n            const response = await this.documentClient\n                .query({ ...queryParams, ReturnConsumedCapacity: meta ? \"TOTAL\" : \"NONE\" })\n                .promise();\n\n            if (Array.isArray(response.Items)) {\n                return [response.Items as T[], { response: response.$response }];\n            }\n            return [[], { response: response.$response }];\n        }\n\n        // DynamoDb doesn't support batch queries, so we can immediately assume the GetRequest operation.\n        const batchProcess = this.getBatchProcess(batch);\n        const getResult = batchProcess.addBatchGet({\n            table,\n            query\n        });\n\n        if (batchProcess.allOperationsAdded()) {\n            batchProcess.startExecution();\n        } else {\n            await batchProcess.waitStartExecution();\n        }\n\n        await batchProcess.waitExecution();\n\n        const result = getResult() as T;\n        if (result) {\n            return [[result], { response: batchProcess.response }];\n        }\n\n        return [[], { response: batchProcess.response }];\n    }\n\n    async createLog({ id, operation, data, table }): Promise<Result> {\n        await this.create({\n            table: table,\n            keys: LOG_KEYS,\n            data: {\n                PK: \"log\",\n                SK: id,\n                id,\n                operation,\n                ...data\n            }\n        });\n\n        return [true, {}];\n    }\n\n    async readLogs<T>({ table }) {\n        return this.read<T>({\n            table,\n            keys: LOG_KEYS,\n            query: {\n                PK: \"log\",\n                SK: { $gte: \" \" }\n            }\n        });\n    }\n\n    getBatchProcess(__batch): BatchProcess {\n        if (!this.batchProcesses[__batch.instance.id]) {\n            this.batchProcesses[__batch.instance.id] = new BatchProcess(\n                __batch.instance,\n                this.documentClient\n            );\n        }\n\n        return this.batchProcesses[__batch.instance.id];\n    }\n}\n\nexport default DynamoDbDriver;\n"],"file":"DynamoDbDriver.js"}