{"version":3,"sources":["../src/QueryGenerator.ts"],"names":["QueryGenerator","generate","query","keys","sort","limit","tableName","key","findQueryKey","Error","keyAttributesValues","nonKeyAttributesValues","queryKey","fields","find","item","name","keyConditionExpression","TableName","Limit","i","length","hasAllFields","j","field"],"mappings":";;;;;;;;;;;AAAA;;;;;;AAEA,MAAMA,cAAN,CAAqB;AACjBC,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA,IAAf;AAAqBC,IAAAA,KAArB;AAA4BC,IAAAA;AAA5B,GAAD,EAA0C;AAC9C;AACA,UAAMC,GAAG,GAAG,KAAKC,YAAL,CAAkBN,KAAlB,EAAyBC,IAAzB,CAAZ;;AAEA,QAAI,CAACI,GAAL,EAAU;AACN,YAAM,IAAIE,KAAJ,CAAU,uCAAV,CAAN;AACH,KAN6C,CAQ9C;;;AACA,UAAMC,mBAAmB,GAAG,EAA5B;AAAA,UACIC,sBAAsB,GAAG,EAD7B;;AAEA,SAAK,MAAMC,QAAX,IAAuBV,KAAvB,EAA8B;AAC1B,UAAIK,GAAG,CAACM,MAAJ,CAAWC,IAAX,CAAgBC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAcJ,QAAtC,CAAJ,EAAqD;AACjDF,QAAAA,mBAAmB,CAACE,QAAD,CAAnB,GAAgCV,KAAK,CAACU,QAAD,CAArC;AACH,OAFD,MAEO;AACHD,QAAAA,sBAAsB,CAACC,QAAD,CAAtB,GAAmCV,KAAK,CAACU,QAAD,CAAxC;AACH;AACJ;;AAED,UAAMK,sBAAsB,GAAG,+CAAiC;AAC5Df,MAAAA,KAAK,EAAEQ,mBADqD;AAE5DN,MAAAA,IAF4D;AAG5DG,MAAAA;AAH4D,KAAjC,CAA/B;AAMA,2CAAYU,sBAAZ;AAAoCC,MAAAA,SAAS,EAAEZ,SAA/C;AAA0Da,MAAAA,KAAK,EAAEd;AAAjE;AACH;;AAEDG,EAAAA,YAAY,CAACN,KAAK,GAAG,EAAT,EAAaC,IAAI,GAAG,EAApB,EAAwB;AAChC,SAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,IAAI,CAACkB,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,YAAMb,GAAG,GAAGJ,IAAI,CAACiB,CAAD,CAAhB;AACA,UAAIE,YAAY,GAAG,IAAnB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,GAAG,CAACM,MAAJ,CAAWQ,MAA/B,EAAuCE,CAAC,EAAxC,EAA4C;AACxC,cAAMC,KAAK,GAAGjB,GAAG,CAACM,MAAJ,CAAWU,CAAX,CAAd;;AACA,YAAI,CAACrB,KAAK,CAACsB,KAAK,CAACR,IAAP,CAAV,EAAwB;AACpBM,UAAAA,YAAY,GAAG,KAAf;AACA;AACH;AACJ;;AAED,UAAIA,YAAJ,EAAkB;AACd,eAAOf,GAAP;AACH;AACJ;AACJ;;AA7CgB;;eAgDNP,c","sourcesContent":["import createKeyConditionExpressionArgs from \"./statements/createKeyConditionExpressionArgs\";\n\nclass QueryGenerator {\n    generate({ query, keys, sort, limit, tableName }) {\n        // 1. Which key can we use in this query operation?\n        const key = this.findQueryKey(query, keys);\n\n        if (!key) {\n            throw new Error(\"Cannot perform query - key not found.\");\n        }\n\n        // 2. Now that we know the key, let's separate the key attributes from the rest.\n        const keyAttributesValues = {},\n            nonKeyAttributesValues = {};\n        for (const queryKey in query) {\n            if (key.fields.find(item => item.name === queryKey)) {\n                keyAttributesValues[queryKey] = query[queryKey];\n            } else {\n                nonKeyAttributesValues[queryKey] = query[queryKey];\n            }\n        }\n\n        const keyConditionExpression = createKeyConditionExpressionArgs({\n            query: keyAttributesValues,\n            sort,\n            key\n        });\n\n        return { ...keyConditionExpression, TableName: tableName, Limit: limit };\n    }\n\n    findQueryKey(query = {}, keys = []) {\n        for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n            let hasAllFields = true;\n            for (let j = 0; j < key.fields.length; j++) {\n                const field = key.fields[j];\n                if (!query[field.name]) {\n                    hasAllFields = false;\n                    break;\n                }\n            }\n\n            if (hasAllFields) {\n                return key;\n            }\n        }\n    }\n}\n\nexport default QueryGenerator;\n"],"file":"QueryGenerator.js"}