"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _createKeyConditionExpressionArgs = _interopRequireDefault(require("./statements/createKeyConditionExpressionArgs"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

class QueryGenerator {
  generate({
    query,
    keys,
    sort,
    limit,
    tableName
  }) {
    // 1. Which key can we use in this query operation?
    const key = this.findQueryKey(query, keys);

    if (!key) {
      throw new Error("Cannot perform query - key not found.");
    } // 2. Now that we know the key, let's separate the key attributes from the rest.


    const keyAttributesValues = {},
          nonKeyAttributesValues = {};

    for (const queryKey in query) {
      if (key.fields.find(item => item.name === queryKey)) {
        keyAttributesValues[queryKey] = query[queryKey];
      } else {
        nonKeyAttributesValues[queryKey] = query[queryKey];
      }
    }

    const keyConditionExpression = (0, _createKeyConditionExpressionArgs.default)({
      query: keyAttributesValues,
      sort,
      key
    });
    return _objectSpread(_objectSpread({}, keyConditionExpression), {}, {
      TableName: tableName,
      Limit: limit
    });
  }

  findQueryKey(query = {}, keys = []) {
    for (let i = 0; i < keys.length; i++) {
      const key = keys[i];
      let hasAllFields = true;

      for (let j = 0; j < key.fields.length; j++) {
        const field = key.fields[j];

        if (!query[field.name]) {
          hasAllFields = false;
          break;
        }
      }

      if (hasAllFields) {
        return key;
      }
    }
  }

}

var _default = QueryGenerator;
exports.default = _default;
//# sourceMappingURL=QueryGenerator.js.map