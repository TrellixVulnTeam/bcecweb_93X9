{"version":3,"sources":["../src/BatchProcess.ts"],"names":["BatchProcess","constructor","batch","documentClient","resolveBuild","rejectBuild","queryBuild","Promise","resolve","reject","resolveExecution","rejectExecution","queryExecution","operations","results","response","batchType","waitStartExecution","waitExecution","addBatchOperation","type","args","meta","initial","index","length","message","push","addBatchWrite","addBatchDelete","delete","addBatchGet","allOperationsAdded","startExecution","documentClientArgs","ReturnConsumedCapacity","RequestItems","e","i","table","DeleteRequest","Key","query","PutRequest","Item","data","Keys","responseItems","Responses","foundResult","outer","j","responseItem","queryKey","error","result"],"mappings":"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","sourcesContent":["import { DocumentClient } from \"aws-sdk/clients/dynamodb\";\nimport { Batch } from \"@webiny/db\";\n\ntype BatchType = \"batchWrite\" | \"batchGet\";\n\nclass BatchProcess {\n    documentClient: DocumentClient;\n    batch: Batch;\n    resolveBuild: () => void;\n    rejectBuild: ({ message: string }) => void;\n    queryBuild: Promise<void>;\n    resolveExecution: () => void;\n    rejectExecution: ({ message: string }) => void;\n    queryExecution: Promise<void>;\n    operations: [Record<string, any>, Record<string, any>][];\n    batchType: BatchType;\n    results: Record<string, any>[];\n    response: Record<string, any>;\n    constructor(batch: Batch, documentClient: DocumentClient) {\n        this.documentClient = documentClient;\n        this.batch = batch;\n\n        this.resolveBuild = null;\n        this.rejectBuild = null;\n        this.queryBuild = new Promise((resolve, reject) => {\n            this.resolveBuild = resolve;\n            this.rejectBuild = reject;\n        });\n\n        this.resolveExecution = null;\n        this.rejectExecution = null;\n        this.queryExecution = new Promise((resolve, reject) => {\n            this.resolveExecution = resolve;\n            this.rejectExecution = reject;\n        });\n\n        this.operations = [];\n        this.results = [];\n        this.response = [];\n\n        this.batchType;\n    }\n\n    waitStartExecution() {\n        return this.queryBuild;\n    }\n\n    waitExecution() {\n        return this.queryExecution;\n    }\n\n    addBatchOperation(type: BatchType, args, meta = {}): () => any {\n        if (!this.batchType) {\n            this.batchType = type;\n        } else if (this.batchType !== type) {\n            const initial = this.batchType;\n            const index = this.operations.length;\n            this.rejectBuild({\n                message: `Cannot batch operations - all operations must be of the same type (the initial operation type was \"${initial}\", and operation type on index \"${index}\" is \"${type}\").`\n            });\n            return;\n        }\n\n        this.operations.push([args, meta]);\n        const index = this.operations.length - 1;\n        return () => this.results[index];\n    }\n\n    addBatchWrite(args) {\n        return this.addBatchOperation(\"batchWrite\", args);\n    }\n\n    addBatchDelete(args) {\n        return this.addBatchOperation(\"batchWrite\", { ...args }, { delete: true });\n    }\n\n    addBatchGet(args) {\n        return this.addBatchOperation(\"batchGet\", args);\n    }\n\n    allOperationsAdded() {\n        return this.operations.length === this.batch.operations.length;\n    }\n\n    startExecution() {\n        this.resolveBuild();\n\n        const documentClientArgs = {\n            ReturnConsumedCapacity: \"TOTAL\",\n            RequestItems: {}\n        };\n\n        const reject = e => {\n            e.message = `An error occurred while executing \"${this.batchType}\" batch operation: ${e.message}`;\n            return this.rejectExecution(e);\n        };\n\n        let resolve = response => {\n            this.response = response;\n            this.resolveExecution();\n        };\n\n        switch (this.batchType) {\n            case \"batchWrite\":\n                documentClientArgs.RequestItems = {};\n                for (let i = 0; i < this.operations.length; i++) {\n                    const [args, meta] = this.operations[i];\n\n                    if (!documentClientArgs.RequestItems[args.table]) {\n                        documentClientArgs.RequestItems[args.table] = [];\n                    }\n\n                    const push: {\n                        DeleteRequest?: Record<string, any>;\n                        PutRequest?: Record<string, any>;\n                    } = {};\n\n                    if (meta.delete) {\n                        push.DeleteRequest = {\n                            Key: args.query\n                        };\n                    } else {\n                        push.PutRequest = {\n                            Item: args.data\n                        };\n                    }\n\n                    documentClientArgs.RequestItems[args.table].push(push);\n                }\n                break;\n            case \"batchGet\":\n                documentClientArgs.RequestItems = {};\n                for (let i = 0; i < this.operations.length; i++) {\n                    const [args] = this.operations[i];\n\n                    if (!documentClientArgs.RequestItems[args.table]) {\n                        documentClientArgs.RequestItems[args.table] = { Keys: [] };\n                    }\n\n                    documentClientArgs.RequestItems[args.table].Keys.push(args.query);\n                }\n\n                resolve = response => {\n                    this.response = response;\n                    const results = [];\n\n                    // The results of batchGet aren't ordered so we have to figure out the order of results ourselves.\n                    for (let i = 0; i < this.operations.length; i++) {\n                        const [args] = this.operations[i];\n                        const responseItems = response.Responses[args.table];\n\n                        let foundResult = null;\n                        outer: for (let j = 0; j < responseItems.length; j++) {\n                            const responseItem = responseItems[j];\n                            for (const queryKey in args.query) {\n                                if (\n                                    typeof responseItem[queryKey] === \"undefined\" ||\n                                    args.query[queryKey] !== responseItem[queryKey]\n                                ) {\n                                    continue outer;\n                                }\n                            }\n                            foundResult = responseItem;\n                        }\n\n                        results.push(foundResult);\n                    }\n\n                    this.results = results;\n                    this.resolveExecution();\n                };\n                break;\n        }\n\n        return this.documentClient[this.batchType](documentClientArgs, (error, result) => {\n            if (error) {\n                reject(error);\n            } else {\n                resolve(result);\n            }\n        });\n    }\n}\n\nexport default BatchProcess;\n"],"file":"BatchProcess.js"}