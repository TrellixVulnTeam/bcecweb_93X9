{"version":3,"sources":["../../../src/operations/system/SystemStorageOperations.ts"],"names":["SORT_KEY","SystemStorageOperations","partitionKey","tenant","_context","tenancy","getCurrentTenant","WebinyError","id","constructor","context","table","_entity","get","system","PK","SK","Item","ex","message","code","create","params","data","put","update","original"],"mappings":";;;;;;;;;;;AAQA;;AACA;;AACA;;;;;;AAMA,MAAMA,QAAQ,GAAG,IAAjB;;AAEO,MAAMC,uBAAN,CAA4E;AAIvD,MAAZC,YAAY,GAAW;AAC/B,UAAMC,MAAM,GAAG,KAAKC,QAAL,CAAcC,OAAd,CAAsBC,gBAAtB,EAAf;;AACA,QAAI,CAACH,MAAL,EAAa;AACT,YAAM,IAAII,cAAJ,CAAgB,iBAAhB,EAAmC,kBAAnC,CAAN;AACH;;AACD,WAAQ,KAAIJ,MAAM,CAACK,EAAG,SAAtB;AACH;;AAEMC,EAAAA,WAAW,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAiC;AAAA;AAAA;AAC/C,SAAKN,QAAL,GAAgBM,OAAhB;AACA,UAAMC,KAAK,GAAG,oBAAY;AACtBD,MAAAA;AADsB,KAAZ,CAAd;AAIA,SAAKE,OAAL,GAAe,2BAAmB;AAC9BF,MAAAA,OAD8B;AAE9BC,MAAAA;AAF8B,KAAnB,CAAf;AAIH;;AAEe,QAAHE,GAAG,GAAsC;AAClD,QAAI;AACA,YAAMC,MAAM,GAAG,MAAM,KAAKF,OAAL,CAAaC,GAAb,CAAiB;AAClCE,QAAAA,EAAE,EAAE,KAAKb,YADyB;AAElCc,QAAAA,EAAE,EAAEhB;AAF8B,OAAjB,CAArB;;AAIA,UAAI,CAACc,MAAD,IAAW,CAACA,MAAM,CAACG,IAAvB,EAA6B;AACzB,eAAO,IAAP;AACH;;AACD,aAAOH,MAAM,CAACG,IAAd;AACH,KATD,CASE,OAAOC,EAAP,EAAW;AACT,YAAM,IAAIX,cAAJ,CACFW,EAAE,CAACC,OAAH,IAAc,yCADZ,EAEFD,EAAE,CAACE,IAAH,IAAW,kBAFT,CAAN;AAIH;AACJ;;AAEkB,QAANC,MAAM,CACfC,MADe,EAEW;AAC1B,UAAM;AAAEC,MAAAA;AAAF,QAAWD,MAAjB;;AACA,QAAI;AACA,YAAM,KAAKV,OAAL,CAAaY,GAAb;AACFT,QAAAA,EAAE,EAAE,KAAKb,YADP;AAEFc,QAAAA,EAAE,EAAEhB;AAFF,SAGCuB,IAHD,EAAN;AAKH,KAND,CAME,OAAOL,EAAP,EAAW;AACT,YAAM,IAAIX,cAAJ,CACF,gDADE,EAEF,qBAFE,EAGF;AACIgB,QAAAA;AADJ,OAHE,CAAN;AAOH;;AACD,WAAOA,IAAP;AACH;;AAEkB,QAANE,MAAM,CACfH,MADe,EAEW;AAC1B,UAAM;AAAEI,MAAAA,QAAF;AAAYH,MAAAA;AAAZ,QAAqBD,MAA3B;;AAEA,QAAI;AACA,YAAM,KAAKV,OAAL,CAAaa,MAAb;AACFV,QAAAA,EAAE,EAAE,KAAKb,YADP;AAEFc,QAAAA,EAAE,EAAEhB;AAFF,SAGCuB,IAHD,EAAN;AAKH,KAND,CAME,OAAOL,EAAP,EAAW;AACT,YAAM,IAAIX,cAAJ,CACF,+CADE,EAEF,qBAFE,EAGF;AACIgB,QAAAA;AADJ,OAHE,CAAN;AAOH;;AACD,2CACOG,QADP,GAEOH,IAFP;AAIH;;AAxF8E","sourcesContent":["import {\n    FileManagerContext,\n    FileManagerSystem,\n    FileManagerSystemStorageOperations,\n    FileManagerSystemStorageOperationsCreateParams,\n    FileManagerSystemStorageOperationsUpdateParams\n} from \"@webiny/api-file-manager/types\";\nimport { Entity } from \"dynamodb-toolbox\";\nimport WebinyError from \"@webiny/error\";\nimport defineSystemEntity from \"~/definitions/systemEntity\";\nimport defineTable from \"~/definitions/table\";\n\ninterface ConstructorParams {\n    context: FileManagerContext;\n}\n\nconst SORT_KEY = \"FM\";\n\nexport class SystemStorageOperations implements FileManagerSystemStorageOperations {\n    private readonly _context: FileManagerContext;\n    private readonly _entity: Entity<any>;\n\n    private get partitionKey(): string {\n        const tenant = this._context.tenancy.getCurrentTenant();\n        if (!tenant) {\n            throw new WebinyError(\"Tenant missing.\", \"TENANT_NOT_FOUND\");\n        }\n        return `T#${tenant.id}#SYSTEM`;\n    }\n\n    public constructor({ context }: ConstructorParams) {\n        this._context = context;\n        const table = defineTable({\n            context\n        });\n\n        this._entity = defineSystemEntity({\n            context,\n            table\n        });\n    }\n\n    public async get(): Promise<FileManagerSystem | null> {\n        try {\n            const system = await this._entity.get({\n                PK: this.partitionKey,\n                SK: SORT_KEY\n            });\n            if (!system || !system.Item) {\n                return null;\n            }\n            return system.Item;\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not fetch the FileManager system.\",\n                ex.code || \"GET_SYSTEM_ERROR\"\n            );\n        }\n    }\n\n    public async create(\n        params: FileManagerSystemStorageOperationsCreateParams\n    ): Promise<FileManagerSystem> {\n        const { data } = params;\n        try {\n            await this._entity.put({\n                PK: this.partitionKey,\n                SK: SORT_KEY,\n                ...data\n            });\n        } catch (ex) {\n            throw new WebinyError(\n                \"Could not insert new system data into DynamoDB\",\n                \"CREATE_SYSTEM_ERROR\",\n                {\n                    data\n                }\n            );\n        }\n        return data;\n    }\n\n    public async update(\n        params: FileManagerSystemStorageOperationsUpdateParams\n    ): Promise<FileManagerSystem> {\n        const { original, data } = params;\n\n        try {\n            await this._entity.update({\n                PK: this.partitionKey,\n                SK: SORT_KEY,\n                ...data\n            });\n        } catch (ex) {\n            throw new WebinyError(\n                \"Could not update system data in the DynamoDB.\",\n                \"UPDATE_SYSTEM_ERROR\",\n                {\n                    data\n                }\n            );\n        }\n        return {\n            ...original,\n            ...data\n        };\n    }\n}\n"],"file":"SystemStorageOperations.js"}