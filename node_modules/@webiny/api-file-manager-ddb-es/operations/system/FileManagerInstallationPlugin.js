"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileManagerInstallationPlugin = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _InstallationPlugin = require("@webiny/api-file-manager/plugins/definitions/InstallationPlugin");

var _configurations = _interopRequireDefault(require("../configurations"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

class FileManagerInstallationPlugin extends _InstallationPlugin.InstallationPlugin {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "name", "fm.system.ddb-es-installation");
  }

  async beforeInstall({
    context
  }) {
    const {
      elasticsearch
    } = context;

    const esIndex = _configurations.default.es(context);

    const {
      body: exists
    } = await elasticsearch.indices.exists(esIndex);

    if (exists) {
      return;
    }

    await elasticsearch.indices.create(_objectSpread(_objectSpread({}, esIndex), {}, {
      body: {
        // need this part for sorting to work on text fields
        settings: {
          analysis: {
            analyzer: {
              lowercase_analyzer: {
                type: "custom",
                filter: ["lowercase", "trim"],
                tokenizer: "keyword"
              }
            }
          }
        },
        mappings: {
          properties: {
            property: {
              type: "text",
              fields: {
                keyword: {
                  type: "keyword",
                  ignore_above: 256
                }
              },
              analyzer: "lowercase_analyzer"
            },
            rawValues: {
              type: "object",
              enabled: false
            }
          }
        }
      }
    }));
  }

}

exports.FileManagerInstallationPlugin = FileManagerInstallationPlugin;
//# sourceMappingURL=FileManagerInstallationPlugin.js.map