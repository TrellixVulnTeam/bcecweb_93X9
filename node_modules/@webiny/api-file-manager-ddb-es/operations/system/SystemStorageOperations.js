"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SystemStorageOperations = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _error = _interopRequireDefault(require("@webiny/error"));

var _systemEntity = _interopRequireDefault(require("../../definitions/systemEntity"));

var _table = _interopRequireDefault(require("../../definitions/table"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const SORT_KEY = "FM";

class SystemStorageOperations {
  get partitionKey() {
    const tenant = this._context.tenancy.getCurrentTenant();

    if (!tenant) {
      throw new _error.default("Tenant missing.", "TENANT_NOT_FOUND");
    }

    return `T#${tenant.id}#SYSTEM`;
  }

  constructor({
    context
  }) {
    (0, _defineProperty2.default)(this, "_context", void 0);
    (0, _defineProperty2.default)(this, "_entity", void 0);
    this._context = context;
    const table = (0, _table.default)({
      context
    });
    this._entity = (0, _systemEntity.default)({
      context,
      table
    });
  }

  async get() {
    try {
      const system = await this._entity.get({
        PK: this.partitionKey,
        SK: SORT_KEY
      });

      if (!system || !system.Item) {
        return null;
      }

      return system.Item;
    } catch (ex) {
      throw new _error.default(ex.message || "Could not fetch the FileManager system.", ex.code || "GET_SYSTEM_ERROR");
    }
  }

  async create(params) {
    const {
      data
    } = params;

    try {
      await this._entity.put(_objectSpread({
        PK: this.partitionKey,
        SK: SORT_KEY
      }, data));
    } catch (ex) {
      throw new _error.default("Could not insert new system data into DynamoDB", "CREATE_SYSTEM_ERROR", {
        data
      });
    }

    return data;
  }

  async update(params) {
    const {
      original,
      data
    } = params;

    try {
      await this._entity.update(_objectSpread({
        PK: this.partitionKey,
        SK: SORT_KEY
      }, data));
    } catch (ex) {
      throw new _error.default("Could not update system data in the DynamoDB.", "UPDATE_SYSTEM_ERROR", {
        data
      });
    }

    return _objectSpread(_objectSpread({}, original), data);
  }

}

exports.SystemStorageOperations = SystemStorageOperations;
//# sourceMappingURL=SystemStorageOperations.js.map