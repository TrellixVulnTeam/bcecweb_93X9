"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SettingsStorageOperations = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _error = _interopRequireDefault(require("@webiny/error"));

var _table = _interopRequireDefault(require("../../definitions/table"));

var _settingsEntity = _interopRequireDefault(require("../../definitions/settingsEntity"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const SORT_KEY = "default";

class SettingsStorageOperations {
  get partitionKey() {
    const tenant = this._context.tenancy.getCurrentTenant();

    if (!tenant) {
      throw new _error.default("Tenant missing.", "TENANT_NOT_FOUND");
    }

    return `T#${tenant.id}#FM#SETTINGS`;
  }

  constructor({
    context
  }) {
    (0, _defineProperty2.default)(this, "_context", void 0);
    (0, _defineProperty2.default)(this, "_entity", void 0);
    this._context = context;
    const table = (0, _table.default)({
      context
    });
    this._entity = (0, _settingsEntity.default)({
      context,
      table
    });
  }

  async get() {
    try {
      const settings = await this._entity.get({
        PK: this.partitionKey,
        SK: SORT_KEY
      });

      if (!settings || !settings.Item) {
        return null;
      }

      return settings.Item;
    } catch (ex) {
      throw new _error.default(ex.message || "Could not fetch the FileManager settings.", ex.code || "GET_SETTINGS_ERROR");
    }
  }

  async create({
    data
  }) {
    const original = await this.get();
    /**
     * TODO: check if need to throw an error on existing settings
     */

    if (original) {
      return await this.update({
        original,
        data
      });
    }

    try {
      await this._entity.put(_objectSpread({
        PK: this.partitionKey,
        SK: SORT_KEY
      }, data));
      return data;
    } catch (ex) {
      throw new _error.default(ex.message || "Cannot create FileManager settings.", ex.code || "CREATE_FM_SETTINGS_ERROR", {
        data
      });
    }
  }

  async update({
    data
  }) {
    try {
      await this._entity.update(_objectSpread({
        PK: this.partitionKey,
        SK: SORT_KEY
      }, data));
      return data;
    } catch (ex) {
      throw new _error.default(ex.message || "Cannot update FileManager settings.", ex.code || "UPDATE_FM_SETTINGS_ERROR", {
        data
      });
    }
  }

  async delete() {
    return this._entity.delete({
      PK: this.partitionKey,
      SK: SORT_KEY
    });
  }

}

exports.SettingsStorageOperations = SettingsStorageOperations;
//# sourceMappingURL=SettingsStorageOperations.js.map