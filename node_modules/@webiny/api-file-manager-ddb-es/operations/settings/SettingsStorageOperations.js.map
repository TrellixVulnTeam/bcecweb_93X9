{"version":3,"sources":["../../../src/operations/settings/SettingsStorageOperations.ts"],"names":["SORT_KEY","SettingsStorageOperations","partitionKey","tenant","_context","tenancy","getCurrentTenant","WebinyError","id","constructor","context","table","_entity","get","settings","PK","SK","Item","ex","message","code","create","data","original","update","put","delete"],"mappings":";;;;;;;;;;;AAQA;;AACA;;AACA;;;;;;AAMA,MAAMA,QAAQ,GAAG,SAAjB;;AAEO,MAAMC,yBAAN,CAAgF;AAI3D,MAAZC,YAAY,GAAW;AAC/B,UAAMC,MAAM,GAAG,KAAKC,QAAL,CAAcC,OAAd,CAAsBC,gBAAtB,EAAf;;AACA,QAAI,CAACH,MAAL,EAAa;AACT,YAAM,IAAII,cAAJ,CAAgB,iBAAhB,EAAmC,kBAAnC,CAAN;AACH;;AACD,WAAQ,KAAIJ,MAAM,CAACK,EAAG,cAAtB;AACH;;AAEMC,EAAAA,WAAW,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAiC;AAAA;AAAA;AAC/C,SAAKN,QAAL,GAAgBM,OAAhB;AACA,UAAMC,KAAK,GAAG,oBAAY;AACtBD,MAAAA;AADsB,KAAZ,CAAd;AAIA,SAAKE,OAAL,GAAe,6BAAqB;AAChCF,MAAAA,OADgC;AAEhCC,MAAAA;AAFgC,KAArB,CAAf;AAIH;;AAEe,QAAHE,GAAG,GAAiC;AAC7C,QAAI;AACA,YAAMC,QAAQ,GAAG,MAAM,KAAKF,OAAL,CAAaC,GAAb,CAAiB;AACpCE,QAAAA,EAAE,EAAE,KAAKb,YAD2B;AAEpCc,QAAAA,EAAE,EAAEhB;AAFgC,OAAjB,CAAvB;;AAIA,UAAI,CAACc,QAAD,IAAa,CAACA,QAAQ,CAACG,IAA3B,EAAiC;AAC7B,eAAO,IAAP;AACH;;AACD,aAAOH,QAAQ,CAACG,IAAhB;AACH,KATD,CASE,OAAOC,EAAP,EAAW;AACT,YAAM,IAAIX,cAAJ,CACFW,EAAE,CAACC,OAAH,IAAc,2CADZ,EAEFD,EAAE,CAACE,IAAH,IAAW,oBAFT,CAAN;AAIH;AACJ;;AAEkB,QAANC,MAAM,CAAC;AAChBC,IAAAA;AADgB,GAAD,EAEgE;AAC/E,UAAMC,QAAQ,GAAG,MAAM,KAAKV,GAAL,EAAvB;AACA;AACR;AACA;;AACQ,QAAIU,QAAJ,EAAc;AACV,aAAO,MAAM,KAAKC,MAAL,CAAY;AAAED,QAAAA,QAAF;AAAYD,QAAAA;AAAZ,OAAZ,CAAb;AACH;;AAED,QAAI;AACA,YAAM,KAAKV,OAAL,CAAaa,GAAb;AACFV,QAAAA,EAAE,EAAE,KAAKb,YADP;AAEFc,QAAAA,EAAE,EAAEhB;AAFF,SAGCsB,IAHD,EAAN;AAKA,aAAOA,IAAP;AACH,KAPD,CAOE,OAAOJ,EAAP,EAAW;AACT,YAAM,IAAIX,cAAJ,CACFW,EAAE,CAACC,OAAH,IAAc,qCADZ,EAEFD,EAAE,CAACE,IAAH,IAAW,0BAFT,EAGF;AACIE,QAAAA;AADJ,OAHE,CAAN;AAOH;AACJ;;AAEkB,QAANE,MAAM,CAAC;AAChBF,IAAAA;AADgB,GAAD,EAEgE;AAC/E,QAAI;AACA,YAAM,KAAKV,OAAL,CAAaY,MAAb;AACFT,QAAAA,EAAE,EAAE,KAAKb,YADP;AAEFc,QAAAA,EAAE,EAAEhB;AAFF,SAGCsB,IAHD,EAAN;AAKA,aAAOA,IAAP;AACH,KAPD,CAOE,OAAOJ,EAAP,EAAW;AACT,YAAM,IAAIX,cAAJ,CACFW,EAAE,CAACC,OAAH,IAAc,qCADZ,EAEFD,EAAE,CAACE,IAAH,IAAW,0BAFT,EAGF;AACIE,QAAAA;AADJ,OAHE,CAAN;AAOH;AACJ;;AAEkB,QAANI,MAAM,GAAkB;AACjC,WAAO,KAAKd,OAAL,CAAac,MAAb,CAAoB;AACvBX,MAAAA,EAAE,EAAE,KAAKb,YADc;AAEvBc,MAAAA,EAAE,EAAEhB;AAFmB,KAApB,CAAP;AAIH;;AAjGkF","sourcesContent":["import {\n    FileManagerContext,\n    FileManagerSettings,\n    FileManagerSettingsStorageOperations,\n    FileManagerSettingsStorageOperationsCreateParams,\n    FileManagerSettingsStorageOperationsUpdateParams\n} from \"@webiny/api-file-manager/types\";\nimport { Entity } from \"dynamodb-toolbox\";\nimport WebinyError from \"@webiny/error\";\nimport defineTable from \"~/definitions/table\";\nimport defineSettingsEntity from \"~/definitions/settingsEntity\";\n\ninterface ConstructorParams {\n    context: FileManagerContext;\n}\n\nconst SORT_KEY = \"default\";\n\nexport class SettingsStorageOperations implements FileManagerSettingsStorageOperations {\n    private readonly _context: FileManagerContext;\n    private readonly _entity: Entity<any>;\n\n    private get partitionKey(): string {\n        const tenant = this._context.tenancy.getCurrentTenant();\n        if (!tenant) {\n            throw new WebinyError(\"Tenant missing.\", \"TENANT_NOT_FOUND\");\n        }\n        return `T#${tenant.id}#FM#SETTINGS`;\n    }\n\n    public constructor({ context }: ConstructorParams) {\n        this._context = context;\n        const table = defineTable({\n            context\n        });\n\n        this._entity = defineSettingsEntity({\n            context,\n            table\n        });\n    }\n\n    public async get(): Promise<FileManagerSettings> {\n        try {\n            const settings = await this._entity.get({\n                PK: this.partitionKey,\n                SK: SORT_KEY\n            });\n            if (!settings || !settings.Item) {\n                return null;\n            }\n            return settings.Item;\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not fetch the FileManager settings.\",\n                ex.code || \"GET_SETTINGS_ERROR\"\n            );\n        }\n    }\n\n    public async create({\n        data\n    }: FileManagerSettingsStorageOperationsCreateParams): Promise<FileManagerSettings> {\n        const original = await this.get();\n        /**\n         * TODO: check if need to throw an error on existing settings\n         */\n        if (original) {\n            return await this.update({ original, data });\n        }\n\n        try {\n            await this._entity.put({\n                PK: this.partitionKey,\n                SK: SORT_KEY,\n                ...data\n            });\n            return data;\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Cannot create FileManager settings.\",\n                ex.code || \"CREATE_FM_SETTINGS_ERROR\",\n                {\n                    data\n                }\n            );\n        }\n    }\n\n    public async update({\n        data\n    }: FileManagerSettingsStorageOperationsUpdateParams): Promise<FileManagerSettings> {\n        try {\n            await this._entity.update({\n                PK: this.partitionKey,\n                SK: SORT_KEY,\n                ...data\n            });\n            return data;\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Cannot update FileManager settings.\",\n                ex.code || \"UPDATE_FM_SETTINGS_ERROR\",\n                {\n                    data\n                }\n            );\n        }\n    }\n\n    public async delete(): Promise<void> {\n        return this._entity.delete({\n            PK: this.partitionKey,\n            SK: SORT_KEY\n        });\n    }\n}\n"],"file":"SettingsStorageOperations.js"}