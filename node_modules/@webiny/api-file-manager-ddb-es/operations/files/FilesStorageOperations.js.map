{"version":3,"sources":["../../../src/operations/files/FilesStorageOperations.ts"],"names":["SORT_KEY","cleanStorageFile","file","FilesStorageOperations","esIndex","_esIndex","index","configurations","es","context","esClient","ctx","elasticsearch","WebinyError","partitionKeyPrefix","tenant","tenancy","getCurrentTenant","locale","i18nContent","getLocale","Error","id","code","constructor","_table","_entity","table","_esTable","_esEntity","get","PK","getPartitionKey","SK","Item","ex","message","create","params","keys","item","TYPE","esData","plugins","getFileIndexTransformPlugins","esCompressedData","esItem","data","put","update","delete","batchWrite","deleteBatch","createBatch","files","fileChunks","fileChunk","batches","push","putBatch","items","list","where","limit","after","sort","body","response","search","esBody","hits","total","Promise","all","map","_source","hasMoreItems","length","pop","meta","totalCount","value","cursor","tags","initialLimit","esDefaults","must","term","sharedIndex","process","env","ELASTICSEARCH_SHARED_INDEXES","query","bool","size","aggs","listTags","terms","field","search_after","undefined","aggregations","buckets","key","byType","FileIndexTransformPlugin","type"],"mappings":";;;;;;;;;;;AAaA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAmBA,MAAMA,QAAQ,GAAG,GAAjB;AAEA;AACA;AACA;;AACA,MAAMC,gBAAgB,GAAIC,IAAD,IAA4C;AACjE,SAAO,qBAAWA,IAAX,EAAiB,CAAC,IAAD,EAAO,IAAP,EAAa,MAAb,EAAqB,SAArB,EAAgC,UAAhC,EAA4C,QAA5C,CAAjB,CAAP;AACH,CAFD;;AAIO,MAAMC,sBAAN,CAA0E;AAQ1D,MAAPC,OAAO,GAAW;AAC1B,QAAI,CAAC,KAAKC,QAAV,EAAoB;AAChB,YAAM;AAAEC,QAAAA,KAAK,EAAEF;AAAT,UAAqBG,wBAAeC,EAAf,CAAkB,KAAKC,OAAvB,CAA3B;;AACA,WAAKJ,QAAL,GAAgBD,OAAhB;AACH;;AACD,WAAO,KAAKC,QAAZ;AACH;;AAEmB,MAARK,QAAQ,GAAG;AACnB,UAAMC,GAAG,GAAG,KAAKF,OAAjB;;AACA,QAAI,CAACE,GAAG,CAACC,aAAT,EAAwB;AACpB,YAAM,IAAIC,cAAJ,CACF,8CADE,EAEF,4BAFE,CAAN;AAIH;;AACD,WAAOF,GAAG,CAACC,aAAX;AACH;;AAE6B,MAAlBE,kBAAkB,GAAW;AACrC,UAAMC,MAAM,GAAG,KAAKN,OAAL,CAAaO,OAAb,CAAqBC,gBAArB,EAAf;AACA,UAAMC,MAAM,GAAG,KAAKT,OAAL,CAAaU,WAAb,CAAyBC,SAAzB,EAAf;;AACA,QAAI,CAACL,MAAL,EAAa;AACT,YAAM,IAAIF,cAAJ,CAAgB,iBAAhB,EAAmC,kBAAnC,CAAN;AACH;;AACD,QAAI,CAACK,MAAL,EAAa;AACT,YAAM,IAAIG,KAAJ,CAAU,iBAAV,CAAN;AACH;;AACD,WAAQ,KAAIN,MAAM,CAACO,EAAG,MAAKJ,MAAM,CAACK,IAAK,KAAvC;AACH;;AAEMC,EAAAA,WAAW,CAAC;AAAEf,IAAAA;AAAF,GAAD,EAAiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/C,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKgB,MAAL,GAAc,oBAAY;AACtBhB,MAAAA;AADsB,KAAZ,CAAd;AAIA,SAAKiB,OAAL,GAAe,0BAAkB;AAC7BjB,MAAAA,OAD6B;AAE7BkB,MAAAA,KAAK,EAAE,KAAKF;AAFiB,KAAlB,CAAf;AAKA,SAAKG,QAAL,GAAgB,iCAAc;AAC1BnB,MAAAA;AAD0B,KAAd,CAAhB;AAIA,SAAKoB,SAAL,GAAiB,uCAAoB;AACjCpB,MAAAA,OADiC;AAEjCkB,MAAAA,KAAK,EAAE,KAAKC;AAFqB,KAApB,CAAjB;AAIH;;AAEe,QAAHE,GAAG,CAACR,EAAD,EAAmC;AAC/C,QAAI;AACA,YAAMpB,IAAI,GAAG,MAAM,KAAKwB,OAAL,CAAaI,GAAb,CAAiB;AAChCC,QAAAA,EAAE,EAAE,KAAKC,eAAL,CAAqBV,EAArB,CAD4B;AAEhCW,QAAAA,EAAE,EAAEjC;AAF4B,OAAjB,CAAnB;;AAIA,UAAI,CAACE,IAAD,IAAS,CAACA,IAAI,CAACgC,IAAnB,EAAyB;AACrB,eAAO,IAAP;AACH;;AACD,aAAOjC,gBAAgB,CAACC,IAAI,CAACgC,IAAN,CAAvB;AACH,KATD,CASE,OAAOC,EAAP,EAAW;AACT,YAAM,IAAItB,cAAJ,CACFsB,EAAE,CAACC,OAAH,IAAc,iCADZ,EAEFD,EAAE,CAACZ,IAAH,IAAW,gBAFT,EAGF;AACID,QAAAA;AADJ,OAHE,CAAN;AAOH;AACJ;;AAEkB,QAANe,MAAM,CAACC,MAAD,EAAuE;AACtF,UAAM;AAAEpC,MAAAA;AAAF,QAAWoC,MAAjB;AAEA,UAAMC,IAAI,GAAG;AACTR,MAAAA,EAAE,EAAE,KAAKC,eAAL,CAAqB9B,IAAI,CAACoB,EAA1B,CADK;AAETW,MAAAA,EAAE,EAAEjC;AAFK,KAAb;;AAIA,UAAMwC,IAAc,mCACbD,IADa;AAEhBE,MAAAA,IAAI,EAAE;AAFU,OAGbvC,IAHa,CAApB;;AAKA,UAAMwC,MAAM,GAAG,MAAM,oCAAiB;AAClCC,MAAAA,OAAO,EAAE,KAAKC,4BAAL,EADyB;AAElC1C,MAAAA;AAFkC,KAAjB,CAArB;AAIA,UAAM2C,gBAAgB,GAAG,MAAM,2BAAS,KAAKpC,OAAd,EAAuBiC,MAAvB,CAA/B;;AACA,UAAMI,MAAkB,mCACjBP,IADiB;AAEpBjC,MAAAA,KAAK,EAAE,KAAKF,OAFQ;AAGpB2C,MAAAA,IAAI,EAAEF;AAHc,MAAxB;;AAKA,QAAI;AACA,YAAM,KAAKnB,OAAL,CAAasB,GAAb,CAAiBR,IAAjB,CAAN;AACA,YAAM,KAAKX,SAAL,CAAemB,GAAf,CAAmBF,MAAnB,CAAN;AACH,KAHD,CAGE,OAAOX,EAAP,EAAW;AACT,YAAM,IAAItB,cAAJ,CACFsB,EAAE,CAACC,OAAH,IAAc,8CADZ,EAEFD,EAAE,CAACZ,IAAH,IAAW,mBAFT,EAGF;AACIiB,QAAAA,IADJ;AAEIM,QAAAA;AAFJ,OAHE,CAAN;AAQH;;AAED,WAAO5C,IAAP;AACH;;AAEkB,QAAN+C,MAAM,CAAC;AAAE/C,IAAAA;AAAF,GAAD,EAAyE;AACxF,UAAMqC,IAAI,GAAG;AACTR,MAAAA,EAAE,EAAE,KAAKC,eAAL,CAAqB9B,IAAI,CAACoB,EAA1B,CADK;AAETW,MAAAA,EAAE,EAAEjC;AAFK,KAAb;;AAKA,UAAMwC,IAAc,mCACbD,IADa;AAEhBE,MAAAA,IAAI,EAAE;AAFU,OAGbvC,IAHa,CAApB;;AAKA,UAAMwC,MAAM,GAAG,MAAM,oCAAiB;AAClCC,MAAAA,OAAO,EAAE,KAAKC,4BAAL,EADyB;AAElC1C,MAAAA;AAFkC,KAAjB,CAArB;AAIA,UAAM2C,gBAAgB,GAAG,MAAM,2BAAS,KAAKpC,OAAd,EAAuBiC,MAAvB,CAA/B;;AACA,UAAMI,MAAkB,mCACjBP,IADiB;AAEpBjC,MAAAA,KAAK,EAAE,KAAKF,OAFQ;AAGpB2C,MAAAA,IAAI,EAAEF;AAHc,MAAxB;;AAKA,QAAI;AACA,YAAM,KAAKnB,OAAL,CAAasB,GAAb,CAAiBR,IAAjB,CAAN;AACA,YAAM,KAAKX,SAAL,CAAemB,GAAf,CAAmBF,MAAnB,CAAN;AACH,KAHD,CAGE,OAAOX,EAAP,EAAW;AACT,YAAM,IAAItB,cAAJ,CACFsB,EAAE,CAACC,OAAH,IAAc,0CADZ,EAEFD,EAAE,CAACZ,IAAH,IAAW,mBAFT,EAGF;AACIiB,QAAAA,IADJ;AAEIM,QAAAA;AAFJ,OAHE,CAAN;AAQH;;AACD,WAAO5C,IAAP;AACH;;AAEkB,QAANgD,MAAM,CAAC5B,EAAD,EAA4B;AAC3C,UAAMiB,IAAI,GAAG;AACTR,MAAAA,EAAE,EAAE,KAAKC,eAAL,CAAqBV,EAArB,CADK;AAETW,MAAAA,EAAE,EAAEjC;AAFK,KAAb;;AAKA,QAAI;AACA,YAAM,KAAKyB,MAAL,CAAY0B,UAAZ,CAAuB,CACzB,KAAKzB,OAAL,CAAa0B,WAAb,CAAyBb,IAAzB,CADyB,EAEzB,KAAKV,SAAL,CAAeuB,WAAf,CAA2Bb,IAA3B,CAFyB,CAAvB,CAAN;AAIH,KALD,CAKE,OAAOJ,EAAP,EAAW;AACT,YAAM,IAAItB,cAAJ,CACFsB,EAAE,CAACC,OAAH,IAAc,0CADZ,EAEFD,EAAE,CAACZ,IAAH,IAAW,mBAFT,EAGF;AACID,QAAAA;AADJ,OAHE,CAAN;AAOH;AACJ;;AAEuB,QAAX+B,WAAW,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAA6B;AACjD,UAAMC,UAAU,GAAG,sBAAYD,KAAZ,EAAmB,EAAnB,CAAnB;;AAEA,SAAK,MAAME,SAAX,IAAwBD,UAAxB,EAAoC;AAChC,YAAME,OAAO,GAAG,EAAhB;;AACA,WAAK,MAAMvD,IAAX,IAAmBsD,SAAnB,EAA8B;AAC1B,cAAMjB,IAAI,GAAG;AACTR,UAAAA,EAAE,EAAE,KAAKC,eAAL,CAAqB9B,IAAI,CAACoB,EAA1B,CADK;AAETW,UAAAA,EAAE,EAAEjC;AAFK,SAAb;AAIAyD,QAAAA,OAAO,CAACC,IAAR,CACI,KAAKhC,OAAL,CAAaiC,QAAb,iCACOpB,IADP;AAEIE,UAAAA,IAAI,EAAE;AAFV,WAGOvC,IAHP,EADJ;AAOA,cAAM2C,gBAAgB,GAAG,MAAM,2BAAS,KAAKpC,OAAd,EAAuBP,IAAvB,CAA/B;AACAuD,QAAAA,OAAO,CAACC,IAAR,CACI,KAAK7B,SAAL,CAAe8B,QAAf,iCACOpB,IADP;AAEIjC,UAAAA,KAAK,EAAE,KAAKF,OAFhB;AAGI2C,UAAAA,IAAI,EAAEF;AAHV,WADJ;AAOH;;AACD,UAAI;AACA,cAAM,KAAKpB,MAAL,CAAY0B,UAAZ,CAAuBM,OAAvB,CAAN;AACH,OAFD,CAEE,OAAOtB,EAAP,EAAW;AACT,cAAM,IAAItB,cAAJ,CACFsB,EAAE,CAACC,OAAH,IAAc,yCADZ,EAEFD,EAAE,CAACZ,IAAH,IAAW,0BAFT,EAGF;AACI+B,UAAAA,KAAK,EAAEE,SADX;AAEII,UAAAA,KAAK,EAAEH;AAFX,SAHE,CAAN;AAQH;AACJ;;AACD,WAAOH,KAAP;AACH;;AAEgB,QAAJO,IAAI,CACbvB,MADa,EAEyC;AACtD,UAAM;AAAEwB,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBC,MAAAA,KAAhB;AAAuBC,MAAAA;AAAvB,QAAgC3B,MAAtC;AAEA,UAAM4B,IAAI,GAAG,mCAAwB;AACjCzD,MAAAA,OAAO,EAAE,KAAKA,OADmB;AAEjCqD,MAAAA,KAFiC;AAGjCC,MAAAA,KAHiC;AAIjCE,MAAAA,IAJiC;AAKjCD,MAAAA;AALiC,KAAxB,CAAb;AAQA,QAAIG,QAAJ;;AACA,QAAI;AACAA,MAAAA,QAAQ,GAAG,MAAM,KAAKzD,QAAL,CAAc0D,MAAd,iCACV7D,wBAAeC,EAAf,CAAkB,KAAKC,OAAvB,CADU;AAEbyD,QAAAA;AAFa,SAAjB;AAIH,KALD,CAKE,OAAO/B,EAAP,EAAW;AACT,YAAM,IAAItB,cAAJ,CACFsB,EAAE,CAACC,OAAH,IAAc,iCADZ,EAEFD,EAAE,CAACZ,IAAH,IAAW,iBAFT,EAGF;AACIuC,QAAAA,KADJ;AAEIO,QAAAA,MAAM,EAAEH;AAFZ,OAHE,CAAN;AAQH;;AACD,UAAMvB,OAAO,GAAG,KAAKC,4BAAL,EAAhB;AACA,UAAM;AAAE0B,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBJ,QAAQ,CAACD,IAAT,CAAcI,IAAtC;AACA,UAAMhB,KAAK,GAAG,MAAMkB,OAAO,CAACC,GAAR,CAChBH,IAAI,CAACI,GAAL,CAAS,MAAMlC,IAAN,IAAc;AACnB,aAAO,MAAM,sCAAmB;AAC5BG,QAAAA,OAD4B;AAE5BzC,QAAAA,IAAI,EAAEsC,IAAI,CAACmC;AAFiB,OAAnB,CAAb;AAIH,KALD,CADgB,CAApB;AASA,QAAIC,YAAY,GAAG,KAAnB;;AACA,QAAItB,KAAK,CAACuB,MAAN,GAAed,KAAnB,EAA0B;AACtBT,MAAAA,KAAK,CAACwB,GAAN;AACAF,MAAAA,YAAY,GAAG,IAAf;AACH;;AAED,UAAMG,IAAI,GAAG;AACTH,MAAAA,YADS;AAETI,MAAAA,UAAU,EAAET,KAAK,CAACU,KAFT;AAGTC,MAAAA,MAAM,EAAE5B,KAAK,CAACuB,MAAN,GAAe,CAAf,GAAmB,2BAAaP,IAAI,CAAChB,KAAK,CAACuB,MAAN,GAAe,CAAhB,CAAJ,CAAuBZ,IAApC,CAAnB,GAA+D;AAH9D,KAAb;AAMA,WAAO,CAACX,KAAD,EAAQyB,IAAR,CAAP;AACH;;AACgB,QAAJI,IAAI,CACb7C,MADa,EAEyC;AACtD,UAAM;AAAEwB,MAAAA,KAAF;AAASC,MAAAA,KAAK,EAAEqB;AAAhB,QAAiC9C,MAAvC;;AAEA,UAAM+C,UAAU,GAAG9E,wBAAeC,EAAf,CAAkB,KAAKC,OAAvB,CAAnB;;AAEA,UAAM6E,IAAW,GAAG,EAApB;;AACA,QAAIxB,KAAK,CAAC5C,MAAV,EAAkB;AACdoE,MAAAA,IAAI,CAAC5B,IAAL,CAAU;AAAE6B,QAAAA,IAAI,EAAE;AAAE,4BAAkBzB,KAAK,CAAC5C;AAA1B;AAAR,OAAV;AACH,KARqD,CAUtD;;;AACA,UAAMsE,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,4BAAZ,KAA6C,MAAjE;;AACA,QAAIH,WAAJ,EAAiB;AACb,YAAMzE,MAAM,GAAG,KAAKN,OAAL,CAAaO,OAAb,CAAqBC,gBAArB,EAAf;AACAqE,MAAAA,IAAI,CAAC5B,IAAL,CAAU;AAAE6B,QAAAA,IAAI,EAAE;AAAE,4BAAkBxE,MAAM,CAACO;AAA3B;AAAR,OAAV;AACH;;AAED,UAAMyC,KAAK,GAAG,wBAAYqB,YAAZ,CAAd;AAEA,UAAMlB,IAAI,GAAG;AACT0B,MAAAA,KAAK,EAAE;AACHC,QAAAA,IAAI,EAAE;AACFP,UAAAA;AADE;AADH,OADE;AAMTQ,MAAAA,IAAI,EAAE/B,KAAK,GAAG,CANL;AAOTgC,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE;AACNC,UAAAA,KAAK,EAAE;AAAEC,YAAAA,KAAK,EAAE;AAAT;AADD;AADR,OAPG;AAYTC,MAAAA,YAAY,EAAE,2BAAa,IAAb;AAZL,KAAb;AAeA,QAAIhC,QAAQ,GAAGiC,SAAf;;AAEA,QAAI;AACAjC,MAAAA,QAAQ,GAAG,MAAM,KAAKzD,QAAL,CAAc0D,MAAd,iCACViB,UADU;AAEbnB,QAAAA;AAFa,SAAjB;AAIH,KALD,CAKE,OAAO/B,EAAP,EAAW;AACT,YAAM,IAAItB,cAAJ,CACFsB,EAAE,CAACC,OAAH,IAAc,mCADZ,EAEFD,EAAE,CAACZ,IAAH,IAAW,qBAFT,EAGF;AACI2C,QAAAA;AADJ,OAHE,CAAN;AAOH;;AAED,UAAMiB,IAAI,GAAGhB,QAAQ,CAACD,IAAT,CAAcmC,YAAd,CAA2BL,QAA3B,CAAoCM,OAApC,CAA4C5B,GAA5C,CAAgDlC,IAAI,IAAIA,IAAI,CAAC+D,GAA7D,KAAqE,EAAlF;AAEA,QAAI3B,YAAY,GAAG,KAAnB;AACA,UAAMI,UAAU,GAAGG,IAAI,CAACN,MAAxB;;AACA,QAAIG,UAAU,GAAGjB,KAAK,GAAG,CAAzB,EAA4B;AACxBoB,MAAAA,IAAI,CAACL,GAAL;AACAF,MAAAA,YAAY,GAAG,IAAf;AACH;;AAED,UAAMG,IAAI,GAAG;AACTH,MAAAA,YADS;AAETI,MAAAA,UAFS;AAGTE,MAAAA,MAAM,EAAE,IAHC,CAGI;;AAHJ,KAAb;AAMA,WAAO,CAACC,IAAD,EAAOJ,IAAP,CAAP;AACH;AAED;AACJ;AACA;;;AACY/C,EAAAA,eAAe,CAACV,EAAD,EAAqB;AACxC,WAAQ,GAAE,KAAKR,kBAAmB,MAAKQ,EAAG,EAA1C;AACH;;AAEOsB,EAAAA,4BAA4B,GAA+B;AAC/D,WAAO,KAAKnC,OAAL,CAAakC,OAAb,CAAqB6D,MAArB,CAAsDC,mDAAyBC,IAA/E,CAAP;AACH;;AAnW4E","sourcesContent":["import {\n    File,\n    FileManagerContext,\n    FileManagerFilesStorageOperations,\n    FileManagerFilesStorageOperationsCreateParams,\n    FileManagerFilesStorageOperationsListParams,\n    FileManagerFilesStorageOperationsListResponse,\n    FileManagerFilesStorageOperationsTagsParams,\n    FileManagerFilesStorageOperationsTagsResponse,\n    FileManagerFilesStorageOperationsUpdateParams\n} from \"@webiny/api-file-manager/types\";\nimport { Client } from \"@elastic/elasticsearch\";\nimport { Entity, Table } from \"dynamodb-toolbox\";\nimport WebinyError from \"@webiny/error\";\nimport defineTable from \"~/definitions/table\";\nimport defineEsTable from \"~/definitions/tableElasticsearch\";\nimport defineFilesEntity from \"~/definitions/filesEntity\";\nimport defineFilesEsEntity from \"~/definitions/filesElasticsearchEntity\";\nimport configurations from \"~/operations/configurations\";\nimport lodashOmit from \"lodash.omit\";\nimport lodashChunk from \"lodash.chunk\";\nimport { decodeCursor, encodeCursor } from \"@webiny/api-elasticsearch/cursors\";\nimport { createElasticsearchBody } from \"~/operations/files/body\";\nimport { transformFromIndex, transformToIndex } from \"~/operations/files/transformers\";\nimport { FileIndexTransformPlugin } from \"~/plugins/FileIndexTransformPlugin\";\nimport { createLimit } from \"@webiny/api-elasticsearch/limit\";\nimport { compress } from \"@webiny/api-elasticsearch/compression\";\n\ninterface FileItem extends File {\n    PK: string;\n    SK: string;\n    TYPE: string;\n}\n\ninterface EsFileItem {\n    PK: string;\n    SK: string;\n    index: string;\n    data: any;\n}\n\ninterface ConstructorParams {\n    context: FileManagerContext;\n}\n\nconst SORT_KEY = \"A\";\n\n/**\n * This is required due to sometimes file data sent is from the DynamoDB and we want to remove the unnecessary stuff.\n */\nconst cleanStorageFile = (file: File & Record<string, any>): File => {\n    return lodashOmit(file, [\"PK\", \"SK\", \"TYPE\", \"created\", \"modified\", \"entity\"]);\n};\n\nexport class FilesStorageOperations implements FileManagerFilesStorageOperations {\n    private readonly context: FileManagerContext;\n    private readonly _table: Table;\n    private readonly _esTable: Table;\n    private readonly _entity: Entity<any>;\n    private readonly _esEntity: Entity<any>;\n    private _esIndex: string;\n\n    private get esIndex(): string {\n        if (!this._esIndex) {\n            const { index: esIndex } = configurations.es(this.context);\n            this._esIndex = esIndex;\n        }\n        return this._esIndex;\n    }\n\n    private get esClient() {\n        const ctx = this.context as any;\n        if (!ctx.elasticsearch) {\n            throw new WebinyError(\n                \"Missing Elasticsearch client on the context.\",\n                \"ELASTICSEARCH_CLIENT_ERROR\"\n            );\n        }\n        return ctx.elasticsearch as Client;\n    }\n\n    private get partitionKeyPrefix(): string {\n        const tenant = this.context.tenancy.getCurrentTenant();\n        const locale = this.context.i18nContent.getLocale();\n        if (!tenant) {\n            throw new WebinyError(\"Tenant missing.\", \"TENANT_NOT_FOUND\");\n        }\n        if (!locale) {\n            throw new Error(\"Locale missing.\");\n        }\n        return `T#${tenant.id}#L#${locale.code}#FM`;\n    }\n\n    public constructor({ context }: ConstructorParams) {\n        this.context = context;\n        this._table = defineTable({\n            context\n        });\n\n        this._entity = defineFilesEntity({\n            context,\n            table: this._table\n        });\n\n        this._esTable = defineEsTable({\n            context\n        });\n\n        this._esEntity = defineFilesEsEntity({\n            context,\n            table: this._esTable\n        });\n    }\n\n    public async get(id: string): Promise<File | null> {\n        try {\n            const file = await this._entity.get({\n                PK: this.getPartitionKey(id),\n                SK: SORT_KEY\n            });\n            if (!file || !file.Item) {\n                return null;\n            }\n            return cleanStorageFile(file.Item);\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not fetch requested file.\",\n                ex.code || \"GET_FILE_ERROR\",\n                {\n                    id\n                }\n            );\n        }\n    }\n\n    public async create(params: FileManagerFilesStorageOperationsCreateParams): Promise<File> {\n        const { file } = params;\n\n        const keys = {\n            PK: this.getPartitionKey(file.id),\n            SK: SORT_KEY\n        };\n        const item: FileItem = {\n            ...keys,\n            TYPE: \"fm.file\",\n            ...file\n        };\n        const esData = await transformToIndex({\n            plugins: this.getFileIndexTransformPlugins(),\n            file\n        });\n        const esCompressedData = await compress(this.context, esData);\n        const esItem: EsFileItem = {\n            ...keys,\n            index: this.esIndex,\n            data: esCompressedData\n        };\n        try {\n            await this._entity.put(item);\n            await this._esEntity.put(esItem);\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not create a new file in the DynamoDB.\",\n                ex.code || \"CREATE_FILE_ERROR\",\n                {\n                    item,\n                    esItem\n                }\n            );\n        }\n\n        return file;\n    }\n\n    public async update({ file }: FileManagerFilesStorageOperationsUpdateParams): Promise<File> {\n        const keys = {\n            PK: this.getPartitionKey(file.id),\n            SK: SORT_KEY\n        };\n\n        const item: FileItem = {\n            ...keys,\n            TYPE: \"fm.file\",\n            ...file\n        };\n        const esData = await transformToIndex({\n            plugins: this.getFileIndexTransformPlugins(),\n            file\n        });\n        const esCompressedData = await compress(this.context, esData);\n        const esItem: EsFileItem = {\n            ...keys,\n            index: this.esIndex,\n            data: esCompressedData\n        };\n        try {\n            await this._entity.put(item);\n            await this._esEntity.put(esItem);\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not update a file in the DynamoDB.\",\n                ex.code || \"UPDATE_FILE_ERROR\",\n                {\n                    item,\n                    esItem\n                }\n            );\n        }\n        return file;\n    }\n\n    public async delete(id: string): Promise<void> {\n        const keys = {\n            PK: this.getPartitionKey(id),\n            SK: SORT_KEY\n        };\n\n        try {\n            await this._table.batchWrite([\n                this._entity.deleteBatch(keys),\n                this._esEntity.deleteBatch(keys)\n            ]);\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not delete file from the DynamoDB.\",\n                ex.code || \"DELETE_FILE_ERROR\",\n                {\n                    id\n                }\n            );\n        }\n    }\n\n    public async createBatch({ files }): Promise<File[]> {\n        const fileChunks = lodashChunk(files, 12);\n\n        for (const fileChunk of fileChunks) {\n            const batches = [];\n            for (const file of fileChunk) {\n                const keys = {\n                    PK: this.getPartitionKey(file.id),\n                    SK: SORT_KEY\n                };\n                batches.push(\n                    this._entity.putBatch({\n                        ...keys,\n                        TYPE: \"fm.file\",\n                        ...file\n                    })\n                );\n                const esCompressedData = await compress(this.context, file);\n                batches.push(\n                    this._esEntity.putBatch({\n                        ...keys,\n                        index: this.esIndex,\n                        data: esCompressedData\n                    })\n                );\n            }\n            try {\n                await this._table.batchWrite(batches);\n            } catch (ex) {\n                throw new WebinyError(\n                    ex.message || \"Could not batch insert a list of files.\",\n                    ex.code || \"BATCH_CREATE_FILES_ERROR\",\n                    {\n                        files: fileChunk,\n                        items: batches\n                    }\n                );\n            }\n        }\n        return files;\n    }\n\n    public async list(\n        params: FileManagerFilesStorageOperationsListParams\n    ): Promise<FileManagerFilesStorageOperationsListResponse> {\n        const { where, limit, after, sort } = params;\n\n        const body = createElasticsearchBody({\n            context: this.context,\n            where,\n            limit,\n            sort,\n            after\n        });\n\n        let response;\n        try {\n            response = await this.esClient.search({\n                ...configurations.es(this.context),\n                body\n            });\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not search for the files.\",\n                ex.code || \"FILE_LIST_ERROR\",\n                {\n                    where,\n                    esBody: body\n                }\n            );\n        }\n        const plugins = this.getFileIndexTransformPlugins();\n        const { hits, total } = response.body.hits;\n        const files = await Promise.all<File>(\n            hits.map(async item => {\n                return await transformFromIndex({\n                    plugins,\n                    file: item._source\n                });\n            })\n        );\n\n        let hasMoreItems = false;\n        if (files.length > limit) {\n            files.pop();\n            hasMoreItems = true;\n        }\n\n        const meta = {\n            hasMoreItems,\n            totalCount: total.value,\n            cursor: files.length > 0 ? encodeCursor(hits[files.length - 1].sort) : null\n        };\n\n        return [files, meta];\n    }\n    public async tags(\n        params: FileManagerFilesStorageOperationsTagsParams\n    ): Promise<FileManagerFilesStorageOperationsTagsResponse> {\n        const { where, limit: initialLimit } = params;\n\n        const esDefaults = configurations.es(this.context);\n\n        const must: any[] = [];\n        if (where.locale) {\n            must.push({ term: { \"locale.keyword\": where.locale } });\n        }\n\n        // When ES index is shared between tenants, we need to filter records by tenant ID\n        const sharedIndex = process.env.ELASTICSEARCH_SHARED_INDEXES === \"true\";\n        if (sharedIndex) {\n            const tenant = this.context.tenancy.getCurrentTenant();\n            must.push({ term: { \"tenant.keyword\": tenant.id } });\n        }\n\n        const limit = createLimit(initialLimit);\n\n        const body = {\n            query: {\n                bool: {\n                    must\n                }\n            },\n            size: limit + 1,\n            aggs: {\n                listTags: {\n                    terms: { field: \"tags.keyword\" }\n                }\n            },\n            search_after: decodeCursor(null)\n        };\n\n        let response = undefined;\n\n        try {\n            response = await this.esClient.search({\n                ...esDefaults,\n                body\n            });\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Error in the Elasticsearch query.\",\n                ex.code || \"ELASTICSEARCH_ERROR\",\n                {\n                    body\n                }\n            );\n        }\n\n        const tags = response.body.aggregations.listTags.buckets.map(item => item.key) || [];\n\n        let hasMoreItems = false;\n        const totalCount = tags.length;\n        if (totalCount > limit + 1) {\n            tags.pop();\n            hasMoreItems = true;\n        }\n\n        const meta = {\n            hasMoreItems,\n            totalCount,\n            cursor: null //tags.length > 0 ? encodeCursor(hits[files.length - 1].sort) : null\n        };\n\n        return [tags, meta];\n    }\n\n    /**\n     * Create the partition key for the file.\n     */\n    private getPartitionKey(id: string): string {\n        return `${this.partitionKeyPrefix}#F#${id}`;\n    }\n\n    private getFileIndexTransformPlugins(): FileIndexTransformPlugin[] {\n        return this.context.plugins.byType<FileIndexTransformPlugin>(FileIndexTransformPlugin.type);\n    }\n}\n"],"file":"FilesStorageOperations.js"}