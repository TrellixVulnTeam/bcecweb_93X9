{"version":3,"sources":["../../../src/upgrades/v5.0.0/index.ts"],"names":["plugin","name","type","app","version","apply","elasticsearch","fileManager","db","limit","hasMoreItems","after","undefined","esItems","response","search","index","body","sort","createdOn","order","unmapped_type","size","hits","length","filter","item","_id","includes","console","log","esJSON","JSON","stringify","file","storage","storagePlugin","upload","buffer","Buffer","from","key","items","batch","create","map","configurations","esDb","data","PK","_source","locale","id","SK","_index","savedOn","Date","toISOString","execute","operations","delete","errors","bulk","filter_path","warn"],"mappings":"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","sourcesContent":["import { UpgradePlugin } from \"@webiny/api-upgrade/types\";\nimport { paginateBatch } from \"../utils\";\nimport configurations from \"~/operations/configurations\";\nimport { FileManagerContext } from \"@webiny/api-file-manager/types\";\nimport { ElasticsearchContext } from \"@webiny/api-elasticsearch/types\";\nimport { DbContext } from \"@webiny/handler-db/types\";\n\nconst plugin: UpgradePlugin<FileManagerContext & ElasticsearchContext & DbContext> = {\n    name: \"api-upgrade-file-manager\",\n    type: \"api-upgrade\",\n    app: \"file-manager\",\n    version: \"5.0.0\",\n    async apply({ elasticsearch, fileManager, db }) {\n        const limit = 1000;\n        let hasMoreItems = true;\n        let after = undefined;\n        let esItems = [];\n\n        while (hasMoreItems) {\n            const response = await elasticsearch.search({\n                index: \"root-file-manager\",\n                body: {\n                    sort: {\n                        createdOn: {\n                            order: \"asc\",\n                            // eslint-disable-next-line\n                            unmapped_type: \"date\"\n                        }\n                    },\n                    size: limit + 1,\n                    after\n                }\n            });\n            const { hits } = response.body.hits;\n\n            hasMoreItems = hits.length > limit;\n            after = hasMoreItems ? hits[limit - 1].sort : undefined;\n            esItems = [...esItems, ...hits.filter(item => !item._id.includes(\"T#root#\"))];\n        }\n\n        console.log(`Fetched ${esItems.length} items from Elasticsearch`);\n        if (esItems.length === 0) {\n            return;\n        }\n\n        // Store a backup of old items\n        const esJSON = JSON.stringify(esItems);\n\n        const { file } = await fileManager.storage.storagePlugin.upload({\n            name: \"upgrade-file-manager-es-5.0.0.json\",\n            type: \"application/json\",\n            size: esJSON.length,\n            buffer: Buffer.from(esJSON)\n        });\n\n        console.log(`Stored backup of Elasticsearch items to ${file.key}`);\n\n        // Store items to ES DDB table\n        await paginateBatch(esItems, 25, async items => {\n            await db\n                .batch()\n                .create(\n                    ...items.map(item => ({\n                        ...configurations.esDb,\n                        data: {\n                            PK: `T#root#L#${item._source.locale}#FM#F#${item._source.id}`,\n                            SK: \"A\",\n                            index: item._index,\n                            data: item._source,\n                            savedOn: new Date().toISOString(),\n                            version: \"5.0.0\"\n                        }\n                    }))\n                )\n                .execute();\n        });\n\n        console.log(`Inserted items into Elasticsearch DynamoDB table.`);\n\n        // Delete original items from ES index\n        const operations = esItems.map(item => {\n            return { delete: { _id: item._id, _index: item._index } };\n        });\n\n        const {\n            body: { items, errors }\n        } = await elasticsearch.bulk({\n            body: operations,\n            // eslint-disable-next-line\n            filter_path: \"errors,items.*.error\"\n        });\n\n        console.log(`Deleted old Elasticsearch items from \"root-file-manager\" index.`);\n\n        if (errors) {\n            console.warn(\"These items were not deleted\", items);\n        }\n    }\n};\n\nexport default plugin;\n\n// Target _id: T#root#L#en-US#FM#F#603e248212ee4400089d16eb:A\n\n// const record = {\n//     _index: \"root-file-manager\",\n//     _type: \"_doc\",\n//     _id: \"6040a6e2a6180e00085d168a\",\n//     _score: 1.0,\n//     _source: {\n//         id: \"6040a6e2a6180e00085d168a\",\n//         createdOn: \"2021-03-04T09:22:42.029Z\",\n//         key: \"8klunupd0-004.jpg\",\n//         size: 412963,\n//         type: \"image/jpeg\",\n//         name: \"8klunupd0-004.jpg\",\n//         tags: null,\n//         createdBy: {\n//             id: \"admin@webiny.com\",\n//             displayName: \"Pavel Denisjuk\",\n//             type: \"admin\"\n//         },\n//         meta: {\n//             private: false\n//         },\n//         locale: \"en-US\"\n//     }\n// };\n"],"file":"index.js"}