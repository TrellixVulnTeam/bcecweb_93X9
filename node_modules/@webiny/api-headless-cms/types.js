"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CONTENT_ENTRY_STATUS = void 0;

/**
 * @description This combines all contexts used in the CMS into a single one.
 *
 * @category Context
 */

/**
 * Object containing content model field predefined options and values.
 *
 * @category ContentModelField
 */

/**
 * Object containing content model field renderer options.
 *
 * @category ContentModelField
 */

/**
 * A definition for content model field. This type exists on the app side as well.
 *
 * @category ContentModelField
 * @category Database model
 */

/**
 * A definition for dateTime field to show possible type of the field in settings.
 */

/**
 * Arguments for the field validator validate method.
 *
 * @category ContentModelField
 * @category FieldValidation
 */

/**
 * Definition for the field validator.
 *
 * @category Plugin
 * @category ContentModelField
 * @category FieldValidation
 */

/**
 * A pattern validator for the content entry field value.
 *
 * @category Plugin
 * @category ContentModelField
 * @category FieldValidation
 */

/**
 * Locked field in the content model
 *
 * @see CmsContentModel.lockedFields
 *
 * @category ContentModelField
 */

/**
 * Content model defining an entry.
 *
 * @category Database model
 * @category ContentModel
 */

/**
 * @category ContentModelField
 */

/**
 * @category Plugin
 * @category ContentModelField
 * @category GraphQL
 */

/**
 * Check for content model locked field.
 * A custom plugin definable by the user.
 *
 * @category ContentModel
 * @category Plugin
 */

/**
 * @category ContentModelField
 */

/**
 * A interface describing the reference to a user that created some data in the database.
 *
 * @category General
 */

/**
 * Representation of settings database model.
 *
 * @category Database model
 */

/**
 * Settings CRUD in context.
 *
 * @category Context
 */

/**
 * A GraphQL args.data parameter received when creating content model group.
 *
 * @category ContentModelGroup
 * @category GraphQL args
 */

/**
 * A GraphQL args.data parameter received when updating content model group.
 *
 * @category ContentModelGroup
 * @category GraphQL args
 */

/**
 * A representation of content model group in the database.
 *
 * @category ContentModelGroup
 * @category Database model
 */

/**
 * A data.where parameter received when listing content model groups.
 *
 * @category ContentModelGroup
 * @category GraphQL args
 */

/**
 * Content model group in context.
 *
 * @category Context
 * @category ContentModelGroup
 */

/**
 * Definition for content model field validator.
 *
 * @category ContentModelField
 * @category FieldValidation
 */

/**
 * A GraphQL args.data parameter received when creating content model.
 *
 * @category GraphQL args
 * @category ContentModel
 */

/**
 * A definition for content model field received from the user.
 *
 * Input type for `CmsContentModelField`.
 * @see CmsContentModelField
 *
 * @category GraphQL args
 * @category ContentModelField
 */

/**
 * A GraphQL args.data parameter received when updating content model.
 *
 * @category GraphQL args
 * @category ContentModel
 */

/**
 * A plugin to load a CmsContentModelManager.
 *
 * @see CmsContentModelManager
 *
 * @category Plugin
 * @category ContentModel
 * @category ContentEntry
 */

/**
 * A content entry definition for and from the database.
 *
 * @category Database model
 * @category ContentEntry
 */

/**
 * A definition for content model manager to be used in the code.
 * The default one uses `CmsContentEntryContext` methods internally, but devs can change to what every they want.
 *
 * @see CmsContentEntryContext
 *
 * @category Context
 * @category ContentEntry
 * @category ContentModel
 */

/**
 * Content model in the context.
 *
 * @category Context
 * @category ContentModel
 */

/**
 * Available statuses for content entry.
 *
 * @category ContentEntry
 */

/**
 * Entry listing where args.
 *
 * @category ContentEntry
 * @category GraphQL args
 */

/**
 * Entry listing sort.
 *
 * @category ContentEntry
 * @category GraphQL args
 */

/**
 * Get entry GraphQL resolver args.
 *
 * @category ContentEntry
 * @category GraphQL args
 */

/**
 * List entries GraphQL resolver args.
 *
 * @category ContentEntry
 * @category GraphQL args
 */

/**
 * Meta information for GraphQL output.
 *
 * @category ContentEntry
 * @category GraphQL output
 */

/**
 * Content entry CRUD methods in the context.
 *
 * @category Context
 * @category ContentEntry
 */

/**
 * A cms part of the context that has all the CRUD operations.
 *
 * @category Context
 */

/**
 * Parameters for ContentEntryResolverFactory.
 *
 * @category GraphQL resolver
 * @category ContentEntry
 */

/**
 * A type for ContentEntryResolvers. Used when creating get, list, update, publish, ...etc.
 *
 * @category GraphQL resolver
 * @category ContentEntry
 */

/**
 * Settings security permission.
 *
 * @category SecurityPermission
 */
// eslint-disable-line

/**
 * A security permission for content model.
 *
 * @category SecurityPermission
 * @category ContentModel
 */

/**
 * The security permission for content model groups.
 *
 * @category SecurityPermission
 * @category ContentModelGroup
 */

/**
 * The security permission for content entry.
 *
 * @category SecurityPermission
 * @category ContentEntry
 */

/**
 * A argument definition for CmsModelFieldToStoragePlugin.toStorage
 *
 * @see CmsModelFieldToStoragePlugin.toStorage
 *
 * @category Plugin
 * @category ContentModelField
 * @category Storage
 */

/**
 * A argument definition for CmsModelFieldToStoragePlugin.fromStorage
 *
 * @see CmsModelFieldToStoragePlugin.fromStorage
 *
 * @category Plugin
 * @category ContentModelField
 * @category Storage
 */

/**
 * A plugin defining transformation of field value to and from storage.
 *
 * @category Plugin
 * @category ContentModelField
 * @category ContentEntry
 * @category Storage
 */

/**
 * @category LifecycleHook
 * @category ContentModel
 */

/**
 * @category LifecycleHook
 * @category ContentModel
 */

/**
 * @category LifecycleHook
 * @category ContentModel
 */

/**
 * A plugin type that defines lifecycle hooks for content model.
 *
 * @category Plugin
 * @category ContentModel
 * @category LifecycleHook
 */

/**
 * @category ContentEntry
 * @category LifecycleHook
 */

/**
 * @category ContentEntry
 * @category LifecycleHook
 */

/**
 * @category ContentEntry
 * @category LifecycleHook
 */

/**
 * @category ContentEntry
 * @category LifecycleHook
 */

/**
 * @category ContentEntry
 * @category LifecycleHook
 */

/**
 * @category ContentEntry
 * @category LifecycleHook
 */

/**
 * @category ContentEntry
 * @category LifecycleHook
 */

/**
 * @category ContentEntry
 * @category LifecycleHook
 */

/**
 * @category ContentEntry
 * @category LifecycleHook
 */

/**
 * @category ContentEntry
 * @category LifecycleHook
 */

/**
 * @category ContentEntry
 * @category LifecycleHook
 */

/**
 * @category ContentEntry
 * @category LifecycleHook
 */

/**
 * @category ContentEntry
 * @category LifecycleHook
 */

/**
 * @category ContentEntry
 * @category LifecycleHook
 */

/**
 * @category ContentEntry
 * @category LifecycleHook
 */

/**
 * @category ContentEntry
 * @category LifecycleHook
 */

/**
 * @category ContentEntry
 * @category LifecycleHook
 */

/**
 * @category ContentEntry
 * @category LifecycleHook
 */

/**
 * @category ContentEntry
 * @category LifecycleHook
 */

/**
 * A plugin type that defines lifecycle hooks for content entry.
 *
 * @category Plugin
 * @category ContentEntry
 * @category LifecycleHook
 */

/**
 * Arguments for the group storage operations provider method.
 */

/**
 * A plugin that provides the group storage operations implementation.
 */

/**
 * Description of the ContentModelGroup CRUD operations.
 * If user wants to add another database to the application, this is how it is done.
 * This is just plain read, update, write, delete and list - no authentication or permission checks.
 */

/**
 * Arguments for the model storage operations provider method.
 */

/**
 * A plugin that provides the model storage operations implementation.
 */

/**
 * Description of the ContentModel storage operations.
 * If user wants to add another database to the application, this is how it is done.
 * This is just plain read, update, write, delete and list - no authentication or permission checks.
 */

/**
 * Arguments for the entry storage provider method.
 */

/**
 * A plugin that provides the entry storage operations implementation.
 */

/**
 * Description of the ContentModel storage operations.
 * If user wants to add another database to the application, this is how it is done.
 * This is just plain read, update, write, delete and list - no authentication or permission checks.
 *
 *
 * @category StorageOperations
 * @category ContentEntry
 */
let CONTENT_ENTRY_STATUS;
exports.CONTENT_ENTRY_STATUS = CONTENT_ENTRY_STATUS;

(function (CONTENT_ENTRY_STATUS) {
  CONTENT_ENTRY_STATUS["DRAFT"] = "draft";
  CONTENT_ENTRY_STATUS["PUBLISHED"] = "published";
  CONTENT_ENTRY_STATUS["UNPUBLISHED"] = "unpublished";
  CONTENT_ENTRY_STATUS["CHANGES_REQUESTED"] = "changesRequested";
  CONTENT_ENTRY_STATUS["REVIEW_REQUESTED"] = "reviewRequested";
})(CONTENT_ENTRY_STATUS || (exports.CONTENT_ENTRY_STATUS = CONTENT_ENTRY_STATUS = {}));
//# sourceMappingURL=types.js.map