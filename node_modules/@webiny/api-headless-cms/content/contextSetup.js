"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _error = _interopRequireDefault(require("@webiny/error"));

var _ContextPlugin = require("@webiny/handler/plugins/ContextPlugin");

const extractHandlerHttpParameters = context => {
  var _context$http, _context$http$request, _context$http$request2;

  const {
    key = ""
  } = ((_context$http = context.http) === null || _context$http === void 0 ? void 0 : (_context$http$request = _context$http.request) === null || _context$http$request === void 0 ? void 0 : (_context$http$request2 = _context$http$request.path) === null || _context$http$request2 === void 0 ? void 0 : _context$http$request2.parameters) || {};
  const [type, locale] = key.split("/");

  if (!type) {
    throw new _error.default(`Missing context.http.request.path parameter "type".`);
  } else if (!locale) {
    throw new _error.default(`Missing context.http.request.path parameter "locale".`);
  }

  return {
    type,
    locale
  };
};

var _default = () => {
  return new _ContextPlugin.ContextPlugin(async context => {
    var _context$http2, _context$http2$reques;

    if (((_context$http2 = context.http) === null || _context$http2 === void 0 ? void 0 : (_context$http2$reques = _context$http2.request) === null || _context$http2$reques === void 0 ? void 0 : _context$http2$reques.method) === "OPTIONS") {
      return;
    } else if (context.cms) {
      throw new _error.default("Context setup plugin must be first to be registered. Cannot have anything before it.", "CMS_CONTEXT_INITIALIZED_ERROR");
    }

    const {
      type,
      locale
    } = extractHandlerHttpParameters(context);
    const systemLocale = context.i18n.getLocale(locale);

    if (!systemLocale) {
      throw new _error.default(`There is no locale "${locale}" in the system.`);
    }

    context.cms = {
      type,
      locale,
      getLocale: () => systemLocale,
      READ: type === "read",
      PREVIEW: type === "preview",
      MANAGE: type === "manage"
    };
  });
};

exports.default = _default;
//# sourceMappingURL=contextSetup.js.map