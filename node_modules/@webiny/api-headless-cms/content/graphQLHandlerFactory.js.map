{"version":3,"sources":["../../src/content/graphQLHandlerFactory.ts"],"names":["DEFAULT_HEADERS","respond","http","result","response","body","JSON","stringify","statusCode","headers","schemaList","Map","generateCacheKey","args","context","locale","type","lastModelChange","cms","settings","getContentModelLastChange","code","toISOString","join","generateSchema","plugins","register","typeDefs","resolvers","schemaPlugins","byType","GraphQLSchemaPlugin","pl","push","schema","getSchema","tenantId","tenancy","getCurrentTenant","id","cacheKey","has","set","key","cache","get","checkEndpointAccess","permission","security","getPermission","NotAuthorizedError","data","reason","graphQLHandlerFactory","options","debug","name","handle","next","request","path","parameters","method","ex","NotAuthorizedResponse","getLocale","parse"],"mappings":"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","sourcesContent":["import { boolean } from \"boolean\";\nimport { GraphQLSchema } from \"graphql\";\nimport { makeExecutableSchema } from \"@graphql-tools/schema\";\nimport { CmsContext } from \"../types\";\nimport { I18NLocale } from \"@webiny/api-i18n/types\";\nimport { NotAuthorizedError, NotAuthorizedResponse } from \"@webiny/api-security\";\nimport { PluginCollection } from \"@webiny/plugins/types\";\nimport debugPlugins from \"@webiny/handler-graphql/debugPlugins\";\nimport processRequestBody from \"@webiny/handler-graphql/processRequestBody\";\nimport buildSchemaPlugins from \"./plugins/buildSchemaPlugins\";\nimport { GraphQLSchemaPlugin } from \"@webiny/handler-graphql/plugins\";\n\ninterface CreateGraphQLHandlerOptions {\n    debug?: boolean;\n}\ninterface SchemaCache {\n    key: string;\n    schema: GraphQLSchema;\n}\ninterface Args {\n    context: CmsContext;\n    type: string;\n    locale: I18NLocale;\n}\ninterface ParsedBody {\n    query: string;\n    variables: any;\n    operationName: string;\n}\n\nconst DEFAULT_HEADERS = {\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Access-Control-Allow-Headers\": \"*\",\n    \"Access-Control-Allow-Methods\": \"OPTIONS,POST\",\n    \"Content-Type\": \"application/json\"\n};\n\nconst respond = (http, result: unknown) => {\n    return http.response({\n        body: JSON.stringify(result),\n        statusCode: 200,\n        headers: DEFAULT_HEADERS\n    });\n};\nconst schemaList = new Map<string, SchemaCache>();\n\nconst generateCacheKey = async (args: Args): Promise<string> => {\n    const { context, locale, type } = args;\n    const lastModelChange = await context.cms.settings.getContentModelLastChange();\n    return [locale.code, type, lastModelChange.toISOString()].join(\"#\");\n};\n\nconst generateSchema = async (args: Args): Promise<GraphQLSchema> => {\n    const { context } = args;\n\n    context.plugins.register(await buildSchemaPlugins(context));\n\n    const typeDefs = [];\n    const resolvers = [];\n\n    // Get schema definitions from plugins\n    const schemaPlugins = context.plugins.byType<GraphQLSchemaPlugin>(GraphQLSchemaPlugin.type);\n    for (const pl of schemaPlugins) {\n        typeDefs.push(pl.schema.typeDefs);\n        resolvers.push(pl.schema.resolvers);\n    }\n\n    return makeExecutableSchema({\n        typeDefs,\n        resolvers\n    });\n};\n\n// gets an existing schema or rewrites existing one or creates a completely new one\n// depending on the schemaId created from type and locale parameters\nconst getSchema = async (args: Args): Promise<GraphQLSchema> => {\n    const { context, type, locale } = args;\n    const tenantId = context.tenancy.getCurrentTenant().id;\n    const id = `${tenantId}#${type}#${locale.code}`;\n\n    const cacheKey = await generateCacheKey(args);\n    if (!schemaList.has(id)) {\n        const schema = await generateSchema(args);\n\n        schemaList.set(id, {\n            key: cacheKey,\n            schema\n        });\n        return schema;\n    }\n    const cache = schemaList.get(id);\n    if (cache.key === cacheKey) {\n        return cache.schema;\n    }\n    const schema = await generateSchema(args);\n    schemaList.set(id, {\n        key: cacheKey,\n        schema\n    });\n    return schema;\n};\n\nconst checkEndpointAccess = async (context: CmsContext): Promise<void> => {\n    const permission = await context.security.getPermission(`cms.endpoint.${context.cms.type}`);\n    if (!permission) {\n        throw new NotAuthorizedError({\n            data: {\n                reason: `Not allowed to access \"${context.cms.type}\" endpoint.`\n            }\n        });\n    }\n};\n\nexport const graphQLHandlerFactory = (\n    options: CreateGraphQLHandlerOptions = {}\n): PluginCollection => {\n    const debug = boolean(options.debug);\n\n    return [\n        ...(debug ? debugPlugins() : []),\n        {\n            type: \"handler\",\n            name: \"handler-graphql-content-model\",\n            async handle(context: CmsContext, next) {\n                const { http } = context;\n\n                if (!http || !http.request || !http.request.path || !http.request.path.parameters) {\n                    return next();\n                }\n\n                if (http.request.method === \"OPTIONS\") {\n                    return http.response({\n                        statusCode: 204,\n                        headers: DEFAULT_HEADERS\n                    });\n                }\n\n                if (http.request.method !== \"POST\") {\n                    return next();\n                }\n\n                try {\n                    await checkEndpointAccess(context);\n                } catch (ex) {\n                    return respond(http, new NotAuthorizedResponse(ex));\n                }\n\n                const schema = await getSchema({\n                    context,\n                    locale: context.cms.getLocale(),\n                    type: context.cms.type\n                });\n\n                const body: ParsedBody | ParsedBody[] = JSON.parse(http.request.body);\n\n                const result = await processRequestBody(body, schema, context);\n                return respond(http, result);\n            }\n        }\n    ];\n};\n"],"file":"graphQLHandlerFactory.js"}