{"version":3,"sources":["../../../../src/content/plugins/storage/object.ts"],"names":["processValue","fields","sourceValue","getStoragePlugin","context","model","operation","values","field","plugin","type","value","fieldId","name","fieldType","fromStorage","settings","multipleValues","toStorage","mValues"],"mappings":"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","sourcesContent":["import pReduce from \"p-reduce\";\nimport pMap from \"p-map\";\nimport {\n    CmsContentModel,\n    CmsContentModelField,\n    CmsContext,\n    CmsModelFieldToStoragePlugin\n} from \"~/types\";\n\ninterface ProcessValue {\n    (params: {\n        fields: CmsContentModelField[];\n        sourceValue: Record<string, any>;\n        getStoragePlugin: (fieldType: string) => CmsModelFieldToStoragePlugin;\n        context: CmsContext;\n        model: CmsContentModel;\n        operation: string;\n    }): Promise<Record<string, any>>;\n}\n\nconst processValue: ProcessValue = async ({\n    fields,\n    sourceValue,\n    getStoragePlugin,\n    context,\n    model,\n    operation\n}) => {\n    return await pReduce(\n        fields,\n        async (values, field) => {\n            const plugin = getStoragePlugin(field.type);\n            const value = await plugin[operation]({\n                context,\n                model,\n                field,\n                value: sourceValue[field.fieldId],\n                getStoragePlugin\n            });\n            return { ...values, [field.fieldId]: value };\n        },\n        {}\n    );\n};\n\nexport default (): CmsModelFieldToStoragePlugin => ({\n    type: \"cms-model-field-to-storage\",\n    name: \"cms-model-field-to-storage-object\",\n    fieldType: \"object\",\n    async fromStorage({ field, value, getStoragePlugin, context, model }) {\n        if (!value) {\n            return null;\n        }\n\n        const fields = field.settings.fields as CmsContentModelField[];\n\n        if (field.multipleValues) {\n            return pMap(value as Record<string, any>[], value =>\n                processValue({\n                    sourceValue: value,\n                    getStoragePlugin,\n                    model,\n                    context,\n                    operation: \"fromStorage\",\n                    fields\n                })\n            );\n        }\n\n        return processValue({\n            sourceValue: value,\n            getStoragePlugin,\n            model,\n            context,\n            operation: \"fromStorage\",\n            fields\n        });\n    },\n    async toStorage({ field, value, getStoragePlugin, model, context }) {\n        if (!value) {\n            return null;\n        }\n\n        const fields = field.settings.fields as CmsContentModelField[];\n\n        if (field.multipleValues) {\n            const mValues = await pMap(value as Record<string, any>[], value =>\n                processValue({\n                    sourceValue: value,\n                    getStoragePlugin,\n                    model,\n                    context,\n                    operation: \"toStorage\",\n                    fields\n                })\n            );\n\n            return mValues;\n        }\n\n        return processValue({\n            sourceValue: value,\n            getStoragePlugin,\n            model,\n            context,\n            operation: \"toStorage\",\n            fields\n        });\n    }\n});\n"],"file":"object.js"}