"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _pReduce = _interopRequireDefault(require("p-reduce"));

var _pMap = _interopRequireDefault(require("p-map"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const processValue = async ({
  fields,
  sourceValue,
  getStoragePlugin,
  context,
  model,
  operation
}) => {
  return await (0, _pReduce.default)(fields, async (values, field) => {
    const plugin = getStoragePlugin(field.type);
    const value = await plugin[operation]({
      context,
      model,
      field,
      value: sourceValue[field.fieldId],
      getStoragePlugin
    });
    return _objectSpread(_objectSpread({}, values), {}, {
      [field.fieldId]: value
    });
  }, {});
};

var _default = () => ({
  type: "cms-model-field-to-storage",
  name: "cms-model-field-to-storage-object",
  fieldType: "object",

  async fromStorage({
    field,
    value,
    getStoragePlugin,
    context,
    model
  }) {
    if (!value) {
      return null;
    }

    const fields = field.settings.fields;

    if (field.multipleValues) {
      return (0, _pMap.default)(value, value => processValue({
        sourceValue: value,
        getStoragePlugin,
        model,
        context,
        operation: "fromStorage",
        fields
      }));
    }

    return processValue({
      sourceValue: value,
      getStoragePlugin,
      model,
      context,
      operation: "fromStorage",
      fields
    });
  },

  async toStorage({
    field,
    value,
    getStoragePlugin,
    model,
    context
  }) {
    if (!value) {
      return null;
    }

    const fields = field.settings.fields;

    if (field.multipleValues) {
      const mValues = await (0, _pMap.default)(value, value => processValue({
        sourceValue: value,
        getStoragePlugin,
        model,
        context,
        operation: "toStorage",
        fields
      }));
      return mValues;
    }

    return processValue({
      sourceValue: value,
      getStoragePlugin,
      model,
      context,
      operation: "toStorage",
      fields
    });
  }

});

exports.default = _default;
//# sourceMappingURL=object.js.map