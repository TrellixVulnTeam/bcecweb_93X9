"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createManageSDL = void 0;

var _createTypeName = require("../utils/createTypeName");

var _renderInputFields = require("../utils/renderInputFields");

var _renderSortEnum = require("../utils/renderSortEnum");

var _renderFields = require("../utils/renderFields");

var _renderListFilterFields = require("../utils/renderListFilterFields");

var _renderGetFilterFields = require("../utils/renderGetFilterFields");

var _pluralizedTypeName = require("../utils/pluralizedTypeName");

const createManageSDL = ({
  model,
  fieldTypePlugins
}) => {
  const typeName = (0, _createTypeName.createTypeName)(model.modelId);
  const mTypeName = (0, _createTypeName.createManageTypeName)(typeName);
  const listFilterFieldsRender = (0, _renderListFilterFields.renderListFilterFields)({
    model,
    type: "manage",
    fieldTypePlugins
  });
  const sortEnumRender = (0, _renderSortEnum.renderSortEnum)({
    model,
    fieldTypePlugins
  });
  const getFilterFieldsRender = (0, _renderGetFilterFields.renderGetFilterFields)({
    model,
    fieldTypePlugins
  });
  const inputFields = (0, _renderInputFields.renderInputFields)({
    model,
    fieldTypePlugins
  });
  const fields = (0, _renderFields.renderFields)({
    model,
    type: "manage",
    fieldTypePlugins
  });
  return (
    /* GraphQL */
    `
        """${model.description}"""
        ${fields.map(f => f.typeDefs).filter(Boolean).join("\n")}

        type ${mTypeName} {
            id: ID!
            entryId: String!
            createdOn: DateTime!
            savedOn: DateTime!
            createdBy: CmsCreatedBy!
            ownedBy: CmsOwnedBy!
            meta: ${mTypeName}Meta
            ${fields.map(f => f.fields).join("\n")}
        }

        type ${mTypeName}Meta {
            modelId: String
            version: Int
            locked: Boolean
            publishedOn: DateTime
            status: String
            """
            CAUTION: this field is resolved by making an extra query to DB. 
            RECOMMENDATION: Use it only with "get" queries (avoid in "list") 
            """
            revisions: [${mTypeName}]
            title: String
        }
        
                    
        ${inputFields.map(f => f.typeDefs).filter(Boolean).join("\n")}

        ${inputFields && `input ${mTypeName}Input {
            ${inputFields.map(f => f.fields).join("\n")}
        }`}

        ${getFilterFieldsRender && `input ${mTypeName}GetWhereInput {
            ${getFilterFieldsRender}
        }`}


        ${listFilterFieldsRender && `input ${mTypeName}ListWhereInput {
            ${listFilterFieldsRender}
        }`}

        type ${mTypeName}Response {
            data: ${mTypeName}
            error: CmsError
        }
        
        type ${mTypeName}ArrayResponse {
            data: [${mTypeName}]
            error: CmsError
        }

        type ${mTypeName}ListResponse {
            data: [${mTypeName}]
            meta: CmsListMeta
            error: CmsError
        }

        ${sortEnumRender && `enum ${mTypeName}ListSorter {
            ${sortEnumRender}
        }`}

        extend type Query {
            get${typeName}(revision: ID!): ${mTypeName}Response
            
            get${typeName}Revisions(id: ID!): ${mTypeName}ArrayResponse
            
            get${(0, _pluralizedTypeName.pluralizedTypeName)(typeName)}ByIds(revisions: [ID!]!): ${mTypeName}ArrayResponse

            list${(0, _pluralizedTypeName.pluralizedTypeName)(typeName)}(
                where: ${mTypeName}ListWhereInput
                sort: [${mTypeName}ListSorter]
                limit: Int
                after: String
            ): ${mTypeName}ListResponse
        }

        extend type Mutation{
            create${typeName}(data: ${mTypeName}Input!): ${mTypeName}Response

            create${typeName}From(revision: ID!, data: ${mTypeName}Input): ${mTypeName}Response

            update${typeName}(revision: ID!, data: ${mTypeName}Input!): ${mTypeName}Response

            delete${typeName}(revision: ID!): CmsDeleteResponse

            publish${typeName}(revision: ID!): ${mTypeName}Response

            unpublish${typeName}(revision: ID!): ${mTypeName}Response
            
            request${typeName}Review(revision: ID!): ${mTypeName}Response
            
            request${typeName}Changes(revision: ID!): ${mTypeName}Response
        }
    `
  );
};

exports.createManageSDL = createManageSDL;
//# sourceMappingURL=createManageSDL.js.map