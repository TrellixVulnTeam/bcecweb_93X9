"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _handlerGraphql = require("@webiny/handler-graphql");

var _GraphQLSchemaPlugin = require("@webiny/handler-graphql/plugins/GraphQLSchemaPlugin");

var _ContentModelPlugin = require("../ContentModelPlugin");

const plugin = context => {
  const resolvers = {
    Query: {
      getContentModel: async (_, args, context) => {
        try {
          const model = await context.cms.models.get(args.modelId);
          return new _handlerGraphql.Response(model);
        } catch (e) {
          return new _handlerGraphql.ErrorResponse(e);
        }
      },
      listContentModels: async (_, __, context) => {
        try {
          const model = await context.cms.models.list();
          return new _handlerGraphql.Response(model);
        } catch (e) {
          return new _handlerGraphql.ErrorResponse(e);
        }
      }
    },
    CmsContentModel: {
      plugin: async (model, args, context) => {
        const modelPlugin = context.plugins.byType(_ContentModelPlugin.ContentModelPlugin.type).find(item => item.contentModel.modelId === model.modelId);
        return Boolean(modelPlugin);
      }
    }
  };
  let manageSchema = "";

  if (context.cms.MANAGE) {
    resolvers.Mutation = {
      createContentModel: async (_, args, context) => {
        try {
          const model = await context.cms.models.create(args.data);
          return new _handlerGraphql.Response(model);
        } catch (e) {
          return new _handlerGraphql.ErrorResponse(e);
        }
      },
      updateContentModel: async (_, args, context) => {
        const {
          modelId,
          data
        } = args;

        try {
          const model = await context.cms.models.update(modelId, data);
          return new _handlerGraphql.Response(model);
        } catch (e) {
          return new _handlerGraphql.ErrorResponse(e);
        }
      },
      deleteContentModel: async (_, args, context) => {
        const {
          modelId
        } = args;

        try {
          await context.cms.models.delete(modelId);
          return new _handlerGraphql.Response(true);
        } catch (e) {
          return new _handlerGraphql.ErrorResponse(e);
        }
      }
    };
    manageSchema =
    /* GraphQL */
    `
            input CmsPredefinedValueInput {
                label: String!
                value: String!
            }

            input CmsPredefinedValuesInput {
                enabled: Boolean
                values: [CmsPredefinedValueInput]
            }
            input CmsFieldRendererInput {
                name: String
            }

            input CmsFieldValidationInput {
                name: String!
                message: String
                settings: JSON
            }

            input CmsContentModelFieldInput {
                id: ID!
                label: String!
                helpText: String
                placeholderText: String
                fieldId: String!
                type: String!
                multipleValues: Boolean
                predefinedValues: CmsPredefinedValuesInput
                renderer: CmsFieldRendererInput
                validation: [CmsFieldValidationInput]
                listValidation: [CmsFieldValidationInput]
                settings: JSON
            }

            input CmsContentModelCreateInput {
                name: String!
                modelId: String
                group: RefInput!
                description: String
            }

            input CmsContentModelUpdateInput {
                name: String
                group: RefInput
                description: String
                layout: [[ID!]!]!
                fields: [CmsContentModelFieldInput!]!
                titleFieldId: String
            }

            extend type Mutation {
                createContentModel(data: CmsContentModelCreateInput!): CmsContentModelResponse

                updateContentModel(
                    modelId: ID!
                    data: CmsContentModelUpdateInput!
                ): CmsContentModelResponse

                deleteContentModel(modelId: ID!): CmsDeleteResponse
            }
        `;
  }

  return new _GraphQLSchemaPlugin.GraphQLSchemaPlugin({
    typeDefs:
    /* GraphQL */
    `
            type CmsFieldValidation {
                name: String!
                message: String
                settings: JSON
            }

            type CmsFieldRenderer {
                name: String
            }

            type CmsPredefinedValue {
                label: String
                value: String
            }

            type CmsPredefinedValues {
                enabled: Boolean
                values: [CmsPredefinedValue]
            }

            type CmsContentModelField {
                id: ID!
                fieldId: String!
                label: String!
                helpText: String
                placeholderText: String
                type: String!
                multipleValues: Boolean
                predefinedValues: CmsPredefinedValues
                renderer: CmsFieldRenderer
                validation: [CmsFieldValidation!]
                listValidation: [CmsFieldValidation!]
                settings: JSON
            }

            type CmsContentModel {
                name: String!
                modelId: String!
                description: String
                group: CmsContentModelGroup!
                createdOn: DateTime
                savedOn: DateTime
                createdBy: CmsCreatedBy
                fields: [CmsContentModelField!]!
                lockedFields: [JSON]
                layout: [[String!]!]!
                titleFieldId: String

                # Returns true if the content model is registered via a plugin.
                plugin: Boolean!
            }

            type CmsContentModelResponse {
                data: CmsContentModel
                error: CmsError
            }

            type CmsContentModelListResponse {
                data: [CmsContentModel]
                meta: CmsListMeta
                error: CmsError
            }

            extend type Query {
                getContentModel(modelId: ID!, where: JSON, sort: String): CmsContentModelResponse

                listContentModels: CmsContentModelListResponse
            }

            ${manageSchema}
        `,
    resolvers
  });
};

var _default = plugin;
exports.default = _default;
//# sourceMappingURL=contentModels.js.map