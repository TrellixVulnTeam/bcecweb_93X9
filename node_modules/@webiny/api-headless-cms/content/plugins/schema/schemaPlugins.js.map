{"version":3,"sources":["../../../../src/content/plugins/schema/schemaPlugins.ts"],"names":["generateSchemaPlugins","context","plugins","cms","fieldTypePlugins","byType","reduce","acc","pl","fieldType","models","noAuth","list","schemas","type","newPlugins","schema","push","GraphQLSchemaPlugin","filter","model","fields","length","forEach","typeDefs","resolvers","READ"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEO,MAAMA,qBAAqB,GAAG,MACjCC,OADiC,IAEY;AAC7C,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAmBF,OAAzB,CAD6C,CAG7C;;AACA,QAAMG,gBAAqC,GAAGF,OAAO,CAChDG,MADyC,CACJ,4BADI,EAEzCC,MAFyC,CAElC,CAACC,GAAD,EAAMC,EAAN,KAAa;AACjBD,IAAAA,GAAG,CAACC,EAAE,CAACC,SAAJ,CAAH,GAAoBD,EAApB;AACA,WAAOD,GAAP;AACH,GALyC,EAKvC,EALuC,CAA9C,CAJ6C,CAW7C;;AACA,QAAMG,MAAM,GAAG,MAAMP,GAAG,CAACO,MAAJ,CAAWC,MAAX,GAAoBC,IAApB,EAArB;AAEA,QAAMC,OAAO,GAAG,0DAA0B;AAAEH,IAAAA,MAAF;AAAUN,IAAAA,gBAAV;AAA4BU,IAAAA,IAAI,EAAEX,GAAG,CAACW;AAAtC,GAA1B,CAAhB;AAEA,QAAMC,UAA6C,GAAG,EAAtD;;AACA,OAAK,MAAMC,MAAX,IAAqBH,OAArB,EAA8B;AAC1BE,IAAAA,UAAU,CAACE,IAAX,CAAgB,IAAIC,wCAAJ,CAAwBF,MAAxB,CAAhB;AACH;;AAEDN,EAAAA,MAAM,CACDS,MADL,CACYC,KAAK,IAAIA,KAAK,CAACC,MAAN,CAAaC,MAAb,GAAsB,CAD3C,EAEKC,OAFL,CAEaH,KAAK,IAAI;AACd,YAAQjB,GAAG,CAACW,IAAZ;AACI,WAAK,QAAL;AACIC,QAAAA,UAAU,CAACE,IAAX,CACI,IAAIC,wCAAJ,CAAwB;AACpBM,UAAAA,QAAQ,EAAE,sCAAgB;AAAEJ,YAAAA,KAAF;AAAShB,YAAAA;AAAT,WAAhB,CADU;AAEpBqB,UAAAA,SAAS,EAAE,kDAAsB;AAC7Bf,YAAAA,MAD6B;AAE7BU,YAAAA,KAF6B;AAG7BhB,YAAAA,gBAH6B;AAI7BH,YAAAA;AAJ6B,WAAtB;AAFS,SAAxB,CADJ;AAYA;;AACJ,WAAK,SAAL;AACA,WAAK,MAAL;AACIc,QAAAA,UAAU,CAACE,IAAX,CACI,IAAIC,wCAAJ,CAAwB;AACpBM,UAAAA,QAAQ,EAAE,kCAAc;AAAEJ,YAAAA,KAAF;AAAShB,YAAAA;AAAT,WAAd,CADU;AAEpBqB,UAAAA,SAAS,EAAEtB,GAAG,CAACuB,IAAJ,GACL,8CAAoB;AAChBhB,YAAAA,MADgB;AAEhBU,YAAAA,KAFgB;AAGhBhB,YAAAA,gBAHgB;AAIhBH,YAAAA;AAJgB,WAApB,CADK,GAOL,oDAAuB;AACnBS,YAAAA,MADmB;AAEnBU,YAAAA,KAFmB;AAGnBhB,YAAAA,gBAHmB;AAInBH,YAAAA;AAJmB,WAAvB;AATc,SAAxB,CADJ;AAkBA;;AACJ;AACI;AArCR;AAuCH,GA1CL;AA4CA,SAAOc,UAAP;AACH,CApEM","sourcesContent":["import { GraphQLSchemaPlugin } from \"@webiny/handler-graphql/plugins/GraphQLSchemaPlugin\";\nimport { CmsModelFieldToGraphQLPlugin, CmsFieldTypePlugins, CmsContext } from \"~/types\";\nimport { createManageSDL } from \"./createManageSDL\";\nimport { createReadSDL } from \"./createReadSDL\";\nimport { createManageResolvers } from \"./createManageResolvers\";\nimport { createReadResolvers } from \"./createReadResolvers\";\nimport { createPreviewResolvers } from \"./createPreviewResolvers\";\nimport { getSchemaFromFieldPlugins } from \"../utils/getSchemaFromFieldPlugins\";\n\nexport const generateSchemaPlugins = async (\n    context: CmsContext\n): Promise<GraphQLSchemaPlugin<CmsContext>[]> => {\n    const { plugins, cms } = context;\n\n    // Structure plugins for faster access\n    const fieldTypePlugins: CmsFieldTypePlugins = plugins\n        .byType<CmsModelFieldToGraphQLPlugin>(\"cms-model-field-to-graphql\")\n        .reduce((acc, pl) => {\n            acc[pl.fieldType] = pl;\n            return acc;\n        }, {});\n\n    // Load model data\n    const models = await cms.models.noAuth().list();\n\n    const schemas = getSchemaFromFieldPlugins({ models, fieldTypePlugins, type: cms.type });\n\n    const newPlugins: GraphQLSchemaPlugin<CmsContext>[] = [];\n    for (const schema of schemas) {\n        newPlugins.push(new GraphQLSchemaPlugin(schema));\n    }\n\n    models\n        .filter(model => model.fields.length > 0)\n        .forEach(model => {\n            switch (cms.type) {\n                case \"manage\":\n                    newPlugins.push(\n                        new GraphQLSchemaPlugin({\n                            typeDefs: createManageSDL({ model, fieldTypePlugins }),\n                            resolvers: createManageResolvers({\n                                models,\n                                model,\n                                fieldTypePlugins,\n                                context\n                            })\n                        })\n                    );\n\n                    break;\n                case \"preview\":\n                case \"read\":\n                    newPlugins.push(\n                        new GraphQLSchemaPlugin({\n                            typeDefs: createReadSDL({ model, fieldTypePlugins }),\n                            resolvers: cms.READ\n                                ? createReadResolvers({\n                                      models,\n                                      model,\n                                      fieldTypePlugins,\n                                      context\n                                  })\n                                : createPreviewResolvers({\n                                      models,\n                                      model,\n                                      fieldTypePlugins,\n                                      context\n                                  })\n                        })\n                    );\n                    break;\n                default:\n                    return;\n            }\n        });\n\n    return newPlugins;\n};\n"],"file":"schemaPlugins.js"}