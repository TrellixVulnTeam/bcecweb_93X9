{"version":3,"sources":["../../../../src/content/plugins/schema/contentModels.ts"],"names":["plugin","context","resolvers","Query","getContentModel","_","args","model","cms","models","get","modelId","Response","e","ErrorResponse","listContentModels","__","list","CmsContentModel","modelPlugin","plugins","byType","ContentModelPlugin","type","find","item","contentModel","Boolean","manageSchema","MANAGE","Mutation","createContentModel","create","data","updateContentModel","update","deleteContentModel","delete","GraphQLSchemaPlugin","typeDefs"],"mappings":"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","sourcesContent":["import { ErrorResponse, Response } from \"@webiny/handler-graphql\";\nimport { CmsContentModelCreateInput, CmsContentModelUpdateInput, CmsContext } from \"../../../types\";\nimport { GraphQLSchemaPlugin } from \"@webiny/handler-graphql/plugins/GraphQLSchemaPlugin\";\nimport { Resolvers } from \"@webiny/handler-graphql/types\";\nimport { ContentModelPlugin } from \"~/content/plugins/ContentModelPlugin\";\n\ninterface CreateContentModelArgs {\n    data: CmsContentModelCreateInput;\n}\n\ninterface ReadContentModelArgs {\n    modelId: string;\n}\n\ninterface UpdateContentModelArgs extends ReadContentModelArgs {\n    data: CmsContentModelUpdateInput;\n}\n\ninterface DeleteContentModelArgs {\n    modelId: string;\n}\n\nconst plugin = (context: CmsContext): GraphQLSchemaPlugin<CmsContext> => {\n    const resolvers: Resolvers<CmsContext> = {\n        Query: {\n            getContentModel: async (_: unknown, args: ReadContentModelArgs, context) => {\n                try {\n                    const model = await context.cms.models.get(args.modelId);\n                    return new Response(model);\n                } catch (e) {\n                    return new ErrorResponse(e);\n                }\n            },\n            listContentModels: async (_: unknown, __: unknown, context: CmsContext) => {\n                try {\n                    const model = await context.cms.models.list();\n                    return new Response(model);\n                } catch (e) {\n                    return new ErrorResponse(e);\n                }\n            }\n        },\n        CmsContentModel: {\n            plugin: async (model, args, context) => {\n                const modelPlugin: ContentModelPlugin = context.plugins\n                    .byType<ContentModelPlugin>(ContentModelPlugin.type)\n                    .find(\n                        (item: ContentModelPlugin) => item.contentModel.modelId === model.modelId\n                    );\n\n                return Boolean(modelPlugin);\n            }\n        }\n    };\n\n    let manageSchema = \"\";\n    if (context.cms.MANAGE) {\n        resolvers.Mutation = {\n            createContentModel: async (_: unknown, args: CreateContentModelArgs, context) => {\n                try {\n                    const model = await context.cms.models.create(args.data);\n                    return new Response(model);\n                } catch (e) {\n                    return new ErrorResponse(e);\n                }\n            },\n            updateContentModel: async (_: unknown, args: UpdateContentModelArgs, context) => {\n                const { modelId, data } = args;\n                try {\n                    const model = await context.cms.models.update(modelId, data);\n                    return new Response(model);\n                } catch (e) {\n                    return new ErrorResponse(e);\n                }\n            },\n            deleteContentModel: async (_: unknown, args: DeleteContentModelArgs, context) => {\n                const { modelId } = args;\n                try {\n                    await context.cms.models.delete(modelId);\n                    return new Response(true);\n                } catch (e) {\n                    return new ErrorResponse(e);\n                }\n            }\n        };\n\n        manageSchema = /* GraphQL */ `\n            input CmsPredefinedValueInput {\n                label: String!\n                value: String!\n            }\n\n            input CmsPredefinedValuesInput {\n                enabled: Boolean\n                values: [CmsPredefinedValueInput]\n            }\n            input CmsFieldRendererInput {\n                name: String\n            }\n\n            input CmsFieldValidationInput {\n                name: String!\n                message: String\n                settings: JSON\n            }\n\n            input CmsContentModelFieldInput {\n                id: ID!\n                label: String!\n                helpText: String\n                placeholderText: String\n                fieldId: String!\n                type: String!\n                multipleValues: Boolean\n                predefinedValues: CmsPredefinedValuesInput\n                renderer: CmsFieldRendererInput\n                validation: [CmsFieldValidationInput]\n                listValidation: [CmsFieldValidationInput]\n                settings: JSON\n            }\n\n            input CmsContentModelCreateInput {\n                name: String!\n                modelId: String\n                group: RefInput!\n                description: String\n            }\n\n            input CmsContentModelUpdateInput {\n                name: String\n                group: RefInput\n                description: String\n                layout: [[ID!]!]!\n                fields: [CmsContentModelFieldInput!]!\n                titleFieldId: String\n            }\n\n            extend type Mutation {\n                createContentModel(data: CmsContentModelCreateInput!): CmsContentModelResponse\n\n                updateContentModel(\n                    modelId: ID!\n                    data: CmsContentModelUpdateInput!\n                ): CmsContentModelResponse\n\n                deleteContentModel(modelId: ID!): CmsDeleteResponse\n            }\n        `;\n    }\n\n    return new GraphQLSchemaPlugin<CmsContext>({\n        typeDefs: /* GraphQL */ `\n            type CmsFieldValidation {\n                name: String!\n                message: String\n                settings: JSON\n            }\n\n            type CmsFieldRenderer {\n                name: String\n            }\n\n            type CmsPredefinedValue {\n                label: String\n                value: String\n            }\n\n            type CmsPredefinedValues {\n                enabled: Boolean\n                values: [CmsPredefinedValue]\n            }\n\n            type CmsContentModelField {\n                id: ID!\n                fieldId: String!\n                label: String!\n                helpText: String\n                placeholderText: String\n                type: String!\n                multipleValues: Boolean\n                predefinedValues: CmsPredefinedValues\n                renderer: CmsFieldRenderer\n                validation: [CmsFieldValidation!]\n                listValidation: [CmsFieldValidation!]\n                settings: JSON\n            }\n\n            type CmsContentModel {\n                name: String!\n                modelId: String!\n                description: String\n                group: CmsContentModelGroup!\n                createdOn: DateTime\n                savedOn: DateTime\n                createdBy: CmsCreatedBy\n                fields: [CmsContentModelField!]!\n                lockedFields: [JSON]\n                layout: [[String!]!]!\n                titleFieldId: String\n\n                # Returns true if the content model is registered via a plugin.\n                plugin: Boolean!\n            }\n\n            type CmsContentModelResponse {\n                data: CmsContentModel\n                error: CmsError\n            }\n\n            type CmsContentModelListResponse {\n                data: [CmsContentModel]\n                meta: CmsListMeta\n                error: CmsError\n            }\n\n            extend type Query {\n                getContentModel(modelId: ID!, where: JSON, sort: String): CmsContentModelResponse\n\n                listContentModels: CmsContentModelListResponse\n            }\n\n            ${manageSchema}\n        `,\n        resolvers\n    });\n};\n\nexport default plugin;\n"],"file":"contentModels.js"}