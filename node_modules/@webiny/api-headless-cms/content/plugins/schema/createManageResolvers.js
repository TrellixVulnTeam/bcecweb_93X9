"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createManageResolvers = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _commonFieldResolvers = require("./resolvers/commonFieldResolvers");

var _resolveGet = require("./resolvers/manage/resolveGet");

var _resolveList = require("./resolvers/manage/resolveList");

var _resolveGetRevisions = require("./resolvers/manage/resolveGetRevisions");

var _resolveGetByIds = require("./resolvers/manage/resolveGetByIds");

var _resolveCreate = require("./resolvers/manage/resolveCreate");

var _resolveUpdate = require("./resolvers/manage/resolveUpdate");

var _resolveRequestReview = require("./resolvers/manage/resolveRequestReview");

var _resolveRequestChanges = require("./resolvers/manage/resolveRequestChanges");

var _resolveDelete = require("./resolvers/manage/resolveDelete");

var _resolvePublish = require("./resolvers/manage/resolvePublish");

var _resolveUnpublish = require("./resolvers/manage/resolveUnpublish");

var _resolveCreateFrom = require("./resolvers/manage/resolveCreateFrom");

var _createTypeName = require("../utils/createTypeName");

var _pluralizedTypeName = require("../utils/pluralizedTypeName");

var _getEntryTitle = require("../utils/getEntryTitle");

var _createFieldResolvers = require("./createFieldResolvers");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const createManageResolvers = ({
  models,
  model,
  fieldTypePlugins
}) => {
  const typeName = (0, _createTypeName.createTypeName)(model.modelId);
  const mTypeName = (0, _createTypeName.createManageTypeName)(typeName);
  const createFieldResolvers = (0, _createFieldResolvers.createFieldResolversFactory)({
    endpointType: "manage",
    models,
    model,
    fieldTypePlugins
  });

  const manageResolvers = _objectSpread(_objectSpread({
    Query: {
      [`get${typeName}`]: (0, _resolveGet.resolveGet)({
        model
      }),
      [`get${typeName}Revisions`]: (0, _resolveGetRevisions.resolveGetRevisions)({
        model
      }),
      [`get${(0, _pluralizedTypeName.pluralizedTypeName)(typeName)}ByIds`]: (0, _resolveGetByIds.resolveGetByIds)({
        model
      }),
      [`list${(0, _pluralizedTypeName.pluralizedTypeName)(typeName)}`]: (0, _resolveList.resolveList)({
        model
      })
    },
    Mutation: {
      [`create${typeName}`]: (0, _resolveCreate.resolveCreate)({
        model
      }),
      [`update${typeName}`]: (0, _resolveUpdate.resolveUpdate)({
        model
      }),
      [`delete${typeName}`]: (0, _resolveDelete.resolveDelete)({
        model
      }),
      [`publish${typeName}`]: (0, _resolvePublish.resolvePublish)({
        model
      }),
      [`unpublish${typeName}`]: (0, _resolveUnpublish.resolveUnpublish)({
        model
      }),
      [`create${typeName}From`]: (0, _resolveCreateFrom.resolveCreateFrom)({
        model
      }),
      [`request${typeName}Review`]: (0, _resolveRequestReview.resolveRequestReview)({
        model
      }),
      [`request${typeName}Changes`]: (0, _resolveRequestChanges.resolveRequestChanges)({
        model
      })
    }
  }, createFieldResolvers({
    graphQLType: mTypeName,
    fields: model.fields,
    isRoot: true,
    // These are extra fields we want to apply to field resolvers of "gqlType"
    extraResolvers: _objectSpread(_objectSpread({}, (0, _commonFieldResolvers.commonFieldResolvers)()), {}, {
      meta(entry) {
        return entry;
      }

    })
  })), {}, {
    [`${mTypeName}Meta`]: {
      title(entry) {
        return (0, _getEntryTitle.getEntryTitle)(model, entry);
      },

      status(entry) {
        return entry.status;
      },

      async revisions(entry, args, context) {
        const entryId = entry.id.split("#")[0];
        const revisions = await context.cms.entries.getEntryRevisions(model, entryId);
        return revisions.sort((a, b) => b.version - a.version);
      }

    }
  });

  return manageResolvers;
};

exports.createManageResolvers = createManageResolvers;
//# sourceMappingURL=createManageResolvers.js.map