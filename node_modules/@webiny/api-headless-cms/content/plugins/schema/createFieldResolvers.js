"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFieldResolversFactory = createFieldResolversFactory;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _get = _interopRequireDefault(require("lodash/get"));

var _set = _interopRequireDefault(require("lodash/set"));

var _entryStorage = require("../utils/entryStorage");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * We use a factory to avoid passing the parameters for recursive invocations.
 * This way they will always be in the function scope and we can only pass "fields".
 */
function createFieldResolversFactory({
  endpointType,
  models,
  model,
  fieldTypePlugins
}) {
  return function createFieldResolvers(params) {
    const {
      graphQLType,
      fields,
      isRoot = false,
      extraResolvers = {}
    } = params;

    const fieldResolvers = _objectSpread({}, extraResolvers);

    const typeResolvers = {};

    for (const field of fields) {
      if (!fieldTypePlugins[field.type]) {
        continue;
      }

      const createResolver = (0, _get.default)(fieldTypePlugins, `${field.type}.${endpointType}.createResolver`);
      let resolver;
      const fieldResolver = createResolver ? createResolver({
        graphQLType,
        models,
        model,
        field,
        createFieldResolvers
      }) : null;

      if (typeof fieldResolver === "function") {
        resolver = fieldResolver;
      } else if (fieldResolver !== null) {
        resolver = fieldResolver.resolver;
        Object.assign(typeResolvers, fieldResolver.typeResolvers);
      }

      const {
        fieldId
      } = field;

      fieldResolvers[fieldId] = async (parent, args, context, info) => {
        try {
          // Get transformed value (eg. data decompression)
          const transformedValue = await (0, _entryStorage.entryFieldFromStorageTransform)({
            context,
            model,
            field,
            value: isRoot ? parent.values[fieldId] : parent[fieldId]
          });
          (0, _set.default)(isRoot ? parent.values : parent, fieldId, transformedValue);

          if (!resolver) {
            return isRoot ? parent.values[fieldId] : parent[fieldId];
          }

          return await resolver(isRoot ? parent.values : parent, args, context, info);
        } catch (err) {
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          const a = err;
        }
      };
    }

    return _objectSpread({
      [graphQLType]: fieldResolvers
    }, typeResolvers);
  };
}
//# sourceMappingURL=createFieldResolvers.js.map