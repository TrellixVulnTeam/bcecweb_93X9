"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _handlerGraphql = require("@webiny/handler-graphql");

var _GraphQLSchemaPlugin = require("@webiny/handler-graphql/plugins/GraphQLSchemaPlugin");

var _ContentModelGroupPlugin = require("../ContentModelGroupPlugin");

const plugin = context => {
  let manageSchema = "";

  if (context.cms.MANAGE) {
    manageSchema =
    /* GraphQL */
    `
            input CmsContentModelGroupInput {
                name: String!
                slug: String
                description: String
                icon: String!
            }

            type CmsContentModelGroupResponse {
                data: CmsContentModelGroup
                error: CmsError
            }

            type CmsContentModelGroupListResponse {
                data: [CmsContentModelGroup]
                meta: CmsListMeta
                error: CmsError
            }

            extend type Query {
                getContentModelGroup(id: ID): CmsContentModelGroupResponse
                listContentModelGroups: CmsContentModelGroupListResponse
            }

            extend type Mutation {
                createContentModelGroup(
                    data: CmsContentModelGroupInput!
                ): CmsContentModelGroupResponse

                updateContentModelGroup(
                    id: ID!
                    data: CmsContentModelGroupInput!
                ): CmsContentModelGroupResponse

                deleteContentModelGroup(id: ID!): CmsDeleteResponse
            }
        `;
  }

  let resolvers = {};

  if (context.cms.MANAGE) {
    resolvers = {
      CmsContentModelGroup: {
        contentModels: async (group, args, context) => {
          const models = await context.cms.models.silentAuth().list();
          return models.filter(m => m.group.id === group.id);
        },
        totalContentModels: async (group, args, context) => {
          const models = await context.cms.models.silentAuth().list();
          return models.filter(m => m.group === group.id).length;
        },
        plugin: async (group, args, context) => {
          const groupPlugin = context.plugins.byType(_ContentModelGroupPlugin.ContentModelGroupPlugin.type).find(item => item.contentModelGroup.id === group.id);
          return Boolean(groupPlugin);
        }
      },
      Query: {
        getContentModelGroup: async (_, args, context) => {
          try {
            const {
              id
            } = args;
            const model = await context.cms.groups.get(id);
            return new _handlerGraphql.Response(model);
          } catch (e) {
            return new _handlerGraphql.ErrorResponse(e);
          }
        },
        listContentModelGroups: async (_, __, context) => {
          try {
            const models = await context.cms.groups.list();
            return new _handlerGraphql.Response(models);
          } catch (e) {
            return new _handlerGraphql.ErrorResponse(e);
          }
        }
      },
      Mutation: {
        createContentModelGroup: async (_, args, context) => {
          try {
            const model = await context.cms.groups.create(args.data);
            return new _handlerGraphql.Response(model);
          } catch (e) {
            return new _handlerGraphql.ErrorResponse(e);
          }
        },
        updateContentModelGroup: async (_, args, context) => {
          try {
            const group = await context.cms.groups.update(args.id, args.data);
            return new _handlerGraphql.Response(group);
          } catch (e) {
            return new _handlerGraphql.ErrorResponse(e);
          }
        },
        deleteContentModelGroup: async (_, args, context) => {
          try {
            await context.cms.groups.delete(args.id);
            return new _handlerGraphql.Response(true);
          } catch (e) {
            return new _handlerGraphql.ErrorResponse(e);
          }
        }
      }
    };
  }

  return new _GraphQLSchemaPlugin.GraphQLSchemaPlugin({
    typeDefs:
    /* GraphQL */
    `
            type CmsContentModelGroup {
                id: ID!
                createdOn: DateTime
                savedOn: DateTime
                name: String!
                contentModels: [CmsContentModel!]
                totalContentModels: Int!
                slug: String!
                description: String
                icon: String
                createdBy: CmsCreatedBy

                # Returns true if the content model group is registered via a plugin.
                plugin: Boolean!
            }
            ${manageSchema}
        `,
    resolvers
  });
};

var _default = plugin;
exports.default = _default;
//# sourceMappingURL=contentModelGroups.js.map