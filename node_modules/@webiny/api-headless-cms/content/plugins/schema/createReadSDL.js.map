{"version":3,"sources":["../../../../src/content/plugins/schema/createReadSDL.ts"],"names":["createReadSDL","model","fieldTypePlugins","typeName","modelId","rTypeName","listFilterFieldsRender","type","sortEnumRender","getFilterFieldsRender","fieldsRender","description","map","f","typeDefs","filter","Boolean","join","fields"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAMO,MAAMA,aAA8B,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAyC;AACnF,QAAMC,QAAQ,GAAG,oCAAeF,KAAK,CAACG,OAArB,CAAjB;AACA,QAAMC,SAAS,GAAG,wCAAmBF,QAAnB,CAAlB;AAEA,QAAMG,sBAAsB,GAAG,oDAAuB;AAClDL,IAAAA,KADkD;AAElDM,IAAAA,IAAI,EAAE,MAF4C;AAGlDL,IAAAA;AAHkD,GAAvB,CAA/B;AAMA,QAAMM,cAAc,GAAG,oCAAe;AAAEP,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAf,CAAvB;AACA,QAAMO,qBAAqB,GAAG,kDAAsB;AAAER,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAtB,CAA9B;AACA,QAAMQ,YAAY,GAAG,gCAAa;AAAET,IAAAA,KAAF;AAASM,IAAAA,IAAI,EAAE,MAAf;AAAuBL,IAAAA;AAAvB,GAAb,CAArB;AAEA,SAAQ;AACZ,aAAaD,KAAK,CAACU,WAAN,IAAqB,EAAG;AACrC,UAAUD,YAAY,CACTE,GADH,CACOC,CAAC,IAAIA,CAAC,CAACC,QADd,EAEGC,MAFH,CAEUC,OAFV,EAGGC,IAHH,CAGQ,IAHR,CAGc;AACxB;AACA,eAAeZ,SAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,cAAcK,YAAY,CAACE,GAAb,CAAiBC,CAAC,IAAIA,CAAC,CAACK,MAAxB,EAAgCD,IAAhC,CAAqC,IAArC,CAA2C;AACzD;AACA;AACA,UACYR,qBAAqB,IACpB,SAAQJ,SAAU;AAC/B,cAAcI,qBAAsB;AACpC,UACS;AACT;AACA;AACA,UACYH,sBAAsB,IACrB,SAAQD,SAAU;AAC/B,cAAcC,sBAAuB;AACrC,UACS;AACT;AACA;AACA,UACYE,cAAc,IACb,QAAOH,SAAU;AAC9B,cAAcG,cAAe;AAC7B,UACS;AACT;AACA,eAAeH,SAAU;AACzB,oBAAoBA,SAAU;AAC9B;AACA;AACA;AACA,eAAeA,SAAU;AACzB,qBAAqBA,SAAU;AAC/B;AACA;AACA;AACA;AACA;AACA,iBAAiBF,QAAS,WAAUE,SAAU,oBAAmBA,SAAU;AAC3E;AACA,kBAAkB,4CAAmBF,QAAnB,CAA6B;AAC/C,yBAAyBE,SAAU;AACnC,yBAAyBA,SAAU;AACnC;AACA;AACA,iBAAiBA,SAAU;AAC3B;AACA,KA7DI;AA8DH,CA5EM","sourcesContent":["import { CmsContentModel, CmsFieldTypePlugins } from \"../../../types\";\nimport { createReadTypeName, createTypeName } from \"../utils/createTypeName\";\nimport { renderSortEnum } from \"../utils/renderSortEnum\";\nimport { renderFields } from \"../utils/renderFields\";\nimport { renderListFilterFields } from \"../utils/renderListFilterFields\";\nimport { renderGetFilterFields } from \"../utils/renderGetFilterFields\";\nimport { pluralizedTypeName } from \"../utils/pluralizedTypeName\";\n\ninterface CreateManageSDL {\n    (params: { model: CmsContentModel; fieldTypePlugins: CmsFieldTypePlugins }): string;\n}\n\nexport const createReadSDL: CreateManageSDL = ({ model, fieldTypePlugins }): string => {\n    const typeName = createTypeName(model.modelId);\n    const rTypeName = createReadTypeName(typeName);\n\n    const listFilterFieldsRender = renderListFilterFields({\n        model,\n        type: \"read\",\n        fieldTypePlugins\n    });\n\n    const sortEnumRender = renderSortEnum({ model, fieldTypePlugins });\n    const getFilterFieldsRender = renderGetFilterFields({ model, fieldTypePlugins });\n    const fieldsRender = renderFields({ model, type: \"read\", fieldTypePlugins });\n\n    return `\n        \"\"\"${model.description || \"\"}\"\"\"\n        ${fieldsRender\n            .map(f => f.typeDefs)\n            .filter(Boolean)\n            .join(\"\\n\")}\n        \n        type ${rTypeName} {\n            id: ID!\n            entryId: String!\n            createdOn: DateTime!\n            savedOn: DateTime!\n            createdBy: CmsCreatedBy!\n            ownedBy: CmsOwnedBy!\n            ${fieldsRender.map(f => f.fields).join(\"\\n\")}\n        }\n        \n        ${\n            getFilterFieldsRender &&\n            `input ${rTypeName}GetWhereInput {\n            ${getFilterFieldsRender}\n        }`\n        }\n        \n        \n        ${\n            listFilterFieldsRender &&\n            `input ${rTypeName}ListWhereInput {\n            ${listFilterFieldsRender}\n        }`\n        }\n        \n        \n        ${\n            sortEnumRender &&\n            `enum ${rTypeName}ListSorter {\n            ${sortEnumRender}\n        }`\n        }\n        \n        type ${rTypeName}Response {\n            data: ${rTypeName}\n            error: CmsError\n        }\n        \n        type ${rTypeName}ListResponse {\n            data: [${rTypeName}]\n            meta: CmsListMeta\n            error: CmsError\n        }\n        \n        extend type Query {\n            get${typeName}(where: ${rTypeName}GetWhereInput!): ${rTypeName}Response\n\n            list${pluralizedTypeName(typeName)}(\n                where: ${rTypeName}ListWhereInput\n                sort: [${rTypeName}ListSorter]\n                limit: Int\n                after: String\n            ): ${rTypeName}ListResponse\n        }\n    `;\n};\n"],"file":"createReadSDL.js"}