"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPreviewResolvers = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _createTypeName = require("../utils/createTypeName");

var _resolveGet = require("./resolvers/preview/resolveGet");

var _resolveList = require("./resolvers/preview/resolveList");

var _pluralizedTypeName = require("../utils/pluralizedTypeName");

var _createFieldResolvers = require("./createFieldResolvers");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const createPreviewResolvers = ({
  models,
  model,
  fieldTypePlugins
}) => {
  const typeName = (0, _createTypeName.createTypeName)(model.modelId);
  const rTypeName = (0, _createTypeName.createReadTypeName)(typeName);
  const createFieldResolvers = (0, _createFieldResolvers.createFieldResolversFactory)({
    endpointType: "read",
    models,
    model,
    fieldTypePlugins
  });
  return _objectSpread({
    Query: {
      [`get${typeName}`]: (0, _resolveGet.resolveGet)({
        model
      }),
      [`list${(0, _pluralizedTypeName.pluralizedTypeName)(typeName)}`]: (0, _resolveList.resolveList)({
        model
      })
    }
  }, createFieldResolvers({
    graphQLType: rTypeName,
    fields: model.fields,
    isRoot: true
  }));
};

exports.createPreviewResolvers = createPreviewResolvers;
//# sourceMappingURL=createPreviewResolvers.js.map