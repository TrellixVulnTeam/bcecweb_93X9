{"version":3,"sources":["../../../../src/content/plugins/schema/createManageResolvers.ts"],"names":["createManageResolvers","models","model","fieldTypePlugins","typeName","modelId","mTypeName","createFieldResolvers","endpointType","manageResolvers","Query","Mutation","graphQLType","fields","isRoot","extraResolvers","meta","entry","title","status","revisions","args","context","entryId","id","split","cms","entries","getEntryRevisions","sort","a","b","version"],"mappings":"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","sourcesContent":["import { CmsContentModel, CmsFieldTypePlugins, CmsContext } from \"~/types\";\nimport { commonFieldResolvers } from \"./resolvers/commonFieldResolvers\";\nimport { resolveGet } from \"./resolvers/manage/resolveGet\";\nimport { resolveList } from \"./resolvers/manage/resolveList\";\nimport { resolveGetRevisions } from \"./resolvers/manage/resolveGetRevisions\";\nimport { resolveGetByIds } from \"./resolvers/manage/resolveGetByIds\";\nimport { resolveCreate } from \"./resolvers/manage/resolveCreate\";\nimport { resolveUpdate } from \"./resolvers/manage/resolveUpdate\";\nimport { resolveRequestReview } from \"./resolvers/manage/resolveRequestReview\";\nimport { resolveRequestChanges } from \"./resolvers/manage/resolveRequestChanges\";\nimport { resolveDelete } from \"./resolvers/manage/resolveDelete\";\nimport { resolvePublish } from \"./resolvers/manage/resolvePublish\";\nimport { resolveUnpublish } from \"./resolvers/manage/resolveUnpublish\";\nimport { resolveCreateFrom } from \"./resolvers/manage/resolveCreateFrom\";\nimport { createManageTypeName, createTypeName } from \"../utils/createTypeName\";\nimport { pluralizedTypeName } from \"../utils/pluralizedTypeName\";\nimport { getEntryTitle } from \"../utils/getEntryTitle\";\nimport { createFieldResolversFactory } from \"~/content/plugins/schema/createFieldResolvers\";\n\ninterface CreateManageResolvers {\n    (params: {\n        models: CmsContentModel[];\n        model: CmsContentModel;\n        context: CmsContext;\n        fieldTypePlugins: CmsFieldTypePlugins;\n    }): any;\n}\n\nexport const createManageResolvers: CreateManageResolvers = ({\n    models,\n    model,\n    fieldTypePlugins\n}) => {\n    const typeName = createTypeName(model.modelId);\n    const mTypeName = createManageTypeName(typeName);\n    const createFieldResolvers = createFieldResolversFactory({\n        endpointType: \"manage\",\n        models,\n        model,\n        fieldTypePlugins\n    });\n\n    const manageResolvers = {\n        Query: {\n            [`get${typeName}`]: resolveGet({ model }),\n            [`get${typeName}Revisions`]: resolveGetRevisions({ model }),\n            [`get${pluralizedTypeName(typeName)}ByIds`]: resolveGetByIds({ model }),\n            [`list${pluralizedTypeName(typeName)}`]: resolveList({ model })\n        },\n        Mutation: {\n            [`create${typeName}`]: resolveCreate({ model }),\n            [`update${typeName}`]: resolveUpdate({ model }),\n            [`delete${typeName}`]: resolveDelete({ model }),\n            [`publish${typeName}`]: resolvePublish({ model }),\n            [`unpublish${typeName}`]: resolveUnpublish({ model }),\n            [`create${typeName}From`]: resolveCreateFrom({ model }),\n            [`request${typeName}Review`]: resolveRequestReview({ model }),\n            [`request${typeName}Changes`]: resolveRequestChanges({ model })\n        },\n        ...createFieldResolvers({\n            graphQLType: mTypeName,\n            fields: model.fields,\n            isRoot: true,\n            // These are extra fields we want to apply to field resolvers of \"gqlType\"\n            extraResolvers: {\n                ...commonFieldResolvers(),\n                meta(entry) {\n                    return entry;\n                }\n            }\n        }),\n        [`${mTypeName}Meta`]: {\n            title(entry) {\n                return getEntryTitle(model, entry);\n            },\n            status(entry) {\n                return entry.status;\n            },\n            async revisions(entry, args, context: CmsContext) {\n                const entryId = entry.id.split(\"#\")[0];\n                const revisions = await context.cms.entries.getEntryRevisions(model, entryId);\n                return revisions.sort((a, b) => b.version - a.version);\n            }\n        }\n    };\n\n    return manageResolvers;\n};\n"],"file":"createManageResolvers.js"}