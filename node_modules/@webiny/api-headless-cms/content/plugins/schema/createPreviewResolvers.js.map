{"version":3,"sources":["../../../../src/content/plugins/schema/createPreviewResolvers.ts"],"names":["createPreviewResolvers","models","model","fieldTypePlugins","typeName","modelId","rTypeName","createFieldResolvers","endpointType","Query","graphQLType","fields","isRoot"],"mappings":";;;;;;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAWO,MAAMA,sBAA2C,GAAG,CAAC;AACxDC,EAAAA,MADwD;AAExDC,EAAAA,KAFwD;AAGxDC,EAAAA;AAHwD,CAAD,KAIrD;AACF,QAAMC,QAAQ,GAAG,oCAAeF,KAAK,CAACG,OAArB,CAAjB;AACA,QAAMC,SAAS,GAAG,wCAAmBF,QAAnB,CAAlB;AAEA,QAAMG,oBAAoB,GAAG,uDAA4B;AACrDC,IAAAA,YAAY,EAAE,MADuC;AAErDP,IAAAA,MAFqD;AAGrDC,IAAAA,KAHqD;AAIrDC,IAAAA;AAJqD,GAA5B,CAA7B;AAOA;AACIM,IAAAA,KAAK,EAAE;AACH,OAAE,MAAKL,QAAS,EAAhB,GAAoB,4BAAW;AAAEF,QAAAA;AAAF,OAAX,CADjB;AAEH,OAAE,OAAM,4CAAmBE,QAAnB,CAA6B,EAArC,GAAyC,8BAAY;AAAEF,QAAAA;AAAF,OAAZ;AAFtC;AADX,KAKOK,oBAAoB,CAAC;AACpBG,IAAAA,WAAW,EAAEJ,SADO;AAEpBK,IAAAA,MAAM,EAAET,KAAK,CAACS,MAFM;AAGpBC,IAAAA,MAAM,EAAE;AAHY,GAAD,CAL3B;AAWH,CA1BM","sourcesContent":["import { CmsContentModel, CmsFieldTypePlugins, CmsContext } from \"~/types\";\nimport { createReadTypeName, createTypeName } from \"../utils/createTypeName\";\nimport { resolveGet } from \"./resolvers/preview/resolveGet\";\nimport { resolveList } from \"./resolvers/preview/resolveList\";\nimport { pluralizedTypeName } from \"../utils/pluralizedTypeName\";\nimport { createFieldResolversFactory } from \"~/content/plugins/schema/createFieldResolvers\";\n\nexport interface CreateReadResolvers {\n    (params: {\n        models: CmsContentModel[];\n        model: CmsContentModel;\n        context: CmsContext;\n        fieldTypePlugins: CmsFieldTypePlugins;\n    }): any;\n}\n\nexport const createPreviewResolvers: CreateReadResolvers = ({\n    models,\n    model,\n    fieldTypePlugins\n}) => {\n    const typeName = createTypeName(model.modelId);\n    const rTypeName = createReadTypeName(typeName);\n\n    const createFieldResolvers = createFieldResolversFactory({\n        endpointType: \"read\",\n        models,\n        model,\n        fieldTypePlugins\n    });\n\n    return {\n        Query: {\n            [`get${typeName}`]: resolveGet({ model }),\n            [`list${pluralizedTypeName(typeName)}`]: resolveList({ model })\n        },\n        ...createFieldResolvers({\n            graphQLType: rTypeName,\n            fields: model.fields,\n            isRoot: true\n        })\n    };\n};\n"],"file":"createPreviewResolvers.js"}