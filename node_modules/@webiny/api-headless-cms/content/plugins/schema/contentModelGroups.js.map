{"version":3,"sources":["../../../../src/content/plugins/schema/contentModelGroups.ts"],"names":["plugin","context","manageSchema","cms","MANAGE","resolvers","CmsContentModelGroup","contentModels","group","args","models","silentAuth","list","filter","m","id","totalContentModels","length","groupPlugin","plugins","byType","ContentModelGroupPlugin","type","find","item","contentModelGroup","Boolean","Query","getContentModelGroup","_","model","groups","get","Response","e","ErrorResponse","listContentModelGroups","__","Mutation","createContentModelGroup","create","data","updateContentModelGroup","update","deleteContentModelGroup","delete","GraphQLSchemaPlugin","typeDefs"],"mappings":"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","sourcesContent":["import { ErrorResponse, Response } from \"@webiny/handler-graphql\";\n\nimport {\n    CmsContentModelGroupCreateInput,\n    CmsContentModelGroupUpdateInput,\n    CmsContext\n} from \"~/types\";\nimport { GraphQLSchemaPlugin } from \"@webiny/handler-graphql/plugins/GraphQLSchemaPlugin\";\nimport { Resolvers } from \"@webiny/handler-graphql/types\";\nimport { ContentModelGroupPlugin } from \"~/content/plugins/ContentModelGroupPlugin\";\n\ninterface CreateContentModelGroupArgs {\n    data: CmsContentModelGroupCreateInput;\n}\n\ninterface ReadContentModelGroupArgs {\n    id: string;\n}\n\ninterface UpdateContentModelGroupArgs extends ReadContentModelGroupArgs {\n    data: CmsContentModelGroupUpdateInput;\n}\n\ninterface DeleteContentModelGroupArgs {\n    id: string;\n}\n\nconst plugin = (context: CmsContext): GraphQLSchemaPlugin<CmsContext> => {\n    let manageSchema = \"\";\n    if (context.cms.MANAGE) {\n        manageSchema = /* GraphQL */ `\n            input CmsContentModelGroupInput {\n                name: String!\n                slug: String\n                description: String\n                icon: String!\n            }\n\n            type CmsContentModelGroupResponse {\n                data: CmsContentModelGroup\n                error: CmsError\n            }\n\n            type CmsContentModelGroupListResponse {\n                data: [CmsContentModelGroup]\n                meta: CmsListMeta\n                error: CmsError\n            }\n\n            extend type Query {\n                getContentModelGroup(id: ID): CmsContentModelGroupResponse\n                listContentModelGroups: CmsContentModelGroupListResponse\n            }\n\n            extend type Mutation {\n                createContentModelGroup(\n                    data: CmsContentModelGroupInput!\n                ): CmsContentModelGroupResponse\n\n                updateContentModelGroup(\n                    id: ID!\n                    data: CmsContentModelGroupInput!\n                ): CmsContentModelGroupResponse\n\n                deleteContentModelGroup(id: ID!): CmsDeleteResponse\n            }\n        `;\n    }\n\n    let resolvers: Resolvers<CmsContext> = {};\n\n    if (context.cms.MANAGE) {\n        resolvers = {\n            CmsContentModelGroup: {\n                contentModels: async (group, args, context) => {\n                    const models = await context.cms.models.silentAuth().list();\n                    return models.filter(m => m.group.id === group.id);\n                },\n                totalContentModels: async (group, args, context) => {\n                    const models = await context.cms.models.silentAuth().list();\n                    return models.filter(m => m.group === group.id).length;\n                },\n                plugin: async (group, args, context: CmsContext) => {\n                    const groupPlugin: ContentModelGroupPlugin = context.plugins\n                        .byType<ContentModelGroupPlugin>(ContentModelGroupPlugin.type)\n                        .find(\n                            (item: ContentModelGroupPlugin) =>\n                                item.contentModelGroup.id === group.id\n                        );\n\n                    return Boolean(groupPlugin);\n                }\n            },\n            Query: {\n                getContentModelGroup: async (_, args: ReadContentModelGroupArgs, context) => {\n                    try {\n                        const { id } = args;\n                        const model = await context.cms.groups.get(id);\n                        return new Response(model);\n                    } catch (e) {\n                        return new ErrorResponse(e);\n                    }\n                },\n                listContentModelGroups: async (_, __, context) => {\n                    try {\n                        const models = await context.cms.groups.list();\n                        return new Response(models);\n                    } catch (e) {\n                        return new ErrorResponse(e);\n                    }\n                }\n            },\n            Mutation: {\n                createContentModelGroup: async (_, args: CreateContentModelGroupArgs, context) => {\n                    try {\n                        const model = await context.cms.groups.create(args.data);\n                        return new Response(model);\n                    } catch (e) {\n                        return new ErrorResponse(e);\n                    }\n                },\n                updateContentModelGroup: async (_, args: UpdateContentModelGroupArgs, context) => {\n                    try {\n                        const group = await context.cms.groups.update(args.id, args.data);\n                        return new Response(group);\n                    } catch (e) {\n                        return new ErrorResponse(e);\n                    }\n                },\n                deleteContentModelGroup: async (_, args: DeleteContentModelGroupArgs, context) => {\n                    try {\n                        await context.cms.groups.delete(args.id);\n                        return new Response(true);\n                    } catch (e) {\n                        return new ErrorResponse(e);\n                    }\n                }\n            }\n        };\n    }\n\n    return new GraphQLSchemaPlugin<CmsContext>({\n        typeDefs: /* GraphQL */ `\n            type CmsContentModelGroup {\n                id: ID!\n                createdOn: DateTime\n                savedOn: DateTime\n                name: String!\n                contentModels: [CmsContentModel!]\n                totalContentModels: Int!\n                slug: String!\n                description: String\n                icon: String\n                createdBy: CmsCreatedBy\n\n                # Returns true if the content model group is registered via a plugin.\n                plugin: Boolean!\n            }\n            ${manageSchema}\n        `,\n        resolvers\n    });\n};\n\nexport default plugin;\n"],"file":"contentModelGroups.js"}