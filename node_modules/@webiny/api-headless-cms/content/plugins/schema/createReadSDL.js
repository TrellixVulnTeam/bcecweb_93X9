"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createReadSDL = void 0;

var _createTypeName = require("../utils/createTypeName");

var _renderSortEnum = require("../utils/renderSortEnum");

var _renderFields = require("../utils/renderFields");

var _renderListFilterFields = require("../utils/renderListFilterFields");

var _renderGetFilterFields = require("../utils/renderGetFilterFields");

var _pluralizedTypeName = require("../utils/pluralizedTypeName");

const createReadSDL = ({
  model,
  fieldTypePlugins
}) => {
  const typeName = (0, _createTypeName.createTypeName)(model.modelId);
  const rTypeName = (0, _createTypeName.createReadTypeName)(typeName);
  const listFilterFieldsRender = (0, _renderListFilterFields.renderListFilterFields)({
    model,
    type: "read",
    fieldTypePlugins
  });
  const sortEnumRender = (0, _renderSortEnum.renderSortEnum)({
    model,
    fieldTypePlugins
  });
  const getFilterFieldsRender = (0, _renderGetFilterFields.renderGetFilterFields)({
    model,
    fieldTypePlugins
  });
  const fieldsRender = (0, _renderFields.renderFields)({
    model,
    type: "read",
    fieldTypePlugins
  });
  return `
        """${model.description || ""}"""
        ${fieldsRender.map(f => f.typeDefs).filter(Boolean).join("\n")}
        
        type ${rTypeName} {
            id: ID!
            entryId: String!
            createdOn: DateTime!
            savedOn: DateTime!
            createdBy: CmsCreatedBy!
            ownedBy: CmsOwnedBy!
            ${fieldsRender.map(f => f.fields).join("\n")}
        }
        
        ${getFilterFieldsRender && `input ${rTypeName}GetWhereInput {
            ${getFilterFieldsRender}
        }`}
        
        
        ${listFilterFieldsRender && `input ${rTypeName}ListWhereInput {
            ${listFilterFieldsRender}
        }`}
        
        
        ${sortEnumRender && `enum ${rTypeName}ListSorter {
            ${sortEnumRender}
        }`}
        
        type ${rTypeName}Response {
            data: ${rTypeName}
            error: CmsError
        }
        
        type ${rTypeName}ListResponse {
            data: [${rTypeName}]
            meta: CmsListMeta
            error: CmsError
        }
        
        extend type Query {
            get${typeName}(where: ${rTypeName}GetWhereInput!): ${rTypeName}Response

            list${(0, _pluralizedTypeName.pluralizedTypeName)(typeName)}(
                where: ${rTypeName}ListWhereInput
                sort: [${rTypeName}ListSorter]
                limit: Int
                after: String
            ): ${rTypeName}ListResponse
        }
    `;
};

exports.createReadSDL = createReadSDL;
//# sourceMappingURL=createReadSDL.js.map