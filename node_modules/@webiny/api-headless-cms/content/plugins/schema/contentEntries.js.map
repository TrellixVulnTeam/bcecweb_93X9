{"version":3,"sources":["../../../../src/content/plugins/schema/contentEntries.ts"],"names":["plugin","context","cms","MANAGE","GraphQLSchemaPlugin","typeDefs","resolvers","Query","searchContentEntries","_","args","modelIds","query","limit","models","list","getters","filter","model","includes","modelId","map","latest","modelManager","getModel","items","listLatest","where","undefined","titleFieldId","entry","id","name","status","title","savedOn","entries","Promise","all","then","results","reduce","result","item","concat","Response","sort","a","b","Date","parse","slice","getContentEntry","entryId","find","m","NotAuthorizedResponse","data","getByIds","getContentEntries","entriesByModel","acc","ref","some","push","Object","keys"],"mappings":"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","sourcesContent":["import { Response } from \"@webiny/handler-graphql\";\nimport { CmsContentEntry, CmsContext } from \"~/types\";\nimport { getEntryTitle } from \"../utils/getEntryTitle\";\nimport { NotAuthorizedResponse } from \"@webiny/api-security\";\nimport { GraphQLSchemaPlugin } from \"@webiny/handler-graphql/plugins/GraphQLSchemaPlugin\";\n\nconst plugin = (context: CmsContext): GraphQLSchemaPlugin<CmsContext> => {\n    if (!context.cms.MANAGE) {\n        return null;\n    }\n\n    return new GraphQLSchemaPlugin<CmsContext>({\n        typeDefs: /* GraphQL */ `\n            type CmsModelMeta {\n                modelId: String\n                name: String\n            }\n\n            type CmsContentEntry {\n                id: ID\n                model: CmsModelMeta\n                status: String\n                title: String\n            }\n\n            type CmsContentEntriesResponse {\n                data: [CmsContentEntry]\n                error: CmsError\n            }\n\n            type CmsContentEntryResponse {\n                data: CmsContentEntry\n                error: CmsError\n            }\n\n            input CmsModelEntryInput {\n                modelId: ID!\n                entryId: ID!\n            }\n\n            extend type Query {\n                # Search content entries for given content models using the query string.\n                searchContentEntries(\n                    modelIds: [ID!]!\n                    query: String!\n                    limit: Int\n                ): CmsContentEntriesResponse\n\n                # Get content entry meta data\n                getContentEntry(entry: CmsModelEntryInput!): CmsContentEntryResponse\n\n                # Get content entries meta data\n                getContentEntries(entries: [CmsModelEntryInput!]!): CmsContentEntriesResponse\n            }\n        `,\n        resolvers: {\n            Query: {\n                async searchContentEntries(_, args, context) {\n                    const { modelIds, query, limit = 10 } = args;\n                    const models = await context.cms.models.list();\n\n                    const getters = models\n                        .filter(model => modelIds.includes(model.modelId))\n                        .map(async model => {\n                            const latest = query === \"__latest__\";\n                            const modelManager = await context.cms.getModel(model.modelId);\n                            const [items] = await modelManager.listLatest({\n                                limit,\n                                where: latest\n                                    ? undefined\n                                    : { [`${model.titleFieldId}_contains`]: query }\n                            });\n\n                            return items.map((entry: CmsContentEntry) => ({\n                                id: entry.id,\n                                model: {\n                                    modelId: model.modelId,\n                                    name: model.name\n                                },\n                                status: entry.status,\n                                title: getEntryTitle(model, entry),\n                                // We need `savedOn` to sort entries from latest to oldest\n                                savedOn: entry.savedOn\n                            }));\n                        });\n\n                    const entries = await Promise.all(getters).then(results =>\n                        results.reduce((result, item) => result.concat(item), [])\n                    );\n\n                    return new Response(\n                        entries\n                            .sort((a, b) => Date.parse(b.savedOn) - Date.parse(a.savedOn))\n                            .slice(0, limit)\n                    );\n                },\n                async getContentEntry(_, args, context) {\n                    const { modelId, entryId } = args.entry;\n                    const models = await context.cms.models.list();\n                    const model = models.find(m => m.modelId === modelId);\n\n                    if (!model) {\n                        return new NotAuthorizedResponse({ data: { modelId } });\n                    }\n\n                    const [entry] = await context.cms.entries.getByIds(model, [entryId]);\n\n                    return new Response({\n                        id: entry.id,\n                        model: {\n                            modelId: model.modelId,\n                            name: model.name\n                        },\n                        status: entry.status,\n                        title: getEntryTitle(model, entry)\n                    });\n                },\n                async getContentEntries(_, args, context) {\n                    const models = await context.cms.models.list();\n\n                    // Group entries by modelId\n                    const entriesByModel = args.entries.reduce((acc, ref) => {\n                        // Check if requested modelId is in the list of models this user is allowed to access.\n                        if (!models.some(m => m.modelId === ref.modelId)) {\n                            return acc;\n                        }\n\n                        if (!acc[ref.modelId]) {\n                            acc[ref.modelId] = [];\n                        }\n                        acc[ref.modelId].push(ref.entryId);\n                        return acc;\n                    }, {});\n\n                    const getters = Object.keys(entriesByModel).map(async modelId => {\n                        const model = models.find(m => m.modelId === modelId);\n\n                        const entries = await context.cms.entries.getByIds(\n                            model,\n                            entriesByModel[modelId]\n                        );\n\n                        return entries.map(entry => ({\n                            id: entry.id,\n                            model: {\n                                modelId: model.modelId,\n                                name: model.name\n                            },\n                            status: entry.status,\n                            title: getEntryTitle(model, entry)\n                        }));\n                    });\n\n                    return new Response(\n                        await Promise.all(getters).then(results => {\n                            return results.reduce((result, item) => result.concat(item), []);\n                        })\n                    );\n                }\n            }\n        }\n    });\n};\n\nexport default plugin;\n"],"file":"contentEntries.js"}