"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateSchemaPlugins = void 0;

var _GraphQLSchemaPlugin = require("@webiny/handler-graphql/plugins/GraphQLSchemaPlugin");

var _createManageSDL = require("./createManageSDL");

var _createReadSDL = require("./createReadSDL");

var _createManageResolvers = require("./createManageResolvers");

var _createReadResolvers = require("./createReadResolvers");

var _createPreviewResolvers = require("./createPreviewResolvers");

var _getSchemaFromFieldPlugins = require("../utils/getSchemaFromFieldPlugins");

const generateSchemaPlugins = async context => {
  const {
    plugins,
    cms
  } = context; // Structure plugins for faster access

  const fieldTypePlugins = plugins.byType("cms-model-field-to-graphql").reduce((acc, pl) => {
    acc[pl.fieldType] = pl;
    return acc;
  }, {}); // Load model data

  const models = await cms.models.noAuth().list();
  const schemas = (0, _getSchemaFromFieldPlugins.getSchemaFromFieldPlugins)({
    models,
    fieldTypePlugins,
    type: cms.type
  });
  const newPlugins = [];

  for (const schema of schemas) {
    newPlugins.push(new _GraphQLSchemaPlugin.GraphQLSchemaPlugin(schema));
  }

  models.filter(model => model.fields.length > 0).forEach(model => {
    switch (cms.type) {
      case "manage":
        newPlugins.push(new _GraphQLSchemaPlugin.GraphQLSchemaPlugin({
          typeDefs: (0, _createManageSDL.createManageSDL)({
            model,
            fieldTypePlugins
          }),
          resolvers: (0, _createManageResolvers.createManageResolvers)({
            models,
            model,
            fieldTypePlugins,
            context
          })
        }));
        break;

      case "preview":
      case "read":
        newPlugins.push(new _GraphQLSchemaPlugin.GraphQLSchemaPlugin({
          typeDefs: (0, _createReadSDL.createReadSDL)({
            model,
            fieldTypePlugins
          }),
          resolvers: cms.READ ? (0, _createReadResolvers.createReadResolvers)({
            models,
            model,
            fieldTypePlugins,
            context
          }) : (0, _createPreviewResolvers.createPreviewResolvers)({
            models,
            model,
            fieldTypePlugins,
            context
          })
        }));
        break;

      default:
        return;
    }
  });
  return newPlugins;
};

exports.generateSchemaPlugins = generateSchemaPlugins;
//# sourceMappingURL=schemaPlugins.js.map