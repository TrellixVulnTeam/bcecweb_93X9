{"version":3,"sources":["../../../../src/content/plugins/utils/renderListFilterFields.ts"],"names":["renderListFilterFields","model","type","fieldTypePlugins","fields","join","i","length","field","createListFilters","push","filter","Boolean"],"mappings":";;;;;;;;;AACA;;AAUO,MAAMA,sBAA8C,GAAG,CAAC;AAC3DC,EAAAA,KAD2D;AAE3DC,EAAAA,IAF2D;AAG3DC,EAAAA;AAH2D,CAAD,KAIxD;AACF,QAAMC,MAAgB,GAAG,CACrB,CACI,QADJ,EAEI,YAFJ,EAGI,cAHJ,EAII,kBAJJ,EAKI,iBALJ,EAMI,qBANJ,EAOI,uBAPJ,EAQI,2BARJ,EASI,qBATJ,EAUI,wBAVJ,EAWI,yBAXJ,EAYI,wBAZJ,EAaI,yBAbJ,EAcI,gCAdJ,EAeI,oCAfJ,EAgBI,mBAhBJ,EAiBI,sBAjBJ,EAkBI,uBAlBJ,EAmBI,sBAnBJ,EAoBI,uBApBJ,EAqBI,8BArBJ,EAsBI,kCAtBJ,EAuBI,mBAvBJ,EAwBI,uBAxBJ,EAyBI,yBAzBJ,EA0BI,6BA1BJ,EA2BI,iBA3BJ,EA4BI,qBA5BJ,EA6BI,uBA7BJ,EA8BI,2BA9BJ,EA+BEC,IA/BF,CA+BO,IA/BP,CADqB,CAAzB;;AAmCA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACG,MAAN,CAAaG,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC1C,UAAME,KAAK,GAAGP,KAAK,CAACG,MAAN,CAAaE,CAAb,CAAd,CAD0C,CAE1C;AACA;AACA;AACA;AACA;;AACA,UAAMG,iBAAiB,GAAG,kBAAIN,gBAAJ,EAAuB,GAAEK,KAAK,CAACN,IAAK,IAAGA,IAAK,oBAA5C,CAA1B;;AACA,QAAI,OAAOO,iBAAP,KAA6B,UAAjC,EAA6C;AACzCL,MAAAA,MAAM,CAACM,IAAP,CAAYD,iBAAiB,CAAC;AAAER,QAAAA,KAAF;AAASO,QAAAA;AAAT,OAAD,CAA7B;AACH;AACJ;;AAED,SAAOJ,MAAM,CAACO,MAAP,CAAcC,OAAd,EAAuBP,IAAvB,CAA4B,IAA5B,CAAP;AACH,CAtDM","sourcesContent":["import { CmsFieldTypePlugins, CmsContentModel } from \"../../../types\";\nimport get from \"lodash/get\";\n\ninterface RenderListFilterFields {\n    (params: {\n        model: CmsContentModel;\n        type: \"read\" | \"manage\";\n        fieldTypePlugins: CmsFieldTypePlugins;\n    }): string;\n}\n\nexport const renderListFilterFields: RenderListFilterFields = ({\n    model,\n    type,\n    fieldTypePlugins\n}) => {\n    const fields: string[] = [\n        [\n            \"id: ID\",\n            \"id_not: ID\",\n            \"id_in: [ID!]\",\n            \"id_not_in: [ID!]\",\n            \"entryId: String\",\n            \"entryId_not: String\",\n            \"entryId_in: [String!]\",\n            \"entryId_not_in: [String!]\",\n            \"createdOn: DateTime\",\n            \"createdOn_gt: DateTime\",\n            \"createdOn_gte: DateTime\",\n            \"createdOn_lt: DateTime\",\n            \"createdOn_lte: DateTime\",\n            \"createdOn_between: [DateTime!]\",\n            \"createdOn_not_between: [DateTime!]\",\n            \"savedOn: DateTime\",\n            \"savedOn_gt: DateTime\",\n            \"savedOn_gte: DateTime\",\n            \"savedOn_lt: DateTime\",\n            \"savedOn_lte: DateTime\",\n            \"savedOn_between: [DateTime!]\",\n            \"savedOn_not_between: [DateTime!]\",\n            \"createdBy: String\",\n            \"createdBy_not: String\",\n            \"createdBy_in: [String!]\",\n            \"createdBy_not_in: [String!]\",\n            \"ownedBy: String\",\n            \"ownedBy_not: String\",\n            \"ownedBy_in: [String!]\",\n            \"ownedBy_not_in: [String!]\"\n        ].join(\"\\n\")\n    ];\n\n    for (let i = 0; i < model.fields.length; i++) {\n        const field = model.fields[i];\n        // Every time a client updates content model's fields, we check the type of each field. If a field plugin\n        // for a particular \"field.type\" doesn't exist on the backend yet, we throw an error. But still, we also\n        // want to be careful when accessing the field plugin here too. It is still possible to have a content model\n        // that contains a field, for which we don't have a plugin registered on the backend. For example, user\n        // could've just removed the plugin from the backend.\n        const createListFilters = get(fieldTypePlugins, `${field.type}.${type}.createListFilters`);\n        if (typeof createListFilters === \"function\") {\n            fields.push(createListFilters({ model, field }));\n        }\n    }\n\n    return fields.filter(Boolean).join(\"\\n\");\n};\n"],"file":"renderListFilterFields.js"}