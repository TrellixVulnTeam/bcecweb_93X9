{"version":3,"sources":["../../../../src/content/plugins/utils/renderGetFilterFields.ts"],"names":["renderGetFilterFields","model","fieldTypePlugins","fieldIds","fields","filter","f","type","map","fieldId","filters","i","length","field","find","item","createGetFilters","push","Boolean","join"],"mappings":";;;;;;;;;AACA;;AAMO,MAAMA,qBAA4C,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAiC;AACzF,QAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAN,CACZC,MADY,CACLC,CAAC,IAAI;AACT;AACA;AACA;AACA;AACA;AACA,WAAO,kBAAIJ,gBAAJ,EAAuB,GAAEI,CAAC,CAACC,IAAK,eAAhC,CAAP;AACH,GARY,EASZC,GATY,CASRF,CAAC,IAAIA,CAAC,CAACG,OATC,CAAjB;AAWA,QAAMC,OAAO,GAAG,CAAC,QAAD,EAAW,iBAAX,CAAhB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,QAAQ,CAACS,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,UAAME,KAAK,GAAGZ,KAAK,CAACG,MAAN,CAAaU,IAAb,CAAkBC,IAAI,IAAIA,IAAI,CAACN,OAAL,KAAiBN,QAAQ,CAACQ,CAAD,CAAnD,CAAd;AACA,UAAMK,gBAAgB,GAAG,kBAAId,gBAAJ,EAAuB,GAAEW,KAAK,CAACN,IAAK,wBAApC,CAAzB;;AACA,QAAI,OAAOS,gBAAP,KAA4B,UAAhC,EAA4C;AACxCN,MAAAA,OAAO,CAACO,IAAR,CAAaD,gBAAgB,CAAC;AAAEf,QAAAA,KAAF;AAASY,QAAAA;AAAT,OAAD,CAA7B;AACH;AACJ;;AAED,SAAOH,OAAO,CAACL,MAAR,CAAea,OAAf,EAAwBC,IAAxB,CAA6B,IAA7B,CAAP;AACH,CAvBM","sourcesContent":["import { CmsFieldTypePlugins, CmsContentModel } from \"../../../types\";\nimport get from \"lodash/get\";\n\ninterface RenderGetFilterFields {\n    (params: { model: CmsContentModel; fieldTypePlugins: CmsFieldTypePlugins }): string;\n}\n\nexport const renderGetFilterFields: RenderGetFilterFields = ({ model, fieldTypePlugins }) => {\n    const fieldIds = model.fields\n        .filter(f => {\n            // Every time a client updates content model's fields, we check the type of each field. If a field plugin\n            // for a particular \"field.type\" doesn't exist on the backend yet, we throw an error. But still, we also\n            // want to be careful when accessing the field plugin here too. It is still possible to have a content model\n            // that contains a field, for which we don't have a plugin registered on the backend. For example, user\n            // could've just removed the plugin from the backend.\n            return get(fieldTypePlugins, `${f.type}.isSearchable`);\n        })\n        .map(f => f.fieldId);\n\n    const filters = [\"id: ID\", \"entryId: String\"];\n\n    for (let i = 0; i < fieldIds.length; i++) {\n        const field = model.fields.find(item => item.fieldId === fieldIds[i]);\n        const createGetFilters = get(fieldTypePlugins, `${field.type}.read.createGetFilters`);\n        if (typeof createGetFilters === \"function\") {\n            filters.push(createGetFilters({ model, field }));\n        }\n    }\n\n    return filters.filter(Boolean).join(\"\\n\");\n};\n"],"file":"renderGetFilterFields.js"}