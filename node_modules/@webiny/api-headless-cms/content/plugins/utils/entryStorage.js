"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.entryFieldFromStorageTransform = exports.entryFromStorageTransform = exports.entryToStorageTransform = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _error = _interopRequireDefault(require("@webiny/error"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const getStoragePluginFactory = context => {
  let defaultStoragePlugin;
  const storagePlugins = {};
  context.plugins.byType("cms-model-field-to-storage") // we reverse plugins because we want to get latest added only
  .reverse().forEach(plugin => {
    // check if it's a default plugin
    if (plugin.fieldType === "*" && !defaultStoragePlugin) {
      defaultStoragePlugin = plugin;
      return;
    } // either existing plugin added or plugin fieldType does not exist in current model
    // this is to iterate a bit less later


    if (!storagePlugins[plugin.fieldType]) {
      storagePlugins[plugin.fieldType] = plugin;
    }
  });
  return fieldType => storagePlugins[fieldType] || defaultStoragePlugin;
};
/**
 * This should be used when transforming the whole entry.
 */


const entryStorageTransform = async (context, model, operation, entry) => {
  const getStoragePlugin = getStoragePluginFactory(context);
  const transformedValues = {};

  for (const field of model.fields) {
    const plugin = getStoragePlugin(field.type); // TODO: remove this once plugins are converted into classes

    if (typeof plugin[operation] !== "function") {
      throw new _error.default(`Missing "${operation}" function in storage plugin "${plugin.name}" for field type "${field.type}"`);
    }

    transformedValues[field.fieldId] = await plugin[operation]({
      context,
      model,
      field,
      value: entry.values[field.fieldId],
      getStoragePlugin
    });
  }

  return _objectSpread(_objectSpread({}, entry), {}, {
    values: transformedValues
  });
};
/**
 * A function that is used in crud to transform entry into the storage type.
 */


const entryToStorageTransform = async (context, model, entry) => {
  return entryStorageTransform(context, model, "toStorage", entry);
};
/**
 * A function that is used to transform the whole entry from storage into its native form.
 */


exports.entryToStorageTransform = entryToStorageTransform;

const entryFromStorageTransform = async (context, model, entry) => {
  if (!entry) {
    return null;
  }

  return entryStorageTransform(context, model, "fromStorage", entry);
};

exports.entryFromStorageTransform = entryFromStorageTransform;

/*
 * A function that is used to transform a single field from storage
 */
const entryFieldFromStorageTransform = async params => {
  const {
    context,
    model,
    field,
    value
  } = params;
  const getStoragePlugin = getStoragePluginFactory(context);
  const plugin = getStoragePlugin(field.type); // TODO: remove this once plugins are converted into classes

  if (typeof plugin.fromStorage !== "function") {
    throw new _error.default(`Missing "fromStorage" function in storage plugin "${plugin.name}" for field type "${field.type}"`);
  }

  return plugin.fromStorage({
    context,
    model,
    field,
    value,
    getStoragePlugin
  });
};

exports.entryFieldFromStorageTransform = entryFieldFromStorageTransform;
//# sourceMappingURL=entryStorage.js.map