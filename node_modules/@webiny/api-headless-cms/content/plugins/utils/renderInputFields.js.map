{"version":3,"sources":["../../../../src/content/plugins/utils/renderInputFields.ts"],"names":["renderInputFields","model","fieldTypePlugins","fields","map","field","renderInputField","filter","Boolean","plugin","type","def","manage","createInputField"],"mappings":";;;;;;;AAcO,MAAMA,iBAAoC,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAiC;AACjF,SAAOD,KAAK,CAACE,MAAN,CACFC,GADE,CACEC,KAAK,IAAIC,gBAAgB,CAAC;AAAEL,IAAAA,KAAF;AAASI,IAAAA,KAAT;AAAgBH,IAAAA;AAAhB,GAAD,CAD3B,EAEFK,MAFE,CAEKC,OAFL,CAAP;AAGH,CAJM;;;;AAMA,MAAMF,gBAAgB,GAAG,CAAC;AAAEL,EAAAA,KAAF;AAASI,EAAAA,KAAT;AAAgBH,EAAAA;AAAhB,CAAD,KAAwC;AACpE;AACA;AACA;AACA;AACA;AACA,QAAMO,MAAoC,GAAGP,gBAAgB,CAACG,KAAK,CAACK,IAAP,CAA7D;;AAEA,MAAI,CAACD,MAAL,EAAa;AACT;AACA;AACH;;AAED,QAAME,GAAG,GAAGF,MAAM,CAACG,MAAP,CAAcC,gBAAd,CAA+B;AAAEZ,IAAAA,KAAF;AAASI,IAAAA,KAAT;AAAgBH,IAAAA;AAAhB,GAA/B,CAAZ;;AACA,MAAI,OAAOS,GAAP,KAAe,QAAnB,EAA6B;AACzB,WAAO;AAAER,MAAAA,MAAM,EAAEQ;AAAV,KAAP;AACH;;AAED,SAAOA,GAAP;AACH,CAnBM","sourcesContent":["import {\n    CmsFieldTypePlugins,\n    CmsContentModel,\n    CmsModelFieldDefinition,\n    CmsModelFieldToGraphQLPlugin\n} from \"~/types\";\n\ninterface RenderInputFields {\n    (params: {\n        model: CmsContentModel;\n        fieldTypePlugins: CmsFieldTypePlugins;\n    }): CmsModelFieldDefinition[];\n}\n\nexport const renderInputFields: RenderInputFields = ({ model, fieldTypePlugins }) => {\n    return model.fields\n        .map(field => renderInputField({ model, field, fieldTypePlugins }))\n        .filter(Boolean);\n};\n\nexport const renderInputField = ({ model, field, fieldTypePlugins }) => {\n    // Every time a client updates content model's fields, we check the type of each field. If a field plugin\n    // for a particular \"field.type\" doesn't exist on the backend yet, we throw an error. But still, we also\n    // want to be careful when accessing the field plugin here too. It is still possible to have a content model\n    // that contains a field, for which we don't have a plugin registered on the backend. For example, user\n    // could've just removed the plugin from the backend.\n    const plugin: CmsModelFieldToGraphQLPlugin = fieldTypePlugins[field.type];\n\n    if (!plugin) {\n        // Let's not render the field if it does not exist in the field plugins.\n        return;\n    }\n\n    const def = plugin.manage.createInputField({ model, field, fieldTypePlugins });\n    if (typeof def === \"string\") {\n        return { fields: def };\n    }\n\n    return def;\n};\n"],"file":"renderInputFields.js"}