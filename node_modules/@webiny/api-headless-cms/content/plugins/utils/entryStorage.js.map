{"version":3,"sources":["../../../../src/content/plugins/utils/entryStorage.ts"],"names":["getStoragePluginFactory","context","defaultStoragePlugin","storagePlugins","plugins","byType","reverse","forEach","plugin","fieldType","entryStorageTransform","model","operation","entry","getStoragePlugin","transformedValues","field","fields","type","Error","name","fieldId","value","values","entryToStorageTransform","entryFromStorageTransform","entryFieldFromStorageTransform","params","fromStorage"],"mappings":"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","sourcesContent":["import Error from \"@webiny/error\";\nimport {\n    CmsContentEntry,\n    CmsContentModel,\n    CmsContentModelField,\n    CmsContext,\n    CmsModelFieldToStoragePlugin\n} from \"~/types\";\n\ninterface GetStoragePluginFactory {\n    (context: CmsContext): (fieldType: string) => CmsModelFieldToStoragePlugin<any>;\n}\n\nconst getStoragePluginFactory: GetStoragePluginFactory = context => {\n    let defaultStoragePlugin: CmsModelFieldToStoragePlugin;\n    const storagePlugins = {};\n\n    context.plugins\n        .byType<CmsModelFieldToStoragePlugin>(\"cms-model-field-to-storage\")\n        // we reverse plugins because we want to get latest added only\n        .reverse()\n        .forEach(plugin => {\n            // check if it's a default plugin\n            if (plugin.fieldType === \"*\" && !defaultStoragePlugin) {\n                defaultStoragePlugin = plugin;\n                return;\n            }\n\n            // either existing plugin added or plugin fieldType does not exist in current model\n            // this is to iterate a bit less later\n            if (!storagePlugins[plugin.fieldType]) {\n                storagePlugins[plugin.fieldType] = plugin;\n            }\n        });\n\n    return fieldType => storagePlugins[fieldType] || defaultStoragePlugin;\n};\n\n/**\n * This should be used when transforming the whole entry.\n */\nconst entryStorageTransform = async (\n    context: CmsContext,\n    model: CmsContentModel,\n    operation: \"toStorage\" | \"fromStorage\",\n    entry: CmsContentEntry\n): Promise<CmsContentEntry> => {\n    const getStoragePlugin = getStoragePluginFactory(context);\n\n    const transformedValues: Record<string, any> = {};\n    for (const field of model.fields) {\n        const plugin = getStoragePlugin(field.type);\n        // TODO: remove this once plugins are converted into classes\n        if (typeof plugin[operation] !== \"function\") {\n            throw new Error(\n                `Missing \"${operation}\" function in storage plugin \"${plugin.name}\" for field type \"${field.type}\"`\n            );\n        }\n\n        transformedValues[field.fieldId] = await plugin[operation]({\n            context,\n            model,\n            field,\n            value: entry.values[field.fieldId],\n            getStoragePlugin\n        });\n    }\n\n    return { ...entry, values: transformedValues };\n};\n\n/**\n * A function that is used in crud to transform entry into the storage type.\n */\nexport const entryToStorageTransform = async (\n    context: CmsContext,\n    model: CmsContentModel,\n    entry: CmsContentEntry\n): Promise<CmsContentEntry> => {\n    return entryStorageTransform(context, model, \"toStorage\", entry);\n};\n\n/**\n * A function that is used to transform the whole entry from storage into its native form.\n */\nexport const entryFromStorageTransform = async (\n    context: CmsContext,\n    model: CmsContentModel,\n    entry?: CmsContentEntry & Record<string, any>\n): Promise<CmsContentEntry> => {\n    if (!entry) {\n        return null;\n    }\n    return entryStorageTransform(context, model, \"fromStorage\", entry);\n};\n\ninterface EntryFieldFromStorageTransformParams {\n    context: CmsContext;\n    model: CmsContentModel;\n    field: CmsContentModelField;\n    value: any;\n}\n/*\n * A function that is used to transform a single field from storage\n */\nexport const entryFieldFromStorageTransform = async (\n    params: EntryFieldFromStorageTransformParams\n): Promise<any> => {\n    const { context, model, field, value } = params;\n    const getStoragePlugin = getStoragePluginFactory(context);\n\n    const plugin = getStoragePlugin(field.type);\n\n    // TODO: remove this once plugins are converted into classes\n    if (typeof plugin.fromStorage !== \"function\") {\n        throw new Error(\n            `Missing \"fromStorage\" function in storage plugin \"${plugin.name}\" for field type \"${field.type}\"`\n        );\n    }\n\n    return plugin.fromStorage({\n        context,\n        model,\n        field,\n        value,\n        getStoragePlugin\n    });\n};\n"],"file":"entryStorage.js"}