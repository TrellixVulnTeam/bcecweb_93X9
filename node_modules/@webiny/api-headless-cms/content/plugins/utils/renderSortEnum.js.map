{"version":3,"sources":["../../../../src/content/plugins/utils/renderSortEnum.ts"],"names":["renderSortEnum","model","fieldTypePlugins","sorters","fieldIds","fields","filter","f","type","map","fieldId","forEach","push","join"],"mappings":";;;;;;;;;AACA;;AAMO,MAAMA,cAA8B,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAiC;AAC3E,QAAMC,OAAO,GAAG,CACX,QADW,EAEX,SAFW,EAGZ,aAHY,EAIZ,cAJY,EAKZ,eALY,EAMZ,gBANY,CAAhB;AASA,QAAMC,QAAQ,GAAGH,KAAK,CAACI,MAAN,CACZC,MADY,CACLC,CAAC,IAAI;AACT;AACA;AACA;AACA;AACA;AACA,WAAO,kBAAIL,gBAAJ,EAAuB,GAAEK,CAAC,CAACC,IAAK,aAAhC,CAAP;AACH,GARY,EASZC,GATY,CASRF,CAAC,IAAIA,CAAC,CAACG,OATC,CAAjB;AAWAN,EAAAA,QAAQ,CAACO,OAAT,CAAiBD,OAAO,IAAI;AACxBP,IAAAA,OAAO,CAACS,IAAR,CAAc,GAAEF,OAAQ,MAAxB;AACAP,IAAAA,OAAO,CAACS,IAAR,CAAc,GAAEF,OAAQ,OAAxB;AACH,GAHD;AAKA,SAAOP,OAAO,CAACU,IAAR,CAAa,IAAb,CAAP;AACH,CA3BM","sourcesContent":["import { CmsFieldTypePlugins, CmsContentModel } from \"../../../types\";\nimport get from \"lodash/get\";\n\ninterface RenderSortEnum {\n    (params: { model: CmsContentModel; fieldTypePlugins: CmsFieldTypePlugins }): string;\n}\n\nexport const renderSortEnum: RenderSortEnum = ({ model, fieldTypePlugins }) => {\n    const sorters = [\n        `id_ASC`,\n        `id_DESC`,\n        \"savedOn_ASC\",\n        \"savedOn_DESC\",\n        \"createdOn_ASC\",\n        \"createdOn_DESC\"\n    ];\n\n    const fieldIds = model.fields\n        .filter(f => {\n            // Every time a client updates content model's fields, we check the type of each field. If a field plugin\n            // for a particular \"field.type\" doesn't exist on the backend yet, we throw an error. But still, we also\n            // want to be careful when accessing the field plugin here too. It is still possible to have a content model\n            // that contains a field, for which we don't have a plugin registered on the backend. For example, user\n            // could've just removed the plugin from the backend.\n            return get(fieldTypePlugins, `${f.type}.isSortable`);\n        })\n        .map(f => f.fieldId);\n\n    fieldIds.forEach(fieldId => {\n        sorters.push(`${fieldId}_ASC`);\n        sorters.push(`${fieldId}_DESC`);\n    });\n\n    return sorters.join(\"\\n\");\n};\n"],"file":"renderSortEnum.js"}