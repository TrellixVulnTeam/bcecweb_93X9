{"version":3,"sources":["../../../../src/content/plugins/validators/pattern.ts"],"names":["plugin","type","name","validator","validate","value","context","settings","pattern","preset","patternPlugin","plugins","byType","find","item","RegExp","regex","flags","test"],"mappings":";;;;;;AAEA,MAAMA,MAAoC,GAAG;AACzCC,EAAAA,IAAI,EAAE,2BADmC;AAEzCC,EAAAA,IAAI,EAAE,mCAFmC;AAGzCC,EAAAA,SAAS,EAAE;AACPD,IAAAA,IAAI,EAAE,SADC;;AAEP,UAAME,QAAN,CAAe;AAAEC,MAAAA,KAAF;AAASF,MAAAA,SAAT;AAAoBG,MAAAA;AAApB,KAAf,EAA8C;AAC1C,UAAI,CAACD,KAAL,EAAY;AACR,eAAO,IAAP;AACH;;AAED,YAAM;AAAEE,QAAAA;AAAF,UAAeJ,SAArB;AAEA,UAAIK,OAAJ;;AACA,UAAID,QAAQ,CAACE,MAAT,KAAoB,QAAxB,EAAkC;AAC9BD,QAAAA,OAAO,GAAGD,QAAV;AACH,OAFD,MAEO;AACH,cAAMG,aAAa,GAAGJ,OAAO,CAACK,OAAR,CACjBC,MADiB,CAEd,mCAFc,EAIjBC,IAJiB,CAIZC,IAAI,IAAIA,IAAI,CAACN,OAAL,CAAaN,IAAb,KAAsBK,QAAQ,CAACE,MAJ3B,CAAtB;;AAMA,YAAIC,aAAJ,EAAmB;AACfF,UAAAA,OAAO,GAAGE,aAAa,CAACF,OAAxB;AACH;AACJ;;AAED,UAAI,CAACA,OAAL,EAAc;AACV,eAAO,IAAP;AACH;;AAED,aAAO,IAAIO,MAAJ,CAAWP,OAAO,CAACQ,KAAnB,EAA0BR,OAAO,CAACS,KAAlC,EAAyCC,IAAzC,CAA8Cb,KAA9C,CAAP;AACH;;AA7BM;AAH8B,CAA7C;eAoCeL,M","sourcesContent":["import { CmsModelFieldPatternValidatorPlugin, CmsModelFieldValidatorPlugin } from \"../../../types\";\n\nconst plugin: CmsModelFieldValidatorPlugin = {\n    type: \"cms-model-field-validator\",\n    name: \"cms-model-field-validator-pattern\",\n    validator: {\n        name: \"pattern\",\n        async validate({ value, validator, context }) {\n            if (!value) {\n                return true;\n            }\n\n            const { settings } = validator;\n\n            let pattern;\n            if (settings.preset === \"custom\") {\n                pattern = settings;\n            } else {\n                const patternPlugin = context.plugins\n                    .byType<CmsModelFieldPatternValidatorPlugin>(\n                        \"cms-model-field-validator-pattern\"\n                    )\n                    .find(item => item.pattern.name === settings.preset);\n\n                if (patternPlugin) {\n                    pattern = patternPlugin.pattern;\n                }\n            }\n\n            if (!pattern) {\n                return true;\n            }\n\n            return new RegExp(pattern.regex, pattern.flags).test(value);\n        }\n    }\n};\n\nexport default plugin;\n"],"file":"pattern.js"}