{"version":3,"sources":["../../../../src/content/plugins/crud/contentModelGroup.crud.ts"],"names":["CreateContentModelGroupModel","name","validation","create","slug","description","icon","UpdateContentModelGroupModel","type","apply","context","cms","pluginType","providerPlugins","plugins","byType","providerPlugin","length","WebinyError","storageOperations","provide","checkPermissions","check","utils","rwd","groupsGet","id","groupPlugin","ContentModelGroupPlugin","find","item","contentModelGroup","group","get","ex","message","code","data","NotFoundError","groupsList","args","where","limit","pluginsGroups","map","plugin","databaseGroups","list","groups","operations","noAuth","permission","checkOwnership","validateGroupAccess","response","filter","validateOwnership","inputData","createdData","populate","toSlug","validate","input","toJSON","identity","security","getIdentity","locale","getLocale","createdOn","Date","toISOString","savedOn","createdBy","displayName","update","updatedDataJson","onlyDirty","Object","keys","assign","updatedGroup","delete"],"mappings":"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","sourcesContent":["import { withFields, string } from \"@commodo/fields\";\nimport { ContextPlugin } from \"@webiny/handler/types\";\nimport { validation } from \"@webiny/validation\";\nimport mdbid from \"mdbid\";\nimport {\n    CmsContentModelGroupContext,\n    CmsContentModelGroupListArgs,\n    CmsContentModelGroupPermission,\n    CmsContentModelGroup,\n    CmsContext,\n    CmsContentModelGroupStorageOperationsProvider\n} from \"../../../types\";\nimport * as utils from \"../../../utils\";\nimport { beforeDeleteHook } from \"./contentModelGroup/beforeDelete.hook\";\nimport { beforeCreateHook } from \"./contentModelGroup/beforeCreate.hook\";\nimport { afterDeleteHook } from \"./contentModelGroup/afterDelete.hook\";\nimport { NotFoundError } from \"@webiny/handler-graphql\";\nimport WebinyError from \"@webiny/error\";\nimport { afterUpdateHook } from \"./contentModelGroup/afterUpdate.hook\";\nimport { beforeUpdateHook } from \"./contentModelGroup/beforeUpdate.hook\";\nimport { afterCreateHook } from \"./contentModelGroup/afterCreate.hook\";\nimport { ContentModelGroupPlugin } from \"~/content/plugins/ContentModelGroupPlugin\";\n\nconst CreateContentModelGroupModel = withFields({\n    name: string({ validation: validation.create(\"required,maxLength:100\") }),\n    slug: string({ validation: validation.create(\"maxLength:100\") }),\n    description: string({ validation: validation.create(\"maxLength:255\") }),\n    icon: string({ validation: validation.create(\"required,maxLength:255\") })\n})();\n\nconst UpdateContentModelGroupModel = withFields({\n    name: string({ validation: validation.create(\"maxLength:100\") }),\n    description: string({ validation: validation.create(\"maxLength:255\") }),\n    icon: string({ validation: validation.create(\"maxLength:255\") })\n})();\n\nexport default (): ContextPlugin<CmsContext> => ({\n    type: \"context\",\n    async apply(context) {\n        /**\n         * If cms is not defined on the context, do not continue, but log it.\n         */\n        if (!context.cms) {\n            return;\n        }\n        const pluginType = \"cms-content-model-group-storage-operations-provider\";\n        const providerPlugins =\n            context.plugins.byType<CmsContentModelGroupStorageOperationsProvider>(pluginType);\n        /**\n         * Storage operations operations for the content model group.\n         * Contains logic to save the data into the specific storage.\n         */\n        const providerPlugin = providerPlugins[providerPlugins.length - 1];\n        if (!providerPlugin) {\n            throw new WebinyError(`Missing \"${pluginType}\" plugin.`, \"PLUGIN_NOT_FOUND\", {\n                type: pluginType\n            });\n        }\n\n        const storageOperations = await providerPlugin.provide({\n            context\n        });\n\n        const checkPermissions = (check: string): Promise<CmsContentModelGroupPermission> => {\n            return utils.checkPermissions(context, \"cms.contentModelGroup\", { rwd: check });\n        };\n\n        const groupsGet = async (id: string) => {\n            const groupPlugin: ContentModelGroupPlugin = context.plugins\n                .byType<ContentModelGroupPlugin>(ContentModelGroupPlugin.type)\n                .find((item: ContentModelGroupPlugin) => item.contentModelGroup.id === id);\n\n            if (groupPlugin) {\n                return groupPlugin.contentModelGroup;\n            }\n\n            let group: CmsContentModelGroup | null = null;\n            try {\n                group = await storageOperations.get({ id });\n            } catch (ex) {\n                throw new WebinyError(ex.message, ex.code || \"GET_ERROR\", {\n                    ...(ex.data || {}),\n                    id\n                });\n            }\n            if (!group) {\n                throw new NotFoundError(`Content model group \"${id}\" was not found!`);\n            }\n\n            return group;\n        };\n\n        const groupsList = async (args?: CmsContentModelGroupListArgs) => {\n            const { where, limit } = args || {};\n            try {\n                const pluginsGroups: CmsContentModelGroup[] = context.plugins\n                    .byType<ContentModelGroupPlugin>(ContentModelGroupPlugin.type)\n                    .map<CmsContentModelGroup>(plugin => plugin.contentModelGroup);\n\n                const databaseGroups = await storageOperations.list({ where, limit });\n\n                return [...databaseGroups, ...pluginsGroups];\n            } catch (ex) {\n                throw new WebinyError(ex.message, ex.code || \"LIST_ERROR\", {\n                    ...(ex.data || {}),\n                    where,\n                    limit\n                });\n            }\n        };\n\n        const groups: CmsContentModelGroupContext = {\n            operations: storageOperations,\n            noAuth: () => {\n                return {\n                    get: groupsGet,\n                    list: groupsList\n                };\n            },\n            get: async id => {\n                const permission = await checkPermissions(\"r\");\n\n                const group = await groupsGet(id);\n                utils.checkOwnership(context, permission, group);\n                utils.validateGroupAccess(context, permission, group);\n\n                return group;\n            },\n            list: async args => {\n                const permission = await checkPermissions(\"r\");\n\n                const response = await groupsList(args);\n\n                return response.filter(group => {\n                    if (!utils.validateOwnership(context, permission, group)) {\n                        return false;\n                    }\n                    return utils.validateGroupAccess(context, permission, group);\n                });\n            },\n            create: async inputData => {\n                await checkPermissions(\"w\");\n\n                const createdData = new CreateContentModelGroupModel().populate({\n                    ...inputData,\n                    slug: inputData.slug ? utils.toSlug(inputData.slug) : \"\"\n                });\n                await createdData.validate();\n                const input = await createdData.toJSON();\n\n                const identity = context.security.getIdentity();\n\n                const id = mdbid();\n                const data: CmsContentModelGroup = {\n                    ...input,\n                    id,\n                    locale: context.cms.getLocale().code,\n                    createdOn: new Date().toISOString(),\n                    savedOn: new Date().toISOString(),\n                    createdBy: {\n                        id: identity.id,\n                        displayName: identity.displayName,\n                        type: identity.type\n                    }\n                };\n                try {\n                    await beforeCreateHook({\n                        context,\n                        storageOperations,\n                        input,\n                        data\n                    });\n                    const group = await storageOperations.create({\n                        input,\n                        data\n                    });\n                    await afterCreateHook({\n                        context,\n                        storageOperations,\n                        input,\n                        group\n                    });\n                    return group;\n                } catch (ex) {\n                    throw new WebinyError(\n                        ex.message || \"Could not save data model group.\",\n                        ex.code || \"ERROR_ON_CREATE\",\n                        {\n                            ...(ex.data || {}),\n                            data,\n                            input\n                        }\n                    );\n                }\n            },\n            update: async (id, inputData) => {\n                const permission = await checkPermissions(\"w\");\n\n                const group = await groupsGet(id);\n\n                utils.checkOwnership(context, permission, group);\n\n                const input = new UpdateContentModelGroupModel().populate(inputData);\n                await input.validate();\n\n                const updatedDataJson = await input.toJSON({ onlyDirty: true });\n\n                // no need to continue if no values were changed\n                if (Object.keys(updatedDataJson).length === 0) {\n                    return group;\n                }\n\n                const data: CmsContentModelGroup = Object.assign(updatedDataJson, {\n                    savedOn: new Date().toISOString()\n                });\n\n                try {\n                    await beforeUpdateHook({\n                        context,\n                        storageOperations,\n                        group,\n                        input,\n                        data\n                    });\n                    const updatedGroup = await storageOperations.update({\n                        group,\n                        data,\n                        input\n                    });\n                    await afterUpdateHook({\n                        context,\n                        storageOperations,\n                        group: updatedGroup,\n                        data,\n                        input\n                    });\n                    return updatedGroup;\n                } catch (ex) {\n                    throw new WebinyError(ex.message, ex.code || \"UPDATE_ERROR\", {\n                        ...(ex.data || {}),\n                        group,\n                        data,\n                        input\n                    });\n                }\n            },\n            delete: async id => {\n                const permission = await checkPermissions(\"d\");\n\n                const group = await groupsGet(id);\n\n                utils.checkOwnership(context, permission, group);\n\n                try {\n                    await beforeDeleteHook({\n                        context,\n                        storageOperations,\n                        group\n                    });\n                    await storageOperations.delete({ group });\n                    await afterDeleteHook({\n                        context,\n                        storageOperations,\n                        group\n                    });\n                } catch (ex) {\n                    throw new WebinyError(ex.message, ex.code || \"DELETE_ERROR\", {\n                        ...(ex.data || {}),\n                        id\n                    });\n                }\n\n                return true;\n            }\n        };\n\n        context.cms = {\n            ...(context.cms || ({} as any)),\n            groups\n        };\n    }\n});\n"],"file":"contentModelGroup.crud.js"}