{"version":3,"sources":["../../../../src/content/plugins/crud/contentModel.crud.ts"],"names":["type","name","apply","context","cms","pluginType","providerPlugins","plugins","byType","providerPlugin","length","WebinyError","storageOperations","provide","loaders","listModels","DataLoader","models","list","managers","Map","updateManager","model","manager","set","modelId","checkModelPermissions","check","utils","checkPermissions","rwd","modelsGet","pluginModel","ContentModelPlugin","find","plugin","contentModel","databaseModel","get","id","NotFoundError","modelsList","databaseModels","load","pluginsModels","map","operations","noAuth","silentAuth","ex","NotAuthorizedError","permission","checkOwnership","checkModelAccess","filterAsync","validateOwnership","validateModelAccess","create","inputData","createdData","CreateContentModelModel","populate","validate","input","toJSON","group","groups","identity","security","getIdentity","data","titleFieldId","locale","getLocale","code","createdBy","displayName","createdOn","Date","toISOString","savedOn","fields","lockedFields","layout","updateModel","resultModel","update","updatedData","UpdateContentModelModel","onlyDirty","Object","keys","modelFields","delete","result","getManager","has","m","getManagers","getModel"],"mappings":"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","sourcesContent":["import { ContextPlugin } from \"@webiny/handler/types\";\nimport {\n    CmsContext,\n    CmsContentModel,\n    CmsContentModelContext,\n    CmsContentModelManager,\n    CmsContentModelPermission,\n    CmsContentModelStorageOperationsProvider,\n    CmsContentModelUpdateInput\n} from \"~/types\";\nimport * as utils from \"~/utils\";\nimport DataLoader from \"dataloader\";\nimport { NotFoundError } from \"@webiny/handler-graphql\";\nimport { contentModelManagerFactory } from \"./contentModel/contentModelManagerFactory\";\nimport { CreateContentModelModel, UpdateContentModelModel } from \"./contentModel/models\";\nimport { createFieldModels } from \"./contentModel/createFieldModels\";\nimport { validateLayout } from \"./contentModel/validateLayout\";\nimport {\n    beforeCreateHook,\n    afterCreateHook,\n    beforeUpdateHook,\n    afterUpdateHook,\n    beforeDeleteHook,\n    afterDeleteHook\n} from \"./contentModel/hooks\";\nimport { NotAuthorizedError } from \"@webiny/api-security\";\nimport WebinyError from \"@webiny/error\";\nimport { ContentModelPlugin } from \"@webiny/api-headless-cms/content/plugins/ContentModelPlugin\";\n\nexport default (): ContextPlugin<CmsContext> => ({\n    type: \"context\",\n    name: \"context-content-model-storageOperations\",\n    async apply(context) {\n        /**\n         * If cms is not defined on the context, do not continue, but log it.\n         */\n        if (!context.cms) {\n            return;\n        }\n\n        const pluginType = \"cms-content-model-storage-operations-provider\";\n        const providerPlugins =\n            context.plugins.byType<CmsContentModelStorageOperationsProvider>(pluginType);\n        /**\n         * Storage operations for the content model.\n         * Contains logic to save the data into the specific storage.\n         */\n        const providerPlugin = providerPlugins[providerPlugins.length - 1];\n        if (!providerPlugin) {\n            throw new WebinyError(`Missing \"${pluginType}\" plugin.`, \"PLUGIN_NOT_FOUND\", {\n                type: pluginType\n            });\n        }\n\n        const storageOperations = await providerPlugin.provide({\n            context\n        });\n\n        const loaders = {\n            listModels: new DataLoader(async () => {\n                const models = await storageOperations.list();\n                return [models];\n            })\n        };\n\n        const managers = new Map<string, CmsContentModelManager>();\n        const updateManager = async (\n            context: CmsContext,\n            model: CmsContentModel\n        ): Promise<CmsContentModelManager> => {\n            const manager = await contentModelManagerFactory(context, model);\n            managers.set(model.modelId, manager);\n            return manager;\n        };\n\n        const checkModelPermissions = (check: string): Promise<CmsContentModelPermission> => {\n            return utils.checkPermissions(context, \"cms.contentModel\", { rwd: check });\n        };\n\n        const modelsGet = async (modelId: string) => {\n            const pluginModel: ContentModelPlugin = context.plugins\n                .byType<ContentModelPlugin>(ContentModelPlugin.type)\n                .find(plugin => plugin.contentModel.modelId === modelId);\n\n            if (pluginModel) {\n                return pluginModel.contentModel;\n            }\n\n            const databaseModel = await storageOperations.get({\n                id: modelId\n            });\n\n            if (!databaseModel) {\n                throw new NotFoundError(`Content model \"${modelId}\" was not found!`);\n            }\n\n            return databaseModel;\n        };\n\n        const modelsList = async (): Promise<CmsContentModel[]> => {\n            const databaseModels = await loaders.listModels.load(\"listModels\");\n\n            const pluginsModels: CmsContentModel[] = context.plugins\n                .byType<ContentModelPlugin>(ContentModelPlugin.type)\n                .map<CmsContentModel>(plugin => plugin.contentModel);\n\n            return [...databaseModels, ...pluginsModels];\n        };\n\n        const models: CmsContentModelContext = {\n            operations: storageOperations,\n            noAuth: () => {\n                return {\n                    get: modelsGet,\n                    list: modelsList\n                };\n            },\n            silentAuth: () => {\n                return {\n                    list: async () => {\n                        try {\n                            return await models.list();\n                        } catch (ex) {\n                            if (ex instanceof NotAuthorizedError) {\n                                return [];\n                            }\n                            throw ex;\n                        }\n                    }\n                };\n            },\n            async get(modelId) {\n                const permission = await checkModelPermissions(\"r\");\n\n                const model = await modelsGet(modelId);\n\n                utils.checkOwnership(context, permission, model);\n                await utils.checkModelAccess(context, model);\n\n                return model;\n            },\n            async list() {\n                const permission = await checkModelPermissions(\"r\");\n                const models = await modelsList();\n                return utils.filterAsync(models, async model => {\n                    if (!utils.validateOwnership(context, permission, model)) {\n                        return false;\n                    }\n                    return utils.validateModelAccess(context, model);\n                });\n            },\n            async create(inputData) {\n                await checkModelPermissions(\"w\");\n\n                const createdData = new CreateContentModelModel().populate(inputData);\n                await createdData.validate();\n                const input = await createdData.toJSON();\n\n                const group = await context.cms.groups.noAuth().get(input.group);\n                if (!group) {\n                    throw new NotFoundError(`There is no group \"${input.group}\".`);\n                }\n\n                const identity = context.security.getIdentity();\n                const data: CmsContentModel = {\n                    ...input,\n                    titleFieldId: \"id\",\n                    locale: context.cms.getLocale().code,\n                    group: {\n                        id: group.id,\n                        name: group.name\n                    },\n                    createdBy: {\n                        id: identity.id,\n                        displayName: identity.displayName,\n                        type: identity.type\n                    },\n                    createdOn: new Date().toISOString(),\n                    savedOn: new Date().toISOString(),\n                    fields: [],\n                    lockedFields: [],\n                    layout: []\n                };\n\n                await beforeCreateHook({ context, storageOperations, input, data });\n\n                const model = await storageOperations.create({\n                    input,\n                    data\n                });\n\n                await updateManager(context, model);\n\n                await afterCreateHook({ context, storageOperations, input, model });\n\n                return model;\n            },\n            /**\n             * Method does not check for permissions or ownership.\n             * @internal\n             */\n            async updateModel(model, data) {\n                const input = data as unknown as CmsContentModelUpdateInput;\n                await beforeUpdateHook({\n                    context,\n                    storageOperations,\n                    model,\n                    data,\n                    input\n                });\n\n                const resultModel = await storageOperations.update({\n                    data,\n                    model,\n                    input\n                });\n\n                await updateManager(context, resultModel);\n\n                await afterUpdateHook({\n                    context,\n                    storageOperations,\n                    model: resultModel,\n                    data,\n                    input\n                });\n\n                return resultModel;\n            },\n            async update(modelId, inputData) {\n                await checkModelPermissions(\"w\");\n\n                // Get a model record; this will also perform ownership validation.\n                const model = await context.cms.models.get(modelId);\n\n                const updatedData = new UpdateContentModelModel().populate(inputData);\n                await updatedData.validate();\n\n                const input = await updatedData.toJSON({ onlyDirty: true });\n                if (Object.keys(input).length === 0) {\n                    return {} as any;\n                }\n                if (input.group) {\n                    const group = await context.cms.groups.noAuth().get(input.group);\n                    if (!group) {\n                        throw new NotFoundError(`There is no group \"${input.group}\".`);\n                    }\n                    input.group = {\n                        id: group.id,\n                        name: group.name\n                    };\n                }\n                const modelFields = await createFieldModels(model, inputData);\n                validateLayout(input, modelFields);\n                const data: Partial<CmsContentModel> = {\n                    ...input,\n                    fields: modelFields,\n                    savedOn: new Date().toISOString()\n                };\n\n                await beforeUpdateHook({\n                    context,\n                    storageOperations,\n                    model,\n                    data,\n                    input\n                });\n\n                const resultModel = await storageOperations.update({\n                    data,\n                    model,\n                    input\n                });\n\n                await updateManager(context, resultModel);\n\n                await afterUpdateHook({\n                    context,\n                    storageOperations,\n                    model: resultModel,\n                    data,\n                    input\n                });\n\n                return resultModel;\n            },\n            async delete(modelId) {\n                await checkModelPermissions(\"d\");\n\n                const model = await context.cms.models.get(modelId);\n\n                await beforeDeleteHook({\n                    context,\n                    storageOperations,\n                    model\n                });\n\n                const result = await storageOperations.delete({\n                    model\n                });\n                if (!result) {\n                    throw new WebinyError(\n                        \"Could not delete the content model\",\n                        \"CONTENT_MODEL_DELETE_ERROR\",\n                        {\n                            modelId: model.modelId\n                        }\n                    );\n                }\n\n                await afterDeleteHook({ context, storageOperations, model });\n\n                managers.delete(model.modelId);\n            },\n            async getManager(modelId) {\n                if (managers.has(modelId)) {\n                    return managers.get(modelId);\n                }\n                const models = await modelsList();\n                const model = models.find(m => m.modelId === modelId);\n                if (!model) {\n                    throw new NotFoundError(`There is no content model \"${modelId}\".`);\n                }\n                return await updateManager(context, model);\n            },\n            getManagers: () => managers\n        };\n\n        context.cms = {\n            ...(context.cms || ({} as any)),\n            models,\n            getModel: (modelId: string) => {\n                return models.getManager(modelId);\n            }\n        };\n    }\n});\n"],"file":"contentModel.crud.js"}