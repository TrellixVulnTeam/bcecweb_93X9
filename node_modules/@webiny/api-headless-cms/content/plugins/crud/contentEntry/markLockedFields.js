"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.markLockedFields = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _error = _interopRequireDefault(require("@webiny/error"));

var _ContentModelPlugin = require("../../../plugins/ContentModelPlugin");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const markLockedFields = async ({
  model,
  context
}) => {
  // If the model is registered via a plugin, we don't need do process anything.
  const plugins = context.plugins.byType(_ContentModelPlugin.ContentModelPlugin.type);

  if (plugins.find(plugin => plugin.contentModel.modelId === model.modelId)) {
    return;
  }

  const cmsLockedFieldPlugins = context.plugins.byType("cms-model-locked-field");
  const existingLockedFields = model.lockedFields || [];
  const lockedFields = [];

  for (const field of model.fields) {
    const alreadyLocked = existingLockedFields.some(lockedField => lockedField.fieldId === field.fieldId);

    if (alreadyLocked) {
      continue;
    }

    let lockedFieldData = {};
    const lockedFieldPlugins = cmsLockedFieldPlugins.filter(pl => pl.fieldType === field.type);

    for (const plugin of lockedFieldPlugins) {
      if (typeof plugin.getLockedFieldData !== "function") {
        continue;
      }

      const data = plugin.getLockedFieldData({
        field
      });
      lockedFieldData = _objectSpread(_objectSpread({}, lockedFieldData), data);
    }

    lockedFields.push(_objectSpread({
      fieldId: field.fieldId,
      multipleValues: field.multipleValues,
      type: field.type
    }, lockedFieldData));
  } // no need to update anything if no locked fields were added


  if (lockedFields.length === 0) {
    return;
  }

  model.lockedFields = existingLockedFields.concat(lockedFields);

  try {
    await context.cms.models.updateModel(model, {
      lockedFields: model.lockedFields
    });
  } catch (ex) {
    throw new _error.default(`Could not update model "${model.modelId}" with new locked fields.`, "MODEL_LOCKED_FIELDS_UPDATE_FAILED", ex);
  }
};

exports.markLockedFields = markLockedFields;
//# sourceMappingURL=markLockedFields.js.map