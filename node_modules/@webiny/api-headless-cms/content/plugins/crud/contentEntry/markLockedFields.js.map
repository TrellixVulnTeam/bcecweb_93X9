{"version":3,"sources":["../../../../../src/content/plugins/crud/contentEntry/markLockedFields.ts"],"names":["markLockedFields","model","context","plugins","byType","ContentModelPlugin","type","find","plugin","contentModel","modelId","cmsLockedFieldPlugins","existingLockedFields","lockedFields","field","fields","alreadyLocked","some","lockedField","fieldId","lockedFieldData","lockedFieldPlugins","filter","pl","fieldType","getLockedFieldData","data","push","multipleValues","length","concat","cms","models","updateModel","ex","WebinyError"],"mappings":";;;;;;;;;;;AAMA;;AACA;;;;;;AAOO,MAAMA,gBAAgB,GAAG,OAAO;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAP,KAAmD;AAC/E;AACA,QAAMC,OAAO,GAAGD,OAAO,CAACC,OAAR,CAAgBC,MAAhB,CAA2CC,uCAAmBC,IAA9D,CAAhB;;AACA,MAAIH,OAAO,CAACI,IAAR,CAAaC,MAAM,IAAIA,MAAM,CAACC,YAAP,CAAoBC,OAApB,KAAgCT,KAAK,CAACS,OAA7D,CAAJ,EAA2E;AACvE;AACH;;AAED,QAAMC,qBAAqB,GACvBT,OAAO,CAACC,OAAR,CAAgBC,MAAhB,CAAkD,wBAAlD,CADJ;AAGA,QAAMQ,oBAAoB,GAAGX,KAAK,CAACY,YAAN,IAAsB,EAAnD;AACA,QAAMA,YAAY,GAAG,EAArB;;AACA,OAAK,MAAMC,KAAX,IAAoBb,KAAK,CAACc,MAA1B,EAAkC;AAC9B,UAAMC,aAAa,GAAGJ,oBAAoB,CAACK,IAArB,CAClBC,WAAW,IAAIA,WAAW,CAACC,OAAZ,KAAwBL,KAAK,CAACK,OAD3B,CAAtB;;AAGA,QAAIH,aAAJ,EAAmB;AACf;AACH;;AAED,QAAII,eAAe,GAAG,EAAtB;AAEA,UAAMC,kBAAkB,GAAGV,qBAAqB,CAACW,MAAtB,CAA6BC,EAAE,IAAIA,EAAE,CAACC,SAAH,KAAiBV,KAAK,CAACR,IAA1D,CAA3B;;AACA,SAAK,MAAME,MAAX,IAAqBa,kBAArB,EAAyC;AACrC,UAAI,OAAOb,MAAM,CAACiB,kBAAd,KAAqC,UAAzC,EAAqD;AACjD;AACH;;AACD,YAAMC,IAAI,GAAGlB,MAAM,CAACiB,kBAAP,CAA0B;AACnCX,QAAAA;AADmC,OAA1B,CAAb;AAGAM,MAAAA,eAAe,mCAAQA,eAAR,GAA4BM,IAA5B,CAAf;AACH;;AAEDb,IAAAA,YAAY,CAACc,IAAb;AACIR,MAAAA,OAAO,EAAEL,KAAK,CAACK,OADnB;AAEIS,MAAAA,cAAc,EAAEd,KAAK,CAACc,cAF1B;AAGItB,MAAAA,IAAI,EAAEQ,KAAK,CAACR;AAHhB,OAIOc,eAJP;AAMH,GAvC8E,CAwC/E;;;AACA,MAAIP,YAAY,CAACgB,MAAb,KAAwB,CAA5B,EAA+B;AAC3B;AACH;;AAED5B,EAAAA,KAAK,CAACY,YAAN,GAAqBD,oBAAoB,CAACkB,MAArB,CAA4BjB,YAA5B,CAArB;;AAEA,MAAI;AACA,UAAMX,OAAO,CAAC6B,GAAR,CAAYC,MAAZ,CAAmBC,WAAnB,CAA+BhC,KAA/B,EAAsC;AACxCY,MAAAA,YAAY,EAAEZ,KAAK,CAACY;AADoB,KAAtC,CAAN;AAGH,GAJD,CAIE,OAAOqB,EAAP,EAAW;AACT,UAAM,IAAIC,cAAJ,CACD,2BAA0BlC,KAAK,CAACS,OAAQ,2BADvC,EAEF,mCAFE,EAGFwB,EAHE,CAAN;AAKH;AACJ,CA1DM","sourcesContent":["import {\n    CmsContentEntry,\n    CmsContentModel,\n    CmsContext,\n    CmsModelLockedFieldPlugin\n} from \"../../../../types\";\nimport WebinyError from \"@webiny/error\";\nimport { ContentModelPlugin } from \"../../../plugins/ContentModelPlugin\";\n\ninterface Args {\n    model: CmsContentModel;\n    entry: CmsContentEntry;\n    context: CmsContext;\n}\nexport const markLockedFields = async ({ model, context }: Args): Promise<void> => {\n    // If the model is registered via a plugin, we don't need do process anything.\n    const plugins = context.plugins.byType<ContentModelPlugin>(ContentModelPlugin.type);\n    if (plugins.find(plugin => plugin.contentModel.modelId === model.modelId)) {\n        return;\n    }\n\n    const cmsLockedFieldPlugins =\n        context.plugins.byType<CmsModelLockedFieldPlugin>(\"cms-model-locked-field\");\n\n    const existingLockedFields = model.lockedFields || [];\n    const lockedFields = [];\n    for (const field of model.fields) {\n        const alreadyLocked = existingLockedFields.some(\n            lockedField => lockedField.fieldId === field.fieldId\n        );\n        if (alreadyLocked) {\n            continue;\n        }\n\n        let lockedFieldData = {};\n\n        const lockedFieldPlugins = cmsLockedFieldPlugins.filter(pl => pl.fieldType === field.type);\n        for (const plugin of lockedFieldPlugins) {\n            if (typeof plugin.getLockedFieldData !== \"function\") {\n                continue;\n            }\n            const data = plugin.getLockedFieldData({\n                field\n            });\n            lockedFieldData = { ...lockedFieldData, ...data };\n        }\n\n        lockedFields.push({\n            fieldId: field.fieldId,\n            multipleValues: field.multipleValues,\n            type: field.type,\n            ...lockedFieldData\n        });\n    }\n    // no need to update anything if no locked fields were added\n    if (lockedFields.length === 0) {\n        return;\n    }\n\n    model.lockedFields = existingLockedFields.concat(lockedFields);\n\n    try {\n        await context.cms.models.updateModel(model, {\n            lockedFields: model.lockedFields\n        });\n    } catch (ex) {\n        throw new WebinyError(\n            `Could not update model \"${model.modelId}\" with new locked fields.`,\n            \"MODEL_LOCKED_FIELDS_UPDATE_FAILED\",\n            ex\n        );\n    }\n};\n"],"file":"markLockedFields.js"}