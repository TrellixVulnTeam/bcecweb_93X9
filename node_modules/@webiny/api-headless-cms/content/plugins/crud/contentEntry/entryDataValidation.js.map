{"version":3,"sources":["../../../../../src/content/plugins/crud/contentEntry/entryDataValidation.ts"],"names":["validateValue","args","fieldValidators","value","validatorList","context","field","contentModel","fieldValidator","name","validations","length","validate","result","validator","message","ex","validatePredefinedValue","enabled","values","predefinedValues","Array","isArray","predefinedValue","runFieldMultipleValuesValidations","data","fieldId","valuesError","listValidation","valueError","validation","predefinedValueError","runFieldValueValidations","error","execValidation","multipleValues","validateModelEntryData","plugins","byType","reduce","acc","plugin","push","invalidFields","fields","WebinyError"],"mappings":"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","sourcesContent":["import {\n    CmsContentModel,\n    CmsContentModelField,\n    CmsContentModelFieldValidation,\n    CmsContext,\n    CmsModelFieldValidatorPlugin,\n    CmsModelFieldValidatorValidateArgs\n} from \"~/types\";\nimport WebinyError from \"@webiny/error\";\n\ntype PluginValidationCallable = (params: CmsModelFieldValidatorValidateArgs) => Promise<boolean>;\ntype PluginValidationList = Record<string, PluginValidationCallable[]>;\ntype InputData = Record<string, any>;\n\ninterface ValidateArgs {\n    validatorList: PluginValidationList;\n    field: CmsContentModelField;\n    contentModel: CmsContentModel;\n    data: InputData;\n    context: CmsContext;\n}\n\nconst validateValue = async (\n    args: ValidateArgs,\n    fieldValidators: CmsContentModelFieldValidation[],\n    value: any\n): Promise<string | null> => {\n    if (!fieldValidators) {\n        return null;\n    }\n\n    const { validatorList, context, field, contentModel } = args;\n    try {\n        for (const fieldValidator of fieldValidators) {\n            const name = fieldValidator.name;\n            const validations = validatorList[name];\n            if (!validations || validations.length === 0) {\n                return `There are no \"${name}\" validators defined.`;\n            }\n            for (const validate of validations) {\n                const result = await validate({\n                    value,\n                    context,\n                    validator: fieldValidator,\n                    field,\n                    contentModel\n                });\n                if (!result) {\n                    return fieldValidator.message;\n                }\n            }\n        }\n    } catch (ex) {\n        return ex.message;\n    }\n\n    return null;\n};\n\nconst validatePredefinedValue = (\n    field: CmsContentModelField,\n    value: any | any[]\n): string | null => {\n    const { enabled = false, values: predefinedValues = [] } = field.predefinedValues || {};\n    if (!enabled) {\n        return null;\n    } else if (Array.isArray(predefinedValues) === false || predefinedValues.length === 0) {\n        return \"Missing predefined values to validate against.\";\n    }\n    for (const predefinedValue of predefinedValues) {\n        // console.log(field.fieldId, predefinedValue.value, value, predefinedValue.value == value);\n        if (predefinedValue.value == value) {\n            return null;\n        }\n    }\n    return \"Value sent does not match any of the available predefined values.\";\n};\n/**\n * When multiple values is selected we must run validations on the array containing the values\n * And then on each value in the array\n */\nconst runFieldMultipleValuesValidations = async (args: ValidateArgs): Promise<string | null> => {\n    const { field, data } = args;\n    const values = data[field.fieldId];\n    if (Array.isArray(values) === false) {\n        return `Value of the field \"${field.fieldId}\" is not an array.`;\n    }\n    const valuesError = await validateValue(args, field.listValidation || [], values);\n    if (valuesError) {\n        return valuesError;\n    }\n    for (const value of values) {\n        const valueError = await validateValue(args, field.validation || [], value);\n        if (valueError) {\n            return valueError;\n        }\n        const predefinedValueError = validatePredefinedValue(field, value);\n        if (predefinedValueError) {\n            return predefinedValueError;\n        }\n    }\n    return null;\n};\n/**\n * Runs validation on given value.\n */\nconst runFieldValueValidations = async (args: ValidateArgs): Promise<string | null> => {\n    const { data, field } = args;\n    const value = data[field.fieldId];\n    const error = await validateValue(args, field.validation, value);\n    if (error) {\n        return error;\n    }\n    return validatePredefinedValue(field, value);\n};\n\nconst execValidation = async (args: ValidateArgs): Promise<string | null> => {\n    if (args.field.multipleValues) {\n        return await runFieldMultipleValuesValidations(args);\n    }\n    return await runFieldValueValidations(args);\n};\n\nexport const validateModelEntryData = async (\n    context: CmsContext,\n    contentModel: CmsContentModel,\n    data: InputData\n) => {\n    /**\n     * To later simplify searching for the validations we map them to a name.\n     * @see CmsModelFieldValidatorPlugin.validator.validate\n     */\n    const validatorList: PluginValidationList = context.plugins\n        .byType<CmsModelFieldValidatorPlugin>(\"cms-model-field-validator\")\n        .reduce((acc, plugin) => {\n            const name = plugin.validator.name;\n            if (!acc[name]) {\n                acc[name] = [];\n            }\n            acc[name].push(plugin.validator.validate);\n\n            return acc;\n        }, {} as PluginValidationList);\n\n    /**\n     * Loop through model fields and validate the corresponding data.\n     * Run validation only if the field has validation configured.\n     */\n    const invalidFields = [];\n    for (const field of contentModel.fields) {\n        const error = await execValidation({ contentModel, validatorList, field, data, context });\n        if (!error) {\n            continue;\n        }\n        invalidFields.push({\n            fieldId: field.fieldId,\n            error\n        });\n    }\n\n    if (invalidFields.length > 0) {\n        throw new WebinyError(\"Validation failed.\", \"VALIDATION_FAILED\", invalidFields);\n    }\n};\n"],"file":"entryDataValidation.js"}