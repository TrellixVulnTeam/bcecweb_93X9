{"version":3,"sources":["../../../../../src/content/plugins/crud/contentModel/beforeCreate.hook.ts"],"names":["MAX_MODEL_ID_SEARCH_AMOUNT","checkModelIdUniqueness","models","modelId","includes","Error","pluralizedModelIdCamelCase","singularizedModelIdCamelCase","pluralize","singular","isUniqueModelId","DISALLOWED_MODEL_IDS","checkModelIdAllowed","isAllowedModelId","createNewModelId","existingModels","model","modelIdCamelCase","name","counter","generatedModelId","beforeCreateHook","args","context","data","storageOperations","input","modelPlugin","plugins","byType","ContentModelPlugin","type","find","item","contentModel","WebinyError","list","map","m","trim","beforeCreate"],"mappings":"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","sourcesContent":["import {\n    CmsContentModel,\n    CmsContentModelCreateHookPluginArgs,\n    CmsContentModelStorageOperations,\n    CmsContentModelStorageOperationsBeforeCreateArgs,\n    CmsContext\n} from \"../../../../types\";\nimport camelCase from \"lodash/camelCase\";\nimport { runContentModelLifecycleHooks } from \"./runContentModelLifecycleHooks\";\nimport pluralize from \"pluralize\";\nimport { ContentModelPlugin } from \"~/content/plugins/ContentModelPlugin\";\nimport WebinyError from \"@webiny/error\";\n\nconst MAX_MODEL_ID_SEARCH_AMOUNT = 50;\n\n/**\n * Checks for the uniqueness of provided modelId, against the provided list of models.\n * It also takes plural / singular forms of the provided modelId into account.\n */\nconst checkModelIdUniqueness = (models: string[], modelId: string) => {\n    if (models.includes(modelId) === true) {\n        throw Error(`Content model with modelId \"${modelId}\" already exists.`);\n    }\n\n    // Additionally, check if the plural form of the received modelId exists too. This prevents users\n    // from creating, for example, \"event\" and \"events\" models, which would break the GraphQL schema.\n\n    // 1. First check if user wants to create the \"event\" model, but the \"events\" model already exists.\n    const pluralizedModelIdCamelCase = pluralize(modelId);\n    if (models.includes(pluralizedModelIdCamelCase) === true) {\n        throw Error(\n            `Content model with modelId \"${modelId}\" does not exist, but a model with modelId \"${pluralizedModelIdCamelCase}\" does.`\n        );\n    }\n\n    // 2. Then check if user wants to create the \"events\" model, but the \"event\" model already exists.\n    const singularizedModelIdCamelCase = pluralize.singular(modelId);\n    if (models.includes(singularizedModelIdCamelCase) === true) {\n        throw Error(\n            `Content model with modelId \"${modelId}\" does not exist, but a model with modelId \"${singularizedModelIdCamelCase}\" does.`\n        );\n    }\n};\n\n/**\n * Also used to check uniqueness of the provided modelId, although this one just returns a simple boolean value.\n */\nconst isUniqueModelId = (models: string[], modelId: string) => {\n    try {\n        checkModelIdUniqueness(models, modelId);\n        return true;\n    } catch {\n        // If an error has been thrown - we return false.\n        return false;\n    }\n};\n\nconst DISALLOWED_MODEL_IDS = [\n    \"contentModel\",\n    \"contentModels\",\n    \"contentModelGroup\",\n    \"contentModelGroups\"\n];\n\nconst checkModelIdAllowed = (modelId: string) => {\n    if (DISALLOWED_MODEL_IDS.includes(modelId)) {\n        throw new Error(`Provided model ID \"${modelId}\" is not allowed.`);\n    }\n};\n\nconst isAllowedModelId = (modelId: string) => {\n    return !DISALLOWED_MODEL_IDS.includes(modelId);\n};\n\nconst createNewModelId = (existingModels: string[], model: CmsContentModel): string => {\n    const modelIdCamelCase = camelCase(model.name);\n    let counter = 0;\n    while (true) {\n        if (counter > MAX_MODEL_ID_SEARCH_AMOUNT) {\n            throw new Error(\n                `While loop reached #${MAX_MODEL_ID_SEARCH_AMOUNT} when checking for unique \"modelId\".`\n            );\n        }\n\n        // Let's try generating a new modelId and immediately check for its uniqueness.\n        const generatedModelId = `${modelIdCamelCase}${counter || \"\"}`;\n        if (\n            isAllowedModelId(generatedModelId) &&\n            isUniqueModelId(existingModels, generatedModelId)\n        ) {\n            return generatedModelId;\n        }\n        counter++;\n    }\n};\n\ninterface Args extends CmsContentModelStorageOperationsBeforeCreateArgs {\n    context: CmsContext;\n    storageOperations: CmsContentModelStorageOperations;\n}\n\nexport const beforeCreateHook = async (args: Args): Promise<void> => {\n    const { context, data, storageOperations, input } = args;\n    const { modelId } = data;\n\n    const modelPlugin: ContentModelPlugin = context.plugins\n        .byType<ContentModelPlugin>(ContentModelPlugin.type)\n        .find((item: ContentModelPlugin) => item.contentModel.modelId === modelId);\n\n    if (modelPlugin) {\n        throw new WebinyError(\n            `Cannot create \"${modelId}\" content model because one is already registered via a plugin.`,\n            \"CONTENT_MODEL_CREATE_ERROR\",\n            {\n                modelId\n            }\n        );\n    }\n\n    const models = (await storageOperations.list()).map(m => m.modelId);\n    // If there is a modelId assigned, check if it's unique ...\n    if (!!(modelId || \"\").trim()) {\n        const modelIdCamelCase = camelCase(data.name);\n        checkModelIdAllowed(modelIdCamelCase);\n        checkModelIdUniqueness(models, modelIdCamelCase);\n        data.modelId = modelIdCamelCase;\n    } else {\n        // ... otherwise, assign a unique modelId automatically.\n        data.modelId = createNewModelId(models, data);\n    }\n\n    if (storageOperations.beforeCreate) {\n        await storageOperations.beforeCreate(args);\n    }\n    await runContentModelLifecycleHooks<CmsContentModelCreateHookPluginArgs>(\"beforeCreate\", {\n        context,\n        storageOperations,\n        input,\n        model: data\n    });\n};\n"],"file":"beforeCreate.hook.js"}