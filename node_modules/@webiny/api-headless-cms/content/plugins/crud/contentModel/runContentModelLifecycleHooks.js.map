{"version":3,"sources":["../../../../../src/content/plugins/crud/contentModel/runContentModelLifecycleHooks.ts"],"names":["runContentModelLifecycleHooks","hookName","args","context","hookPlugins","plugins","byType","hookPlugin"],"mappings":";;;;;;;AAOO,MAAMA,6BAA6B,GAAG,OAMzCC,QANyC,EAOzCC,IAPyC,KAQzB;AAChB,QAAM;AAAEC,IAAAA;AAAF,MAAcD,IAApB;AACA,QAAME,WAAW,GAAGD,OAAO,CAACE,OAAR,CAAgBC,MAAhB,CAAkD,wBAAlD,CAApB;;AACA,OAAK,MAAMC,UAAX,IAAyBH,WAAzB,EAAsC;AAClC,QAAI,OAAOG,UAAU,CAACN,QAAD,CAAjB,KAAgC,UAApC,EAAgD;AAC5C;AACH;;AACD,UAAMM,UAAU,CAACN,QAAD,CAAV,CAAqBC,IAArB,CAAN;AACH;AACJ,CAjBM","sourcesContent":["import {\n    CmsContentModelCreateHookPluginArgs,\n    CmsContentModelHookPlugin,\n    CmsContentModelHookPluginArgs,\n    CmsContentModelUpdateHookPluginArgs\n} from \"../../../../types\";\n\nexport const runContentModelLifecycleHooks = async <\n    T extends\n        | CmsContentModelHookPluginArgs\n        | CmsContentModelCreateHookPluginArgs\n        | CmsContentModelUpdateHookPluginArgs\n>(\n    hookName: string,\n    args: T\n): Promise<void> => {\n    const { context } = args;\n    const hookPlugins = context.plugins.byType<CmsContentModelHookPlugin>(\"cms-content-model-hook\");\n    for (const hookPlugin of hookPlugins) {\n        if (typeof hookPlugin[hookName] !== \"function\") {\n            continue;\n        }\n        await hookPlugin[hookName](args);\n    }\n};\n"],"file":"runContentModelLifecycleHooks.js"}