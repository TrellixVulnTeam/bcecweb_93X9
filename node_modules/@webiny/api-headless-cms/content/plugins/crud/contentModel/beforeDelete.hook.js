"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.beforeDeleteHook = void 0;

var _error = _interopRequireDefault(require("@webiny/error"));

var _runContentModelLifecycleHooks = require("./runContentModelLifecycleHooks");

var _ContentModelPlugin = require("@webiny/api-headless-cms/content/plugins/ContentModelPlugin");

const beforeDeleteHook = async args => {
  const {
    context,
    model
  } = args;
  const {
    modelId
  } = model;
  const modelPlugin = context.plugins.byType(_ContentModelPlugin.ContentModelPlugin.type).find(item => item.contentModel.modelId === modelId);

  if (modelPlugin) {
    throw new _error.default("Content models defined via plugins cannot be deleted.", "CONTENT_MODEL_DELETE_ERROR", {
      modelId
    });
  }

  const manager = await context.cms.getModel(modelId);
  let entries = [];

  try {
    [entries] = await manager.list({
      limit: 1
    });
  } catch (ex) {
    throw new _error.default("Could not retrieve a list of content entries from the model.", "ENTRIES_ERROR", {
      modelId,
      error: ex
    });
  }

  if (entries.length > 0) {
    throw new _error.default(`Cannot delete content model "${modelId}" because there are existing entries.`, "CONTENT_MODEL_BEFORE_DELETE_HOOK_FAILED");
  }

  if (args.storageOperations.beforeDelete) {
    await args.storageOperations.beforeDelete(args);
  }

  await (0, _runContentModelLifecycleHooks.runContentModelLifecycleHooks)("beforeDelete", args);
};

exports.beforeDeleteHook = beforeDeleteHook;
//# sourceMappingURL=beforeDelete.hook.js.map