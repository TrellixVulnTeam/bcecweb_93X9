{"version":3,"sources":["../../../../../src/content/plugins/crud/contentModel/beforeUpdate.hook.ts"],"names":["defaultTitleFieldId","allowedTitleFieldTypes","getContentModelTitleFieldId","fields","titleFieldId","titleField","find","field","type","multipleValues","fieldId","target","f","WebinyError","includes","join","beforeUpdateHook","args","context","model","data","modelPlugin","plugins","byType","ContentModelPlugin","item","contentModel","modelId","combinedModel","lockedFields","fieldTypePlugins","i","length","fieldType","Error","cmsLockedFieldPlugins","lockedField","existingField","lockedFieldsByType","filter","pl","plugin","checkLockedField","storageOperations","beforeUpdate"],"mappings":"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","sourcesContent":["import {\n    CmsContentModelStorageOperations,\n    CmsContentModelStorageOperationsBeforeUpdateArgs,\n    CmsContentModelField,\n    CmsContentModelUpdateHookPluginArgs,\n    CmsContext,\n    CmsModelFieldToGraphQLPlugin,\n    CmsModelLockedFieldPlugin\n} from \"../../../../types\";\nimport WebinyError from \"@webiny/error\";\nimport { runContentModelLifecycleHooks } from \"./runContentModelLifecycleHooks\";\nimport { ContentModelPlugin } from \"~/content/plugins/ContentModelPlugin\";\n\ninterface Args extends CmsContentModelStorageOperationsBeforeUpdateArgs {\n    context: CmsContext;\n    storageOperations: CmsContentModelStorageOperations;\n}\n\nconst defaultTitleFieldId = \"id\";\n\nconst allowedTitleFieldTypes = [\"text\", \"number\"];\n\nconst getContentModelTitleFieldId = (\n    fields: CmsContentModelField[],\n    titleFieldId?: string\n): string => {\n    // if there is no title field defined either in input data or existing content model data\n    // we will take first text field that has no multiple values enabled\n    // or if initial titleFieldId is the default one also try to find first available text field\n    if (!titleFieldId || titleFieldId === defaultTitleFieldId) {\n        const titleField = fields.find(field => {\n            return field.type === \"text\" && !field.multipleValues;\n        });\n        return titleField ? titleField.fieldId : defaultTitleFieldId;\n    }\n    // check existing titleFieldId for existence in the model\n    // for correct type\n    // and that it is not multiple values field\n    const target = fields.find(f => f.fieldId === titleFieldId);\n    if (!target) {\n        throw new WebinyError(`Field does not exist in the model.`, \"VALIDATION_ERROR\", {\n            fieldId: titleFieldId\n        });\n    }\n\n    if (allowedTitleFieldTypes.includes(target.type) === false) {\n        throw new WebinyError(\n            `Only ${allowedTitleFieldTypes.join(\n                \", \"\n            )} and id fields can be used as an entry title.`,\n            \"ENTRY_TITLE_FIELD_TYPE\",\n            {\n                fieldId: target.fieldId,\n                type: target.type\n            }\n        );\n    }\n\n    if (target.multipleValues) {\n        throw new WebinyError(\n            `Fields that accept multiple values cannot be used as the entry title.`,\n            \"ENTRY_TITLE_FIELD_TYPE\",\n            {\n                fieldId: target.fieldId,\n                type: target.type\n            }\n        );\n    }\n\n    return target.fieldId;\n};\n\nexport const beforeUpdateHook = async (args: Args) => {\n    const { context, model, data } = args;\n\n    const modelPlugin: ContentModelPlugin = context.plugins\n        .byType<ContentModelPlugin>(ContentModelPlugin.type)\n        .find((item: ContentModelPlugin) => item.contentModel.modelId === model.modelId);\n\n    if (modelPlugin) {\n        throw new WebinyError(\n            \"Content models defined via plugins cannot be updated.\",\n            \"CONTENT_MODEL_UPDATE_ERROR\",\n            {\n                modelId: model.modelId\n            }\n        );\n    }\n\n    const combinedModel = {\n        ...model,\n        ...data\n    };\n\n    const { titleFieldId } = combinedModel;\n\n    // There should be fields/locked fields in either model or data to be updated.\n    const { fields = [], lockedFields = [] } = combinedModel;\n\n    // Let's inspect the fields of the received content model. We prevent saving of a content model if it\n    // contains a field for which a \"cms-model-field-to-graphql\" plugin does not exist on the backend.\n    const fieldTypePlugins = context.plugins.byType<CmsModelFieldToGraphQLPlugin>(\n        \"cms-model-field-to-graphql\"\n    );\n\n    for (let i = 0; i < fields.length; i++) {\n        const field = fields[i];\n        if (!fieldTypePlugins.find(item => item.fieldType === field.type)) {\n            throw new Error(\n                `Cannot update content model because of the unknown \"${field.type}\" field.`\n            );\n        }\n    }\n\n    data.titleFieldId = getContentModelTitleFieldId(fields, titleFieldId);\n\n    const cmsLockedFieldPlugins =\n        context.plugins.byType<CmsModelLockedFieldPlugin>(\"cms-model-locked-field\");\n\n    // We must not allow removal or changes in fields that are already in use in content entries.\n    for (const lockedField of lockedFields) {\n        const existingField = fields.find(item => item.fieldId === lockedField.fieldId);\n        if (!existingField) {\n            throw new WebinyError(\n                `Cannot remove the field \"${lockedField.fieldId}\" because it's already in use in created content.`,\n                \"ENTRY_FIELD_USED\"\n            );\n        }\n\n        if (lockedField.multipleValues !== existingField.multipleValues) {\n            throw new WebinyError(\n                `Cannot change \"multipleValues\" for the \"${lockedField.fieldId}\" field because it's already in use in created content.`,\n                \"ENTRY_FIELD_USED\"\n            );\n        }\n\n        if (lockedField.type !== existingField.type) {\n            throw new WebinyError(\n                `Cannot change field type for the \"${lockedField.fieldId}\" field because it's already in use in created content.`,\n                \"ENTRY_FIELD_USED\"\n            );\n        }\n\n        // Check `lockedField` invariant for specific field\n        const lockedFieldsByType = cmsLockedFieldPlugins.filter(\n            pl => pl.fieldType === lockedField.type\n        );\n        for (const plugin of lockedFieldsByType) {\n            if (typeof plugin.checkLockedField !== \"function\") {\n                continue;\n            }\n            plugin.checkLockedField({\n                lockedField,\n                field: existingField\n            });\n        }\n    }\n    if (args.storageOperations.beforeUpdate) {\n        await args.storageOperations.beforeUpdate(args);\n    }\n    await runContentModelLifecycleHooks<CmsContentModelUpdateHookPluginArgs>(\"beforeUpdate\", args);\n};\n"],"file":"beforeUpdate.hook.js"}