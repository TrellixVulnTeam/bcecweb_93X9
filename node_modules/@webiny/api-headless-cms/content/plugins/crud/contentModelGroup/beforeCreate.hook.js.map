{"version":3,"sources":["../../../../../src/content/plugins/crud/contentModelGroup/beforeCreate.hook.ts"],"names":["createGroupSlug","data","storageOperations","context","name","slug","groupPlugin","plugins","byType","ContentModelGroupPlugin","type","find","item","contentModelGroup","Error","trim","groups","list","where","length","WebinyError","newSlug","shortid","generate","beforeCreateHook","input","beforeCreate"],"mappings":";;;;;;;;;AAKA;;AACA;;AACA;;AACA;;AAOA,MAAMA,eAAe,GAAG,OAAO;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,iBAAR;AAA2BC,EAAAA;AAA3B,CAAP,KAAuE;AAC3F,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,IAAI,GAAG;AAAf,MAAsBJ,IAA5B;AAEA,QAAMK,WAAoC,GAAGH,OAAO,CAACI,OAAR,CACxCC,MADwC,CACRC,iDAAwBC,IADhB,EAExCC,IAFwC,CAElCC,IAAD,IAAmCA,IAAI,CAACC,iBAAL,CAAuBR,IAAvB,KAAgCA,IAFhC,CAA7C;;AAIA,MAAIC,WAAJ,EAAiB;AACb,UAAM,IAAIQ,KAAJ,CACD,kBAAiBT,IAAK,uEADrB,CAAN;AAGH,GAX0F,CAa3F;;;AACA,MAAIA,IAAI,IAAIA,IAAI,CAACU,IAAL,EAAZ,EAAyB;AACrB,UAAMC,MAAM,GAAG,MAAMd,iBAAiB,CAACe,IAAlB,CAAuB;AACxCC,MAAAA,KAAK,EAAE;AACHb,QAAAA;AADG;AADiC,KAAvB,CAArB;;AAKA,QAAIW,MAAM,CAACG,MAAP,KAAkB,CAAtB,EAAyB;AACrB,aAAOd,IAAP;AACH;;AACD,UAAM,IAAIe,cAAJ,CACD,sCAAqCf,IAAK,mBADzC,EAEF,qBAFE,CAAN;AAIH,GA3B0F,CA6B3F;;;AACA,QAAMgB,OAAO,GAAG,mBAAOjB,IAAP,CAAhB;AACA,QAAMY,MAAM,GAAG,MAAMd,iBAAiB,CAACe,IAAlB,CAAuB;AACxCC,IAAAA,KAAK,EAAE;AACHb,MAAAA,IAAI,EAAEgB;AADH;AADiC,GAAvB,CAArB;;AAMA,MAAIL,MAAM,CAACG,MAAP,KAAkB,CAAtB,EAAyB;AACrB,WAAOE,OAAP;AACH;;AACD,SAAQ,GAAEA,OAAQ,IAAGC,iBAAQC,QAAR,EAAmB,EAAxC;AACH,CAzCD;;AA2CO,MAAMC,gBAAgB,GAAG,OAAO;AACnCrB,EAAAA,OADmC;AAEnCsB,EAAAA,KAFmC;AAGnCxB,EAAAA,IAHmC;AAInCC,EAAAA;AAJmC,CAAP,KAKL;AACvBD,EAAAA,IAAI,CAACI,IAAL,GAAY,MAAML,eAAe,CAAC;AAC9BG,IAAAA,OAD8B;AAE9BF,IAAAA,IAF8B;AAG9BwB,IAAAA,KAH8B;AAI9BvB,IAAAA;AAJ8B,GAAD,CAAjC;;AAOA,MAAI,CAACA,iBAAiB,CAACwB,YAAvB,EAAqC;AACjC;AACH;;AACD,QAAMxB,iBAAiB,CAACwB,YAAlB,CAA+B;AACjCD,IAAAA,KADiC;AAEjCxB,IAAAA;AAFiC,GAA/B,CAAN;AAIH,CApBM","sourcesContent":["import {\n    CmsContentModelGroupStorageOperations,\n    CmsContentModelGroupStorageOperationsBeforeCreateArgs,\n    CmsContext\n} from \"../../../../types\";\nimport { toSlug } from \"../../../../utils\";\nimport WebinyError from \"@webiny/error\";\nimport shortid from \"shortid\";\nimport { ContentModelGroupPlugin } from \"~/content/plugins/ContentModelGroupPlugin\";\n\ninterface Args extends CmsContentModelGroupStorageOperationsBeforeCreateArgs {\n    context: CmsContext;\n    storageOperations: CmsContentModelGroupStorageOperations;\n}\n\nconst createGroupSlug = async ({ data, storageOperations, context }: Args): Promise<string> => {\n    const { name, slug = \"\" } = data;\n\n    const groupPlugin: ContentModelGroupPlugin = context.plugins\n        .byType<ContentModelGroupPlugin>(ContentModelGroupPlugin.type)\n        .find((item: ContentModelGroupPlugin) => item.contentModelGroup.slug === slug);\n\n    if (groupPlugin) {\n        throw new Error(\n            `Cannot create \"${slug}\" content model group because one is already registered via a plugin.`\n        );\n    }\n\n    // If there is a slug assigned, check if it's unique ...\n    if (slug && slug.trim()) {\n        const groups = await storageOperations.list({\n            where: {\n                slug\n            }\n        });\n        if (groups.length === 0) {\n            return slug;\n        }\n        throw new WebinyError(\n            `Content model group with the slug \"${slug}\" already exists.`,\n            \"SLUG_ALREADY_EXISTS\"\n        );\n    }\n\n    // ... otherwise, assign a unique slug automatically.\n    const newSlug = toSlug(name);\n    const groups = await storageOperations.list({\n        where: {\n            slug: newSlug\n        }\n    });\n\n    if (groups.length === 0) {\n        return newSlug;\n    }\n    return `${newSlug}-${shortid.generate()}`;\n};\n\nexport const beforeCreateHook = async ({\n    context,\n    input,\n    data,\n    storageOperations\n}: Args): Promise<void> => {\n    data.slug = await createGroupSlug({\n        context,\n        data,\n        input,\n        storageOperations\n    });\n\n    if (!storageOperations.beforeCreate) {\n        return;\n    }\n    await storageOperations.beforeCreate({\n        input,\n        data\n    });\n};\n"],"file":"beforeCreate.hook.js"}