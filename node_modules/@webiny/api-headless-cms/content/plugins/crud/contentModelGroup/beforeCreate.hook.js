"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.beforeCreateHook = void 0;

var _utils = require("../../../../utils");

var _error = _interopRequireDefault(require("@webiny/error"));

var _shortid = _interopRequireDefault(require("shortid"));

var _ContentModelGroupPlugin = require("../../ContentModelGroupPlugin");

const createGroupSlug = async ({
  data,
  storageOperations,
  context
}) => {
  const {
    name,
    slug = ""
  } = data;
  const groupPlugin = context.plugins.byType(_ContentModelGroupPlugin.ContentModelGroupPlugin.type).find(item => item.contentModelGroup.slug === slug);

  if (groupPlugin) {
    throw new Error(`Cannot create "${slug}" content model group because one is already registered via a plugin.`);
  } // If there is a slug assigned, check if it's unique ...


  if (slug && slug.trim()) {
    const groups = await storageOperations.list({
      where: {
        slug
      }
    });

    if (groups.length === 0) {
      return slug;
    }

    throw new _error.default(`Content model group with the slug "${slug}" already exists.`, "SLUG_ALREADY_EXISTS");
  } // ... otherwise, assign a unique slug automatically.


  const newSlug = (0, _utils.toSlug)(name);
  const groups = await storageOperations.list({
    where: {
      slug: newSlug
    }
  });

  if (groups.length === 0) {
    return newSlug;
  }

  return `${newSlug}-${_shortid.default.generate()}`;
};

const beforeCreateHook = async ({
  context,
  input,
  data,
  storageOperations
}) => {
  data.slug = await createGroupSlug({
    context,
    data,
    input,
    storageOperations
  });

  if (!storageOperations.beforeCreate) {
    return;
  }

  await storageOperations.beforeCreate({
    input,
    data
  });
};

exports.beforeCreateHook = beforeCreateHook;
//# sourceMappingURL=beforeCreate.hook.js.map