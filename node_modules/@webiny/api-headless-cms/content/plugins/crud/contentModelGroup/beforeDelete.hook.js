"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.beforeDeleteHook = void 0;

var _error = _interopRequireDefault(require("@webiny/error"));

var _ContentModelGroupPlugin = require("../../ContentModelGroupPlugin");

const beforeDeleteHook = async ({
  group,
  context,
  storageOperations
}) => {
  const groupPlugin = context.plugins.byType(_ContentModelGroupPlugin.ContentModelGroupPlugin.type).find(item => item.contentModelGroup.slug === group.slug);

  if (groupPlugin) {
    throw new Error(`Content model groups defined via plugins cannot be deleted.`);
  }

  const models = await context.cms.models.noAuth().list();
  const items = models.filter(model => {
    return model.group.id === group.id;
  });

  if (items.length > 0) {
    throw new _error.default("Cannot delete this group because there are models that belong to it.", "BEFORE_DELETE_ERROR", {
      id: group.id
    });
  }

  if (!storageOperations.beforeDelete) {
    return;
  }

  await storageOperations.beforeDelete({
    group
  });
};

exports.beforeDeleteHook = beforeDeleteHook;
//# sourceMappingURL=beforeDelete.hook.js.map