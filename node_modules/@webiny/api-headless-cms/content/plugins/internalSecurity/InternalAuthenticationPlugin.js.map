{"version":3,"sources":["../../../../src/content/plugins/internalSecurity/InternalAuthenticationPlugin.ts"],"names":["InternalAuthenticationPlugin","AuthenticationPlugin","constructor","identityType","_identityType","authenticate","context","headers","http","request","header","apiKey","split","pop","cms","system","getReadAPIKey","SecurityIdentity","id","displayName","type","permissions","name"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAGO,MAAMA,4BAAN,SAA2CC,0CAA3C,CAAgE;AAGnEC,EAAAA,WAAW,CAACC,YAAD,EAAuB;AAC9B;AAD8B;AAG9B,SAAKC,aAAL,GAAqBD,YAArB;AACH;;AAEiB,QAAZE,YAAY,CAACC,OAAD,EAA6D;AAC3E,UAAM;AAAEC,MAAAA;AAAF,QAAcD,OAAO,CAACE,IAAR,CAAaC,OAAjC;AACA,UAAMC,MAAM,GAAGH,OAAO,CAAC,eAAD,CAAP,IAA4BA,OAAO,CAAC,eAAD,CAAlD;AACA,UAAMI,MAAM,GAAGD,MAAM,GAAGA,MAAM,CAACE,KAAP,CAAa,GAAb,EAAkBC,GAAlB,EAAH,GAA6B,IAAlD;;AACA,QAAI,CAACF,MAAD,IAAWA,MAAM,MAAM,MAAML,OAAO,CAACQ,GAAR,CAAYC,MAAZ,CAAmBC,aAAnB,EAAZ,CAArB,EAAsE;AAClE;AACH;AAED;AACR;AACA;AACA;;;AACQ,WAAO,IAAIC,6BAAJ,CAAqB;AACxBC,MAAAA,EAAE,EAAE,cADoB;AAExBC,MAAAA,WAAW,EAAE,cAFW;AAGxBC,MAAAA,IAAI,EAAE,KAAKhB,aAHa;AAIxBiB,MAAAA,WAAW,EAAE,CACT;AAAEC,QAAAA,IAAI,EAAE;AAAR,OADS,EAET;AAAEA,QAAAA,IAAI,EAAE;AAAR,OAFS,EAGT;AAAEA,QAAAA,IAAI,EAAE;AAAR,OAHS;AAJW,KAArB,CAAP;AAUH;;AA/BkE","sourcesContent":["import { AuthenticationPlugin } from \"@webiny/api-security/plugins/AuthenticationPlugin\";\nimport { SecurityIdentity } from \"@webiny/api-security\";\nimport { CmsContext } from \"~/types\";\n\nexport class InternalAuthenticationPlugin extends AuthenticationPlugin {\n    private _identityType: string;\n\n    constructor(identityType: string) {\n        super();\n\n        this._identityType = identityType;\n    }\n\n    async authenticate(context: CmsContext): Promise<undefined | SecurityIdentity> {\n        const { headers } = context.http.request;\n        const header = headers[\"Authorization\"] || headers[\"authorization\"];\n        const apiKey = header ? header.split(\" \").pop() : null;\n        if (!apiKey || apiKey !== (await context.cms.system.getReadAPIKey())) {\n            return;\n        }\n\n        /**\n         * This is an internal identity, which has access to `read` endpoint, all content models,\n         * content entries, and all content locales.\n         */\n        return new SecurityIdentity({\n            id: \"read-api-key\",\n            displayName: \"Read API key\",\n            type: this._identityType,\n            permissions: [\n                { name: \"cms.endpoint.read\" },\n                { name: \"cms.content*\" },\n                { name: \"content.i18n\" }\n            ]\n        });\n    }\n}\n"],"file":"InternalAuthenticationPlugin.js"}