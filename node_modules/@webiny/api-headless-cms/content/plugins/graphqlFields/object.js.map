{"version":3,"sources":["../../../../src/content/plugins/graphqlFields/object.ts"],"names":["typeFromField","typeOfType","model","type","field","fieldTypePlugins","typeSuffix","typeName","modelId","mTypeName","fields","settings","fieldTypeName","fieldId","typeFields","nestedTypes","replace","RegExp","f","typeDefs","push","fieldType","join","plugin","name","isSortable","isSearchable","read","createTypeField","multipleValues","createResolver","createFieldResolvers","graphQLType","resolver","typeResolvers","manage","createInputField"],"mappings":"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","sourcesContent":["import upperFirst from \"lodash/upperFirst\";\nimport { CmsContentModelField, CmsModelFieldToGraphQLPlugin } from \"~/types\";\nimport { renderField } from \"~/content/plugins/utils/renderFields\";\nimport { renderInputField } from \"~/content/plugins/utils/renderInputFields\";\nimport { createManageTypeName, createTypeName } from \"~/content/plugins/utils/createTypeName\";\n\nconst typeFromField = ({ typeOfType, model, type, field, fieldTypePlugins }) => {\n    const typeSuffix = typeOfType === \"input\" ? \"Input\" : \"\";\n    const typeName = createTypeName(model.modelId);\n    const mTypeName = createManageTypeName(typeName);\n\n    // `field` is an \"object\" field\n    const fields = field.settings.fields as CmsContentModelField[];\n    const fieldTypeName = `${mTypeName}_${upperFirst(field.fieldId)}`;\n\n    const typeFields = [];\n    const nestedTypes = [];\n\n    // Once the loop below starts, we'll be executing a recursive \"object\" type generation.\n    // The main trick here is that nested objects don't know who the parent is, and will generate\n    // type names using the \"model\", as if they're at the top level:\n    // Every time the types are returned, we need to replace the model name in the generated type name\n    // with the actual prefix which includes parent field name type.\n    const replace = new RegExp(`${mTypeName}_`, \"g\");\n\n    for (const f of fields) {\n        const { fields, typeDefs } =\n            typeOfType === \"type\"\n                ? renderField({ field: f, type, model, fieldTypePlugins })\n                : renderInputField({ field: f, model, fieldTypePlugins });\n\n        typeFields.push(fields.replace(replace, `${fieldTypeName}_`));\n        if (typeDefs) {\n            nestedTypes.push(typeDefs.replace(replace, `${fieldTypeName}_`));\n        }\n    }\n\n    return {\n        fieldType: `${fieldTypeName}${typeSuffix}`,\n        typeDefs: /* GraphQL */ `\n            ${nestedTypes.join(\"\\n\")}\n                    \n            ${typeOfType} ${fieldTypeName}${typeSuffix} {\n                ${typeFields.join(\"\\n\")}\n            }\n        `\n    };\n};\n\nconst plugin: CmsModelFieldToGraphQLPlugin = {\n    name: \"cms-model-field-to-graphql-object\",\n    type: \"cms-model-field-to-graphql\",\n    fieldType: \"object\",\n    isSortable: false,\n    isSearchable: false,\n    read: {\n        createTypeField({ field, model, fieldTypePlugins }) {\n            const { fieldType, typeDefs } = typeFromField({\n                typeOfType: \"type\",\n                model,\n                type: \"read\",\n                field,\n                fieldTypePlugins\n            });\n\n            return {\n                fields: `${field.fieldId}: ${field.multipleValues ? `[${fieldType}!]` : fieldType}`,\n                typeDefs\n            };\n        },\n        createResolver({ field, createFieldResolvers, graphQLType }) {\n            const fieldType = `${graphQLType}_${upperFirst(field.fieldId)}`;\n            return {\n                resolver: null,\n                typeResolvers: createFieldResolvers({\n                    graphQLType: fieldType,\n                    fields: field.settings.fields\n                })\n            };\n        }\n    },\n    manage: {\n        createTypeField({ model, field, fieldTypePlugins }) {\n            const { fieldType, typeDefs } = typeFromField({\n                typeOfType: \"type\",\n                model,\n                type: \"manage\",\n                field,\n                fieldTypePlugins\n            });\n\n            return {\n                fields: `${field.fieldId}: ${field.multipleValues ? `[${fieldType}!]` : fieldType}`,\n                typeDefs\n            };\n        },\n        createInputField({ model, field, fieldTypePlugins }) {\n            const { fieldType, typeDefs } = typeFromField({\n                typeOfType: \"input\",\n                model,\n                type: \"manage\",\n                field,\n                fieldTypePlugins\n            });\n\n            return {\n                fields: `${field.fieldId}: ${field.multipleValues ? `[${fieldType}!]` : fieldType}`,\n                typeDefs\n            };\n        },\n        createResolver({ graphQLType, field, createFieldResolvers }) {\n            const fieldType = `${graphQLType}_${upperFirst(field.fieldId)}`;\n            return {\n                resolver: null,\n                typeResolvers: createFieldResolvers({\n                    graphQLType: fieldType,\n                    fields: field.settings.fields\n                })\n            };\n        }\n    }\n};\n\nexport default plugin;\n"],"file":"object.js"}