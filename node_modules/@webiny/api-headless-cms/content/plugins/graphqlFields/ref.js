"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _createTypeName = require("../utils/createTypeName");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const createUnionTypeName = (model, field) => {
  return `${(0, _createTypeName.createReadTypeName)(model.modelId)}${(0, _createTypeName.createReadTypeName)(field.fieldId)}`;
};

const createListFilters = ({
  field
}) => {
  return `
        ${field.fieldId}: String
        ${field.fieldId}_in: [String!]
        ${field.fieldId}_not: String
        ${field.fieldId}_not_in: [String!]
    `;
};

const appendTypename = (entries, typename) => {
  return entries.map(item => {
    item["__typename"] = typename;
    return item;
  });
};

const modelIdToTypeName = new Map();
const plugin = {
  name: "cms-model-field-to-graphql-ref",
  type: "cms-model-field-to-graphql",
  fieldType: "ref",
  isSortable: false,
  isSearchable: true,
  read: {
    createTypeField({
      model,
      field
    }) {
      const gqlType = field.settings.models.length > 1 ? createUnionTypeName(model, field) : (0, _createTypeName.createReadTypeName)(field.settings.models[0].modelId);
      return field.fieldId + `: ${field.multipleValues ? `[${gqlType}]` : gqlType}`;
    },

    createResolver({
      field
    }) {
      // Create a map of model types and corresponding modelIds so resolvers don't need to perform the lookup.
      for (const item of field.settings.models) {
        modelIdToTypeName.set(item.modelId, (0, _createTypeName.createReadTypeName)(item.modelId));
      }

      return async (parent, args, context) => {
        const {
          cms
        } = context; // Get field value for this entry

        const value = parent[field.fieldId];

        if (!value) {
          return null;
        }

        if (field.multipleValues) {
          if (!value.length) {
            return [];
          }

          const entriesByModel = value.reduce((acc, ref) => {
            if (!acc[ref.modelId]) {
              acc[ref.modelId] = [];
            }

            acc[ref.modelId].push(ref.entryId);
            return acc;
          }, {});
          const getters = Object.keys(entriesByModel).map(async modelId => {
            // Get model manager, to get access to CRUD methods
            const model = await cms.getModel(modelId);
            const entries = cms.READ ? // `read` API works with `published` data
            await model.getPublishedByIds(entriesByModel[modelId]) : // `preview` and `manage` with `latest` data
            await model.getLatestByIds(entriesByModel[modelId]);
            return appendTypename(entries, modelIdToTypeName.get(modelId));
          });
          return await Promise.all(getters).then(results => results.reduce((result, item) => result.concat(item), []));
        } // Get model manager, to get access to CRUD methods


        const model = await cms.getModel(value.modelId);
        const revisions = cms.READ ? // `read` API works with `published` data
        await model.getPublishedByIds([value.entryId]) : // `preview` API works with `latest` data
        await model.getLatestByIds([value.entryId]);
        /**
         * If there are no revisions we must return null.
         */

        if (!revisions || revisions.length === 0) {
          return null;
        }

        return _objectSpread(_objectSpread({}, revisions[0]), {}, {
          __typename: modelIdToTypeName.get(value.modelId)
        });
      };
    },

    createSchema({
      models
    }) {
      const unionFields = [];

      for (const model of models) {
        // Generate a dedicated union type for every `ref` field which has more than 1 content model assigned.
        model.fields.filter(field => field.type === "ref" && field.settings.models.length > 1).forEach(field => unionFields.push({
          model,
          field,
          typeName: createUnionTypeName(model, field)
        }));
      }

      if (!unionFields.length) {
        return null;
      }

      return {
        typeDefs: unionFields.map(({
          field,
          typeName
        }) => `union ${typeName} = ${field.settings.models.map(({
          modelId
        }) => (0, _createTypeName.createReadTypeName)(modelId)).join(" | ")}`).join("\n"),
        resolvers: {}
      };
    },

    createListFilters
  },
  manage: {
    createSchema() {
      return {
        typeDefs: `
                    type RefField {
                        modelId: String!
                        entryId: ID!
                    }
                    
                    input RefFieldInput {
                        modelId: String!
                        entryId: ID!
                    }
                `,
        resolvers: {}
      };
    },

    createTypeField({
      field
    }) {
      if (field.multipleValues) {
        return `${field.fieldId}: [RefField]`;
      }

      return `${field.fieldId}: RefField`;
    },

    createInputField({
      field
    }) {
      if (field.multipleValues) {
        return field.fieldId + ": [RefFieldInput]";
      }

      return field.fieldId + ": RefFieldInput";
    },

    createListFilters
  }
};
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=ref.js.map