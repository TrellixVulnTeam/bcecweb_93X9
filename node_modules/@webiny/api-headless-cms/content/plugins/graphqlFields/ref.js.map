{"version":3,"sources":["../../../../src/content/plugins/graphqlFields/ref.ts"],"names":["createUnionTypeName","model","field","modelId","fieldId","createListFilters","appendTypename","entries","typename","map","item","modelIdToTypeName","Map","plugin","name","type","fieldType","isSortable","isSearchable","read","createTypeField","gqlType","settings","models","length","multipleValues","createResolver","set","parent","args","context","cms","value","entriesByModel","reduce","acc","ref","push","entryId","getters","Object","keys","getModel","READ","getPublishedByIds","getLatestByIds","get","Promise","all","then","results","result","concat","revisions","__typename","createSchema","unionFields","fields","filter","forEach","typeName","typeDefs","join","resolvers","manage","createInputField"],"mappings":"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","sourcesContent":["import { CmsContentEntry, CmsContext, CmsModelFieldToGraphQLPlugin } from \"../../../types\";\nimport { createReadTypeName } from \"../utils/createTypeName\";\n\nconst createUnionTypeName = (model, field) => {\n    return `${createReadTypeName(model.modelId)}${createReadTypeName(field.fieldId)}`;\n};\n\nconst createListFilters = ({ field }) => {\n    return `\n        ${field.fieldId}: String\n        ${field.fieldId}_in: [String!]\n        ${field.fieldId}_not: String\n        ${field.fieldId}_not_in: [String!]\n    `;\n};\n\nconst appendTypename = (entries: CmsContentEntry[], typename: string) => {\n    return entries.map(item => {\n        item[\"__typename\"] = typename;\n        return item;\n    });\n};\n\nconst modelIdToTypeName = new Map();\n\nconst plugin: CmsModelFieldToGraphQLPlugin = {\n    name: \"cms-model-field-to-graphql-ref\",\n    type: \"cms-model-field-to-graphql\",\n    fieldType: \"ref\",\n    isSortable: false,\n    isSearchable: true,\n    read: {\n        createTypeField({ model, field }) {\n            const gqlType =\n                field.settings.models.length > 1\n                    ? createUnionTypeName(model, field)\n                    : createReadTypeName(field.settings.models[0].modelId);\n\n            return field.fieldId + `: ${field.multipleValues ? `[${gqlType}]` : gqlType}`;\n        },\n        createResolver({ field }) {\n            // Create a map of model types and corresponding modelIds so resolvers don't need to perform the lookup.\n            for (const item of field.settings.models) {\n                modelIdToTypeName.set(item.modelId, createReadTypeName(item.modelId));\n            }\n\n            return async (parent, args, context: CmsContext) => {\n                const { cms } = context;\n\n                // Get field value for this entry\n                const value = parent[field.fieldId];\n\n                if (!value) {\n                    return null;\n                }\n\n                if (field.multipleValues) {\n                    if (!value.length) {\n                        return [];\n                    }\n\n                    const entriesByModel = value.reduce((acc, ref) => {\n                        if (!acc[ref.modelId]) {\n                            acc[ref.modelId] = [];\n                        }\n                        acc[ref.modelId].push(ref.entryId);\n                        return acc;\n                    }, {});\n\n                    const getters = Object.keys(entriesByModel).map(async modelId => {\n                        // Get model manager, to get access to CRUD methods\n                        const model = await cms.getModel(modelId);\n\n                        const entries: CmsContentEntry[] = cms.READ\n                            ? // `read` API works with `published` data\n                              await model.getPublishedByIds(entriesByModel[modelId])\n                            : // `preview` and `manage` with `latest` data\n                              await model.getLatestByIds(entriesByModel[modelId]);\n\n                        return appendTypename(entries, modelIdToTypeName.get(modelId));\n                    });\n\n                    return await Promise.all(getters).then(results =>\n                        results.reduce((result, item) => result.concat(item), [])\n                    );\n                }\n\n                // Get model manager, to get access to CRUD methods\n                const model = await cms.getModel(value.modelId);\n\n                const revisions = cms.READ\n                    ? // `read` API works with `published` data\n                      await model.getPublishedByIds([value.entryId])\n                    : // `preview` API works with `latest` data\n                      await model.getLatestByIds([value.entryId]);\n                /**\n                 * If there are no revisions we must return null.\n                 */\n                if (!revisions || revisions.length === 0) {\n                    return null;\n                }\n                return { ...revisions[0], __typename: modelIdToTypeName.get(value.modelId) };\n            };\n        },\n        createSchema({ models }) {\n            const unionFields = [];\n            for (const model of models) {\n                // Generate a dedicated union type for every `ref` field which has more than 1 content model assigned.\n                model.fields\n                    .filter(field => field.type === \"ref\" && field.settings.models.length > 1)\n                    .forEach(field =>\n                        unionFields.push({\n                            model,\n                            field,\n                            typeName: createUnionTypeName(model, field)\n                        })\n                    );\n            }\n\n            if (!unionFields.length) {\n                return null;\n            }\n\n            return {\n                typeDefs: unionFields\n                    .map(\n                        ({ field, typeName }) =>\n                            `union ${typeName} = ${field.settings.models\n                                .map(({ modelId }) => createReadTypeName(modelId))\n                                .join(\" | \")}`\n                    )\n                    .join(\"\\n\"),\n                resolvers: {}\n            };\n        },\n        createListFilters\n    },\n    manage: {\n        createSchema() {\n            return {\n                typeDefs: `\n                    type RefField {\n                        modelId: String!\n                        entryId: ID!\n                    }\n                    \n                    input RefFieldInput {\n                        modelId: String!\n                        entryId: ID!\n                    }\n                `,\n                resolvers: {}\n            };\n        },\n        createTypeField({ field }) {\n            if (field.multipleValues) {\n                return `${field.fieldId}: [RefField]`;\n            }\n\n            return `${field.fieldId}: RefField`;\n        },\n        createInputField({ field }) {\n            if (field.multipleValues) {\n                return field.fieldId + \": [RefFieldInput]\";\n            }\n\n            return field.fieldId + \": RefFieldInput\";\n        },\n        createListFilters\n    }\n};\n\nexport default plugin;\n"],"file":"ref.js"}