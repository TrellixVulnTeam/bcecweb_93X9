{"version":3,"sources":["../src/migrateCMSPermissions.ts"],"names":["AccessTypes","migrateCMSPermissions","permissions","getModel","fullAccess","find","permission","name","FULL","newPermissions","DEFAULT_PERMISSIONS","CONTENT_MODEL_GROUP","rwd","own","CONTENT_MODEL","CONTENT_ENTRY","forEach","entity","existingPermission","setAccessScopeToOwn","groups","moveGroups","models","moveModels","contentModels","contentModelGroups","locales","Object","keys","i","length","code","j","modelId","group","includes","id","push","values","mergeCustomizer","objValue","srcValue","Array","isArray","concat","filter","removeDuplicate","item","index","arr","findIndex","el"],"mappings":"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","sourcesContent":["import mergeWith from \"lodash/mergeWith\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { CmsContentModel } from \"./types\";\n\ntype Group = {\n    [code: string]: string[];\n};\ntype Model = {\n    [code: string]: string[];\n};\ntype CMSPermission = {\n    name: string;\n    rwd?: string;\n    pw?: string;\n    own?: boolean;\n    groups?: Group;\n    models?: Model;\n};\n\nenum AccessTypes {\n    FULL = \"cms.*\",\n    CONTENT_MODEL_GROUP = \"cms.contentModelGroup\",\n    CONTENT_MODEL = \"cms.contentModel\",\n    CONTENT_ENTRY = \"cms.contentEntry\"\n}\n\nexport const migrateCMSPermissions = async (\n    permissions: CMSPermission[],\n    getModel: (modelId: string) => Promise<CmsContentModel>\n): Promise<CMSPermission[]> => {\n    // First we've to know whether is a \"full\" access or \"custom\" access.\n    const fullAccess = permissions.find(permission => permission.name === AccessTypes.FULL);\n\n    if (fullAccess) {\n        return permissions;\n    }\n\n    // We'll construct the new newPermissions one by one.\n    const newPermissions = {};\n\n    const DEFAULT_PERMISSIONS = {\n        [AccessTypes.CONTENT_MODEL_GROUP]: {\n            name: AccessTypes.CONTENT_MODEL_GROUP,\n            rwd: \"r\",\n            own: false\n        },\n        [AccessTypes.CONTENT_MODEL]: {\n            name: AccessTypes.CONTENT_MODEL,\n            rwd: \"r\",\n            own: false\n        },\n        [AccessTypes.CONTENT_ENTRY]: {\n            name: AccessTypes.CONTENT_ENTRY,\n            rwd: \"r\",\n            own: false\n        }\n    };\n\n    // Create new permissions.\n    [AccessTypes.CONTENT_MODEL_GROUP, AccessTypes.CONTENT_MODEL, AccessTypes.CONTENT_ENTRY].forEach(\n        entity => {\n            // Check for \"entity\" permission existence.\n            const existingPermission = permissions.find(permission => permission.name === entity);\n            if (existingPermission) {\n                newPermissions[entity] = existingPermission;\n            } else {\n                newPermissions[entity] = DEFAULT_PERMISSIONS[entity];\n            }\n\n            // Handle specific cases.\n            if (entity === AccessTypes.CONTENT_MODEL_GROUP) {\n                // Just to be on the safer side.\n                if (newPermissions[entity].own) {\n                    setAccessScopeToOwn(newPermissions, entity);\n                }\n            }\n            // Handle specific cases.\n            if (entity === AccessTypes.CONTENT_MODEL) {\n                // Just to be on the safer side.\n                if (newPermissions[entity].own) {\n                    setAccessScopeToOwn(newPermissions, entity);\n                }\n                // If parent has the \"own\" access scope.\n                if (newPermissions[AccessTypes.CONTENT_MODEL_GROUP].own) {\n                    setAccessScopeToOwn(newPermissions, entity);\n                }\n                // Transfer groups data to content model groups permission\n                if (newPermissions[entity].groups) {\n                    moveGroups(newPermissions, entity);\n                }\n            }\n            // Handle specific cases.\n            if (entity === AccessTypes.CONTENT_ENTRY) {\n                // Just to be on the safer side.\n                if (newPermissions[entity].own) {\n                    setAccessScopeToOwn(newPermissions, entity);\n                }\n                // If parent has the \"own\" access scope.\n                if (newPermissions[AccessTypes.CONTENT_MODEL].own) {\n                    setAccessScopeToOwn(newPermissions, entity);\n                }\n                // Transfer groups data to content model groups permission\n                if (newPermissions[entity].groups) {\n                    moveGroups(newPermissions, entity);\n                }\n                // Transfer models data to content model groups permission\n                if (newPermissions[entity].models) {\n                    moveModels(newPermissions, entity);\n                }\n            }\n        }\n    );\n\n    /*\n     * Sync \"models\" and \"groups\".\n     * If there is a model from \"cms.contentModel\" permission's models property;\n     * whose content group is missing from \"cms.contentModelGroup\" permission's groups property;\n     * we add that into \"cms.contentModelGroup\" permission.\n     *\n     * Why?\n     * Because, now the user must need to have at least READ permission on \"cms.contentModelGroup\" to access a model defined by \"cms.contentModel\".\n     * */\n    const contentModels = newPermissions[AccessTypes.CONTENT_MODEL].models;\n\n    if (!isEmpty(contentModels)) {\n        const contentModelGroups = newPermissions[AccessTypes.CONTENT_MODEL_GROUP].groups || {};\n\n        const locales = Object.keys(contentModels);\n        for (let i = 0; i < locales.length; i++) {\n            const code = locales[i];\n            for (let j = 0; j < contentModels[code].length; j++) {\n                const modelId = contentModels[code][j];\n                // Check if we've access to it's contentModelGroup.\n                const { group } = await getModel(modelId);\n\n                if (isEmpty(contentModelGroups[code])) {\n                    contentModelGroups[code] = [];\n                }\n                if (!contentModelGroups[code].includes(group.id)) {\n                    contentModelGroups[code].push(group.id);\n                }\n            }\n        }\n\n        // Update \"groups\" value in permission.\n        newPermissions[AccessTypes.CONTENT_MODEL_GROUP].groups = contentModelGroups;\n    }\n\n    return Object.values(newPermissions);\n};\n\nconst mergeCustomizer = (objValue, srcValue) => {\n    if (Array.isArray(objValue)) {\n        return objValue.concat(srcValue).filter(removeDuplicate);\n    }\n};\n\nconst removeDuplicate = (item, index, arr) => arr.findIndex(el => el === item) === index;\n\nconst moveGroups = (permissions, entity) => {\n    if (!isEmpty(permissions[AccessTypes.CONTENT_MODEL_GROUP][\"groups\"])) {\n        permissions[AccessTypes.CONTENT_MODEL_GROUP][\"groups\"] = mergeWith(\n            permissions[AccessTypes.CONTENT_MODEL_GROUP][\"groups\"],\n            permissions[entity].groups,\n            mergeCustomizer\n        );\n    } else {\n        permissions[AccessTypes.CONTENT_MODEL_GROUP][\"groups\"] = permissions[entity].groups;\n    }\n    // Remove \"groups\" from content model permission\n    delete permissions[entity].groups;\n};\n\nconst moveModels = (permissions, entity) => {\n    if (!isEmpty(permissions[AccessTypes.CONTENT_MODEL][\"models\"])) {\n        permissions[AccessTypes.CONTENT_MODEL][\"models\"] = mergeWith(\n            permissions[AccessTypes.CONTENT_MODEL][\"models\"],\n            permissions[entity].models,\n            mergeCustomizer\n        );\n    } else {\n        permissions[AccessTypes.CONTENT_MODEL][\"models\"] = permissions[entity].models;\n    }\n    // Remove \"models\" from content model permission\n    delete permissions[entity].models;\n};\n\nconst setAccessScopeToOwn = (permissions, entity) => {\n    permissions[entity].own = true;\n    // Set primary action.\n    permissions[entity].rwd = \"rwd\";\n\n    // Remove \"groups\" from content model permission\n    delete permissions[entity].groups;\n\n    // Remove \"models\" from content model permission\n    delete permissions[entity].models;\n};\n"],"file":"migrateCMSPermissions.js"}