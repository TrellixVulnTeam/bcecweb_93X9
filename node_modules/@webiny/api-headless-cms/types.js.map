{"version":3,"sources":["../src/types.ts"],"names":["CONTENT_ENTRY_STATUS"],"mappings":";;;;;;;AA0CA;AACA;AACA;AACA;AACA;;AAiBA;AACA;AACA;AACA;AACA;;AAYA;AACA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;;AA6DA;AACA;AACA;;AAUA;AACA;AACA;AACA;AACA;AACA;;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;;AAiBA;AACA;AACA;AACA;AACA;AACA;;AAqEA;AACA;AACA;;AAkBA;AACA;AACA;AACA;AACA;;AA2NA;AACA;AACA;AACA;AACA;AACA;AACA;;AAoBA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;;AAgBA;AACA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;;AAkCA;AACA;AACA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;AACA;;AAwCA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;;AAyCA;AACA;AACA;AACA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAqDA;AACA;AACA;AACA;AACA;AACA;;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAkBA;AACA;AACA;AACA;AACA;AACA;;AA6EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA4CA;AACA;AACA;AACA;AACA;AACA;;AAyEA;AACA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;AACA;;AAyDA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;AACA;;AAgBA;AACA;AACA;AACA;AACA;AACA;;AAiGA;AACA;AACA;AACA;AACA;;AA4BA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACqE;;AACrE;AACA;AACA;AACA;AACA;AACA;;AAkBA;AACA;AACA;AACA;AACA;AACA;;AAYA;AACA;AACA;AACA;AACA;AACA;;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAyCA;AACA;AACA;AACA;;AAOA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AA6BA;AACA;AACA;AACA;;AAaA;AACA;AACA;AACA;;AAYA;AACA;AACA;AACA;;AAgBA;AACA;AACA;AACA;;AA6BA;AACA;AACA;AACA;;AA6BA;AACA;AACA;AACA;;AAoBA;AACA;AACA;AACA;;AAwBA;AACA;AACA;AACA;;AAoBA;AACA;AACA;AACA;;AAoBA;AACA;AACA;AACA;;AAYA;AACA;AACA;AACA;;AAYA;AACA;AACA;AACA;;AAgBA;AACA;AACA;AACA;;AAoBA;AACA;AACA;AACA;;AAgBA;AACA;AACA;AACA;;AAoBA;AACA;AACA;AACA;;AAgBA;AACA;AACA;AACA;;AAoBA;AACA;AACA;AACA;;AAgBA;AACA;AACA;AACA;;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;;AAoFA;AACA;AACA;;AAKA;AACA;AACA;;AAoEA;AACA;AACA;AACA;AACA;;AAsDA;AACA;AACA;;AAKA;AACA;AACA;;AAoEA;AACA;AACA;AACA;AACA;;AAgDA;AACA;AACA;;AAKA;AACA;AACA;;AA8OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IA4HYA,oB;;;WAAAA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;GAAAA,oB,oCAAAA,oB","sourcesContent":["import { Plugin } from \"@webiny/plugins/types\";\nimport { I18NContext, I18NLocale } from \"@webiny/api-i18n/types\";\nimport { ContextInterface } from \"@webiny/handler/types\";\nimport { TenancyContext } from \"@webiny/api-tenancy/types\";\nimport {\n    GraphQLFieldResolver,\n    GraphQLSchemaDefinition,\n    Resolvers\n} from \"@webiny/handler-graphql/types\";\nimport { BaseI18NContentContext } from \"@webiny/api-i18n-content/types\";\nimport { SecurityPermission } from \"@webiny/api-security/types\";\nimport { HttpContext } from \"@webiny/handler-http/types\";\nimport { DbContext } from \"@webiny/handler-db/types\";\nimport { FileManagerContext } from \"@webiny/api-file-manager/types\";\n\ninterface BaseCmsValuesObject {\n    /**\n     * API type\n     */\n    type: \"manage\" | \"preview\" | \"read\" | string;\n    /**\n     * Requested locale\n     */\n    locale: string;\n    /**\n     * returns an instance of current locale\n     */\n    getLocale: () => I18NLocale;\n    /**\n     * Means this request is a READ API\n     */\n    READ: boolean;\n    /**\n     * Means this request is a MANAGE API\n     */\n    MANAGE: boolean;\n    /**\n     * Means this request is a PREVIEW API\n     */\n    PREVIEW: boolean;\n}\n\n/**\n * @description This combines all contexts used in the CMS into a single one.\n *\n * @category Context\n */\nexport interface CmsContext\n    extends ContextInterface,\n        DbContext,\n        HttpContext,\n        I18NContext,\n        FileManagerContext,\n        BaseI18NContentContext,\n        TenancyContext {\n    cms: BaseCmsValuesObject & CmsCrudContextObject;\n}\n\ninterface CmsContentModelFieldPredefinedValuesValue {\n    value: string;\n    label: string;\n}\n\n/**\n * Object containing content model field predefined options and values.\n *\n * @category ContentModelField\n */\nexport interface CmsContentModelFieldPredefinedValues {\n    /**\n     * Are predefined field values enabled?\n     */\n    enabled: boolean;\n    /**\n     * Predefined values array.\n     */\n    values: CmsContentModelFieldPredefinedValuesValue[];\n}\n\n/**\n * Object containing content model field renderer options.\n *\n * @category ContentModelField\n */\ninterface CmsContentModelFieldRenderer {\n    /**\n     * Name of the field renderer. Must have one in field renderer plugins.\n     * Can be blank to let automatically determine the renderer.\n     */\n    name: string;\n}\n\n/**\n * A definition for content model field. This type exists on the app side as well.\n *\n * @category ContentModelField\n * @category Database model\n */\nexport interface CmsContentModelField {\n    /**\n     * A generated ID for the model field\n     */\n    id: string;\n    /**\n     * A type of the field\n     */\n    type: string;\n    /**\n     * A unique field ID for mapping values\n     */\n    fieldId: string;\n    /**\n     * A label for the field\n     */\n    label: string;\n    /**\n     * Text below the field to clarify what is it meant to be in the field value\n     */\n    helpText?: string;\n    /**\n     * Text to be displayed in the field\n     */\n    placeholderText?: string;\n    /**\n     * Are predefined values enabled? And list of them\n     */\n    predefinedValues?: CmsContentModelFieldPredefinedValues;\n    /**\n     * Field renderer. Blank if determined automatically.\n     */\n    renderer?: CmsContentModelFieldRenderer;\n    /**\n     * List of validations for the field\n     *\n     * @default []\n     */\n    validation?: CmsContentModelFieldValidation[];\n    /**\n     * List of validations for the list of values, when a field is set to accept a list of values.\n     * These validations will be applied to the entire list, and `validation` (see above) will be applied\n     * to each individual value in the list.\n     *\n     * @default []\n     */\n    listValidation?: CmsContentModelFieldValidation[];\n    /**\n     * Is this a multiple values field?\n     *\n     */\n    multipleValues?: boolean;\n    /**\n     * Any user defined settings.\n     *\n     * @default {}\n     */\n    settings?: { [key: string]: any };\n}\n\n/**\n * A definition for dateTime field to show possible type of the field in settings.\n */\nexport interface CmsContentModelDateTimeField extends CmsContentModelField {\n    /**\n     * Settings object for the field. Contains type property.\n     */\n    settings: {\n        type: \"time\" | \"date\" | \"dateTimeWithoutTimezone\" | \"dateTimeWithTimezone\";\n    };\n}\n\n/**\n * Arguments for the field validator validate method.\n *\n * @category ContentModelField\n * @category FieldValidation\n */\nexport interface CmsModelFieldValidatorValidateArgs {\n    /**\n     * A value to be validated.\n     */\n    value: any;\n    /**\n     * Options from the CmsContentModelField validations.\n     *\n     * @see CmsContentModelField.validation\n     * @see CmsContentModelField.listValidation\n     */\n    validator: CmsContentModelFieldValidation;\n    /**\n     * An instance of the current context.\n     */\n    context: CmsContext;\n    /**\n     * Field being validated.\n     */\n    field: CmsContentModelField;\n    /**\n     * An instance of the content model being validated.\n     */\n    contentModel: CmsContentModel;\n}\n\n/**\n * Definition for the field validator.\n *\n * @category Plugin\n * @category ContentModelField\n * @category FieldValidation\n */\nexport interface CmsModelFieldValidatorPlugin extends Plugin {\n    /**\n     * A plugin type.\n     */\n    type: \"cms-model-field-validator\";\n    /**\n     * Actual validator definition.\n     */\n    validator: {\n        /**\n         * Name of the validator.\n         */\n        name: string;\n        /**\n         * Validation method.\n         */\n        validate(params: CmsModelFieldValidatorValidateArgs): Promise<boolean>;\n    };\n}\n\n/**\n * A pattern validator for the content entry field value.\n *\n * @category Plugin\n * @category ContentModelField\n * @category FieldValidation\n */\nexport interface CmsModelFieldPatternValidatorPlugin extends Plugin {\n    /**\n     * A plugin type\n     */\n    type: \"cms-model-field-validator-pattern\";\n    /**\n     * A pattern object for the validator.\n     */\n    pattern: {\n        /**\n         * name of the pattern.\n         */\n        name: string;\n        /**\n         * RegExp of the validator.\n         */\n        regex: string;\n        /**\n         * RegExp flags\n         */\n        flags: string;\n    };\n}\n\n/**\n * Locked field in the content model\n *\n * @see CmsContentModel.lockedFields\n *\n * @category ContentModelField\n */\nexport interface LockedField {\n    /**\n     * Locked field ID - one used for mapping values.\n     */\n    fieldId: string;\n    /**\n     * Is the field multiple values field?\n     */\n    multipleValues: boolean;\n    /**\n     * Field type.\n     */\n    type: string;\n    [key: string]: any;\n}\n\n/**\n * Content model defining an entry.\n *\n * @category Database model\n * @category ContentModel\n */\nexport interface CmsContentModel {\n    /**\n     * Name of the content model.\n     */\n    name: string;\n    /**\n     * Unique ID for the content model. Created from name if not defined by user.\n     */\n    modelId: string;\n    /**\n     * Locale this model belongs to.\n     */\n    locale?: string;\n    /**\n     * Content model group reference object.\n     */\n    group: {\n        /**\n         * Generated ID of the group\n         */\n        id: string;\n        /**\n         * Name of the group\n         */\n        name: string;\n    };\n    /**\n     * Description for the content model.\n     */\n    description?: string;\n    /**\n     * Date created\n     */\n    createdOn?: Date;\n    /**\n     * Date saved. Changes on both save and create.\n     */\n    savedOn?: Date;\n    /**\n     * CreatedBy object wrapper. Contains id, name and type of the user.\n     */\n    createdBy?: CreatedBy;\n    /**\n     * List of fields defining entry values.\n     */\n    fields: CmsContentModelField[];\n    /**\n     * Admin UI field layout\n     *\n     * ```ts\n     * layout: [\n     *      [field1id, field2id],\n     *      [field3id]\n     * ]\n     * ```\n     */\n    layout: string[][];\n    /**\n     * List of locked fields. Updated when entry is saved and a field has been used.\n     */\n    lockedFields?: LockedField[];\n    /**\n     * The field that is being displayed as entry title.\n     * It is picked as first available text field. Or user can select own field.\n     */\n    titleFieldId: string;\n}\n\n/**\n * @category ContentModelField\n */\nexport interface CmsModelFieldDefinition {\n    fields: string;\n    typeDefs?: string;\n}\n\nexport interface CmsModelFieldToGraphQLCreateResolver {\n    (params: {\n        models: CmsContentModel[];\n        model: CmsContentModel;\n        graphQLType: string;\n        field: CmsContentModelField;\n        createFieldResolvers: any;\n    }):\n        | GraphQLFieldResolver\n        | { resolver: GraphQLFieldResolver; typeResolvers: Resolvers<CmsContext> };\n}\n\n/**\n * @category Plugin\n * @category ContentModelField\n * @category GraphQL\n */\nexport interface CmsModelFieldToGraphQLPlugin extends Plugin {\n    /**\n     * A plugin type\n     */\n    type: \"cms-model-field-to-graphql\";\n    /**\n     * Field type name which must be exact as the one in `CmsEditorFieldTypePlugin` plugin.\n     *\n     * ```ts\n     * fieldType: \"myField\"\n     * ```\n     */\n    fieldType: string;\n    /**\n     * Is the field searchable via the GraphQL?\n     *\n     * ```ts\n     * isSearchable: false\n     * ```\n     */\n    isSearchable: boolean;\n    /**\n     * Is the field sortable via the GraphQL?\n     *\n     * ```ts\n     * isSortable: true\n     * ```\n     */\n    isSortable: boolean;\n    read: {\n        /**\n         * Definition for get filtering for GraphQL.\n         *\n         * ```ts\n         * read: {\n         *     createGetFilters({ field }) {\n         *         return `${field.fieldId}: MyField`;\n         *     }\n         * }\n         * ```\n         */\n        createGetFilters?(params: { model: CmsContentModel; field: CmsContentModelField }): string;\n        /**\n         * Definition for list filtering for GraphQL.\n         *\n         * ```ts\n         * read: {\n         *     createListFilters({ field }) {\n         *         return `\n         *             ${field.fieldId}: MyType\n         *             ${field.fieldId}_not: MyType\n         *             ${field.fieldId}_in: [MyType]\n         *             ${field.fieldId}_not_in: [MyType]\n         *         `;\n         *     }\n         * }\n         * ```\n         */\n        createListFilters?(params: { model: CmsContentModel; field: CmsContentModelField }): string;\n        /**\n         * Definition of the field type for GraphQL - be aware if multiple values is selected.\n         *\n         * ```ts\n         * read: {\n         *     createTypeField({ field }) {\n         *         if (field.multipleValues) {\n         *             return `${field.fieldId}: [MyFieldType]`;\n         *         }\n         *\n         *         return `${field.fieldId}: MyField`;\n         *     }\n         * }\n         * ```\n         */\n        createTypeField(params: {\n            model: CmsContentModel;\n            field: CmsContentModelField;\n            fieldTypePlugins: CmsFieldTypePlugins;\n        }): CmsModelFieldDefinition | string;\n        /**\n         * Definition for field resolver.\n         * By default it is simple return of the `instance.values[fieldId]` but if required, users can define their own.\n         *\n         * ```ts\n         * read: {\n         *     createResolver({ field }) {\n         *         return instance => {\n         *             return instance.values[field.fieldId];\n         *         };\n         *     }\n         * }\n         * ```\n         */\n        createResolver?: CmsModelFieldToGraphQLCreateResolver;\n        /**\n         * Read API schema definitions for the field and resolvers for them.\n         *\n         * ```ts\n         * read: {\n         *     createSchema() {\n         *         return {\n         *             typeDefs: `\n         *                 myField {\n         *                     id\n         *                     date\n         *                 }\n         *             `,\n         *             resolvers: {}\n         *         }\n         *     }\n         * }\n         * ```\n         */\n        createSchema?: (params: {\n            models: CmsContentModel[];\n            model: CmsContentModel;\n        }) => GraphQLSchemaDefinition<CmsContext>;\n    };\n    manage: {\n        /**\n         * Definition for list filtering for GraphQL.\n         *\n         * ```ts\n         * manage: {\n         *     createListFilters({ field }) {\n         *         return `\n         *             ${field.fieldId}: MyType\n         *             ${field.fieldId}_not: MyType\n         *             ${field.fieldId}_in: [MyType]\n         *             ${field.fieldId}_not_in: [MyType]\n         *         `;\n         *     }\n         * }\n         * ```\n         */\n        createListFilters?: (params: {\n            model: CmsContentModel;\n            field: CmsContentModelField;\n        }) => string;\n        /**\n         * Manage API schema definitions for the field and resolvers for them. Probably similar to `read.createSchema`.\n         *\n         * ```ts\n         *     createSchema() {\n         *         return {\n         *             typeDefs: `\n         *                 myField {\n         *                     id\n         *                     date\n         *                 }\n         *             `,\n         *             resolvers: {}\n         *         }\n         *     }\n         * ```\n         */\n        createSchema?: (params: {\n            models: CmsContentModel[];\n            model: CmsContentModel;\n        }) => GraphQLSchemaDefinition<CmsContext>;\n        /**\n         * Definition of the field type for GraphQL - be aware if multiple values is selected. Probably same as `read.createTypeField`.\n         *\n         * ```ts\n         * manage: {\n         *     createTypeField({ field }) {\n         *         if (field.multipleValues) {\n         *             return field.fieldId + \": [MyType]\";\n         *         }\n         *\n         *         return field.fieldId + \": MyType\";\n         *     }\n         * }\n         * ```\n         */\n        createTypeField: (params: {\n            model: CmsContentModel;\n            field: CmsContentModelField;\n            fieldTypePlugins: CmsFieldTypePlugins;\n        }) => CmsModelFieldDefinition | string;\n        /**\n         * Definition for input GraphQL field type.\n         *\n         * ```ts\n         * manage: {\n         *     createInputField({ field }) {\n         *         if (field.multipleValues) {\n         *             return field.fieldId + \": [MyField]\";\n         *         }\n         *\n         *         return field.fieldId + \": MyField\";\n         *     }\n         * }\n         * ```\n         */\n        createInputField: (params: {\n            model: CmsContentModel;\n            field: CmsContentModelField;\n            fieldTypePlugins: CmsFieldTypePlugins;\n        }) => CmsModelFieldDefinition | string;\n        /**\n         * Definition for field resolver.\n         * By default it is simple return of the `instance.values[fieldId]` but if required, users can define their own.\n         *\n         * ```ts\n         * manage: {\n         *     createResolver({ field }) {\n         *         return instance => {\n         *             return instance.values[field.fieldId];\n         *         };\n         *     }\n         * }\n         * ```\n         */\n        createResolver?: CmsModelFieldToGraphQLCreateResolver;\n    };\n}\n\n/**\n * Check for content model locked field.\n * A custom plugin definable by the user.\n *\n * @category ContentModel\n * @category Plugin\n */\nexport interface CmsModelLockedFieldPlugin extends Plugin {\n    /**\n     * A plugin type\n     */\n    type: \"cms-model-locked-field\";\n    /**\n     * A unique identifier of the field type (text, number, json, myField, ...).\n     */\n    fieldType: string;\n    /**\n     * A method to check if field really is locked.\n     */\n    checkLockedField?: (params: { lockedField: LockedField; field: CmsContentModelField }) => void;\n    /**\n     * A method to get the locked field data.\n     */\n    getLockedFieldData?: (params: { field: CmsContentModelField }) => Record<string, any>;\n}\n\n/**\n * @category ContentModelField\n */\nexport interface CmsFieldTypePlugins {\n    [key: string]: CmsModelFieldToGraphQLPlugin;\n}\n\n/**\n * A interface describing the reference to a user that created some data in the database.\n *\n * @category General\n */\nexport interface CreatedBy {\n    /**\n     * ID if the user.\n     */\n    id: string;\n    /**\n     * Full name of the user.\n     */\n    displayName: string;\n    /**\n     * Type of the user (admin, user)\n     */\n    type: string;\n}\n\n/**\n * Representation of settings database model.\n *\n * @category Database model\n */\nexport interface CmsSettings {\n    /**\n     * Last content model change. Used to cache GraphQL schema.\n     */\n    contentModelLastChange: Date;\n}\n\n/**\n * Settings CRUD in context.\n *\n * @category Context\n */\nexport interface CmsSettingsContext {\n    /**\n     * A function defining usage of a method without authenticating the user.\n     */\n    noAuth: () => {\n        /**\n         * Gets settings model from the database.\n         */\n        get: () => Promise<CmsSettings | null>;\n    };\n    /**\n     * Gets settings model from the database.\n     */\n    get: () => Promise<CmsSettings | null>;\n    /**\n     * Updates settings model with a new date.\n     */\n    updateContentModelLastChange: () => Promise<void>;\n    /**\n     * Get the datetime when content model last changed.\n     */\n    getContentModelLastChange: () => Promise<Date>;\n}\n\nexport type CmsSystemContext = {\n    getVersion: () => Promise<string>;\n    setVersion: (version: string) => Promise<void>;\n    getReadAPIKey(): Promise<string>;\n    setReadAPIKey(apiKey: string): Promise<void>;\n    install: () => Promise<void>;\n    upgrade: (version: string) => Promise<boolean>;\n};\n\n/**\n * A GraphQL args.data parameter received when creating content model group.\n *\n * @category ContentModelGroup\n * @category GraphQL args\n */\nexport interface CmsContentModelGroupCreateInput {\n    name: string;\n    slug?: string;\n    description?: string;\n    icon: string;\n}\n\n/**\n * A GraphQL args.data parameter received when updating content model group.\n *\n * @category ContentModelGroup\n * @category GraphQL args\n */\nexport interface CmsContentModelGroupUpdateInput {\n    name?: string;\n    slug?: string;\n    description?: string;\n    icon?: string;\n}\n\n/**\n * A representation of content model group in the database.\n *\n * @category ContentModelGroup\n * @category Database model\n */\nexport interface CmsContentModelGroup {\n    /**\n     * Generated ID.\n     */\n    id: string;\n    /**\n     * Name of the group.\n     */\n    name: string;\n    /**\n     * Slug for the group. Must be unique.\n     */\n    slug: string;\n    /**\n     * Locale this group belongs to.\n     */\n    locale?: string;\n    /**\n     * Description for the group.\n     */\n    description?: string;\n    /**\n     * Icon for the group. In a form of \"ico/ico\".\n     */\n    icon?: string;\n    /**\n     * CreatedBy reference object.\n     */\n    createdBy?: CreatedBy;\n    /**\n     * Date group was created on.\n     */\n    createdOn?: Date;\n    /**\n     * Date group was created or changed on.\n     */\n    savedOn?: Date;\n}\n\n/**\n * A data.where parameter received when listing content model groups.\n *\n * @category ContentModelGroup\n * @category GraphQL args\n */\nexport interface CmsContentModelGroupListArgs {\n    where?: Record<string, any>;\n    limit?: number;\n}\n\n/**\n * Content model group in context.\n *\n * @category Context\n * @category ContentModelGroup\n */\nexport interface CmsContentModelGroupContext {\n    /**\n     * Plain operations on the storage level.\n     */\n    operations: CmsContentModelGroupStorageOperations;\n    /**\n     * A function defining usage of a method without authenticating the user.\n     */\n    noAuth: () => {\n        /**\n         * Gets content model group by given id.\n         */\n        get: (id: string) => Promise<CmsContentModelGroup | null>;\n        /**\n         * List all content model groups. Filterable via params.\n         */\n        list: (args?: CmsContentModelGroupListArgs) => Promise<CmsContentModelGroup[]>;\n    };\n    /**\n     * Gets content model group by given id.\n     */\n    get: (id: string) => Promise<CmsContentModelGroup | null>;\n    /**\n     * List all content model groups. Filterable via params.\n     */\n    list: (args?: CmsContentModelGroupListArgs) => Promise<CmsContentModelGroup[]>;\n    /**\n     * Create a new content model group.\n     */\n    create: (data: CmsContentModelGroupCreateInput) => Promise<CmsContentModelGroup>;\n    /**\n     * Update existing content model group.\n     */\n    update: (id: string, data: CmsContentModelGroupUpdateInput) => Promise<CmsContentModelGroup>;\n    /**\n     * Delete content model group by given id.\n     */\n    delete: (id: string) => Promise<boolean>;\n}\n\n/**\n * Definition for content model field validator.\n *\n * @category ContentModelField\n * @category FieldValidation\n */\nexport interface CmsContentModelFieldValidation {\n    name: string;\n    message: string;\n    settings?: Record<string, any>;\n}\n\n/**\n * A GraphQL args.data parameter received when creating content model.\n *\n * @category GraphQL args\n * @category ContentModel\n */\nexport interface CmsContentModelCreateInput {\n    /**\n     * Name of the content model.\n     */\n    name: string;\n    /**\n     * Unique ID of the content model. Created from name if not sent by the user. Cannot be changed.\n     */\n    modelId?: string;\n    /**\n     * Description of the content model.\n     */\n    description?: string;\n}\n\n/**\n * A definition for content model field received from the user.\n *\n * Input type for `CmsContentModelField`.\n * @see CmsContentModelField\n *\n * @category GraphQL args\n * @category ContentModelField\n */\nexport interface CmsContentModelFieldInput {\n    /**\n     * Generated ID.\n     */\n    id: string;\n    /**\n     * Type of the field. A plugin for the field must be defined.\n     * @see CmsModelFieldToGraphQLPlugin\n     */\n    type: string;\n    /**\n     * A unique ID for the field. Values will be mapped via this value.\n     */\n    fieldId: string;\n    /**\n     * Label for the field.\n     */\n    label: string;\n    /**\n     * Text to display below the field to help user what to write in the field.\n     */\n    helpText?: string;\n    /**\n     * Text to display in the field.\n     */\n    placeholderText?: string;\n    /**\n     * Are multiple values allowed?\n     */\n    multipleValues?: boolean;\n    /**\n     * Predefined values options for the field. Check the reference for more information.\n     */\n    predefinedValues?: CmsContentModelFieldPredefinedValues;\n    /**\n     * Renderer options for the field. Check the reference for more information.\n     */\n    renderer?: CmsContentModelFieldRenderer;\n    /**\n     * List of validations for the field.\n     */\n    validation?: CmsContentModelFieldValidation[];\n    /**\n     * @see CmsContentModelField.listValidation\n     */\n    listValidation: CmsContentModelFieldValidation[];\n    /**\n     * User defined settings.\n     */\n    settings?: Record<string, any>;\n}\n\n/**\n * A GraphQL args.data parameter received when updating content model.\n *\n * @category GraphQL args\n * @category ContentModel\n */\nexport interface CmsContentModelUpdateInput {\n    /**\n     * A new content model name.\n     */\n    name?: string;\n    /**\n     * A new description of the content model.\n     */\n    description?: string;\n    /**\n     * A list of content model fields to define the entry values.\n     */\n    fields: CmsContentModelFieldInput[];\n    /**\n     * Admin UI field layout\n     *\n     * ```ts\n     * layout: [\n     *      [field1id, field2id],\n     *      [field3id]\n     * ]\n     * ```\n     */\n    layout: string[][];\n    /**\n     * The field that is being displayed as entry title.\n     * It is picked as first available text field. Or user can select own field.\n     */\n    titleFieldId?: string;\n}\n\n/**\n * A plugin to load a CmsContentModelManager.\n *\n * @see CmsContentModelManager\n *\n * @category Plugin\n * @category ContentModel\n * @category ContentEntry\n */\nexport interface ContentModelManagerPlugin extends Plugin {\n    /**\n     * A plugin type.\n     */\n    type: \"cms-content-model-manager\";\n    /**\n     * Specific model CmsContentModelManager loader. Can target exact modelId(s).\n     * Be aware that if you define multiple plugins without `modelId`, last one will run.\n     */\n    modelId?: string[] | string;\n    /**\n     * Create a CmsContentModelManager for specific type - or new default one.\n     * For reference in how is this plugin run check [contentModelManagerFactory](https://github.com/webiny/webiny-js/blob/f15676/packages/api-headless-cms/src/content/plugins/CRUD/contentModel/contentModelManagerFactory.ts)\n     */\n    create: (context: CmsContext, model: CmsContentModel) => Promise<CmsContentModelManager>;\n}\n\n/**\n * A content entry definition for and from the database.\n *\n * @category Database model\n * @category ContentEntry\n */\nexport interface CmsContentEntry {\n    /**\n     * A version of the webiny this entry was created with.\n     * This can be used when upgrading the system so we know which entries to update.\n     */\n    webinyVersion: string;\n    /**\n     * Tenant id which is this entry for. Can be used in case of shared storage.\n     */\n    tenant: string;\n    /**\n     * Generated ID of the entry. It is shared across all the records in the database that represent a single entry.\n     * So version 1, 2, ..., 2371 will have the same value in this field to link them together.\n     */\n    entryId: string;\n    /**\n     * Generated ID + version of the entry.\n     */\n    id: string;\n    /**\n     * CreatedBy object reference.\n     */\n    createdBy: CreatedBy;\n    /**\n     * OwnedBy object reference. Can be different from CreatedBy.\n     */\n    ownedBy: CreatedBy;\n    /**\n     * A string of Date.toISOString() type.\n     * Populated on creation.\n     */\n    createdOn: string;\n    /**\n     * A string of Date.toISOString() type.\n     * Populated every time entry is saved.\n     */\n    savedOn: string;\n    /**\n     * Model ID of the definition for the entry.\n     * @see CmsContentModel\n     */\n    modelId: string;\n    /**\n     * A locale of the entry.\n     * @see I18NLocale.code\n     */\n    locale: string;\n    /**\n     * A string of Date.toISOString() type - if published.\n     * Populated when entry is published.\n     */\n    publishedOn?: string;\n    /**\n     * A revision version of the entry.\n     */\n    version: number;\n    /**\n     * Is the entry locked?\n     */\n    locked: boolean;\n    /**\n     * Status type of the entry.\n     */\n    status: CmsContentEntryStatus;\n    /**\n     * A mapped fieldId -> value object.\n     *\n     * @see CmsContentModelField\n     */\n    values: Record<string, any>;\n}\n\nexport interface CmsStorageContentEntry extends CmsContentEntry {\n    [key: string]: any;\n}\n\n/**\n * A definition for content model manager to be used in the code.\n * The default one uses `CmsContentEntryContext` methods internally, but devs can change to what every they want.\n *\n * @see CmsContentEntryContext\n *\n * @category Context\n * @category ContentEntry\n * @category ContentModel\n */\nexport interface CmsContentModelManager {\n    /**\n     * List entries in this content model.\n     */\n    list: (args?: CmsContentEntryListArgs) => Promise<[CmsContentEntry[], CmsContentEntryMeta]>;\n    /**\n     * List only published entries in the content model.\n     */\n    listPublished: (\n        args?: CmsContentEntryListArgs\n    ) => Promise<[CmsContentEntry[], CmsContentEntryMeta]>;\n    /**\n     * List latest entries in the content model. Used for administration.\n     */\n    listLatest: (\n        args?: CmsContentEntryListArgs\n    ) => Promise<[CmsContentEntry[], CmsContentEntryMeta]>;\n    /**\n     * Get a list of published entries by the ID list.\n     */\n    getPublishedByIds: (ids: string[]) => Promise<CmsContentEntry[]>;\n    /**\n     * Get a list of latest entries by the ID list.\n     */\n    getLatestByIds: (ids: string[]) => Promise<CmsContentEntry[]>;\n    /**\n     * Get an entry filtered by given args. Will always get one.\n     */\n    get: (args?: CmsContentEntryGetArgs) => Promise<CmsContentEntry>;\n    /**\n     * Create a entry.\n     */\n    create: (data: Record<string, any>) => Promise<CmsContentEntry>;\n    /**\n     * Update a entry.\n     */\n    update: (id: string, data: Record<string, any>) => Promise<CmsContentEntry>;\n    /**\n     * Delete a entry.\n     */\n    delete: (id: string) => Promise<void>;\n}\n\n/**\n * Content model in the context.\n *\n * @category Context\n * @category ContentModel\n */\nexport interface CmsContentModelContext {\n    /**\n     * Plain operations on the storage level.\n     */\n    operations: CmsContentModelStorageOperations;\n    /**\n     * A function defining usage of a method without authenticating the user.\n     */\n    noAuth: () => {\n        /**\n         * Get a single content model.\n         */\n        get: (modelId: string) => Promise<CmsContentModel | null>;\n        /**\n         * Get all content models.\n         */\n        list: () => Promise<CmsContentModel[]>;\n    };\n    /**\n     * A function defining usage of a method with authenticating the user but not throwing an error.\n     */\n    silentAuth: () => {\n        /**\n         * Get all content models.\n         */\n        list: () => Promise<CmsContentModel[]>;\n    };\n    /**\n     * Get a single content model.\n     */\n    get: (modelId: string) => Promise<CmsContentModel | null>;\n    /**\n     * Get all content models.\n     */\n    list: () => Promise<CmsContentModel[]>;\n    /**\n     * Create a content model.\n     */\n    create: (data: CmsContentModelCreateInput) => Promise<CmsContentModel>;\n    /**\n     * Update content model without data validation. Used internally.\n     *\n     * @param model - existing content model\n     * @param data - data to be updated\n     *\n     * @hidden\n     */\n    updateModel: (\n        model: CmsContentModel,\n        data: Partial<CmsContentModel>\n    ) => Promise<CmsContentModel>;\n    /**\n     * Update content model.\n     */\n    update: (modelId: string, data: CmsContentModelUpdateInput) => Promise<CmsContentModel>;\n    /**\n     * Delete content model. Should not allow deletion if there are entries connected to it.\n     */\n    delete: (modelId: string) => Promise<void>;\n    /**\n     * Get a instance of CmsContentModelManager for given content modelId.\n     *\n     * @see CmsContentModelManager\n     */\n    getManager: (modelId: string) => Promise<CmsContentModelManager>;\n    /**\n     * Get all content model managers mapped by modelId.\n     * @see CmsContentModelManager\n     */\n    getManagers: () => Map<string, CmsContentModelManager>;\n}\n\n/**\n * Available statuses for content entry.\n *\n * @category ContentEntry\n */\ntype CmsContentEntryStatus =\n    | \"published\"\n    | \"unpublished\"\n    | \"reviewRequested\"\n    | \"changesRequested\"\n    | \"draft\";\n\n/**\n * Entry listing where args.\n *\n * @category ContentEntry\n * @category GraphQL args\n */\nexport interface CmsContentEntryListWhere {\n    id?: string;\n    id_in?: string[];\n    id_not?: string;\n    id_not_in?: string[];\n    /**\n     * Generated ID without the version.\n     */\n    entryId?: string;\n    entryId_not?: string;\n    entryId_in?: string[];\n    entryId_not_in?: string[];\n    /**\n     * Entry is owned by whom?\n     *\n     * Can be sent via the API or set internal if user can see only their own entries.\n     */\n    ownedBy?: string;\n    ownedBy_not?: string;\n    ownedBy_in?: string[];\n    ownedBy_not_in?: string[];\n    /**\n     * Who created the entry?\n     */\n    createdBy?: string;\n    createdBy_not?: string;\n    createdBy_in?: string[];\n    createdBy_not_in?: string[];\n    /**\n     * Version of the entry.\n     *\n     * It is not meant to be used via the API.\n     * @internal\n     */\n    version?: number;\n    version_lt?: number;\n    version_gt?: number;\n    /**\n     * Each operations implementation MUST determine how to use this field.\n     * In SQL it can be published field and in DynamoDB can be a secondary key.\n     *\n     * It is not meant to be used via the API.\n     * @internal\n     */\n    published?: boolean;\n    /**\n     * Each operations implementation MUST determine how to use this field.\n     * In SQL it can be published field and in DynamoDB can be a secondary key.\n     *\n     * It is not meant to be used via the API.\n     * @internal\n     */\n    latest?: boolean;\n    [key: string]: any;\n}\n\n/**\n * Entry listing sort.\n *\n * @category ContentEntry\n * @category GraphQL args\n */\nexport type CmsContentEntryListSort = string[];\n\n/**\n * Get entry GraphQL resolver args.\n *\n * @category ContentEntry\n * @category GraphQL args\n */\nexport interface CmsContentEntryGetArgs {\n    where?: CmsContentEntryListWhere;\n    sort?: CmsContentEntryListSort;\n}\n\n/**\n * List entries GraphQL resolver args.\n *\n * @category ContentEntry\n * @category GraphQL args\n */\nexport interface CmsContentEntryListArgs {\n    where?: CmsContentEntryListWhere;\n    sort?: CmsContentEntryListSort;\n    limit?: number;\n    after?: string;\n}\n\n/**\n * Meta information for GraphQL output.\n *\n * @category ContentEntry\n * @category GraphQL output\n */\nexport interface CmsContentEntryMeta {\n    /**\n     * A cursor for pagination.\n     */\n    cursor: string;\n    /**\n     * Is there more items to load?\n     */\n    hasMoreItems: boolean;\n    /**\n     * Total count of the items in the storage.\n     */\n    totalCount: number;\n}\n\n/**\n * Content entry CRUD methods in the context.\n *\n * @category Context\n * @category ContentEntry\n */\nexport interface CmsContentEntryContext {\n    /**\n     * Plain operations on the storage level.\n     */\n    operations: CmsContentEntryStorageOperations;\n    /**\n     * Get a single content entry for a model.\n     */\n    get: (model: CmsContentModel, args: CmsContentEntryGetArgs) => Promise<CmsContentEntry | null>;\n    /**\n     * Get a list of entries for a model by a given ID (revision).\n     */\n    getByIds: (model: CmsContentModel, revisions: string[]) => Promise<CmsContentEntry[] | null>;\n    /**\n     * Get the entry for a model by a given ID.\n     */\n    getById: (model: CmsContentModel, revision: string) => Promise<CmsContentEntry>;\n    /**\n     * List entries for a model. Internal method used by get, listLatest and listPublished.\n     */\n    list: (\n        model: CmsContentModel,\n        args?: CmsContentEntryListArgs\n    ) => Promise<[CmsContentEntry[], CmsContentEntryMeta]>;\n    /**\n     * Lists latest entries. Used for manage API.\n     */\n    listLatest: (\n        model: CmsContentModel,\n        args?: CmsContentEntryListArgs\n    ) => Promise<[CmsContentEntry[], CmsContentEntryMeta]>;\n    /**\n     * List published entries. Used for read API.\n     */\n    listPublished: (\n        model: CmsContentModel,\n        args?: CmsContentEntryListArgs\n    ) => Promise<[CmsContentEntry[], CmsContentEntryMeta]>;\n    /**\n     * List published entries by IDs.\n     */\n    getPublishedByIds: (model: CmsContentModel, ids: string[]) => Promise<CmsContentEntry[]>;\n    /**\n     * List latest entries by IDs.\n     */\n    getLatestByIds: (model: CmsContentModel, ids: string[]) => Promise<CmsContentEntry[]>;\n    /**\n     * Create a new content entry.\n     */\n    create: (model: CmsContentModel, data: Record<string, any>) => Promise<CmsContentEntry>;\n    /**\n     * Create a new entry from already existing entry.\n     */\n    createRevisionFrom: (\n        model: CmsContentModel,\n        id: string,\n        data: Record<string, any>\n    ) => Promise<CmsContentEntry>;\n    /**\n     * Update existing entry.\n     */\n    update: (\n        model: CmsContentModel,\n        id: string,\n        data?: Record<string, any>\n    ) => Promise<CmsContentEntry>;\n    /**\n     * Delete only a certain revision of the entry.\n     */\n    deleteRevision: (model: CmsContentModel, id: string) => Promise<void>;\n    /**\n     * Delete entry with all its revisions.\n     */\n    deleteEntry: (model: CmsContentModel, id: string) => Promise<void>;\n    /**\n     * Publish entry.\n     */\n    publish: (model: CmsContentModel, id: string) => Promise<CmsContentEntry>;\n    /**\n     * Unpublish entry.\n     */\n    unpublish: (model: CmsContentModel, id: string) => Promise<CmsContentEntry>;\n    /**\n     * Request a review for the entry.\n     */\n    requestReview: (model: CmsContentModel, id: string) => Promise<CmsContentEntry>;\n    /**\n     * Request changes for the entry.\n     */\n    requestChanges: (model: CmsContentModel, id: string) => Promise<CmsContentEntry>;\n    /**\n     * Get all entry revisions.\n     */\n    getEntryRevisions: (model: CmsContentModel, id: string) => Promise<CmsContentEntry[]>;\n}\n\n/**\n * A cms part of the context that has all the CRUD operations.\n *\n * @category Context\n */\ninterface CmsCrudContextObject {\n    /**\n     * Settings CRUD methods.\n     */\n    settings: CmsSettingsContext;\n    /**\n     * Content model group CRUD methods.\n     */\n    groups: CmsContentModelGroupContext;\n    /**\n     * Content model CRUD methods.\n     */\n    models: CmsContentModelContext;\n    /**\n     * Fetch the content entry manager. It calls content entry methods internally, with given model as the target.\n     */\n    getModel: (modelId: string) => Promise<CmsContentModelManager>;\n    /**\n     * Content entry CRUD methods.\n     */\n    entries: CmsContentEntryContext;\n    /**\n     * System CRUD methods\n     */\n    system: CmsSystemContext;\n}\n\n/**\n * Parameters for ContentEntryResolverFactory.\n *\n * @category GraphQL resolver\n * @category ContentEntry\n */\ninterface CmsContentEntryResolverFactoryParams {\n    model: CmsContentModel;\n}\n\n/**\n * A type for ContentEntryResolvers. Used when creating get, list, update, publish, ...etc.\n *\n * @category GraphQL resolver\n * @category ContentEntry\n */\nexport type CmsContentEntryResolverFactory<TSource = any, TArgs = any, TContext = CmsContext> = {\n    (params: CmsContentEntryResolverFactoryParams): GraphQLFieldResolver<TSource, TArgs, TContext>;\n};\n\n/**\n * Settings security permission.\n *\n * @category SecurityPermission\n */\nexport interface CmsSettingsPermission extends SecurityPermission {} // eslint-disable-line\n/**\n * A security permission for content model.\n *\n * @category SecurityPermission\n * @category ContentModel\n */\nexport interface CmsContentModelPermission extends SecurityPermission {\n    own: boolean;\n    rwd: string;\n    /**\n     * A object representing `key: model.modelId` values where key is locale code.\n     */\n    models?: {\n        [key: string]: string[];\n    };\n    /**\n     * A object representing `key: group.id` values where key is locale code.\n     */\n    groups?: {\n        [key: string]: string[];\n    };\n}\n\n/**\n * The security permission for content model groups.\n *\n * @category SecurityPermission\n * @category ContentModelGroup\n */\nexport interface CmsContentModelGroupPermission extends SecurityPermission {\n    own: boolean;\n    rwd: string;\n    /**\n     * A object representing `key: group.id` values where key is locale code.\n     */\n    groups?: {\n        [key: string]: string[];\n    };\n}\n\n/**\n * The security permission for content entry.\n *\n * @category SecurityPermission\n * @category ContentEntry\n */\nexport interface CmsContentEntryPermission extends SecurityPermission {\n    own: boolean;\n    rwd: string;\n    pw: string;\n    /**\n     * A object representing `key: model.modelId` values where key is locale code.\n     */\n    models?: {\n        [key: string]: string[];\n    };\n    /**\n     * A object representing `key: group.id` values where key is locale code.\n     */\n    groups?: {\n        [key: string]: string[];\n    };\n}\n\n/**\n * A argument definition for CmsModelFieldToStoragePlugin.toStorage\n *\n * @see CmsModelFieldToStoragePlugin.toStorage\n *\n * @category Plugin\n * @category ContentModelField\n * @category Storage\n */\nexport interface CmsModelFieldToStoragePluginToStorageArgs<T> {\n    model: CmsContentModel;\n    field: CmsContentModelField;\n    value: T;\n    getStoragePlugin(fieldType: string): CmsModelFieldToStoragePlugin<T>;\n    context: CmsContext;\n}\n\n/**\n * A argument definition for CmsModelFieldToStoragePlugin.fromStorage\n *\n * @see CmsModelFieldToStoragePlugin.fromStorage\n *\n * @category Plugin\n * @category ContentModelField\n * @category Storage\n */\nexport interface CmsModelFieldToStoragePluginFromStorageArgs<T> {\n    model: CmsContentModel;\n    field: CmsContentModelField;\n    value: T;\n    getStoragePlugin(fieldType: string): CmsModelFieldToStoragePlugin<T>;\n    context: CmsContext;\n}\n\n/**\n * A plugin defining transformation of field value to and from storage.\n *\n * @category Plugin\n * @category ContentModelField\n * @category ContentEntry\n * @category Storage\n */\nexport interface CmsModelFieldToStoragePlugin<\n    Original = Record<string, any>,\n    Converted = Record<string, any>\n> extends Plugin {\n    /**\n     * A plugin type\n     */\n    type: \"cms-model-field-to-storage\";\n    /**\n     * A unique identifier of the field type (text, number, json, myField, ...).\n     *\n     * ```ts\n     * fieldType: \"myField\"\n     * ```\n     */\n    fieldType: string;\n    /**\n     * A function that is ran when storing the data. You can do what ever transformations you need on input value and return a new value that is stored into the database.\n     *\n     * ```ts\n     * toStorage({ value }) {\n     *      return gzip(value);\n     * }\n     * ```\n     */\n    toStorage: (args: CmsModelFieldToStoragePluginToStorageArgs<Original>) => Promise<Converted>;\n    /**\n     * A function that is ran when retrieving the data from the database. You either revert the action you did in the `toStorage` or handle it via some other way available to you.\n     *\n     * ```ts\n     * fromStorage({ value }) {\n     *      return ungzip(value);\n     * }\n     * ```\n     */\n    fromStorage: (\n        args: CmsModelFieldToStoragePluginFromStorageArgs<Converted>\n    ) => Promise<Original>;\n}\n\n/**\n * @category LifecycleHook\n * @category ContentModel\n */\nexport interface CmsContentModelHookPluginArgs {\n    model: CmsContentModel;\n    context: CmsContext;\n    storageOperations: CmsContentModelStorageOperations;\n}\n\n/**\n * @category LifecycleHook\n * @category ContentModel\n */\nexport interface CmsContentModelCreateHookPluginArgs extends CmsContentModelHookPluginArgs {\n    input: CmsContentModelCreateInput;\n}\n\n/**\n * @category LifecycleHook\n * @category ContentModel\n */\nexport interface CmsContentModelUpdateHookPluginArgs extends CmsContentModelHookPluginArgs {\n    input: CmsContentModelUpdateInput;\n}\n\n/**\n * A plugin type that defines lifecycle hooks for content model.\n *\n * @category Plugin\n * @category ContentModel\n * @category LifecycleHook\n */\nexport interface CmsContentModelHookPlugin extends Plugin {\n    type: \"cms-content-model-hook\";\n    /**\n     * A hook triggered before the content model is created.\n     */\n    beforeCreate?: (args: CmsContentModelCreateHookPluginArgs) => void;\n    /**\n     * A hook triggered after the content model is created.\n     */\n    afterCreate?: (args: CmsContentModelCreateHookPluginArgs) => void;\n    /**\n     * A hook triggered before the content model is updated.\n     */\n    beforeUpdate?: (args: CmsContentModelUpdateHookPluginArgs) => void;\n    /**\n     * A hook triggered after the content model is updated.\n     */\n    afterUpdate?: (args: CmsContentModelUpdateHookPluginArgs) => void;\n    /**\n     * A hook triggered before the content model is deleted.\n     */\n    beforeDelete?: (args: CmsContentModelHookPluginArgs) => void;\n    /**\n     * A hook triggered after the content model is deleted.\n     */\n    afterDelete?: (args: CmsContentModelHookPluginArgs) => void;\n}\n\n/**\n * @category ContentEntry\n * @category LifecycleHook\n */\ninterface CmsContentEntryHookPluginArgs {\n    context: CmsContext;\n    /**\n     * Storage operations that we have initialized.\n     */\n    storageOperations: CmsContentEntryStorageOperations;\n    /**\n     * Model of the given entry.\n     */\n    model: CmsContentModel;\n}\n\n/**\n * @category ContentEntry\n * @category LifecycleHook\n */\nexport interface CmsContentEntryBeforeCreateHookArgs extends CmsContentEntryHookPluginArgs {\n    /**\n     * User input.\n     */\n    input: Record<string, any>;\n    /**\n     * Plain entry, as we need it in the system.\n     */\n    entry: CmsContentEntry;\n}\n\n/**\n * @category ContentEntry\n * @category LifecycleHook\n */\nexport interface CmsContentEntryAfterCreateHookArgs extends CmsContentEntryHookPluginArgs {\n    /**\n     * User input.\n     */\n    input: Record<string, any>;\n    /**\n     * Plain entry, as we need it in the system.\n     */\n    entry: CmsContentEntry;\n    /**\n     * Transformed entry to insert into the storage.\n     */\n    storageEntry: CmsStorageContentEntry;\n}\n\n/**\n * @category ContentEntry\n * @category LifecycleHook\n */\nexport interface CmsContentEntryBeforeCreateFromRevisionHookArgs\n    extends CmsContentEntryHookPluginArgs {\n    /**\n     * Entry used through the system as we need it.\n     */\n    entry: CmsContentEntry;\n    /**\n     * Entry prepared for the storage.\n     */\n    storageEntry: CmsStorageContentEntry;\n    /**\n     * The entry we are creating the new entry from.\n     */\n    originalEntry: CmsContentEntry;\n    /**\n     * The entry we are creating the new entry from, directly from storage, with transformations on it.\n     */\n    originalStorageEntry: CmsStorageContentEntry;\n    /**\n     * Latest entry, used to calculate the new version.\n     */\n    latestEntry: CmsContentEntry;\n    /**\n     * Latest entry, used to calculate the new version, directly from storage, with transformations.\n     */\n    latestStorageEntry: CmsStorageContentEntry;\n}\n\n/**\n * @category ContentEntry\n * @category LifecycleHook\n */\nexport interface CmsContentEntryAfterCreateFromRevisionHookArgs\n    extends CmsContentEntryHookPluginArgs {\n    /**\n     * Entry used through the system as we need it.\n     */\n    entry: CmsContentEntry;\n    /**\n     * Entry prepared for the storage.\n     */\n    storageEntry: CmsStorageContentEntry;\n    /**\n     * The entry we are creating the new entry from.\n     */\n    originalEntry: CmsContentEntry;\n    /**\n     * The entry we are creating the new entry from, directly from storage, with transformations on it.\n     */\n    originalStorageEntry: CmsStorageContentEntry;\n    /**\n     * Latest entry, used to calculate the new version.\n     */\n    latestEntry: CmsContentEntry;\n    /**\n     * Latest entry, used to calculate the new version, directly from storage, with transformations.\n     */\n    latestStorageEntry: CmsStorageContentEntry;\n}\n\n/**\n * @category ContentEntry\n * @category LifecycleHook\n */\nexport interface CmsContentEntryBeforeUpdateHookArgs extends CmsContentEntryHookPluginArgs {\n    /**\n     * User input.\n     */\n    input: Record<string, any>;\n    /**\n     * Entry to be updated in the storage, after the changes are applied.\n     */\n    entry: CmsContentEntry;\n    /**\n     * Original entry being updated.\n     */\n    originalEntry: CmsContentEntry;\n    /**\n     * Original entry being updated, directly from storage, with transformations on it.\n     */\n    originalStorageEntry: CmsStorageContentEntry;\n}\n\n/**\n * @category ContentEntry\n * @category LifecycleHook\n */\nexport interface CmsContentEntryAfterUpdateHookArgs extends CmsContentEntryHookPluginArgs {\n    /**\n     * User input.\n     */\n    input: Record<string, any>;\n    /**\n     * Original entry being updated.\n     */\n    originalEntry: CmsContentEntry;\n    /**\n     * Original entry being updated, directly from storage, with transformations on it.\n     */\n    originalStorageEntry: CmsContentEntry;\n    /**\n     * Entry that was stored, in its plain form without the transformations.\n     */\n    entry: CmsContentEntry;\n    /**\n     * Entry record that was stored in the storage via the storage operations.\n     */\n    storageEntry: CmsStorageContentEntry;\n}\n\n/**\n * @category ContentEntry\n * @category LifecycleHook\n */\nexport interface CmsContentEntryBeforeDeleteRevisionHookArgs extends CmsContentEntryHookPluginArgs {\n    /**\n     * Entry that is going to be deleted.\n     */\n    entryToDelete: CmsContentEntry;\n    /**\n     * Entry that is going to be deleted, directly from storage, with transformations.\n     */\n    storageEntryToDelete: CmsStorageContentEntry;\n    /**\n     * Entry that is to be set as latest.\n     */\n    entryToSetAsLatest?: CmsContentEntry;\n    /**\n     * Entry that is to be set as latest, directly from storage, with transformations.\n     */\n    storageEntryToSetAsLatest?: CmsStorageContentEntry;\n}\n\n/**\n * @category ContentEntry\n * @category LifecycleHook\n */\nexport interface CmsContentEntryAfterDeleteRevisionHookArgs extends CmsContentEntryHookPluginArgs {\n    /**\n     * Entry that was deleted.\n     */\n    entryToDelete: CmsContentEntry;\n    /**\n     * Entry that was deleted, directly from storage, with transformations.\n     */\n    storageEntryToDelete: CmsStorageContentEntry;\n    /**\n     * Entry that was set as latest.\n     */\n    entryToSetAsLatest?: CmsContentEntry;\n    /**\n     * Entry that was set as latest, directly from storage, with transformations.\n     */\n    storageEntryToSetAsLatest?: CmsStorageContentEntry;\n}\n\n/**\n * @category ContentEntry\n * @category LifecycleHook\n */\nexport interface CmsContentEntryBeforeDeleteHookArgs extends CmsContentEntryHookPluginArgs {\n    /**\n     * Entry that is going to be deleted.\n     */\n    entry: CmsContentEntry;\n    /**\n     * Entry that is going to be deleted, directly from storage, with transformations.\n     */\n    storageEntry: CmsStorageContentEntry;\n}\n\n/**\n * @category ContentEntry\n * @category LifecycleHook\n */\nexport interface CmsContentEntryAfterDeleteHookArgs extends CmsContentEntryHookPluginArgs {\n    /**\n     * Entry that was deleted.\n     */\n    entry: CmsContentEntry;\n    /**\n     * Entry that was deleted, directly from storage, with transformations.\n     */\n    storageEntry: CmsStorageContentEntry;\n}\n\n/**\n * @category ContentEntry\n * @category LifecycleHook\n */\nexport interface CmsContentEntryBeforePublishHookArgs extends CmsContentEntryHookPluginArgs {\n    /**\n     * Entry to be set as published.\n     */\n    entry: CmsContentEntry;\n    /**\n     * Entry before the changes that made it published.\n     */\n    originalEntry: CmsContentEntry;\n    /**\n     * Entry before the changes that made it published, directly from storage, with transforms.\n     */\n    originalStorageEntry: CmsContentEntry;\n}\n\n/**\n * @category ContentEntry\n * @category LifecycleHook\n */\nexport interface CmsContentEntryAfterPublishHookArgs extends CmsContentEntryHookPluginArgs {\n    /**\n     * Entry to be set as published.\n     */\n    entry: CmsContentEntry;\n    /**\n     * Entry to be set as published, after the storage transformations.\n     */\n    storageEntry: CmsStorageContentEntry;\n    /**\n     * Entry before the changes that made it published.\n     */\n    originalEntry: CmsContentEntry;\n    /**\n     * Entry before the changes that made it published, directly from storage, with transforms.\n     */\n    originalStorageEntry: CmsContentEntry;\n}\n\n/**\n * @category ContentEntry\n * @category LifecycleHook\n */\nexport interface CmsContentEntryBeforeUnpublishHookArgs extends CmsContentEntryHookPluginArgs {\n    /**\n     * Entry to be set as unpublished.\n     */\n    entry: CmsContentEntry;\n    /**\n     * Entry before the modification to set it unpublished.\n     */\n    originalEntry: CmsContentEntry;\n    /**\n     * Entry before the modification to set it unpublished, directly from storage, with transformations on it.\n     */\n    originalStorageEntry: CmsStorageContentEntry;\n}\n\n/**\n * @category ContentEntry\n * @category LifecycleHook\n */\nexport interface CmsContentEntryAfterUnpublishHookArgs extends CmsContentEntryHookPluginArgs {\n    /**\n     * Entry that was set as unpublished.\n     */\n    entry: CmsContentEntry;\n    /**\n     * Entry that was set as unpublished, with transformations on it.\n     */\n    storageEntry: CmsContentEntry;\n    /**\n     * Entry before the modification to set it unpublished.\n     */\n    originalEntry: CmsContentEntry;\n    /**\n     * Entry before the modification to set it unpublished, directly from storage, with transformations on it.\n     */\n    originalStorageEntry: CmsStorageContentEntry;\n}\n\n/**\n * @category ContentEntry\n * @category LifecycleHook\n */\nexport interface CmsContentEntryBeforeRequestChangesHookArgs extends CmsContentEntryHookPluginArgs {\n    /**\n     * Original entry to be updated, no transformations on it.\n     */\n    originalEntry: CmsContentEntry;\n    /**\n     * Original entry to be updated, directly from storage, with the transformations.\n     */\n    originalStorageEntry: CmsContentEntry;\n    /**\n     * Entry to be updated as requested changes on it.\n     */\n    entry: CmsContentEntry;\n}\n\n/**\n * @category ContentEntry\n * @category LifecycleHook\n */\nexport interface CmsContentEntryAfterRequestChangesHookArgs extends CmsContentEntryHookPluginArgs {\n    /**\n     * Original entry to be updated, no transformations on it.\n     */\n    originalEntry: CmsContentEntry;\n    /**\n     * Original entry to be updated, directly from storage, with the transformations.\n     */\n    originalStorageEntry: CmsContentEntry;\n    /**\n     * Entry to be updated as requested changes on it.\n     */\n    entry: CmsContentEntry;\n    /**\n     * Transformed entry, prepared for the storage.\n     */\n    storageEntry: CmsStorageContentEntry;\n}\n\n/**\n * @category ContentEntry\n * @category LifecycleHook\n */\nexport interface CmsContentEntryBeforeRequestReviewHookArgs extends CmsContentEntryHookPluginArgs {\n    /**\n     * Original entry to be updated, no transformations on it.\n     */\n    originalEntry: CmsContentEntry;\n    /**\n     * Original entry to be updated, directly from storage, with the transformations.\n     */\n    originalStorageEntry: CmsContentEntry;\n    /**\n     * Entry to be updated as requested review on it.\n     */\n    entry: CmsContentEntry;\n}\n\n/**\n * @category ContentEntry\n * @category LifecycleHook\n */\nexport interface CmsContentEntryAfterRequestReviewHookArgs extends CmsContentEntryHookPluginArgs {\n    /**\n     * Entry to be updated as requested review on it.\n     */\n    entry: CmsContentEntry;\n    /**\n     * Entry that is prepared for the storageOperations, with the transformations.\n     */\n    storageEntry: CmsStorageContentEntry;\n    /**\n     * Original entry from the storage.\n     */\n    originalEntry: CmsContentEntry;\n    /**\n     * Original entry to be updated, directly from storage, with the transformations.\n     */\n    originalStorageEntry: CmsStorageContentEntry;\n}\n\n/**\n * A plugin type that defines lifecycle hooks for content entry.\n *\n * @category Plugin\n * @category ContentEntry\n * @category LifecycleHook\n */\nexport interface CmsContentEntryHookPlugin extends Plugin {\n    type: \"cms-content-entry-hook\";\n    /**\n     * A hook triggered before entry is stored.\n     * At this point, entry for storage is already built so you cannot modify them.\n     */\n    beforeCreate?: (args: CmsContentEntryBeforeCreateHookArgs) => void;\n    /**\n     * A hook triggered after entry is stored.\n     */\n    afterCreate?: (CmsContentEntryAfterCreateHookArgs) => void;\n    /**\n     * @see CmsContentEntryHookPlugin.beforeCreate\n     */\n    beforeCreateRevisionFrom?: (args: CmsContentEntryBeforeCreateFromRevisionHookArgs) => void;\n    /**\n     * @see CmsContentEntryHookPlugin.afterCreate\n     */\n    afterCreateRevisionFrom?: (args: CmsContentEntryAfterCreateFromRevisionHookArgs) => void;\n    /**\n     * A hook triggered before entry is updated in the database.\n     * It can be modified but we do not recommend it.\n     */\n    beforeUpdate?: (args: CmsContentEntryBeforeUpdateHookArgs) => void;\n    /**\n     * A hook triggered after entry is updated.\n     */\n    afterUpdate?: (args: CmsContentEntryAfterUpdateHookArgs) => void;\n    /**\n     * A hook triggered before deleting a certain revision (id#revision).\n     */\n    beforeDeleteRevision?: (args: CmsContentEntryBeforeDeleteRevisionHookArgs) => void;\n    /**\n     * A hook triggered after deleting certain revision.\n     * In a case that deleted revision is only one, deleteEntry is called just to make sure that nothing is left in storage.\n     */\n    afterDeleteRevision?: (args: CmsContentEntryAfterDeleteRevisionHookArgs) => void;\n    /**\n     * A hook triggered before deleting an entry with all its revisions.\n     */\n    beforeDelete?: (args: CmsContentEntryBeforeDeleteHookArgs) => void;\n    /**\n     * A hook triggered after deleting an entry.\n     */\n    afterDelete?: (args: CmsContentEntryBeforeDeleteHookArgs) => void;\n    /**\n     * A hook triggered before publishing of an entry.\n     */\n    beforePublish?: (args: CmsContentEntryBeforePublishHookArgs) => void;\n    /**\n     * A hook triggered after publishing of an entry.\n     */\n    afterPublish?: (args: CmsContentEntryAfterPublishHookArgs) => void;\n    /**\n     * A hook triggered before unpublishing of an entry.\n     */\n    beforeUnpublish?: (args: CmsContentEntryBeforeUnpublishHookArgs) => void;\n    /**\n     * A hook triggered after unpublishing of an entry.\n     */\n    afterUnpublish?: (args: CmsContentEntryAfterUnpublishHookArgs) => void;\n    /**\n     * A hook triggered before requesting changes of an entry.\n     */\n    beforeRequestChanges?: (args: CmsContentEntryBeforeRequestChangesHookArgs) => void;\n    /**\n     * A hook triggered after requesting changes of an entry.\n     */\n    afterRequestChanges?: (args: CmsContentEntryAfterRequestChangesHookArgs) => void;\n    /**\n     * A hook triggered before requesting review of an entry.\n     */\n    beforeRequestReview?: (args: CmsContentEntryBeforeRequestReviewHookArgs) => void;\n    /**\n     * A hook triggered after requesting review of an entry.\n     */\n    afterRequestReview?: (args: CmsContentEntryAfterRequestReviewHookArgs) => void;\n}\n\ninterface CmsStorageOperationsProvider<A = any, T = any> extends Plugin {\n    provide: (args: A) => Promise<T>;\n}\n\n/**\n * Arguments for the group storage operations provider method.\n */\ninterface CmsContentModelGroupStorageOperationsProviderArgs {\n    context: CmsContext;\n}\n\n/**\n * A plugin that provides the group storage operations implementation.\n */\nexport interface CmsContentModelGroupStorageOperationsProvider\n    extends CmsStorageOperationsProvider<\n        CmsContentModelGroupStorageOperationsProviderArgs,\n        CmsContentModelGroupStorageOperations\n    > {\n    /**\n     * A plugin type.\n     */\n    type: \"cms-content-model-group-storage-operations-provider\";\n}\n\nexport interface CmsContentModelGroupStorageOperationsGetArgs {\n    id: string;\n}\n\nexport interface CmsContentModelGroupStorageOperationsListArgs<\n    T extends Record<string, any> = Record<string, any>\n> {\n    where?: T;\n    limit?: number;\n}\n\nexport interface CmsContentModelGroupStorageOperationsBeforeCreateArgs {\n    input: CmsContentModelGroupCreateInput;\n    data: CmsContentModelGroup;\n}\n\nexport interface CmsContentModelGroupStorageOperationsCreateArgs {\n    input: CmsContentModelGroupCreateInput;\n    data: CmsContentModelGroup;\n}\n\nexport interface CmsContentModelGroupStorageOperationsAfterCreateArgs {\n    input: CmsContentModelGroupCreateInput;\n    group: CmsContentModelGroup;\n}\n\nexport interface CmsContentModelGroupStorageOperationsBeforeUpdateArgs {\n    group: CmsContentModelGroup;\n    data: Partial<CmsContentModelGroup>;\n    input: CmsContentModelGroupUpdateInput;\n}\n\nexport interface CmsContentModelGroupStorageOperationsUpdateArgs {\n    group: CmsContentModelGroup;\n    data: Partial<CmsContentModelGroup>;\n    input: CmsContentModelGroupUpdateInput;\n}\n\nexport interface CmsContentModelGroupStorageOperationsAfterUpdateArgs {\n    group: CmsContentModelGroup;\n    data: Partial<CmsContentModelGroup>;\n    input: CmsContentModelGroupUpdateInput;\n}\n\nexport interface CmsContentModelGroupStorageOperationsBeforeDeleteArgs {\n    group: CmsContentModelGroup;\n}\n\nexport interface CmsContentModelGroupStorageOperationsDeleteArgs {\n    group: CmsContentModelGroup;\n}\n\nexport interface CmsContentModelGroupStorageOperationsAfterDeleteArgs {\n    group: CmsContentModelGroup;\n}\n\n/**\n * Description of the ContentModelGroup CRUD operations.\n * If user wants to add another database to the application, this is how it is done.\n * This is just plain read, update, write, delete and list - no authentication or permission checks.\n */\nexport interface CmsContentModelGroupStorageOperations {\n    /**\n     * Gets content model group by given id.\n     */\n    get: (\n        args: CmsContentModelGroupStorageOperationsGetArgs\n    ) => Promise<CmsContentModelGroup | null>;\n    /**\n     * List all content model groups. Filterable via params.\n     */\n    list: (args?: CmsContentModelGroupStorageOperationsListArgs) => Promise<CmsContentModelGroup[]>;\n    /**\n     * A hook to be run before the create method.\n     */\n    beforeCreate?: (args: CmsContentModelGroupStorageOperationsBeforeCreateArgs) => Promise<void>;\n    /**\n     * Create a new content model group.\n     */\n    create: (\n        args: CmsContentModelGroupStorageOperationsCreateArgs\n    ) => Promise<CmsContentModelGroup>;\n    /**\n     * A hook to be run after the create method.\n     */\n    afterCreate?: (args: CmsContentModelGroupStorageOperationsAfterCreateArgs) => Promise<void>;\n    /**\n     * A hook to be run before the update method.\n     */\n    beforeUpdate?: (args: CmsContentModelGroupStorageOperationsBeforeUpdateArgs) => Promise<void>;\n    /**\n     * Update existing content model group.\n     */\n    update: (\n        args: CmsContentModelGroupStorageOperationsUpdateArgs\n    ) => Promise<CmsContentModelGroup>;\n    /**\n     * A hook to be run after the update method.\n     */\n    afterUpdate?: (args: CmsContentModelGroupStorageOperationsAfterUpdateArgs) => Promise<void>;\n    /**\n     * A hook to be run before the delete method.\n     */\n    beforeDelete?: (args: CmsContentModelGroupStorageOperationsBeforeDeleteArgs) => Promise<void>;\n    /**\n     * Delete the content model group.\n     */\n    delete: (args: CmsContentModelGroupStorageOperationsDeleteArgs) => Promise<boolean>;\n    /**\n     * A hook to be run after the delete method.\n     */\n    afterDelete?: (args: CmsContentModelGroupStorageOperationsAfterDeleteArgs) => Promise<void>;\n}\n\n/**\n * Arguments for the model storage operations provider method.\n */\ninterface CmsContentModelStorageOperationsProviderArgs {\n    context: CmsContext;\n}\n\n/**\n * A plugin that provides the model storage operations implementation.\n */\nexport interface CmsContentModelStorageOperationsProvider\n    extends CmsStorageOperationsProvider<\n        CmsContentModelStorageOperationsProviderArgs,\n        CmsContentModelStorageOperations\n    > {\n    /**\n     * A plugin type.\n     */\n    type: \"cms-content-model-storage-operations-provider\";\n}\n\nexport interface CmsContentModelStorageOperationsGetArgs {\n    id: string;\n}\n\nexport interface CmsContentModelStorageOperationsListArgs<\n    T extends Record<string, any> = Record<string, any>\n> {\n    where?: T;\n    limit?: number;\n}\n\nexport interface CmsContentModelStorageOperationsBeforeCreateArgs {\n    input: CmsContentModelCreateInput;\n    data: CmsContentModel;\n}\n\nexport interface CmsContentModelStorageOperationsCreateArgs {\n    input: CmsContentModelCreateInput;\n    data: CmsContentModel;\n}\n\nexport interface CmsContentModelStorageOperationsAfterCreateArgs {\n    input: CmsContentModelCreateInput;\n    model: CmsContentModel;\n}\n\nexport interface CmsContentModelStorageOperationsBeforeUpdateArgs {\n    model: CmsContentModel;\n    data: Partial<CmsContentModel>;\n    input: CmsContentModelUpdateInput;\n}\n\nexport interface CmsContentModelStorageOperationsUpdateArgs {\n    model: CmsContentModel;\n    data: Partial<CmsContentModel>;\n    input: CmsContentModelUpdateInput;\n}\n\nexport interface CmsContentModelStorageOperationsAfterUpdateArgs {\n    model: CmsContentModel;\n    data: Partial<CmsContentModel>;\n    input: CmsContentModelUpdateInput;\n}\n\nexport interface CmsContentModelStorageOperationsBeforeDeleteArgs {\n    model: CmsContentModel;\n}\n\nexport interface CmsContentModelStorageOperationsDeleteArgs {\n    model: CmsContentModel;\n}\n\nexport interface CmsContentModelStorageOperationsAfterDeleteArgs {\n    model: CmsContentModel;\n}\n\n/**\n * Description of the ContentModel storage operations.\n * If user wants to add another database to the application, this is how it is done.\n * This is just plain read, update, write, delete and list - no authentication or permission checks.\n */\nexport interface CmsContentModelStorageOperations {\n    /**\n     * Gets content model by given id.\n     */\n    get: (args: CmsContentModelStorageOperationsGetArgs) => Promise<CmsContentModel | null>;\n    /**\n     * List all content models. Filterable via params.\n     */\n    list: (args?: CmsContentModelStorageOperationsListArgs) => Promise<CmsContentModel[]>;\n    /**\n     * A hook to be run before the create method.\n     */\n    beforeCreate?: (args: CmsContentModelStorageOperationsBeforeCreateArgs) => Promise<void>;\n    /**\n     * Create a new content model.\n     */\n    create: (args: CmsContentModelStorageOperationsCreateArgs) => Promise<CmsContentModel>;\n    /**\n     * A hook to be run after the create method.\n     */\n    afterCreate?: (args: CmsContentModelStorageOperationsAfterCreateArgs) => Promise<void>;\n    /**\n     * A hook to be run before the update method.\n     */\n    beforeUpdate?: (args: CmsContentModelStorageOperationsBeforeUpdateArgs) => Promise<void>;\n    /**\n     * Update existing content model.\n     */\n    update: (args: CmsContentModelStorageOperationsUpdateArgs) => Promise<CmsContentModel>;\n    /**\n     * A hook to be run after the update method.\n     */\n    afterUpdate?: (args: CmsContentModelStorageOperationsAfterUpdateArgs) => Promise<void>;\n    /**\n     * A hook to be run before the delete method.\n     */\n    beforeDelete?: (args: CmsContentModelStorageOperationsBeforeDeleteArgs) => Promise<void>;\n    /**\n     * Delete the content model.\n     */\n    delete: (args: CmsContentModelStorageOperationsDeleteArgs) => Promise<boolean>;\n    /**\n     * A hook to be run after the delete method.\n     */\n    afterDelete?: (args: CmsContentModelStorageOperationsAfterDeleteArgs) => Promise<void>;\n}\n\n/**\n * Arguments for the entry storage provider method.\n */\ninterface CmsContentEntryStorageOperationsProviderArgs {\n    context: CmsContext;\n}\n\n/**\n * A plugin that provides the entry storage operations implementation.\n */\nexport interface CmsContentEntryStorageOperationsProvider\n    extends CmsStorageOperationsProvider<\n        CmsContentEntryStorageOperationsProviderArgs,\n        CmsContentEntryStorageOperations\n    > {\n    /**\n     * A plugin type.\n     */\n    type: \"cms-content-entry-storage-operations-provider\";\n}\n\nexport interface CmsContentEntryStorageOperationsGetArgs {\n    where?: CmsContentEntryListWhere;\n    sort?: CmsContentEntryListSort;\n    limit?: number;\n}\n\nexport interface CmsContentEntryStorageOperationsListArgs<\n    T extends Record<string, any> = Record<string, any>\n> {\n    where?: T;\n    sort?: CmsContentEntryListSort;\n    limit?: number;\n    after?: string;\n}\n\nexport interface CmsContentEntryStorageOperationsCreateArgs<\n    T extends CmsStorageContentEntry = CmsStorageContentEntry\n> {\n    /**\n     * Input received from the user.\n     */\n    input: Record<string, any>;\n    /**\n     * Real entry, with no transformations on it.\n     */\n    entry: CmsContentEntry;\n    /**\n     * Entry prepared for the storage.\n     */\n    storageEntry: T;\n}\n\nexport interface CmsContentEntryStorageOperationsCreateRevisionFromArgs<\n    T extends CmsStorageContentEntry = CmsStorageContentEntry\n> {\n    /**\n     * The entry we are creating new one from.\n     */\n    originalEntry: CmsContentEntry;\n    /**\n     * The entry we are creating new one from, directly from storage, with transformations on it.\n     */\n    originalStorageEntry: T;\n    /**\n     * Latest entry, used to calculate the new version.\n     */\n    latestEntry: CmsContentEntry;\n    /**\n     * Latest entry, used to calculate the new version, directly from storage, with transformations.\n     */\n    latestStorageEntry: T;\n    /**\n     * Real entry, with no transformations on it.\n     */\n    entry: CmsContentEntry;\n    /**\n     * Entry prepared for the storage.\n     */\n    storageEntry: T;\n}\n\nexport interface CmsContentEntryStorageOperationsUpdateArgs<\n    T extends CmsStorageContentEntry = CmsStorageContentEntry\n> {\n    /**\n     * Input received from the user.\n     */\n    input: Record<string, any>;\n    /**\n     * Used to compare IDs, versions and passed into storage operations to be used if required.\n     */\n    originalEntry: CmsContentEntry;\n    /**\n     * Directly from storage, with transformations on it.\n     */\n    originalStorageEntry: T;\n    /**\n     * Real entry, with no transformations on it.\n     */\n    entry: CmsContentEntry;\n    /**\n     * Entry prepared for the storage.\n     */\n    storageEntry: T;\n}\n\nexport interface CmsContentEntryStorageOperationsDeleteRevisionArgs<\n    T extends CmsStorageContentEntry = CmsStorageContentEntry\n> {\n    /**\n     * Entry that was deleted.\n     */\n    entryToDelete: CmsContentEntry;\n    /**\n     * Entry that was deleted, directly from storage, with transformations.\n     */\n    storageEntryToDelete: T;\n    /**\n     * Entry that was set as latest.\n     */\n    entryToSetAsLatest?: CmsContentEntry;\n    /**\n     * Entry that was set as latest, directly from storage, with transformations.\n     */\n    storageEntryToSetAsLatest?: T;\n}\n\nexport interface CmsContentEntryStorageOperationsDeleteArgs<\n    T extends CmsStorageContentEntry = CmsStorageContentEntry\n> {\n    /**\n     * Entry that is going to be deleted.\n     */\n    entry: CmsContentEntry;\n    /**\n     * Entry that is going to be deleted, directly from storage.\n     */\n    storageEntry: T;\n}\n\nexport interface CmsContentEntryStorageOperationsPublishArgs<\n    T extends CmsStorageContentEntry = CmsStorageContentEntry\n> {\n    /**\n     * The entry record before it was published.\n     */\n    originalEntry: CmsContentEntry;\n    /**\n     * Directly from storage, with transformations on it.\n     */\n    originalStorageEntry: T;\n    /**\n     * The modified entry that is going to be saved as published.\n     * Entry is in its original form.\n     */\n    entry: CmsContentEntry;\n    /**\n     * The modified entry and prepared for the storage.\n     */\n    storageEntry: T;\n}\n\nexport interface CmsContentEntryStorageOperationsUnpublishArgs<\n    T extends CmsStorageContentEntry = CmsStorageContentEntry\n> {\n    /**\n     * The entry record before it was unpublished.\n     */\n    originalEntry: CmsContentEntry;\n    /**\n     * The entry record before it was unpublished, with transformations on it.\n     */\n    originalStorageEntry: T;\n    /**\n     * The modified entry that is going to be saved as unpublished.\n     */\n    entry: CmsContentEntry;\n    /**\n     * The modified entry that is going to be saved as unpublished, with transformations on it.\n     */\n    storageEntry: T;\n}\n\nexport interface CmsContentEntryStorageOperationsRequestChangesArgs<\n    T extends CmsStorageContentEntry = CmsStorageContentEntry\n> {\n    /**\n     * Entry data updated with the required properties.\n     */\n    entry: CmsContentEntry;\n    /**\n     * Entry that is prepared for the storageOperations, with the transformations.\n     */\n    storageEntry: T;\n    /**\n     * Original entry from the storage.\n     */\n    originalEntry: CmsContentEntry;\n    /**\n     * Original entry to be updated, directly from storage, with the transformations.\n     */\n    originalStorageEntry: T;\n}\n\nexport interface CmsContentEntryStorageOperationsRequestReviewArgs<\n    T extends CmsStorageContentEntry = CmsStorageContentEntry\n> {\n    /**\n     * Entry that is prepared for the storageOperations.\n     */\n    entry: CmsContentEntry;\n    /**\n     * Entry that is prepared for the storageOperations, with the transformations.\n     */\n    storageEntry: T;\n    /**\n     * Original entry from the storage.\n     */\n    originalEntry: CmsContentEntry;\n    /**\n     * Original entry to be updated, directly from storage, with the transformations.\n     */\n    originalStorageEntry: T;\n}\n\nexport interface CmsContentEntryStorageOperationsListResponse<\n    T extends CmsStorageContentEntry = CmsStorageContentEntry\n> {\n    /**\n     * Has more items to load with the current filtering?\n     */\n    hasMoreItems: boolean;\n    /**\n     * Items loaded with current filtering.\n     */\n    items: T[];\n    /**\n     * Pointer for where to start the new item set.\n     */\n    cursor: string | null;\n    /**\n     * Total amount of items with the current filter.\n     */\n    totalCount: number;\n}\n\n/**\n * Description of the ContentModel storage operations.\n * If user wants to add another database to the application, this is how it is done.\n * This is just plain read, update, write, delete and list - no authentication or permission checks.\n *\n *\n * @category StorageOperations\n * @category ContentEntry\n */\nexport interface CmsContentEntryStorageOperations<\n    T extends CmsStorageContentEntry = CmsStorageContentEntry\n> {\n    /**\n     * Get all the entries of the ids.\n     */\n    getByIds: (model: CmsContentModel, ids: readonly string[]) => Promise<T[]>;\n    /**\n     * Get all the published entries of the ids.\n     */\n    getPublishedByIds: (model: CmsContentModel, ids: readonly string[]) => Promise<T[]>;\n    /**\n     * Get all the latest entries of the ids.\n     */\n    getLatestByIds: (model: CmsContentModel, ids: readonly string[]) => Promise<T[]>;\n    /**\n     * Get all revisions of the given entry id.\n     */\n    getRevisions: (model: CmsContentModel, id: string) => Promise<T[]>;\n    /**\n     * Get all revisions of all of the given IDs.\n     */\n    getAllRevisionsByIds: (model: CmsContentModel, ids: readonly string[]) => Promise<T[]>;\n    /**\n     * Get the entry by the given revision id.\n     */\n    getRevisionById: (model: CmsContentModel, id: string) => Promise<T | null>;\n    /**\n     * Get the published entry by given entryId.\n     */\n    getPublishedRevisionByEntryId: (model: CmsContentModel, entryId: string) => Promise<T | null>;\n    /**\n     * Get the latest entry by given entryId.\n     */\n    getLatestRevisionByEntryId: (model: CmsContentModel, entryId: string) => Promise<T | null>;\n    /**\n     * Get the revision of the entry before given one.\n     */\n    getPreviousRevision: (\n        model: CmsContentModel,\n        entryId: string,\n        version: number\n    ) => Promise<T | null>;\n\n    /**\n     * Gets entry by given args.\n     */\n    get: (\n        model: CmsContentModel,\n        args: CmsContentEntryStorageOperationsGetArgs\n    ) => Promise<T | null>;\n    /**\n     * List all entries. Filterable via params.\n     */\n    list: (\n        model: CmsContentModel,\n        args?: CmsContentEntryStorageOperationsListArgs\n    ) => Promise<CmsContentEntryStorageOperationsListResponse<T>>;\n    /**\n     * Create a new entry.\n     */\n    create: (\n        model: CmsContentModel,\n        args: CmsContentEntryStorageOperationsCreateArgs<T>\n    ) => Promise<T>;\n    /**\n     * Create a new entry from existing one.\n     */\n    createRevisionFrom: (\n        model: CmsContentModel,\n        args: CmsContentEntryStorageOperationsCreateRevisionFromArgs<T>\n    ) => Promise<T>;\n    /**\n     * Update existing entry.\n     */\n    update: (\n        model: CmsContentModel,\n        args: CmsContentEntryStorageOperationsUpdateArgs<T>\n    ) => Promise<T>;\n    /**\n     * Delete the entry revision.\n     */\n    deleteRevision: (\n        model: CmsContentModel,\n        args: CmsContentEntryStorageOperationsDeleteRevisionArgs<T>\n    ) => Promise<void>;\n    /**\n     * Delete the entry.\n     */\n    delete: (\n        model: CmsContentModel,\n        args: CmsContentEntryStorageOperationsDeleteArgs<T>\n    ) => Promise<void>;\n    /**\n     * Publish the entry.\n     */\n    publish: (\n        model: CmsContentModel,\n        args: CmsContentEntryStorageOperationsPublishArgs<T>\n    ) => Promise<T>;\n    /**\n     * Unpublish the entry.\n     */\n    unpublish: (\n        model: CmsContentModel,\n        args: CmsContentEntryStorageOperationsUnpublishArgs<T>\n    ) => Promise<T>;\n    /**\n     * Request changes the entry.\n     */\n    requestChanges: (\n        model: CmsContentModel,\n        args: CmsContentEntryStorageOperationsRequestChangesArgs<T>\n    ) => Promise<T>;\n    /**\n     * Request review the entry.\n     */\n    requestReview: (\n        model: CmsContentModel,\n        args: CmsContentEntryStorageOperationsRequestReviewArgs<T>\n    ) => Promise<CmsContentEntry>;\n}\n\nexport enum CONTENT_ENTRY_STATUS {\n    DRAFT = \"draft\",\n    PUBLISHED = \"published\",\n    UNPUBLISHED = \"unpublished\",\n    CHANGES_REQUESTED = \"changesRequested\",\n    REVIEW_REQUESTED = \"reviewRequested\"\n}\n\ninterface CmsSettingsStorageOperationsProviderArgs {\n    context: CmsContext;\n}\n/**\n * A plugin that provides the settings storage operations implementation.\n */\nexport interface CmsSettingsStorageOperationsProviderPlugin\n    extends CmsStorageOperationsProvider<\n        CmsSettingsStorageOperationsProviderArgs,\n        CmsSettingsStorageOperations\n    > {\n    /**\n     * A plugin type.\n     */\n    type: \"cms-settings-storage-operations-provider\";\n}\n\nexport interface CmsSettingsStorageOperations {\n    /**\n     * Get the settings from the storage.\n     */\n    get: () => Promise<CmsSettings | null>;\n    /**\n     * Create settings in the storage.\n     */\n    create: (data: CmsSettings) => Promise<void>;\n    /**\n     * Update the settings in the storage.\n     */\n    update: (data: CmsSettings) => Promise<void>;\n}\n\ninterface CmsSystemStorageOperationsProviderArgs {\n    context: CmsContext;\n}\n/**\n * A plugin that provides the system storage operations implementation.\n */\nexport interface CmsSystemStorageOperationsProviderPlugin\n    extends CmsStorageOperationsProvider<\n        CmsSystemStorageOperationsProviderArgs,\n        CmsSystemStorageOperations\n    > {\n    /**\n     * A plugin type.\n     */\n    type: \"cms-system-storage-operations-provider\";\n}\n\nexport interface CmsSystem {\n    version?: string;\n    readAPIKey?: string;\n}\n\nexport interface CmsSystemStorageOperations {\n    /**\n     * Get the system data.\n     */\n    get: () => Promise<CmsSystem | null>;\n    /**\n     * Create the system info in the storage.\n     */\n    create: (data: CmsSystem) => Promise<void>;\n    /**\n     * Update the system info in the storage.\n     */\n    update: (data: CmsSystem) => Promise<void>;\n}\n"],"file":"types.js"}