import { Plugin } from "@webiny/plugins/types";
import { SecurityPermission } from "@webiny/api-security/types";
import { CmsContentModel, CmsContext, CreatedBy, CmsContentModelGroupPermission, CmsContentModelGroup } from "./types";
export declare const hasRwd: (permission: any, rwd: any) => any;
export declare const hasPw: (permission: any, pw: any) => any;
export declare const checkPermissions: <TPermission = SecurityPermission>(context: CmsContext, name: string, check?: {
    rwd?: string;
    pw?: string;
}) => Promise<TPermission>;
export declare const checkOwnership: (context: CmsContext, permission: SecurityPermission, record: {
    createdBy?: CreatedBy;
    ownedBy?: CreatedBy;
}) => void;
export declare const validateOwnership: (context: CmsContext, permission: SecurityPermission, record: {
    createdBy?: CreatedBy;
    ownedBy?: CreatedBy;
}) => boolean;
/**
 * model access is checking for both specific model or group access
 * if permission has specific models set as access pattern then groups will not matter (although both can be set)
 */
export declare const checkModelAccess: (context: CmsContext, model: CmsContentModel) => Promise<void>;
export declare const validateModelAccess: (context: CmsContext, model: CmsContentModel) => Promise<boolean>;
export declare const validateGroupAccess: (context: CmsContext, permission: CmsContentModelGroupPermission, group: CmsContentModelGroup) => boolean;
export declare const toSlug: (text: any) => string;
export declare const zeroPad: (version: any) => string;
export declare const createCmsPK: (context: CmsContext) => string;
export declare const paginateBatch: <T = Record<string, any>>(items: T[], perPage: number, execute: (items: T[]) => Promise<any>) => Promise<void>;
export declare const filterAsync: <T = Record<string, any>>(items: T[], predicate: (T: any) => Promise<boolean>) => Promise<T[]>;
declare type CallbackFallback = (args: any) => void | Promise<void>;
export declare const executeCallbacks: <TCallbackFunction extends CallbackFallback = CallbackFallback>(plugins: Plugin[], hook: string, args: Parameters<TCallbackFunction>[0]) => Promise<void>;
export {};
