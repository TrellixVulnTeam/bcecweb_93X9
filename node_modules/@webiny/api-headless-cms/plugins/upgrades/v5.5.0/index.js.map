{"version":3,"sources":["../../../../src/plugins/upgrades/v5.5.0/index.ts"],"names":["plugin","name","type","app","version","apply","context","console","log","security","tenancy","cms","tenant","getCurrentTenant","securityGroups","groups","listGroups","securityGroupsWithCmsPermission","filter","group","permissions","some","isCmsContentPermission","exists","length","i","securityGroup","slug","CmsContentPermissions","restPermissions","permission","newCMSContentPermissions","models","get","newPermissions","JSON","stringify","updateGroup","e","WebinyError","ApiKeys","apiKeys","listApiKeys","ApiKeysWithCmsPermission","key","apiKey","updateApiKey","id","description"],"mappings":"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","sourcesContent":["import WebinyError from \"@webiny/error\";\nimport { UpgradePlugin } from \"@webiny/api-upgrade/types\";\nimport { CmsContext } from \"../../../types\";\nimport { migrateCMSPermissions } from \"../../../migrateCMSPermissions\";\nimport { isCmsContentPermission } from \"./helpers\";\n\nconst plugin: UpgradePlugin<CmsContext> = {\n    name: \"api-upgrade-cms-5.5.0\",\n    type: \"api-upgrade\",\n    app: \"headless-cms\",\n    version: \"5.5.0\",\n    async apply(context) {\n        console.log(\"Started CMS permissions migration.\");\n        // Migrate \"Groups\"\n        try {\n            const { security, tenancy, cms } = context;\n            const tenant = tenancy.getCurrentTenant();\n            // Check if there is any \"SecurityGroup\" that contains \"cms\" permissions.\n            // @ts-ignore Because we don't need a package dependency; this is a one-off operation.\n            const securityGroups = await security.groups.listGroups(tenant);\n            const securityGroupsWithCmsPermission = securityGroups.filter(group =>\n                group.permissions.some(isCmsContentPermission)\n            );\n            const exists = securityGroupsWithCmsPermission.length > 0;\n            if (!exists) {\n                console.log(\"No Security groups with CMS permissions exists.\");\n                return;\n            }\n\n            // For each such group, migrate permissions.\n            for (let i = 0; i < securityGroupsWithCmsPermission.length; i++) {\n                const securityGroup = securityGroupsWithCmsPermission[i];\n                console.log(`Updating permission for group: ${securityGroup.slug}`);\n                // Filter CMS content permissions.\n                const CmsContentPermissions =\n                    securityGroup.permissions.filter(isCmsContentPermission);\n                const restPermissions = securityGroup.permissions.filter(\n                    permission => !isCmsContentPermission(permission)\n                );\n\n                if (CmsContentPermissions.length === 0) {\n                    console.log(\"Skipping...\");\n                    continue;\n                }\n                // Migrate CMS permissions\n                const newCMSContentPermissions = await migrateCMSPermissions(\n                    CmsContentPermissions,\n                    cms.models.get\n                );\n\n                const newPermissions = [...restPermissions, ...newCMSContentPermissions];\n                console.log(`Saving new permissions for group: ${securityGroup.slug}`);\n                console.log(\"newPermissions: \", JSON.stringify(newPermissions, null, 2));\n                // Save group\n                // @ts-ignore\n                await security.groups.updateGroup(tenant, securityGroup.slug, {\n                    permissions: newPermissions\n                });\n            }\n\n            // Indicate completion\n            console.log(\"Finish CMS permissions migration for [Security groups].\");\n        } catch (e) {\n            console.log(e);\n            throw new WebinyError(\"[Security groups] CMS permissions migration failed!\");\n        }\n\n        // Migrate \"API Keys\"\n        try {\n            const { security, cms } = context;\n            // Check if there is any \"APIKey\" that contains \"cms\" permissions.\n            // @ts-ignore\n            const ApiKeys = await security.apiKeys.listApiKeys();\n            const ApiKeysWithCmsPermission = ApiKeys.filter(key =>\n                key.permissions.some(isCmsContentPermission)\n            );\n            const exists = ApiKeysWithCmsPermission.length > 0;\n            if (!exists) {\n                console.log(\"No API keys with CMS permissions exists.\");\n                return;\n            }\n\n            // For each such API key, migrate permissions.\n            for (let i = 0; i < ApiKeysWithCmsPermission.length; i++) {\n                const apiKey = ApiKeysWithCmsPermission[i];\n                console.log(`Updating permission for API key: ${apiKey.name}`);\n                // Filter CMS content permissions.\n                const CmsContentPermissions = apiKey.permissions.filter(isCmsContentPermission);\n                const restPermissions = apiKey.permissions.filter(\n                    permission => !isCmsContentPermission(permission)\n                );\n\n                if (CmsContentPermissions.length === 0) {\n                    console.log(\"Skipping...\");\n                    continue;\n                }\n                // Migrate CMS permissions.\n                const newCMSContentPermissions = await migrateCMSPermissions(\n                    CmsContentPermissions,\n                    cms.models.get\n                );\n\n                const newPermissions = [...restPermissions, ...newCMSContentPermissions];\n                console.log(`Saving new permissions for API key: ${apiKey.name}`);\n                console.log(\"newPermissions: \", JSON.stringify(newPermissions, null, 2));\n                // Save API key\n                // @ts-ignore\n                await security.apiKeys.updateApiKey(apiKey.id, {\n                    name: apiKey.name,\n                    description: apiKey.description,\n                    permissions: newPermissions\n                });\n            }\n\n            // Indicate completion\n            console.log(\"Finish CMS permissions migration for API keys.\");\n        } catch (e) {\n            console.log(e);\n            throw new WebinyError(\"[API keys] CMS permissions migration failed!\");\n        }\n    }\n};\n\nexport default plugin;\n"],"file":"index.js"}