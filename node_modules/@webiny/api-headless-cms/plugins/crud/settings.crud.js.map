{"version":3,"sources":["../../../src/plugins/crud/settings.crud.ts"],"names":["type","name","apply","context","cms","pluginType","providerPlugins","plugins","byType","providerPlugin","length","WebinyError","storageOperations","provide","checkPermissions","utils","settings","noAuth","get","updateContentModelLastChange","data","contentModelLastChange","Date","create","update","getContentModelLastChange","ex","console","log","error","message","code"],"mappings":";;;;;;;;;;;AACA;;AAQA;;;;;;;;;;eAEe;AACXA,EAAAA,IAAI,EAAE,SADK;AAEXC,EAAAA,IAAI,EAAE,uBAFK;AAGXC,EAAAA,KAAK,EAAE,MAAMC,OAAN,IAAiB;AACpB;AACR;AACA;AACQ,QAAI,CAACA,OAAO,CAACC,GAAb,EAAkB;AACd;AACH;;AACD,UAAMC,UAAU,GAAG,0CAAnB;AACA,UAAMC,eAAe,GACjBH,OAAO,CAACI,OAAR,CAAgBC,MAAhB,CAAmEH,UAAnE,CADJ;AAEA,UAAMI,cAAc,GAAGH,eAAe,CAACA,eAAe,CAACI,MAAhB,GAAyB,CAA1B,CAAtC;;AACA,QAAI,CAACD,cAAL,EAAqB;AACjB,YAAM,IAAIE,cAAJ,CAAiB,YAAWN,UAAW,WAAvC,EAAmD,kBAAnD,EAAuE;AACzEL,QAAAA,IAAI,EAAEK;AADmE,OAAvE,CAAN;AAGH;;AAED,UAAMO,iBAAiB,GAAG,MAAMH,cAAc,CAACI,OAAf,CAAuB;AACnDV,MAAAA;AADmD,KAAvB,CAAhC;;AAIA,UAAMW,gBAAgB,GAAG,MAAsC;AAC3D,aAAOC,KAAK,CAACD,gBAAN,CAAuBX,OAAvB,EAAgC,cAAhC,CAAP;AACH,KAFD;;AAIA,UAAMa,QAA4B,GAAG;AACjCC,MAAAA,MAAM,EAAE,MAAM;AACV,eAAO;AACHC,UAAAA,GAAG,EAAE,YAAY;AACb,mBAAO,MAAMN,iBAAiB,CAACM,GAAlB,EAAb;AACH;AAHE,SAAP;AAKH,OAPgC;AAQjCA,MAAAA,GAAG,EAAE,YAAyC;AAC1C,cAAMJ,gBAAgB,EAAtB;AACA,eAAO,MAAMF,iBAAiB,CAACM,GAAlB,EAAb;AACH,OAXgC;AAYjCC,MAAAA,4BAA4B,EAAE,YAA2B;AACrD,cAAMC,IAAiB,GAAG;AACtBC,UAAAA,sBAAsB,EAAE,IAAIC,IAAJ;AADF,SAA1B;AAIA,cAAMN,QAAQ,GAAG,MAAMJ,iBAAiB,CAACM,GAAlB,EAAvB;;AACA,YAAI,CAACF,QAAL,EAAe;AACX,gBAAMJ,iBAAiB,CAACW,MAAlB,CAAyBH,IAAzB,CAAN;AACA;AACH;;AAED,cAAMR,iBAAiB,CAACY,MAAlB,CAAyBJ,IAAzB,CAAN;AACH,OAxBgC;AAyBjCK,MAAAA,yBAAyB,EAAE,YAA2B;AAClD,YAAI;AACA,gBAAMT,QAAQ,GAAG,MAAMJ,iBAAiB,CAACM,GAAlB,EAAvB;;AACA,cAAI,CAACF,QAAD,IAAa,CAACA,QAAQ,CAACK,sBAA3B,EAAmD;AAC/C,mBAAO,IAAIC,IAAJ,EAAP;AACH;;AACD,iBAAON,QAAQ,CAACK,sBAAhB;AACH,SAND,CAME,OAAOK,EAAP,EAAW;AACTC,UAAAA,OAAO,CAACC,GAAR,CAAY;AACRC,YAAAA,KAAK,EAAE;AACHC,cAAAA,OAAO,EAAEJ,EAAE,CAACI,OADT;AAEHC,cAAAA,IAAI,EAAEL,EAAE,CAACK,IAAH,IAAW,2CAFd;AAGHX,cAAAA,IAAI,EAAEM;AAHH;AADC,WAAZ;AAOH;;AACD,eAAO,IAAIJ,IAAJ,EAAP;AACH;AA1CgC,KAArC;AA4CAnB,IAAAA,OAAO,CAACC,GAAR,mCACQD,OAAO,CAACC,GAAR,IAAgB,EADxB;AAEIY,MAAAA;AAFJ;AAIH;AA5EU,C","sourcesContent":["import { ContextPlugin } from \"@webiny/handler/types\";\nimport * as utils from \"../../utils\";\nimport {\n    CmsContext,\n    CmsSettingsContext,\n    CmsSettingsPermission,\n    CmsSettings,\n    CmsSettingsStorageOperationsProviderPlugin\n} from \"~/types\";\nimport WebinyError from \"@webiny/error\";\n\nexport default {\n    type: \"context\",\n    name: \"context-settings-crud\",\n    apply: async context => {\n        /**\n         * If cms is not defined on the context, do not continue, but log it.\n         */\n        if (!context.cms) {\n            return;\n        }\n        const pluginType = \"cms-settings-storage-operations-provider\";\n        const providerPlugins =\n            context.plugins.byType<CmsSettingsStorageOperationsProviderPlugin>(pluginType);\n        const providerPlugin = providerPlugins[providerPlugins.length - 1];\n        if (!providerPlugin) {\n            throw new WebinyError(`Missing \"${pluginType}\" plugin.`, \"PLUGIN_NOT_FOUND\", {\n                type: pluginType\n            });\n        }\n\n        const storageOperations = await providerPlugin.provide({\n            context\n        });\n\n        const checkPermissions = (): Promise<CmsSettingsPermission> => {\n            return utils.checkPermissions(context, \"cms.settings\");\n        };\n\n        const settings: CmsSettingsContext = {\n            noAuth: () => {\n                return {\n                    get: async () => {\n                        return await storageOperations.get();\n                    }\n                };\n            },\n            get: async (): Promise<CmsSettings | null> => {\n                await checkPermissions();\n                return await storageOperations.get();\n            },\n            updateContentModelLastChange: async (): Promise<void> => {\n                const data: CmsSettings = {\n                    contentModelLastChange: new Date()\n                };\n\n                const settings = await storageOperations.get();\n                if (!settings) {\n                    await storageOperations.create(data);\n                    return;\n                }\n\n                await storageOperations.update(data);\n            },\n            getContentModelLastChange: async (): Promise<Date> => {\n                try {\n                    const settings = await storageOperations.get();\n                    if (!settings || !settings.contentModelLastChange) {\n                        return new Date();\n                    }\n                    return settings.contentModelLastChange;\n                } catch (ex) {\n                    console.log({\n                        error: {\n                            message: ex.message,\n                            code: ex.code || \"COULD_NOT_FETCH_CONTENT_MODEL_LAST_CHANGE\",\n                            data: ex\n                        }\n                    });\n                }\n                return new Date();\n            }\n        };\n        context.cms = {\n            ...(context.cms || ({} as any)),\n            settings\n        };\n    }\n} as ContextPlugin<CmsContext>;\n"],"file":"settings.crud.js"}