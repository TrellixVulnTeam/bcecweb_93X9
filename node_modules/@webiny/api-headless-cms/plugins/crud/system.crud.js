"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _crypto = _interopRequireDefault(require("crypto"));

var _apiSecurity = require("@webiny/api-security");

var _apiUpgrade = require("@webiny/api-upgrade");

var _ContextPlugin = require("@webiny/handler/plugins/ContextPlugin");

var _error = _interopRequireDefault(require("@webiny/error"));

var _InstallationPlugin = require("../InstallationPlugin");

var _utils = require("../../utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const initialContentModelGroup = {
  name: "Ungrouped",
  slug: "ungrouped",
  description: "A generic content model group",
  icon: "fas/star"
};

var _default = new _ContextPlugin.ContextPlugin(async context => {
  /**
   * If cms is not defined on the context, do not continue, but log it.
   */
  if (!context.cms) {
    return;
  }

  const pluginType = "cms-system-storage-operations-provider";
  const providerPlugins = context.plugins.byType(pluginType);
  const providerPlugin = providerPlugins[providerPlugins.length - 1];

  if (!providerPlugin) {
    throw new _error.default(`Missing "${pluginType}" plugin.`, "PLUGIN_NOT_FOUND", {
      type: pluginType
    });
  }

  const storageOperations = await providerPlugin.provide({
    context
  });

  const createReadAPIKey = () => {
    return _crypto.default.randomBytes(Math.ceil(48 / 2)).toString("hex");
  };

  context.cms = _objectSpread(_objectSpread({}, context.cms), {}, {
    system: {
      async getVersion() {
        if (!context.tenancy.getCurrentTenant()) {
          return null;
        }

        const system = await storageOperations.get();
        return system ? system.version : null;
      },

      async setVersion(version) {
        const system = await storageOperations.get();

        if (!system) {
          await storageOperations.create({
            version
          });
          return;
        }

        await storageOperations.update({
          version
        });
      },

      getReadAPIKey: async () => {
        const system = await storageOperations.get();

        if (!system) {
          return null;
        }

        if (!system.readAPIKey) {
          const apiKey = createReadAPIKey();
          await context.cms.system.setReadAPIKey(apiKey);
          return apiKey;
        }

        return system.readAPIKey;
      },
      setReadAPIKey: async apiKey => {
        await storageOperations.update({
          readAPIKey: apiKey
        });
      },
      install: async () => {
        const identity = context.security.getIdentity();

        if (!identity) {
          throw new _apiSecurity.NotAuthorizedError();
        }

        const version = await context.cms.system.getVersion();

        if (version) {
          return;
        }

        const installationPlugins = context.plugins.byType(_InstallationPlugin.InstallationPlugin.type);
        await (0, _utils.executeCallbacks)(installationPlugins, "beforeInstall", {
          context
        }); // Add default content model group.

        try {
          await context.cms.groups.create(initialContentModelGroup);
        } catch (ex) {
          throw new _error.default(ex.message, "CMS_INSTALLATION_CONTENT_MODEL_GROUP_ERROR", {
            group: initialContentModelGroup
          });
        }

        await (0, _utils.executeCallbacks)(installationPlugins, "afterInstall", {
          context
        }); // Set app version

        await context.cms.system.setVersion(context.WEBINY_VERSION); // Set internal API key to access Read API

        await context.cms.system.setReadAPIKey(createReadAPIKey());
      },

      async upgrade(version) {
        const identity = context.security.getIdentity();

        if (!identity) {
          throw new _apiSecurity.NotAuthorizedError();
        }

        const upgradePlugins = context.plugins.byType("api-upgrade").filter(pl => pl.app === "headless-cms");
        const plugin = (0, _apiUpgrade.getApplicablePlugin)({
          deployedVersion: context.WEBINY_VERSION,
          installedAppVersion: await this.getVersion(),
          upgradePlugins,
          upgradeToVersion: version
        });
        await plugin.apply(context); // Store new app version

        await context.cms.system.setVersion(version);
        return true;
      }

    }
  });
});

exports.default = _default;
//# sourceMappingURL=system.crud.js.map