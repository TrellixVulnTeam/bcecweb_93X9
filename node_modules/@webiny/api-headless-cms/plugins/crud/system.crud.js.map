{"version":3,"sources":["../../../src/plugins/crud/system.crud.ts"],"names":["initialContentModelGroup","name","slug","description","icon","ContextPlugin","context","cms","pluginType","providerPlugins","plugins","byType","providerPlugin","length","WebinyError","type","storageOperations","provide","createReadAPIKey","crypto","randomBytes","Math","ceil","toString","system","getVersion","tenancy","getCurrentTenant","get","version","setVersion","create","update","getReadAPIKey","readAPIKey","apiKey","setReadAPIKey","install","identity","security","getIdentity","NotAuthorizedError","installationPlugins","InstallationPlugin","groups","ex","message","group","WEBINY_VERSION","upgrade","upgradePlugins","filter","pl","app","plugin","deployedVersion","installedAppVersion","upgradeToVersion","apply"],"mappings":"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","sourcesContent":["import crypto from \"crypto\";\nimport { NotAuthorizedError } from \"@webiny/api-security\";\nimport { getApplicablePlugin } from \"@webiny/api-upgrade\";\nimport { UpgradePlugin } from \"@webiny/api-upgrade/types\";\nimport { ContextPlugin } from \"@webiny/handler/plugins/ContextPlugin\";\nimport WebinyError from \"@webiny/error\";\nimport { InstallationPlugin } from \"~/plugins/InstallationPlugin\";\nimport { executeCallbacks } from \"~/utils\";\nimport { CmsContext, CmsSystemStorageOperationsProviderPlugin } from \"~/types\";\n\nconst initialContentModelGroup = {\n    name: \"Ungrouped\",\n    slug: \"ungrouped\",\n    description: \"A generic content model group\",\n    icon: \"fas/star\"\n};\n\nexport default new ContextPlugin<CmsContext>(async context => {\n    /**\n     * If cms is not defined on the context, do not continue, but log it.\n     */\n    if (!context.cms) {\n        return;\n    }\n\n    const pluginType = \"cms-system-storage-operations-provider\";\n    const providerPlugins =\n        context.plugins.byType<CmsSystemStorageOperationsProviderPlugin>(pluginType);\n    const providerPlugin = providerPlugins[providerPlugins.length - 1];\n    if (!providerPlugin) {\n        throw new WebinyError(`Missing \"${pluginType}\" plugin.`, \"PLUGIN_NOT_FOUND\", {\n            type: pluginType\n        });\n    }\n\n    const storageOperations = await providerPlugin.provide({\n        context\n    });\n\n    const createReadAPIKey = () => {\n        return crypto.randomBytes(Math.ceil(48 / 2)).toString(\"hex\");\n    };\n\n    context.cms = {\n        ...context.cms,\n        system: {\n            async getVersion() {\n                if (!context.tenancy.getCurrentTenant()) {\n                    return null;\n                }\n\n                const system = await storageOperations.get();\n\n                return system ? system.version : null;\n            },\n            async setVersion(version: string) {\n                const system = await storageOperations.get();\n                if (!system) {\n                    await storageOperations.create({\n                        version\n                    });\n                    return;\n                }\n                await storageOperations.update({\n                    version\n                });\n            },\n            getReadAPIKey: async () => {\n                const system = await storageOperations.get();\n\n                if (!system) {\n                    return null;\n                }\n\n                if (!system.readAPIKey) {\n                    const apiKey = createReadAPIKey();\n                    await context.cms.system.setReadAPIKey(apiKey);\n                    return apiKey;\n                }\n\n                return system.readAPIKey;\n            },\n            setReadAPIKey: async apiKey => {\n                await storageOperations.update({\n                    readAPIKey: apiKey\n                });\n            },\n            install: async (): Promise<void> => {\n                const identity = context.security.getIdentity();\n                if (!identity) {\n                    throw new NotAuthorizedError();\n                }\n\n                const version = await context.cms.system.getVersion();\n                if (version) {\n                    return;\n                }\n\n                const installationPlugins = context.plugins.byType<InstallationPlugin>(\n                    InstallationPlugin.type\n                );\n\n                await executeCallbacks<InstallationPlugin[\"beforeInstall\"]>(\n                    installationPlugins,\n                    \"beforeInstall\",\n                    {\n                        context\n                    }\n                );\n\n                // Add default content model group.\n                try {\n                    await context.cms.groups.create(initialContentModelGroup);\n                } catch (ex) {\n                    throw new WebinyError(\n                        ex.message,\n                        \"CMS_INSTALLATION_CONTENT_MODEL_GROUP_ERROR\",\n                        {\n                            group: initialContentModelGroup\n                        }\n                    );\n                }\n\n                await executeCallbacks<InstallationPlugin[\"afterInstall\"]>(\n                    installationPlugins,\n                    \"afterInstall\",\n                    {\n                        context\n                    }\n                );\n\n                // Set app version\n                await context.cms.system.setVersion(context.WEBINY_VERSION);\n\n                // Set internal API key to access Read API\n                await context.cms.system.setReadAPIKey(createReadAPIKey());\n            },\n            async upgrade(version) {\n                const identity = context.security.getIdentity();\n                if (!identity) {\n                    throw new NotAuthorizedError();\n                }\n\n                const upgradePlugins = context.plugins\n                    .byType<UpgradePlugin>(\"api-upgrade\")\n                    .filter(pl => pl.app === \"headless-cms\");\n\n                const plugin = getApplicablePlugin({\n                    deployedVersion: context.WEBINY_VERSION,\n                    installedAppVersion: await this.getVersion(),\n                    upgradePlugins,\n                    upgradeToVersion: version\n                });\n\n                await plugin.apply(context);\n\n                // Store new app version\n                await context.cms.system.setVersion(version);\n\n                return true;\n            }\n        }\n    };\n});\n"],"file":"system.crud.js"}