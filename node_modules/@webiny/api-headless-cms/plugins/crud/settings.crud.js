"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var utils = _interopRequireWildcard(require("../../utils"));

var _error = _interopRequireDefault(require("@webiny/error"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var _default = {
  type: "context",
  name: "context-settings-crud",
  apply: async context => {
    /**
     * If cms is not defined on the context, do not continue, but log it.
     */
    if (!context.cms) {
      return;
    }

    const pluginType = "cms-settings-storage-operations-provider";
    const providerPlugins = context.plugins.byType(pluginType);
    const providerPlugin = providerPlugins[providerPlugins.length - 1];

    if (!providerPlugin) {
      throw new _error.default(`Missing "${pluginType}" plugin.`, "PLUGIN_NOT_FOUND", {
        type: pluginType
      });
    }

    const storageOperations = await providerPlugin.provide({
      context
    });

    const checkPermissions = () => {
      return utils.checkPermissions(context, "cms.settings");
    };

    const settings = {
      noAuth: () => {
        return {
          get: async () => {
            return await storageOperations.get();
          }
        };
      },
      get: async () => {
        await checkPermissions();
        return await storageOperations.get();
      },
      updateContentModelLastChange: async () => {
        const data = {
          contentModelLastChange: new Date()
        };
        const settings = await storageOperations.get();

        if (!settings) {
          await storageOperations.create(data);
          return;
        }

        await storageOperations.update(data);
      },
      getContentModelLastChange: async () => {
        try {
          const settings = await storageOperations.get();

          if (!settings || !settings.contentModelLastChange) {
            return new Date();
          }

          return settings.contentModelLastChange;
        } catch (ex) {
          console.log({
            error: {
              message: ex.message,
              code: ex.code || "COULD_NOT_FETCH_CONTENT_MODEL_LAST_CHANGE",
              data: ex
            }
          });
        }

        return new Date();
      }
    };
    context.cms = _objectSpread(_objectSpread({}, context.cms || {}), {}, {
      settings
    });
  }
};
exports.default = _default;
//# sourceMappingURL=settings.crud.js.map