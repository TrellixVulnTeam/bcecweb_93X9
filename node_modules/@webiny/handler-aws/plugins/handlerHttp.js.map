{"version":3,"sources":["../../src/plugins/handlerHttp.ts"],"names":["type","apply","context","invocationArgs","httpMethod","isBase64Encoded","request","method","body","headers","cookies","path","base","rawPath","parameters","pathParameters","query","queryStringParameters","http","response","statusCode","Buffer","from","toString"],"mappings":";;;;;;eAIe;AACXA,EAAAA,IAAI,EAAE,SADK;;AAEXC,EAAAA,KAAK,CAACC,OAAD,EAAU;AACX,UAAM;AAAEC,MAAAA;AAAF,QAAqBD,OAA3B;;AACA,QAAI,CAACC,cAAD,IAAmB,CAACA,cAAc,CAACC,UAAvC,EAAmD;AAC/C;AACH;;AAED,UAAM;AAAEC,MAAAA;AAAF,QAAsBF,cAA5B;AAEA,UAAMG,OAAO,GAAG;AACZC,MAAAA,MAAM,EAAEJ,cAAc,CAACC,UADX;AAEZI,MAAAA,IAAI,EAAEL,cAAc,CAACK,IAFT;AAGZC,MAAAA,OAAO,EAAEN,cAAc,CAACM,OAHZ;AAIZC,MAAAA,OAAO,EAAEP,cAAc,CAACO,OAJZ;AAKZC,MAAAA,IAAI,EAAE;AACFC,QAAAA,IAAI,EAAET,cAAc,CAACU,OADnB;AAEFC,QAAAA,UAAU,EAAEX,cAAc,CAACY,cAFzB;AAGFC,QAAAA,KAAK,EAAEb,cAAc,CAACc;AAHpB;AALM,KAAhB;AAYAf,IAAAA,OAAO,CAACgB,IAAR,GAAe;AACXZ,MAAAA,OADW;;AAEXa,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,UAAU,GAAG,GAAf;AAAoBZ,QAAAA,IAAI,GAAG,EAA3B;AAA+BC,QAAAA,OAAO,GAAG;AAAzC,OAAD,EAAgD;AACpD,eAAO;AACHW,UAAAA,UADG;AAEHZ,UAAAA,IAAI,EAAEH,eAAe,GAAGgB,MAAM,CAACC,IAAP,CAAYd,IAAZ,EAAkBe,QAAlB,CAA2B,QAA3B,CAAH,GAA0Cf,IAF5D;AAGHC,UAAAA,OAHG;AAIHJ,UAAAA;AAJG,SAAP;AAMH;;AATU,KAAf;;AAYA,QAAIA,eAAJ,EAAqB;AACjBH,MAAAA,OAAO,CAACgB,IAAR,CAAaZ,OAAb,CAAqBE,IAArB,GAA4Ba,MAAM,CAACC,IAAP,CAAYpB,OAAO,CAACgB,IAAR,CAAaZ,OAAb,CAAqBE,IAAjC,EAAuC,QAAvC,EAAiDe,QAAjD,CACxB,OADwB,CAA5B;AAGH;AACJ;;AAvCU,C","sourcesContent":["import { HttpContext } from \"@webiny/handler-http/types\";\nimport { ContextPlugin } from \"@webiny/handler/types\";\nimport { ArgsContext } from \"@webiny/handler-args/types\";\n\nexport default {\n    type: \"context\",\n    apply(context) {\n        const { invocationArgs } = context;\n        if (!invocationArgs || !invocationArgs.httpMethod) {\n            return;\n        }\n\n        const { isBase64Encoded } = invocationArgs;\n\n        const request = {\n            method: invocationArgs.httpMethod,\n            body: invocationArgs.body,\n            headers: invocationArgs.headers,\n            cookies: invocationArgs.cookies,\n            path: {\n                base: invocationArgs.rawPath,\n                parameters: invocationArgs.pathParameters,\n                query: invocationArgs.queryStringParameters\n            }\n        };\n\n        context.http = {\n            request,\n            response({ statusCode = 200, body = \"\", headers = {} }) {\n                return {\n                    statusCode,\n                    body: isBase64Encoded ? Buffer.from(body).toString(\"base64\") : body,\n                    headers,\n                    isBase64Encoded\n                };\n            }\n        };\n\n        if (isBase64Encoded) {\n            context.http.request.body = Buffer.from(context.http.request.body, \"base64\").toString(\n                \"utf-8\"\n            );\n        }\n    }\n} as ContextPlugin<HttpContext & ArgsContext>;\n"],"file":"handlerHttp.js"}