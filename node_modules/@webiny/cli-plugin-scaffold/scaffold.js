"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scaffold = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _ora = _interopRequireDefault(require("ora"));

var _inquirer = _interopRequireDefault(require("inquirer"));

var _chalk = _interopRequireDefault(require("chalk"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const wait = ms => {
  return new Promise(resolve => {
    setTimeout(resolve, ms || 1000);
  });
};

const scaffold = async args => {
  const {
    context
  } = args;
  const scaffoldPlugins = context.plugins.byType("cli-plugin-scaffold-template");

  if (!scaffoldPlugins.length) {
    console.log(`ðŸš¨ We couldn't find any scaffolding plugins. Add plugins to your "webiny.project.js" file!`);
    process.exit(1);
  }

  const choices = scaffoldPlugins.map(plugin => {
    const {
      name,
      description
    } = plugin.scaffold;
    return {
      name: `${_chalk.default.bold(name)}\n  ${description}\n`,
      short: name,
      value: plugin.name
    };
  });
  const {
    selectedPluginName
  } = await _inquirer.default.prompt({
    type: "list",
    pageSize: 18,
    name: "selectedPluginName",
    message: "Choose a scaffold:",
    choices
  });
  const {
    scaffold
  } = context.plugins.byName(selectedPluginName);
  const questions = typeof scaffold.questions === "function" ? scaffold.questions({
    context
  }) : scaffold.questions;
  const input = await _inquirer.default.prompt(questions);
  const oraInstance = (0, _ora.default)();
  const callbackArgs = {
    input,
    context,
    wait,
    ora: oraInstance,
    inquirer: _inquirer.default
  };

  try {
    if (typeof scaffold.onGenerate === "function") {
      await scaffold.onGenerate(callbackArgs);
    }

    await scaffold.generate(callbackArgs);

    if (typeof scaffold.onSuccess === "function") {
      await scaffold.onSuccess(callbackArgs);
    }
  } catch (e) {
    oraInstance.stop();

    if (typeof scaffold.onError === "function") {
      await scaffold.onError(_objectSpread(_objectSpread({}, callbackArgs), {}, {
        error: e
      }));
    } else {
      console.log(e);
    }

    process.exit(1);
  }
};

exports.scaffold = scaffold;
//# sourceMappingURL=scaffold.js.map