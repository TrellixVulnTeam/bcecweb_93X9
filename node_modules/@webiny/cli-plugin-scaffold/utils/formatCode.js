"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _fastGlob = _interopRequireDefault(require("fast-glob"));

var _prettier = _interopRequireDefault(require("prettier"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const globDefaultOptions = {
  cwd: process.cwd(),
  onlyFiles: true,
  ignore: ["**/node_modules/**"]
};

var _default = async (globPattern, options) => {
  const globOptions = _objectSpread(_objectSpread({}, globDefaultOptions), options);

  const filePaths = _fastGlob.default.sync(globPattern, globOptions);

  for (let i = 0; i < filePaths.length; i++) {
    const filePath = _path.default.join(globOptions.cwd, filePaths[i]);

    const options = await _prettier.default.resolveConfig(filePath);

    const fileContentRaw = _fs.default.readFileSync(filePath).toString("utf8");

    const fileContentFormatted = _prettier.default.format(fileContentRaw, _objectSpread(_objectSpread({}, options), {}, {
      filepath: filePath
    }));

    _fs.default.writeFileSync(filePath, fileContentFormatted);
  }
};

exports.default = _default;
//# sourceMappingURL=formatCode.js.map