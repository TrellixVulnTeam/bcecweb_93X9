{"version":3,"sources":["../src/scaffold.ts"],"names":["wait","ms","Promise","resolve","setTimeout","scaffold","args","context","scaffoldPlugins","plugins","byType","length","console","log","process","exit","choices","map","plugin","name","description","chalk","bold","short","value","selectedPluginName","inquirer","prompt","type","pageSize","message","byName","questions","input","oraInstance","callbackArgs","ora","onGenerate","generate","onSuccess","e","stop","onError","error"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;AAIA,MAAMA,IAAI,GAAIC,EAAD,IAAgC;AACzC,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAyB;AACxCC,IAAAA,UAAU,CAACD,OAAD,EAAUF,EAAE,IAAI,IAAhB,CAAV;AACH,GAFM,CAAP;AAGH,CAJD;;AAUO,MAAMI,QAAQ,GAAG,MAAOC,IAAP,IAA8B;AAClD,QAAM;AAAEC,IAAAA;AAAF,MAAcD,IAApB;AAEA,QAAME,eAAe,GAAGD,OAAO,CAACE,OAAR,CAAgBC,MAAhB,CACpB,8BADoB,CAAxB;;AAGA,MAAI,CAACF,eAAe,CAACG,MAArB,EAA6B;AACzBC,IAAAA,OAAO,CAACC,GAAR,CACK,4FADL;AAGAC,IAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACH;;AAED,QAAMC,OAAO,GAAGR,eAAe,CAACS,GAAhB,CAAoBC,MAAM,IAAI;AAC1C,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAwBF,MAAM,CAACb,QAArC;AAEA,WAAO;AACHc,MAAAA,IAAI,EAAG,GAAEE,eAAMC,IAAN,CAAWH,IAAX,CAAiB,OAAMC,WAAY,IADzC;AAEHG,MAAAA,KAAK,EAAEJ,IAFJ;AAGHK,MAAAA,KAAK,EAAEN,MAAM,CAACC;AAHX,KAAP;AAKH,GARe,CAAhB;AAUA,QAAM;AAAEM,IAAAA;AAAF,MAAyB,MAAMC,kBAASC,MAAT,CAAgB;AACjDC,IAAAA,IAAI,EAAE,MAD2C;AAEjDC,IAAAA,QAAQ,EAAE,EAFuC;AAGjDV,IAAAA,IAAI,EAAE,oBAH2C;AAIjDW,IAAAA,OAAO,EAAE,oBAJwC;AAKjDd,IAAAA;AALiD,GAAhB,CAArC;AAQA,QAAM;AAAEX,IAAAA;AAAF,MAAeE,OAAO,CAACE,OAAR,CAAgBsB,MAAhB,CAAmDN,kBAAnD,CAArB;AAEA,QAAMO,SAAS,GACX,OAAO3B,QAAQ,CAAC2B,SAAhB,KAA8B,UAA9B,GACM3B,QAAQ,CAAC2B,SAAT,CAAmB;AAAEzB,IAAAA;AAAF,GAAnB,CADN,GAEMF,QAAQ,CAAC2B,SAHnB;AAKA,QAAMC,KAAK,GAAG,MAAMP,kBAASC,MAAT,CAAgBK,SAAhB,CAApB;AACA,QAAME,WAAW,GAAG,mBAApB;AAEA,QAAMC,YAAY,GAAG;AAAEF,IAAAA,KAAF;AAAS1B,IAAAA,OAAT;AAAkBP,IAAAA,IAAlB;AAAwBoC,IAAAA,GAAG,EAAEF,WAA7B;AAA0CR,IAAAA,QAAQ,EAARA;AAA1C,GAArB;;AAEA,MAAI;AACA,QAAI,OAAOrB,QAAQ,CAACgC,UAAhB,KAA+B,UAAnC,EAA+C;AAC3C,YAAMhC,QAAQ,CAACgC,UAAT,CAAoBF,YAApB,CAAN;AACH;;AAED,UAAM9B,QAAQ,CAACiC,QAAT,CAAkBH,YAAlB,CAAN;;AAEA,QAAI,OAAO9B,QAAQ,CAACkC,SAAhB,KAA8B,UAAlC,EAA8C;AAC1C,YAAMlC,QAAQ,CAACkC,SAAT,CAAmBJ,YAAnB,CAAN;AACH;AACJ,GAVD,CAUE,OAAOK,CAAP,EAAU;AACRN,IAAAA,WAAW,CAACO,IAAZ;;AACA,QAAI,OAAOpC,QAAQ,CAACqC,OAAhB,KAA4B,UAAhC,EAA4C;AACxC,YAAMrC,QAAQ,CAACqC,OAAT,iCAAsBP,YAAtB;AAAoCQ,QAAAA,KAAK,EAAEH;AAA3C,SAAN;AACH,KAFD,MAEO;AACH5B,MAAAA,OAAO,CAACC,GAAR,CAAY2B,CAAZ;AACH;;AACD1B,IAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACH;AACJ,CA9DM","sourcesContent":["import ora from \"ora\";\nimport inquirer from \"inquirer\";\nimport chalk from \"chalk\";\nimport { CliCommandScaffoldTemplate } from \"./types\";\nimport { CliContext } from \"@webiny/cli/types\";\n\nconst wait = (ms?: number): Promise<void> => {\n    return new Promise((resolve: () => void) => {\n        setTimeout(resolve, ms || 1000);\n    });\n};\n\ninterface ScaffoldArgs {\n    context: CliContext;\n}\n\nexport const scaffold = async (args: ScaffoldArgs) => {\n    const { context } = args;\n\n    const scaffoldPlugins = context.plugins.byType<CliCommandScaffoldTemplate>(\n        \"cli-plugin-scaffold-template\"\n    );\n    if (!scaffoldPlugins.length) {\n        console.log(\n            `ðŸš¨ We couldn't find any scaffolding plugins. Add plugins to your \"webiny.project.js\" file!`\n        );\n        process.exit(1);\n    }\n\n    const choices = scaffoldPlugins.map(plugin => {\n        const { name, description } = plugin.scaffold;\n\n        return {\n            name: `${chalk.bold(name)}\\n  ${description}\\n`,\n            short: name,\n            value: plugin.name\n        };\n    });\n\n    const { selectedPluginName } = await inquirer.prompt({\n        type: \"list\",\n        pageSize: 18,\n        name: \"selectedPluginName\",\n        message: \"Choose a scaffold:\",\n        choices\n    });\n\n    const { scaffold } = context.plugins.byName<CliCommandScaffoldTemplate>(selectedPluginName);\n\n    const questions =\n        typeof scaffold.questions === \"function\"\n            ? scaffold.questions({ context })\n            : scaffold.questions;\n\n    const input = await inquirer.prompt(questions);\n    const oraInstance = ora();\n\n    const callbackArgs = { input, context, wait, ora: oraInstance, inquirer };\n\n    try {\n        if (typeof scaffold.onGenerate === \"function\") {\n            await scaffold.onGenerate(callbackArgs);\n        }\n\n        await scaffold.generate(callbackArgs);\n\n        if (typeof scaffold.onSuccess === \"function\") {\n            await scaffold.onSuccess(callbackArgs);\n        }\n    } catch (e) {\n        oraInstance.stop();\n        if (typeof scaffold.onError === \"function\") {\n            await scaffold.onError({ ...callbackArgs, error: e });\n        } else {\n            console.log(e);\n        }\n        process.exit(1);\n    }\n};\n"],"file":"scaffold.js"}