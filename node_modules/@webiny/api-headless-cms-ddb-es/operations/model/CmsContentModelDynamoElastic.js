"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _error = _interopRequireDefault(require("@webiny/error"));

var _configurations = _interopRequireDefault(require("../../configurations"));

var _utils = require("../../utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

class CmsContentModelDynamoElastic {
  get esClient() {
    if (this._esClient) {
      return this._esClient;
    }

    const ctx = this.context;

    if (!ctx.elasticsearch) {
      throw new _error.default("Missing Elasticsearch client on the context");
    }

    this._esClient = ctx.elasticsearch;
    return this._esClient;
  }

  get context() {
    return this._context;
  }

  get partitionKey() {
    return `${(0, _utils.createBasePartitionKey)(this.context)}#CM`;
  }

  constructor({
    context
  }) {
    (0, _defineProperty2.default)(this, "_context", void 0);
    (0, _defineProperty2.default)(this, "_esClient", void 0);
    this._context = context;
  }

  async create({
    data
  }) {
    const {
      db
    } = this.context;

    const esIndex = _configurations.default.es(this.context, data);

    try {
      const {
        body: exists
      } = await this.esClient.indices.exists(esIndex);

      if (!exists) {
        await this.esClient.indices.create(esIndex);
      }
    } catch (ex) {
      throw new _error.default("Could not create Elasticsearch indice.", "ELASTICSEARCH_INDICE_CREATE_ERROR", {
        error: ex,
        esIndex
      });
    }

    let ex;

    try {
      await db.create(_objectSpread(_objectSpread({}, _configurations.default.db()), {}, {
        data: _objectSpread({
          PK: this.partitionKey,
          SK: data.modelId,
          TYPE: "cms.model",
          webinyVersion: this.context.WEBINY_VERSION
        }, data)
      }));
      return data;
    } catch (e) {
      ex = e;
    }

    try {
      await this.esClient.indices.delete(esIndex);
    } catch {}

    throw ex;
  }

  async delete({
    model
  }) {
    const {
      db
    } = this.context;
    await db.delete(_objectSpread(_objectSpread({}, _configurations.default.db()), {}, {
      query: {
        PK: this.partitionKey,
        SK: model.modelId
      }
    }));

    const esIndex = _configurations.default.es(this.context, model);

    try {
      await this.esClient.indices.delete(esIndex);
    } catch (ex) {
      throw new _error.default("Could not delete Elasticsearch indice.", "ELASTICSEARCH_INDICE_DELETE_ERROR", {
        error: ex,
        esIndex
      });
    }

    return true;
  }

  async get({
    id
  }) {
    const {
      db
    } = this.context;
    const [[model]] = await db.read(_objectSpread(_objectSpread({}, _configurations.default.db()), {}, {
      query: {
        PK: this.partitionKey,
        SK: id
      }
    }));
    return model || null;
  }

  async list() {
    const {
      db
    } = this.context;
    const [models] = await db.read(_objectSpread(_objectSpread({}, _configurations.default.db()), {}, {
      query: {
        PK: this.partitionKey,
        SK: {
          $gt: " "
        }
      }
    }));
    return models;
  }

  async update({
    model,
    data
  }) {
    const {
      db
    } = this.context;
    await db.update(_objectSpread(_objectSpread({}, _configurations.default.db()), {}, {
      query: {
        PK: this.partitionKey,
        SK: model.modelId
      },
      data: _objectSpread(_objectSpread({}, data), {}, {
        webinyVersion: this.context.WEBINY_VERSION
      })
    }));
    return _objectSpread(_objectSpread({}, model), data);
  }

}

exports.default = CmsContentModelDynamoElastic;
//# sourceMappingURL=CmsContentModelDynamoElastic.js.map