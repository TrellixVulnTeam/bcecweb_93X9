{"version":3,"sources":["../../../src/operations/model/CmsContentModelDynamoElastic.ts"],"names":["CmsContentModelDynamoElastic","esClient","_esClient","ctx","context","elasticsearch","WebinyError","_context","partitionKey","constructor","create","data","db","esIndex","configurations","es","body","exists","indices","ex","error","PK","SK","modelId","TYPE","webinyVersion","WEBINY_VERSION","e","delete","model","query","get","id","read","list","models","$gt","update"],"mappings":"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","sourcesContent":["import {\n    CmsContentModel,\n    CmsContentModelStorageOperations,\n    CmsContentModelStorageOperationsCreateArgs,\n    CmsContentModelStorageOperationsDeleteArgs,\n    CmsContentModelStorageOperationsGetArgs,\n    CmsContentModelStorageOperationsUpdateArgs,\n    CmsContext\n} from \"@webiny/api-headless-cms/types\";\nimport WebinyError from \"@webiny/error\";\nimport configurations from \"../../configurations\";\nimport { createBasePartitionKey } from \"../../utils\";\nimport { Client } from \"@elastic/elasticsearch\";\nimport { ElasticsearchContext } from \"@webiny/api-elasticsearch/types\";\n\ninterface ConstructorArgs {\n    context: CmsContext;\n}\nexport default class CmsContentModelDynamoElastic implements CmsContentModelStorageOperations {\n    private readonly _context: CmsContext;\n    private _esClient: Client;\n\n    private get esClient(): Client {\n        if (this._esClient) {\n            return this._esClient;\n        }\n        const ctx = this.context as Partial<ElasticsearchContext>;\n        if (!ctx.elasticsearch) {\n            throw new WebinyError(\"Missing Elasticsearch client on the context\");\n        }\n        this._esClient = ctx.elasticsearch as Client;\n        return this._esClient;\n    }\n\n    private get context(): CmsContext {\n        return this._context;\n    }\n\n    private get partitionKey(): string {\n        return `${createBasePartitionKey(this.context)}#CM`;\n    }\n\n    public constructor({ context }: ConstructorArgs) {\n        this._context = context;\n    }\n\n    public async create({\n        data\n    }: CmsContentModelStorageOperationsCreateArgs): Promise<CmsContentModel> {\n        const { db } = this.context;\n\n        const esIndex = configurations.es(this.context, data);\n        try {\n            const { body: exists } = await this.esClient.indices.exists(esIndex);\n            if (!exists) {\n                await this.esClient.indices.create(esIndex);\n            }\n        } catch (ex) {\n            throw new WebinyError(\n                \"Could not create Elasticsearch indice.\",\n                \"ELASTICSEARCH_INDICE_CREATE_ERROR\",\n                {\n                    error: ex,\n                    esIndex\n                }\n            );\n        }\n        let ex;\n        try {\n            await db.create({\n                ...configurations.db(),\n                data: {\n                    PK: this.partitionKey,\n                    SK: data.modelId,\n                    TYPE: \"cms.model\",\n                    webinyVersion: this.context.WEBINY_VERSION,\n                    ...data\n                }\n            });\n            return data;\n        } catch (e) {\n            ex = e;\n        }\n        try {\n            await this.esClient.indices.delete(esIndex);\n        } catch {}\n\n        throw ex;\n    }\n\n    public async delete({ model }: CmsContentModelStorageOperationsDeleteArgs): Promise<boolean> {\n        const { db } = this.context;\n        await db.delete({\n            ...configurations.db(),\n            query: {\n                PK: this.partitionKey,\n                SK: model.modelId\n            }\n        });\n        const esIndex = configurations.es(this.context, model);\n        try {\n            await this.esClient.indices.delete(esIndex);\n        } catch (ex) {\n            throw new WebinyError(\n                \"Could not delete Elasticsearch indice.\",\n                \"ELASTICSEARCH_INDICE_DELETE_ERROR\",\n                {\n                    error: ex,\n                    esIndex\n                }\n            );\n        }\n        return true;\n    }\n    public async get({\n        id\n    }: CmsContentModelStorageOperationsGetArgs): Promise<CmsContentModel | null> {\n        const { db } = this.context;\n\n        const [[model]] = await db.read<CmsContentModel>({\n            ...configurations.db(),\n            query: {\n                PK: this.partitionKey,\n                SK: id\n            }\n        });\n\n        return model || null;\n    }\n    public async list(): Promise<CmsContentModel[]> {\n        const { db } = this.context;\n        const [models] = await db.read<CmsContentModel>({\n            ...configurations.db(),\n            query: {\n                PK: this.partitionKey,\n                SK: {\n                    $gt: \" \"\n                }\n            }\n        });\n\n        return models;\n    }\n\n    public async update({\n        model,\n        data\n    }: CmsContentModelStorageOperationsUpdateArgs): Promise<CmsContentModel> {\n        const { db } = this.context;\n        await db.update({\n            ...configurations.db(),\n            query: {\n                PK: this.partitionKey,\n                SK: model.modelId\n            },\n            data: {\n                ...data,\n                webinyVersion: this.context.WEBINY_VERSION\n            }\n        });\n\n        return {\n            ...model,\n            ...data\n        };\n    }\n}\n"],"file":"CmsContentModelDynamoElastic.js"}