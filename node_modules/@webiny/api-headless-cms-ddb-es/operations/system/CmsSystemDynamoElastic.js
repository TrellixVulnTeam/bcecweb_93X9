"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _error = _interopRequireDefault(require("@webiny/error"));

var _configurations = _interopRequireDefault(require("../../configurations"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const SYSTEM_SECONDARY_KEY = "CMS";

class CmsSystemDynamoElastic {
  get context() {
    return this._context;
  }

  get partitionKey() {
    const tenant = this._context.tenancy.getCurrentTenant();

    if (!tenant) {
      throw new _error.default("Tenant missing.", "TENANT_NOT_FOUND");
    }

    return `T#${tenant.id}#SYSTEM`;
  }

  constructor({
    context
  }) {
    (0, _defineProperty2.default)(this, "_context", void 0);
    this._context = context;
  }

  async get() {
    const {
      db
    } = this.context;
    const [[system]] = await db.read(_objectSpread(_objectSpread({}, _configurations.default.db()), {}, {
      query: {
        PK: this.partitionKey,
        SK: SYSTEM_SECONDARY_KEY
      }
    }));
    return system || null;
  }

  async create(data) {
    const {
      db
    } = this.context;

    try {
      await db.create(_objectSpread(_objectSpread({}, _configurations.default.db()), {}, {
        data: _objectSpread({
          PK: this.partitionKey,
          SK: SYSTEM_SECONDARY_KEY
        }, data)
      }));
    } catch (ex) {
      throw new _error.default(ex.message || "Could not create system.", ex.code || "CREATE_SYSTEM_ERROR", {
        error: ex,
        data
      });
    }
  }

  async update(data) {
    const {
      db
    } = this.context;

    try {
      await db.update(_objectSpread(_objectSpread({}, _configurations.default.db()), {}, {
        query: {
          PK: this.partitionKey,
          SK: SYSTEM_SECONDARY_KEY
        },
        data
      }));
    } catch (ex) {
      throw new _error.default(ex.message || "Could not update system.", ex.code || "UPDATE_SYSTEM_ERROR", {
        error: ex,
        data
      });
    }
  }

}

exports.default = CmsSystemDynamoElastic;
//# sourceMappingURL=CmsSystemDynamoElastic.js.map