{"version":3,"sources":["../../../src/operations/settings/CmsSettingsDynamoElastic.ts"],"names":["convertToDbData","data","contentModelLastChange","toISOString","convertFromDbData","Date","SETTINGS_SECONDARY_KEY","CmsSettingsDynamoElastic","context","_context","partitionKey","constructor","get","db","settings","read","configurations","query","PK","SK","create","dbData","ex","WebinyError","message","code","error","update"],"mappings":"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","sourcesContent":["import {\n    CmsContext,\n    CmsSettings,\n    CmsSettingsStorageOperations\n} from \"@webiny/api-headless-cms/types\";\nimport configurations from \"../../configurations\";\nimport WebinyError from \"@webiny/error\";\nimport { createBasePartitionKey } from \"../../utils\";\n\ninterface ConstructorArgs {\n    context: CmsContext;\n}\n// @ts-ignore\ninterface CmsSettingsDb extends CmsSettings {\n    contentModelLastChange: string;\n}\n\nconst convertToDbData = (data: CmsSettings): CmsSettingsDb => {\n    return {\n        ...data,\n        contentModelLastChange: data.contentModelLastChange.toISOString()\n    };\n};\n\nconst convertFromDbData = (data?: CmsSettingsDb): CmsSettings | null => {\n    if (!data) {\n        return null;\n    }\n    let contentModelLastChange;\n    try {\n        contentModelLastChange = new Date(data.contentModelLastChange);\n    } catch {\n        contentModelLastChange = new Date();\n    }\n    return {\n        ...data,\n        contentModelLastChange\n    };\n};\n\nconst SETTINGS_SECONDARY_KEY = \"settings\";\n\nexport default class CmsSettingsDynamoElastic implements CmsSettingsStorageOperations {\n    private readonly _context: CmsContext;\n\n    private get context(): CmsContext {\n        return this._context;\n    }\n\n    private get partitionKey(): string {\n        return `${createBasePartitionKey(this.context)}#SETTINGS`;\n    }\n\n    public constructor({ context }: ConstructorArgs) {\n        this._context = context;\n    }\n\n    public async get(): Promise<CmsSettings> {\n        const { db } = this.context;\n        const [[settings]] = await db.read<CmsSettingsDb>({\n            ...configurations.db(),\n            query: {\n                PK: this.partitionKey,\n                SK: SETTINGS_SECONDARY_KEY\n            }\n        });\n        if (!settings) {\n            return null;\n        }\n        return convertFromDbData(settings);\n    }\n\n    public async create(data: CmsSettings): Promise<void> {\n        const { db } = this.context;\n        const dbData = convertToDbData(data);\n        try {\n            await db.create({\n                ...configurations.db(),\n                data: {\n                    PK: this.partitionKey,\n                    SK: SETTINGS_SECONDARY_KEY,\n                    ...dbData\n                }\n            });\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not create settings.\",\n                ex.code || \"CREATE_SETTINGS_ERROR\",\n                {\n                    error: ex,\n                    data\n                }\n            );\n        }\n    }\n\n    public async update(data: CmsSettings): Promise<void> {\n        const { db } = this.context;\n        try {\n            await db.update({\n                ...configurations.db(),\n                query: {\n                    PK: this.partitionKey,\n                    SK: SETTINGS_SECONDARY_KEY\n                },\n                data: convertToDbData(data)\n            });\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not update settings.\",\n                ex.code || \"UPDATE_SETTINGS_ERROR\",\n                {\n                    error: ex,\n                    data\n                }\n            );\n        }\n    }\n}\n"],"file":"CmsSettingsDynamoElastic.js"}