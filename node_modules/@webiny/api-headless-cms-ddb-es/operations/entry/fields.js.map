{"version":3,"sources":["../../../src/operations/entry/fields.ts"],"names":["entity","fieldsWithKeywords","hasKeyword","type","includes","createElasticsearchFields","model","systemFields","createdBy","ElasticsearchFieldPlugin","field","path","searchable","keyword","sortable","ownedBy","createdOn","unmappedType","savedOn","fields","reduce","fieldId"],"mappings":";;;;;;;AACA;;AAEA,MAAMA,MAAM,GAAG,2BAAf;AACA,MAAMC,kBAAkB,GAAG,CAAC,MAAD,EAAS,WAAT,EAAsB,WAAtB,EAAmC,IAAnC,EAAyC,KAAzC,CAA3B;;AAEA,MAAMC,UAAU,GAAIC,IAAD,IAA2B;AAC1C,SAAOF,kBAAkB,CAACG,QAAnB,CAA4BD,IAA5B,CAAP;AACH,CAFD;;AAIO,MAAME,yBAAyB,GAClCC,KADqC,IAEM;AAC3C;AACJ;AACA;AACI,QAAMC,YAAY,GAAG;AACjBC,IAAAA,SAAS,EAAE,IAAIC,kDAAJ,CAA6B;AACpCC,MAAAA,KAAK,EAAE,WAD6B;AAEpCC,MAAAA,IAAI,EAAE,cAF8B;AAGpCX,MAAAA,MAHoC;AAIpCY,MAAAA,UAAU,EAAE,IAJwB;AAKpCC,MAAAA,OAAO,EAAE,IAL2B;AAMpCC,MAAAA,QAAQ,EAAE;AAN0B,KAA7B,CADM;AASjBC,IAAAA,OAAO,EAAE,IAAIN,kDAAJ,CAA6B;AAClCC,MAAAA,KAAK,EAAE,SAD2B;AAElCC,MAAAA,IAAI,EAAE,YAF4B;AAGlCX,MAAAA,MAHkC;AAIlCY,MAAAA,UAAU,EAAE,IAJsB;AAKlCC,MAAAA,OAAO,EAAE,IALyB;AAMlCC,MAAAA,QAAQ,EAAE;AANwB,KAA7B,CATQ;AAiBjBE,IAAAA,SAAS,EAAE,IAAIP,kDAAJ,CAA6B;AACpCC,MAAAA,KAAK,EAAE,WAD6B;AAEpCC,MAAAA,IAAI,EAAE,WAF8B;AAGpCX,MAAAA,MAHoC;AAIpCY,MAAAA,UAAU,EAAE,IAJwB;AAKpCC,MAAAA,OAAO,EAAE,KAL2B;AAMpCC,MAAAA,QAAQ,EAAE,KAN0B;AAOpCG,MAAAA,YAAY,EAAE;AAPsB,KAA7B,CAjBM;AA0BjBC,IAAAA,OAAO,EAAE,IAAIT,kDAAJ,CAA6B;AAClCC,MAAAA,KAAK,EAAE,SAD2B;AAElCC,MAAAA,IAAI,EAAE,SAF4B;AAGlCX,MAAAA,MAHkC;AAIlCY,MAAAA,UAAU,EAAE,IAJsB;AAKlCC,MAAAA,OAAO,EAAE,KALyB;AAMlCC,MAAAA,QAAQ,EAAE,KANwB;AAOlCG,MAAAA,YAAY,EAAE;AAPoB,KAA7B;AA1BQ,GAArB;AAoCA,SAAOX,KAAK,CAACa,MAAN,CAAaC,MAAb,CAAoB,CAACD,MAAD,EAAST,KAAT,KAAmB;AAC1CS,IAAAA,MAAM,CAACT,KAAK,CAACW,OAAP,CAAN,GAAwB,IAAIZ,kDAAJ,CAA6B;AACjDC,MAAAA,KAAK,EAAEA,KAAK,CAACW,OADoC;AAEjDV,MAAAA,IAAI,EAAG,UAASD,KAAK,CAACW,OAAQ,EAFmB;AAGjDrB,MAAAA,MAHiD;AAIjDY,MAAAA,UAAU,EAAE,IAJqC;AAKjDC,MAAAA,OAAO,EAAEX,UAAU,CAACQ,KAAK,CAACP,IAAP;AAL8B,KAA7B,CAAxB;AAQA,WAAOgB,MAAP;AACH,GAVM,EAUJZ,YAVI,CAAP;AAWH,CArDM","sourcesContent":["import { CmsContentModel } from \"@webiny/api-headless-cms/types\";\nimport { ElasticsearchFieldPlugin } from \"@webiny/api-elasticsearch/plugins/definition/ElasticsearchFieldPlugin\";\n\nconst entity = \"ContentElasticsearchEntry\";\nconst fieldsWithKeywords = [\"text\", \"long-text\", \"rich-text\", \"id\", \"ref\"];\n\nconst hasKeyword = (type: string): boolean => {\n    return fieldsWithKeywords.includes(type);\n};\n\nexport const createElasticsearchFields = (\n    model: CmsContentModel\n): Record<string, ElasticsearchFieldPlugin> => {\n    /**\n     * We need to map entry system fields that have different paths, no keyword or not sortable.\n     */\n    const systemFields = {\n        createdBy: new ElasticsearchFieldPlugin({\n            field: \"createdBy\",\n            path: \"createdBy.id\",\n            entity,\n            searchable: true,\n            keyword: true,\n            sortable: false\n        }),\n        ownedBy: new ElasticsearchFieldPlugin({\n            field: \"ownedBy\",\n            path: \"ownedBy.id\",\n            entity,\n            searchable: true,\n            keyword: true,\n            sortable: false\n        }),\n        createdOn: new ElasticsearchFieldPlugin({\n            field: \"createdOn\",\n            path: \"createdOn\",\n            entity,\n            searchable: true,\n            keyword: false,\n            sortable: false,\n            unmappedType: \"date\"\n        }),\n        savedOn: new ElasticsearchFieldPlugin({\n            field: \"savedOn\",\n            path: \"savedOn\",\n            entity,\n            searchable: true,\n            keyword: false,\n            sortable: false,\n            unmappedType: \"date\"\n        })\n    };\n    return model.fields.reduce((fields, field) => {\n        fields[field.fieldId] = new ElasticsearchFieldPlugin({\n            field: field.fieldId,\n            path: `values.${field.fieldId}`,\n            entity,\n            searchable: true,\n            keyword: hasKeyword(field.type)\n        });\n\n        return fields;\n    }, systemFields);\n};\n"],"file":"fields.js"}