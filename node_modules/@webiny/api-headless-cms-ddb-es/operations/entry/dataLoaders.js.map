{"version":3,"sources":["../../../src/operations/entry/dataLoaders.ts"],"names":["batchLoadKeys","loadChunk","DataLoader","keys","keysChunks","promises","forEach","chunk","push","Promise","resolve","entriesChunks","all","reduce","current","items","concat","flattenResults","results","collection","getAllEntryRevisions","context","model","storageOperations","ids","id","entries","db","read","configurations","query","PK","getPartitionKey","SK","$beginsWith","getRevisionById","queries","partitionKey","sortKey","getSortKeyRevision","batch","Object","values","execute","then","map","result","filter","item","getPublishedRevisionByEntryId","getSortKeyPublished","getLatestRevisionByEntryId","getSortKeyLatest","dataLoaders","DataLoadersHandler","constructor","Map","_context","_storageOperations","loadMany","clearAllEntryRevisions","entry","clear","clearRevisionById","clearPublishedRevisionByEntryId","clearLatestRevisionByEntryId","getLoader","name","WebinyError","loaderKey","modelId","_loaders","has","set","get","loader","Array","isArray","acc","res","message","code","data","JSON","stringify","ex","clearAll"],"mappings":"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","sourcesContent":["import DataLoader from \"dataloader\";\nimport { CmsContentEntry, CmsContentModel, CmsContext } from \"@webiny/api-headless-cms/types\";\nimport WebinyError from \"@webiny/error\";\nimport CmsContentEntryDynamoElastic from \"./CmsContentEntryDynamoElastic\";\nimport lodashChunk from \"lodash.chunk\";\nimport configurations from \"../../configurations\";\n\n// Used in functions below. Ensures we are batch getting 100 keys at most.\nconst batchLoadKeys = loadChunk => {\n    return new DataLoader<string, CmsContentEntry>(async keys => {\n        // DynamoDB allows getting a maximum of 100 items in a single database call.\n        // So, we are creating chunks that consist of a maximum of 100 keys.\n        const keysChunks = lodashChunk(keys, 100);\n        const promises = [];\n\n        keysChunks.forEach(chunk => {\n            promises.push(new Promise(resolve => resolve(loadChunk(chunk))));\n        });\n\n        const entriesChunks = await Promise.all(promises);\n        return entriesChunks.reduce((current, items) => current.concat(items), []);\n    });\n};\n\nconst flattenResults = (results: any[]): any[] => {\n    return results.reduce((collection, items) => {\n        collection.push(...items);\n        return collection;\n    }, []);\n};\n\nconst getAllEntryRevisions = (\n    context: CmsContext,\n    model: CmsContentModel,\n    storageOperations: CmsContentEntryDynamoElastic\n) => {\n    return new DataLoader<string, CmsContentEntry[]>(async ids => {\n        const results = [];\n\n        for (const id of ids) {\n            const [entries] = await context.db.read({\n                ...configurations.db(),\n                query: {\n                    PK: storageOperations.getPartitionKey(id),\n                    SK: { $beginsWith: \"REV#\" }\n                }\n            });\n\n            results.push(entries);\n        }\n\n        return results;\n    });\n};\n\nconst getRevisionById = (\n    context: CmsContext,\n    model: CmsContentModel,\n    storageOperations: CmsContentEntryDynamoElastic\n) => {\n    return batchLoadKeys(keys => {\n        const queries = keys.reduce((collection, id) => {\n            const partitionKey = storageOperations.getPartitionKey(id);\n            const sortKey = storageOperations.getSortKeyRevision(id);\n            const keys = `${partitionKey}__${sortKey}`;\n            if (collection[keys]) {\n                return collection;\n            }\n            collection[keys] = {\n                ...configurations.db(),\n                query: {\n                    PK: storageOperations.getPartitionKey(id),\n                    SK: storageOperations.getSortKeyRevision(id)\n                }\n            };\n\n            return collection;\n        }, {});\n\n        return context.db\n            .batch()\n            .read(...Object.values(queries))\n            .execute()\n            .then(results => results.map(result => result[0]))\n            .then(results => {\n                const items = flattenResults(results);\n                return keys.map(id => {\n                    return items.filter(item => {\n                        const partitionKey = storageOperations.getPartitionKey(id);\n                        const sortKey = storageOperations.getSortKeyRevision(id);\n                        return item.PK === partitionKey && item.SK === sortKey;\n                    });\n                }) as any;\n            });\n    });\n};\n\nconst getPublishedRevisionByEntryId = (\n    context: CmsContext,\n    model: CmsContentModel,\n    storageOperations: CmsContentEntryDynamoElastic\n) => {\n    return batchLoadKeys(keys => {\n        const sortKey = storageOperations.getSortKeyPublished();\n        const queries = keys.reduce((collection, id) => {\n            const partitionKey = storageOperations.getPartitionKey(id);\n            if (collection[partitionKey]) {\n                return collection;\n            }\n            collection[partitionKey] = {\n                ...configurations.db(),\n                query: {\n                    PK: partitionKey,\n                    SK: sortKey\n                }\n            };\n            return collection;\n        }, {});\n\n        return context.db\n            .batch()\n            .read(...Object.values(queries))\n            .execute()\n            .then(results => results.map(result => result[0]))\n            .then(results => {\n                const items = flattenResults(results);\n                return keys.map(id => {\n                    return items.filter(item => {\n                        const partitionKey = storageOperations.getPartitionKey(id);\n                        return item.PK === partitionKey && item.SK === sortKey;\n                    });\n                }) as any;\n            });\n    });\n};\n\nconst getLatestRevisionByEntryId = (\n    context: CmsContext,\n    model: CmsContentModel,\n    storageOperations: CmsContentEntryDynamoElastic\n) => {\n    return batchLoadKeys(keys => {\n        const sortKey = storageOperations.getSortKeyLatest();\n        const queries = keys.reduce((collection, id) => {\n            const partitionKey = storageOperations.getPartitionKey(id);\n            if (collection[partitionKey]) {\n                return collection;\n            }\n            collection[partitionKey] = {\n                ...configurations.db(),\n                query: {\n                    PK: storageOperations.getPartitionKey(id),\n                    SK: sortKey\n                }\n            };\n            return collection;\n        }, {});\n\n        return context.db\n            .batch()\n            .read(...Object.values(queries))\n            .execute()\n            .then(results => results.map(result => result[0]))\n            .then(results => {\n                const items = flattenResults(results);\n                return keys.map(id => {\n                    return items.filter(item => {\n                        const partitionKey = storageOperations.getPartitionKey(id);\n                        return item.PK === partitionKey && item.SK === sortKey;\n                    });\n                }) as any;\n            });\n    });\n};\n\nconst dataLoaders = {\n    getAllEntryRevisions,\n    getRevisionById,\n    getPublishedRevisionByEntryId,\n    getLatestRevisionByEntryId\n};\n\nexport class DataLoadersHandler {\n    private readonly _loaders: Map<string, DataLoader<any, any>> = new Map();\n    private readonly _context: CmsContext;\n    private readonly _storageOperations: CmsContentEntryDynamoElastic;\n\n    public constructor(context: CmsContext, storageOperations: CmsContentEntryDynamoElastic) {\n        this._context = context;\n        this._storageOperations = storageOperations;\n    }\n\n    public async getAllEntryRevisions(\n        model: CmsContentModel,\n        ids: readonly string[]\n    ): Promise<CmsContentEntry[]> {\n        return await this.loadMany(\"getAllEntryRevisions\", model, ids);\n    }\n\n    public clearAllEntryRevisions(model: CmsContentModel, entry?: CmsContentEntry): void {\n        this.clear(\"getAllEntryRevisions\", model, entry);\n    }\n\n    public async getRevisionById(\n        model: CmsContentModel,\n        ids: readonly string[]\n    ): Promise<CmsContentEntry[]> {\n        return await this.loadMany(\"getRevisionById\", model, ids);\n    }\n\n    public clearRevisionById(model: CmsContentModel, entry?: CmsContentEntry): void {\n        this.clear(\"getRevisionById\", model, entry);\n    }\n\n    public async getPublishedRevisionByEntryId(\n        model: CmsContentModel,\n        ids: readonly string[]\n    ): Promise<CmsContentEntry[]> {\n        return await this.loadMany(\"getPublishedRevisionByEntryId\", model, ids);\n    }\n    public clearPublishedRevisionByEntryId(model: CmsContentModel, entry?: CmsContentEntry): void {\n        this.clear(\"getPublishedRevisionByEntryId\", model, entry);\n    }\n\n    public async getLatestRevisionByEntryId(\n        model: CmsContentModel,\n        ids: readonly string[]\n    ): Promise<CmsContentEntry[]> {\n        return await this.loadMany(\"getLatestRevisionByEntryId\", model, ids);\n    }\n\n    public clearLatestRevisionByEntryId(model: CmsContentModel, entry?: CmsContentEntry): void {\n        this.clear(\"getLatestRevisionByEntryId\", model, entry);\n    }\n\n    private getLoader(name: string, model: CmsContentModel): DataLoader<any, any> {\n        if (!dataLoaders[name]) {\n            throw new WebinyError(\"Unknown data loader.\", \"UNKNOWN_DATA_LOADER\", {\n                name\n            });\n        }\n        const loaderKey = `${name}-${model.modelId}`;\n        if (!this._loaders.has(loaderKey)) {\n            this._loaders.set(\n                loaderKey,\n                dataLoaders[name](this._context, model, this._storageOperations)\n            );\n        }\n        return this._loaders.get(loaderKey);\n    }\n\n    private async loadMany(\n        loader: string,\n        model: CmsContentModel,\n        ids: readonly string[]\n    ): Promise<CmsContentEntry[]> {\n        let results;\n        try {\n            results = await this.getLoader(loader, model).loadMany(ids);\n            if (Array.isArray(results) === true) {\n                return results.reduce((acc, res) => {\n                    if (Array.isArray(res) === false) {\n                        if (res?.message) {\n                            throw new WebinyError(res.message, res.code, {\n                                ...res,\n                                data: JSON.stringify(res.data || {})\n                            });\n                        }\n                        throw new WebinyError(\n                            \"Result from the data loader must be an array of arrays which contain requested items.\"\n                        );\n                    }\n                    acc.push(...res);\n                    return acc;\n                }, []);\n            }\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Data loader error.\",\n                ex.code || \"DATA_LOADER_ERROR\",\n                {\n                    loader,\n                    ids,\n                    model\n                }\n            );\n        }\n        throw new WebinyError(\n            `Data loader did not return array of items or empty array.`,\n            \"INVALID_DATA_LOADER_RESULT\",\n            {\n                loader,\n                ids,\n                results\n            }\n        );\n    }\n    /**\n     * Helper to clear the cache for certain data loader.\n     * If entry is passed then clear target key only.\n     */\n    private clear(name: string, model: CmsContentModel, entry?: CmsContentEntry): void {\n        const loader = this.getLoader(name, model);\n        if (!entry) {\n            loader.clearAll();\n            return;\n        }\n        loader.clear(entry.id);\n        loader.clear(this._storageOperations.getPartitionKey(entry.id));\n    }\n}\n"],"file":"dataLoaders.js"}