{"version":3,"sources":["../../../src/operations/entry/CmsContentEntryDynamoElastic.ts"],"names":["TYPE_ENTRY","TYPE_ENTRY_LATEST","TYPE_ENTRY_PUBLISHED","getEntryData","context","entry","TYPE","__type","getESLatestEntryData","latest","getESPublishedEntryData","published","CmsContentEntryDynamoElastic","esClient","_esClient","ctx","elasticsearch","WebinyError","partitionKey","constructor","_dataLoaders","DataLoadersHandler","create","model","args","db","storageEntry","esEntry","index","esIndex","configurations","es","esLatestData","batch","data","PK","getPartitionKey","id","SK","getSortKeyRevision","version","getSortKeyLatest","esDb","execute","ex","message","code","error","createRevisionFrom","originalEntry","primaryKey","update","query","delete","dbItems","read","$gte","esDbItems","Promise","all","items","map","item","deleteRevision","entryToDelete","entryToSetAsLatest","storageEntryToSetAsLatest","esConfig","publishedStorageEntry","getPublishedRevisionByEntryId","getSortKeyPublished","get","list","limit","length","shift","body","parentPath","response","search","hits","total","entries","_source","hasMoreItems","pop","cursor","sort","totalCount","value","latestStorageEntry","getLatestRevisionByEntryId","esDoc","savedOn","clearAllEntryRevisions","publish","readBatch","latestESEntryData","publishedESEntryData","previouslyPublishedStorageEntry","status","CONTENT_ENTRY_STATUS","UNPUBLISHED","latestEsEntryDataDecompressed","PUBLISHED","locked","publishedOn","preparedEntryData","esData","unpublish","requestChanges","requestReview","getAllRevisionsByIds","ids","getAllEntryRevisions","getByIds","getRevisionById","getPublishedByIds","getLatestByIds","getRevisions","getSingleDynamoDbItem","entryId","getPreviousRevision","$lt","includes","split"],"mappings":"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","sourcesContent":["import WebinyError from \"@webiny/error\";\nimport lodashCloneDeep from \"lodash.clonedeep\";\nimport lodashOmit from \"lodash.omit\";\nimport { DataLoadersHandler } from \"./dataLoaders\";\nimport {\n    CmsContentEntry,\n    CmsContentEntryStorageOperations,\n    CmsContentEntryStorageOperationsCreateArgs,\n    CmsContentEntryStorageOperationsCreateRevisionFromArgs,\n    CmsContentEntryStorageOperationsDeleteArgs,\n    CmsContentEntryStorageOperationsDeleteRevisionArgs,\n    CmsContentEntryStorageOperationsGetArgs,\n    CmsContentEntryStorageOperationsListArgs,\n    CmsContentEntryStorageOperationsListResponse,\n    CmsContentEntryStorageOperationsPublishArgs,\n    CmsContentEntryStorageOperationsRequestChangesArgs,\n    CmsContentEntryStorageOperationsRequestReviewArgs,\n    CmsContentEntryStorageOperationsUnpublishArgs,\n    CmsContentEntryStorageOperationsUpdateArgs,\n    CmsContentModel,\n    CmsContext,\n    CONTENT_ENTRY_STATUS\n} from \"@webiny/api-headless-cms/types\";\nimport configurations from \"../../configurations\";\nimport { zeroPad } from \"@webiny/api-headless-cms/utils\";\nimport {\n    createElasticsearchQueryBody,\n    extractEntriesFromIndex,\n    prepareEntryToIndex\n} from \"../../helpers\";\nimport { createBasePartitionKey, paginateBatch } from \"~/utils\";\nimport { Client } from \"@elastic/elasticsearch\";\nimport { ElasticsearchContext } from \"@webiny/api-elasticsearch/types\";\nimport { createLimit } from \"@webiny/api-elasticsearch/limit\";\nimport { encodeCursor } from \"@webiny/api-elasticsearch/cursors\";\nimport { compress, decompress } from \"@webiny/api-elasticsearch/compression\";\n\nexport const TYPE_ENTRY = \"cms.entry\";\nexport const TYPE_ENTRY_LATEST = TYPE_ENTRY + \".l\";\nexport const TYPE_ENTRY_PUBLISHED = TYPE_ENTRY + \".p\";\n\nconst getEntryData = (context: CmsContext, entry: CmsContentEntry) => {\n    return {\n        ...lodashOmit(entry, [\"PK\", \"SK\", \"published\", \"latest\"]),\n        TYPE: TYPE_ENTRY,\n        __type: TYPE_ENTRY\n    };\n};\n\nconst getESLatestEntryData = async (context: CmsContext, entry: CmsContentEntry) => {\n    return compress(context, {\n        ...getEntryData(context, entry),\n        latest: true,\n        TYPE: TYPE_ENTRY_LATEST,\n        __type: TYPE_ENTRY_LATEST\n    });\n};\n\nconst getESPublishedEntryData = async (context: CmsContext, entry: CmsContentEntry) => {\n    return compress(context, {\n        ...getEntryData(context, entry),\n        published: true,\n        TYPE: TYPE_ENTRY_PUBLISHED,\n        __type: TYPE_ENTRY_PUBLISHED\n    });\n};\n\ninterface ElasticsearchTableItem {\n    PK: string;\n    SK: string;\n    index: string;\n    data: any;\n}\n\ninterface ConstructorArgs {\n    context: CmsContext;\n}\n\n/**\n * This implementation is not a general driver to fetch from DDB/Elastic.\n * Use some other implementation for general-use purpose.\n */\nexport default class CmsContentEntryDynamoElastic implements CmsContentEntryStorageOperations {\n    private readonly context: CmsContext;\n    private readonly _dataLoaders: DataLoadersHandler;\n    private _esClient: Client;\n\n    private get esClient(): Client {\n        if (this._esClient) {\n            return this._esClient;\n        }\n        const ctx = this.context as Partial<ElasticsearchContext>;\n        if (!ctx.elasticsearch) {\n            throw new WebinyError(\"Missing Elasticsearch client on the context\");\n        }\n        this._esClient = ctx.elasticsearch as Client;\n        return this._esClient;\n    }\n\n    private get partitionKey(): string {\n        return `${createBasePartitionKey(this.context)}#CME`;\n    }\n\n    public constructor({ context }: ConstructorArgs) {\n        this.context = context;\n        this._dataLoaders = new DataLoadersHandler(context, this);\n    }\n\n    public async create(\n        model: CmsContentModel,\n        args: CmsContentEntryStorageOperationsCreateArgs\n    ): Promise<CmsContentEntry> {\n        const { db } = this.context;\n\n        const { entry, storageEntry } = args;\n\n        // const storageEntry = await entryToStorageTransform(this.context, model, data);\n\n        const esEntry = prepareEntryToIndex({\n            context: this.context,\n            model,\n            storageEntry: lodashCloneDeep(storageEntry)\n        });\n\n        const { index: esIndex } = configurations.es(this.context, model);\n\n        const esLatestData = await getESLatestEntryData(this.context, esEntry);\n        const batch = db\n            .batch()\n            /**\n             * Create main entry item\n             */\n            .create({\n                ...configurations.db(),\n                data: {\n                    PK: this.getPartitionKey(entry.id),\n                    SK: this.getSortKeyRevision(entry.version),\n                    TYPE: TYPE_ENTRY,\n                    ...storageEntry\n                }\n            })\n            /**\n             * Create \"latest\" entry item\n             */\n            .create({\n                ...configurations.db(),\n                data: {\n                    PK: this.getPartitionKey(entry.id),\n                    SK: this.getSortKeyLatest(),\n                    TYPE: TYPE_ENTRY_LATEST,\n                    ...storageEntry\n                }\n            })\n            .create({\n                ...configurations.esDb(),\n                data: {\n                    PK: this.getPartitionKey(entry.id),\n                    SK: this.getSortKeyLatest(),\n                    index: esIndex,\n                    data: esLatestData\n                }\n            });\n\n        try {\n            await batch.execute();\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not insert data into the DynamoDB\",\n                ex.code || \"CREATE_ENTRY_ERROR\",\n                {\n                    error: ex,\n                    entry,\n                    storageEntry,\n                    esEntry\n                }\n            );\n        }\n\n        return storageEntry;\n    }\n\n    public async createRevisionFrom(\n        model: CmsContentModel,\n        args: CmsContentEntryStorageOperationsCreateRevisionFromArgs\n    ) {\n        const { db } = this.context;\n\n        const { originalEntry, entry, storageEntry } = args;\n\n        const esEntry = prepareEntryToIndex({\n            context: this.context,\n            model,\n            storageEntry: lodashCloneDeep(storageEntry)\n        });\n        const { index: esIndex } = configurations.es(this.context, model);\n\n        const primaryKey = this.getPartitionKey(storageEntry.id);\n        const batch = db.batch();\n\n        const esLatestData = await getESLatestEntryData(this.context, esEntry);\n        batch\n            /**\n             * Create main entry item\n             */\n            .create({\n                ...configurations.db(),\n                data: {\n                    PK: primaryKey,\n                    SK: this.getSortKeyRevision(storageEntry.version),\n                    TYPE: TYPE_ENTRY,\n                    ...getEntryData(this.context, storageEntry)\n                }\n            })\n            /**\n             * Update \"latest\" entry item\n             */\n            .update({\n                ...configurations.db(),\n                query: {\n                    PK: primaryKey,\n                    SK: this.getSortKeyLatest()\n                },\n                data: {\n                    PK: primaryKey,\n                    SK: this.getSortKeyLatest(),\n                    TYPE: TYPE_ENTRY_LATEST,\n                    ...getEntryData(this.context, storageEntry)\n                }\n            })\n            /**\n             * Update the \"latest\" entry item in the Elasticsearch\n             */\n            .update({\n                ...configurations.esDb(),\n                query: {\n                    PK: primaryKey,\n                    SK: this.getSortKeyLatest()\n                },\n                data: {\n                    PK: primaryKey,\n                    SK: this.getSortKeyLatest(),\n                    index: esIndex,\n                    data: esLatestData\n                }\n            });\n        try {\n            await batch.execute();\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not create revision from given entry.\",\n                ex.code || \"CREATE_REVISION_ERROR\",\n                {\n                    error: ex,\n                    originalEntry,\n                    entry,\n                    storageEntry,\n                    esEntry\n                }\n            );\n        }\n        /**\n         * There are no modifications on the entry created so just return the data.\n         */\n        return storageEntry;\n    }\n\n    public async delete(\n        model: CmsContentModel,\n        args: CmsContentEntryStorageOperationsDeleteArgs\n    ): Promise<void> {\n        const { db } = this.context;\n        const { entry } = args;\n\n        const primaryKey = this.getPartitionKey(entry.id);\n\n        const [dbItems] = await db.read<CmsContentEntry>({\n            ...configurations.db(),\n            query: {\n                PK: primaryKey,\n                SK: { $gte: \" \" }\n            }\n        });\n        /**\n         * Load ES entries to delete\n         */\n        const [esDbItems] = await db.read<CmsContentEntry>({\n            ...configurations.esDb(),\n            query: {\n                PK: primaryKey,\n                SK: { $gte: \" \" }\n            }\n        });\n\n        /**\n         * Delete all items from DB and ES DB\n         */\n        await Promise.all([\n            paginateBatch(dbItems, 25, async items => {\n                await db\n                    .batch()\n                    .delete(\n                        ...items.map((item: any) => ({\n                            ...configurations.db(),\n                            query: {\n                                PK: item.PK,\n                                SK: item.SK\n                            }\n                        }))\n                    )\n                    .execute();\n            }),\n            paginateBatch(esDbItems, 25, async items => {\n                await db\n                    .batch()\n                    .delete(\n                        ...items.map((item: any) => ({\n                            ...configurations.esDb(),\n                            query: {\n                                PK: item.PK,\n                                SK: item.SK\n                            }\n                        }))\n                    )\n                    .execute();\n            })\n        ]);\n    }\n\n    public async deleteRevision(\n        model: CmsContentModel,\n        args: CmsContentEntryStorageOperationsDeleteRevisionArgs\n    ): Promise<void> {\n        const { db } = this.context;\n        const { entryToDelete, entryToSetAsLatest, storageEntryToSetAsLatest } = args;\n\n        const primaryKey = this.getPartitionKey(entryToDelete.id);\n        const esConfig = configurations.es(this.context, model);\n        /**\n         * We need published entry to delete it if necessary.\n         */\n        const publishedStorageEntry = await this.getPublishedRevisionByEntryId(\n            model,\n            entryToDelete.id\n        );\n        /**\n         * We need to delete all existing records of the given entry revision.\n         */\n        const batch = db.batch();\n        /**\n         * Delete records of given entry revision.\n         */\n        batch\n            .delete({\n                ...configurations.db(),\n                query: {\n                    PK: primaryKey,\n                    SK: this.getSortKeyRevision(entryToDelete.id)\n                }\n            })\n            .delete({\n                ...configurations.esDb(),\n                query: {\n                    PK: primaryKey,\n                    SK: this.getSortKeyRevision(entryToDelete.id)\n                }\n            });\n        /**\n         * If revision we are deleting is the published one as well, we need to delete those records as well.\n         */\n        if (publishedStorageEntry && entryToDelete.id === publishedStorageEntry.id) {\n            batch\n                .delete({\n                    ...configurations.db(),\n                    query: {\n                        PK: primaryKey,\n                        SK: this.getSortKeyPublished()\n                    }\n                })\n                .delete({\n                    ...configurations.esDb(),\n                    query: {\n                        PK: primaryKey,\n                        SK: this.getSortKeyPublished()\n                    }\n                });\n        }\n        if (entryToSetAsLatest) {\n            const esEntry = prepareEntryToIndex({\n                context: this.context,\n                model,\n                storageEntry: lodashCloneDeep(storageEntryToSetAsLatest)\n            });\n\n            const esLatestData = await getESLatestEntryData(this.context, esEntry);\n            /**\n             * In the end we need to set the new latest entry\n             */\n            batch\n                .update({\n                    ...configurations.db(),\n                    query: {\n                        PK: primaryKey,\n                        SK: this.getSortKeyLatest()\n                    },\n                    data: {\n                        ...storageEntryToSetAsLatest,\n                        TYPE: TYPE_ENTRY_LATEST\n                    }\n                })\n                .update({\n                    ...configurations.esDb(),\n                    query: {\n                        PK: primaryKey,\n                        SK: this.getSortKeyLatest()\n                    },\n                    data: {\n                        PK: primaryKey,\n                        SK: this.getSortKeyLatest(),\n                        index: esConfig.index,\n                        data: esLatestData\n                    }\n                });\n        }\n        try {\n            await batch.execute();\n        } catch (ex) {\n            throw new WebinyError(ex.message, ex.code, {\n                error: ex,\n                entryToDelete,\n                entryToSetAsLatest,\n                storageEntryToSetAsLatest\n            });\n        }\n    }\n\n    public async get(\n        model: CmsContentModel,\n        args: CmsContentEntryStorageOperationsGetArgs\n    ): Promise<CmsContentEntry | null> {\n        const { items } = await this.list(model, {\n            ...(args || {}),\n            limit: 1\n        });\n        if (items.length === 0) {\n            return null;\n        }\n        return items.shift();\n    }\n\n    /**\n     * Implemented search via the Elasticsearch.\n     */\n    public async list(\n        model: CmsContentModel,\n        args: CmsContentEntryStorageOperationsListArgs\n    ): Promise<CmsContentEntryStorageOperationsListResponse> {\n        const limit = createLimit(args.limit, 50);\n        const body = createElasticsearchQueryBody({\n            model,\n            args: {\n                ...(args || {}),\n                limit\n            },\n            context: this.context,\n            parentPath: \"values\"\n        });\n\n        let response;\n        const esConfig = configurations.es(this.context, model);\n        try {\n            response = await this.esClient.search({\n                ...esConfig,\n                body\n            });\n        } catch (ex) {\n            throw new WebinyError(ex.message, ex.code || \"ELASTICSEARCH_ERROR\", {\n                error: ex,\n                esConfig,\n                body\n            });\n        }\n\n        const { hits, total } = response.body.hits;\n        const items = extractEntriesFromIndex({\n            context: this.context,\n            model,\n            entries: hits.map(item => item._source)\n        });\n\n        const hasMoreItems = items.length > limit;\n        if (hasMoreItems) {\n            /**\n             * Remove the last item from results, we don't want to include it.\n             */\n            items.pop();\n        }\n        /**\n         * Cursor is the `sort` value of the last item in the array.\n         * https://www.elastic.co/guide/en/elasticsearch/reference/current/paginate-search-results.html#search-after\n         */\n        const cursor = items.length > 0 ? encodeCursor(hits[items.length - 1].sort) : null;\n        return {\n            hasMoreItems,\n            totalCount: total.value,\n            cursor,\n            items\n        };\n    }\n\n    public async update(\n        model: CmsContentModel,\n        args: CmsContentEntryStorageOperationsUpdateArgs\n    ): Promise<CmsContentEntry> {\n        const {\n            originalEntry,\n            entry,\n            storageEntry\n            // latestEntry\n        } = args;\n\n        const { db } = this.context;\n\n        const primaryKey = this.getPartitionKey(originalEntry.id);\n\n        /**\n         * We need the latest entry to check if it needs to be updated.\n         */\n        const latestStorageEntry = await this.getLatestRevisionByEntryId(model, originalEntry.id);\n\n        const batch = db.batch();\n\n        batch.update({\n            ...configurations.db(),\n            query: {\n                PK: primaryKey,\n                SK: this.getSortKeyRevision(originalEntry.version)\n            },\n            data: {\n                ...storageEntry,\n                SK: this.getSortKeyRevision(originalEntry.version)\n            }\n        });\n        /**\n         * If the latest entry is the one being updated, we need to create a new latest entry records.\n         */\n        if (latestStorageEntry.id === originalEntry.id) {\n            /**\n             * First we update the regular DynamoDB table\n             */\n            batch.update({\n                ...configurations.db(),\n                query: {\n                    PK: primaryKey,\n                    SK: this.getSortKeyLatest()\n                },\n                data: {\n                    ...storageEntry,\n                    TYPE: TYPE_ENTRY_LATEST,\n                    PK: primaryKey,\n                    SK: this.getSortKeyLatest()\n                }\n            });\n            /**\n             * And then update the Elasticsearch table to propagate changes to the Elasticsearch\n             */\n            const esEntry = prepareEntryToIndex({\n                context: this.context,\n                model,\n                storageEntry: lodashCloneDeep(storageEntry)\n            });\n            const esDoc = {\n                ...esEntry,\n                savedOn: storageEntry.savedOn\n            };\n\n            const { index: esIndex } = configurations.es(this.context, model);\n\n            const esLatestData = await getESLatestEntryData(this.context, esDoc);\n            batch.update({\n                ...configurations.esDb(),\n                query: {\n                    PK: primaryKey,\n                    SK: this.getSortKeyLatest()\n                },\n                data: {\n                    PK: primaryKey,\n                    SK: this.getSortKeyLatest(),\n                    index: esIndex,\n                    data: esLatestData\n                }\n            });\n        }\n        try {\n            await batch.execute();\n            this._dataLoaders.clearAllEntryRevisions(model);\n            return storageEntry;\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not update entry.\",\n                ex.code || \"UPDATE_ERROR\",\n                {\n                    error: ex,\n                    originalEntry,\n                    entry,\n                    storageEntry,\n                    latestStorageEntry\n                }\n            );\n        }\n    }\n\n    public async publish(\n        model: CmsContentModel,\n        args: CmsContentEntryStorageOperationsPublishArgs\n    ): Promise<CmsContentEntry> {\n        const { db } = this.context;\n        const {\n            entry,\n            storageEntry\n            // latestEntry,\n            // publishedEntry\n        } = args;\n\n        /**\n         * We need currently published entry to check if need to remove it.\n         */\n        const publishedStorageEntry = await this.getPublishedRevisionByEntryId(model, entry.id);\n\n        const primaryKey = this.getPartitionKey(entry.id);\n\n        const readBatch = db\n            .batch()\n            .read({\n                ...configurations.esDb(),\n                query: {\n                    PK: primaryKey,\n                    SK: this.getSortKeyLatest()\n                }\n            })\n            .read({\n                ...configurations.esDb(),\n                query: {\n                    PK: primaryKey,\n                    SK: this.getSortKeyPublished()\n                }\n            });\n        let latestESEntryData: ElasticsearchTableItem | undefined;\n        let publishedESEntryData: ElasticsearchTableItem | undefined;\n        try {\n            [[[latestESEntryData]], [[publishedESEntryData]]] = await readBatch.execute();\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not read Elasticsearch latest or published data.\",\n                ex.code || \"PUBLISH_BATCH_READ\",\n                {\n                    latest: {\n                        PK: primaryKey,\n                        SK: this.getSortKeyLatest()\n                    },\n                    published: {\n                        PK: primaryKey,\n                        SK: this.getSortKeyPublished()\n                    }\n                }\n            );\n        }\n\n        const batch = db.batch();\n\n        batch.update({\n            ...configurations.db(),\n            query: {\n                PK: primaryKey,\n                SK: this.getSortKeyRevision(entry.version)\n            },\n            data: {\n                ...storageEntry,\n                SK: this.getSortKeyRevision(entry.version)\n            }\n        });\n\n        const es = configurations.es(this.context, model);\n\n        if (publishedStorageEntry) {\n            /**\n             * If there is a `published` entry already, we need to set it to `unpublished`. We need to\n             * execute two updates: update the previously published entry's status and the published entry record.\n             * DynamoDB does not support `batchUpdate` - so here we load the previously published\n             * entry's data to update its status within a batch operation. If, hopefully,\n             * they introduce a true update batch operation, remove this `read` call.\n             */\n            const [[previouslyPublishedStorageEntry]] = await db.read<CmsContentEntry>({\n                ...configurations.db(),\n                query: {\n                    PK: primaryKey,\n                    SK: this.getSortKeyRevision(publishedStorageEntry.version)\n                }\n            });\n\n            previouslyPublishedStorageEntry.status = CONTENT_ENTRY_STATUS.UNPUBLISHED;\n\n            batch\n                .update({\n                    /**\n                     * Update currently published entry (unpublish it)\n                     */\n                    ...configurations.db(),\n                    query: {\n                        PK: primaryKey,\n                        SK: this.getSortKeyRevision(publishedStorageEntry.version)\n                    },\n                    data: {\n                        ...previouslyPublishedStorageEntry,\n                        SK: this.getSortKeyRevision(publishedStorageEntry.version),\n                        savedOn: entry.savedOn\n                    }\n                })\n                .update({\n                    /**\n                     * Update the helper item in DB with the new published entry ID\n                     */\n                    ...configurations.db(),\n                    query: {\n                        PK: primaryKey,\n                        SK: this.getSortKeyPublished()\n                    },\n                    data: {\n                        ...getEntryData(this.context, storageEntry),\n                        PK: primaryKey,\n                        SK: this.getSortKeyPublished()\n                    }\n                });\n        } else {\n            batch.create({\n                ...configurations.db(),\n                data: {\n                    ...getEntryData(this.context, storageEntry),\n                    PK: primaryKey,\n                    SK: this.getSortKeyPublished(),\n                    TYPE: TYPE_ENTRY_PUBLISHED\n                }\n            });\n        }\n\n        /**\n         * We need the latest entry to check if it neds to be updated as well in the Elasticsearch.\n         */\n        const latestStorageEntry = await this.getLatestRevisionByEntryId(model, entry.id);\n\n        /**\n         * If we are publishing the latest revision, let's also update the latest revision's status in ES.\n         */\n        if (latestStorageEntry && latestStorageEntry.id === entry.id) {\n            /**\n             * Need to decompress the data from Elasticsearch DynamoDB table.\n             */\n            const latestEsEntryDataDecompressed = await decompress(\n                this.context,\n                latestESEntryData.data\n            );\n            batch.update({\n                ...configurations.esDb(),\n                query: {\n                    PK: primaryKey,\n                    SK: this.getSortKeyLatest()\n                },\n                data: {\n                    ...latestESEntryData,\n                    SK: this.getSortKeyLatest(),\n                    data: {\n                        ...latestEsEntryDataDecompressed,\n                        status: CONTENT_ENTRY_STATUS.PUBLISHED,\n                        locked: true,\n                        savedOn: entry.savedOn,\n                        publishedOn: entry.publishedOn\n                    }\n                }\n            });\n        }\n\n        const preparedEntryData = prepareEntryToIndex({\n            context: this.context,\n            model,\n            storageEntry: lodashCloneDeep(storageEntry)\n        });\n        /**\n         * Update the published revision entry in ES.\n         */\n        const esLatestData = await getESPublishedEntryData(this.context, preparedEntryData);\n        const esData = {\n            PK: primaryKey,\n            SK: this.getSortKeyPublished(),\n            index: es.index,\n            data: esLatestData\n        };\n\n        if (publishedESEntryData) {\n            batch.update({\n                ...configurations.esDb(),\n                query: {\n                    PK: primaryKey,\n                    SK: this.getSortKeyPublished()\n                },\n                data: esData\n            });\n        } else {\n            batch.create({\n                ...configurations.esDb(),\n                data: esData\n            });\n        }\n\n        /**\n         * Finally, execute batch\n         */\n        try {\n            await batch.execute();\n            this._dataLoaders.clearAllEntryRevisions(model, entry);\n            return entry;\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not execute the publishing batch.\",\n                ex.code || \"PUBLISH_ERROR\",\n                {\n                    entry,\n                    esData,\n                    latestStorageEntry,\n                    publishedStorageEntry\n                }\n            );\n        }\n    }\n\n    public async unpublish(\n        model: CmsContentModel,\n        args: CmsContentEntryStorageOperationsUnpublishArgs\n    ): Promise<CmsContentEntry> {\n        const { db } = this.context;\n        const { entry, storageEntry } = args;\n\n        /**\n         * We need the latest entry to check if it needs to be updated.\n         */\n        const latestStorageEntry = await this.getLatestRevisionByEntryId(model, entry.id);\n\n        const primaryKey = this.getPartitionKey(entry.id);\n\n        const batch = db\n            .batch()\n            .delete({\n                ...configurations.db(),\n                query: {\n                    PK: primaryKey,\n                    SK: this.getSortKeyPublished()\n                }\n            })\n            .delete({\n                ...configurations.esDb(),\n                query: {\n                    PK: primaryKey,\n                    SK: this.getSortKeyPublished()\n                }\n            })\n            .update({\n                ...configurations.db(),\n                query: {\n                    PK: primaryKey,\n                    SK: this.getSortKeyRevision(entry.version)\n                },\n                data: {\n                    ...storageEntry,\n                    SK: this.getSortKeyRevision(entry.version)\n                }\n            });\n        /**\n         * If we are unpublishing the latest revision, let's also update the latest revision entry's status in ES.\n         */\n        if (latestStorageEntry.id === entry.id) {\n            const es = configurations.es(this.context, model);\n\n            const preparedEntryData = prepareEntryToIndex({\n                context: this.context,\n                model,\n                storageEntry: lodashCloneDeep(storageEntry)\n            });\n\n            const esLatestData = await getESLatestEntryData(this.context, preparedEntryData);\n            batch.update({\n                ...configurations.esDb(),\n                query: {\n                    PK: primaryKey,\n                    SK: this.getSortKeyLatest()\n                },\n                data: {\n                    PK: primaryKey,\n                    SK: this.getSortKeyLatest(),\n                    index: es.index,\n                    data: esLatestData\n                }\n            });\n        }\n\n        try {\n            await batch.execute();\n            return entry;\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not execute unpublish batch.\",\n                ex.code || \"UNPUBLISH_ERROR\",\n                {\n                    entry,\n                    latestStorageEntry\n                }\n            );\n        }\n    }\n\n    public async requestChanges(\n        model: CmsContentModel,\n        args: CmsContentEntryStorageOperationsRequestChangesArgs\n    ): Promise<CmsContentEntry> {\n        const { db } = this.context;\n        const { entry, storageEntry, originalEntry } = args;\n\n        /**\n         * We need the latest entry to check if it needs to be updated.\n         */\n        const latestStorageEntry = await this.getLatestRevisionByEntryId(model, entry.id);\n\n        const primaryKey = this.getPartitionKey(entry.id);\n\n        const batch = db.batch().update({\n            ...configurations.db(),\n            query: {\n                PK: primaryKey,\n                SK: this.getSortKeyRevision(entry.version)\n            },\n            data: {\n                ...storageEntry,\n                SK: this.getSortKeyRevision(entry.version)\n            }\n        });\n\n        /**\n         * If we updated the latest version, then make sure the changes are propagated to ES too.\n         */\n        if (latestStorageEntry.id === entry.id) {\n            const es = configurations.es(this.context, model);\n\n            const preparedEntryData = prepareEntryToIndex({\n                context: this.context,\n                model,\n                storageEntry: lodashCloneDeep(storageEntry)\n            });\n\n            const esLatestData = await getESLatestEntryData(this.context, preparedEntryData);\n            batch.update({\n                ...configurations.esDb(),\n                query: {\n                    PK: primaryKey,\n                    SK: this.getSortKeyLatest()\n                },\n                data: {\n                    PK: primaryKey,\n                    SK: this.getSortKeyLatest(),\n                    index: es.index,\n                    data: esLatestData\n                }\n            });\n        }\n\n        try {\n            await batch.execute();\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not execute the request changes batch.\",\n                ex.code || \"REQUEST_CHANGES_ERROR\",\n                {\n                    entry,\n                    originalEntry\n                }\n            );\n        }\n        return entry;\n    }\n\n    public async requestReview(\n        model: CmsContentModel,\n        args: CmsContentEntryStorageOperationsRequestReviewArgs\n    ): Promise<CmsContentEntry> {\n        const { db } = this.context;\n        const { entry, storageEntry, originalEntry } = args;\n\n        /**\n         * We need the latest entry to check if it needs to be updated.\n         */\n        const latestStorageEntry = await this.getLatestRevisionByEntryId(model, entry.id);\n\n        const primaryKey = this.getPartitionKey(entry.id);\n\n        const batch = db.batch().update({\n            ...configurations.db(),\n            query: {\n                PK: primaryKey,\n                SK: this.getSortKeyRevision(entry.version)\n            },\n            data: {\n                ...storageEntry,\n                SK: this.getSortKeyRevision(entry.version)\n            }\n        });\n\n        /**\n         * If we updated the latest version, then make sure the changes are propagated to ES too.\n         */\n        if (latestStorageEntry.id === entry.id) {\n            const es = configurations.es(this.context, model);\n\n            const preparedEntryData = prepareEntryToIndex({\n                context: this.context,\n                model,\n                storageEntry: lodashCloneDeep(storageEntry)\n            });\n\n            const esLatestData = await getESLatestEntryData(this.context, preparedEntryData);\n            batch.update({\n                ...configurations.esDb(),\n                query: {\n                    PK: primaryKey,\n                    SK: this.getSortKeyLatest()\n                },\n                data: {\n                    PK: primaryKey,\n                    SK: this.getSortKeyLatest(),\n                    index: es.index,\n                    data: esLatestData\n                }\n            });\n        }\n\n        try {\n            await batch.execute();\n            return entry;\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not execute request review batch.\",\n                ex.code || \"REQUEST_REVIEW_ERROR\",\n                {\n                    entry,\n                    latestStorageEntry,\n                    originalEntry\n                }\n            );\n        }\n    }\n\n    public async getAllRevisionsByIds(\n        model: CmsContentModel,\n        ids: readonly string[]\n    ): Promise<CmsContentEntry[]> {\n        if (ids.length === 0) {\n            return [];\n        }\n        try {\n            return await this._dataLoaders.getAllEntryRevisions(model, ids);\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not read multiple entries.\",\n                ex.code || \"GET_ALL_REVISIONS_BY_IDS_ERROR\",\n                {\n                    ids\n                }\n            );\n        }\n    }\n\n    public async getByIds(\n        model: CmsContentModel,\n        ids: readonly string[]\n    ): Promise<CmsContentEntry[]> {\n        if (ids.length === 0) {\n            return [];\n        }\n        try {\n            return await this._dataLoaders.getRevisionById(model, ids);\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not read multiple entries.\",\n                ex.code || \"GET_BY_IDS_ERROR\",\n                {\n                    ids\n                }\n            );\n        }\n    }\n\n    public async getPublishedByIds(\n        model: CmsContentModel,\n        ids: readonly string[]\n    ): Promise<CmsContentEntry[]> {\n        if (ids.length === 0) {\n            return [];\n        }\n        try {\n            return await this._dataLoaders.getPublishedRevisionByEntryId(model, ids);\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not read multiple entries.\",\n                ex.code || \"GET_BY_IDS_ERROR\",\n                {\n                    ids\n                }\n            );\n        }\n    }\n\n    public async getLatestByIds(\n        model: CmsContentModel,\n        ids: readonly string[]\n    ): Promise<CmsContentEntry[]> {\n        if (ids.length === 0) {\n            return [];\n        }\n        try {\n            return await this._dataLoaders.getLatestRevisionByEntryId(model, ids);\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not read multiple entries.\",\n                ex.code || \"GET_BY_IDS_ERROR\",\n                {\n                    ids\n                }\n            );\n        }\n    }\n\n    public async getRevisions(model: CmsContentModel, id: string): Promise<CmsContentEntry[]> {\n        try {\n            return await this._dataLoaders.getAllEntryRevisions(model, [id]);\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not read multiple entries.\",\n                ex.code || \"GET_ALL_REVISIONS_BY_IDS_ERROR\",\n                {\n                    id\n                }\n            );\n        }\n    }\n\n    public async getRevisionById(\n        model: CmsContentModel,\n        id: string\n    ): Promise<CmsContentEntry | null> {\n        return this.getSingleDynamoDbItem({\n            PK: this.getPartitionKey(id),\n            SK: this.getSortKeyRevision(id)\n        });\n    }\n\n    public async getPublishedRevisionByEntryId(\n        model: CmsContentModel,\n        entryId: string\n    ): Promise<CmsContentEntry | null> {\n        return this.getSingleDynamoDbItem({\n            PK: this.getPartitionKey(entryId),\n            SK: this.getSortKeyPublished()\n        });\n    }\n\n    public async getLatestRevisionByEntryId(\n        model: CmsContentModel,\n        entryId: string\n    ): Promise<CmsContentEntry | null> {\n        return this.getSingleDynamoDbItem({\n            PK: this.getPartitionKey(entryId),\n            SK: this.getSortKeyLatest()\n        });\n    }\n\n    public async getPreviousRevision(\n        model: CmsContentModel,\n        entryId: string,\n        version: number\n    ): Promise<CmsContentEntry | null> {\n        const entry = await this.getSingleDynamoDbItem(\n            {\n                PK: this.getPartitionKey(entryId),\n                SK: {\n                    $lt: this.getSortKeyRevision(version)\n                }\n            },\n            {\n                SK: -1\n            }\n        );\n        /**\n         * When there are no lower versions from the given one, it seems that random one is taken.\n         * So just make sure that fetched entry version is not greater or equal to requested one.\n         */\n        if (!entry || entry.version >= version) {\n            return null;\n        }\n        /**\n         * We need this due to possibly getting latest or published if given revision does not exist\n         */\n        if ((entry as any).TYPE !== TYPE_ENTRY) {\n            return null;\n        }\n        return entry;\n    }\n\n    private async getSingleDynamoDbItem(\n        query: { PK: string; SK: string | object },\n        sort?: { SK: -1 | 1 }\n    ): Promise<CmsContentEntry | null> {\n        const { db } = this.context;\n        let entry;\n        try {\n            const [entries] = await db.read<CmsContentEntry>({\n                ...configurations.db(),\n                query,\n                sort,\n                limit: 1\n            });\n            if (entries.length === 0) {\n                return null;\n            }\n            entry = entries.shift();\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not read from the DynamoDB.\",\n                ex.code || \"DDB_READ_ERROR\",\n                {\n                    query,\n                    sort\n                }\n            );\n        }\n        return entry;\n    }\n\n    public getPartitionKey(id: string): string {\n        /**\n         * If ID includes # it means it is composed of ID and VERSION.\n         * We need ID only so extract it.\n         */\n        if (id.includes(\"#\")) {\n            id = id.split(\"#\").shift();\n        }\n        return `${this.partitionKey}#${id}`;\n    }\n\n    /**\n     * Gets a sort key in form of REV#version from:\n     *   id#0003\n     *   0003\n     *   3\n     */\n    public getSortKeyRevision(version: string | number) {\n        if (typeof version === \"string\" && version.includes(\"#\") === true) {\n            version = version.split(\"#\").pop();\n        }\n        return `REV#${zeroPad(version)}`;\n    }\n\n    public getSortKeyLatest(): string {\n        return \"L\";\n    }\n\n    public getSortKeyPublished(): string {\n        return \"P\";\n    }\n}\n"],"file":"CmsContentEntryDynamoElastic.js"}