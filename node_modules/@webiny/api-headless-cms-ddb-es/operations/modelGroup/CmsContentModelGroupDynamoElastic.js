"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _error = _interopRequireDefault(require("@webiny/error"));

var _configurations = _interopRequireDefault(require("../../configurations"));

var _utils = require("../../utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const whereKeySuffix = ["_not", "_not_in", "_in", "_gt", "_gte", "_lt", "_lte", "_not_between", "_between"].join("|");

const removeWhereKeySuffix = key => {
  return key.replace(new RegExp(`${whereKeySuffix}$`), "");
};

const compare = (key, compareValue, value) => {
  if (key.endsWith("_not")) {
    return String(value) !== compareValue;
  } else if (key.endsWith("_not_in")) {
    return !compareValue.includes(value);
  } else if (key.endsWith("_in")) {
    return compareValue.includes(value);
  } else if (key.endsWith("_gt")) {
    return value > compareValue;
  } else if (key.endsWith("_gte")) {
    return value >= compareValue;
  } else if (key.endsWith("_lt")) {
    return value < compareValue;
  } else if (key.endsWith("_lte")) {
    return value <= compareValue;
  } else if (key.endsWith("_not_between")) {
    if (!Array.isArray(compareValue) || compareValue.length === 0) {
      throw new _error.default(`Wrong compareValue for "${key}".`);
    }

    return value < compareValue[0] && value > compareValue[1];
  } else if (key.endsWith("_between")) {
    if (!Array.isArray(compareValue) || compareValue.length === 0) {
      throw new _error.default(`Wrong compareValue for "${key}".`);
    }

    return value >= compareValue[0] && value <= compareValue[1];
  }

  return compareValue === value;
};

const whereFilterFactory = (where = {}) => {
  return model => {
    if (!where) {
      return true;
    }

    for (const key in where) {
      const whereValue = where[key];
      const value = model[removeWhereKeySuffix(key)];
      return compare(key, whereValue, value);
    }

    return true;
  };
};

class CmsContentModelGroupDynamoElastic {
  get context() {
    return this._context;
  }

  get partitionKey() {
    return `${(0, _utils.createBasePartitionKey)(this.context)}#CMG`;
  }

  constructor({
    context
  }) {
    (0, _defineProperty2.default)(this, "_context", void 0);
    this._context = context;
  }

  async create({
    data
  }) {
    const {
      db
    } = this.context;

    const dbData = _objectSpread(_objectSpread({
      PK: this.partitionKey,
      SK: data.id,
      TYPE: "cms.group"
    }, data), {}, {
      webinyVersion: this.context.WEBINY_VERSION
    });

    await db.create(_objectSpread(_objectSpread({}, _configurations.default.db()), {}, {
      data: dbData
    }));
    return dbData;
  }

  async delete({
    group
  }) {
    const {
      db
    } = this.context;
    const {
      id
    } = group;
    await db.delete(_objectSpread(_objectSpread({}, _configurations.default.db()), {}, {
      query: {
        PK: this.partitionKey,
        SK: id
      }
    }));
    return true;
  }

  async get({
    id
  }) {
    const {
      db
    } = this.context;
    const [[group]] = await db.read(_objectSpread(_objectSpread({}, _configurations.default.db()), {}, {
      query: {
        PK: this.partitionKey,
        SK: id
      }
    }));
    return group || null;
  }

  async list({
    where,
    limit
  }) {
    const {
      db
    } = this.context;
    const [groups] = await db.read(_objectSpread(_objectSpread({}, _configurations.default.db()), {}, {
      query: {
        PK: this.partitionKey,
        SK: {
          $gt: " "
        }
      }
    }));
    const whereKeys = Object.keys(where || {});

    if (whereKeys.length === 0) {
      return groups;
    }

    const filteredGroups = groups.filter(whereFilterFactory(where));
    return typeof limit !== "undefined" ? filteredGroups.slice(0, limit) : filteredGroups;
  }

  async update({
    group,
    data
  }) {
    const {
      db
    } = this.context;
    await db.update(_objectSpread(_objectSpread({}, _configurations.default.db()), {}, {
      query: {
        PK: this.partitionKey,
        SK: group.id
      },
      data: _objectSpread(_objectSpread({}, data), {}, {
        webinyVersion: this.context.WEBINY_VERSION
      })
    }));
    return _objectSpread(_objectSpread({}, group), data);
  }

}

exports.default = CmsContentModelGroupDynamoElastic;
//# sourceMappingURL=CmsContentModelGroupDynamoElastic.js.map