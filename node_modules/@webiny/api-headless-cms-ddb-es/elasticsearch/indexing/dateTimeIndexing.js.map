{"version":3,"sources":["../../../src/elasticsearch/indexing/dateTimeIndexing.ts"],"names":["convertTimeToNumber","time","hours","minutes","seconds","split","map","Number","convertNumberToTime","value","undefined","String","match","Math","floor","v","padStart","join","convertValueFromIndex","field","type","settings","dateValue","Date","toISOString","substr","convertValueToIndex","name","fieldType","unmappedType","toIndex","fromIndex"],"mappings":"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","sourcesContent":["import { CmsContentModelDateTimeField } from \"@webiny/api-headless-cms/types\";\nimport { CmsModelFieldToElasticsearchPlugin } from \"../../types\";\n\nconst convertTimeToNumber = (time?: string): number | null => {\n    if (!time) {\n        return null;\n    }\n    const [hours, minutes, seconds = 0] = time.split(\":\").map(Number);\n    return hours * 60 * 60 + minutes * 60 + seconds;\n};\n\nconst convertNumberToTime = (value?: number): string | null => {\n    if (value === undefined || value === null) {\n        return null;\n    }\n    // TODO remove when v5 goes out\n    // this is a fix for pre beta.5\n    if (String(value).match(/^([0-9]{2}):([0-9]{2})/) !== null) {\n        return String(value);\n    }\n    //\n    const hours = Math.floor(value / 60 / 60);\n\n    const minutes = Math.floor((value - hours * 60 * 60) / 60);\n\n    const seconds = Math.floor(value - hours * 60 * 60 - minutes * 60);\n\n    return [hours, minutes, seconds].map(v => String(v).padStart(2, \"0\")).join(\":\");\n};\n\nconst convertValueFromIndex = (\n    value: string | number,\n    field: CmsContentModelDateTimeField\n): string | null => {\n    const type = field.settings.type;\n    if (type === \"time\") {\n        return convertNumberToTime(value as number);\n    } else if (!value) {\n        return null;\n    } else if (type === \"dateTimeWithTimezone\") {\n        return value as string;\n    } else if (type === \"date\") {\n        const dateValue = new Date(value);\n        return dateValue.toISOString().substr(0, 10);\n    }\n    return new Date(value).toISOString();\n};\n\nconst convertValueToIndex = (value: string, field: CmsContentModelDateTimeField) => {\n    if (!value) {\n        return null;\n    } else if (field.settings.type === \"time\") {\n        return convertTimeToNumber(value);\n    }\n    return value;\n};\n\nexport default (): CmsModelFieldToElasticsearchPlugin => ({\n    type: \"cms-model-field-to-elastic-search\",\n    name: \"cms-model-field-to-elastic-search-datetime\",\n    fieldType: \"datetime\",\n    unmappedType: () => {\n        return \"date\";\n    },\n    toIndex({ field, value }) {\n        const dateValue = convertValueToIndex(value, field as CmsContentModelDateTimeField);\n        return {\n            value: dateValue\n        };\n    },\n    fromIndex({ field, value }) {\n        return convertValueFromIndex(value, field as CmsContentModelDateTimeField);\n    }\n});\n"],"file":"dateTimeIndexing.js"}