{"version":3,"sources":["../../../src/elasticsearch/indexing/objectIndexing.ts"],"names":["processToIndex","fields","value","sourceValue","getFieldIndexPlugin","getFieldTypePlugin","context","model","reducer","values","field","plugin","type","rawValue","toIndex","fieldId","undefined","reduce","processFromIndex","sourceRawValue","fromIndex","name","fieldType","settings","multipleValues","acc","item","Object","keys","length","push","source","map","_","index"],"mappings":"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","sourcesContent":["import { CmsModelFieldToElasticsearchPlugin } from \"~/types\";\nimport {\n    CmsContentModel,\n    CmsContentModelField,\n    CmsContext,\n    CmsModelFieldToGraphQLPlugin\n} from \"@webiny/api-headless-cms/types\";\n\ninterface ProcessToIndex {\n    (params: {\n        fields: CmsContentModelField[];\n        value: Record<string, any>;\n        getFieldIndexPlugin: (fieldType: string) => CmsModelFieldToElasticsearchPlugin;\n        getFieldTypePlugin: (fieldType: string) => CmsModelFieldToGraphQLPlugin;\n        context: CmsContext;\n        model: CmsContentModel;\n    }): Record<\"value\" | \"rawValue\", Record<string, any>>;\n}\n\ninterface ProcessFromIndex {\n    (params: {\n        fields: CmsContentModelField[];\n        value: Record<string, any>;\n        rawValue: Record<string, any>;\n        getFieldIndexPlugin: (fieldType: string) => CmsModelFieldToElasticsearchPlugin;\n        getFieldTypePlugin: (fieldType: string) => CmsModelFieldToGraphQLPlugin;\n        context: CmsContext;\n        model: CmsContentModel;\n    }): Record<string, any>;\n}\n\nconst processToIndex: ProcessToIndex = ({\n    fields,\n    value: sourceValue,\n    getFieldIndexPlugin,\n    getFieldTypePlugin,\n    context,\n    model\n}) => {\n    const reducer = (values, field) => {\n        const plugin = getFieldIndexPlugin(field.type);\n        const { value, rawValue } = plugin.toIndex({\n            context,\n            model,\n            field,\n            value: sourceValue[field.fieldId],\n            getFieldIndexPlugin,\n            getFieldTypePlugin\n        });\n\n        if (value !== undefined) {\n            values.value[field.fieldId] = value;\n        }\n\n        if (rawValue !== undefined) {\n            values.rawValue[field.fieldId] = rawValue;\n        }\n\n        return values;\n    };\n\n    return fields.reduce(reducer, { value: {}, rawValue: {} });\n};\nconst processFromIndex: ProcessFromIndex = ({\n    fields,\n    value: sourceValue,\n    rawValue: sourceRawValue,\n    getFieldIndexPlugin,\n    getFieldTypePlugin,\n    context,\n    model\n}) => {\n    const reducer = (values, field) => {\n        const plugin = getFieldIndexPlugin(field.type);\n        const value = plugin.fromIndex({\n            context,\n            model,\n            field,\n            value: sourceValue[field.fieldId],\n            rawValue: sourceRawValue[field.fieldId],\n            getFieldIndexPlugin,\n            getFieldTypePlugin\n        });\n\n        if (value !== undefined) {\n            values[field.fieldId] = value;\n        }\n\n        return values;\n    };\n\n    return fields.reduce(reducer, {});\n};\n\nexport default (): CmsModelFieldToElasticsearchPlugin => ({\n    type: \"cms-model-field-to-elastic-search\",\n    name: \"cms-model-field-to-elastic-search-object\",\n    fieldType: \"object\",\n    toIndex({ context, model, field, value, getFieldIndexPlugin, getFieldTypePlugin }) {\n        if (!value) {\n            return { value: null };\n        }\n\n        const fields = field.settings.fields as CmsContentModelField[];\n\n        /**\n         * In \"object\" field, value is either an object or an array of objects.\n         */\n        if (field.multipleValues) {\n            const values = value.reduce(\n                (acc, item) => {\n                    const { value, rawValue } = processToIndex({\n                        value: item,\n                        getFieldIndexPlugin,\n                        getFieldTypePlugin,\n                        model,\n                        context,\n                        fields\n                    });\n\n                    if (Object.keys(value).length > 0) {\n                        acc.value.push(value);\n                    }\n\n                    if (Object.keys(rawValue).length > 0) {\n                        acc.rawValue.push(rawValue);\n                    }\n                    return acc;\n                },\n                { value: [], rawValue: [] }\n            );\n\n            return {\n                value: values.value.length > 0 ? values.value : undefined,\n                rawValue: values.rawValue.length > 0 ? values.rawValue : undefined\n            };\n        }\n\n        return processToIndex({\n            value,\n            getFieldIndexPlugin,\n            getFieldTypePlugin,\n            model,\n            context,\n            fields\n        });\n    },\n    fromIndex({ field, value, rawValue, model, context, getFieldIndexPlugin, getFieldTypePlugin }) {\n        if (!value) {\n            return null;\n        }\n\n        const fields = field.settings.fields as CmsContentModelField[];\n\n        /**\n         * In \"object\" field, value is either an object or an array of objects.\n         */\n        if (field.multipleValues) {\n            /**\n             * Why this `value || rawValue || []`?\n             * It's possible that an object contains all non-indexable fields, or vice-versa, and so\n             * we can never be sure which array we can reliably use as a source of values.\n             */\n            const source = value || rawValue || [];\n\n            return source.map((_, index) =>\n                processFromIndex({\n                    value: value ? value[index] || {} : {},\n                    rawValue: rawValue ? rawValue[index] || {} : {},\n                    getFieldIndexPlugin,\n                    getFieldTypePlugin,\n                    model,\n                    context,\n                    fields\n                })\n            );\n        }\n\n        return processFromIndex({\n            value,\n            rawValue,\n            getFieldIndexPlugin,\n            getFieldTypePlugin,\n            model,\n            context,\n            fields\n        });\n    }\n});\n"],"file":"objectIndexing.js"}