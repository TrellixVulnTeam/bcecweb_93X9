{"version":3,"sources":["../../../src/upgrades/v5.0.0/entryValueFixer.ts"],"names":["convertTimeToNumber","time","hours","minutes","seconds","split","map","Number","fixRawValues","target","finder","entry","fieldId","rawValues","field","findById","modelId","type","existingValue","values","rawValue","undefined","fixTime","isNaN","parseInt","err","console","log","fixDateTime","dateTime","settings","Date","toISOString","fixNumber","value","parseFloat","fieldFixMethods","datetime","number","fixFieldValues","fixMethod","entryValueFixer","model"],"mappings":"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","sourcesContent":["import { ModelFieldFinder } from \"./fieldFinder\";\nimport { cleanDatabaseRecord } from \"./cleanDatabaseRecord\";\nimport { CmsContentIndexEntry } from \"../../types\";\nimport {\n    CmsContentEntry,\n    CmsContentModel,\n    CmsContentModelField\n} from \"@webiny/api-headless-cms/types\";\n\nconst convertTimeToNumber = (time?: string): number | null => {\n    if (!time) {\n        return null;\n    }\n    const [hours, minutes, seconds = 0] = time.split(\":\").map(Number);\n    return hours * 60 * 60 + minutes * 60 + seconds;\n};\n\nconst fixRawValues = (\n    target: CmsContentIndexEntry,\n    finder: ModelFieldFinder\n): CmsContentIndexEntry => {\n    const entry = {\n        ...target\n    };\n    for (const fieldId in entry.rawValues) {\n        // if field is ref field then continue, otherwise break\n        const field = finder.findById(target.modelId, fieldId);\n        if (field.type !== \"ref\") {\n            continue;\n        }\n        const existingValue = entry.values[fieldId];\n        const rawValue = entry.rawValues[fieldId];\n        // always remove from rawValue\n        delete entry.rawValues[fieldId];\n        // if there is something in values - do not switch it\n        if (typeof existingValue !== \"undefined\" || rawValue === undefined || rawValue === null) {\n            continue;\n        }\n        entry.values[fieldId] = rawValue;\n    }\n    return entry;\n};\n\nconst fixTime = (field, time: any): number | null => {\n    if (isNaN(time as number) === false) {\n        return parseInt(time);\n    }\n    // lets not reinvent the wheel\n    try {\n        return convertTimeToNumber(time);\n    } catch (err) {\n        console.log(`fixTime on field \"${field.fieldId}\" failed`, err);\n        return null;\n    }\n};\n\nconst fixDateTime = (field: CmsContentModelField, dateTime: any): any => {\n    switch (field.settings.type) {\n        case \"time\":\n            return fixTime(field, dateTime);\n        case \"date\":\n            return new Date(dateTime).toISOString();\n        case \"dateTimeWithoutTimezone\":\n            return new Date(dateTime).toISOString();\n        default:\n            return dateTime;\n    }\n};\n\nconst fixNumber = (field: CmsContentModelField, value: any) => {\n    if (value === undefined || value === null) {\n        return null;\n    }\n    return parseFloat(value);\n};\n\nconst fieldFixMethods = {\n    datetime: fixDateTime,\n    number: fixNumber\n};\n\nconst fixFieldValues = (\n    target: CmsContentIndexEntry,\n    finder: ModelFieldFinder\n): CmsContentIndexEntry => {\n    const entry = {\n        ...target\n    };\n\n    for (const fieldId in target.values) {\n        const field = finder.findById(target.modelId, fieldId);\n        if (!field) {\n            continue;\n        }\n\n        const fixMethod = fieldFixMethods[field.type];\n        if (!fixMethod) {\n            continue;\n        } else if (target.values[fieldId] === null || target.values[fieldId] === undefined) {\n            continue;\n        }\n        target.values[fieldId] = fixMethod(field, target.values[fieldId]);\n    }\n\n    return entry;\n};\n\nexport const entryValueFixer = (\n    model: CmsContentModel,\n    finder: ModelFieldFinder,\n    target: CmsContentIndexEntry\n): CmsContentEntry => {\n    return cleanDatabaseRecord(fixFieldValues(fixRawValues(target, finder), finder));\n};\n"],"file":"entryValueFixer.js"}