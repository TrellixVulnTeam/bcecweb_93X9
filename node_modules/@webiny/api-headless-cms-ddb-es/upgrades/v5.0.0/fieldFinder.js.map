{"version":3,"sources":["../../../src/upgrades/v5.0.0/fieldFinder.ts"],"names":["createFieldFinder","models","modelsList","model","values","id","type","field","fields","fieldId","push","modelId","findById","findByType"],"mappings":";;;;;;;AAkBO,MAAMA,iBAAiB,GAAIC,MAAD,IAAiD;AAC9E,QAAMC,UAAwB,GAAG,EAAjC;;AACA,OAAK,MAAMC,KAAX,IAAoBF,MAApB,EAA4B;AACxB,UAAMG,MAAM,GAAG;AACXC,MAAAA,EAAE,EAAE,EADO;AAEXC,MAAAA,IAAI,EAAE;AAFK,KAAf;;AAIA,SAAK,MAAMC,KAAX,IAAoBJ,KAAK,CAACK,MAA1B,EAAkC;AAC9BJ,MAAAA,MAAM,CAACC,EAAP,CAAUE,KAAK,CAACE,OAAhB,IAA2BF,KAA3B;;AACA,UAAI,CAACH,MAAM,CAACE,IAAP,CAAYC,KAAK,CAACD,IAAlB,CAAL,EAA8B;AAC1BF,QAAAA,MAAM,CAACE,IAAP,CAAYC,KAAK,CAACD,IAAlB,IAA0B,EAA1B;AACH;;AACDF,MAAAA,MAAM,CAACE,IAAP,CAAYC,KAAK,CAACD,IAAlB,EAAwBI,IAAxB,CAA6BH,KAA7B;AACH;;AAEDL,IAAAA,UAAU,CAACC,KAAK,CAACQ,OAAP,CAAV,GAA4BP,MAA5B;AACH;;AAED,SAAO;AACHQ,IAAAA,QAAQ,EAAE,CAACT,KAAD,EAAQM,OAAR,KAAoB;AAC1B,YAAME,OAAO,GAAG,OAAOR,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCA,KAAK,CAACQ,OAA1D;AAEA,aAAOT,UAAU,CAACS,OAAD,CAAV,CAAoBN,EAApB,CAAuBI,OAAvB,CAAP;AACH,KALE;AAMHI,IAAAA,UAAU,EAAE,CAACV,KAAD,EAAQG,IAAR,KAAiB;AACzB,YAAMK,OAAO,GAAG,OAAOR,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCA,KAAK,CAACQ,OAA1D;AAEA,aAAOT,UAAU,CAACS,OAAD,CAAV,CAAoBL,IAApB,CAAyBA,IAAzB,CAAP;AACH;AAVE,GAAP;AAYH,CA9BM","sourcesContent":["import { CmsContentModel, CmsContentModelField } from \"@webiny/api-headless-cms/types\";\n\ninterface MappedModels {\n    [modelId: string]: {\n        id: {\n            [fieldId: string]: CmsContentModelField;\n        };\n        type: {\n            [fieldType: string]: CmsContentModelField[];\n        };\n    };\n}\n\nexport interface ModelFieldFinder {\n    findById: (model: CmsContentModel | string, fieldId: string) => CmsContentModelField;\n    findByType: (model: CmsContentModel | string, type: string) => CmsContentModelField[];\n}\n\nexport const createFieldFinder = (models: CmsContentModel[]): ModelFieldFinder => {\n    const modelsList: MappedModels = {};\n    for (const model of models) {\n        const values = {\n            id: {},\n            type: {}\n        };\n        for (const field of model.fields) {\n            values.id[field.fieldId] = field;\n            if (!values.type[field.type]) {\n                values.type[field.type] = [];\n            }\n            values.type[field.type].push(field);\n        }\n\n        modelsList[model.modelId] = values;\n    }\n\n    return {\n        findById: (model, fieldId) => {\n            const modelId = typeof model === \"string\" ? model : model.modelId;\n\n            return modelsList[modelId].id[fieldId];\n        },\n        findByType: (model, type) => {\n            const modelId = typeof model === \"string\" ? model : model.modelId;\n\n            return modelsList[modelId].type[type];\n        }\n    };\n};\n"],"file":"fieldFinder.js"}