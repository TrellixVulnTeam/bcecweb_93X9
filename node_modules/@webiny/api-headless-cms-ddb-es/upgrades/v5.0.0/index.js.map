{"version":3,"sources":["../../../src/upgrades/v5.0.0/index.ts"],"names":["plugin","name","type","app","version","apply","context","db","fileManager","elasticsearch","WebinyError","esIndex","body","exists","indices","index","putTemplate","index_patterns","settings","analysis","analyzer","lowercase_analyzer","filter","tokenizer","mappings","properties","property","fields","keyword","ignore_above","rawValues","enabled","err","console","log","hasMoreItems","after","undefined","limit","esItems","response","search","sort","createdOn","order","unmapped_type","size","hits","length","item","_id","includes","esJSON","JSON","stringify","file","storage","storagePlugin","upload","buffer","Buffer","from","key","locales","i18n","getLocales","esOperations","locale","models","read","configurations","query","PK","code","SK","$gt","Promise","resolve","setTimeout","modelsById","reduce","acc","model","modelId","ddbItems","hit","_source","map","entry","modelFieldFinder","indexName","toLowerCase","id","split","__type","esData","webinyVersion","push","_index","data","savedOn","Date","toISOString","ignore","Boolean","items","batch","create","esDb","execute","bulkInsert","bulk"],"mappings":"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","sourcesContent":["import WebinyError from \"@webiny/error\";\nimport { UpgradePlugin } from \"@webiny/api-upgrade/types\";\nimport {\n    entryValueFixer,\n    cleanDatabaseRecord,\n    createFieldFinder,\n    createOldVersionIndiceName\n} from \"./helpers\";\n\nimport { paginateBatch } from \"../utils\";\nimport { CmsContentIndexEntry } from \"../../types\";\nimport { CmsContentModel, CmsContext } from \"@webiny/api-headless-cms/types\";\nimport configurations from \"../../configurations\";\nimport { Client } from \"@elastic/elasticsearch\";\n\ninterface Hit {\n    _id: string;\n    _index: string;\n    _source: CmsContentIndexEntry;\n}\n\nconst plugin = (): UpgradePlugin<CmsContext> => ({\n    name: \"api-upgrade-cms-5.0.0\",\n    type: \"api-upgrade\",\n    app: \"headless-cms\",\n    version: \"5.0.0\",\n    async apply(context) {\n        const { db, fileManager } = context;\n        const elasticsearch: Client = (context as any).elasticsearch;\n        if (!elasticsearch) {\n            throw new WebinyError(\"Missing Elasticsearch client on the context.\");\n        }\n\n        // Check if we still have the old elasticsearch index\n        const esIndex = createOldVersionIndiceName(context);\n        const { body: exists } = await elasticsearch.indices.exists({\n            index: esIndex\n        });\n\n        if (!exists) {\n            return;\n        }\n\n        try {\n            await elasticsearch.indices.putTemplate({\n                name: \"headless-cms-entries-index\",\n                body: {\n                    index_patterns: [\"*headless-cms*\"],\n                    settings: {\n                        analysis: {\n                            analyzer: {\n                                lowercase_analyzer: {\n                                    type: \"custom\",\n                                    filter: [\"lowercase\", \"trim\"],\n                                    tokenizer: \"keyword\"\n                                }\n                            }\n                        }\n                    },\n                    mappings: {\n                        properties: {\n                            property: {\n                                type: \"text\",\n                                fields: {\n                                    keyword: {\n                                        type: \"keyword\",\n                                        ignore_above: 256\n                                    }\n                                },\n                                analyzer: \"lowercase_analyzer\"\n                            },\n                            rawValues: {\n                                type: \"object\",\n                                enabled: false\n                            }\n                        }\n                    }\n                }\n            });\n        } catch (err) {\n            console.log(err);\n            throw new WebinyError(\"Put index template failed!\");\n        }\n\n        // Load existing ES items\n        let hasMoreItems = true;\n        let after: string | undefined = undefined;\n        const limit = 1000;\n        let esItems = [];\n\n        // go through old index and load data in bulks of 1000\n        while (hasMoreItems) {\n            const response = await elasticsearch.search({\n                index: esIndex,\n                body: {\n                    sort: {\n                        createdOn: {\n                            order: \"asc\",\n                            // eslint-disable-next-line\n                            unmapped_type: \"date\"\n                        }\n                    },\n                    size: limit + 1,\n                    after\n                }\n            });\n\n            const { hits } = response.body.hits;\n\n            hasMoreItems = hits.length > limit;\n            after = hasMoreItems ? hits[limit - 1].sort : undefined;\n            esItems = [...esItems, ...hits.filter(item => !item._id.includes(\"T#root#\"))];\n        }\n\n        console.log(`Fetched ${esItems.length} items from Elasticsearch`);\n        if (esItems.length === 0) {\n            return;\n        }\n\n        // Store a backup of old items\n        const esJSON = JSON.stringify(esItems);\n\n        const { file } = await fileManager.storage.storagePlugin.upload({\n            name: \"upgrade-headless-cms-es-5.0.0.json\",\n            type: \"application/json\",\n            size: esJSON.length,\n            buffer: Buffer.from(esJSON)\n        });\n\n        console.log(`Stored backup of Elasticsearch items to ${file.key}`);\n\n        // Load models for each locale and distribute ES items to new per-model indexes\n        const locales = context.i18n.getLocales();\n\n        const esOperations = [];\n\n        for (const locale of locales) {\n            const [models] = await db.read<CmsContentModel>({\n                ...configurations.db(),\n                query: { PK: `T#root#L#${locale.code}#CMS#CM`, SK: { $gt: \" \" } }\n            });\n\n            // Sleep for 2 seconds\n            await new Promise(resolve => setTimeout(resolve, 2000));\n\n            const modelsById: Record<string, CmsContentModel> = models.reduce((acc, model) => {\n                acc[model.modelId] = model;\n                return acc;\n            }, {});\n\n            /**\n             *  Build a list of items for ES DDB table\n             */\n            const ddbItems = esItems\n                .filter((hit: Hit) => {\n                    return hit._source.locale === locale.code;\n                })\n                .map((hit: Hit) => {\n                    const entry = hit._source;\n                    const model = modelsById[entry.modelId];\n                    if (!model) {\n                        return null;\n                    }\n\n                    const modelFieldFinder = createFieldFinder(models);\n\n                    const indexName =\n                        `root-headless-cms-${locale.code}-${model.modelId}`.toLowerCase();\n                    const PK = `T#root#L#${locale.code}#CMS#CME#${entry.id.split(\"#\")[0]}`;\n                    const SK = entry.__type === \"cms.entry.l\" ? \"L\" : \"P\";\n                    const esData = {\n                        ...entryValueFixer(model, modelFieldFinder, cleanDatabaseRecord(entry)),\n                        webinyVersion: \"5.0.0\"\n                    };\n\n                    esOperations.push({ index: { _index: indexName, _id: `${PK}:${SK}` } }, esData);\n\n                    return {\n                        PK,\n                        SK,\n                        index: indexName,\n                        data: esData,\n                        savedOn: new Date().toISOString(),\n                        version: \"5.0.0\",\n                        ignore: true\n                    };\n                })\n                .filter(Boolean);\n\n            console.log(`[${locale.code}] Prepared ${ddbItems.length} ES DDB items.`);\n\n            await paginateBatch(ddbItems, 25, async items => {\n                const batch = db.batch();\n                await batch\n                    .create(\n                        ...items.map(item => {\n                            return {\n                                ...configurations.esDb(),\n                                data: item\n                            };\n                        })\n                    )\n                    .execute();\n            });\n\n            console.log(`[${locale.code}] Inserted ES DDB items.`);\n\n            // update all models to latest version\n            await paginateBatch(models, 25, async items => {\n                await db\n                    .batch()\n                    .create(\n                        ...items.map(model => {\n                            return {\n                                ...configurations.db(),\n                                data: {\n                                    ...model,\n                                    locale: locale.code,\n                                    webinyVersion: \"5.0.0\"\n                                }\n                            };\n                        })\n                    )\n                    .execute();\n            });\n\n            console.log(\n                `[${locale.code}] Updated DDB model records with version number and locale code.`\n            );\n        }\n\n        // ES BULK INSERT\n        const bulkInsert = await elasticsearch.bulk({\n            body: esOperations\n        });\n\n        console.log(\"ES bulk index\", bulkInsert);\n    }\n});\n\nexport default plugin;\n"],"file":"index.js"}