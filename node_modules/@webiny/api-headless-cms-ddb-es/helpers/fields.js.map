{"version":3,"sources":["../../src/helpers/fields.ts"],"names":["createSystemField","field","fieldId","WebinyError","type","systemFields","id","isSystemField","isSearchable","isSortable","entryId","savedOn","unmappedType","keyword","settings","createdOn","createdBy","undefined","path","ownedBy","version","createModelFields","context","model","unmappedTypes","plugins","byType","reduce","acc","plugin","fieldType","fieldTypePlugins","types","fields"],"mappings":"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","sourcesContent":["import {\n    CmsContentModel,\n    CmsContentModelField,\n    CmsContext,\n    CmsModelFieldToGraphQLPlugin\n} from \"@webiny/api-headless-cms/types\";\nimport WebinyError from \"@webiny/error\";\nimport { CmsModelFieldToElasticsearchPlugin } from \"~/types\";\n\ntype ModelFieldPath = string | ((value: string) => string);\nexport interface ModelField {\n    unmappedType?: string;\n    keyword?: boolean;\n    isSearchable: boolean;\n    isSortable: boolean;\n    type: string;\n    isSystemField?: boolean;\n    field: CmsContentModelField;\n    path?: ModelFieldPath;\n}\n\nexport type ModelFields = Record<string, ModelField>;\n\ntype UnmappedFieldTypes = {\n    [type: string]: (field: CmsContentModelField) => string | undefined;\n};\n\ninterface FieldTypePlugin {\n    unmappedType?: (field: CmsContentModelField) => string | undefined;\n    isSearchable: boolean;\n    isSortable: boolean;\n}\ntype FieldTypePlugins = Record<string, FieldTypePlugin>;\n\nconst createSystemField = (field: Partial<CmsContentModelField>): CmsContentModelField => {\n    if (!field.fieldId) {\n        throw new WebinyError(\n            `When creating system field it must have a \"entryId\".`,\n            \"SYSTEM_FIELD_ERROR\",\n            {\n                field\n            }\n        );\n    } else if (!field.type) {\n        throw new WebinyError(\n            `When creating system field it must have a \"type\".`,\n            \"SYSTEM_FIELD_ERROR\",\n            {\n                field\n            }\n        );\n    }\n    return field as unknown as CmsContentModelField;\n};\n\nexport const systemFields = {\n    id: {\n        type: \"text\",\n        isSystemField: true,\n        isSearchable: true,\n        isSortable: true,\n        field: createSystemField({\n            fieldId: \"id\",\n            type: \"text\"\n        })\n    },\n    entryId: {\n        type: \"text\",\n        isSystemField: true,\n        isSearchable: true,\n        isSortable: true,\n        field: createSystemField({\n            fieldId: \"entryId\",\n            type: \"text\"\n        })\n    },\n    savedOn: {\n        type: \"date\",\n        unmappedType: \"date\",\n        keyword: false,\n        isSystemField: true,\n        isSearchable: true,\n        isSortable: true,\n        field: createSystemField({\n            fieldId: \"savedOn\",\n            type: \"date\",\n            settings: {\n                type: \"dateTimeWithoutTimezone\"\n            }\n        })\n    },\n    createdOn: {\n        type: \"date\",\n        unmappedType: \"date\",\n        keyword: false,\n        isSystemField: true,\n        isSearchable: true,\n        isSortable: true,\n        field: createSystemField({\n            fieldId: \"createdOn\",\n            type: \"text\",\n            settings: {\n                type: \"dateTimeWithoutTimezone\"\n            }\n        })\n    },\n    createdBy: {\n        type: \"text\",\n        unmappedType: undefined,\n        isSystemField: true,\n        isSearchable: true,\n        isSortable: false,\n        path: \"createdBy.id\",\n        field: createSystemField({\n            fieldId: \"createdBy\",\n            type: \"text\"\n        })\n    },\n    ownedBy: {\n        type: \"text\",\n        unmappedType: undefined,\n        isSystemField: true,\n        isSearchable: true,\n        isSortable: false,\n        path: \"ownedBy.id\",\n        field: createSystemField({\n            fieldId: \"ownedBy\",\n            type: \"text\"\n        })\n    },\n    version: {\n        type: \"number\",\n        unmappedType: undefined,\n        keyword: false,\n        isSystemField: true,\n        isSearchable: true,\n        isSortable: true,\n        field: createSystemField({\n            fieldId: \"version\",\n            type: \"number\"\n        })\n    }\n};\n\n/*\n * Create an object with key fieldType and options for that field\n */\nexport const createModelFields = (context: CmsContext, model: CmsContentModel): ModelFields => {\n    // collect all unmappedType from elastic plugins\n    const unmappedTypes: UnmappedFieldTypes = context.plugins\n        .byType<CmsModelFieldToElasticsearchPlugin>(\"cms-model-field-to-elastic-search\")\n        .reduce((acc, plugin) => {\n            if (!plugin.unmappedType) {\n                return acc;\n            }\n            acc[plugin.fieldType] = plugin.unmappedType;\n            return acc;\n        }, {});\n    /**\n     * collect all field types from the plugins\n     */\n    const fieldTypePlugins: FieldTypePlugins = context.plugins\n        .byType<CmsModelFieldToGraphQLPlugin>(\"cms-model-field-to-graphql\")\n        .reduce((types, plugin) => {\n            const { fieldType, isSearchable, isSortable } = plugin;\n            types[fieldType] = {\n                unmappedType: unmappedTypes[fieldType],\n                isSearchable: isSearchable === true,\n                isSortable: isSortable === true\n            };\n            return types;\n        }, {});\n\n    return model.fields.reduce((fields, field) => {\n        const { fieldId, type } = field;\n        if (!fieldTypePlugins[type]) {\n            throw new WebinyError(`There is no plugin for field type \"${type}\".`);\n        }\n        const { isSearchable, isSortable, unmappedType } = fieldTypePlugins[type];\n        fields[fieldId] = {\n            type,\n            isSearchable,\n            isSortable,\n            unmappedType: typeof unmappedType === \"function\" ? unmappedType(field) : undefined,\n            isSystemField: false,\n            field\n        };\n\n        return fields;\n    }, systemFields);\n};\n"],"file":"fields.js"}