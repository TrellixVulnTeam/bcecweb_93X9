{"version":3,"sources":["../../src/helpers/entryIndexHelpers.ts"],"names":["prepareEntryToIndex","args","context","storageEntry","model","fieldIndexPlugins","defaultIndexFieldPlugin","fieldTypePlugins","setupEntriesIndexHelpers","getFieldIndexPlugin","fieldType","getFieldTypePlugin","values","rawValues","field","fields","hasOwnProperty","fieldId","fieldTypePlugin","type","Error","targetFieldPlugin","toIndex","value","rawValue","plugins","byType","plugin","reverse","find","reduce","extractEntriesFromIndex","entries","list","entry","indexValues","fromIndex","ex","message","code","push"],"mappings":"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","sourcesContent":["import Error from \"@webiny/error\";\nimport {\n    CmsContentEntry,\n    CmsContentModel,\n    CmsContext,\n    CmsModelFieldToGraphQLPlugin\n} from \"@webiny/api-headless-cms/types\";\nimport { CmsContentIndexEntry, CmsModelFieldToElasticsearchPlugin } from \"~/types\";\n\ninterface SetupEntriesIndexHelpersArgs {\n    context: CmsContext;\n}\n\ninterface ExtractEntriesFromIndexArgs extends SetupEntriesIndexHelpersArgs {\n    model: CmsContentModel;\n    entries: CmsContentIndexEntry[];\n}\n\ninterface PrepareElasticsearchDataArgs extends SetupEntriesIndexHelpersArgs {\n    model: CmsContentModel;\n    storageEntry: CmsContentEntry;\n}\n\nexport const prepareEntryToIndex = (args: PrepareElasticsearchDataArgs): CmsContentIndexEntry => {\n    const { context, storageEntry, model } = args;\n    const { fieldIndexPlugins, defaultIndexFieldPlugin, fieldTypePlugins } =\n        setupEntriesIndexHelpers({ context });\n\n    function getFieldIndexPlugin(fieldType: string) {\n        return fieldIndexPlugins[fieldType] || defaultIndexFieldPlugin;\n    }\n\n    function getFieldTypePlugin(fieldType: string) {\n        return fieldTypePlugins[fieldType];\n    }\n\n    // These objects will contain values processed by field index plugins\n    const values = {};\n    const rawValues = {};\n\n    // We're only interested in current model fields.\n    for (const field of model.fields) {\n        if (storageEntry.values.hasOwnProperty(field.fieldId) === false) {\n            continue;\n        }\n\n        const fieldTypePlugin = getFieldTypePlugin(field.type);\n        if (!fieldTypePlugin) {\n            throw new Error(`Missing field type plugin \"${field.type}\".`);\n        }\n\n        const targetFieldPlugin = getFieldIndexPlugin(field.type);\n\n        // TODO: remove this `if` once we convert this plugin to proper plugin class\n        if (targetFieldPlugin && targetFieldPlugin.toIndex) {\n            const { value, rawValue } = targetFieldPlugin.toIndex({\n                context,\n                model,\n                field,\n                value: storageEntry.values[field.fieldId],\n                getFieldIndexPlugin,\n                getFieldTypePlugin\n            });\n\n            if (typeof value !== \"undefined\") {\n                values[field.fieldId] = value;\n            }\n\n            if (typeof rawValue !== \"undefined\") {\n                rawValues[field.fieldId] = rawValue;\n            }\n        }\n    }\n    return {\n        ...storageEntry,\n        values,\n        rawValues\n    } as CmsContentIndexEntry;\n};\n\nconst setupEntriesIndexHelpers = ({ context }: SetupEntriesIndexHelpersArgs) => {\n    const plugins = context.plugins.byType<CmsModelFieldToElasticsearchPlugin>(\n        \"cms-model-field-to-elastic-search\"\n    );\n\n    const fieldIndexPlugins: Record<string, CmsModelFieldToElasticsearchPlugin> = {};\n    for (const plugin of plugins.reverse()) {\n        if (fieldIndexPlugins[plugin.fieldType]) {\n            continue;\n        }\n        fieldIndexPlugins[plugin.fieldType] = plugin;\n    }\n    // we will use this plugin if no targeted plugin found\n    const defaultIndexFieldPlugin = plugins.find(plugin => plugin.fieldType === \"*\");\n\n    // CmsModelFieldToGraphQLPlugin plugins\n    const fieldTypePlugins: Record<string, CmsModelFieldToGraphQLPlugin> = context.plugins\n        .byType<CmsModelFieldToGraphQLPlugin>(\"cms-model-field-to-graphql\")\n        .reduce((plugins, plugin) => ({ ...plugins, [plugin.fieldType]: plugin }), {});\n\n    return {\n        fieldIndexPlugins,\n        defaultIndexFieldPlugin,\n        fieldTypePlugins\n    };\n};\n\nexport const extractEntriesFromIndex = ({\n    context,\n    entries,\n    model\n}: ExtractEntriesFromIndexArgs): CmsContentEntry[] => {\n    const { fieldIndexPlugins, defaultIndexFieldPlugin, fieldTypePlugins } =\n        setupEntriesIndexHelpers({ context });\n\n    function getFieldIndexPlugin(fieldType: string) {\n        return fieldIndexPlugins[fieldType] || defaultIndexFieldPlugin;\n    }\n\n    function getFieldTypePlugin(fieldType: string) {\n        return fieldTypePlugins[fieldType];\n    }\n\n    const list: CmsContentEntry[] = [];\n\n    for (const entry of entries) {\n        // This object will contain values processed by field index plugins\n        const indexValues = {};\n\n        // We only consider fields that are present in the model\n        for (const field of model.fields) {\n            const fieldTypePlugin = fieldTypePlugins[field.type];\n            if (!fieldTypePlugin) {\n                throw new Error(`Missing field type plugin \"${field.type}\".`);\n            }\n\n            const targetFieldPlugin = getFieldIndexPlugin(field.type);\n            if (targetFieldPlugin && targetFieldPlugin.fromIndex) {\n                try {\n                    indexValues[field.fieldId] = targetFieldPlugin.fromIndex({\n                        context,\n                        model,\n                        field,\n                        getFieldIndexPlugin,\n                        getFieldTypePlugin,\n                        value: entry.values[field.fieldId],\n                        rawValue: entry.rawValues[field.fieldId]\n                    });\n                } catch (ex) {\n                    throw new Error(\n                        ex.message || \"Could not transform entry field from index.\",\n                        ex.code || \"FIELD_FROM_INDEX_ERROR\",\n                        {\n                            field,\n                            entry\n                        }\n                    );\n                }\n            }\n        }\n        list.push({ ...entry, values: indexValues });\n    }\n\n    return list;\n};\n"],"file":"entryIndexHelpers.js"}