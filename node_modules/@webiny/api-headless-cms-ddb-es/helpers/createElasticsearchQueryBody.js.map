{"version":3,"sources":["../../src/helpers/createElasticsearchQueryBody.ts"],"names":["specialFields","noKeywordFields","parseWhereKeyRegExp","RegExp","parseWhereKey","key","match","Error","field","operation","op","substr","createElasticsearchSortParams","args","context","sort","modelFields","parentPath","searchPlugins","length","undefined","sortPlugins","Object","values","reduce","plugins","modelField","searchPlugin","type","fieldId","ElasticsearchFieldPlugin","unmappedType","keyword","hasKeyword","sortable","isSortable","searchable","isSearchable","entity","path","createFieldPath","createInitialQueryValue","where","query","must","must_not","should","filter","sharedIndex","process","env","ELASTICSEARCH_SHARED_INDEXES","tenant","tenancy","getCurrentTenant","push","term","id","published","TYPE_ENTRY_PUBLISHED","latest","TYPE_ENTRY_LATEST","WebinyError","createPath","isSystemField","includes","execElasticsearchBuildQueryPlugins","sf","keys","operatorPlugins","hasOwnProperty","cmsField","plugin","operator","fieldSearchPlugin","value","fieldPath","apply","basePath","createElasticsearchQueryBody","params","model","after","limit","queryPlugins","byType","pl","modify","bool","size","search_after","track_total_hits"],"mappings":"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","sourcesContent":["import WebinyError from \"@webiny/error\";\nimport { operatorPluginsList } from \"./operatorPluginsList\";\nimport { transformValueForSearch } from \"./transformValueForSearch\";\nimport { searchPluginsList } from \"./searchPluginsList\";\nimport {\n    CmsContentEntryListArgs,\n    CmsContentEntryListSort,\n    CmsContentEntryListWhere,\n    CmsContentModel,\n    CmsContext\n} from \"@webiny/api-headless-cms/types\";\nimport { ElasticsearchQueryBuilderValueSearchPlugin, ElasticsearchQueryPlugin } from \"~/types\";\nimport {\n    TYPE_ENTRY_LATEST,\n    TYPE_ENTRY_PUBLISHED\n} from \"~/operations/entry/CmsContentEntryDynamoElastic\";\nimport {\n    SearchBody as esSearchBody,\n    Sort as esSort,\n    ElasticsearchBoolQueryConfig\n} from \"@webiny/api-elasticsearch/types\";\nimport { decodeCursor } from \"@webiny/api-elasticsearch/cursors\";\nimport { ElasticsearchFieldPlugin } from \"@webiny/api-elasticsearch/plugins/definition/ElasticsearchFieldPlugin\";\nimport { createSort } from \"@webiny/api-elasticsearch/sort\";\nimport { createModelFields, ModelField, ModelFields } from \"./fields\";\n\ninterface CreateElasticsearchParams {\n    context: CmsContext;\n    model: CmsContentModel;\n    args: CmsContentEntryListArgs;\n    parentPath?: string;\n}\n\ninterface CreateElasticsearchSortParams {\n    context: CmsContext;\n    sort?: CmsContentEntryListSort;\n    modelFields: ModelFields;\n    parentPath?: string;\n    model: CmsContentModel;\n    searchPlugins: Record<string, ElasticsearchQueryBuilderValueSearchPlugin>;\n}\n\ninterface CreateElasticsearchQueryArgs {\n    model: CmsContentModel;\n    context: CmsContext;\n    where: CmsContentEntryListWhere;\n    modelFields: ModelFields;\n    parentPath?: string;\n    searchPlugins: Record<string, ElasticsearchQueryBuilderValueSearchPlugin>;\n}\n\nconst specialFields = [\"published\", \"latest\"];\nconst noKeywordFields = [\"date\", \"number\", \"boolean\"];\n\nconst parseWhereKeyRegExp = new RegExp(/^([a-zA-Z0-9]+)(_[a-zA-Z0-9_]+)?$/);\n\nconst parseWhereKey = (key: string) => {\n    const match = key.match(parseWhereKeyRegExp);\n\n    if (!match) {\n        throw new Error(`It is not possible to search by key \"${key}\"`);\n    }\n\n    const [, field, operation = \"eq\"] = match;\n    const op = operation.match(/^_/) ? operation.substr(1) : operation;\n\n    if (!field.match(/^([a-zA-Z]+)$/)) {\n        throw new Error(`Cannot filter by \"${field}\".`);\n    }\n\n    return { field, op };\n};\n\nconst createElasticsearchSortParams = (args: CreateElasticsearchSortParams): esSort => {\n    const { context, sort, modelFields, parentPath, searchPlugins } = args;\n\n    if (!sort || sort.length === 0) {\n        return undefined;\n    }\n\n    const sortPlugins = Object.values(modelFields).reduce((plugins, modelField) => {\n        const searchPlugin = searchPlugins[modelField.type];\n\n        plugins[modelField.field.fieldId] = new ElasticsearchFieldPlugin({\n            unmappedType: modelField.unmappedType,\n            keyword: hasKeyword(modelField),\n            sortable: modelField.isSortable,\n            searchable: modelField.isSearchable,\n            entity: \"ContentElasticsearchEntry\",\n            field: modelField.field.fieldId,\n            path: createFieldPath({\n                context,\n                parentPath,\n                modelField: modelField,\n                searchPlugin\n            })\n        });\n        return plugins;\n    }, {});\n\n    return createSort({\n        context,\n        plugins: sortPlugins,\n        sort\n    });\n};\n/**\n * Latest and published are specific in Elasticsearch to that extend that they are tagged in the __type property.\n * We allow either published or either latest.\n * Latest is used in the manage API and published in the read API.\n */\nconst createInitialQueryValue = (\n    args: CreateElasticsearchQueryArgs\n): ElasticsearchBoolQueryConfig => {\n    const { where, context } = args;\n\n    const query: ElasticsearchBoolQueryConfig = {\n        must: [],\n        must_not: [],\n        should: [],\n        filter: []\n    };\n\n    // When ES index is shared between tenants, we need to filter records by tenant ID\n    const sharedIndex = process.env.ELASTICSEARCH_SHARED_INDEXES === \"true\";\n    if (sharedIndex) {\n        const tenant = context.tenancy.getCurrentTenant();\n        query.must.push({ term: { \"tenant.keyword\": tenant.id } });\n    }\n    /**\n     * We must transform published and latest where args into something that is understandable by our Elasticsearch\n     */\n    if (where.published === true) {\n        query.must.push({\n            term: {\n                \"__type.keyword\": TYPE_ENTRY_PUBLISHED\n            }\n        });\n    } else if (where.latest === true) {\n        query.must.push({\n            term: {\n                \"__type.keyword\": TYPE_ENTRY_LATEST\n            }\n        });\n    }\n    // we do not allow not published and not latest\n    else if (where.published === false) {\n        throw new WebinyError(\n            `Cannot call Elasticsearch query with \"published\" set at false.`,\n            \"ELASTICSEARCH_UNSUPPORTED_QUERY\",\n            {\n                where\n            }\n        );\n    } else if (where.latest === false) {\n        throw new WebinyError(\n            `Cannot call Elasticsearch query with \"latest\" set at false.`,\n            \"ELASTICSEARCH_UNSUPPORTED_QUERY\",\n            {\n                where\n            }\n        );\n    }\n    //\n    return query;\n};\n\ninterface CreateFieldPathParams {\n    modelField: ModelField;\n    searchPlugin?: ElasticsearchQueryBuilderValueSearchPlugin;\n    context: CmsContext;\n    parentPath?: string;\n}\nconst createFieldPath = ({\n    modelField,\n    searchPlugin,\n    context,\n    parentPath\n}: CreateFieldPathParams): string => {\n    let path;\n    if (searchPlugin && typeof searchPlugin.createPath === \"function\") {\n        path = searchPlugin.createPath({\n            field: modelField.field,\n            context\n        });\n    } else if (typeof modelField.path === \"function\") {\n        path = modelField.path(modelField.field.fieldId);\n    }\n    if (!path) {\n        path = modelField.path || modelField.field.fieldId || modelField.field.id;\n    }\n    return modelField.isSystemField || !parentPath || path.match(parentPath)\n        ? path\n        : `${parentPath}.${path}`;\n};\n\nconst hasKeyword = (modelField: ModelField): boolean => {\n    /**\n     * We defined some field types that MUST have no keyword added to the field path\n     */\n    if (noKeywordFields.includes(modelField.type)) {\n        return false;\n    } else if (modelField.unmappedType) {\n        /**\n         * If modelField has unmapped type defined, do not add keyword.\n         */\n        return false;\n    } else if (modelField.keyword === false) {\n        /**\n         * And if specifically defined that modelField has no keyword, do not add it.\n         */\n        return false;\n    }\n    /**\n     * All other fields have keyword added.\n     */\n    return true;\n};\n/*\n * Iterate through where keys and apply plugins where necessary\n */\nconst execElasticsearchBuildQueryPlugins = (\n    args: CreateElasticsearchQueryArgs\n): ElasticsearchBoolQueryConfig => {\n    const { where, modelFields, parentPath, context, searchPlugins } = args;\n    const query = createInitialQueryValue(args);\n\n    /**\n     * Always remove special fields, as these do not exist in Elasticsearch.\n     */\n    for (const sf of specialFields) {\n        delete where[sf];\n    }\n\n    if (!where || Object.keys(where).length === 0) {\n        return query;\n    }\n\n    const operatorPlugins = operatorPluginsList(context);\n\n    for (const key in where) {\n        if (where.hasOwnProperty(key) === false) {\n            continue;\n        }\n        /**\n         * We do not need to go further if value is undefined.\n         * There are few hardcoded possibilities when value is undefined, for example, ownedBy.\n         */\n        if (where[key] === undefined) {\n            continue;\n        }\n        const { field, op } = parseWhereKey(key);\n        const modelField = modelFields[field];\n\n        if (!modelField) {\n            throw new WebinyError(`There is no field \"${field}\".`);\n        }\n        const { isSearchable = false, field: cmsField } = modelField;\n        if (!isSearchable) {\n            throw new WebinyError(`Field \"${field}\" is not searchable.`);\n        }\n        const plugin = operatorPlugins[op];\n        if (!plugin) {\n            throw new WebinyError(\"Operator plugin missing.\", \"PLUGIN_MISSING\", {\n                operator: op\n            });\n        }\n        const fieldSearchPlugin = searchPlugins[modelField.type];\n        const value = transformValueForSearch({\n            plugins: searchPlugins,\n            field: cmsField,\n            value: where[key],\n            context\n        });\n\n        const fieldPath = createFieldPath({\n            context,\n            searchPlugin: fieldSearchPlugin,\n            modelField,\n            parentPath: parentPath\n        });\n        const keyword = hasKeyword(modelField);\n        plugin.apply(query, {\n            basePath: fieldPath,\n            path: keyword ? `${fieldPath}.keyword` : fieldPath,\n            value,\n            context,\n            keyword\n        });\n    }\n\n    return query;\n};\n\nexport const createElasticsearchQueryBody = (params: CreateElasticsearchParams): esSearchBody => {\n    const { context, model, args, parentPath = null } = params;\n    const { where, after, limit, sort } = args;\n\n    const modelFields = createModelFields(context, model);\n    const searchPlugins = searchPluginsList(context);\n\n    const query = execElasticsearchBuildQueryPlugins({\n        model,\n        context,\n        where,\n        modelFields,\n        parentPath,\n        searchPlugins\n    });\n\n    const queryPlugins =\n        context.plugins.byType<ElasticsearchQueryPlugin>(\"cms-elasticsearch-query\");\n    for (const pl of queryPlugins) {\n        pl.modify({ query, model, context });\n    }\n\n    return {\n        query: {\n            bool: {\n                must: query.must.length > 0 ? query.must : undefined,\n                must_not: query.must_not.length > 0 ? query.must_not : undefined,\n                should: query.should.length > 0 ? query.should : undefined,\n                filter: query.filter.length > 0 ? query.filter : undefined\n            }\n        },\n        sort: createElasticsearchSortParams({\n            context,\n            sort,\n            modelFields,\n            parentPath,\n            model,\n            searchPlugins\n        }),\n        size: limit + 1,\n        // eslint-disable-next-line\n        search_after: decodeCursor(after) as any,\n        // eslint-disable-next-line\n        track_total_hits: true\n    };\n};\n"],"file":"createElasticsearchQueryBody.js"}