{"version":3,"sources":["../../../src/dynamoDb/storage/richText.ts"],"names":["transformArray","value","isArray","Array","shouldBeArray","from","k","type","name","fieldType","fromStorage","field","storageValue","WebinyError","fieldId","hasOwnProperty","compression","JSON","stringify","jsonpack","unpack","toStorage","pack"],"mappings":";;;;;;;;;AAAA;;AACA;;AAUA;AACA;AACA;AACA;AACA;AACA,MAAMA,cAAc,GAAIC,KAAD,IAAwC;AAC3D,MAAIC,OAAO,GAAGC,KAAK,CAACD,OAAN,CAAcD,KAAd,CAAd;AACA,QAAMG,aAAa,GAAGH,KAAK,YAAYE,KAAjB,KAA2B,KAA3B,IAAoCD,OAA1D;;AACA,MAAIE,aAAJ,EAAmB;AACfH,IAAAA,KAAK,GAAGE,KAAK,CAACE,IAAN,CAAWJ,KAAX,CAAR;AACAC,IAAAA,OAAO,GAAG,IAAV;AACH;;AACD,MAAI,OAAOD,KAAP,KAAiB,QAAjB,IAA6BC,OAAjC,EAA0C;AACtC,SAAK,MAAMI,CAAX,IAAgBL,KAAhB,EAAuB;AACnBA,MAAAA,KAAK,CAACK,CAAD,CAAL,GAAWN,cAAc,CAACC,KAAK,CAACK,CAAD,CAAN,CAAzB;AACH;AACJ;;AACD,SAAOL,KAAP;AACH,CAbD;;eAee,MAAiE;AAC5E,SAAO;AACHM,IAAAA,IAAI,EAAE,4BADH;AAEHC,IAAAA,IAAI,EAAE,sCAFH;AAGHC,IAAAA,SAAS,EAAE,WAHR;;AAIH,UAAMC,WAAN,CAAkB;AAAEC,MAAAA,KAAF;AAASV,MAAAA,KAAK,EAAEW;AAAhB,KAAlB,EAAkD;AAC9C,UAAI,CAACA,YAAL,EAAmB;AACf,eAAOA,YAAP;AACH,OAFD,MAEO,IAAI,OAAOA,YAAP,KAAwB,QAA5B,EAAsC;AACzC,cAAM,IAAIC,cAAJ,CACD,uEAAsEF,KAAK,CAACG,OAAQ,IADnF,CAAN;AAGH;AACD;AACZ;AACA;AACA;;;AACY,UAAIF,YAAY,CAACG,cAAb,CAA4B,aAA5B,MAA+C,KAAnD,EAA0D;AACtD,eAAOH,YAAP;AACH;;AACD,YAAM;AAAEI,QAAAA,WAAF;AAAef,QAAAA;AAAf,UAAyBW,YAA/B;;AACA,UAAI,CAACI,WAAL,EAAkB;AACd,cAAM,IAAIH,cAAJ,CACD,2DACGF,KAAK,CAACG,OACT,MAAKG,IAAI,CAACC,SAAL,CAAeN,YAAf,CAA6B,GAHjC,EAIF,qBAJE,EAKF;AACIX,UAAAA,KAAK,EAAEW;AADX,SALE,CAAN;AASH;;AACD,UAAII,WAAW,KAAK,UAApB,EAAgC;AAC5B,cAAM,IAAIH,cAAJ,CACD,oEADC,EAEF,mBAFE,EAGF;AACIG,UAAAA;AADJ,SAHE,CAAN;AAOH;;AACD,UAAI;AACA,eAAOG,kBAASC,MAAT,CAAgBnB,KAAhB,CAAP;AACH,OAFD,CAEE,MAAM;AACJ,eAAO,IAAP;AACH;AACJ,KA7CE;;AA8CH,UAAMoB,SAAN,CAAgB;AAAEpB,MAAAA;AAAF,KAAhB,EAA2B;AACvB;AACZ;AACA;AACA;AACY,UAAIA,KAAK,IAAIA,KAAK,CAACc,cAAN,CAAqB,aAArB,MAAwC,IAArD,EAA2D;AACvD,eAAOd,KAAP;AACH;;AACDA,MAAAA,KAAK,GAAGD,cAAc,CAACC,KAAD,CAAtB;AACA,aAAO;AACHe,QAAAA,WAAW,EAAE,UADV;AAEHf,QAAAA,KAAK,EAAEA,KAAK,GAAGkB,kBAASG,IAAT,CAAcrB,KAAd,CAAH,GAA0BA;AAFnC,OAAP;AAIH;;AA3DE,GAAP;AA6DH,C","sourcesContent":["import jsonpack from \"jsonpack\";\nimport WebinyError from \"@webiny/error\";\nimport { CmsModelFieldToStoragePlugin } from \"@webiny/api-headless-cms/types\";\n\nexport type OriginalValue = Record<string, any> | any[];\n\nexport interface StorageValue {\n    compression: string;\n    value: any;\n}\n\n/**\n * Remove when jsonpack gets PR with a fix merged\n * https://github.com/rgcl/jsonpack/pull/25/files\n * NOTE 2021-07-28: it seems PR is not going to be merged so keep this.\n */\nconst transformArray = (value: Record<string, any> | any[]) => {\n    let isArray = Array.isArray(value);\n    const shouldBeArray = value instanceof Array === false && isArray;\n    if (shouldBeArray) {\n        value = Array.from(value as any);\n        isArray = true;\n    }\n    if (typeof value === \"object\" || isArray) {\n        for (const k in value) {\n            value[k] = transformArray(value[k]);\n        }\n    }\n    return value;\n};\n\nexport default (): CmsModelFieldToStoragePlugin<OriginalValue, StorageValue> => {\n    return {\n        type: \"cms-model-field-to-storage\",\n        name: \"cms-model-field-to-storage-rich-text\",\n        fieldType: \"rich-text\",\n        async fromStorage({ field, value: storageValue }) {\n            if (!storageValue) {\n                return storageValue;\n            } else if (typeof storageValue !== \"object\") {\n                throw new WebinyError(\n                    `Value received in \"fromStorage\" function is not an object in field \"${field.fieldId}\".`\n                );\n            }\n            /**\n             * This is to circumvent a bug introduced with 5.8.0 storage operations.\n             * Do not remove.\n             */\n            if (storageValue.hasOwnProperty(\"compression\") === false) {\n                return storageValue;\n            }\n            const { compression, value } = storageValue;\n            if (!compression) {\n                throw new WebinyError(\n                    `Missing compression in \"fromStorage\" function in field \"${\n                        field.fieldId\n                    }\": ${JSON.stringify(storageValue)}.`,\n                    \"MISSING_COMPRESSION\",\n                    {\n                        value: storageValue\n                    }\n                );\n            }\n            if (compression !== \"jsonpack\") {\n                throw new WebinyError(\n                    `This plugin cannot transform something not packed with \"jsonpack\".`,\n                    \"WRONG_COMPRESSION\",\n                    {\n                        compression\n                    }\n                );\n            }\n            try {\n                return jsonpack.unpack(value);\n            } catch {\n                return null;\n            }\n        },\n        async toStorage({ value }) {\n            /**\n             * There is a possibility that we are trying to compress already compressed value.\n             * Introduced a bug with 5.8.0 storage operations, so just return the value to correct it.\n             */\n            if (value && value.hasOwnProperty(\"compression\") === true) {\n                return value as any;\n            }\n            value = transformArray(value);\n            return {\n                compression: \"jsonpack\",\n                value: value ? jsonpack.pack(value) : value\n            };\n        }\n    };\n};\n"],"file":"richText.js"}