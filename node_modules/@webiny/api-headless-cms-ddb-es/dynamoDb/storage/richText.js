"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _jsonpack = _interopRequireDefault(require("jsonpack"));

var _error = _interopRequireDefault(require("@webiny/error"));

/**
 * Remove when jsonpack gets PR with a fix merged
 * https://github.com/rgcl/jsonpack/pull/25/files
 * NOTE 2021-07-28: it seems PR is not going to be merged so keep this.
 */
const transformArray = value => {
  let isArray = Array.isArray(value);
  const shouldBeArray = value instanceof Array === false && isArray;

  if (shouldBeArray) {
    value = Array.from(value);
    isArray = true;
  }

  if (typeof value === "object" || isArray) {
    for (const k in value) {
      value[k] = transformArray(value[k]);
    }
  }

  return value;
};

var _default = () => {
  return {
    type: "cms-model-field-to-storage",
    name: "cms-model-field-to-storage-rich-text",
    fieldType: "rich-text",

    async fromStorage({
      field,
      value: storageValue
    }) {
      if (!storageValue) {
        return storageValue;
      } else if (typeof storageValue !== "object") {
        throw new _error.default(`Value received in "fromStorage" function is not an object in field "${field.fieldId}".`);
      }
      /**
       * This is to circumvent a bug introduced with 5.8.0 storage operations.
       * Do not remove.
       */


      if (storageValue.hasOwnProperty("compression") === false) {
        return storageValue;
      }

      const {
        compression,
        value
      } = storageValue;

      if (!compression) {
        throw new _error.default(`Missing compression in "fromStorage" function in field "${field.fieldId}": ${JSON.stringify(storageValue)}.`, "MISSING_COMPRESSION", {
          value: storageValue
        });
      }

      if (compression !== "jsonpack") {
        throw new _error.default(`This plugin cannot transform something not packed with "jsonpack".`, "WRONG_COMPRESSION", {
          compression
        });
      }

      try {
        return _jsonpack.default.unpack(value);
      } catch {
        return null;
      }
    },

    async toStorage({
      value
    }) {
      /**
       * There is a possibility that we are trying to compress already compressed value.
       * Introduced a bug with 5.8.0 storage operations, so just return the value to correct it.
       */
      if (value && value.hasOwnProperty("compression") === true) {
        return value;
      }

      value = transformArray(value);
      return {
        compression: "jsonpack",
        value: value ? _jsonpack.default.pack(value) : value
      };
    }

  };
};

exports.default = _default;
//# sourceMappingURL=richText.js.map