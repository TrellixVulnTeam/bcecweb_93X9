import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _cloneDeep from "lodash/cloneDeep";
import _get from "lodash/get";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useMemo } from "react";
import { useApolloClient } from "@apollo/react-hooks";
import { Input } from "@webiny/ui/Input";
import { Form } from "@webiny/form";
import { validation } from "@webiny/validation";
import { useSnackbar } from "../../../hooks/useSnackbar";
import { UPDATE_FILE, LIST_FILES } from "./../graphql";
import { useFileManager } from "./../FileManagerContext";

function Name(_ref) {
  var file = _ref.file,
      canEdit = _ref.canEdit;
  var name = file.name || "";

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var client = useApolloClient();

  var _useFileManager = useFileManager(),
      queryParams = _useFileManager.queryParams;

  var editContent = useMemo(function () {
    return /*#__PURE__*/React.createElement(Form, {
      data: {
        name: name
      },
      onSubmit: /*#__PURE__*/function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {
          var name;
          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  name = _ref2.name;

                  if (!(name === file.name)) {
                    _context.next = 3;
                    break;
                  }

                  return _context.abrupt("return");

                case 3:
                  _context.next = 5;
                  return client.mutate({
                    mutation: UPDATE_FILE,
                    variables: {
                      id: file.id,
                      data: {
                        name: name
                      }
                    },
                    update: function update(cache, updated) {
                      var newFileData = _get(updated, "data.fileManager.updateFile.data");

                      var data = _cloneDeep(cache.readQuery({
                        query: LIST_FILES,
                        variables: queryParams
                      }));

                      data.fileManager.listFiles.data.forEach(function (item) {
                        if (item.src === newFileData.src) {
                          item.name = newFileData.name;
                        }
                      });
                      cache.writeQuery({
                        query: LIST_FILES,
                        variables: queryParams,
                        data: data
                      });
                    }
                  });

                case 5:
                  showSnackbar("Name successfully updated.");

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function (_x) {
          return _ref3.apply(this, arguments);
        };
      }()
    }, function (_ref4) {
      var Bind = _ref4.Bind,
          submit = _ref4.submit;
      return /*#__PURE__*/React.createElement(Bind, {
        name: "name",
        validators: validation.create("required")
      }, /*#__PURE__*/React.createElement(Input, {
        disabled: !canEdit(file),
        autoFocus: true,
        placeholder: "Enter name",
        fullwidth: true,
        onBlur: submit,
        description: "A descriptive name is easier to remember."
      }));
    });
  }, [name, file.name, canEdit]);
  return /*#__PURE__*/React.createElement("li-content", null, editContent);
}

export default Name;
//# sourceMappingURL=Name.js.map