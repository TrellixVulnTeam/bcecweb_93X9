import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import invariant from "invariant";
import minimatch from "minimatch";
import { plugins } from "@webiny/plugins";
import { FileManagerFileTypePlugin } from "../../plugins/FileManagerFileTypePlugin";
export default function getFileTypePlugin(file) {
  if (!file) {
    return null;
  }

  var fileTypePlugins = [].concat(_toConsumableArray(plugins.byType("admin-file-manager-file-type")), _toConsumableArray(plugins.byType(FileManagerFileTypePlugin.type)));
  var plugin = null;

  for (var i = 0; i < fileTypePlugins.length; i++) {
    // We don't want to include the global wildcard in this check.
    var types = fileTypePlugins[i].types;

    if (types.find(function (t) {
      return minimatch(file.type, t);
    })) {
      plugin = fileTypePlugins[i];
    }
  }

  invariant(plugin, "Missing plugin to handle \"".concat(file.type, "\"!"));
  return plugin;
}
//# sourceMappingURL=getFileTypePlugin.js.map