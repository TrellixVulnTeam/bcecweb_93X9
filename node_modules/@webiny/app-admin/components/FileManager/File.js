import React from "react";
import LazyLoad from "react-lazy-load";
import classNames from "classnames";
import { css, keyframes } from "emotion";
import { Ripple } from "@webiny/ui/Ripple";
import { IconButton } from "@webiny/ui/Button";
import { ReactComponent as Checked } from "@svgr/webpack!./icons/round-check_box-24px.svg";
import { ReactComponent as SettingsIcon } from "@svgr/webpack!../../assets/icons/round-settings-24px.svg";
var COMPONENT_WIDTH = 200;
var COMPONENT_HEIGHT = 200;
var grow = /*#__PURE__*/keyframes("0%{transform:scale(1)}50%{transform:scale(1.2)}100%{transform:scale(1)}label:grow;");
var styles = /*#__PURE__*/css({
  display: "inline-block",
  float: "left",
  position: "relative",
  zIndex: 1,
  margin: 10,
  cursor: "pointer",
  width: "100%",
  maxWidth: COMPONENT_WIDTH,
  border: "1px solid var(--mdc-theme-on-background)",
  borderRadius: 2,
  "> .body": {
    transition: "200ms ease-in opacity",
    width: COMPONENT_WIDTH,
    height: COMPONENT_HEIGHT,
    overflow: "hidden",
    "--icon-color": "var(--mdc-theme-on-background)",
    ".checkedIcon": {
      color: "var(--mdc-theme-secondary)",
      position: "absolute",
      top: 4,
      left: 4,
      zIndex: 11
    },
    ".infoIcon": {
      opacity: 0,
      position: "absolute",
      top: 0,
      right: 0,
      zIndex: 10,
      transition: "all 150ms ease-in",
      "& .mdc-icon-button svg": {
        color: "var(--mdc-theme-secondary)"
      },
      "&:hover": {
        animationName: grow,
        animationDuration: ".4s",
        animationTimingFunction: "ease-in",
        animationDelay: ".2s"
      }
    },
    ".filePreview": {
      textAlign: "center",
      position: "relative",
      backgroundColor: "#fff",
      width: "100%",
      height: "100%",
      ".clickableArea": {
        position: "absolute",
        top: 30,
        left: 0,
        width: "100%",
        height: 170,
        zIndex: 2
      }
    },
    "&:hover .infoIcon": {
      opacity: 1
    }
  },
  "> .label": {
    padding: "15px 10px",
    whiteSpace: "nowrap",
    overflow: "hidden",
    textOverflow: "ellipsis",
    fontSize: "0.8rem",
    color: "var(--mdc-theme-on-surface)",
    backgroundColor: "var(--mdc-theme-on-background)"
  },
  "&.disable-select": {
    cursor: "auto"
  }
}, "label:styles;");
export default /*#__PURE__*/React.memo(function File(props) {
  var file = props.file,
      selected = props.selected,
      onSelect = props.onSelect,
      children = props.children,
      showFileDetails = props.showFileDetails;
  return /*#__PURE__*/React.createElement("div", {
    className: classNames(styles, {
      "disable-select": !onSelect
    }),
    "data-testid": "fm-list-wrapper-file"
  }, /*#__PURE__*/React.createElement("div", {
    className: "body"
  }, /*#__PURE__*/React.createElement("div", {
    className: "checkedIcon",
    onClick: onSelect
  }, selected ? /*#__PURE__*/React.createElement(Checked, null) : null), /*#__PURE__*/React.createElement("div", {
    className: "infoIcon"
  }, /*#__PURE__*/React.createElement(IconButton, {
    icon: /*#__PURE__*/React.createElement(SettingsIcon, null),
    onClick: showFileDetails,
    "data-testid": "fm-file-wrapper-file-info-icon"
  })), /*#__PURE__*/React.createElement(LazyLoad, {
    height: 200,
    offsetVertical: 300
  }, /*#__PURE__*/React.createElement(Ripple, null, /*#__PURE__*/React.createElement("div", {
    className: "filePreview"
  }, /*#__PURE__*/React.createElement("div", {
    className: "clickableArea",
    onClick: onSelect
  }), children)))), /*#__PURE__*/React.createElement("div", {
    className: "label",
    onClick: onSelect
  }, file.name));
}, function (prev, next) {
  if (prev.selected !== next.selected) {
    return false;
  }

  if (prev.file.name !== next.file.name) {
    return false;
  }

  return true;
});
//# sourceMappingURL=File.js.map