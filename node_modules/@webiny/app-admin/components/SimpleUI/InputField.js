import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["className", "value", "onChange", "label", "description", "validation", "defaultValue"];
import React from "react";
import { css } from "emotion";
import classNames from "classnames";
import omit from "lodash/omit";
import { Typography } from "@webiny/ui/Typography";
import { FormElementMessage } from "@webiny/ui/FormElementMessage";
var inputStyle = /*#__PURE__*/css({
  boxSizing: "border-box",
  border: "1px solid var(--mdc-theme-on-background)",
  width: "100%",
  height: "100%",
  padding: "4px 8px",
  textAlign: "left",
  minHeight: 32,
  backgroundColor: "var(--mdc-theme-surface)",
  transition: "150ms all ease-in-out",
  "&:focus:not(:disabled)": {
    backgroundColor: "var(--mdc-theme-on-background)"
  },
  "&:hover:not(:disabled)": {
    backgroundColor: "var(--mdc-theme-on-background)"
  },
  "&:disabled": {
    opacity: 0.5,
    cursor: "not-allowed"
  },
  "&.text-center": {
    textAlign: "center",
    padding: 4
  },
  "&::-webkit-inner-spin-button": {
    WebkitAppearance: "none",
    margin: 0
  },
  "&::-webkit-outer-spin-button": {
    WebkitAppearance: "none",
    margin: 0
  }
}, "label:inputStyle;");
var labelStyle = /*#__PURE__*/css({
  marginBottom: 8,
  padding: "0px 8px",
  "& span": {
    color: "var(--mdc-theme-text-primary-on-background)"
  }
}, "label:labelStyle;");

var getValue = function getValue(_ref) {
  var value = _ref.value,
      defaultValue = _ref.defaultValue,
      type = _ref.type;

  if (type === "number") {
    return isNaN(value) ? defaultValue : value;
  }

  return value || defaultValue;
};

var InputField = function InputField(_ref2) {
  var className = _ref2.className,
      value = _ref2.value,
      _onChange = _ref2.onChange,
      label = _ref2.label,
      description = _ref2.description,
      _ref2$validation = _ref2.validation,
      validation = _ref2$validation === void 0 ? {
    isValid: true
  } : _ref2$validation,
      _ref2$defaultValue = _ref2.defaultValue,
      defaultValue = _ref2$defaultValue === void 0 ? "" : _ref2$defaultValue,
      props = _objectWithoutProperties(_ref2, _excluded);

  return /*#__PURE__*/React.createElement(React.Fragment, null, label && /*#__PURE__*/React.createElement("div", {
    className: labelStyle
  }, /*#__PURE__*/React.createElement(Typography, {
    use: "subtitle2"
  }, label)), /*#__PURE__*/React.createElement("input", Object.assign({
    className: classNames(inputStyle, className),
    value: getValue({
      value: value,
      type: props.type,
      defaultValue: defaultValue
    }),
    onChange: function onChange(_ref3) {
      var value = _ref3.target.value;

      _onChange(value.toLowerCase());
    }
  }, omit(props, "validate"))), validation.isValid === false && /*#__PURE__*/React.createElement(FormElementMessage, {
    error: true
  }, validation.message), validation.isValid !== false && description && /*#__PURE__*/React.createElement(FormElementMessage, null, description));
};

export default /*#__PURE__*/React.memo(InputField);
//# sourceMappingURL=InputField.js.map