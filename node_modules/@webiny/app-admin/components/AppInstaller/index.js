import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useEffect, useState } from "react";
import { useSecurity } from "@webiny/app-security";
import { CircularProgress } from "@webiny/ui/Progress";
import { ButtonPrimary } from "@webiny/ui/Button";
import { SplitView, LeftPanel, RightPanel } from "../SplitView";
import { Grid, Cell } from "@webiny/ui/Grid";
import { Typography } from "@webiny/ui/Typography";
import { Elevation } from "@webiny/ui/Elevation";
import { View } from "@webiny/app/components/View";
import { useInstaller } from "./useInstaller";
import Sidebar from "./Sidebar";
import { Wrapper, alertClass, InnerContent, InstallContent, installerSplitView, SuccessDialog } from "./styled";

var markInstallerAsCompleted = function markInstallerAsCompleted() {
  return localStorage["wby_installer_status"] = process.env.REACT_APP_WEBINY_VERSION;
};

var installerCompleted = localStorage["wby_installer_status"] === process.env.REACT_APP_WEBINY_VERSION;
export var AppInstaller = function AppInstaller(_ref) {
  var children = _ref.children;

  if (installerCompleted) {
    return children;
  }

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      finished = _useState2[0],
      setFinished = _useState2[1];

  var _useSecurity = useSecurity(),
      identity = _useSecurity.identity;

  var _useInstaller = useInstaller(),
      loading = _useInstaller.loading,
      installers = _useInstaller.installers,
      installer = _useInstaller.installer,
      showNextInstaller = _useInstaller.showNextInstaller,
      showLogin = _useInstaller.showLogin,
      onUser = _useInstaller.onUser,
      skippingVersions = _useInstaller.skippingVersions;

  useEffect(function () {
    if (identity) {
      onUser();
    }
  }, [identity]);

  var renderLayout = function renderLayout(content) {
    var secure = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    return /*#__PURE__*/React.createElement(SplitView, {
      className: installerSplitView
    }, /*#__PURE__*/React.createElement(LeftPanel, {
      span: 2
    }, /*#__PURE__*/React.createElement(Sidebar, {
      allInstallers: installers,
      installer: installer,
      showLogin: showLogin
    })), /*#__PURE__*/React.createElement(RightPanel, {
      span: 10
    }, !showLogin && !secure && content, (showLogin || secure) && /*#__PURE__*/React.createElement(View, {
      name: "admin.installation.secureInstaller"
    }, content)));
  };

  var renderBody = function renderBody(content) {
    return /*#__PURE__*/React.createElement(Wrapper, null, /*#__PURE__*/React.createElement(InstallContent, null, /*#__PURE__*/React.createElement(InnerContent, null, content)));
  }; // Loading installers data


  if (loading) {
    return /*#__PURE__*/React.createElement(CircularProgress, {
      label: "Checking apps..."
    });
  } // This means there are no installers to run or installation was finished


  if (!loading && (installers.length === 0 || finished)) {
    markInstallerAsCompleted();
    return children;
  }

  if (installer) {
    return renderLayout(renderBody(installer.render({
      onInstalled: showNextInstaller
    })), installer.secure);
  }

  if (skippingVersions) {
    return renderBody( /*#__PURE__*/React.createElement(Elevation, {
      z: 1,
      className: alertClass
    }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Typography, {
      use: "headline4"
    }, "Important!")), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Typography, {
      use: "body1",
      tag: "div"
    }, "We've detected that your current application is running Webiny", " ", /*#__PURE__*/React.createElement("strong", null, "v", skippingVersions.latest), ". However, your API is running ", /*#__PURE__*/React.createElement("strong", null, "v", skippingVersions.current), ". Unfortunately, we can't upgrade your system by skipping versions in between.", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), "Here's a list of versions you skipped, that contain upgrades you need to install:", /*#__PURE__*/React.createElement("ul", null, skippingVersions.availableUpgrades.filter(function (v) {
      return v !== skippingVersions.latest;
    }).map(function (v) {
      return /*#__PURE__*/React.createElement("li", {
        key: v
      }, "v", v);
    })), "For instructions on how to upgrade Webiny, please consult our", " ", /*#__PURE__*/React.createElement("a", {
      href: "https://docs.webiny.com/docs/how-to-guides/upgrade-webiny",
      target: "_blank",
      rel: "noreferrer noopener"
    }, "Upgrade Webiny"), " ", "guide. Note that some versions may have a dedicated article with upgrade instructions, so look out for those in the upgrade guide.", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), "If you run into problems, find us on our", " ", /*#__PURE__*/React.createElement("a", {
      href: "https://www.webiny.com/slack",
      target: "_blank",
      rel: "noreferrer noopener"
    }, "Slack community."))))));
  }

  return renderLayout(renderBody( /*#__PURE__*/React.createElement(Elevation, {
    z: 1
  }, /*#__PURE__*/React.createElement(SuccessDialog, null, /*#__PURE__*/React.createElement("p", null, "You have successfully installed all new applications!"), /*#__PURE__*/React.createElement(ButtonPrimary, {
    "data-testid": "open-webiny-cms-admin-button",
    onClick: function onClick() {
      markInstallerAsCompleted();
      setFinished(true);
    }
  }, "Open Admin Area")))), true);
};
//# sourceMappingURL=index.js.map