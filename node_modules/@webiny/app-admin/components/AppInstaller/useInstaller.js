import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["children"];
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useCallback, useReducer, useEffect, Suspense } from "react";
import { Graph, alg } from "graphlib";
import { sort, gt, lte } from "semver";
import { useApolloClient } from "@apollo/react-hooks";
import { plugins } from "@webiny/plugins";
import { CircularProgress } from "@webiny/ui/Progress";

var Loader = function Loader(_ref) {
  var children = _ref.children,
      props = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/React.createElement(Suspense, {
    fallback: /*#__PURE__*/React.createElement(CircularProgress, {
      label: "Loading..."
    })
  }, /*#__PURE__*/React.cloneElement(children, props));
};

export var useInstaller = function useInstaller() {
  var _useReducer = useReducer(function (prev, next) {
    return _objectSpread(_objectSpread({}, prev), next);
  }, {
    loading: true,
    installers: [],
    installerIndex: -1,
    showLogin: false,
    skippingVersions: false
  }),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      _useReducer2$ = _useReducer2[0],
      loading = _useReducer2$.loading,
      installers = _useReducer2$.installers,
      installerIndex = _useReducer2$.installerIndex,
      showLogin = _useReducer2$.showLogin,
      skippingVersions = _useReducer2$.skippingVersions,
      setState = _useReducer2[1];

  var client = useApolloClient();

  var validateGraph = function validateGraph(graph) {
    var isAcyclic = alg.isAcyclic(graph);

    if (!isAcyclic) {
      var cycles = alg.findCycles(graph);
      var msg = ["Your installers have circular dependencies:"];
      cycles.forEach(function (cycle, index) {
        var fromAToB = cycle.join(" --> ");
        fromAToB = "".concat(index + 1, ". ").concat(fromAToB);
        var fromBToA = cycle.reverse().join(" <-- ");
        var padLength = fromAToB.length + 4;
        msg.push(fromAToB.padStart(padLength));
        msg.push(fromBToA.padStart(padLength));
      }, cycles);
      throw new Error(msg.join("\n"));
    }
  };

  var createGraph = function createGraph(installers) {
    var graph = new Graph();
    installers.forEach(function (_ref2) {
      var plugin = _ref2.plugin;
      graph.setNode(plugin.name, plugin);
    });
    installers.forEach(function (_ref3) {
      var pl = _ref3.plugin;

      if (Array.isArray(pl.dependencies)) {
        pl.dependencies.forEach(function (dep) {
          graph.setEdge(pl.name, dep);
        });
      }
    });
    validateGraph(graph);
    return graph;
  };

  var getInstallers = useCallback(function (installers, graph) {
    var toInstall = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var toUpgrade = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
    var leaf = graph.sinks()[0];

    if (leaf) {
      var installer = installers.find(function (inst) {
        return inst.plugin.name === leaf;
      });

      if (!installer) {
        throw new Error("Missing installer plugin \"".concat(leaf, "\"!"));
      }

      graph.removeNode(leaf);

      if (!installer.installed) {
        toInstall.push({
          type: "install",
          name: "".concat(installer.plugin.name, "-install"),
          title: installer.plugin.title,
          render: installer.plugin.render,
          secure: installer.plugin.secure,
          installed: false
        });
      } else {
        var upgrades = (installer.plugin.upgrades || []).filter(function (_ref4) {
          var version = _ref4.version;
          return lte(version, process.env.REACT_APP_WEBINY_VERSION) && gt(version, installer.installed);
        });

        if (upgrades.length > 1) {
          var availableUpgrades = sort(upgrades.map(function (u) {
            return u.version;
          }));
          var latestUpgrade = availableUpgrades[availableUpgrades.length - 1];
          setState({
            skippingVersions: {
              current: installer.installed,
              latest: latestUpgrade,
              availableUpgrades: availableUpgrades
            }
          });
        } else if (upgrades.length === 1) {
          toUpgrade.push({
            type: "upgrade",
            name: "".concat(installer.plugin.name, "-upgrade"),
            title: installer.plugin.title,
            secure: true,
            installed: false,
            render: function render(_ref5) {
              var onInstalled = _ref5.onInstalled;
              var Component = upgrades[0].getComponent();
              return /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Component, {
                onInstalled: onInstalled
              }));
            }
          });
        }
      }

      return getInstallers(installers, graph, toInstall, toUpgrade);
    }

    return {
      toInstall: toInstall,
      toUpgrade: toUpgrade
    };
  }, []);

  var onUser = function onUser() {
    setState({
      showLogin: false
    });
  };

  var showNextInstaller = function showNextInstaller() {
    var prevInstaller = installers[installerIndex];
    installers[installerIndex].installed = true;
    setState({
      installers: installers
    });

    if (installers.length < installerIndex + 1) {
      setState({
        installerIndex: null
      });
      return;
    }

    var nextIndex = installerIndex + 1;
    var showLogin = false;
    var nextInstaller = installers[nextIndex];
    var prevSecure = prevInstaller && prevInstaller.secure;
    var nextSecure = nextInstaller && nextInstaller.secure;

    if (!prevSecure && nextSecure) {
      showLogin = true;
    }

    setState({
      installerIndex: nextIndex,
      showLogin: showLogin
    });
  };

  useEffect(function () {
    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
      var allInstallers, graph, _getInstallers, toInstall, toUpgrade, installers;

      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              allInstallers = [];
              _context2.next = 3;
              return Promise.all(plugins.byType("admin-installation").map( /*#__PURE__*/function () {
                var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(pl) {
                  var installed;
                  return _regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.next = 2;
                          return pl.getInstalledVersion({
                            client: client
                          });

                        case 2:
                          installed = _context.sent;
                          allInstallers.push({
                            plugin: pl,
                            installed: installed
                          });

                        case 4:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }));

                return function (_x) {
                  return _ref7.apply(this, arguments);
                };
              }()));

            case 3:
              graph = createGraph(allInstallers);
              _getInstallers = getInstallers(allInstallers, graph), toInstall = _getInstallers.toInstall, toUpgrade = _getInstallers.toUpgrade;
              installers = [].concat(_toConsumableArray(toUpgrade), _toConsumableArray(toInstall));
              setState({
                installers: installers,
                installerIndex: 0,
                loading: false,
                showLogin: toUpgrade.length > 0 || toInstall.length > 0 && toInstall[0].secure
              });

            case 7:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }))();
  }, []);
  return {
    loading: loading,
    installers: installers,
    installer: installers[installerIndex],
    showNextInstaller: showNextInstaller,
    showLogin: showLogin,
    onUser: onUser,
    skippingVersions: skippingVersions
  };
};
//# sourceMappingURL=useInstaller.js.map