import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
var _excluded = ["children"];
import * as React from "react";
import ReactDOM from "react-dom";
import FileManagerView from "./FileManager/FileManagerView";
import pick from "lodash/pick";
import { FileManagerProvider } from "./FileManager/FileManagerContext";
var useState = React.useState,
    useRef = React.useRef,
    useCallback = React.useCallback,
    useEffect = React.useEffect;

var FileManagerPortal = /*#__PURE__*/function (_React$Component) {
  _inherits(FileManagerPortal, _React$Component);

  var _super = _createSuper(FileManagerPortal);

  function FileManagerPortal(props) {
    var _this;

    _classCallCheck(this, FileManagerPortal);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "container", void 0);

    if (!window) {
      return _possibleConstructorReturn(_this);
    }

    _this.container = window.document.getElementById("file-manager-container");

    if (!_this.container) {
      _this.container = document.createElement("div");

      _this.container.setAttribute("id", "file-manager-container");

      var container = _this.container;
      document.body && document.body.appendChild(container);
    }

    return _this;
  }

  _createClass(FileManagerPortal, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          onChange = _this$props.onChange,
          onClose = _this$props.onClose,
          accept = _this$props.accept,
          onChangePick = _this$props.onChangePick,
          multiple = _this$props.multiple,
          images = _this$props.images,
          maxSize = _this$props.maxSize,
          multipleMaxCount = _this$props.multipleMaxCount,
          multipleMaxSize = _this$props.multipleMaxSize;
      var container = this.container;

      var handleFileOnChange = function handleFileOnChange(files) {
        var fields = Array.isArray(onChangePick) ? onChangePick : ["id", "name", "key", "src", "size", "type"];

        if (Array.isArray(files)) {
          onChange(files.map(function (file) {
            return pick(file, fields);
          }));
        } else {
          onChange(pick(files, fields));
        }
      };

      var props = {
        onChange: typeof onChange === "function" ? handleFileOnChange : undefined,
        onClose: onClose,
        accept: accept,
        multiple: multiple,
        maxSize: maxSize,
        multipleMaxCount: multipleMaxCount,
        multipleMaxSize: multipleMaxSize
      };

      if (images) {
        props.accept = ["image/jpg", "image/jpeg", "image/gif", "image/png", "image/svg+xml"];
      } // Let's pass "permanent" / "persistent" / "temporary" flags as "mode" prop instead.


      return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/React.createElement(FileManagerProvider, props, /*#__PURE__*/React.createElement(FileManagerView, props)), container);
    }
  }]);

  return FileManagerPortal;
}(React.Component);

export function FileManager(_ref) {
  var children = _ref.children,
      rest = _objectWithoutProperties(_ref, _excluded);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      show = _useState2[0],
      setShow = _useState2[1];

  var onChangeRef = useRef(rest.onChange);
  useEffect(function () {
    onChangeRef.current = rest.onChange;
  }, [rest.onChange]);
  var showFileManager = useCallback(function (onChange) {
    if (typeof onChange === "function") {
      onChangeRef.current = onChange;
    }

    setShow(true);
  }, []);
  return /*#__PURE__*/React.createElement(React.Fragment, null, show && /*#__PURE__*/React.createElement(FileManagerPortal, Object.assign({
    onClose: function onClose() {
      return setShow(false);
    }
  }, rest, {
    onChange: onChangeRef.current
  })), children({
    showFileManager: showFileManager
  }));
}
//# sourceMappingURL=FileManager.js.map