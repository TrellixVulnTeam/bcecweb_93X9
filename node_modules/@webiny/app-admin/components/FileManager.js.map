{"version":3,"sources":["../../src/components/FileManager.tsx"],"names":["React","ReactDOM","FileManagerView","pick","FileManagerProvider","useState","useRef","useCallback","useEffect","FileManagerPortal","props","window","container","document","getElementById","createElement","setAttribute","body","appendChild","onChange","onClose","accept","onChangePick","multiple","images","maxSize","multipleMaxCount","multipleMaxSize","handleFileOnChange","files","fields","Array","isArray","map","file","undefined","createPortal","Component","FileManager","children","rest","show","setShow","onChangeRef","current","showFileManager"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport FileManagerView from \"./FileManager/FileManagerView\";\nimport pick from \"lodash/pick\";\nimport { FileManagerProvider } from \"./FileManager/FileManagerContext\";\n\ntype FileManagerProps = {\n    onChange?: Function;\n    onChangePick?: string[];\n    images?: boolean;\n    multiple?: boolean;\n    accept?: Array<string>;\n    children: ({ showFileManager: Function }) => React.ReactNode;\n    maxSize?: number | string;\n    multipleMaxCount?: number;\n    multipleMaxSize?: number | string;\n    onClose?: Function;\n};\n\ntype FileManagerPortalProps = Omit<FileManagerProps, \"children\">;\n\nconst { useState, useRef, useCallback, useEffect } = React;\n\nclass FileManagerPortal extends React.Component<FileManagerPortalProps> {\n    container: Element;\n    constructor(props) {\n        super(props);\n\n        if (!window) {\n            return;\n        }\n\n        this.container = window.document.getElementById(\"file-manager-container\");\n\n        if (!this.container) {\n            this.container = document.createElement(\"div\");\n            this.container.setAttribute(\"id\", \"file-manager-container\");\n            const container = this.container;\n            document.body && document.body.appendChild(container);\n        }\n    }\n\n    render() {\n        const {\n            onChange,\n            onClose,\n            accept,\n            onChangePick,\n            multiple,\n            images,\n            maxSize,\n            multipleMaxCount,\n            multipleMaxSize\n        } = this.props;\n\n        const container = this.container;\n\n        const handleFileOnChange = files => {\n            const fields = Array.isArray(onChangePick)\n                ? onChangePick\n                : [\"id\", \"name\", \"key\", \"src\", \"size\", \"type\"];\n            if (Array.isArray(files)) {\n                onChange(files.map(file => pick(file, fields)));\n            } else {\n                onChange(pick(files, fields));\n            }\n        };\n\n        const props = {\n            onChange: typeof onChange === \"function\" ? handleFileOnChange : undefined,\n            onClose,\n            accept,\n            multiple,\n            maxSize,\n            multipleMaxCount,\n            multipleMaxSize\n        };\n\n        if (images) {\n            props.accept = [\"image/jpg\", \"image/jpeg\", \"image/gif\", \"image/png\", \"image/svg+xml\"];\n        }\n\n        // Let's pass \"permanent\" / \"persistent\" / \"temporary\" flags as \"mode\" prop instead.\n        return ReactDOM.createPortal(\n            <FileManagerProvider {...props}>\n                <FileManagerView {...props} />\n            </FileManagerProvider>,\n            container\n        );\n    }\n}\n\nexport function FileManager({ children, ...rest }: FileManagerProps) {\n    const [show, setShow] = useState(false);\n    const onChangeRef = useRef(rest.onChange);\n\n    useEffect(() => {\n        onChangeRef.current = rest.onChange;\n    }, [rest.onChange]);\n\n    const showFileManager = useCallback(onChange => {\n        if (typeof onChange === \"function\") {\n            onChangeRef.current = onChange;\n        }\n        setShow(true);\n    }, []);\n\n    return (\n        <>\n            {show && (\n                <FileManagerPortal\n                    onClose={() => setShow(false)}\n                    {...rest}\n                    onChange={onChangeRef.current}\n                />\n            )}\n            {children({ showFileManager })}\n        </>\n    );\n}\n"],"file":"FileManager.js"}