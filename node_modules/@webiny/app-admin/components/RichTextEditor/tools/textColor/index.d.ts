import { API } from "@editorjs/editorjs";
declare class TextColorTool {
    _state: boolean;
    color: string;
    api: API;
    tag: string;
    class: string;
    colorPicker: HTMLDivElement;
    button: HTMLButtonElement;
    config: {
        themeColors: string[];
    };
    _CSS: any;
    constructor({ api, config }: {
        api: any;
        config: any;
    });
    static get isInline(): boolean;
    /**
     * Sanitize method returns rules to let Editor know which HTML tags it should respect.
     * @returns {object} sanitizer configuration.
     * https://editorjs.io/sanitizer
     */
    static get sanitize(): {
        span: (el: any) => {
            class: string;
            style: any;
        };
    };
    get state(): boolean;
    set state(state: boolean);
    /**
     * Render method must return HTML element of the button for Inline Toolbar.
     */
    render(): HTMLButtonElement;
    /**
     * Input for the link
     */
    renderActions(): HTMLElement;
    /**
     * Finally, when button is pressed Editor calls
     * surround method of the tool with Range object as an argument.
     * @param range
     */
    surround(range: any): void;
    wrap(range: any): void;
    unwrap(range: any): void;
    showActions(mark: any): void;
    hideActions(): void;
    /**
     * CheckState method of each Inline Tool is called by Editor with current `Selection`
     * when user selects some text
     */
    checkState(): void;
    convertToHex(color: any): string;
    clear(): void;
}
export default TextColorTool;
