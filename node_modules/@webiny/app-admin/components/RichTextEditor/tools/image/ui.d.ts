/**
 * Class for working with UI:
 *  - rendering base structure
 *  - show/hide preview
 *  - apply tune view
 */
export default class Ui {
    private api;
    private config;
    private readOnly;
    private onSelectFile;
    nodes: {
        wrapper: HTMLElement;
        imageContainer: HTMLElement;
        fileButton: HTMLElement;
        imageEl: HTMLElement;
        caption: HTMLElement;
    };
    /**
     * @param {object} ui - image tool Ui module
     * @param {object} ui.api - Editor.js API
     * @param {ImageConfig} ui.config - user config
     * @param {Function} ui.onSelectFile - callback for clicks on Select file button
     * @param {boolean} ui.readOnly - read-only mode flag
     */
    constructor({ api, config, onSelectFile, readOnly }: {
        api: any;
        config: any;
        onSelectFile: any;
        readOnly: any;
    });
    /**
     * CSS classes
     *
     * @returns {object}
     */
    get CSS(): {
        baseClass: string;
        input: string;
        button: string;
        /**
         * Tool's classes
         */
        wrapper: string;
        imageContainer: string;
        imageEl: string;
        caption: string;
    };
    /**
     * Ui statuses:
     * - empty
     * - filled
     *
     * @returns {{EMPTY: string, UPLOADING: string, FILLED: string}}
     */
    static get status(): {
        EMPTY: string;
        FILLED: string;
    };
    /**
     * Renders tool UI
     *
     * @param {ImageToolData} toolData - saved tool data
     * @returns {Element}
     */
    render(toolData: any): HTMLElement;
    /**
     * Creates upload-file button
     *
     * @returns {Element}
     */
    createFileButton(): any;
    /**
     * Shows an image
     *
     * @param {string} url - image source
     * @returns {void}
     */
    fillImage(url: any): void;
    /**
     * Shows caption input
     *
     * @param {string} text - caption text
     * @returns {void}
     */
    fillCaption(text: any): void;
    /**
     * Changes UI status
     *
     * @param {string} status - see {@link Ui.status} constants
     * @returns {void}
     */
    toggleStatus(status: any): void;
    /**
     * Apply visual representation of activated tune
     *
     * @param {string} tuneName - one of available tunes {@link Tunes.tunes}
     * @param {boolean} status - true for enable, false for disable
     * @returns {void}
     */
    applyTune(tuneName: any, status: any): void;
}
/**
 * Helper for making Elements with attributes
 *
 * @param  {string} tagName           - new Element tag name
 * @param  {Array|string} classNames  - list or name of CSS class
 * @param  {object} attributes        - any attributes
 * @returns {Element}
 */
export declare const make: (tagName: any, classNames?: any, attributes?: {}) => any;
