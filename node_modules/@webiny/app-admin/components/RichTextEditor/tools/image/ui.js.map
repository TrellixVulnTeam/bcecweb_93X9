{"version":3,"sources":["../../../../../src/components/RichTextEditor/tools/image/ui.ts"],"names":["Ui","api","config","onSelectFile","readOnly","nodes","wrapper","make","CSS","baseClass","imageContainer","fileButton","createFileButton","imageEl","undefined","caption","input","contentEditable","dataset","placeholder","captionPlaceholder","appendChild","styles","block","button","toolData","file","Object","keys","length","toggleStatus","status","EMPTY","innerHTML","i18n","t","addEventListener","url","tag","test","attributes","src","eventName","autoplay","loop","muted","playsinline","FILLED","text","statusType","prototype","hasOwnProperty","call","classList","toggle","tuneName","tagName","classNames","el","document","createElement","Array","isArray","add","attrName"],"mappings":"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","sourcesContent":["import { API } from \"@editorjs/editorjs\";\n\n/**\n * Class for working with UI:\n *  - rendering base structure\n *  - show/hide preview\n *  - apply tune view\n */\nexport default class Ui {\n    private api: API;\n    private config: any;\n    private readOnly: boolean;\n    private onSelectFile: Function;\n\n    nodes: {\n        wrapper: HTMLElement;\n        imageContainer: HTMLElement;\n        fileButton: HTMLElement;\n        imageEl: HTMLElement;\n        caption: HTMLElement;\n    };\n\n    /**\n     * @param {object} ui - image tool Ui module\n     * @param {object} ui.api - Editor.js API\n     * @param {ImageConfig} ui.config - user config\n     * @param {Function} ui.onSelectFile - callback for clicks on Select file button\n     * @param {boolean} ui.readOnly - read-only mode flag\n     */\n    constructor({ api, config, onSelectFile, readOnly }) {\n        this.api = api;\n        this.config = config;\n        this.onSelectFile = onSelectFile;\n        this.readOnly = readOnly;\n        this.nodes = {\n            wrapper: make(\"div\", [this.CSS.baseClass, this.CSS.wrapper]),\n            imageContainer: make(\"div\", [this.CSS.imageContainer]),\n            fileButton: this.createFileButton(),\n            imageEl: undefined,\n            caption: make(\"div\", [this.CSS.input, this.CSS.caption], {\n                contentEditable: !this.readOnly\n            })\n        };\n\n        /**\n         * Create base structure\n         *  <wrapper>\n         *    <image-container/>\n         *    <caption />\n         *  </wrapper>\n         */\n        this.nodes.caption.dataset.placeholder = this.config.captionPlaceholder;\n        this.nodes.wrapper.appendChild(this.nodes.imageContainer);\n        this.nodes.wrapper.appendChild(this.nodes.caption);\n        this.nodes.wrapper.appendChild(this.nodes.fileButton);\n    }\n\n    /**\n     * CSS classes\n     *\n     * @returns {object}\n     */\n    get CSS() {\n        return {\n            baseClass: this.api.styles.block,\n            input: this.api.styles.input,\n            button: this.api.styles.button,\n\n            /**\n             * Tool's classes\n             */\n            wrapper: \"image-tool\",\n            imageContainer: \"image-tool__image\",\n            imageEl: \"image-tool__image-picture\",\n            caption: \"image-tool__caption\"\n        };\n    }\n\n    /**\n     * Ui statuses:\n     * - empty\n     * - filled\n     *\n     * @returns {{EMPTY: string, UPLOADING: string, FILLED: string}}\n     */\n    static get status() {\n        return {\n            EMPTY: \"empty\",\n            FILLED: \"filled\"\n        };\n    }\n\n    /**\n     * Renders tool UI\n     *\n     * @param {ImageToolData} toolData - saved tool data\n     * @returns {Element}\n     */\n    render(toolData) {\n        if (!toolData.file || Object.keys(toolData.file).length === 0) {\n            this.toggleStatus(Ui.status.EMPTY);\n        }\n\n        return this.nodes.wrapper;\n    }\n\n    /**\n     * Creates upload-file button\n     *\n     * @returns {Element}\n     */\n    createFileButton() {\n        const button = make(\"div\", [this.CSS.button]);\n\n        button.innerHTML = this.api.i18n.t(\"Select an Image\");\n\n        button.addEventListener(\"click\", () => {\n            this.onSelectFile();\n        });\n\n        return button;\n    }\n\n    /**\n     * Shows an image\n     *\n     * @param {string} url - image source\n     * @returns {void}\n     */\n    fillImage(url) {\n        /**\n         * Check for a source extension to compose element correctly: video tag for mp4, img â€” for others\n         */\n        const tag = /\\.mp4$/.test(url) ? \"VIDEO\" : \"IMG\";\n\n        const attributes: any = {\n            src: url\n        };\n\n        /**\n         * We use eventName variable because IMG and VIDEO tags have different event to be called on source load\n         * - IMG: load\n         * - VIDEO: loadeddata\n         *\n         * @type {string}\n         */\n        let eventName = \"load\";\n\n        /**\n         * Update attributes and eventName if source is a mp4 video\n         */\n        if (tag === \"VIDEO\") {\n            /**\n             * Add attributes for playing muted mp4 as a gif\n             *\n             * @type {boolean}\n             */\n            attributes.autoplay = true;\n            attributes.loop = true;\n            attributes.muted = true;\n            attributes.playsinline = true;\n\n            /**\n             * Change event to be listened\n             *\n             * @type {string}\n             */\n            eventName = \"loadeddata\";\n        }\n\n        /**\n         * Compose tag with defined attributes\n         *\n         * @type {Element}\n         */\n        this.nodes.imageEl = make(tag, this.CSS.imageEl, attributes);\n\n        /**\n         * Add load event listener\n         */\n        this.nodes.imageEl.addEventListener(eventName, () => {\n            this.toggleStatus(Ui.status.FILLED);\n        });\n\n        this.nodes.imageContainer.appendChild(this.nodes.imageEl);\n    }\n\n    /**\n     * Shows caption input\n     *\n     * @param {string} text - caption text\n     * @returns {void}\n     */\n    fillCaption(text) {\n        if (this.nodes.caption) {\n            this.nodes.caption.innerHTML = text;\n        }\n    }\n\n    /**\n     * Changes UI status\n     *\n     * @param {string} status - see {@link Ui.status} constants\n     * @returns {void}\n     */\n    toggleStatus(status) {\n        for (const statusType in Ui.status) {\n            if (Object.prototype.hasOwnProperty.call(Ui.status, statusType)) {\n                this.nodes.wrapper.classList.toggle(\n                    `${this.CSS.wrapper}--${Ui.status[statusType]}`,\n                    status === Ui.status[statusType]\n                );\n            }\n        }\n    }\n\n    /**\n     * Apply visual representation of activated tune\n     *\n     * @param {string} tuneName - one of available tunes {@link Tunes.tunes}\n     * @param {boolean} status - true for enable, false for disable\n     * @returns {void}\n     */\n    applyTune(tuneName, status) {\n        this.nodes.wrapper.classList.toggle(`${this.CSS.wrapper}--${tuneName}`, status);\n    }\n}\n\n/**\n * Helper for making Elements with attributes\n *\n * @param  {string} tagName           - new Element tag name\n * @param  {Array|string} classNames  - list or name of CSS class\n * @param  {object} attributes        - any attributes\n * @returns {Element}\n */\nexport const make = function make(tagName, classNames = null, attributes = {}) {\n    const el = document.createElement(tagName);\n\n    if (Array.isArray(classNames)) {\n        el.classList.add(...classNames);\n    } else if (classNames) {\n        el.classList.add(classNames);\n    }\n\n    for (const attrName in attributes) {\n        el[attrName] = attributes[attrName];\n    }\n\n    return el;\n};\n"],"file":"ui.js"}