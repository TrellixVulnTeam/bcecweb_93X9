{"version":3,"sources":["../../../../../src/components/RichTextEditor/tools/image/index.ts"],"names":["Ui","Tunes","svgs","defaultGetFileSrc","file","src","defaultOnSelectFile","ImageTool","data","config","api","readOnly","getFileSrc","onSelectFile","actions","context","ui","showFileManager","image","tunes","onChange","tuneName","tuneToggled","_data","render","caption","nodes","innerHTML","fillCaption","forEach","tune","name","value","setTune","fillImage","applyTune","Promise","resolve","then","blockId","blocks","getCurrentBlockIndex","stretchBlock","catch","err","console","error","icon","toolbox","title"],"mappings":"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","sourcesContent":["import { API } from \"@editorjs/editorjs\";\nimport Ui from \"./ui\";\nimport Tunes from \"./tunes\";\nimport svgs from \"./svgs\";\n\nconst defaultGetFileSrc = file => {\n    if (typeof file === \"string\") {\n        return file;\n    }\n\n    return file.src;\n};\n\nconst defaultOnSelectFile = file => {\n    return file.src;\n};\n\nexport default class ImageTool {\n    private api: API;\n    private readOnly: boolean;\n    private config: any;\n    private tunes: Tunes;\n    private ui: Ui;\n    private _data: any;\n\n    /**\n     * Notify core that read-only mode is supported\n     *\n     * @returns {boolean}\n     */\n    static get isReadOnlySupported() {\n        return true;\n    }\n\n    /**\n     * Get Tool toolbox settings\n     * icon - Tool icon's SVG\n     * title - title to show in toolbox\n     *\n     * @returns {{icon: string, title: string}}\n     */\n    static get toolbox() {\n        return {\n            icon: svgs.toolbox,\n            title: \"Image\"\n        };\n    }\n\n    constructor({ data, config, api, readOnly }) {\n        this.api = api;\n        this.readOnly = readOnly;\n\n        this.config = {\n            getFileSrc: config.getFileSrc || defaultGetFileSrc,\n            onSelectFile: config.onSelectFile || defaultOnSelectFile,\n            actions: config.actions || [],\n            context: config.context\n        };\n\n        /**\n         * Module for working with UI\n         */\n        this.ui = new Ui({\n            api,\n            config: this.config,\n            onSelectFile: () => {\n                this.config.context.showFileManager(file => {\n                    this.image = this.config.onSelectFile(file);\n                });\n            },\n            readOnly\n        });\n\n        /**\n         * Module for working with tunes\n         */\n        this.tunes = new Tunes({\n            api,\n            actions: this.config.actions,\n            onChange: tuneName => this.tuneToggled(tuneName)\n        });\n\n        /**\n         * Set saved state\n         */\n        this._data = {};\n        this.data = data;\n    }\n\n    /**\n     * Renders Block content\n     *\n     * @public\n     *\n     * @returns {HTMLDivElement}\n     */\n    render() {\n        return this.ui.render(this.data);\n    }\n\n    /**\n     * Return Block data\n     *\n     * @public\n     *\n     * @returns {ImageToolData}\n     */\n    save() {\n        const caption = this.ui.nodes.caption;\n\n        this._data.caption = caption.innerHTML;\n\n        return this.data;\n    }\n\n    /**\n     * Makes buttons with tunes: stretch image\n     *\n     * @public\n     *\n     * @returns {Element}\n     */\n    renderSettings() {\n        return this.tunes.render(this.data);\n    }\n\n    /**\n     * Stores all Tool's data\n     *\n     * @private\n     *\n     * @param {ImageToolData} data - data in Image Tool format\n     */\n    set data(data) {\n        this.image = data.file;\n\n        this._data.caption = data.caption || \"\";\n        this.ui.fillCaption(this._data.caption);\n\n        Tunes.tunes.forEach(({ name: tune }) => {\n            const value =\n                typeof data[tune] !== \"undefined\"\n                    ? data[tune] === true || data[tune] === \"true\"\n                    : false;\n\n            this.setTune(tune, value);\n        });\n    }\n\n    /**\n     * Return Tool data\n     *\n     * @private\n     *\n     * @returns {ImageToolData}\n     */\n    get data() {\n        return this._data;\n    }\n\n    /**\n     * Set new image file\n     *\n     * @private\n     *\n     * @param {object} file - uploaded file data\n     */\n    set image(file) {\n        this._data.file = file || {};\n\n        if (file) {\n            this.ui.fillImage(this.config.getFileSrc(file));\n        }\n    }\n\n    /**\n     * Callback fired when Block Tune is activated\n     *\n     * @private\n     *\n     * @param {string} tuneName - tune that has been clicked\n     * @returns {void}\n     */\n    tuneToggled(tuneName) {\n        // inverse tune state\n        this.setTune(tuneName, !this._data[tuneName]);\n    }\n\n    /**\n     * Set one tune\n     *\n     * @param {string} tuneName - {@link Tunes.tunes}\n     * @param {boolean} value - tune state\n     * @returns {void}\n     */\n    setTune(tuneName, value) {\n        this._data[tuneName] = value;\n\n        this.ui.applyTune(tuneName, value);\n\n        if (tuneName === \"stretched\") {\n            /**\n             * Wait until the API is ready\n             */\n            Promise.resolve()\n                .then(() => {\n                    const blockId = this.api.blocks.getCurrentBlockIndex();\n\n                    this.api.blocks.stretchBlock(blockId, value);\n                })\n                .catch(err => {\n                    console.error(err);\n                });\n        }\n    }\n}\n"],"file":"index.js"}