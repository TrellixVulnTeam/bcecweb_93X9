import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

/**
 * Class for working with UI:
 *  - rendering base structure
 *  - show/hide preview
 *  - apply tune view
 */
var Ui = /*#__PURE__*/function () {
  /**
   * @param {object} ui - image tool Ui module
   * @param {object} ui.api - Editor.js API
   * @param {ImageConfig} ui.config - user config
   * @param {Function} ui.onSelectFile - callback for clicks on Select file button
   * @param {boolean} ui.readOnly - read-only mode flag
   */
  function Ui(_ref) {
    var api = _ref.api,
        config = _ref.config,
        onSelectFile = _ref.onSelectFile,
        readOnly = _ref.readOnly;

    _classCallCheck(this, Ui);

    _defineProperty(this, "api", void 0);

    _defineProperty(this, "config", void 0);

    _defineProperty(this, "readOnly", void 0);

    _defineProperty(this, "onSelectFile", void 0);

    _defineProperty(this, "nodes", void 0);

    this.api = api;
    this.config = config;
    this.onSelectFile = onSelectFile;
    this.readOnly = readOnly;
    this.nodes = {
      wrapper: make("div", [this.CSS.baseClass, this.CSS.wrapper]),
      imageContainer: make("div", [this.CSS.imageContainer]),
      fileButton: this.createFileButton(),
      imageEl: undefined,
      caption: make("div", [this.CSS.input, this.CSS.caption], {
        contentEditable: !this.readOnly
      })
    };
    /**
     * Create base structure
     *  <wrapper>
     *    <image-container/>
     *    <caption />
     *  </wrapper>
     */

    this.nodes.caption.dataset.placeholder = this.config.captionPlaceholder;
    this.nodes.wrapper.appendChild(this.nodes.imageContainer);
    this.nodes.wrapper.appendChild(this.nodes.caption);
    this.nodes.wrapper.appendChild(this.nodes.fileButton);
  }
  /**
   * CSS classes
   *
   * @returns {object}
   */


  _createClass(Ui, [{
    key: "CSS",
    get: function get() {
      return {
        baseClass: this.api.styles.block,
        input: this.api.styles.input,
        button: this.api.styles.button,

        /**
         * Tool's classes
         */
        wrapper: "image-tool",
        imageContainer: "image-tool__image",
        imageEl: "image-tool__image-picture",
        caption: "image-tool__caption"
      };
    }
    /**
     * Ui statuses:
     * - empty
     * - filled
     *
     * @returns {{EMPTY: string, UPLOADING: string, FILLED: string}}
     */

  }, {
    key: "render",
    value:
    /**
     * Renders tool UI
     *
     * @param {ImageToolData} toolData - saved tool data
     * @returns {Element}
     */
    function render(toolData) {
      if (!toolData.file || Object.keys(toolData.file).length === 0) {
        this.toggleStatus(Ui.status.EMPTY);
      }

      return this.nodes.wrapper;
    }
    /**
     * Creates upload-file button
     *
     * @returns {Element}
     */

  }, {
    key: "createFileButton",
    value: function createFileButton() {
      var _this = this;

      var button = make("div", [this.CSS.button]);
      button.innerHTML = this.api.i18n.t("Select an Image");
      button.addEventListener("click", function () {
        _this.onSelectFile();
      });
      return button;
    }
    /**
     * Shows an image
     *
     * @param {string} url - image source
     * @returns {void}
     */

  }, {
    key: "fillImage",
    value: function fillImage(url) {
      var _this2 = this;

      /**
       * Check for a source extension to compose element correctly: video tag for mp4, img â€” for others
       */
      var tag = /\.mp4$/.test(url) ? "VIDEO" : "IMG";
      var attributes = {
        src: url
      };
      /**
       * We use eventName variable because IMG and VIDEO tags have different event to be called on source load
       * - IMG: load
       * - VIDEO: loadeddata
       *
       * @type {string}
       */

      var eventName = "load";
      /**
       * Update attributes and eventName if source is a mp4 video
       */

      if (tag === "VIDEO") {
        /**
         * Add attributes for playing muted mp4 as a gif
         *
         * @type {boolean}
         */
        attributes.autoplay = true;
        attributes.loop = true;
        attributes.muted = true;
        attributes.playsinline = true;
        /**
         * Change event to be listened
         *
         * @type {string}
         */

        eventName = "loadeddata";
      }
      /**
       * Compose tag with defined attributes
       *
       * @type {Element}
       */


      this.nodes.imageEl = make(tag, this.CSS.imageEl, attributes);
      /**
       * Add load event listener
       */

      this.nodes.imageEl.addEventListener(eventName, function () {
        _this2.toggleStatus(Ui.status.FILLED);
      });
      this.nodes.imageContainer.appendChild(this.nodes.imageEl);
    }
    /**
     * Shows caption input
     *
     * @param {string} text - caption text
     * @returns {void}
     */

  }, {
    key: "fillCaption",
    value: function fillCaption(text) {
      if (this.nodes.caption) {
        this.nodes.caption.innerHTML = text;
      }
    }
    /**
     * Changes UI status
     *
     * @param {string} status - see {@link Ui.status} constants
     * @returns {void}
     */

  }, {
    key: "toggleStatus",
    value: function toggleStatus(status) {
      for (var statusType in Ui.status) {
        if (Object.prototype.hasOwnProperty.call(Ui.status, statusType)) {
          this.nodes.wrapper.classList.toggle("".concat(this.CSS.wrapper, "--").concat(Ui.status[statusType]), status === Ui.status[statusType]);
        }
      }
    }
    /**
     * Apply visual representation of activated tune
     *
     * @param {string} tuneName - one of available tunes {@link Tunes.tunes}
     * @param {boolean} status - true for enable, false for disable
     * @returns {void}
     */

  }, {
    key: "applyTune",
    value: function applyTune(tuneName, status) {
      this.nodes.wrapper.classList.toggle("".concat(this.CSS.wrapper, "--").concat(tuneName), status);
    }
  }], [{
    key: "status",
    get: function get() {
      return {
        EMPTY: "empty",
        FILLED: "filled"
      };
    }
  }]);

  return Ui;
}();
/**
 * Helper for making Elements with attributes
 *
 * @param  {string} tagName           - new Element tag name
 * @param  {Array|string} classNames  - list or name of CSS class
 * @param  {object} attributes        - any attributes
 * @returns {Element}
 */


export { Ui as default };
export var make = function make(tagName) {
  var classNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var el = document.createElement(tagName);

  if (Array.isArray(classNames)) {
    var _el$classList;

    (_el$classList = el.classList).add.apply(_el$classList, _toConsumableArray(classNames));
  } else if (classNames) {
    el.classList.add(classNames);
  }

  for (var attrName in attributes) {
    el[attrName] = attributes[attrName];
  }

  return el;
};
//# sourceMappingURL=ui.js.map