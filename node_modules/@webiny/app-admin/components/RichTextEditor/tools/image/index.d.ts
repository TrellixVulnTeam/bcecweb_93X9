export default class ImageTool {
    private api;
    private readOnly;
    private config;
    private tunes;
    private ui;
    private _data;
    /**
     * Notify core that read-only mode is supported
     *
     * @returns {boolean}
     */
    static get isReadOnlySupported(): boolean;
    /**
     * Get Tool toolbox settings
     * icon - Tool icon's SVG
     * title - title to show in toolbox
     *
     * @returns {{icon: string, title: string}}
     */
    static get toolbox(): {
        icon: string;
        title: string;
    };
    constructor({ data, config, api, readOnly }: {
        data: any;
        config: any;
        api: any;
        readOnly: any;
    });
    /**
     * Renders Block content
     *
     * @public
     *
     * @returns {HTMLDivElement}
     */
    render(): HTMLElement;
    /**
     * Return Block data
     *
     * @public
     *
     * @returns {ImageToolData}
     */
    save(): any;
    /**
     * Makes buttons with tunes: stretch image
     *
     * @public
     *
     * @returns {Element}
     */
    renderSettings(): any;
    /**
     * Stores all Tool's data
     *
     * @private
     *
     * @param {ImageToolData} data - data in Image Tool format
     */
    set data(data: any);
    /**
     * Return Tool data
     *
     * @private
     *
     * @returns {ImageToolData}
     */
    get data(): any;
    /**
     * Set new image file
     *
     * @private
     *
     * @param {object} file - uploaded file data
     */
    set image(file: any);
    /**
     * Callback fired when Block Tune is activated
     *
     * @private
     *
     * @param {string} tuneName - tune that has been clicked
     * @returns {void}
     */
    tuneToggled(tuneName: any): void;
    /**
     * Set one tune
     *
     * @param {string} tuneName - {@link Tunes.tunes}
     * @param {boolean} value - tune state
     * @returns {void}
     */
    setTune(tuneName: any, value: any): void;
}
