import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { make } from "./ui";
import svgs from "./svgs";

/**
 * Working with Block Tunes
 */
var Tunes = /*#__PURE__*/function () {
  /**
   * @param {object} tune - image tool Tunes managers
   * @param {object} tune.api - Editor API
   * @param {object} tune.actions - list of user defined tunes
   * @param {Function} tune.onChange - tune toggling callback
   */
  function Tunes(_ref) {
    var api = _ref.api,
        actions = _ref.actions,
        onChange = _ref.onChange;

    _classCallCheck(this, Tunes);

    _defineProperty(this, "api", void 0);

    _defineProperty(this, "actions", void 0);

    _defineProperty(this, "onChange", void 0);

    _defineProperty(this, "buttons", void 0);

    this.api = api;
    this.actions = actions;
    this.onChange = onChange;
    this.buttons = [];
  }
  /**
   * Available Image tunes
   *
   * @returns {{name: string, icon: string, title: string}[]}
   */


  _createClass(Tunes, [{
    key: "CSS",
    get:
    /**
     * Styles
     *
     * @returns {{wrapper: string, buttonBase: *, button: string, buttonActive: *}}
     */
    function get() {
      return {
        wrapper: "",
        buttonBase: this.api.styles.settingsButton,
        button: "image-tool__tune",
        buttonActive: this.api.styles.settingsButtonActive
      };
    }
    /**
     * Makes buttons with tunes: stretch image
     *
     * @param {ImageToolData} toolData - generate Elements of tunes
     * @returns {Element}
     */

  }, {
    key: "render",
    value: function render(toolData) {
      var _this = this;

      var wrapper = make("div", this.CSS.wrapper);
      this.buttons = [];
      var tunes = Tunes.tunes.concat(this.actions);
      tunes.forEach(function (tune) {
        var title = _this.api.i18n.t(tune.title);

        var el = make("div", [_this.CSS.buttonBase, _this.CSS.button], {
          innerHTML: tune.icon,
          title: title
        });
        el.addEventListener("click", function () {
          _this.tuneClicked(tune.name, tune.action);
        });
        el.dataset.tune = tune.name;
        el.classList.toggle(_this.CSS.buttonActive, toolData[tune.name]);

        _this.buttons.push(el);

        _this.api.tooltip.onHover(el, title, {
          placement: "top"
        });

        wrapper.appendChild(el);
      });
      return wrapper;
    }
    /**
     * Clicks to one of the tunes
     *
     * @param {string} tuneName - clicked tune name
     * @param {Function} customFunction - function to execute on click
     */

  }, {
    key: "tuneClicked",
    value: function tuneClicked(tuneName, customFunction) {
      if (typeof customFunction === "function") {
        if (!customFunction(tuneName)) {
          return false;
        }
      }

      var button = this.buttons.find(function (el) {
        return el.dataset.tune === tuneName;
      });
      button.classList.toggle(this.CSS.buttonActive, !button.classList.contains(this.CSS.buttonActive));
      this.onChange(tuneName);
    }
  }], [{
    key: "tunes",
    get: function get() {
      return [{
        name: "stretched",
        icon: svgs.stretched,
        title: "Stretch image"
      }];
    }
  }]);

  return Tunes;
}();

export { Tunes as default };
//# sourceMappingURL=tunes.js.map