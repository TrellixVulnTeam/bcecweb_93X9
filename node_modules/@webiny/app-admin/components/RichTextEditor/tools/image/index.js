import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import Ui from "./ui";
import Tunes from "./tunes";
import svgs from "./svgs";

var defaultGetFileSrc = function defaultGetFileSrc(file) {
  if (typeof file === "string") {
    return file;
  }

  return file.src;
};

var defaultOnSelectFile = function defaultOnSelectFile(file) {
  return file.src;
};

var ImageTool = /*#__PURE__*/function () {
  function ImageTool(_ref) {
    var _this = this;

    var data = _ref.data,
        config = _ref.config,
        api = _ref.api,
        readOnly = _ref.readOnly;

    _classCallCheck(this, ImageTool);

    _defineProperty(this, "api", void 0);

    _defineProperty(this, "readOnly", void 0);

    _defineProperty(this, "config", void 0);

    _defineProperty(this, "tunes", void 0);

    _defineProperty(this, "ui", void 0);

    _defineProperty(this, "_data", void 0);

    this.api = api;
    this.readOnly = readOnly;
    this.config = {
      getFileSrc: config.getFileSrc || defaultGetFileSrc,
      onSelectFile: config.onSelectFile || defaultOnSelectFile,
      actions: config.actions || [],
      context: config.context
    };
    /**
     * Module for working with UI
     */

    this.ui = new Ui({
      api: api,
      config: this.config,
      onSelectFile: function onSelectFile() {
        _this.config.context.showFileManager(function (file) {
          _this.image = _this.config.onSelectFile(file);
        });
      },
      readOnly: readOnly
    });
    /**
     * Module for working with tunes
     */

    this.tunes = new Tunes({
      api: api,
      actions: this.config.actions,
      onChange: function onChange(tuneName) {
        return _this.tuneToggled(tuneName);
      }
    });
    /**
     * Set saved state
     */

    this._data = {};
    this.data = data;
  }
  /**
   * Renders Block content
   *
   * @public
   *
   * @returns {HTMLDivElement}
   */


  _createClass(ImageTool, [{
    key: "render",
    value: function render() {
      return this.ui.render(this.data);
    }
    /**
     * Return Block data
     *
     * @public
     *
     * @returns {ImageToolData}
     */

  }, {
    key: "save",
    value: function save() {
      var caption = this.ui.nodes.caption;
      this._data.caption = caption.innerHTML;
      return this.data;
    }
    /**
     * Makes buttons with tunes: stretch image
     *
     * @public
     *
     * @returns {Element}
     */

  }, {
    key: "renderSettings",
    value: function renderSettings() {
      return this.tunes.render(this.data);
    }
    /**
     * Stores all Tool's data
     *
     * @private
     *
     * @param {ImageToolData} data - data in Image Tool format
     */

  }, {
    key: "data",
    get:
    /**
     * Return Tool data
     *
     * @private
     *
     * @returns {ImageToolData}
     */
    function get() {
      return this._data;
    }
    /**
     * Set new image file
     *
     * @private
     *
     * @param {object} file - uploaded file data
     */
    ,
    set: function set(data) {
      var _this2 = this;

      this.image = data.file;
      this._data.caption = data.caption || "";
      this.ui.fillCaption(this._data.caption);
      Tunes.tunes.forEach(function (_ref2) {
        var tune = _ref2.name;
        var value = typeof data[tune] !== "undefined" ? data[tune] === true || data[tune] === "true" : false;

        _this2.setTune(tune, value);
      });
    }
  }, {
    key: "image",
    set: function set(file) {
      this._data.file = file || {};

      if (file) {
        this.ui.fillImage(this.config.getFileSrc(file));
      }
    }
    /**
     * Callback fired when Block Tune is activated
     *
     * @private
     *
     * @param {string} tuneName - tune that has been clicked
     * @returns {void}
     */

  }, {
    key: "tuneToggled",
    value: function tuneToggled(tuneName) {
      // inverse tune state
      this.setTune(tuneName, !this._data[tuneName]);
    }
    /**
     * Set one tune
     *
     * @param {string} tuneName - {@link Tunes.tunes}
     * @param {boolean} value - tune state
     * @returns {void}
     */

  }, {
    key: "setTune",
    value: function setTune(tuneName, value) {
      var _this3 = this;

      this._data[tuneName] = value;
      this.ui.applyTune(tuneName, value);

      if (tuneName === "stretched") {
        /**
         * Wait until the API is ready
         */
        Promise.resolve().then(function () {
          var blockId = _this3.api.blocks.getCurrentBlockIndex();

          _this3.api.blocks.stretchBlock(blockId, value);
        }).catch(function (err) {
          console.error(err);
        });
      }
    }
  }], [{
    key: "isReadOnlySupported",
    get:
    /**
     * Notify core that read-only mode is supported
     *
     * @returns {boolean}
     */
    function get() {
      return true;
    }
    /**
     * Get Tool toolbox settings
     * icon - Tool icon's SVG
     * title - title to show in toolbox
     *
     * @returns {{icon: string, title: string}}
     */

  }, {
    key: "toolbox",
    get: function get() {
      return {
        icon: svgs.toolbox,
        title: "Image"
      };
    }
  }]);

  return ImageTool;
}();

export { ImageTool as default };
//# sourceMappingURL=index.js.map