{"version":3,"sources":["../../../../../src/components/RichTextEditor/tools/image/tunes.ts"],"names":["make","svgs","Tunes","api","actions","onChange","buttons","wrapper","buttonBase","styles","settingsButton","button","buttonActive","settingsButtonActive","toolData","CSS","tunes","concat","forEach","tune","title","i18n","t","el","innerHTML","icon","addEventListener","tuneClicked","name","action","dataset","classList","toggle","push","tooltip","onHover","placement","appendChild","tuneName","customFunction","find","contains","stretched"],"mappings":"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","sourcesContent":["import { API } from \"@editorjs/editorjs\";\nimport { make } from \"./ui\";\nimport svgs from \"./svgs\";\n\ntype Tune = { name: string; icon: string; title: string; action?: Function };\n\n/**\n * Working with Block Tunes\n */\nexport default class Tunes {\n    private api: API;\n    private actions: any;\n    private onChange: Function;\n    private buttons: Array<HTMLElement>;\n    /**\n     * @param {object} tune - image tool Tunes managers\n     * @param {object} tune.api - Editor API\n     * @param {object} tune.actions - list of user defined tunes\n     * @param {Function} tune.onChange - tune toggling callback\n     */\n    constructor({ api, actions, onChange }) {\n        this.api = api;\n        this.actions = actions;\n        this.onChange = onChange;\n        this.buttons = [];\n    }\n\n    /**\n     * Available Image tunes\n     *\n     * @returns {{name: string, icon: string, title: string}[]}\n     */\n    static get tunes(): Tune[] {\n        return [\n            {\n                name: \"stretched\",\n                icon: svgs.stretched,\n                title: \"Stretch image\"\n            }\n        ];\n    }\n\n    /**\n     * Styles\n     *\n     * @returns {{wrapper: string, buttonBase: *, button: string, buttonActive: *}}\n     */\n    get CSS() {\n        return {\n            wrapper: \"\",\n            buttonBase: this.api.styles.settingsButton,\n            button: \"image-tool__tune\",\n            buttonActive: this.api.styles.settingsButtonActive\n        };\n    }\n\n    /**\n     * Makes buttons with tunes: stretch image\n     *\n     * @param {ImageToolData} toolData - generate Elements of tunes\n     * @returns {Element}\n     */\n    render(toolData) {\n        const wrapper = make(\"div\", this.CSS.wrapper);\n\n        this.buttons = [];\n\n        const tunes = Tunes.tunes.concat(this.actions);\n\n        tunes.forEach(tune => {\n            const title = this.api.i18n.t(tune.title);\n            const el = make(\"div\", [this.CSS.buttonBase, this.CSS.button], {\n                innerHTML: tune.icon,\n                title\n            });\n\n            el.addEventListener(\"click\", () => {\n                this.tuneClicked(tune.name, tune.action);\n            });\n\n            el.dataset.tune = tune.name;\n            el.classList.toggle(this.CSS.buttonActive, toolData[tune.name]);\n\n            this.buttons.push(el);\n\n            this.api.tooltip.onHover(el, title, {\n                placement: \"top\"\n            });\n\n            wrapper.appendChild(el);\n        });\n\n        return wrapper;\n    }\n\n    /**\n     * Clicks to one of the tunes\n     *\n     * @param {string} tuneName - clicked tune name\n     * @param {Function} customFunction - function to execute on click\n     */\n    tuneClicked(tuneName, customFunction) {\n        if (typeof customFunction === \"function\") {\n            if (!customFunction(tuneName)) {\n                return false;\n            }\n        }\n\n        const button = this.buttons.find(el => el.dataset.tune === tuneName);\n\n        button.classList.toggle(\n            this.CSS.buttonActive,\n            !button.classList.contains(this.CSS.buttonActive)\n        );\n\n        this.onChange(tuneName);\n    }\n}\n"],"file":"tunes.js"}