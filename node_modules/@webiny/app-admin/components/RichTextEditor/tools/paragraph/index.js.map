{"version":3,"sources":["../../../../../src/components/RichTextEditor/tools/paragraph/index.ts"],"names":["ALIGNMENTS","TextAlign","ALIGNMENT_ICONS","Paragraph","data","config","api","readOnly","typography","_CSS","block","styles","settingsButton","settingsButtonActive","wrapper","onKeyUp","bind","_placeholder","placeholder","DEFAULT_PLACEHOLDER","_data","normalizeData","_element","drawView","_preserveBlank","preserveBlank","undefined","settingsButtons","alignments","text","innerHTML","forEach","alignment","name","textAlign","classList","add","remove","className","split","find","LEFT","svg","left","e","code","textContent","div","document","createElement","contentEditable","dataset","i18n","t","addEventListener","holder","selectTypeButton","currentAlignment","setAlignment","appendChild","push","typographyForParagraph","Object","values","filter","item","component","input","option","Option","label","onclick","event","target","value","setTypographyClass","savedData","trim","toolsContent","getTextAlign","includes","detail","button","toggle","newData","export","import","br","tags","icon","title"],"mappings":"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","sourcesContent":["import { API } from \"@editorjs/editorjs\";\nimport { Alignment, ALIGNMENTS, TextAlign, ALIGNMENT_ICONS } from \"../utils\";\n\n/**\n * @typedef {object} ParagraphConfig\n * @property {string} placeholder - placeholder for the empty paragraph\n * @property {boolean} preserveBlank - Whether or not to keep blank paragraphs when saving editor data`\n */\ntype ParagraphConfig = {\n    placeholder: string;\n    preserveBlank: boolean;\n    typography?: Typography;\n};\n/**\n * @typedef {Object} ParagraphData\n * @description Tool's input and output data format\n * @property {String} text â€” Paragraph's content. Can include HTML tags: <a><b><i>\n */\ntype ParagraphData = {\n    text: string;\n    textAlign: TextAlign;\n};\n\ntype Typography = {\n    [key: string]: {\n        label: string;\n        component: string;\n        className: string;\n    };\n};\n\ninterface ParagraphArgs {\n    data: ParagraphData;\n    config: ParagraphConfig;\n    api: any;\n    readOnly: boolean;\n}\nclass Paragraph {\n    api: API;\n    readOnly: boolean;\n    _CSS: any;\n    _settings: any;\n    _data: any;\n    _element: any;\n    _placeholder: string;\n    _preserveBlank: boolean;\n    alignments: Alignment[];\n    settingsButtons: HTMLElement[];\n    typography: Typography;\n\n    /**\n     * Render plugin`s main Element and fill it with saved data\n     *\n     * @param {object} params - constructor params\n     * @param {ParagraphData} params.data - previously saved data\n     * @param {ParagraphConfig} params.config - user config for Tool\n     * @param {object} params.api - editor.js api\n     * @param {boolean} readOnly - read only mode flag\n     */\n    constructor({ data, config, api, readOnly }: ParagraphArgs) {\n        this.api = api;\n        this.readOnly = readOnly;\n        this.typography = config.typography || null;\n        this._CSS = {\n            block: this.api.styles.block,\n            settingsButton: this.api.styles.settingsButton,\n            settingsButtonActive: this.api.styles.settingsButtonActive,\n            wrapper: \"ce-paragraph\"\n        };\n\n        if (!this.readOnly) {\n            this.onKeyUp = this.onKeyUp.bind(this);\n        }\n\n        /**\n         * Placeholder for paragraph if it is first Block\n         * @type {string}\n         */\n        this._placeholder = config.placeholder ? config.placeholder : Paragraph.DEFAULT_PLACEHOLDER;\n        this._data = this.normalizeData(data);\n        this._element = this.drawView();\n        this._preserveBlank = config.preserveBlank !== undefined ? config.preserveBlank : false;\n        this.settingsButtons = [];\n        this.alignments = ALIGNMENTS;\n\n        this.data = this.normalizeData(data);\n    }\n\n    /**\n     * Default placeholder for Paragraph Tool\n     *\n     * @return {string}\n     * @constructor\n     */\n    static get DEFAULT_PLACEHOLDER() {\n        return \"\";\n    }\n\n    /**\n     * Enable Conversion Toolbar. Paragraph can be converted to/from other tools\n     */\n    static get conversionConfig() {\n        return {\n            export: \"text\", // to convert Paragraph to other block, use 'text' property of saved data\n            import: \"text\" // to covert other block's exported string to Paragraph, fill 'text' property of tool data\n        };\n    }\n\n    /**\n     * Sanitizer rules\n     */\n    static get sanitize() {\n        return {\n            text: {\n                br: true\n            }\n        };\n    }\n\n    /**\n     * Returns true to notify the core that read-only mode is supported\n     *\n     * @return {boolean}\n     */\n    static get isReadOnlySupported() {\n        return true;\n    }\n\n    /**\n     * Get current Tools`s data\n     * @returns {ParagraphData} Current data\n     * @private\n     */\n    get data() {\n        const text = this._element.innerHTML;\n\n        // this._data.text = text;\n\n        return {\n            ...this._data,\n            text\n        };\n    }\n\n    /**\n     * Store data in plugin:\n     * - at the this._data property\n     * - at the HTML\n     *\n     * @param {ParagraphData} data â€” data to set\n     * @private\n     */\n    set data(data) {\n        this._data = data || {};\n\n        this._element.innerHTML = this._data.text || \"\";\n\n        /**\n         * Add Alignment class\n         */\n        this.alignments.forEach(alignment => {\n            if (alignment.name === this._data.textAlign) {\n                this._element.classList.add(`ce-header-text--${alignment.name}`);\n            } else {\n                this._element.classList.remove(`ce-header-text--${alignment.name}`);\n            }\n        });\n\n        /**\n         * Add Typography class\n         */\n        if (this._data.className) {\n            this._element.classList.add(...this._data.className.split(\" \"));\n        }\n    }\n\n    /**\n     * Used by Editor paste handling API.\n     * Provides configuration to handle P tags.\n     *\n     * @returns {{tags: string[]}}\n     */\n    static get pasteConfig() {\n        return {\n            tags: [\"P\"]\n        };\n    }\n\n    /**\n     * Icon and title for displaying at the Toolbox\n     *\n     * @return {{icon: string, title: string}}\n     */\n    static get toolbox() {\n        return {\n            icon:\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0.2 -0.3 9 11.4\" width=\"12\" height=\"14\">\\n' +\n                '  <path d=\"M0 2.77V.92A1 1 0 01.2.28C.35.1.56 0 .83 0h7.66c.28.01.48.1.63.28.14.17.21.38.21.64v1.85c0 .26-.08.48-.23.66-.15.17-.37.26-.66.26-.28 0-.5-.09-.64-.26a1 1 0 01-.21-.66V1.69H5.6v7.58h.5c.25 0 .45.08.6.23.17.16.25.35.25.6s-.08.45-.24.6a.87.87 0 01-.62.22H3.21a.87.87 0 01-.61-.22.78.78 0 01-.24-.6c0-.25.08-.44.24-.6a.85.85 0 01.61-.23h.5V1.7H1.73v1.08c0 .26-.08.48-.23.66-.15.17-.37.26-.66.26-.28 0-.5-.09-.64-.26A1 1 0 010 2.77z\"/>\\n' +\n                \"</svg>\",\n            title: \"Text\"\n        };\n    }\n\n    /**\n     * Get current alignment\n     *\n     * @returns {alignment}\n     */\n    get currentAlignment() {\n        let alignment = this.alignments.find(alignment => alignment.name === this._data.textAlign);\n\n        if (!alignment) {\n            alignment = { name: TextAlign.LEFT, svg: ALIGNMENT_ICONS.left };\n        }\n\n        return alignment;\n    }\n\n    /**\n     * Check if text content is empty and set empty string to inner html.\n     * We need this because some browsers (e.g. Safari) insert <br> into empty contentEditable elements\n     *\n     * @param {KeyboardEvent} e - key up event\n     */\n    onKeyUp(e) {\n        if (e.code !== \"Backspace\" && e.code !== \"Delete\") {\n            return;\n        }\n\n        const { textContent } = this._element;\n\n        if (textContent === \"\") {\n            this._element.innerHTML = \"\";\n        }\n    }\n\n    /**\n     * Create Tool's view\n     * @return {HTMLElement}\n     * @private\n     */\n    drawView() {\n        const div = document.createElement(\"DIV\");\n        div.classList.add(this._CSS.wrapper, this._CSS.block);\n        // Add custom className to view.\n        if (this._data.className) {\n            div.classList.add(this._data.className);\n        }\n        div.contentEditable = \"false\";\n        div.dataset.placeholder = this.api.i18n.t(this._placeholder);\n\n        if (!this.readOnly) {\n            div.contentEditable = \"true\";\n            div.addEventListener(\"keyup\", this.onKeyUp);\n        }\n\n        return div;\n    }\n\n    /**\n     * Return Tool's view\n     *\n     * @returns {HTMLDivElement}\n     */\n    render() {\n        return this._element;\n    }\n\n    /**\n     * Create Block's settings block\n     *\n     * @returns {HTMLElement}\n     */\n    renderSettings() {\n        const holder = document.createElement(\"DIV\");\n\n        // Add alignment selectors\n        this.alignments.forEach(alignment => {\n            const selectTypeButton = document.createElement(\"SPAN\");\n\n            selectTypeButton.classList.add(this._CSS.settingsButton);\n\n            /**\n             * Highlight current level button\n             */\n            if (this.currentAlignment.name === alignment.name) {\n                selectTypeButton.classList.add(this._CSS.settingsButtonActive);\n            }\n\n            /**\n             * Add SVG icon\n             */\n            selectTypeButton.innerHTML = alignment.svg;\n\n            /**\n             * Save alignment to its button\n             */\n            selectTypeButton.dataset.textAlign = alignment.name;\n\n            /**\n             * Set up click handler\n             */\n            selectTypeButton.addEventListener(\"click\", () => {\n                this.setAlignment(alignment);\n            });\n\n            /**\n             * Append settings button to holder\n             */\n            holder.appendChild(selectTypeButton);\n\n            /**\n             * Save settings buttons\n             */\n            this.settingsButtons.push(selectTypeButton);\n        });\n\n        // Add `Typography` selector\n        if (this.typography) {\n            const typographyForParagraph = Object.values(this.typography).filter(\n                item => item.component === \"p\"\n            );\n\n            const selectTypeButton = document.createElement(\"SELECT\") as HTMLSelectElement;\n            // Add editor's default input style\n            selectTypeButton.classList.add(this.api.styles.input);\n            // Add typography options\n            typographyForParagraph.forEach(item => {\n                const option = new Option(item.label, item.className);\n\n                selectTypeButton.appendChild(option);\n            });\n            // Add \"onclick\" handler\n            selectTypeButton.onclick = event => {\n                const { value } = event.target as HTMLSelectElement;\n                this.setTypographyClass(value);\n            };\n\n            /**\n             * Append settings button to holder\n             */\n            holder.appendChild(selectTypeButton);\n\n            /**\n             * Save settings buttons\n             */\n            this.settingsButtons.push(selectTypeButton);\n        }\n\n        return holder;\n    }\n\n    /**\n     * Method that specified how to merge two Text blocks.\n     * Called by Editor.js by backspace at the beginning of the Block\n     * @param {ParagraphData} data\n     * @public\n     */\n    merge(data) {\n        this.data = {\n            text: this.data.text + data.text\n        };\n    }\n\n    /**\n     * Validate Paragraph block data:\n     * - check for emptiness\n     *\n     * @param {ParagraphData} savedData â€” data received after saving\n     * @returns {boolean} false if saved data is not correct, otherwise true\n     * @public\n     */\n    validate(savedData) {\n        return !(savedData.text.trim() === \"\" && !this._preserveBlank);\n    }\n\n    /**\n     * Extract Tool's data from the view\n     * @param {HTMLDivElement} toolsContent - Paragraph tools rendered view\n     * @returns {ParagraphData} - saved data\n     * @public\n     */\n    save(toolsContent) {\n        return {\n            text: toolsContent.innerHTML,\n            textAlign: this.getTextAlign(toolsContent.className),\n            className: this.data.className\n        };\n    }\n\n    /**\n     * Extract textAlign from className\n     *\n     * @param {string} className - heading element className\n     * @returns {TextAlign} textAlign\n     */\n    getTextAlign(className) {\n        let textAlign = TextAlign.LEFT;\n        // Match className with alignment\n        this.alignments.forEach(alignment => {\n            if (className.includes(`ce-header-text--${alignment.name}`)) {\n                textAlign = alignment.name;\n            }\n        });\n        return textAlign;\n    }\n\n    /**\n     * On paste callback fired from Editor.\n     *\n     * @param {PasteEvent} event - event with pasted data\n     */\n    onPaste(event) {\n        const data = {\n            text: event.detail.data.innerHTML\n        };\n\n        this.data = data;\n    }\n\n    /**\n     * Callback for Block's settings buttons\n     *\n     * @param {number} alignment - level to set\n     */\n    setAlignment(alignment) {\n        this.data = {\n            textAlign: alignment.name,\n            text: this.data.text\n        };\n\n        /**\n         * Highlight button by selected level\n         */\n        this.settingsButtons.forEach(button => {\n            button.classList.toggle(\n                this._CSS.settingsButtonActive,\n                button.dataset.textAlign === alignment.name\n            );\n        });\n    }\n\n    /**\n     * Callback for Block's settings buttons\n     *\n     * @param {string} className - name of typography class\n     */\n    setTypographyClass(className: string) {\n        this.data = {\n            textAlign: this.data.textAlign,\n            text: this.data.text,\n            className: className\n        };\n    }\n\n    /**\n     * Normalize input data\n     *\n     * @param {HeaderData} data - saved data to process\n     *\n     * @returns {HeaderData}\n     * @private\n     */\n    normalizeData(data) {\n        const newData: any = {};\n\n        if (typeof data !== \"object\") {\n            data = {};\n        }\n\n        newData.text = data.text || \"\";\n        newData.textAlign = data.textAlign || TextAlign.LEFT;\n        newData.className = data.className || \"\";\n\n        return newData;\n    }\n}\n\nexport default Paragraph;\n"],"file":"index.js"}