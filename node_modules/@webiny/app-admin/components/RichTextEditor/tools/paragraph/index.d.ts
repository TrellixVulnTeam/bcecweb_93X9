import { API } from "@editorjs/editorjs";
import { Alignment, TextAlign } from "../utils";
/**
 * @typedef {object} ParagraphConfig
 * @property {string} placeholder - placeholder for the empty paragraph
 * @property {boolean} preserveBlank - Whether or not to keep blank paragraphs when saving editor data`
 */
declare type ParagraphConfig = {
    placeholder: string;
    preserveBlank: boolean;
    typography?: Typography;
};
/**
 * @typedef {Object} ParagraphData
 * @description Tool's input and output data format
 * @property {String} text — Paragraph's content. Can include HTML tags: <a><b><i>
 */
declare type ParagraphData = {
    text: string;
    textAlign: TextAlign;
};
declare type Typography = {
    [key: string]: {
        label: string;
        component: string;
        className: string;
    };
};
interface ParagraphArgs {
    data: ParagraphData;
    config: ParagraphConfig;
    api: any;
    readOnly: boolean;
}
declare class Paragraph {
    api: API;
    readOnly: boolean;
    _CSS: any;
    _settings: any;
    _data: any;
    _element: any;
    _placeholder: string;
    _preserveBlank: boolean;
    alignments: Alignment[];
    settingsButtons: HTMLElement[];
    typography: Typography;
    /**
     * Render plugin`s main Element and fill it with saved data
     *
     * @param {object} params - constructor params
     * @param {ParagraphData} params.data - previously saved data
     * @param {ParagraphConfig} params.config - user config for Tool
     * @param {object} params.api - editor.js api
     * @param {boolean} readOnly - read only mode flag
     */
    constructor({ data, config, api, readOnly }: ParagraphArgs);
    /**
     * Default placeholder for Paragraph Tool
     *
     * @return {string}
     * @constructor
     */
    static get DEFAULT_PLACEHOLDER(): string;
    /**
     * Enable Conversion Toolbar. Paragraph can be converted to/from other tools
     */
    static get conversionConfig(): {
        export: string;
        import: string;
    };
    /**
     * Sanitizer rules
     */
    static get sanitize(): {
        text: {
            br: boolean;
        };
    };
    /**
     * Returns true to notify the core that read-only mode is supported
     *
     * @return {boolean}
     */
    static get isReadOnlySupported(): boolean;
    /**
     * Get current Tools`s data
     * @returns {ParagraphData} Current data
     * @private
     */
    get data(): any;
    /**
     * Store data in plugin:
     * - at the this._data property
     * - at the HTML
     *
     * @param {ParagraphData} data — data to set
     * @private
     */
    set data(data: any);
    /**
     * Used by Editor paste handling API.
     * Provides configuration to handle P tags.
     *
     * @returns {{tags: string[]}}
     */
    static get pasteConfig(): {
        tags: string[];
    };
    /**
     * Icon and title for displaying at the Toolbox
     *
     * @return {{icon: string, title: string}}
     */
    static get toolbox(): {
        icon: string;
        title: string;
    };
    /**
     * Get current alignment
     *
     * @returns {alignment}
     */
    get currentAlignment(): Alignment;
    /**
     * Check if text content is empty and set empty string to inner html.
     * We need this because some browsers (e.g. Safari) insert <br> into empty contentEditable elements
     *
     * @param {KeyboardEvent} e - key up event
     */
    onKeyUp(e: any): void;
    /**
     * Create Tool's view
     * @return {HTMLElement}
     * @private
     */
    drawView(): HTMLElement;
    /**
     * Return Tool's view
     *
     * @returns {HTMLDivElement}
     */
    render(): any;
    /**
     * Create Block's settings block
     *
     * @returns {HTMLElement}
     */
    renderSettings(): HTMLElement;
    /**
     * Method that specified how to merge two Text blocks.
     * Called by Editor.js by backspace at the beginning of the Block
     * @param {ParagraphData} data
     * @public
     */
    merge(data: any): void;
    /**
     * Validate Paragraph block data:
     * - check for emptiness
     *
     * @param {ParagraphData} savedData — data received after saving
     * @returns {boolean} false if saved data is not correct, otherwise true
     * @public
     */
    validate(savedData: any): boolean;
    /**
     * Extract Tool's data from the view
     * @param {HTMLDivElement} toolsContent - Paragraph tools rendered view
     * @returns {ParagraphData} - saved data
     * @public
     */
    save(toolsContent: any): {
        text: any;
        textAlign: TextAlign.LEFT;
        className: any;
    };
    /**
     * Extract textAlign from className
     *
     * @param {string} className - heading element className
     * @returns {TextAlign} textAlign
     */
    getTextAlign(className: any): TextAlign.LEFT;
    /**
     * On paste callback fired from Editor.
     *
     * @param {PasteEvent} event - event with pasted data
     */
    onPaste(event: any): void;
    /**
     * Callback for Block's settings buttons
     *
     * @param {number} alignment - level to set
     */
    setAlignment(alignment: any): void;
    /**
     * Callback for Block's settings buttons
     *
     * @param {string} className - name of typography class
     */
    setTypographyClass(className: string): void;
    /**
     * Normalize input data
     *
     * @param {HeaderData} data - saved data to process
     *
     * @returns {HeaderData}
     * @private
     */
    normalizeData(data: any): any;
}
export default Paragraph;
