{"version":3,"sources":["../../../../../src/components/RichTextEditor/tools/header/index.ts"],"names":["ALIGNMENTS","ALIGNMENT_ICONS","TextAlign","Header","data","config","api","readOnly","alignments","typography","_CSS","block","styles","settingsButton","settingsButtonActive","wrapper","_settings","_data","normalizeData","settingsButtons","_element","getTag","newData","text","level","parseInt","defaultLevel","number","textAlign","LEFT","holder","document","createElement","levels","length","forEach","selectTypeButton","classList","add","currentLevel","innerHTML","svg","dataset","addEventListener","setLevel","appendChild","push","alignment","currentAlignment","name","setAlignment","button","toggle","blockData","trim","toolsContent","getTextAlign","className","includes","undefined","parentNode","newHeader","replaceChild","tag","component","toLowerCase","typographyConfig","textAlignClass","remove","contentEditable","placeholder","i18n","t","find","levelItem","left","userSpecified","console","warn","availableLevels","filter","l","event","content","detail","tagName","reduce","prevLevel","currLevel","Math","abs","export","import","tags","icon","title"],"mappings":"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","sourcesContent":["import { API } from \"@editorjs/editorjs\";\nimport { ALIGNMENTS, ALIGNMENT_ICONS, TextAlign, Alignment } from \"../utils\";\n\ntype Typography = {\n    [key: string]: {\n        label: string;\n        component: string;\n        className: string;\n    };\n};\n\ntype HeaderData = {\n    text: string;\n    level: any;\n    textAlign: TextAlign;\n};\n\ntype HeaderConfig = {\n    levels: number[];\n    typography: Typography;\n};\n\ninterface HeaderArgs {\n    data: HeaderData;\n    config: HeaderConfig;\n    api: any;\n    readOnly: boolean;\n}\n\nclass Header {\n    api: API;\n    readOnly: boolean;\n    settingsButtons: any[];\n    _CSS: any;\n    _settings: any;\n    _data: any;\n    _element: any;\n    alignments: Alignment[];\n    typography: Typography;\n    /**\n     * Render plugin`s main Element and fill it with saved data\n     *\n     * @param {{data: HeaderData, config: HeaderConfig, api: object}}\n     *   data — previously saved data\n     *   config - user config for Tool\n     *   api - Editor.js API\n     *   readOnly - read only mode flag\n     */\n    constructor({ data, config, api, readOnly }: HeaderArgs) {\n        this.api = api;\n        this.readOnly = readOnly;\n\n        this.alignments = ALIGNMENTS;\n        /**\n         * Import typography from theme\n         */\n        this.typography = config.typography || null;\n\n        /**\n         * Styles\n         *\n         * @type {object}\n         */\n        this._CSS = {\n            block: this.api.styles.block,\n            settingsButton: this.api.styles.settingsButton,\n            settingsButtonActive: this.api.styles.settingsButtonActive,\n            wrapper: \"ce-header\"\n        };\n\n        /**\n         * Tool's settings passed from Editor\n         *\n         * @type {HeaderConfig}\n         * @private\n         */\n        this._settings = config;\n\n        /**\n         * Block's data\n         *\n         * @type {HeaderData}\n         * @private\n         */\n        this._data = this.normalizeData(data);\n\n        /**\n         * List of settings buttons\n         *\n         * @type {HTMLElement[]}\n         */\n        this.settingsButtons = [];\n\n        /**\n         * Main Block wrapper\n         *\n         * @type {HTMLElement}\n         * @private\n         */\n        this._element = this.getTag();\n    }\n\n    /**\n     * Normalize input data\n     *\n     * @param {HeaderData} data - saved data to process\n     *\n     * @returns {HeaderData}\n     * @private\n     */\n    normalizeData(data) {\n        const newData: any = {};\n\n        if (typeof data !== \"object\") {\n            data = {};\n        }\n\n        newData.text = data.text || \"\";\n        newData.level = parseInt(data.level) || this.defaultLevel.number;\n        newData.textAlign = data.textAlign || TextAlign.LEFT;\n\n        return newData;\n    }\n\n    /**\n     * Return Tool's view\n     *\n     * @returns {HTMLHeadingElement}\n     * @public\n     */\n    render() {\n        return this._element;\n    }\n\n    /**\n     * Create Block's settings block\n     *\n     * @returns {HTMLElement}\n     */\n    renderSettings() {\n        const holder = document.createElement(\"DIV\");\n\n        // do not add settings button, when only one level is configured\n        if (this.levels.length <= 1) {\n            return holder;\n        }\n\n        /** Add type selectors */\n        this.levels.forEach(level => {\n            const selectTypeButton = document.createElement(\"SPAN\");\n\n            selectTypeButton.classList.add(this._CSS.settingsButton);\n\n            /**\n             * Highlight current level button\n             */\n            if (this.currentLevel.number === level.number) {\n                selectTypeButton.classList.add(this._CSS.settingsButtonActive);\n            }\n\n            /**\n             * Add SVG icon\n             */\n            selectTypeButton.innerHTML = level.svg;\n\n            /**\n             * Save level to its button\n             */\n            selectTypeButton.dataset.level = level.number + \"\";\n\n            /**\n             * Set up click handler\n             */\n            selectTypeButton.addEventListener(\"click\", () => {\n                this.setLevel(level.number);\n            });\n\n            /**\n             * Append settings button to holder\n             */\n            holder.appendChild(selectTypeButton);\n\n            /**\n             * Save settings buttons\n             */\n            this.settingsButtons.push(selectTypeButton);\n        });\n\n        /**\n         * Add alignment selectors\n         * */\n        this.alignments.forEach(alignment => {\n            const selectTypeButton = document.createElement(\"SPAN\");\n\n            selectTypeButton.classList.add(this._CSS.settingsButton);\n\n            /**\n             * Highlight current level button\n             */\n            if (this.currentAlignment.name === alignment.name) {\n                selectTypeButton.classList.add(this._CSS.settingsButtonActive);\n            }\n\n            /**\n             * Add SVG icon\n             */\n            selectTypeButton.innerHTML = alignment.svg;\n\n            /**\n             * Save alignment to its button\n             */\n            selectTypeButton.dataset.textAlign = alignment.name;\n\n            /**\n             * Set up click handler\n             */\n            selectTypeButton.addEventListener(\"click\", () => {\n                this.setAlignment(alignment);\n            });\n\n            /**\n             * Append settings button to holder\n             */\n            holder.appendChild(selectTypeButton);\n\n            /**\n             * Save settings buttons\n             */\n            this.settingsButtons.push(selectTypeButton);\n        });\n\n        return holder;\n    }\n\n    /**\n     * Callback for Block's settings buttons\n     *\n     * @param {number} level - level to set\n     */\n    setLevel(level) {\n        this.data = {\n            level: level,\n            text: this.data.text\n        };\n\n        /**\n         * Highlight button by selected level\n         */\n        this.settingsButtons.forEach(button => {\n            button.classList.toggle(\n                this._CSS.settingsButtonActive,\n                parseInt(button.dataset.level) === level\n            );\n        });\n    }\n\n    /**\n     * Callback for Block's settings buttons\n     *\n     * @param {number} alignment - level to set\n     */\n    setAlignment(alignment) {\n        this.data = {\n            textAlign: alignment.name,\n            text: this.data.text,\n            level: this.data.level\n        };\n\n        /**\n         * Highlight button by selected level\n         */\n        this.settingsButtons.forEach(button => {\n            button.classList.toggle(\n                this._CSS.settingsButtonActive,\n                button.dataset.textAlign === alignment.name\n            );\n        });\n    }\n\n    /**\n     * Method that specified how to merge two Text blocks.\n     * Called by Editor.js by backspace at the beginning of the Block\n     *\n     * @param {HeaderData} data - saved data to merger with current block\n     * @public\n     */\n    merge(data) {\n        const newData = {\n            text: this.data.text + data.text,\n            level: this.data.level,\n            alignment: this.data.alignment\n        };\n\n        this.data = newData;\n    }\n\n    /**\n     * Validate Text block data:\n     * - check for emptiness\n     *\n     * @param {HeaderData} blockData — data received after saving\n     * @returns {boolean} false if saved data is not correct, otherwise true\n     * @public\n     */\n    validate(blockData) {\n        return blockData.text.trim() !== \"\";\n    }\n\n    /**\n     * Extract Tool's data from the view\n     *\n     * @param {HTMLHeadingElement} toolsContent - Text tools rendered view\n     * @returns {HeaderData} - saved data\n     * @public\n     */\n    save(toolsContent) {\n        return {\n            text: toolsContent.innerHTML,\n            level: this.currentLevel.number,\n            textAlign: this.getTextAlign(toolsContent.className),\n            className: toolsContent.className\n        };\n    }\n\n    /**\n     * Extract textAlign from className\n     *\n     * @param {string} className - heading element className\n     * @returns {TextAlign} textAlign\n     */\n    getTextAlign(className) {\n        let textAlign = TextAlign.LEFT;\n        // Match className with alignment\n        this.alignments.forEach(alignment => {\n            if (className.includes(`ce-header-text--${alignment.name}`)) {\n                textAlign = alignment.name;\n            }\n        });\n        return textAlign;\n    }\n\n    /**\n     * Allow Header to be converted to/from other blocks\n     */\n    static get conversionConfig() {\n        return {\n            export: \"text\", // use 'text' property for other blocks\n            import: \"text\" // fill 'text' property from other block's export string\n        };\n    }\n\n    /**\n     * Sanitizer Rules\n     */\n    static get sanitize() {\n        return {\n            level: false,\n            text: {}\n        };\n    }\n\n    /**\n     * Returns true to notify core that read-only is supported\n     *\n     * @returns {boolean}\n     */\n    static get isReadOnlySupported() {\n        return true;\n    }\n\n    /**\n     * Get current Tools`s data\n     *\n     * @returns {HeaderData} Current data\n     * @private\n     */\n    get data() {\n        this._data.text = this._element.innerHTML;\n        this._data.level = this.currentLevel.number;\n        this._data.textAlign = this.currentAlignment.name;\n\n        return this._data;\n    }\n\n    /**\n     * Store data in plugin:\n     * - at the this._data property\n     * - at the HTML\n     *\n     * @param {HeaderData} data — data to set\n     * @private\n     */\n    set data(data) {\n        this._data = this.normalizeData(data);\n\n        /**\n         * If level is set and block in DOM\n         * then replace it to a new block\n         */\n        if (data.level !== undefined && this._element.parentNode) {\n            /**\n             * Create a new tag\n             *\n             * @type {HTMLHeadingElement}\n             */\n            const newHeader = this.getTag();\n\n            /**\n             * Save Block's content\n             */\n            newHeader.innerHTML = this._element.innerHTML;\n\n            /**\n             * Replace blocks\n             */\n            this._element.parentNode.replaceChild(newHeader, this._element);\n\n            /**\n             * Save new block to private variable\n             *\n             * @type {HTMLHeadingElement}\n             * @private\n             */\n            this._element = newHeader;\n        }\n\n        /**\n         * If data.text was passed then update block's content\n         */\n        if (data.text !== undefined) {\n            this._element.innerHTML = this._data.text || \"\";\n        }\n    }\n\n    /**\n     * Get tag for target level\n     * By default returns second-leveled header\n     *\n     * @returns {HTMLElement}\n     */\n    getTag() {\n        /**\n         * Create element for current Block's level\n         */\n        const tag = document.createElement(this.currentLevel.tag);\n\n        /**\n         * Add text to block\n         */\n        tag.innerHTML = this._data.text || \"\";\n\n        /**\n         * Add styles class from typography\n         */\n        if (this.typography) {\n            const component = this.currentLevel.tag.toLowerCase();\n            const typographyConfig = this.typography[component];\n            tag.classList.add(typographyConfig.className);\n        } else {\n            /**\n             * Add styles class\n             */\n            tag.classList.add(this._CSS.wrapper);\n        }\n\n        /**\n         * Add Alignment class\n         */\n        this.alignments.forEach(alignment => {\n            const textAlignClass = `ce-header-text--${alignment.name}`;\n            if (alignment.name === this._data.textAlign) {\n                tag.classList.add(textAlignClass);\n            } else {\n                tag.classList.remove(textAlignClass);\n            }\n        });\n\n        /**\n         * Make tag editable\n         */\n        tag.contentEditable = this.readOnly ? \"false\" : \"true\";\n\n        /**\n         * Add Placeholder\n         */\n        tag.dataset.placeholder = this.api.i18n.t(this._settings.placeholder || \"\");\n\n        return tag;\n    }\n\n    /**\n     * Get current level\n     *\n     * @returns {level}\n     */\n    get currentLevel() {\n        let level = this.levels.find(levelItem => levelItem.number === this._data.level);\n\n        if (!level) {\n            level = this.defaultLevel;\n        }\n\n        return level;\n    }\n\n    /**\n     * Get current alignment\n     *\n     * @returns {alignment}\n     */\n    get currentAlignment() {\n        let alignment = this.alignments.find(alignment => alignment.name === this._data.textAlign);\n\n        if (!alignment) {\n            alignment = { name: TextAlign.LEFT, svg: ALIGNMENT_ICONS.left };\n        }\n\n        return alignment;\n    }\n\n    /**\n     * Return default level\n     *\n     * @returns {level}\n     */\n    get defaultLevel() {\n        /**\n         * User can specify own default level value\n         */\n        if (this._settings.defaultLevel) {\n            const userSpecified = this.levels.find(levelItem => {\n                return levelItem.number === this._settings.defaultLevel;\n            });\n\n            if (userSpecified) {\n                return userSpecified;\n            } else {\n                console.warn(\n                    \"(ง'̀-'́)ง Heading Tool: the default level specified was not found in available levels\"\n                );\n            }\n        }\n\n        /**\n         * With no additional options, there will be H2 by default\n         *\n         * @type {level}\n         */\n        return this.levels[1];\n    }\n\n    /**\n     * @typedef {object} level\n     * @property {number} number - level number\n     * @property {string} tag - tag corresponds with level number\n     * @property {string} svg - icon\n     */\n\n    /**\n     * Available header levels\n     *\n     * @returns {level[]}\n     */\n    get levels() {\n        const availableLevels = [\n            {\n                number: 1,\n                tag: \"H1\",\n                svg: '<svg width=\"16\" height=\"14\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M2.14 1.494V4.98h4.62V1.494c0-.498.098-.871.293-1.12A.927.927 0 0 1 7.82 0c.322 0 .583.123.782.37.2.246.3.62.3 1.124v9.588c0 .503-.101.88-.303 1.128a.957.957 0 0 1-.779.374.921.921 0 0 1-.77-.378c-.193-.251-.29-.626-.29-1.124V6.989H2.14v4.093c0 .503-.1.88-.302 1.128a.957.957 0 0 1-.778.374.921.921 0 0 1-.772-.378C.096 11.955 0 11.58 0 11.082V1.494C0 .996.095.623.285.374A.922.922 0 0 1 1.06 0c.321 0 .582.123.782.37.199.246.299.62.299 1.124zm11.653 9.985V5.27c-1.279.887-2.14 1.33-2.583 1.33a.802.802 0 0 1-.563-.228.703.703 0 0 1-.245-.529c0-.232.08-.402.241-.511.161-.11.446-.25.854-.424.61-.259 1.096-.532 1.462-.818a5.84 5.84 0 0 0 .97-.962c.282-.355.466-.573.552-.655.085-.082.246-.123.483-.123.267 0 .481.093.642.28.161.186.242.443.242.77v7.813c0 .914-.345 1.371-1.035 1.371-.307 0-.554-.093-.74-.28-.187-.186-.28-.461-.28-.825z\"/></svg>'\n            },\n            {\n                number: 2,\n                tag: \"H2\",\n                svg: '<svg width=\"18\" height=\"14\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M2.152 1.494V4.98h4.646V1.494c0-.498.097-.871.293-1.12A.934.934 0 0 1 7.863 0c.324 0 .586.123.786.37.2.246.301.62.301 1.124v9.588c0 .503-.101.88-.304 1.128a.964.964 0 0 1-.783.374.928.928 0 0 1-.775-.378c-.194-.251-.29-.626-.29-1.124V6.989H2.152v4.093c0 .503-.101.88-.304 1.128a.964.964 0 0 1-.783.374.928.928 0 0 1-.775-.378C.097 11.955 0 11.58 0 11.082V1.494C0 .996.095.623.286.374A.929.929 0 0 1 1.066 0c.323 0 .585.123.786.37.2.246.3.62.3 1.124zm10.99 9.288h3.527c.351 0 .62.072.804.216.185.144.277.34.277.588 0 .22-.073.408-.22.56-.146.154-.368.23-.665.23h-4.972c-.338 0-.601-.093-.79-.28a.896.896 0 0 1-.284-.659c0-.162.06-.377.182-.645s.255-.478.399-.631a38.617 38.617 0 0 1 1.621-1.598c.482-.444.827-.735 1.034-.875.369-.261.676-.523.922-.787.245-.263.432-.534.56-.81.129-.278.193-.549.193-.815 0-.288-.069-.546-.206-.773a1.428 1.428 0 0 0-.56-.53 1.618 1.618 0 0 0-.774-.19c-.59 0-1.054.26-1.392.777-.045.068-.12.252-.226.554-.106.302-.225.534-.358.696-.133.162-.328.243-.585.243a.76.76 0 0 1-.56-.223c-.149-.148-.223-.351-.223-.608 0-.31.07-.635.21-.972.139-.338.347-.645.624-.92a3.093 3.093 0 0 1 1.054-.665c.426-.169.924-.253 1.496-.253.69 0 1.277.108 1.764.324.315.144.592.343.83.595.24.252.425.544.558.875.133.33.2.674.2 1.03 0 .558-.14 1.066-.416 1.523-.277.457-.56.815-.848 1.074-.288.26-.771.666-1.45 1.22-.677.554-1.142.984-1.394 1.29a3.836 3.836 0 0 0-.331.44z\"/></svg>'\n            },\n            {\n                number: 3,\n                tag: \"H3\",\n                svg: '<svg width=\"18\" height=\"14\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M2.152 1.494V4.98h4.646V1.494c0-.498.097-.871.293-1.12A.934.934 0 0 1 7.863 0c.324 0 .586.123.786.37.2.246.301.62.301 1.124v9.588c0 .503-.101.88-.304 1.128a.964.964 0 0 1-.783.374.928.928 0 0 1-.775-.378c-.194-.251-.29-.626-.29-1.124V6.989H2.152v4.093c0 .503-.101.88-.304 1.128a.964.964 0 0 1-.783.374.928.928 0 0 1-.775-.378C.097 11.955 0 11.58 0 11.082V1.494C0 .996.095.623.286.374A.929.929 0 0 1 1.066 0c.323 0 .585.123.786.37.2.246.3.62.3 1.124zm11.61 4.919c.418 0 .778-.123 1.08-.368.301-.245.452-.597.452-1.055 0-.35-.12-.65-.36-.902-.241-.252-.566-.378-.974-.378-.277 0-.505.038-.684.116a1.1 1.1 0 0 0-.426.306 2.31 2.31 0 0 0-.296.49c-.093.2-.178.388-.255.565a.479.479 0 0 1-.245.225.965.965 0 0 1-.409.081.706.706 0 0 1-.5-.22c-.152-.148-.228-.345-.228-.59 0-.236.071-.484.214-.745a2.72 2.72 0 0 1 .627-.746 3.149 3.149 0 0 1 1.024-.568 4.122 4.122 0 0 1 1.368-.214c.44 0 .842.06 1.205.18.364.12.679.294.947.52.267.228.47.49.606.79.136.3.204.622.204.967 0 .454-.099.843-.296 1.168-.198.324-.48.64-.848.95.354.19.653.408.895.653.243.245.426.516.548.813.123.298.184.619.184.964 0 .413-.083.812-.248 1.198-.166.386-.41.73-.732 1.031a3.49 3.49 0 0 1-1.147.708c-.443.17-.932.256-1.467.256a3.512 3.512 0 0 1-1.464-.293 3.332 3.332 0 0 1-1.699-1.64c-.142-.314-.214-.573-.214-.777 0-.263.085-.475.255-.636a.89.89 0 0 1 .637-.242c.127 0 .25.037.367.112a.53.53 0 0 1 .232.27c.236.63.489 1.099.759 1.405.27.306.65.46 1.14.46a1.714 1.714 0 0 0 1.46-.824c.17-.273.256-.588.256-.947 0-.53-.145-.947-.436-1.249-.29-.302-.694-.453-1.212-.453-.09 0-.231.01-.422.028-.19.018-.313.027-.367.027-.25 0-.443-.062-.579-.187-.136-.125-.204-.299-.204-.521 0-.218.081-.394.245-.528.163-.134.406-.2.728-.2h.28z\"/></svg>'\n            },\n            {\n                number: 4,\n                tag: \"H4\",\n                svg: '<svg width=\"20\" height=\"14\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M2.152 1.494V4.98h4.646V1.494c0-.498.097-.871.293-1.12A.934.934 0 0 1 7.863 0c.324 0 .586.123.786.37.2.246.301.62.301 1.124v9.588c0 .503-.101.88-.304 1.128a.964.964 0 0 1-.783.374.928.928 0 0 1-.775-.378c-.194-.251-.29-.626-.29-1.124V6.989H2.152v4.093c0 .503-.101.88-.304 1.128a.964.964 0 0 1-.783.374.928.928 0 0 1-.775-.378C.097 11.955 0 11.58 0 11.082V1.494C0 .996.095.623.286.374A.929.929 0 0 1 1.066 0c.323 0 .585.123.786.37.2.246.3.62.3 1.124zm13.003 10.09v-1.252h-3.38c-.427 0-.746-.097-.96-.29-.213-.193-.32-.456-.32-.788 0-.085.016-.171.048-.259.031-.088.078-.18.141-.276.063-.097.128-.19.195-.28.068-.09.15-.2.25-.33l3.568-4.774a5.44 5.44 0 0 1 .576-.683.763.763 0 0 1 .542-.212c.682 0 1.023.39 1.023 1.171v5.212h.29c.346 0 .623.047.832.142.208.094.313.3.313.62 0 .26-.086.45-.256.568-.17.12-.427.179-.768.179h-.41v1.252c0 .346-.077.603-.23.771-.152.168-.356.253-.612.253a.78.78 0 0 1-.61-.26c-.154-.173-.232-.427-.232-.764zm-2.895-2.76h2.895V4.91L12.26 8.823z\"/></svg>'\n            },\n            {\n                number: 5,\n                tag: \"H5\",\n                svg: '<svg width=\"18\" height=\"14\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M2.152 1.494V4.98h4.646V1.494c0-.498.097-.871.293-1.12A.934.934 0 0 1 7.863 0c.324 0 .586.123.786.37.2.246.301.62.301 1.124v9.588c0 .503-.101.88-.304 1.128a.964.964 0 0 1-.783.374.928.928 0 0 1-.775-.378c-.194-.251-.29-.626-.29-1.124V6.989H2.152v4.093c0 .503-.101.88-.304 1.128a.964.964 0 0 1-.783.374.928.928 0 0 1-.775-.378C.097 11.955 0 11.58 0 11.082V1.494C0 .996.095.623.286.374A.929.929 0 0 1 1.066 0c.323 0 .585.123.786.37.2.246.3.62.3 1.124zm14.16 2.645h-3.234l-.388 2.205c.644-.344 1.239-.517 1.783-.517.436 0 .843.082 1.222.245.38.164.712.39.998.677.286.289.51.63.674 1.025.163.395.245.82.245 1.273 0 .658-.148 1.257-.443 1.797-.295.54-.72.97-1.276 1.287-.556.318-1.197.477-1.923.477-.813 0-1.472-.15-1.978-.45-.506-.3-.865-.643-1.076-1.031-.21-.388-.316-.727-.316-1.018 0-.177.073-.345.22-.504a.725.725 0 0 1 .556-.238c.381 0 .665.22.85.66.182.404.427.719.736.943.309.225.654.337 1.035.337.35 0 .656-.09.919-.272.263-.182.466-.431.61-.749.142-.318.214-.678.214-1.082 0-.436-.078-.808-.232-1.117a1.607 1.607 0 0 0-.62-.69 1.674 1.674 0 0 0-.864-.229c-.39 0-.67.048-.837.143-.168.095-.41.262-.725.5-.316.239-.576.358-.78.358a.843.843 0 0 1-.592-.242c-.173-.16-.259-.344-.259-.548 0-.022.025-.177.075-.463l.572-3.26c.063-.39.181-.675.354-.852.172-.177.454-.265.844-.265h3.595c.708 0 1.062.27 1.062.81a.711.711 0 0 1-.26.572c-.172.145-.426.218-.762.218z\"/></svg>'\n            },\n            {\n                number: 6,\n                tag: \"H6\",\n                svg: '<svg width=\"18\" height=\"14\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M2.152 1.494V4.98h4.646V1.494c0-.498.097-.871.293-1.12A.934.934 0 0 1 7.863 0c.324 0 .586.123.786.37.2.246.301.62.301 1.124v9.588c0 .503-.101.88-.304 1.128a.964.964 0 0 1-.783.374.928.928 0 0 1-.775-.378c-.194-.251-.29-.626-.29-1.124V6.989H2.152v4.093c0 .503-.101.88-.304 1.128a.964.964 0 0 1-.783.374.928.928 0 0 1-.775-.378C.097 11.955 0 11.58 0 11.082V1.494C0 .996.095.623.286.374A.929.929 0 0 1 1.066 0c.323 0 .585.123.786.37.2.246.3.62.3 1.124zM12.53 7.058a3.093 3.093 0 0 1 1.004-.814 2.734 2.734 0 0 1 1.214-.264c.43 0 .827.08 1.19.24.365.161.684.39.957.686.274.296.485.645.635 1.048a3.6 3.6 0 0 1 .223 1.262c0 .637-.145 1.216-.437 1.736-.292.52-.699.926-1.221 1.218-.522.292-1.114.438-1.774.438-.76 0-1.416-.186-1.967-.557-.552-.37-.974-.919-1.265-1.645-.292-.726-.438-1.613-.438-2.662 0-.855.088-1.62.265-2.293.176-.674.43-1.233.76-1.676.33-.443.73-.778 1.2-1.004.47-.226 1.006-.339 1.608-.339.579 0 1.089.113 1.53.34.44.225.773.506.997.84.224.335.335.656.335.964 0 .185-.07.354-.21.505a.698.698 0 0 1-.536.227.874.874 0 0 1-.529-.18 1.039 1.039 0 0 1-.36-.498 1.42 1.42 0 0 0-.495-.655 1.3 1.3 0 0 0-.786-.247c-.24 0-.479.069-.716.207a1.863 1.863 0 0 0-.6.56c-.33.479-.525 1.333-.584 2.563zm1.832 4.213c.456 0 .834-.186 1.133-.56.298-.373.447-.862.447-1.468 0-.412-.07-.766-.21-1.062a1.584 1.584 0 0 0-.577-.678 1.47 1.47 0 0 0-.807-.234c-.28 0-.548.074-.804.224-.255.149-.461.365-.617.647a2.024 2.024 0 0 0-.234.994c0 .61.158 1.12.475 1.527.316.407.714.61 1.194.61z\"/></svg>'\n            }\n        ];\n\n        return this._settings.levels\n            ? availableLevels.filter(l => this._settings.levels.includes(l.number))\n            : availableLevels;\n    }\n\n    /**\n     * Handle H1-H6 tags on paste to substitute it with header Tool\n     *\n     * @param {PasteEvent} event - event with pasted content\n     */\n    onPaste(event) {\n        const content = event.detail.data;\n\n        /**\n         * Define default level value\n         *\n         * @type {number}\n         */\n        let level = this.defaultLevel.number;\n\n        switch (content.tagName) {\n            case \"H1\":\n                level = 1;\n                break;\n            case \"H2\":\n                level = 2;\n                break;\n            case \"H3\":\n                level = 3;\n                break;\n            case \"H4\":\n                level = 4;\n                break;\n            case \"H5\":\n                level = 5;\n                break;\n            case \"H6\":\n                level = 6;\n                break;\n        }\n\n        if (this._settings.levels) {\n            // Fallback to nearest level when specified not available\n            level = this._settings.levels.reduce((prevLevel, currLevel) => {\n                return Math.abs(currLevel - level) < Math.abs(prevLevel - level)\n                    ? currLevel\n                    : prevLevel;\n            });\n        }\n\n        this.data = {\n            level,\n            text: content.innerHTML\n        };\n    }\n\n    /**\n     * Used by Editor.js paste handling API.\n     * Provides configuration to handle H1-H6 tags.\n     *\n     * @returns {{handler: (function(HTMLElement): {text: string}), tags: string[]}}\n     */\n    static get pasteConfig() {\n        return {\n            tags: [\"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\"]\n        };\n    }\n\n    /**\n     * Get Tool toolbox settings\n     * icon - Tool icon's SVG\n     * title - title to show in toolbox\n     *\n     * @returns {{icon: string, title: string}}\n     */\n    static get toolbox() {\n        return {\n            icon:\n                '<svg width=\"10\" height=\"14\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 10 14\">\\n' +\n                '  <path d=\"M7.6 8.15H2.25v4.525a1.125 1.125 0 0 1-2.25 0V1.125a1.125 1.125 0 1 1 2.25 0V5.9H7.6V1.125a1.125 1.125 0 0 1 2.25 0v11.55a1.125 1.125 0 0 1-2.25 0V8.15z\"/>\\n' +\n                \"</svg>\",\n            title: \"Heading\"\n        };\n    }\n}\n\nexport default Header;\n"],"file":"index.js"}