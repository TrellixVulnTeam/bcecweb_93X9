import { API } from "@editorjs/editorjs";
import { TextAlign, Alignment } from "../utils";
declare type Typography = {
    [key: string]: {
        label: string;
        component: string;
        className: string;
    };
};
declare type HeaderData = {
    text: string;
    level: any;
    textAlign: TextAlign;
};
declare type HeaderConfig = {
    levels: number[];
    typography: Typography;
};
interface HeaderArgs {
    data: HeaderData;
    config: HeaderConfig;
    api: any;
    readOnly: boolean;
}
declare class Header {
    api: API;
    readOnly: boolean;
    settingsButtons: any[];
    _CSS: any;
    _settings: any;
    _data: any;
    _element: any;
    alignments: Alignment[];
    typography: Typography;
    /**
     * Render plugin`s main Element and fill it with saved data
     *
     * @param {{data: HeaderData, config: HeaderConfig, api: object}}
     *   data — previously saved data
     *   config - user config for Tool
     *   api - Editor.js API
     *   readOnly - read only mode flag
     */
    constructor({ data, config, api, readOnly }: HeaderArgs);
    /**
     * Normalize input data
     *
     * @param {HeaderData} data - saved data to process
     *
     * @returns {HeaderData}
     * @private
     */
    normalizeData(data: any): any;
    /**
     * Return Tool's view
     *
     * @returns {HTMLHeadingElement}
     * @public
     */
    render(): any;
    /**
     * Create Block's settings block
     *
     * @returns {HTMLElement}
     */
    renderSettings(): HTMLElement;
    /**
     * Callback for Block's settings buttons
     *
     * @param {number} level - level to set
     */
    setLevel(level: any): void;
    /**
     * Callback for Block's settings buttons
     *
     * @param {number} alignment - level to set
     */
    setAlignment(alignment: any): void;
    /**
     * Method that specified how to merge two Text blocks.
     * Called by Editor.js by backspace at the beginning of the Block
     *
     * @param {HeaderData} data - saved data to merger with current block
     * @public
     */
    merge(data: any): void;
    /**
     * Validate Text block data:
     * - check for emptiness
     *
     * @param {HeaderData} blockData — data received after saving
     * @returns {boolean} false if saved data is not correct, otherwise true
     * @public
     */
    validate(blockData: any): boolean;
    /**
     * Extract Tool's data from the view
     *
     * @param {HTMLHeadingElement} toolsContent - Text tools rendered view
     * @returns {HeaderData} - saved data
     * @public
     */
    save(toolsContent: any): {
        text: any;
        level: number;
        textAlign: TextAlign.LEFT;
        className: any;
    };
    /**
     * Extract textAlign from className
     *
     * @param {string} className - heading element className
     * @returns {TextAlign} textAlign
     */
    getTextAlign(className: any): TextAlign.LEFT;
    /**
     * Allow Header to be converted to/from other blocks
     */
    static get conversionConfig(): {
        export: string;
        import: string;
    };
    /**
     * Sanitizer Rules
     */
    static get sanitize(): {
        level: boolean;
        text: {};
    };
    /**
     * Returns true to notify core that read-only is supported
     *
     * @returns {boolean}
     */
    static get isReadOnlySupported(): boolean;
    /**
     * Get current Tools`s data
     *
     * @returns {HeaderData} Current data
     * @private
     */
    get data(): any;
    /**
     * Store data in plugin:
     * - at the this._data property
     * - at the HTML
     *
     * @param {HeaderData} data — data to set
     * @private
     */
    set data(data: any);
    /**
     * Get tag for target level
     * By default returns second-leveled header
     *
     * @returns {HTMLElement}
     */
    getTag(): HTMLElement;
    /**
     * Get current level
     *
     * @returns {level}
     */
    get currentLevel(): {
        number: number;
        tag: string;
        svg: string;
    };
    /**
     * Get current alignment
     *
     * @returns {alignment}
     */
    get currentAlignment(): Alignment;
    /**
     * Return default level
     *
     * @returns {level}
     */
    get defaultLevel(): {
        number: number;
        tag: string;
        svg: string;
    };
    /**
     * @typedef {object} level
     * @property {number} number - level number
     * @property {string} tag - tag corresponds with level number
     * @property {string} svg - icon
     */
    /**
     * Available header levels
     *
     * @returns {level[]}
     */
    get levels(): {
        number: number;
        tag: string;
        svg: string;
    }[];
    /**
     * Handle H1-H6 tags on paste to substitute it with header Tool
     *
     * @param {PasteEvent} event - event with pasted content
     */
    onPaste(event: any): void;
    /**
     * Used by Editor.js paste handling API.
     * Provides configuration to handle H1-H6 tags.
     *
     * @returns {{handler: (function(HTMLElement): {text: string}), tags: string[]}}
     */
    static get pasteConfig(): {
        tags: string[];
    };
    /**
     * Get Tool toolbox settings
     * icon - Tool icon's SVG
     * title - title to show in toolbox
     *
     * @returns {{icon: string, title: string}}
     */
    static get toolbox(): {
        icon: string;
        title: string;
    };
}
export default Header;
