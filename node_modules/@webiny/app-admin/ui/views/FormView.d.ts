import { FormOnSubmit } from "@webiny/form";
import { UIElement, UIElementConfig } from "../UIElement";
import { FormElementRenderProps } from "../elements/form/FormElement";
import { ButtonElement } from "../elements/ButtonElement";
import { FormContentElement } from "./FormView/FormContentElement";
import { FormHeaderElement } from "./FormView/FormHeaderElement";
import { FormFooterElement } from "./FormView/FormFooterElement";
import { FormContainerElement } from "./FormView/FormContainerElement";
import { UIView } from "../UIView";
export interface FormViewConfig extends UIElementConfig {
    setupForm?: boolean;
    onSubmit?: FormOnSubmit;
    getTitle?: (props: FormElementRenderProps) => string;
    getFormData?: () => Record<string, any>;
    isLoading?: () => boolean;
    onCancel?: () => void;
    testId?: string;
    noElevation?: boolean;
    className?: string;
}
interface GetterWithProps<T> {
    (props: FormElementRenderProps): T;
}
interface GetterWithoutProps<T> {
    (): T;
}
export declare class FormView extends UIView<FormViewConfig> {
    constructor(id: any, config?: FormViewConfig);
    addElement<TElement extends UIElement = UIElement>(element: TElement): TElement;
    setTitle(title: string | GetterWithProps<string>): void;
    setOnSubmit(onSubmit: FormOnSubmit): void;
    setFormData(getter: GetterWithoutProps<Record<string, any>>): void;
    getFormContainer(): FormContainerElement;
    getFormContentElement(): FormContentElement;
    getFormHeaderElement(): FormHeaderElement;
    getFormFooterElement(): FormFooterElement;
    getSubmitButtonElement(): ButtonElement;
    private addElements;
}
export {};
