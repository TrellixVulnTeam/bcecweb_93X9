import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
var _excluded = ["parent"],
    _excluded2 = ["parent"];
import React, { Fragment } from "react";
import sortBy from "lodash/sortBy";
import { nanoid } from "nanoid";
import { UIView } from "../UIView";
import { plugins } from "@webiny/plugins";
import { GenericElement } from "../elements/GenericElement";
import { useSecurity } from "@webiny/app-security";
import { HeaderElement } from "./NavigationView/HeaderElement";
import { ContentElement } from "./NavigationView/ContentElement";
import { FooterElement } from "./NavigationView/FooterElement";
import { useNavigation } from "./NavigationView/useNavigation";
import { NavigationMenuElement, TAGS } from "../elements/NavigationMenuElement";
import { ReactComponent as SettingsIcon } from "@svgr/webpack!../../assets/icons/round-settings-24px.svg";
import { NavigationViewRenderer } from "./NavigationView/NavigationViewRenderer";
export var ElementID;

(function (ElementID) {
  ElementID["Header"] = "navigationHeader";
  ElementID["Content"] = "navigationContent";
  ElementID["Footer"] = "navigationFooter";
  ElementID["SettingsMenu"] = "menu.settings";
})(ElementID || (ElementID = {}));

export var NavigationView = /*#__PURE__*/function (_UIView) {
  _inherits(NavigationView, _UIView);

  var _super = _createSuper(NavigationView);

  function NavigationView() {
    var _this;

    _classCallCheck(this, NavigationView);

    _this = _super.call(this, "NavigationView");

    _this.useGrid(false);

    _this.addHookDefinition("navigation", useNavigation);

    _this.addHookDefinition("security", useSecurity);

    var elementConfig = {
      closeMenu: function closeMenu() {
        return _this.getHook("navigation").hideMenu();
      }
    };

    _this.addElement(new HeaderElement(ElementID.Header, elementConfig));

    _this.addElement(new ContentElement(ElementID.Content));

    _this.addElement(new FooterElement(ElementID.Footer, elementConfig));

    _this.addUtilityMenuElement(new NavigationMenuElement(ElementID.SettingsMenu, {
      label: "Settings",
      icon: /*#__PURE__*/React.createElement(SettingsIcon, null)
    })); // Load legacy plugins and convert them into elements


    _this.setupLegacyMenuPlugins();

    _this.addRenderer(new NavigationViewRenderer());

    _this.applyPlugins(NavigationView);

    return _this;
  }

  _createClass(NavigationView, [{
    key: "addAppMenuElement",
    value: function addAppMenuElement(element) {
      element.addTag(TAGS.APP);
      return this.getContentElement().addElement(element);
    }
  }, {
    key: "addUtilityMenuElement",
    value: function addUtilityMenuElement(element) {
      element.addTag(TAGS.UTILS);
      return this.getContentElement().addElement(element);
    }
  }, {
    key: "addSettingsMenuElement",
    value: function addSettingsMenuElement(element) {
      return this.getSettingsMenuElement().addElement(element);
    }
  }, {
    key: "getNavigationHook",
    value: function getNavigationHook() {
      return this.getHook("navigation");
    }
  }, {
    key: "getSecurityHook",
    value: function getSecurityHook() {
      return this.getHook("security");
    }
  }, {
    key: "getHeaderElement",
    value: function getHeaderElement() {
      return this.getElement(ElementID.Header);
    }
  }, {
    key: "getContentElement",
    value: function getContentElement() {
      return this.getElement(ElementID.Content);
    }
  }, {
    key: "getFooterElement",
    value: function getFooterElement() {
      return this.getElement(ElementID.Footer);
    }
  }, {
    key: "getSettingsMenuElement",
    value: function getSettingsMenuElement() {
      return this.getElement(ElementID.SettingsMenu);
    }
  }, {
    key: "setupLegacyMenuPlugins",
    value: function setupLegacyMenuPlugins() {
      var _this2 = this;

      // IMPORTANT! The following piece of code is for BACKWARDS COMPATIBILITY purposes only!
      var menuPlugins = plugins.byType("admin-menu");

      if (!menuPlugins) {
        return;
      }

      var legacyMenu = new GenericElement("legacy-menu");

      var Menu = function Menu(props) {
        var menuItem = _this2.addAppMenuElement(new NavigationMenuElement("navigation.content.".concat(props.name), {
          label: props.label,
          icon: props.icon
        }));

        return /*#__PURE__*/React.createElement(Fragment, null, React.Children.map(props.children, function (child) {
          if (! /*#__PURE__*/React.isValidElement(child)) {
            return child;
          }

          return /*#__PURE__*/React.cloneElement(child, {
            parent: menuItem
          });
        }));
      };

      var Section = function Section(_ref) {
        var parent = _ref.parent,
            props = _objectWithoutProperties(_ref, _excluded);

        var sectionMenu = parent.addElement(new NavigationMenuElement(nanoid(), {
          label: props.label
        }));
        return /*#__PURE__*/React.createElement(Fragment, null, React.Children.map(props.children, function (child) {
          if (! /*#__PURE__*/React.isValidElement(child)) {
            return child;
          }

          return /*#__PURE__*/React.cloneElement(child, {
            parent: sectionMenu
          });
        }));
      };

      var Item = function Item(_ref2) {
        var parent = _ref2.parent,
            props = _objectWithoutProperties(_ref2, _excluded2);

        parent.addElement(new NavigationMenuElement(nanoid(), {
          label: props.label,
          path: props.path
        }));
        return null;
      };

      sortBy(menuPlugins, [function (p) {
        return p.order || 50;
      }, function (p) {
        return p.name;
      }]).forEach(function (plugin) {
        legacyMenu.addElement(new GenericElement(plugin.name, function () {
          return plugin.render({
            Menu: Menu,
            Section: Section,
            Item: Item
          });
        }));
      });
      this.addElement(legacyMenu);
      setTimeout(function () {
        legacyMenu.remove();
      }, 100);
    }
  }]);

  return NavigationView;
}(UIView);
//# sourceMappingURL=NavigationView.js.map