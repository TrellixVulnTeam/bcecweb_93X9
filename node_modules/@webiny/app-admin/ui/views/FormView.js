import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _get from "@babel/runtime/helpers/get";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import React from "react";
import { CircularProgress } from "@webiny/ui/Progress";
import { FormElement } from "../elements/form/FormElement";
import { ButtonElement } from "../elements/ButtonElement";
import { GenericElement } from "../elements/GenericElement";
import { FormContentElement } from "./FormView/FormContentElement";
import { FormHeaderElement } from "./FormView/FormHeaderElement";
import { FormFooterElement } from "./FormView/FormFooterElement";
import { FormContainerElement } from "./FormView/FormContainerElement";
import { UIView } from "../UIView";
export var FormView = /*#__PURE__*/function (_UIView) {
  _inherits(FormView, _UIView);

  var _super = _createSuper(FormView);

  function FormView(id, config) {
    var _this;

    _classCallCheck(this, FormView);

    if (!("setupForm" in config)) {
      config.setupForm = true;
    }

    _this = _super.call(this, id, config);

    _this.addElements();

    _this.useGrid(false);

    _this.applyPlugins(FormView);

    return _this;
  }

  _createClass(FormView, [{
    key: "addElement",
    value: function addElement(element) {
      if (element.id === "form" || element.id === "formContainer") {
        return _get(_getPrototypeOf(FormView.prototype), "addElement", this).call(this, element);
      }

      return this.getFormContainer().addElement(element);
    }
  }, {
    key: "setTitle",
    value: function setTitle(title) {
      if (typeof title === "string") {
        this.config.getTitle = function () {
          return title;
        };
      } else {
        this.config.getTitle = title;
      }
    }
  }, {
    key: "setOnSubmit",
    value: function setOnSubmit(onSubmit) {
      this.config.onSubmit = onSubmit;
    }
  }, {
    key: "setFormData",
    value: function setFormData(getter) {
      this.config.getFormData = getter;
    }
  }, {
    key: "getFormContainer",
    value: function getFormContainer() {
      return this.getElement("formContainer");
    }
  }, {
    key: "getFormContentElement",
    value: function getFormContentElement() {
      return this.getElement("formContent");
    }
  }, {
    key: "getFormHeaderElement",
    value: function getFormHeaderElement() {
      return this.getElement("formHeader");
    }
  }, {
    key: "getFormFooterElement",
    value: function getFormFooterElement() {
      return this.getElement("formFooter");
    }
  }, {
    key: "getSubmitButtonElement",
    value: function getSubmitButtonElement() {
      return this.getFormFooterElement().getElement("submit");
    }
  }, {
    key: "addElements",
    value: function addElements() {
      var _this2 = this;

      var formContainer = new FormContainerElement("formContainer", {
        testId: this.config.testId,
        className: this.config.className,
        noElevation: this.config.noElevation
      });

      if (this.config.setupForm) {
        var form = this.addElement(new FormElement("form", {
          onSubmit: function onSubmit(data, form) {
            return _this2.config.onSubmit(data, form);
          },
          getData: function getData() {
            return _this2.config.getFormData();
          }
        }));
        form.addElement(formContainer);
      } else {
        this.addElement(formContainer);
      }

      this.addElement(new GenericElement("loading", function () {
        if (typeof _this2.config.isLoading !== "function") {
          return null;
        }

        return _this2.config.isLoading() ? /*#__PURE__*/React.createElement(CircularProgress, null) : null;
      }));
      this.addElement(new FormHeaderElement("formHeader", {
        getTitle: function getTitle(props) {
          return _this2.config.getTitle(props);
        }
      }));
      this.addElement(new FormContentElement("formContent"));
      var footer = new FormFooterElement("formFooter");
      this.addElement(footer);
      var submitButton = new ButtonElement("submit", {
        type: "primary",
        label: "Save",
        onClick: function onClick(props) {
          props.formProps.submit();
        }
      });
      submitButton.moveToTheEndOf(footer);

      if (this.config.onCancel) {
        var cancelButton = footer.addElement(new ButtonElement("cancel", {
          type: "default",
          label: "Cancel",
          onClick: function onClick() {
            return _this2.config.onCancel();
          }
        }));
        cancelButton.moveToTheBeginningOf(footer);
      }
    }
  }]);

  return FormView;
}(UIView);
//# sourceMappingURL=FormView.js.map