import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _get from "@babel/runtime/helpers/get";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from "react";
import classNames from "classnames";
import { css } from "emotion";
import { Grid } from "@webiny/ui/Grid";
import { SplitViewPanelElement } from "./SplitView/SplitViewPanelElement";
import { UIView } from "../UIView";
var grid = /*#__PURE__*/css({
  "&.mdc-layout-grid": {
    padding: 0,
    backgroundColor: "var(--mdc-theme-background)",
    ">.mdc-layout-grid__inner": {
      gridGap: 0
    }
  }
}, "label:grid;");
var leftPanel = /*#__PURE__*/css({
  backgroundColor: "var(--mdc-theme-surface)",
  ">.webiny-data-list": {
    display: "flex",
    flexDirection: "column",
    height: "calc(100vh - 70px)",
    ".mdc-list": {
      overflow: "auto"
    }
  },
  ">.mdc-list": {
    display: "flex",
    flexDirection: "column",
    maxHeight: "calc(100vh - 70px)",
    overflow: "auto"
  }
}, "label:leftPanel;");
var rightPanel = /*#__PURE__*/css({
  backgroundColor: "var(--mdc-theme-background)",
  overflow: "auto",
  height: "calc(100vh - 70px)"
}, "label:rightPanel;");
export var SplitView = /*#__PURE__*/function (_UIView) {
  _inherits(SplitView, _UIView);

  var _super = _createSuper(SplitView);

  function SplitView(id) {
    var _this;

    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, SplitView);

    _this = _super.call(this, "SplitView.".concat(id));

    _defineProperty(_assertThisInitialized(_this), "_classNames", new Set());

    _defineProperty(_assertThisInitialized(_this), "_leftPanel", void 0);

    _defineProperty(_assertThisInitialized(_this), "_rightPanel", void 0);

    _this.useGrid(false);

    _this.addClassName(grid);

    _this.addClassName("webiny-split-view");

    _this.addElements();

    if (config.leftPanel) {
      _this.getLeftPanel().addElement(config.leftPanel);
    }

    if (config.rightPanel) {
      _this.getRightPanel().addElement(config.rightPanel);
    }

    return _this;
  }

  _createClass(SplitView, [{
    key: "addClassName",
    value: function addClassName(className) {
      this._classNames.add(className);
    }
  }, {
    key: "removeClassName",
    value: function removeClassName(className) {
      this._classNames.delete(className);
    }
  }, {
    key: "getLeftPanel",
    value: function getLeftPanel() {
      return this.getElement("leftPanel");
    }
  }, {
    key: "getRightPanel",
    value: function getRightPanel() {
      return this.getElement("rightPanel");
    }
  }, {
    key: "render",
    value: function render(props) {
      return /*#__PURE__*/React.createElement(Grid, {
        className: classNames(Array.from(this._classNames.values()))
      }, _get(_getPrototypeOf(SplitView.prototype), "render", this).call(this, props));
    }
  }, {
    key: "addElements",
    value: function addElements() {
      this._leftPanel = new SplitViewPanelElement("leftPanel");

      this._leftPanel.useGrid(false);

      this._leftPanel.setWidth(5);

      this._leftPanel.addClassName(leftPanel);

      this._leftPanel.addClassName("webiny-split-view__left-panel");

      this._rightPanel = new SplitViewPanelElement("rightPanel");

      this._rightPanel.useGrid(false);

      this._rightPanel.setWidth(7);

      this._rightPanel.addClassName(rightPanel);

      this._rightPanel.addClassName("webiny-split-view__right-panel");

      this.addElement(this._leftPanel);

      this._rightPanel.moveAfter(this._leftPanel);
    }
  }]);

  return SplitView;
}(UIView);
//# sourceMappingURL=SplitView.js.map