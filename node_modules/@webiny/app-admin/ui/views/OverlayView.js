import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _get from "@babel/runtime/helpers/get";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from "react";
import { Transition } from "react-transition-group";
import styled from "@emotion/styled";
import { UIView } from "../UIView";
import { useOverlayView } from "./OverlayView/useOverlayView";
import { HeaderElement } from "./OverlayView/HeaderElement";
import { ContentElement } from "./OverlayView/ContentElement"; // !GOOD FIRST ISSUE!
// Extract rendering and styling into an OverlayViewRenderer class.

var OverlayLayoutWrapper = /*#__PURE__*/styled("div", {
  target: "e1xrojct0",
  label: "OverlayLayoutWrapper"
})({
  position: "fixed",
  width: "100%",
  height: "100vh",
  backgroundColor: "var(--mdc-theme-background)",

  /**
   * Has to be higher than 5 so it's above advanced settings dialog,
   * and below 20, so the image editor & Dialogs can be displayed above.
   */
  zIndex: 18,
  top: 0,
  left: 0
});
var defaultStyle = {
  transform: "translateY(75vh)",
  opacity: 0,
  transitionProperty: "transform, opacity",
  transitionTimingFunction: "cubic-bezier(0, 0, .2, 1)",
  transitionDuration: "225ms",
  willChange: "opacity, transform"
};
var transitionStyles = {
  entering: {
    transform: "translateY(75vh)",
    opacity: 0
  },
  entered: {
    transform: "translateY(0px)",
    opacity: 1
  }
};
export var OverlayView = /*#__PURE__*/function (_UIView) {
  _inherits(OverlayView, _UIView);

  var _super = _createSuper(OverlayView);

  /**
   * This property is used to track the amount of opened overlays. Since we're applying a CSS class to disable
   * window scroll, we must make sure we don't remove that CSS class until all the overlays are closed.
   */
  function OverlayView() {
    var _this;

    var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "OverlayView";

    _classCallCheck(this, OverlayView);

    _this = _super.call(this, id);

    _defineProperty(_assertThisInitialized(_this), "_onEntered", []);

    _defineProperty(_assertThisInitialized(_this), "_onExited", []);

    _this.useGrid(false);

    _this.addHookDefinition("overlay", useOverlayView);

    _this.addElement(new HeaderElement("overlayHeader", {
      onClose: function onClose() {
        return _this.setIsVisible(false);
      }
    }));

    _this.addElement(new ContentElement("overlayContent"));

    _this.applyPlugins(OverlayView);

    return _this;
  }

  _createClass(OverlayView, [{
    key: "setTitle",
    value: function setTitle(title) {
      this.getHeaderElement().setTitle(title);
    }
  }, {
    key: "onEntered",
    value: function onEntered() {
      var _this2 = this;

      _toConsumableArray(this._onEntered).reverse().forEach(function (cb) {
        return cb(_this2);
      });
    }
  }, {
    key: "onExited",
    value: function onExited() {
      var _this3 = this;

      _toConsumableArray(this._onExited).reverse().forEach(function (cb) {
        return cb(_this3);
      });
    }
  }, {
    key: "addOnEntered",
    value: function addOnEntered(cb) {
      this._onEntered.push(cb);
    }
  }, {
    key: "addOnExited",
    value: function addOnExited(cb) {
      this._onExited.push(cb);
    }
  }, {
    key: "getOverlayHook",
    value: function getOverlayHook() {
      return this.getHook("overlay");
    }
  }, {
    key: "setIsVisible",
    value: function setIsVisible(visible) {
      this.getOverlayHook().setIsVisible(visible);
    }
  }, {
    key: "getHeaderElement",
    value: function getHeaderElement() {
      return this.getElement("overlayHeader");
    }
  }, {
    key: "getContentElement",
    value: function getContentElement() {
      return this.getElement("overlayContent");
    }
  }, {
    key: "render",
    value: function render(props) {
      var _this4 = this;

      var _this$getOverlayHook = this.getOverlayHook(),
          isVisible = _this$getOverlayHook.isVisible;

      return /*#__PURE__*/React.createElement(Transition, {
        in: isVisible,
        timeout: 100,
        appear: true,
        onExited: function onExited() {
          return _this4.onExited();
        },
        onEntered: function onEntered() {
          return _this4.onEntered();
        }
      }, function (state) {
        return /*#__PURE__*/React.createElement(OverlayLayoutWrapper, {
          style: _objectSpread(_objectSpread({}, defaultStyle), transitionStyles[state])
        }, _get(_getPrototypeOf(OverlayView.prototype), "render", _this4).call(_this4, props));
      });
    }
  }]);

  return OverlayView;
}(UIView);

_defineProperty(OverlayView, "openedViews", 0);
//# sourceMappingURL=OverlayView.js.map