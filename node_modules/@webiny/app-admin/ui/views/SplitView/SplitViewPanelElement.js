import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _get from "@babel/runtime/helpers/get";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from "react";
import classNames from "classnames";
import { UIElement } from "../../UIElement";
import { Cell } from "@webiny/ui/Grid";
export var SplitViewPanelElement = /*#__PURE__*/function (_UIElement) {
  _inherits(SplitViewPanelElement, _UIElement);

  var _super = _createSuper(SplitViewPanelElement);

  function SplitViewPanelElement() {
    var _this;

    _classCallCheck(this, SplitViewPanelElement);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "_width", 12);

    _defineProperty(_assertThisInitialized(_this), "_classNames", new Set());

    return _this;
  }

  _createClass(SplitViewPanelElement, [{
    key: "setWidth",
    value: function setWidth(width) {
      this._width = width;
    }
  }, {
    key: "addClassName",
    value: function addClassName(className) {
      this._classNames.add(className);
    }
  }, {
    key: "removeClassName",
    value: function removeClassName(className) {
      this._classNames.delete(className);
    }
  }, {
    key: "setContentElement",
    value: function setContentElement(element) {
      // Remove previous content
      this.getChildren().forEach(function (el) {
        return el.remove();
      }); // Add new content

      this.addElement(element);
    }
  }, {
    key: "render",
    value: function render(props) {
      return /*#__PURE__*/React.createElement(Cell, {
        span: this._width,
        className: classNames(Array.from(this._classNames.values()))
      }, _get(_getPrototypeOf(SplitViewPanelElement.prototype), "render", this).call(this, props));
    }
  }]);

  return SplitViewPanelElement;
}(UIElement);
//# sourceMappingURL=SplitViewPanelElement.js.map