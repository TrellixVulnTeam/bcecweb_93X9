import _createForOfIteratorHelper from "@babel/runtime/helpers/createForOfIteratorHelper";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _get from "@babel/runtime/helpers/get";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from "react";
import { UIElement } from "../../UIElement";
import { DrawerContent } from "@webiny/ui/Drawer";
import { navContent } from "./Styled";
import { TAGS } from "../../elements/NavigationMenuElement";
export var ContentElement = /*#__PURE__*/function (_UIElement) {
  _inherits(ContentElement, _UIElement);

  var _super = _createSuper(ContentElement);

  function ContentElement(id) {
    var _this;

    _classCallCheck(this, ContentElement);

    _this = _super.call(this, id);

    _defineProperty(_assertThisInitialized(_this), "_sorters", []);

    _this.useGrid(false);

    _this.addSorter(function (a, b) {
      if (a.hasTag(TAGS.APP) && b.hasTag(TAGS.UTILS)) {
        return -1;
      }

      if (a.hasTag(TAGS.UTILS) && b.hasTag(TAGS.APP)) {
        return 1;
      }

      return a.config.label.localeCompare(b.config.label);
    });

    return _this;
  }

  _createClass(ContentElement, [{
    key: "addElement",
    value: function addElement(element) {
      _get(_getPrototypeOf(ContentElement.prototype), "addElement", this).call(this, element);

      this.runSorters();
      return element;
    }
  }, {
    key: "addSorter",
    value: function addSorter(sorter) {
      this._sorters.push(sorter);
    }
  }, {
    key: "render",
    value: function render(props) {
      return /*#__PURE__*/React.createElement(DrawerContent, {
        className: navContent
      }, _get(_getPrototypeOf(ContentElement.prototype), "render", this).call(this, props));
    }
  }, {
    key: "runSorters",
    value: function runSorters() {
      var _iterator = _createForOfIteratorHelper(this._sorters),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var sorter = _step.value;
          this.getLayout().sort(sorter);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }]);

  return ContentElement;
}(UIElement);
//# sourceMappingURL=ContentElement.js.map