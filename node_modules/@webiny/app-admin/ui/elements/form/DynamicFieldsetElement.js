import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import React from "react";
import { FormFieldElement } from "./FormFieldElement";
import { DynamicFieldset } from "@webiny/ui/DynamicFieldset";
import { Grid } from "@webiny/ui/Grid";
import { DynamicFieldsetRowElement } from "./DynamicFieldsetElement/DynamicFieldsetRowElement";
export var DynamicFieldsetElement = /*#__PURE__*/function (_FormFieldElement) {
  _inherits(DynamicFieldsetElement, _FormFieldElement);

  var _super = _createSuper(DynamicFieldsetElement);

  function DynamicFieldsetElement(id, config) {
    var _this;

    _classCallCheck(this, DynamicFieldsetElement);

    _this = _super.call(this, id, config);

    _this.useGrid(false);

    _this.applyPlugins(DynamicFieldsetElement);

    return _this;
  }

  _createClass(DynamicFieldsetElement, [{
    key: "getCreateHeaderElement",
    value: function getCreateHeaderElement() {
      return this.config.createHeader;
    }
  }, {
    key: "setHeaderElement",
    value: function setHeaderElement(element) {
      this.config.createHeader = function () {
        return element;
      };
    }
  }, {
    key: "setCreateHeaderElement",
    value: function setCreateHeaderElement(cb) {
      this.config.createHeader = cb;
    }
  }, {
    key: "getCreateRowElement",
    value: function getCreateRowElement() {
      return this.config.createRow;
    }
  }, {
    key: "setCreateRowElement",
    value: function setCreateRowElement(cb) {
      this.config.createRow = cb;
    }
  }, {
    key: "getCreateEmptyElement",
    value: function getCreateEmptyElement() {
      return this.config.createEmpty;
    }
  }, {
    key: "setEmptyElement",
    value: function setEmptyElement(element) {
      this.config.createEmpty = function () {
        return element;
      };
    }
  }, {
    key: "setCreateEmptyElement",
    value: function setCreateEmptyElement(cb) {
      this.config.createEmpty = cb;
    }
  }, {
    key: "render",
    value: function render(props) {
      var _this2 = this;

      if (!props.formProps) {
        throw Error("DynamicFieldsetElement must be placed inside of a FormElement.");
      }

      var Bind = props.formProps.Bind;
      var createHeader = this.getCreateHeaderElement();
      var createRow = this.getCreateRowElement();
      var createEmpty = this.getCreateEmptyElement();
      return /*#__PURE__*/React.createElement(Bind, {
        name: this.getName(),
        defaultValue: this.getDefaultValue(props)
      }, /*#__PURE__*/React.createElement(DynamicFieldset, null, function (_ref) {
        var actions = _ref.actions,
            header = _ref.header,
            row = _ref.row,
            empty = _ref.empty;
        return /*#__PURE__*/React.createElement(React.Fragment, null, header(function () {
          var headerElement = createHeader({
            actions: actions
          }); // This element is not created via `this.addElement()` API.
          // We need to manually give it a parent to enable proper grid rendering.

          headerElement && headerElement.setParent(_this2);
          return headerElement ? headerElement.render(props) : null;
        }), row(function (_ref2) {
          var index = _ref2.index;
          var rowElement = createRow({
            actions: actions,
            index: index,
            row: new DynamicFieldsetRowElement("".concat(_this2.id, ".row.").concat(index))
          }); // This element is not created via `this.addElement()` API.
          // We need to manually give it a parent to enable proper grid rendering.

          rowElement && rowElement.setParent(_this2);
          return rowElement ? /*#__PURE__*/React.createElement(Grid, null, rowElement.render(props)) : null;
        }), empty(function () {
          var emptyElement = createEmpty({
            actions: actions
          }); // This element is not created via `this.addElement()` API.
          // We need to manually give it a parent to enable proper grid rendering.

          emptyElement && emptyElement.setParent(_this2);
          return emptyElement ? emptyElement.render(props) : null;
        }));
      }));
    }
  }]);

  return DynamicFieldsetElement;
}(FormFieldElement);
//# sourceMappingURL=DynamicFieldsetElement.js.map