{"version":3,"sources":["../../../../src/ui/elements/form/DynamicFieldsetElement.tsx"],"names":["React","FormFieldElement","DynamicFieldset","Grid","DynamicFieldsetRowElement","DynamicFieldsetElement","id","config","useGrid","applyPlugins","createHeader","element","cb","createRow","createEmpty","props","formProps","Error","Bind","getCreateHeaderElement","getCreateRowElement","getCreateEmptyElement","getName","getDefaultValue","actions","header","row","empty","headerElement","setParent","render","index","rowElement","emptyElement"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n    FormFieldElement,\n    FormFieldElementConfig,\n    FormFieldElementRenderProps\n} from \"~/ui/elements/form/FormFieldElement\";\nimport { UIElement } from \"~/ui/UIElement\";\nimport { DynamicFieldset } from \"@webiny/ui/DynamicFieldset\";\nimport { Grid } from \"@webiny/ui/Grid\";\nimport { DynamicFieldsetRowElement } from \"./DynamicFieldsetElement/DynamicFieldsetRowElement\";\n\ninterface DynamicFieldsetActions {\n    add: (index?: number) => () => void;\n    remove: (index: number) => () => void;\n}\n\nexport interface DynamicFieldsetElementConfig extends FormFieldElementConfig {\n    createHeader?: (params: { actions: DynamicFieldsetActions }) => UIElement;\n    createRow?: (params: {\n        actions: DynamicFieldsetActions;\n        index: number;\n        row: DynamicFieldsetRowElement;\n    }) => UIElement;\n    createEmpty?: (params: { actions: DynamicFieldsetActions }) => UIElement;\n}\n\nexport class DynamicFieldsetElement extends FormFieldElement<DynamicFieldsetElementConfig> {\n    constructor(id: string, config: DynamicFieldsetElementConfig) {\n        super(id, config);\n\n        this.useGrid(false);\n\n        this.applyPlugins(DynamicFieldsetElement);\n    }\n\n    getCreateHeaderElement() {\n        return this.config.createHeader;\n    }\n\n    setHeaderElement(element: UIElement) {\n        this.config.createHeader = () => element;\n    }\n\n    setCreateHeaderElement(cb: DynamicFieldsetElementConfig[\"createHeader\"]) {\n        this.config.createHeader = cb;\n    }\n\n    getCreateRowElement() {\n        return this.config.createRow;\n    }\n\n    setCreateRowElement(cb: DynamicFieldsetElementConfig[\"createRow\"]) {\n        this.config.createRow = cb;\n    }\n\n    getCreateEmptyElement() {\n        return this.config.createEmpty;\n    }\n\n    setEmptyElement(element: UIElement) {\n        this.config.createEmpty = () => element;\n    }\n\n    setCreateEmptyElement(cb: DynamicFieldsetElementConfig[\"createEmpty\"]) {\n        this.config.createEmpty = cb;\n    }\n\n    render(props: FormFieldElementRenderProps): React.ReactNode {\n        if (!props.formProps) {\n            throw Error(`DynamicFieldsetElement must be placed inside of a FormElement.`);\n        }\n\n        const { Bind } = props.formProps;\n        const createHeader = this.getCreateHeaderElement();\n        const createRow = this.getCreateRowElement();\n        const createEmpty = this.getCreateEmptyElement();\n\n        return (\n            <Bind name={this.getName()} defaultValue={this.getDefaultValue(props)}>\n                <DynamicFieldset>\n                    {({ actions, header, row, empty }) => (\n                        <React.Fragment>\n                            {header(() => {\n                                const headerElement = createHeader({\n                                    actions: actions as DynamicFieldsetActions\n                                });\n                                // This element is not created via `this.addElement()` API.\n                                // We need to manually give it a parent to enable proper grid rendering.\n                                headerElement && headerElement.setParent(this);\n\n                                return headerElement ? headerElement.render(props) : null;\n                            })}\n                            {row(({ index }) => {\n                                const rowElement = createRow({\n                                    actions: actions as DynamicFieldsetActions,\n                                    index,\n                                    row: new DynamicFieldsetRowElement(`${this.id}.row.${index}`)\n                                });\n\n                                // This element is not created via `this.addElement()` API.\n                                // We need to manually give it a parent to enable proper grid rendering.\n                                rowElement && rowElement.setParent(this);\n\n                                return rowElement ? <Grid>{rowElement.render(props)}</Grid> : null;\n                            })}\n                            {empty(() => {\n                                const emptyElement = createEmpty({\n                                    actions: actions as DynamicFieldsetActions\n                                });\n\n                                // This element is not created via `this.addElement()` API.\n                                // We need to manually give it a parent to enable proper grid rendering.\n                                emptyElement && emptyElement.setParent(this);\n\n                                return emptyElement ? emptyElement.render(props) : null;\n                            })}\n                        </React.Fragment>\n                    )}\n                </DynamicFieldset>\n            </Bind>\n        );\n    }\n}\n"],"file":"DynamicFieldsetElement.js"}