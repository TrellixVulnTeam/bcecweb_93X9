import React from "react";
import { FormRenderPropParams, Form } from "@webiny/form";
import { UIElement, UIElementConfig } from "../../UIElement";
import { FormElementRenderProps } from "./FormElement";
export interface FormFieldElementConfig<TRenderProps = FormRenderPropParams> extends UIElementConfig<TRenderProps> {
    name: string;
    validators?: GetterWithProps<Function | Function[]>;
    beforeChange?: BeforeChange;
    afterChange?: AfterChange;
    defaultValue?: any | GetterWithProps<any>;
    isDisabled?: boolean | GetterWithProps<boolean>;
    label?: string | GetterWithProps<string>;
    description?: string | React.ReactElement | GetterWithProps<string | React.ReactElement>;
    placeholder?: string | GetterWithProps<string>;
}
export interface FormFieldElementRenderProps {
    formProps: FormRenderPropParams;
}
interface BeforeChange {
    (value: any, callback: BeforeChangeCallback): void;
}
interface BeforeChangeCallback {
    (value: any): void;
}
interface AfterChange {
    (value: any, form: Form): void;
}
interface GetterWithProps<T> {
    (props: FormElementRenderProps): T;
}
export declare class FormFieldElement<TConfig extends FormFieldElementConfig = FormFieldElementConfig> extends UIElement<TConfig> {
    private _beforeChange;
    private _afterChange;
    constructor(id: string, config: TConfig);
    getName(): string;
    getValidators(props?: FormFieldElementRenderProps): Function | Function[];
    getDefaultValue(props?: FormFieldElementRenderProps): any;
    getLabel(props?: FormFieldElementRenderProps): string;
    getDescription(props?: FormFieldElementRenderProps): string | React.ReactElement;
    getPlaceholder(props?: FormFieldElementRenderProps): string;
    setLabel(label: string | GetterWithProps<string>): void;
    setDescription(description: string | React.ReactElement | GetterWithProps<string | React.ReactElement>): void;
    setPlaceholder(placeholder: string | GetterWithProps<string>): void;
    setDefaultValue(value: any | GetterWithProps<any>): void;
    getIsDisabled(props?: FormFieldElementRenderProps): boolean;
    setIsDisabled(isDisabled: boolean | GetterWithProps<boolean>): void;
    setValidators(validators: GetterWithProps<Function>): void;
    onBeforeChange(value: any, cb: any): void;
    onAfterChange(value: any, form: any): void;
    addBeforeChange(cb: BeforeChange): void;
    addAfterChange(cb: AfterChange): void;
    setBeforeChange(cb: BeforeChange): void;
    setAfterChange(cb: AfterChange): void;
}
export {};
