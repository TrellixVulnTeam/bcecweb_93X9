{"version":3,"sources":["../../../../src/ui/elements/form/PasswordElement.tsx"],"names":["React","InputElement","Input","PasswordElement","props","formProps","Error","Bind","getName","getValidators","getDefaultValue","value","cb","onBeforeChange","form","onAfterChange","getLabel","getPlaceholder","getIsDisabled","getDescription"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT;AAEA,SAASC,KAAT,QAAsB,kBAAtB;AAEA,WAAaC,eAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACI,gBAAOC,KAAP,EAA+D;AAAA;;AAC3D,UAAI,CAACA,KAAK,CAACC,SAAX,EAAsB;AAClB,cAAMC,KAAK,2DAAX;AACH;;AAED,UAAQC,IAAR,GAAiBH,KAAK,CAACC,SAAvB,CAAQE,IAAR;AAEA,0BACI,oBAAC,IAAD;AACI,QAAA,IAAI,EAAE,KAAKC,OAAL,EADV;AAEI,QAAA,UAAU,EAAE,KAAKC,aAAL,CAAmBL,KAAnB,CAFhB;AAGI,QAAA,YAAY,EAAE,KAAKM,eAAL,CAAqBN,KAArB,CAHlB;AAII,QAAA,YAAY,EAAE,sBAACO,KAAD,EAAQC,EAAR;AAAA,iBAAe,KAAI,CAACC,cAAL,CAAoBF,KAApB,EAA2BC,EAA3B,CAAf;AAAA,SAJlB;AAKI,QAAA,WAAW,EAAE,qBAACD,KAAD,EAAQG,IAAR;AAAA,iBAAiB,KAAI,CAACC,aAAL,CAAmBJ,KAAnB,EAA0BG,IAA1B,CAAjB;AAAA;AALjB,sBAOI,oBAAC,KAAD;AACI,QAAA,IAAI,EAAE,UADV;AAEI,QAAA,KAAK,EAAE,KAAKE,QAAL,CAAcZ,KAAd,CAFX;AAGI,QAAA,WAAW,EAAE,KAAKa,cAAL,CAAoBb,KAApB,CAHjB;AAII,QAAA,QAAQ,EAAE,KAAKc,aAAL,CAAmBd,KAAnB,CAJd;AAKI,QAAA,WAAW,EAAE,KAAKe,cAAL,CAAoBf,KAApB;AALjB,QAPJ,CADJ;AAiBH;AAzBL;;AAAA;AAAA,EAAqCH,YAArC","sourcesContent":["import React from \"react\";\nimport { InputElement } from \"./InputElement\";\nimport { FormFieldElementRenderProps } from \"~/ui/elements/form/FormFieldElement\";\nimport { Input } from \"@webiny/ui/Input\";\n\nexport class PasswordElement extends InputElement {\n    render(props: FormFieldElementRenderProps): React.ReactElement {\n        if (!props.formProps) {\n            throw Error(`PasswordElement must be placed inside of a FormElement.`);\n        }\n\n        const { Bind } = props.formProps;\n\n        return (\n            <Bind\n                name={this.getName()}\n                validators={this.getValidators(props)}\n                defaultValue={this.getDefaultValue(props)}\n                beforeChange={(value, cb) => this.onBeforeChange(value, cb)}\n                afterChange={(value, form) => this.onAfterChange(value, form)}\n            >\n                <Input\n                    type={\"password\"}\n                    label={this.getLabel(props)}\n                    placeholder={this.getPlaceholder(props)}\n                    disabled={this.getIsDisabled(props)}\n                    description={this.getDescription(props)}\n                />\n            </Bind>\n        );\n    }\n}\n"],"file":"PasswordElement.js"}