{"version":3,"sources":["../../../../src/ui/elements/form/FormFieldElement.tsx"],"names":["UIElement","FormFieldElement","id","config","beforeChange","_beforeChange","push","afterChange","_afterChange","applyPlugins","name","props","validators","defaultValue","label","description","placeholder","value","isDisabled","cb","callbacks","next","length","pop","form"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { FormRenderPropParams, Form } from \"@webiny/form\";\nimport { UIElement, UIElementConfig } from \"~/ui/UIElement\";\nimport { FormElementRenderProps } from \"~/ui/elements/form/FormElement\";\n\nexport interface FormFieldElementConfig<TRenderProps = FormRenderPropParams>\n    extends UIElementConfig<TRenderProps> {\n    name: string;\n    validators?: GetterWithProps<Function | Function[]>;\n    beforeChange?: BeforeChange;\n    afterChange?: AfterChange;\n    defaultValue?: any | GetterWithProps<any>;\n    isDisabled?: boolean | GetterWithProps<boolean>;\n    label?: string | GetterWithProps<string>;\n    description?: string | React.ReactElement | GetterWithProps<string | React.ReactElement>;\n    placeholder?: string | GetterWithProps<string>;\n}\n\nexport interface FormFieldElementRenderProps {\n    formProps: FormRenderPropParams;\n}\n\ninterface BeforeChange {\n    (value: any, callback: BeforeChangeCallback): void;\n}\n\ninterface BeforeChangeCallback {\n    (value: any): void;\n}\n\ninterface AfterChange {\n    (value: any, form: Form): void;\n}\n\ninterface GetterWithProps<T> {\n    (props: FormElementRenderProps): T;\n}\n\nexport class FormFieldElement<\n    TConfig extends FormFieldElementConfig = FormFieldElementConfig\n> extends UIElement<TConfig> {\n    private _beforeChange: BeforeChange[] = [];\n    private _afterChange: AfterChange[] = [];\n\n    constructor(id: string, config: TConfig) {\n        super(id, config);\n\n        if (config.beforeChange) {\n            this._beforeChange.push(config.beforeChange);\n        }\n\n        if (config.afterChange) {\n            this._afterChange.push(config.afterChange);\n        }\n\n        this.applyPlugins(FormFieldElement);\n    }\n\n    getName() {\n        return this.config.name;\n    }\n\n    getValidators(props?: FormFieldElementRenderProps): Function | Function[] {\n        if (!this.config.validators || typeof this.config.validators !== \"function\") {\n            return () => true;\n        }\n\n        return this.config.validators(props);\n    }\n\n    getDefaultValue(props?: FormFieldElementRenderProps): any {\n        if (typeof this.config.defaultValue === \"function\") {\n            return this.config.defaultValue(props);\n        }\n\n        return this.config.defaultValue;\n    }\n\n    getLabel(props?: FormFieldElementRenderProps): string {\n        if (typeof this.config.label === \"function\") {\n            return this.config.label(props);\n        }\n\n        return this.config.label;\n    }\n\n    getDescription(props?: FormFieldElementRenderProps): string | React.ReactElement {\n        if (typeof this.config.description === \"function\") {\n            return this.config.description(props);\n        }\n\n        return this.config.description;\n    }\n\n    getPlaceholder(props?: FormFieldElementRenderProps): string {\n        if (typeof this.config.placeholder === \"function\") {\n            return this.config.placeholder(props);\n        }\n\n        return this.config.placeholder;\n    }\n\n    setLabel(label: string | GetterWithProps<string>) {\n        this.config.label = label;\n    }\n\n    setDescription(\n        description: string | React.ReactElement | GetterWithProps<string | React.ReactElement>\n    ) {\n        this.config.description = description;\n    }\n\n    setPlaceholder(placeholder: string | GetterWithProps<string>) {\n        this.config.placeholder = placeholder;\n    }\n\n    setDefaultValue(value: any | GetterWithProps<any>) {\n        this.config.defaultValue = value;\n    }\n\n    getIsDisabled(props?: FormFieldElementRenderProps) {\n        if (typeof this.config.isDisabled === \"function\") {\n            return this.config.isDisabled(props);\n        }\n        return this.config.isDisabled;\n    }\n\n    setIsDisabled(isDisabled: boolean | GetterWithProps<boolean>) {\n        this.config.isDisabled = isDisabled;\n    }\n\n    setValidators(validators: GetterWithProps<Function>) {\n        this.config.validators = validators;\n    }\n\n    onBeforeChange(value, cb) {\n        const callbacks = [...this._beforeChange];\n        const next = value => {\n            if (!callbacks.length) {\n                cb(value);\n                return;\n            }\n            callbacks.pop()(value, next);\n        };\n\n        next(value);\n    }\n\n    onAfterChange(value, form) {\n        const callbacks = [...this._afterChange];\n        const next = value => {\n            if (!callbacks.length) {\n                return;\n            }\n            callbacks.pop()(value, form);\n        };\n\n        next(value);\n    }\n\n    addBeforeChange(cb: BeforeChange) {\n        this._beforeChange.push(cb);\n    }\n\n    addAfterChange(cb: AfterChange) {\n        this._afterChange.push(cb);\n    }\n\n    setBeforeChange(cb: BeforeChange) {\n        this._beforeChange = [cb];\n    }\n\n    setAfterChange(cb: AfterChange) {\n        this._afterChange = [cb];\n    }\n}\n"],"file":"FormFieldElement.js"}