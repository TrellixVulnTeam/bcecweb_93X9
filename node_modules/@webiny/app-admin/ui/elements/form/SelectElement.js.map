{"version":3,"sources":["../../../../src/ui/elements/form/SelectElement.tsx"],"names":["React","Select","FormFieldElement","SelectElement","id","config","applyPlugins","options","props","formProps","Error","Bind","getName","getValidators","getDefaultValue","value","cb","onBeforeChange","form","onAfterChange","getLabel","getIsDisabled","getOptions","map","label"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SACIC,gBADJ;AAeA,WAAaC,aAAb;AAAA;;AAAA;;AACI,yBAAYC,EAAZ,EAAwBC,MAAxB,EAAqD;AAAA;;AAAA;;AACjD,8BAAMD,EAAN,EAAUC,MAAV;;AAEA,UAAKC,YAAL,CAAkBH,aAAlB;;AAHiD;AAIpD;;AALL;AAAA;AAAA,WAOI,oBAAWI,OAAX,EAA2C;AACvC,WAAKF,MAAL,CAAYE,OAAZ,GAAsBA,OAAtB;AACH;AATL;AAAA;AAAA,WAWI,sBAAa;AACT,aAAO,KAAKF,MAAL,CAAYE,OAAnB;AACH;AAbL;AAAA;AAAA,WAeI,gBAAOC,KAAP,EAA4D;AAAA;;AACxD,UAAI,CAACA,KAAK,CAACC,SAAX,EAAsB;AAClB,cAAMC,KAAK,yDAAX;AACH;;AAED,UAAQC,IAAR,GAAiBH,KAAK,CAACC,SAAvB,CAAQE,IAAR;AAEA,0BACI,oBAAC,IAAD;AACI,QAAA,IAAI,EAAE,KAAKC,OAAL,EADV;AAEI,QAAA,UAAU,EAAE,KAAKC,aAAL,CAAmBL,KAAnB,CAFhB;AAGI,QAAA,YAAY,EAAE,KAAKM,eAAL,CAAqBN,KAArB,CAHlB;AAII,QAAA,YAAY,EAAE,sBAACO,KAAD,EAAQC,EAAR;AAAA,iBAAe,MAAI,CAACC,cAAL,CAAoBF,KAApB,EAA2BC,EAA3B,CAAf;AAAA,SAJlB;AAKI,QAAA,WAAW,EAAE,qBAACD,KAAD,EAAQG,IAAR;AAAA,iBAAiB,MAAI,CAACC,aAAL,CAAmBJ,KAAnB,EAA0BG,IAA1B,CAAjB;AAAA;AALjB,sBAOI,oBAAC,MAAD;AACI,QAAA,KAAK,EAAE,KAAKE,QAAL,CAAcZ,KAAd,CADX;AAEI,QAAA,QAAQ,EAAE,KAAKa,aAAL,CAAmBb,KAAnB,CAFd;AAGI,QAAA,WAAW,EAAE,KAAKM,eAAL,CAAqBN,KAArB;AAHjB,SAKK,KAAKc,UAAL,GAAkBC,GAAlB,CAAsB;AAAA,YAAGR,KAAH,QAAGA,KAAH;AAAA,YAAUS,KAAV,QAAUA,KAAV;AAAA,4BACnB;AAAQ,UAAA,GAAG,EAAET,KAAb;AAAoB,UAAA,KAAK,EAAEA;AAA3B,WACKS,KADL,CADmB;AAAA,OAAtB,CALL,CAPJ,CADJ;AAqBH;AA3CL;;AAAA;AAAA,EAAmCtB,gBAAnC","sourcesContent":["import React from \"react\";\nimport { Select } from \"@webiny/ui/Select\";\nimport {\n    FormFieldElement,\n    FormFieldElementConfig,\n    FormFieldElementRenderProps\n} from \"~/ui/elements/form/FormFieldElement\";\n\nexport interface SelectElementOption {\n    value: string;\n    label: string;\n}\n\nexport interface SelectElementConfig extends FormFieldElementConfig {\n    options?: SelectElementOption[];\n}\n\nexport class SelectElement extends FormFieldElement<SelectElementConfig> {\n    constructor(id: string, config: SelectElementConfig) {\n        super(id, config);\n\n        this.applyPlugins(SelectElement);\n    }\n\n    setOptions(options: SelectElementOption[]) {\n        this.config.options = options;\n    }\n\n    getOptions() {\n        return this.config.options;\n    }\n\n    render(props: FormFieldElementRenderProps): React.ReactNode {\n        if (!props.formProps) {\n            throw Error(`SelectElement must be placed inside of a FormElement.`);\n        }\n\n        const { Bind } = props.formProps;\n\n        return (\n            <Bind\n                name={this.getName()}\n                validators={this.getValidators(props)}\n                defaultValue={this.getDefaultValue(props)}\n                beforeChange={(value, cb) => this.onBeforeChange(value, cb)}\n                afterChange={(value, form) => this.onAfterChange(value, form)}\n            >\n                <Select\n                    label={this.getLabel(props)}\n                    disabled={this.getIsDisabled(props)}\n                    description={this.getDefaultValue(props)}\n                >\n                    {this.getOptions().map(({ value, label }) => (\n                        <option key={value} value={value}>\n                            {label}\n                        </option>\n                    ))}\n                </Select>\n            </Bind>\n        );\n    }\n}\n"],"file":"SelectElement.js"}