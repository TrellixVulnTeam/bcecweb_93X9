import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import React from "react";
import { Input } from "@webiny/ui/Input";
import { FormFieldElement } from "./FormFieldElement";
export var InputElement = /*#__PURE__*/function (_FormFieldElement) {
  _inherits(InputElement, _FormFieldElement);

  var _super = _createSuper(InputElement);

  function InputElement(id, config) {
    var _this;

    _classCallCheck(this, InputElement);

    _this = _super.call(this, id, config);

    _this.applyPlugins(InputElement);

    return _this;
  }

  _createClass(InputElement, [{
    key: "render",
    value: function render(props) {
      var _this2 = this;

      if (!props.formProps) {
        throw Error("InputElement must be placed inside of a FormElement.");
      }

      var Bind = props.formProps.Bind;
      return /*#__PURE__*/React.createElement(Bind, {
        name: this.getName(),
        validators: this.getValidators(props),
        defaultValue: this.getDefaultValue(props),
        beforeChange: function beforeChange(value, cb) {
          return _this2.onBeforeChange(value, cb);
        },
        afterChange: function afterChange(value, form) {
          return _this2.onAfterChange(value, form);
        }
      }, /*#__PURE__*/React.createElement(Input, {
        label: this.getLabel(props),
        placeholder: this.getPlaceholder(props),
        disabled: this.getIsDisabled(props),
        description: this.getDescription(props)
      }));
    }
  }]);

  return InputElement;
}(FormFieldElement);
//# sourceMappingURL=InputElement.js.map