import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import React from "react";
import styled from "@emotion/styled";
import { UIRenderer } from "../../../UIRenderer";
import { FormElementMessage } from "@webiny/ui/FormElementMessage";
import { FileManager } from "../../../../components";
var ImageUploadWrapper = /*#__PURE__*/styled("div", {
  target: "e1g56mwy0",
  label: "ImageUploadWrapper"
})({
  position: "relative",
  ".disabled": {
    opacity: 0.75,
    pointerEvents: "none"
  },
  ".mdc-floating-label--float-above": {
    transform: "scale(0.75)",
    top: 10,
    left: 10,
    color: "var(--mdc-theme-text-secondary-on-background)"
  },
  ".mdc-text-field-helper-text": {
    color: "var(--mdc-theme-text-secondary-on-background)"
  }
});
export var FileManagerElementRenderer = /*#__PURE__*/function (_UIRenderer) {
  _inherits(FileManagerElementRenderer, _UIRenderer);

  var _super = _createSuper(FileManagerElementRenderer);

  function FileManagerElementRenderer() {
    _classCallCheck(this, FileManagerElementRenderer);

    return _super.apply(this, arguments);
  }

  _createClass(FileManagerElementRenderer, [{
    key: "render",
    value: function render(_ref) {
      var element = _ref.element,
          props = _ref.props;

      if (!props.formProps) {
        throw Error("FileManagerElement must be placed inside of a FormElement.");
      }

      var Bind = props.formProps.Bind;
      var accept = element.getAccept();
      var label = element.getLabel(props);
      var description = element.getDescription(props);
      return /*#__PURE__*/React.createElement(Bind, {
        name: element.getName(),
        validators: element.getValidators(props),
        defaultValue: element.getDefaultValue(props),
        beforeChange: function beforeChange(value, cb) {
          return element.onBeforeChange(value, cb);
        },
        afterChange: function afterChange(value, form) {
          return element.onAfterChange(value, form);
        }
      }, function (_ref2) {
        var value = _ref2.value,
            onChange = _ref2.onChange,
            validation = _ref2.validation;
        return /*#__PURE__*/React.createElement(ImageUploadWrapper, null, label && /*#__PURE__*/React.createElement("div", {
          className: "mdc-floating-label mdc-floating-label--float-above"
        }, label), /*#__PURE__*/React.createElement(FileManager, {
          onChange: onChange,
          onChangePick: element.getOnChangePickAttributes(),
          accept: accept,
          images: !accept,
          maxSize: element.getMaxSize(),
          multipleMaxCount: element.getMultipleMaxCount(),
          multipleMaxSize: element.getMultipleMaxSize()
        }, function (_ref3) {
          var showFileManager = _ref3.showFileManager;
          return element.getEmptyStateElement().render(_objectSpread(_objectSpread({}, props), {}, {
            fileManagerElement: element,
            showFileManager: showFileManager,
            value: value,
            onChange: onChange
          }));
        }), validation.isValid === false && /*#__PURE__*/React.createElement(FormElementMessage, {
          error: true
        }, validation.message), validation.isValid !== false && description && /*#__PURE__*/React.createElement(FormElementMessage, null, description));
      });
    }
  }]);

  return FileManagerElementRenderer;
}(UIRenderer);
//# sourceMappingURL=FileManagerElementRenderer.js.map