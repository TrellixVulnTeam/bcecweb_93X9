import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import React from "react";
import { Select } from "@webiny/ui/Select";
import { FormFieldElement } from "./FormFieldElement";
export var SelectElement = /*#__PURE__*/function (_FormFieldElement) {
  _inherits(SelectElement, _FormFieldElement);

  var _super = _createSuper(SelectElement);

  function SelectElement(id, config) {
    var _this;

    _classCallCheck(this, SelectElement);

    _this = _super.call(this, id, config);

    _this.applyPlugins(SelectElement);

    return _this;
  }

  _createClass(SelectElement, [{
    key: "setOptions",
    value: function setOptions(options) {
      this.config.options = options;
    }
  }, {
    key: "getOptions",
    value: function getOptions() {
      return this.config.options;
    }
  }, {
    key: "render",
    value: function render(props) {
      var _this2 = this;

      if (!props.formProps) {
        throw Error("SelectElement must be placed inside of a FormElement.");
      }

      var Bind = props.formProps.Bind;
      return /*#__PURE__*/React.createElement(Bind, {
        name: this.getName(),
        validators: this.getValidators(props),
        defaultValue: this.getDefaultValue(props),
        beforeChange: function beforeChange(value, cb) {
          return _this2.onBeforeChange(value, cb);
        },
        afterChange: function afterChange(value, form) {
          return _this2.onAfterChange(value, form);
        }
      }, /*#__PURE__*/React.createElement(Select, {
        label: this.getLabel(props),
        disabled: this.getIsDisabled(props),
        description: this.getDefaultValue(props)
      }, this.getOptions().map(function (_ref) {
        var value = _ref.value,
            label = _ref.label;
        return /*#__PURE__*/React.createElement("option", {
          key: value,
          value: value
        }, label);
      })));
    }
  }]);

  return SelectElement;
}(FormFieldElement);
//# sourceMappingURL=SelectElement.js.map