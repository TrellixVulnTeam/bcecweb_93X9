import React from "react";
import { FormFieldElement, FormFieldElementConfig, FormFieldElementRenderProps } from "./FormFieldElement";
import { UIElement } from "../../UIElement";
import { DynamicFieldsetRowElement } from "./DynamicFieldsetElement/DynamicFieldsetRowElement";
interface DynamicFieldsetActions {
    add: (index?: number) => () => void;
    remove: (index: number) => () => void;
}
export interface DynamicFieldsetElementConfig extends FormFieldElementConfig {
    createHeader?: (params: {
        actions: DynamicFieldsetActions;
    }) => UIElement;
    createRow?: (params: {
        actions: DynamicFieldsetActions;
        index: number;
        row: DynamicFieldsetRowElement;
    }) => UIElement;
    createEmpty?: (params: {
        actions: DynamicFieldsetActions;
    }) => UIElement;
}
export declare class DynamicFieldsetElement extends FormFieldElement<DynamicFieldsetElementConfig> {
    constructor(id: string, config: DynamicFieldsetElementConfig);
    getCreateHeaderElement(): (params: {
        actions: DynamicFieldsetActions;
    }) => UIElement<import("@webiny/ui-composer/UIElement").UIElementConfig<any>>;
    setHeaderElement(element: UIElement): void;
    setCreateHeaderElement(cb: DynamicFieldsetElementConfig["createHeader"]): void;
    getCreateRowElement(): (params: {
        actions: DynamicFieldsetActions;
        index: number;
        row: DynamicFieldsetRowElement;
    }) => UIElement<import("@webiny/ui-composer/UIElement").UIElementConfig<any>>;
    setCreateRowElement(cb: DynamicFieldsetElementConfig["createRow"]): void;
    getCreateEmptyElement(): (params: {
        actions: DynamicFieldsetActions;
    }) => UIElement<import("@webiny/ui-composer/UIElement").UIElementConfig<any>>;
    setEmptyElement(element: UIElement): void;
    setCreateEmptyElement(cb: DynamicFieldsetElementConfig["createEmpty"]): void;
    render(props: FormFieldElementRenderProps): React.ReactNode;
}
export {};
