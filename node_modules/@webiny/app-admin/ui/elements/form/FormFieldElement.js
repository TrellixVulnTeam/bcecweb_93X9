import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { UIElement } from "../../UIElement";
export var FormFieldElement = /*#__PURE__*/function (_UIElement) {
  _inherits(FormFieldElement, _UIElement);

  var _super = _createSuper(FormFieldElement);

  function FormFieldElement(id, config) {
    var _this;

    _classCallCheck(this, FormFieldElement);

    _this = _super.call(this, id, config);

    _defineProperty(_assertThisInitialized(_this), "_beforeChange", []);

    _defineProperty(_assertThisInitialized(_this), "_afterChange", []);

    if (config.beforeChange) {
      _this._beforeChange.push(config.beforeChange);
    }

    if (config.afterChange) {
      _this._afterChange.push(config.afterChange);
    }

    _this.applyPlugins(FormFieldElement);

    return _this;
  }

  _createClass(FormFieldElement, [{
    key: "getName",
    value: function getName() {
      return this.config.name;
    }
  }, {
    key: "getValidators",
    value: function getValidators(props) {
      if (!this.config.validators || typeof this.config.validators !== "function") {
        return function () {
          return true;
        };
      }

      return this.config.validators(props);
    }
  }, {
    key: "getDefaultValue",
    value: function getDefaultValue(props) {
      if (typeof this.config.defaultValue === "function") {
        return this.config.defaultValue(props);
      }

      return this.config.defaultValue;
    }
  }, {
    key: "getLabel",
    value: function getLabel(props) {
      if (typeof this.config.label === "function") {
        return this.config.label(props);
      }

      return this.config.label;
    }
  }, {
    key: "getDescription",
    value: function getDescription(props) {
      if (typeof this.config.description === "function") {
        return this.config.description(props);
      }

      return this.config.description;
    }
  }, {
    key: "getPlaceholder",
    value: function getPlaceholder(props) {
      if (typeof this.config.placeholder === "function") {
        return this.config.placeholder(props);
      }

      return this.config.placeholder;
    }
  }, {
    key: "setLabel",
    value: function setLabel(label) {
      this.config.label = label;
    }
  }, {
    key: "setDescription",
    value: function setDescription(description) {
      this.config.description = description;
    }
  }, {
    key: "setPlaceholder",
    value: function setPlaceholder(placeholder) {
      this.config.placeholder = placeholder;
    }
  }, {
    key: "setDefaultValue",
    value: function setDefaultValue(value) {
      this.config.defaultValue = value;
    }
  }, {
    key: "getIsDisabled",
    value: function getIsDisabled(props) {
      if (typeof this.config.isDisabled === "function") {
        return this.config.isDisabled(props);
      }

      return this.config.isDisabled;
    }
  }, {
    key: "setIsDisabled",
    value: function setIsDisabled(isDisabled) {
      this.config.isDisabled = isDisabled;
    }
  }, {
    key: "setValidators",
    value: function setValidators(validators) {
      this.config.validators = validators;
    }
  }, {
    key: "onBeforeChange",
    value: function onBeforeChange(value, cb) {
      var callbacks = _toConsumableArray(this._beforeChange);

      var next = function next(value) {
        if (!callbacks.length) {
          cb(value);
          return;
        }

        callbacks.pop()(value, next);
      };

      next(value);
    }
  }, {
    key: "onAfterChange",
    value: function onAfterChange(value, form) {
      var callbacks = _toConsumableArray(this._afterChange);

      var next = function next(value) {
        if (!callbacks.length) {
          return;
        }

        callbacks.pop()(value, form);
      };

      next(value);
    }
  }, {
    key: "addBeforeChange",
    value: function addBeforeChange(cb) {
      this._beforeChange.push(cb);
    }
  }, {
    key: "addAfterChange",
    value: function addAfterChange(cb) {
      this._afterChange.push(cb);
    }
  }, {
    key: "setBeforeChange",
    value: function setBeforeChange(cb) {
      this._beforeChange = [cb];
    }
  }, {
    key: "setAfterChange",
    value: function setAfterChange(cb) {
      this._afterChange = [cb];
    }
  }]);

  return FormFieldElement;
}(UIElement);
//# sourceMappingURL=FormFieldElement.js.map