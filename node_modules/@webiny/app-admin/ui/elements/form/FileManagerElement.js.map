{"version":3,"sources":["../../../../src/ui/elements/form/FileManagerElement.tsx"],"names":["FormFieldElement","FileManagerElementRenderer","EmptyStateElement","FileManagerElement","id","config","addRenderer","_emptyStateElement","applyPlugins","accept","maxSize","multipleMaxCount","multipleMaxSize","onChangePickAttributes","attributes"],"mappings":";;;;;;AACA,SAASA,gBAAT;AACA,SAASC,0BAAT;AACA,SAASC,iBAAT;AAwBA,WAAaC,kBAAb;AAAA;;AAAA;;AAGI,8BAAYC,EAAZ,EAAwBC,MAAxB,EAA0D;AAAA;;AAAA;;AACtD,8BAAMD,EAAN,EAAUC,MAAV;;AADsD;;AAGtD,UAAKC,WAAL,CAAiB,IAAIL,0BAAJ,EAAjB;;AAEA,UAAKM,kBAAL,GAA0B,IAAIL,iBAAJ,CAAsB,YAAtB,CAA1B;;AAEA,UAAKM,YAAL,CAAkBL,kBAAlB;;AAPsD;AAQzD;;AAXL;AAAA;AAAA,WAaI,gCAAuB;AACnB,aAAO,KAAKI,kBAAZ;AACH;AAfL;AAAA;AAAA,WAiBI,qBAAY;AACR,aAAO,KAAKF,MAAL,CAAYI,MAAnB;AACH;AAnBL;AAAA;AAAA,WAqBI,mBAAUA,MAAV,EAA4B;AACxB,WAAKJ,MAAL,CAAYI,MAAZ,GAAqBA,MAArB;AACH;AAvBL;AAAA;AAAA,WAyBI,sBAAa;AACT,aAAO,KAAKJ,MAAL,CAAYK,OAAnB;AACH;AA3BL;AAAA;AAAA,WA6BI,oBAAWA,OAAX,EAAqC;AACjC,WAAKL,MAAL,CAAYK,OAAZ,GAAsBA,OAAtB;AACH;AA/BL;AAAA;AAAA,WAiCI,+BAAsB;AAClB,aAAO,KAAKL,MAAL,CAAYM,gBAAnB;AACH;AAnCL;AAAA;AAAA,WAqCI,6BAAoBA,gBAApB,EAA8C;AAC1C,WAAKN,MAAL,CAAYM,gBAAZ,GAA+BA,gBAA/B;AACH;AAvCL;AAAA;AAAA,WAyCI,8BAAqB;AACjB,aAAO,KAAKN,MAAL,CAAYO,eAAnB;AACH;AA3CL;AAAA;AAAA,WA6CI,4BAAmBA,eAAnB,EAAqD;AACjD,WAAKP,MAAL,CAAYO,eAAZ,GAA8BA,eAA9B;AACH;AA/CL;AAAA;AAAA,WAiDI,qCAA4B;AACxB,aAAO,KAAKP,MAAL,CAAYQ,sBAAnB;AACH;AAnDL;AAAA;AAAA,WAqDI,mCAA0BC,UAA1B,EAAgD;AAC5C,WAAKT,MAAL,CAAYQ,sBAAZ,GAAqCC,UAArC;AACH;AAvDL;;AAAA;AAAA,EAAwCd,gBAAxC","sourcesContent":["import { UIElement } from \"~/ui/UIElement\";\nimport { FormFieldElement, FormFieldElementConfig } from \"./FormFieldElement\";\nimport { FileManagerElementRenderer } from \"./FileManagerElement/FileManagerElementRenderer\";\nimport { EmptyStateElement } from \"./FileManagerElement/EmptyStateElement\";\n\nexport interface FileManagerElementConfig extends FormFieldElementConfig {\n    // Define mime types that will be shown and accepted by FileManager\n    accept?: string[];\n\n    // Define file's max allowed size (default is \"10mb\").\n    // Uses \"bytes\" (https://www.npmjs.com/package/bytes) library to convert string notation to actual number.\n    maxSize?: number | string;\n\n    // Max number of files in a single batch.\n    multipleMaxCount?: number;\n\n    // Max size of files in a single batch.\n    multipleMaxSize?: number | string;\n\n    // Define properties that are returned on file(s) selection.\n    onChangePickAttributes?: string[];\n\n    // Define whether multiple files can be selected1.\n    // TODO: multiple?: boolean; - create a new renderer for \"multiple=true\" to render multiple files\n    // It should work as in Headless CMS content entry form, see that for an example.\n}\n\nexport class FileManagerElement extends FormFieldElement<FileManagerElementConfig> {\n    private _emptyStateElement: UIElement;\n\n    constructor(id: string, config: FileManagerElementConfig) {\n        super(id, config);\n\n        this.addRenderer(new FileManagerElementRenderer());\n\n        this._emptyStateElement = new EmptyStateElement(\"emptyState\");\n\n        this.applyPlugins(FileManagerElement);\n    }\n\n    getEmptyStateElement() {\n        return this._emptyStateElement;\n    }\n\n    getAccept() {\n        return this.config.accept;\n    }\n\n    setAccept(accept: string[]) {\n        this.config.accept = accept;\n    }\n\n    getMaxSize() {\n        return this.config.maxSize;\n    }\n\n    setMaxSize(maxSize: number | string) {\n        this.config.maxSize = maxSize;\n    }\n\n    getMultipleMaxCount() {\n        return this.config.multipleMaxCount;\n    }\n\n    setMultipleMaxCount(multipleMaxCount: number) {\n        this.config.multipleMaxCount = multipleMaxCount;\n    }\n\n    getMultipleMaxSize() {\n        return this.config.multipleMaxSize;\n    }\n\n    setMultipleMaxSize(multipleMaxSize: number | string) {\n        this.config.multipleMaxSize = multipleMaxSize;\n    }\n\n    getOnChangePickAttributes() {\n        return this.config.onChangePickAttributes;\n    }\n\n    setOnChangePickAttributes(attributes: string[]) {\n        this.config.onChangePickAttributes = attributes;\n    }\n}\n"],"file":"FileManagerElement.js"}