import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import { UIElement } from "../UIElement";

/**
 * !GOOD FIRST ISSUE!
 * Add support for `text` config and `setText` setter to accept functions.
 * See example in ButtonElement: packages/app-admin/src/ui/elements/ButtonElement.tsx
 */
export var LabelElement = /*#__PURE__*/function (_UIElement) {
  _inherits(LabelElement, _UIElement);

  var _super = _createSuper(LabelElement);

  function LabelElement(id, config) {
    var _this;

    _classCallCheck(this, LabelElement);

    _this = _super.call(this, id, config);

    _this.applyPlugins(LabelElement);

    return _this;
  }

  _createClass(LabelElement, [{
    key: "getText",
    value: function getText() {
      return this.config.text;
    }
  }, {
    key: "setText",
    value: function setText(text) {
      this.config.text = text;
    }
  }, {
    key: "render",
    value: function render() {
      return this.config.text;
    }
  }]);

  return LabelElement;
}(UIElement);
//# sourceMappingURL=LabelElement.js.map