import _createForOfIteratorHelper from "@babel/runtime/helpers/createForOfIteratorHelper";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _get from "@babel/runtime/helpers/get";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { default as localStorage } from "store";
import { UIElement } from "../UIElement";
var LOCAL_STORAGE_KEY = "webiny_apps_menu_sections";
export var TAGS;

(function (TAGS) {
  TAGS["UTILS"] = "utils";
  TAGS["APP"] = "app";
})(TAGS || (TAGS = {}));

export var NavigationMenuElement = /*#__PURE__*/function (_UIElement) {
  _inherits(NavigationMenuElement, _UIElement);

  var _super = _createSuper(NavigationMenuElement);

  function NavigationMenuElement(id, config) {
    var _this;

    _classCallCheck(this, NavigationMenuElement);

    _this = _super.call(this, id, config);

    _defineProperty(_assertThisInitialized(_this), "_isExpanded", false);

    _defineProperty(_assertThisInitialized(_this), "_sorters", []);

    _this.useGrid(false);

    var state = _this.loadState();

    _this._isExpanded = state.includes(_this.id);

    _this.addSorter(function (a, b) {
      if (a.hasTag(TAGS.APP) && b.hasTag(TAGS.UTILS)) {
        return -1;
      }

      if (a.hasTag(TAGS.UTILS) && b.hasTag(TAGS.APP)) {
        return 1;
      }

      return a.config.label.localeCompare(b.config.label);
    }); // Apply plugins


    _this.applyPlugins(NavigationMenuElement);

    return _this;
  }

  _createClass(NavigationMenuElement, [{
    key: "addElement",
    value: function addElement(element) {
      _get(_getPrototypeOf(NavigationMenuElement.prototype), "addElement", this).call(this, element);

      this.runSorters();
      return element;
    }
  }, {
    key: "addSorter",
    value: function addSorter(sorter) {
      this._sorters.push(sorter);
    }
  }, {
    key: "isExpanded",
    get: function get() {
      return this._isExpanded;
    }
  }, {
    key: "setIcon",
    value: function setIcon(icon) {
      this.config.icon = icon;
    }
  }, {
    key: "setLabel",
    value: function setLabel(label) {
      this.config.label = label;
    }
  }, {
    key: "setPath",
    value: function setPath(path) {
      this.config.path = path;
    }
  }, {
    key: "expandElement",
    value: function expandElement() {
      this._isExpanded = true;
      var state = this.loadState();

      if (!state.includes(this.id)) {
        state.push(this.id);
      }

      this.storeState(state);
      this.getView().refresh();
    }
  }, {
    key: "collapseElement",
    value: function collapseElement() {
      this._isExpanded = false;
      var state = this.loadState();

      if (state.includes(this.id)) {
        state.splice(state.indexOf(this.id), 1);
      }

      this.storeState(state);
      this.getView().refresh();
    }
  }, {
    key: "toggleElement",
    value: function toggleElement() {
      if (this._isExpanded) {
        this.collapseElement();
      } else {
        this.expandElement();
      }
    }
  }, {
    key: "loadState",
    value: function loadState() {
      return (localStorage.get(LOCAL_STORAGE_KEY) || "").split(",").filter(Boolean);
    }
  }, {
    key: "storeState",
    value: function storeState(state) {
      localStorage.set(LOCAL_STORAGE_KEY, state.join(","));
    }
  }, {
    key: "runSorters",
    value: function runSorters() {
      var _iterator = _createForOfIteratorHelper(this._sorters),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var sorter = _step.value;
          this.getLayout().sort(sorter);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }]);

  return NavigationMenuElement;
}(UIElement);
//# sourceMappingURL=NavigationMenuElement.js.map