import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import React, { Fragment } from "react";
import { css } from "emotion";
import { Transition } from "react-transition-group";
import classNames from "classnames";
import { UIRenderer } from "../../../ui/UIRenderer";
import { List, ListItem, ListItemGraphic, ListItemMeta } from "@webiny/ui/List";
import { IconButton } from "@webiny/ui/Button";
import { ReactComponent as UpIcon } from "@svgr/webpack!../../../assets/icons/round-keyboard_arrow_up-24px.svg";
import { ReactComponent as DownIcon } from "@svgr/webpack!../../../assets/icons/round-keyboard_arrow_down-24px.svg";
import { ContentElement } from "../../../ui/views/NavigationView/ContentElement";
import { Link } from "@webiny/react-router";
var defaultStyle = {
  transform: "translateY(-20px)",
  opacity: 0,
  transitionProperty: "transform, opacity",
  transitionTimingFunction: "cubic-bezier(0, 0, .2, 1)",
  transitionDuration: "100ms",
  willChange: "opacity, transform"
};
var transitionStyles = {
  entering: {
    transform: "translateY(-20px)",
    opacity: 0
  },
  entered: {
    transform: "translateY(0px)",
    opacity: 1
  }
};
var menuTitle = /*#__PURE__*/css({
  ".mdc-drawer &.mdc-list": {
    borderBottom: "1px solid var(--mdc-theme-on-background)",
    padding: 0,
    ".mdc-list-item": {
      margin: 0,
      padding: "0 15px",
      height: "48px",
      width: "100%",
      fontWeight: 600,
      boxSizing: "border-box"
    }
  }
}, "label:menuTitle;");
var menuTitleActive = /*#__PURE__*/css({
  backgroundColor: "var(--mdc-theme-background)"
}, "label:menuTitleActive;");
export var MenuGroupRenderer = /*#__PURE__*/function (_UIRenderer) {
  _inherits(MenuGroupRenderer, _UIRenderer);

  var _super = _createSuper(MenuGroupRenderer);

  function MenuGroupRenderer() {
    _classCallCheck(this, MenuGroupRenderer);

    return _super.apply(this, arguments);
  }

  _createClass(MenuGroupRenderer, [{
    key: "canRender",
    value: function canRender(element) {
      var isInContent = Boolean(element.getParentByType(ContentElement));
      return element.depth === 1 && isInContent && !element.config.path;
    }
  }, {
    key: "render",
    value: function render(_ref) {
      var element = _ref.element,
          props = _ref.props,
          next = _ref.next;
      var hasChildren = element.getChildren().length > 0;

      if (!hasChildren) {
        return null;
      }

      var withLink = function withLink(content) {
        var defaultOnClick = element.getView().getNavigationHook().hideMenu;
        var onClick = element.config.onClick || defaultOnClick;
        return /*#__PURE__*/React.createElement(Link, {
          to: element.config.path,
          "data-testid": element.config.testId,
          onClick: onClick ? function () {
            return onClick(props);
          } : null
        }, content);
      };

      var menuItem = /*#__PURE__*/React.createElement(List, {
        className: classNames(menuTitle, _defineProperty({}, menuTitleActive, element.isExpanded))
      }, /*#__PURE__*/React.createElement(ListItem, {
        "data-testid": element.config.testId,
        onClick: function onClick() {
          if (typeof element.config.onClick === "function") {
            element.config.onClick(function () {
              return element.toggleElement();
            });
          } else {
            element.toggleElement();
          }
        }
      }, element.config.icon && /*#__PURE__*/React.createElement(ListItemGraphic, null, /*#__PURE__*/React.createElement(IconButton, {
        icon: element.config.icon
      })), element.config.label, hasChildren ? /*#__PURE__*/React.createElement(ListItemMeta, null, /*#__PURE__*/React.createElement(IconButton, {
        icon: element.isExpanded ? /*#__PURE__*/React.createElement(UpIcon, null) : /*#__PURE__*/React.createElement(DownIcon, null)
      })) : null));
      return /*#__PURE__*/React.createElement(Fragment, null, element.config.path ? withLink(menuItem) : menuItem, hasChildren ? /*#__PURE__*/React.createElement(Transition, {
        in: element.isExpanded,
        timeout: 100,
        appear: true,
        unmountOnExit: true
      }, function (state) {
        return /*#__PURE__*/React.createElement("div", {
          style: _objectSpread(_objectSpread({}, defaultStyle), transitionStyles[state])
        }, next());
      }) : null);
    }
  }]);

  return MenuGroupRenderer;
}(UIRenderer);
//# sourceMappingURL=MenuGroupRenderer.js.map