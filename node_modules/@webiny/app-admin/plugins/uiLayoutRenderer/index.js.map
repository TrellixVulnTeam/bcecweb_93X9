{"version":3,"sources":["../../../src/plugins/uiLayoutRenderer/index.tsx"],"names":["React","Fragment","Cell","Grid","GridInner","UILayoutPlugin","getElementKey","element","constructor","name","id","ElementID","children","layout","setRenderer","props","hasParentGrid","getGrid","getLayout","map","row","index","item","getElement","console","warn","shouldRender","render","GridComponent","width"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,SAArB,QAAsC,iBAAtC;AACA,SAASC,cAAT;;AAGA,SAASC,aAAT,CAAuBC,OAAvB,EAA2C;AACvC,mBAAUA,OAAO,CAACC,WAAR,CAAoBC,IAA9B,cAAsCF,OAAO,CAACG,EAA9C;AACH;;AAED,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AAChC,SAAOA,QAAP;AACH,CAFD;;AAIA,eAAe,IAAIP,cAAJ,CAAmB,UAAAQ,MAAM,EAAI;AACxCA,EAAAA,MAAM,CAACC,WAAP,CAAmB,iBAAsC;AAAA,QAAnCD,MAAmC,SAAnCA,MAAmC;AAAA,QAA3BE,KAA2B,SAA3BA,KAA2B;AAAA,QAApBC,aAAoB,SAApBA,aAAoB;;AACrD,QAAI,CAACH,MAAM,CAACI,OAAP,EAAL,EAAuB;AACnB,0BACI,oBAAC,QAAD,QACKJ,MAAM,CAACK,SAAP,GAAmBC,GAAnB,CAAuB,UAACC,GAAD,EAAMC,KAAN;AAAA,4BACpB,oBAAC,QAAD;AAAU,UAAA,GAAG,EAAEA;AAAf,WACKD,GAAG,CAACD,GAAJ,CAAQ,UAAAG,IAAI,EAAI;AACb,cAAMf,OAAO,GAAGM,MAAM,CAACU,UAAP,CAAkBD,IAAI,CAACf,OAAvB,CAAhB;;AAEA,cAAI,CAACA,OAAL,EAAc;AACViB,YAAAA,OAAO,CAACC,IAAR,qBAAyBH,IAAI,CAACf,OAA9B;AACA,mBAAO,IAAP;AACH;;AAED,cAAI,CAACA,OAAO,CAACmB,YAAR,CAAqBX,KAArB,CAAL,EAAkC;AAC9B,mBAAO,IAAP;AACH;;AAED,8BACI,oBAAC,SAAD;AAAW,YAAA,GAAG,EAAET,aAAa,CAACC,OAAD;AAA7B,aACKA,OAAO,CAACoB,MAAR,CAAeZ,KAAf,CADL,CADJ;AAKH,SAjBA,CADL,CADoB;AAAA,OAAvB,CADL,CADJ;AA0BH;;AAED,QAAMa,aAAa,GAAGZ,aAAa,GAAGZ,SAAH,GAAeD,IAAlD;AAEA,wBACI,oBAAC,aAAD,QACKU,MAAM,CAACK,SAAP,GAAmBC,GAAnB,CAAuB,UAACC,GAAD,EAAMC,KAAN;AAAA,0BACpB,oBAAC,QAAD;AAAU,QAAA,GAAG,EAAEA;AAAf,SACKD,GAAG,CAACD,GAAJ,CAAQ,UAAAG,IAAI,EAAI;AACb,YAAMf,OAAO,GAAGM,MAAM,CAACU,UAAP,CAAkBD,IAAI,CAACf,OAAvB,CAAhB;;AACA,YAAI,CAACA,OAAO,CAACmB,YAAR,CAAqBX,KAArB,CAAL,EAAkC;AAC9B,iBAAO,IAAP;AACH;;AACD,4BACI,oBAAC,IAAD;AAAM,UAAA,GAAG,EAAEO,IAAI,CAACf,OAAhB;AAAyB,UAAA,IAAI,EAAEe,IAAI,CAACO;AAApC,wBACI,oBAAC,SAAD;AAAW,UAAA,GAAG,EAAEvB,aAAa,CAACC,OAAD;AAA7B,WACKA,OAAO,CAACoB,MAAR,CAAeZ,KAAf,CADL,CADJ,CADJ;AAOH,OAZA,CADL,CADoB;AAAA,KAAvB,CADL,CADJ;AAqBH,GArDD;AAsDH,CAvDc,CAAf","sourcesContent":["import React, { Fragment } from \"react\";\nimport { Cell, Grid, GridInner } from \"@webiny/ui/Grid\";\nimport { UILayoutPlugin } from \"~/ui/UILayout\";\nimport { UIElement } from \"~/ui/UIElement\";\n\nfunction getElementKey(element: UIElement) {\n    return `${element.constructor.name}:${element.id}`;\n}\n\nconst ElementID = ({ children }) => {\n    return children;\n};\n\nexport default new UILayoutPlugin(layout => {\n    layout.setRenderer(({ layout, props, hasParentGrid }) => {\n        if (!layout.getGrid()) {\n            return (\n                <Fragment>\n                    {layout.getLayout().map((row, index) => (\n                        <Fragment key={index}>\n                            {row.map(item => {\n                                const element = layout.getElement(item.element);\n\n                                if (!element) {\n                                    console.warn(`Element \"${item.element}\" was not found!`);\n                                    return null;\n                                }\n\n                                if (!element.shouldRender(props)) {\n                                    return null;\n                                }\n\n                                return (\n                                    <ElementID key={getElementKey(element)}>\n                                        {element.render(props)}\n                                    </ElementID>\n                                );\n                            })}\n                        </Fragment>\n                    ))}\n                </Fragment>\n            );\n        }\n\n        const GridComponent = hasParentGrid ? GridInner : Grid;\n\n        return (\n            <GridComponent>\n                {layout.getLayout().map((row, index) => (\n                    <Fragment key={index}>\n                        {row.map(item => {\n                            const element = layout.getElement(item.element);\n                            if (!element.shouldRender(props)) {\n                                return null;\n                            }\n                            return (\n                                <Cell key={item.element} span={item.width}>\n                                    <ElementID key={getElementKey(element)}>\n                                        {element.render(props)}\n                                    </ElementID>\n                                </Cell>\n                            );\n                        })}\n                    </Fragment>\n                ))}\n            </GridComponent>\n        );\n    });\n});\n"],"file":"index.js"}