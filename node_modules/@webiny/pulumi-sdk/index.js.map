{"version":3,"sources":["../src/index.ts"],"names":["FLAG_NON_INTERACTIVE","PULUMI_FOLDER","path","join","__dirname","os","platform","PULUMI_BINARY_PATH","Pulumi","constructor","options","defaultArgs","run","rawArgs","args","Array","isArray","command","finalArgs","key","value","i","length","push","execa","install","installed","beforePulumiInstall","afterPulumiInstall","version","require","stdio","env","PULUMI_HOME","PULUMI_SKIP_UPDATE_CHECK"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;;;AA0BO,MAAMA,oBAAoB,GAAG,mBAA7B;;AACA,MAAMC,aAAa,GAAGC,IAAI,CAACC,IAAL,CAAUC,SAAV,EAAqB,QAArB,EAA+BC,YAAGC,QAAH,EAA/B,CAAtB;;AACA,MAAMC,kBAAkB,GAAGL,IAAI,CAACC,IAAL,CAAUF,aAAV,EAAyB,QAAzB,EAAmC,QAAnC,CAA3B;;;AAEA,MAAMO,MAAN,CAAa;AAEhBC,EAAAA,WAAW,CAACC,OAAoB,GAAG,EAAxB,EAA4B;AAAA;AACnC,SAAKC,WAAL,GAAmBD,OAAnB;AACH;;AAEDE,EAAAA,GAAG,CAACC,OAAD,EAAmB;AAClB,UAAMC,IAAI,GAAG,qBAAM,EAAN,EAAU,KAAKH,WAAf,EAA4BE,OAA5B,CAAb;;AAEA,QAAI,CAACE,KAAK,CAACC,OAAN,CAAcF,IAAI,CAACG,OAAnB,CAAL,EAAkC;AAC9BH,MAAAA,IAAI,CAACG,OAAL,GAAe,CAACH,IAAI,CAACG,OAAN,CAAf;AACH,KALiB,CAOlB;;;AACA,UAAMC,SAAS,GAAG,EAAlB;;AACA,SAAK,MAAMC,GAAX,IAAkBL,IAAI,CAACA,IAAvB,EAA6B;AACzB,YAAMM,KAAK,GAAGN,IAAI,CAACA,IAAL,CAAUK,GAAV,CAAd;;AACA,UAAI,CAACC,KAAL,EAAY;AACR;AACH;;AAED,UAAIL,KAAK,CAACC,OAAN,CAAcI,KAAd,CAAJ,EAA0B;AACtB,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnCH,UAAAA,SAAS,CAACK,IAAV,CAAgB,KAAI,yBAAUJ,GAAV,CAAe,EAAnC,EAAsCC,KAAK,CAACC,CAAD,CAA3C;AACH;;AACD;AACH;;AAED,UAAI,OAAOD,KAAP,KAAiB,SAArB,EAAgC;AAC5BF,QAAAA,SAAS,CAACK,IAAV,CAAgB,KAAI,yBAAUJ,GAAV,CAAe,EAAnC;AACA;AACH;;AAEDD,MAAAA,SAAS,CAACK,IAAV,CAAgB,KAAI,yBAAUJ,GAAV,CAAe,EAAnC,EAAsCC,KAAtC;AACH,KA5BiB,CA8BlB;;;AACA,uBAAIN,IAAI,CAACU,KAAT,EAAgB,8BAAhB,EAAgD,MAAhD;AACA,uBAAIV,IAAI,CAACU,KAAT,EAAgB,iBAAhB,EAAmCvB,aAAnC;AAEA,WAAO,oBAAMM,kBAAN,EAA0B,CAAC,GAAGO,IAAI,CAACG,OAAT,EAAkB,GAAGC,SAArB,EAAgClB,oBAAhC,CAA1B,oBACAc,IAAI,CAACU,KADL,EAAP;AAGH;;AAEY,QAAPC,OAAO,CAACZ,OAAD,EAA0C;AACnD,UAAMC,IAAI,GAAG,qBAAM,EAAN,EAAU,KAAKH,WAAf,EAA4BE,OAA5B,CAAb;AAEA,UAAMa,SAAS,GAAG,MAAM,+BACpBzB,aADoB,EAEpBa,IAAI,CAACa,mBAFe,EAGpBb,IAAI,CAACc,kBAHe,CAAxB;;AAMA,QAAIF,SAAJ,EAAe;AACX,YAAM;AAAEG,QAAAA;AAAF,UAAcC,OAAO,CAAC,0BAAD,CAA3B;;AACA,YAAM,oBACF5B,IAAI,CAACC,IAAL,CAAUF,aAAV,EAAyB,QAAzB,EAAmC,QAAnC,CADE,EAEF,CAAC,QAAD,EAAW,SAAX,EAAsB,UAAtB,EAAkC,KAAlC,EAAyC4B,OAAzC,CAFE,EAGF;AACIE,QAAAA,KAAK,EAAE,SADX;AAEIC,QAAAA,GAAG,EAAE;AACDC,UAAAA,WAAW,EAAEhC,aADZ;AAEDiC,UAAAA,wBAAwB,EAAE;AAFzB;AAFT,OAHE,CAAN;AAWH;;AAED,WAAOR,SAAP;AACH;;AAtEe","sourcesContent":["import os from \"os\";\nimport execa from \"execa\";\nimport * as path from \"path\";\nimport { merge, kebabCase, set } from \"lodash\";\nimport downloadBinaries from \"./downloadBinaries\";\n\ntype Command = string | string[];\ntype PulumiArgs = { [key: string]: string | boolean };\ntype ExecaArgs = { [key: string]: any };\n\ntype DefaultArgs = {\n    args?: PulumiArgs;\n    execa?: ExecaArgs;\n    beforePulumiInstall?: () => any;\n    afterPulumiInstall?: () => any;\n};\n\ntype RunArgs = {\n    command: Command;\n    args?: PulumiArgs;\n    execa?: ExecaArgs;\n    beforePulumiInstall?: () => any;\n    afterPulumiInstall?: () => any;\n};\n\ntype InstallArgs = {\n    beforePulumiInstall?: () => any;\n    afterPulumiInstall?: () => any;\n};\n\nexport const FLAG_NON_INTERACTIVE = \"--non-interactive\";\nexport const PULUMI_FOLDER = path.join(__dirname, \"pulumi\", os.platform());\nexport const PULUMI_BINARY_PATH = path.join(PULUMI_FOLDER, \"pulumi\", \"pulumi\");\n\nexport class Pulumi {\n    defaultArgs: DefaultArgs;\n    constructor(options: DefaultArgs = {}) {\n        this.defaultArgs = options;\n    }\n\n    run(rawArgs: RunArgs) {\n        const args = merge({}, this.defaultArgs, rawArgs);\n\n        if (!Array.isArray(args.command)) {\n            args.command = [args.command];\n        }\n\n        // 1. Prepare Pulumi args.\n        const finalArgs = [];\n        for (const key in args.args) {\n            const value = args.args[key];\n            if (!value) {\n                continue;\n            }\n\n            if (Array.isArray(value)) {\n                for (let i = 0; i < value.length; i++) {\n                    finalArgs.push(`--${kebabCase(key)}`, value[i]);\n                }\n                continue;\n            }\n\n            if (typeof value === \"boolean\") {\n                finalArgs.push(`--${kebabCase(key)}`);\n                continue;\n            }\n\n            finalArgs.push(`--${kebabCase(key)}`, value);\n        }\n\n        // Prepare execa args.\n        set(args.execa, \"env.PULUMI_SKIP_UPDATE_CHECK\", \"true\");\n        set(args.execa, \"env.PULUMI_HOME\", PULUMI_FOLDER);\n\n        return execa(PULUMI_BINARY_PATH, [...args.command, ...finalArgs, FLAG_NON_INTERACTIVE], {\n            ...args.execa\n        });\n    }\n\n    async install(rawArgs?: InstallArgs): Promise<boolean> {\n        const args = merge({}, this.defaultArgs, rawArgs);\n\n        const installed = await downloadBinaries(\n            PULUMI_FOLDER,\n            args.beforePulumiInstall,\n            args.afterPulumiInstall\n        );\n\n        if (installed) {\n            const { version } = require(\"@pulumi/aws/package.json\");\n            await execa(\n                path.join(PULUMI_FOLDER, \"pulumi\", \"pulumi\"),\n                [\"plugin\", \"install\", \"resource\", \"aws\", version],\n                {\n                    stdio: \"inherit\",\n                    env: {\n                        PULUMI_HOME: PULUMI_FOLDER,\n                        PULUMI_SKIP_UPDATE_CHECK: \"true\"\n                    }\n                }\n            );\n        }\n\n        return installed;\n    }\n}\n"],"file":"index.js"}