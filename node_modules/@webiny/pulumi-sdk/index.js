"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Pulumi = exports.PULUMI_BINARY_PATH = exports.PULUMI_FOLDER = exports.FLAG_NON_INTERACTIVE = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _set2 = _interopRequireDefault(require("lodash/set"));

var _kebabCase2 = _interopRequireDefault(require("lodash/kebabCase"));

var _merge2 = _interopRequireDefault(require("lodash/merge"));

var _os = _interopRequireDefault(require("os"));

var _execa = _interopRequireDefault(require("execa"));

var path = _interopRequireWildcard(require("path"));

var _downloadBinaries = _interopRequireDefault(require("./downloadBinaries"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const FLAG_NON_INTERACTIVE = "--non-interactive";
exports.FLAG_NON_INTERACTIVE = FLAG_NON_INTERACTIVE;
const PULUMI_FOLDER = path.join(__dirname, "pulumi", _os.default.platform());
exports.PULUMI_FOLDER = PULUMI_FOLDER;
const PULUMI_BINARY_PATH = path.join(PULUMI_FOLDER, "pulumi", "pulumi");
exports.PULUMI_BINARY_PATH = PULUMI_BINARY_PATH;

class Pulumi {
  constructor(options = {}) {
    (0, _defineProperty2.default)(this, "defaultArgs", void 0);
    this.defaultArgs = options;
  }

  run(rawArgs) {
    const args = (0, _merge2.default)({}, this.defaultArgs, rawArgs);

    if (!Array.isArray(args.command)) {
      args.command = [args.command];
    } // 1. Prepare Pulumi args.


    const finalArgs = [];

    for (const key in args.args) {
      const value = args.args[key];

      if (!value) {
        continue;
      }

      if (Array.isArray(value)) {
        for (let i = 0; i < value.length; i++) {
          finalArgs.push(`--${(0, _kebabCase2.default)(key)}`, value[i]);
        }

        continue;
      }

      if (typeof value === "boolean") {
        finalArgs.push(`--${(0, _kebabCase2.default)(key)}`);
        continue;
      }

      finalArgs.push(`--${(0, _kebabCase2.default)(key)}`, value);
    } // Prepare execa args.


    (0, _set2.default)(args.execa, "env.PULUMI_SKIP_UPDATE_CHECK", "true");
    (0, _set2.default)(args.execa, "env.PULUMI_HOME", PULUMI_FOLDER);
    return (0, _execa.default)(PULUMI_BINARY_PATH, [...args.command, ...finalArgs, FLAG_NON_INTERACTIVE], _objectSpread({}, args.execa));
  }

  async install(rawArgs) {
    const args = (0, _merge2.default)({}, this.defaultArgs, rawArgs);
    const installed = await (0, _downloadBinaries.default)(PULUMI_FOLDER, args.beforePulumiInstall, args.afterPulumiInstall);

    if (installed) {
      const {
        version
      } = require("@pulumi/aws/package.json");

      await (0, _execa.default)(path.join(PULUMI_FOLDER, "pulumi", "pulumi"), ["plugin", "install", "resource", "aws", version], {
        stdio: "inherit",
        env: {
          PULUMI_HOME: PULUMI_FOLDER,
          PULUMI_SKIP_UPDATE_CHECK: "true"
        }
      });
    }

    return installed;
  }

}

exports.Pulumi = Pulumi;
//# sourceMappingURL=index.js.map