{"version":3,"sources":["../src/downloadBinaries.ts"],"names":["os","require","tar","fs","download","path","decompress","semver","getPulumiVersion","version","clean","downloadFolder","beforeInstall","afterInstall","existsSync","platform","setupDarwin","setupLinux","setupWindows","Error","filename","downloadUrl","extract","cwd","file","join","unlinkSync","archive","destination","strip"],"mappings":"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","sourcesContent":["const os = require(\"os\");\nconst tar = require(\"tar\");\nconst fs = require(\"fs\");\nconst download = require(\"download\");\nconst path = require(\"path\");\nconst decompress = require(\"decompress\");\nconst semver = require(\"semver\");\n\n// We gotta sanitize the package version, since on a few occasions, we've detected the Pulumi version\n// can look like the following: \"2.25.2+dirty\". We want to ensure only \"2.25.2\" is returned.\n// @see https://github.com/pulumi/pulumi/issues/6847\nconst getPulumiVersion = () => {\n    const { version } = require(\"@pulumi/pulumi/package.json\");\n    return semver.clean(version);\n};\n\nexport default async (downloadFolder, beforeInstall, afterInstall) => {\n    if (fs.existsSync(downloadFolder)) {\n        return false;\n    }\n\n    if (typeof beforeInstall === \"function\") {\n        await beforeInstall();\n    }\n\n    const platform = os.platform();\n    switch (platform) {\n        case \"darwin\":\n            await setupDarwin(downloadFolder);\n            break;\n        case \"linux\":\n            await setupLinux(downloadFolder);\n            break;\n        case \"win32\":\n            await setupWindows(downloadFolder);\n            break;\n        default:\n            throw Error(\n                `Cannot download Pulumi binaries - platform \"${platform}\" not supported. Supported ones are \"darwin\", \"linux\", and \"win32\"`\n            );\n    }\n\n    if (typeof afterInstall === \"function\") {\n        await afterInstall();\n    }\n\n    return true;\n};\n\nasync function setupDarwin(downloadFolder) {\n    const version = getPulumiVersion();\n    const filename = `pulumi-v${version}-darwin-x64.tar.gz`;\n    const downloadUrl = \"https://get.pulumi.com/releases/sdk/\" + filename;\n\n    await download(downloadUrl, downloadFolder);\n\n    await tar.extract({\n        cwd: downloadFolder,\n        file: path.join(downloadFolder, filename)\n    });\n\n    fs.unlinkSync(path.join(downloadFolder, filename));\n}\n\nasync function setupWindows(downloadFolder) {\n    const version = getPulumiVersion();\n    const filename = `pulumi-v${version}-windows-x64.zip`;\n    const downloadUrl = \"https://get.pulumi.com/releases/sdk/\" + filename;\n\n    await download(downloadUrl, downloadFolder);\n\n    const archive = path.join(downloadFolder, filename);\n    const destination = path.join(downloadFolder, \"pulumi\");\n    await decompress(archive, destination, { strip: 2 });\n\n    fs.unlinkSync(path.join(downloadFolder, filename));\n}\n\nasync function setupLinux(downloadFolder) {\n    const version = getPulumiVersion();\n    const filename = `pulumi-v${version}-linux-x64.tar.gz`;\n    const downloadUrl = \"https://get.pulumi.com/releases/sdk/\" + filename;\n\n    await download(downloadUrl, downloadFolder);\n\n    await tar.extract({\n        cwd: downloadFolder,\n        file: path.join(downloadFolder, filename)\n    });\n\n    fs.unlinkSync(path.join(downloadFolder, filename));\n}\n"],"file":"downloadBinaries.js"}