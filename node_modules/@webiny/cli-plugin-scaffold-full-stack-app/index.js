"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _case = _interopRequireDefault(require("case"));

var _chalk = _interopRequireDefault(require("chalk"));

var _terminalLink = _interopRequireDefault(require("terminal-link"));

var _cliPluginScaffoldGraphqlApi = require("@webiny/cli-plugin-scaffold-graphql-api");

var _replaceInPath = require("replace-in-path");

var _util = _interopRequireDefault(require("util"));

var _ncp = _interopRequireDefault(require("ncp"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const ncp = _util.default.promisify(_ncp.default.ncp);

const SCAFFOLD_DOCS_LINK = "https://www.webiny.com/docs/how-to-guides/scaffolding/full-stack-application";

var _default = () => ({
  name: "cli-plugin-scaffold-template-full-stack-app",
  type: "cli-plugin-scaffold-template",
  scaffold: {
    name: "Full Stack Application",
    description: "Creates a new React application and a supporting GraphQL API." + (_terminalLink.default.isSupported ? " " + (0, _terminalLink.default)("Learn more.", SCAFFOLD_DOCS_LINK) : ""),
    questions: () => {
      return [{
        name: "name",
        message: "Enter application name:",
        default: `My Full Stack Application`,
        validate: name => {
          if (name.length < 2) {
            return `Please enter a name for your new React application.`;
          }

          return true;
        }
      }, {
        name: "description",
        message: "Enter application description:",
        default: input => {
          return `This is the ${input.name} React application.`;
        },
        validate: description => {
          if (description.length < 2) {
            return `Please enter a short description for your new React application.`;
          }

          return true;
        }
      }, {
        name: "path",
        message: "Enter application path:",
        default: input => {
          return _case.default.kebab(input.name);
        },
        validate: appPath => {
          if (!appPath || appPath.length < 2) {
            return `Please enter a valid path in which the new React application will be created.`;
          }

          const locationPath = _path.default.resolve(appPath);

          if (_fs.default.existsSync(locationPath)) {
            return `Cannot continue - the ${_chalk.default.red(appPath)} folder already exists.`;
          }

          return true;
        }
      }];
    },
    generate: async options => {
      const {
        input,
        context,
        inquirer,
        wait
      } = options;

      const appPath = _path.default.join(input.path, "/app");

      const apiPath = _path.default.join(input.path, "/api");

      console.log();
      console.log(`${_chalk.default.bold("The following operations will be performed on your behalf:")}`);
      console.log(`- a new GraphQL API will be created in ${_chalk.default.green(apiPath)}`);
      console.log(`- a new React application will be created in ${_chalk.default.green(appPath)}`);
      console.log(`- the list of workspaces will be updated in the root ${_chalk.default.green("package.json")} file`);
      const prompt = inquirer.createPromptModule();
      const {
        proceed
      } = await prompt({
        name: "proceed",
        message: `Are you sure you want to continue?`,
        type: "confirm",
        default: false
      });

      if (!proceed) {
        process.exit(0);
      }

      const gqlApiScaffold = context.plugins.byName("cli-plugin-scaffold-template-graphql-api");
      await gqlApiScaffold.scaffold.generate(_objectSpread(_objectSpread({}, options), {}, {
        input: _objectSpread(_objectSpread({}, input), {}, {
          path: apiPath,
          showConfirmation: false
        })
      }));
      const reactAppScaffold = context.plugins.byName("cli-plugin-scaffold-template-react-app");
      await reactAppScaffold.scaffold.generate(_objectSpread(_objectSpread({}, options), {}, {
        input: _objectSpread(_objectSpread({}, input), {}, {
          path: appPath,
          showConfirmation: false
        })
      }));

      const templateFolderPath = _path.default.join(__dirname, "templates", "essentials");

      await ncp(templateFolderPath, appPath);
      await wait(500); // Replace generic "TargetDataModel" with received "dataModelName" argument.

      const codeReplacements = [{
        find: "project-applications-path",
        replaceWith: input.path
      }];
      (0, _replaceInPath.replaceInPath)(_path.default.join(appPath, "code", "webiny.config.ts"), codeReplacements);
    },
    onSuccess: async options => {
      const {
        input,
        inquirer,
        context,
        wait
      } = options;

      const appPath = _path.default.join(input.path, "/app");

      const apiPath = _path.default.join(input.path, "/api");

      console.log();
      console.log(_chalk.default.bold("A Simple GraphQL API Example"));
      console.log(`An example GraphQL API interaction can be included in the created React application code.`);
      const prompt = inquirer.createPromptModule();
      const {
        graphqlApiExample
      } = await prompt({
        name: "graphqlApiExample",
        message: `Would you like to include it?`,
        type: "confirm",
        default: true
      });

      if (graphqlApiExample) {
        const cliPluginScaffoldGraphQl = context.plugins.byName("cli-plugin-scaffold-graphql");
        await cliPluginScaffoldGraphQl.scaffold.generate(_objectSpread(_objectSpread({}, options), {}, {
          input: {
            showConfirmation: false,
            dataModelName: "Todo",
            pluginsFolderPath: _path.default.join(apiPath, "code", "graphql", "src", "plugins")
          }
        }));

        const templateFolderPath = _path.default.join(__dirname, "templates", "graphqlApiExample");

        await ncp(templateFolderPath, appPath); // Store used input, so that maybe some of

        const dataModelName = {
          plural: "Todos",
          singular: "Todo"
        }; // Wait a bit, since otherwise, replaceInPath might fail. Too soon making operations?

        await wait(500); // Replace generic "TargetDataModel" with received "dataModelName" argument.

        const codeReplacements = [{
          find: "targetDataModels",
          replaceWith: _case.default.camel(dataModelName.plural)
        }, {
          find: "TargetDataModels",
          replaceWith: _case.default.pascal(dataModelName.plural)
        }, {
          find: "TARGET_DATA_MODELS",
          replaceWith: _case.default.constant(dataModelName.plural)
        }, {
          find: "target-data-models",
          replaceWith: _case.default.kebab(dataModelName.plural)
        }, {
          find: "Target Data Models",
          replaceWith: _case.default.title(dataModelName.plural)
        }, {
          find: "targetDataModel",
          replaceWith: _case.default.camel(dataModelName.singular)
        }, {
          find: "TargetDataModel",
          replaceWith: _case.default.pascal(dataModelName.singular)
        }, {
          find: "TARGET_DATA_MODEL",
          replaceWith: _case.default.constant(dataModelName.singular)
        }, {
          find: "target-data-model",
          replaceWith: _case.default.kebab(dataModelName.singular)
        }, {
          find: "Target Data Model",
          replaceWith: _case.default.title(dataModelName.singular)
        }];
        (0, _replaceInPath.replaceInPath)(_path.default.join(appPath, "code", "**/*.ts"), codeReplacements);
        (0, _replaceInPath.replaceInPath)(_path.default.join(appPath, "code", "**/*.tsx"), codeReplacements);
      }

      console.log();
      console.log(_chalk.default.bold("Initial GraphQL API Deployment"));
      console.log(`To begin developing, the new GraphQL API needs to be deployed.`);
      const {
        deploy
      } = await prompt({
        name: "deploy",
        message: `Do you want to deploy it now?`,
        type: "confirm",
        default: true
      });

      if (deploy) {
        console.log();
        console.log(`Running ${_chalk.default.green(`yarn webiny deploy ${apiPath}`)} command...`);
        console.log();
        await (0, _cliPluginScaffoldGraphqlApi.deployGraphQLAPI)(apiPath, "dev", input);
      }

      console.log();
      console.log(`${_chalk.default.green("✔")} New full stack application created successfully.`);
      console.log();
      console.log(_chalk.default.bold("Next Steps"));

      if (!deploy) {
        console.log(`‣ deploy the new GraphQL API by running ${_chalk.default.green(`yarn webiny deploy ${apiPath} --env dev`)}`);
      }

      console.log(`‣ continue GraphQL API development by running ${_chalk.default.green(`yarn webiny watch ${apiPath} --env dev`)}`);
      console.log(`‣ start the React application locally and continue development by running ${_chalk.default.green(`yarn webiny watch ${appPath} --env dev`)}`);

      if (graphqlApiExample) {
        console.log(`‣ start the React application locally and check out the included GraphQL API interaction example`);
      }

      console.log(`‣ to speed up your GraphQL API development, use the ${_chalk.default.green(`Extend GraphQL API`)} scaffold`);
      console.log();
      console.log(_chalk.default.bold("Useful Links"));
      const links = [["Full Stack Application Scaffold", SCAFFOLD_DOCS_LINK], ["Create Custom Application Tutorial", "https://www.webiny.com/docs/tutorials/create-custom-application/introduction"], ["Extend GraphQL API Scaffold", "https://www.webiny.com/docs/how-to-guides/scaffolding/extend-graphql-api"], ["Need a GraphQL Client? Check Out GraphQL Playground", "https://github.com/graphql/graphql-playground"], ["Use the Watch Command", "https://www.webiny.com/docs/how-to-guides/use-watch-command"]];
      links.forEach(([text, url]) => console.log((0, _terminalLink.default)("‣ " + text, url, {
        fallback: (text, link) => text + " - " + link
      })));
    }
  }
});

exports.default = _default;
//# sourceMappingURL=index.js.map