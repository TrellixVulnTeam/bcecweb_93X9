{"version":3,"sources":["../src/index.ts"],"names":["ncp","util","promisify","ncpBase","SCAFFOLD_DOCS_LINK","name","type","scaffold","description","link","isSupported","questions","message","default","validate","length","input","Case","kebab","appPath","locationPath","path","resolve","fs","existsSync","chalk","red","generate","options","context","inquirer","wait","join","apiPath","console","log","bold","green","prompt","createPromptModule","proceed","process","exit","gqlApiScaffold","plugins","byName","showConfirmation","reactAppScaffold","templateFolderPath","__dirname","codeReplacements","find","replaceWith","onSuccess","graphqlApiExample","cliPluginScaffoldGraphQl","dataModelName","pluginsFolderPath","plural","singular","camel","pascal","constant","title","deploy","links","forEach","text","url","fallback"],"mappings":"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","sourcesContent":["import { CliCommandScaffoldTemplate } from \"@webiny/cli-plugin-scaffold/types\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport Case from \"case\";\nimport chalk from \"chalk\";\nimport link from \"terminal-link\";\nimport { deployGraphQLAPI } from \"@webiny/cli-plugin-scaffold-graphql-api\";\nimport { replaceInPath } from \"replace-in-path\";\n\nimport util from \"util\";\nimport ncpBase from \"ncp\";\nconst ncp = util.promisify(ncpBase.ncp);\n\ninterface Input {\n    name: string;\n    description: string;\n    path: string;\n}\n\nconst SCAFFOLD_DOCS_LINK =\n    \"https://www.webiny.com/docs/how-to-guides/scaffolding/full-stack-application\";\n\nexport default (): CliCommandScaffoldTemplate<Input> => ({\n    name: \"cli-plugin-scaffold-template-full-stack-app\",\n    type: \"cli-plugin-scaffold-template\",\n    scaffold: {\n        name: \"Full Stack Application\",\n        description:\n            \"Creates a new React application and a supporting GraphQL API.\" +\n            (link.isSupported ? \" \" + link(\"Learn more.\", SCAFFOLD_DOCS_LINK) : \"\"),\n        questions: () => {\n            return [\n                {\n                    name: \"name\",\n                    message: \"Enter application name:\",\n                    default: `My Full Stack Application`,\n                    validate: name => {\n                        if (name.length < 2) {\n                            return `Please enter a name for your new React application.`;\n                        }\n\n                        return true;\n                    }\n                },\n                {\n                    name: \"description\",\n                    message: \"Enter application description:\",\n                    default: input => {\n                        return `This is the ${input.name} React application.`;\n                    },\n                    validate: description => {\n                        if (description.length < 2) {\n                            return `Please enter a short description for your new React application.`;\n                        }\n\n                        return true;\n                    }\n                },\n                {\n                    name: \"path\",\n                    message: \"Enter application path:\",\n                    default: input => {\n                        return Case.kebab(input.name);\n                    },\n                    validate: appPath => {\n                        if (!appPath || appPath.length < 2) {\n                            return `Please enter a valid path in which the new React application will be created.`;\n                        }\n\n                        const locationPath = path.resolve(appPath);\n                        if (fs.existsSync(locationPath)) {\n                            return `Cannot continue - the ${chalk.red(\n                                appPath\n                            )} folder already exists.`;\n                        }\n\n                        return true;\n                    }\n                }\n            ];\n        },\n        generate: async options => {\n            const { input, context, inquirer, wait } = options;\n\n            const appPath = path.join(input.path, \"/app\");\n            const apiPath = path.join(input.path, \"/api\");\n\n            console.log();\n            console.log(\n                `${chalk.bold(\"The following operations will be performed on your behalf:\")}`\n            );\n\n            console.log(`- a new GraphQL API will be created in ${chalk.green(apiPath)}`);\n            console.log(`- a new React application will be created in ${chalk.green(appPath)}`);\n            console.log(\n                `- the list of workspaces will be updated in the root ${chalk.green(\n                    \"package.json\"\n                )} file`\n            );\n\n            const prompt = inquirer.createPromptModule();\n\n            const { proceed } = await prompt({\n                name: \"proceed\",\n                message: `Are you sure you want to continue?`,\n                type: \"confirm\",\n                default: false\n            });\n\n            if (!proceed) {\n                process.exit(0);\n            }\n\n            const gqlApiScaffold = context.plugins.byName<CliCommandScaffoldTemplate>(\n                \"cli-plugin-scaffold-template-graphql-api\"\n            );\n\n            await gqlApiScaffold.scaffold.generate({\n                ...options,\n                input: {\n                    ...input,\n                    path: apiPath,\n                    showConfirmation: false\n                }\n            });\n\n            const reactAppScaffold = context.plugins.byName<CliCommandScaffoldTemplate>(\n                \"cli-plugin-scaffold-template-react-app\"\n            );\n\n            await reactAppScaffold.scaffold.generate({\n                ...options,\n                input: {\n                    ...input,\n                    path: appPath,\n                    showConfirmation: false\n                }\n            });\n\n            const templateFolderPath = path.join(__dirname, \"templates\", \"essentials\");\n            await ncp(templateFolderPath, appPath);\n\n            await wait(500);\n\n            // Replace generic \"TargetDataModel\" with received \"dataModelName\" argument.\n            const codeReplacements = [\n                { find: \"project-applications-path\", replaceWith: input.path }\n            ];\n\n            replaceInPath(path.join(appPath, \"code\", \"webiny.config.ts\"), codeReplacements);\n        },\n        onSuccess: async options => {\n            const { input, inquirer, context, wait } = options;\n            const appPath = path.join(input.path, \"/app\");\n            const apiPath = path.join(input.path, \"/api\");\n\n            console.log();\n            console.log(chalk.bold(\"A Simple GraphQL API Example\"));\n            console.log(\n                `An example GraphQL API interaction can be included in the created React application code.`\n            );\n\n            const prompt = inquirer.createPromptModule();\n            const { graphqlApiExample } = await prompt({\n                name: \"graphqlApiExample\",\n                message: `Would you like to include it?`,\n                type: \"confirm\",\n                default: true\n            });\n\n            if (graphqlApiExample) {\n                const cliPluginScaffoldGraphQl = context.plugins.byName<CliCommandScaffoldTemplate>(\n                    \"cli-plugin-scaffold-graphql\"\n                );\n\n                await cliPluginScaffoldGraphQl.scaffold.generate({\n                    ...options,\n                    input: {\n                        showConfirmation: false,\n                        dataModelName: \"Todo\",\n                        pluginsFolderPath: path.join(apiPath, \"code\", \"graphql\", \"src\", \"plugins\")\n                    }\n                });\n\n                const templateFolderPath = path.join(__dirname, \"templates\", \"graphqlApiExample\");\n                await ncp(templateFolderPath, appPath);\n\n                // Store used input, so that maybe some of\n                const dataModelName = {\n                    plural: \"Todos\",\n                    singular: \"Todo\"\n                };\n\n                // Wait a bit, since otherwise, replaceInPath might fail. Too soon making operations?\n                await wait(500);\n\n                // Replace generic \"TargetDataModel\" with received \"dataModelName\" argument.\n                const codeReplacements = [\n                    { find: \"targetDataModels\", replaceWith: Case.camel(dataModelName.plural) },\n                    { find: \"TargetDataModels\", replaceWith: Case.pascal(dataModelName.plural) },\n                    {\n                        find: \"TARGET_DATA_MODELS\",\n                        replaceWith: Case.constant(dataModelName.plural)\n                    },\n                    { find: \"target-data-models\", replaceWith: Case.kebab(dataModelName.plural) },\n                    { find: \"Target Data Models\", replaceWith: Case.title(dataModelName.plural) },\n\n                    { find: \"targetDataModel\", replaceWith: Case.camel(dataModelName.singular) },\n                    { find: \"TargetDataModel\", replaceWith: Case.pascal(dataModelName.singular) },\n                    {\n                        find: \"TARGET_DATA_MODEL\",\n                        replaceWith: Case.constant(dataModelName.singular)\n                    },\n                    { find: \"target-data-model\", replaceWith: Case.kebab(dataModelName.singular) },\n                    { find: \"Target Data Model\", replaceWith: Case.title(dataModelName.singular) }\n                ];\n\n                replaceInPath(path.join(appPath, \"code\", \"**/*.ts\"), codeReplacements);\n                replaceInPath(path.join(appPath, \"code\", \"**/*.tsx\"), codeReplacements);\n            }\n\n            console.log();\n            console.log(chalk.bold(\"Initial GraphQL API Deployment\"));\n            console.log(`To begin developing, the new GraphQL API needs to be deployed.`);\n\n            const { deploy } = await prompt({\n                name: \"deploy\",\n                message: `Do you want to deploy it now?`,\n                type: \"confirm\",\n                default: true\n            });\n\n            if (deploy) {\n                console.log();\n                console.log(`Running ${chalk.green(`yarn webiny deploy ${apiPath}`)} command...`);\n                console.log();\n                await deployGraphQLAPI(apiPath, \"dev\", input);\n            }\n\n            console.log();\n            console.log(`${chalk.green(\"✔\")} New full stack application created successfully.`);\n            console.log();\n\n            console.log(chalk.bold(\"Next Steps\"));\n\n            if (!deploy) {\n                console.log(\n                    `‣ deploy the new GraphQL API by running ${chalk.green(\n                        `yarn webiny deploy ${apiPath} --env dev`\n                    )}`\n                );\n            }\n\n            console.log(\n                `‣ continue GraphQL API development by running ${chalk.green(\n                    `yarn webiny watch ${apiPath} --env dev`\n                )}`\n            );\n\n            console.log(\n                `‣ start the React application locally and continue development by running ${chalk.green(\n                    `yarn webiny watch ${appPath} --env dev`\n                )}`\n            );\n\n            if (graphqlApiExample) {\n                console.log(\n                    `‣ start the React application locally and check out the included GraphQL API interaction example`\n                );\n            }\n\n            console.log(\n                `‣ to speed up your GraphQL API development, use the ${chalk.green(\n                    `Extend GraphQL API`\n                )} scaffold`\n            );\n\n            console.log();\n            console.log(chalk.bold(\"Useful Links\"));\n\n            const links = [\n                [\"Full Stack Application Scaffold\", SCAFFOLD_DOCS_LINK],\n                [\n                    \"Create Custom Application Tutorial\",\n                    \"https://www.webiny.com/docs/tutorials/create-custom-application/introduction\"\n                ],\n                [\n                    \"Extend GraphQL API Scaffold\",\n                    \"https://www.webiny.com/docs/how-to-guides/scaffolding/extend-graphql-api\"\n                ],\n                [\n                    \"Need a GraphQL Client? Check Out GraphQL Playground\",\n                    \"https://github.com/graphql/graphql-playground\"\n                ],\n                [\n                    \"Use the Watch Command\",\n                    \"https://www.webiny.com/docs/how-to-guides/use-watch-command\"\n                ]\n            ];\n\n            links.forEach(([text, url]) =>\n                console.log(\n                    link(\"‣ \" + text, url, { fallback: (text, link) => text + \" - \" + link })\n                )\n            );\n        }\n    }\n});\n"],"file":"index.js"}