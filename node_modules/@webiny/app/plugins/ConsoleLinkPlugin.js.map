{"version":3,"sources":["../../src/plugins/ConsoleLinkPlugin.ts"],"names":["ApolloLink","ApolloLinkPlugin","ConsoleLinkPlugin","operation","forward","isQuery","query","definitions","map","data","extensions","Array","isArray","console","length","variables","JSON","stringify","groupCollapsed","operationName","forEach","log","method","args","groupEnd"],"mappings":";;;;;AAAA,SAASA,UAAT,QAA2B,aAA3B;AACA,SAASC,gBAAT;AAEA;AACA;AACA;;AACA,WAAaC,iBAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACI,sBAAa;AACT,aAAO,IAAIF,UAAJ,CAAe,UAACG,SAAD,EAAYC,OAAZ,EAAwB;AAC1C,YAAMC,OAAO,GAAGF,SAAS,CAACG,KAAV,CAAgBC,WAAhB,CAA4B,CAA5B,EAA+B,WAA/B,MAAgD,OAAhE;AAEA,eAAOH,OAAO,CAACD,SAAD,CAAP,CAAmBK,GAAnB,CAAuB,UAAAC,IAAI,EAAI;AAClC,cACIA,IAAI,CAACC,UAAL,IACAC,KAAK,CAACC,OAAN,CAAcH,IAAI,CAACC,UAAL,CAAgBG,OAA9B,CADA,IAEAJ,IAAI,CAACC,UAAL,CAAgBG,OAAhB,CAAwBC,MAH5B,EAIE;AACE,gBAAMC,SAAS,GAAGV,OAAO,GACnBW,IAAI,CAACC,SAAL,CAAed,SAAS,CAACY,SAAzB,CADmB,GAEnB,4CAFN;AAGAF,YAAAA,OAAO,CAACK,cAAR,4BACwBb,OAAO,GAAG,OAAH,GAAa,UAD5C,iBAEQF,SAAS,CAACgB,aAAV,IAA2B,qBAFnC,gBAGUJ,SAHV,SAII,gBAJJ,EAKI,gBALJ,EAMI,cANJ;AAQAN,YAAAA,IAAI,CAACC,UAAL,CAAgBG,OAAhB,CAAwBO,OAAxB,CAAgC,UAAAC,GAAG,EAAI;AAAA;;AACnC,0BAAAR,OAAO,EAACQ,GAAG,CAACC,MAAL,CAAP,oCAAuBD,GAAG,CAACE,IAA3B;AACH,aAFD;AAGAV,YAAAA,OAAO,CAACW,QAAR;AACH;;AAED,iBAAOf,IAAP;AACH,SAxBM,CAAP;AAyBH,OA5BM,CAAP;AA6BH;AA/BL;;AAAA;AAAA,EAAuCR,gBAAvC","sourcesContent":["import { ApolloLink } from \"apollo-link\";\nimport { ApolloLinkPlugin } from \"./ApolloLinkPlugin\";\n\n/**\n * This link checks for presence of `extensions.console` in the response and logs all items to browser console.\n */\nexport class ConsoleLinkPlugin extends ApolloLinkPlugin {\n    createLink() {\n        return new ApolloLink((operation, forward) => {\n            const isQuery = operation.query.definitions[0][\"operation\"] === \"query\";\n\n            return forward(operation).map(data => {\n                if (\n                    data.extensions &&\n                    Array.isArray(data.extensions.console) &&\n                    data.extensions.console.length\n                ) {\n                    const variables = isQuery\n                        ? JSON.stringify(operation.variables)\n                        : \"{ see request details in the Network tab }\";\n                    console.groupCollapsed(\n                        `Logs for graphQL ${isQuery ? \"query\" : \"mutation\"}: %c${\n                            operation.operationName || \"anonymous operation\"\n                        } %c${variables}%c`,\n                        \"color: #fa5a28\",\n                        \"color: #6b6b6b\",\n                        \"color: black\"\n                    );\n                    data.extensions.console.forEach(log => {\n                        console[log.method](...log.args);\n                    });\n                    console.groupEnd();\n                }\n\n                return data;\n            });\n        });\n    }\n}\n"],"file":"ConsoleLinkPlugin.js"}