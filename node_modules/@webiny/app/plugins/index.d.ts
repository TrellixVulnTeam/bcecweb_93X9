import { ReactNode } from "react";
import { Plugin } from "@webiny/plugins/types";
import imagePlugin from "./image";
export { imagePlugin };
declare type RenderPluginOptions<T> = {
    wrapper?: boolean;
    fn?: string;
    filter?: (value: T, index: number, array: T[]) => boolean;
    reverse?: boolean;
};
interface RenderPlugin {
    <T extends Plugin = Plugin>(name: string, params?: any, options?: RenderPluginOptions<T>): ReactNode | ReactNode[];
}
interface RenderPlugins {
    <T extends Plugin = Plugin>(type: string, params?: any, options?: RenderPluginOptions<T>): ReactNode | ReactNode[];
}
export declare const renderPlugin: RenderPlugin;
export declare const renderPlugins: RenderPlugins;
declare const _default: (() => import("../types").ImageComponentPlugin)[];
export default _default;
