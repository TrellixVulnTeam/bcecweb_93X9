import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import { ApolloLink } from "apollo-link";
import { ApolloLinkPlugin } from "./ApolloLinkPlugin";
/**
 * This link checks for presence of `extensions.console` in the response and logs all items to browser console.
 */

export var ConsoleLinkPlugin = /*#__PURE__*/function (_ApolloLinkPlugin) {
  _inherits(ConsoleLinkPlugin, _ApolloLinkPlugin);

  var _super = _createSuper(ConsoleLinkPlugin);

  function ConsoleLinkPlugin() {
    _classCallCheck(this, ConsoleLinkPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(ConsoleLinkPlugin, [{
    key: "createLink",
    value: function createLink() {
      return new ApolloLink(function (operation, forward) {
        var isQuery = operation.query.definitions[0]["operation"] === "query";
        return forward(operation).map(function (data) {
          if (data.extensions && Array.isArray(data.extensions.console) && data.extensions.console.length) {
            var variables = isQuery ? JSON.stringify(operation.variables) : "{ see request details in the Network tab }";
            console.groupCollapsed("Logs for graphQL ".concat(isQuery ? "query" : "mutation", ": %c").concat(operation.operationName || "anonymous operation", " %c").concat(variables, "%c"), "color: #fa5a28", "color: #6b6b6b", "color: black");
            data.extensions.console.forEach(function (log) {
              var _console;

              (_console = console)[log.method].apply(_console, _toConsumableArray(log.args));
            });
            console.groupEnd();
          }

          return data;
        });
      });
    }
  }]);

  return ConsoleLinkPlugin;
}(ApolloLinkPlugin);
//# sourceMappingURL=ConsoleLinkPlugin.js.map