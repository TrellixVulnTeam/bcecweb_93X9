import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _createForOfIteratorHelper from "@babel/runtime/helpers/createForOfIteratorHelper";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { ApolloLink } from "apollo-link";
import { ApolloLinkPlugin } from "./ApolloLinkPlugin";
export var AddQuerySelectionPlugin = /*#__PURE__*/function (_ApolloLinkPlugin) {
  _inherits(AddQuerySelectionPlugin, _ApolloLinkPlugin);

  var _super = _createSuper(AddQuerySelectionPlugin);

  function AddQuerySelectionPlugin(config) {
    var _this;

    _classCallCheck(this, AddQuerySelectionPlugin);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "config", void 0);

    _this.config = config;
    return _this;
  }

  _createClass(AddQuerySelectionPlugin, [{
    key: "createLink",
    value: function createLink() {
      var _this2 = this;

      return new ApolloLink(function (operation, forward) {
        if (operation.operationName !== _this2.config.operationName) {
          return forward(operation);
        }

        _this2.addSelectionToQuery(operation.operationName, operation.query);

        return forward(operation);
      });
    }
  }, {
    key: "addSelectionToQuery",
    value: function addSelectionToQuery(operationName, query) {
      var _tree;

      if (operationName !== this.config.operationName) {
        return;
      }

      var _this$config = this.config,
          addSelection = _this$config.addSelection,
          selectionPath = _this$config.selectionPath; // TODO: check if the selection is already in the query and don't add it again if not necessary.
      // @ts-ignore

      var tree = query.definitions[0].selectionSet.selections;
      var fields = selectionPath.split(".");

      var _iterator = _createForOfIteratorHelper(fields),
          _step;

      try {
        fieldLoop: for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var field = _step.value;

          var _iterator2 = _createForOfIteratorHelper(tree),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var selection = _step2.value;

              if (selection.name.value === field) {
                tree = selection.selectionSet.selections;
                continue fieldLoop;
              }
            } // If we get here, it means we didn't find the necessary selection

          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }

          return;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      } // @ts-ignore


      (_tree = tree).push.apply(_tree, _toConsumableArray(addSelection.definitions[0].selectionSet.selections));
    }
  }]);

  return AddQuerySelectionPlugin;
}(ApolloLinkPlugin);
//# sourceMappingURL=AddQuerySelectionPlugin.js.map