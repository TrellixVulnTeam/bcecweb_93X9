import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["transform", "srcSet"];
import React from "react";
import { Image } from "@webiny/ui/Image";
var SUPPORTED_IMAGE_RESIZE_WIDTHS = [100, 300, 500, 750, 1000, 1500, 2500];
/**
 * Width of the image should not be just any random number. For optimization reasons,
 * we only allow the ones listed in SUPPORTED_IMAGE_RESIZE_WIDTHS list (Webiny Cloud supports only these).
 */

var getSupportedImageResizeWidth = function getSupportedImageResizeWidth(width) {
  var output = SUPPORTED_IMAGE_RESIZE_WIDTHS[0];
  var i = SUPPORTED_IMAGE_RESIZE_WIDTHS.length;

  while (i >= 0) {
    if (width === SUPPORTED_IMAGE_RESIZE_WIDTHS[i]) {
      output = SUPPORTED_IMAGE_RESIZE_WIDTHS[i];
      break;
    }

    if (width > SUPPORTED_IMAGE_RESIZE_WIDTHS[i]) {
      // Use next larger width. If there isn't any, use current.
      output = SUPPORTED_IMAGE_RESIZE_WIDTHS[i + 1];

      if (!output) {
        output = SUPPORTED_IMAGE_RESIZE_WIDTHS[i];
      }

      break;
    }

    i--;
  }

  return output;
};
/**
 * Currently we only allow "width" as a transform option.
 * @param args
 */


var sanitizeTransformArgs = function sanitizeTransformArgs(args) {
  var output = {};

  if (args) {
    var width = parseInt(args.width);

    if (width > 0) {
      output.width = getSupportedImageResizeWidth(width);
    }
  }

  return output;
};

var getSizes = function getSizes(width) {
  // Check if width was set as percentage, with "%" in the value.
  if (typeof width === "string" && width.endsWith("%")) {
    return "".concat(parseInt(width), "vw");
  } // Check if width was set as viewport width, with "vw" in the value.


  if (typeof width === "string" && width.endsWith("vw")) {
    return "".concat(parseInt(width), "vw");
  } // Check if width was set as relative, with "em" in the value.


  if (typeof width === "string" && width.endsWith("em")) {
    return "".concat(parseInt(width), "em");
  }

  return null;
};

var isFixedImageWidth = function isFixedImageWidth(width) {
  if (Number.isFinite(width)) {
    return true;
  }

  if (typeof width === "string" && width.endsWith("px")) {
    return true;
  }

  return false;
};

var getSrcSetAutoSizes = function getSrcSetAutoSizes(max) {
  max = isFixedImageWidth(max) ? parseInt("" + max) : 2500;
  var maxWidth = getSupportedImageResizeWidth(max);
  return SUPPORTED_IMAGE_RESIZE_WIDTHS.filter(function (supportedWidth) {
    return supportedWidth <= maxWidth;
  });
};

var convertTransformToQueryParams = function convertTransformToQueryParams(transform) {
  return Object.keys(transform).map(function (key) {
    return "".concat(key, "=").concat(transform[key]);
  }).join("&");
};

export default (function () {
  var imagePlugin = {
    name: "image-component",
    type: "image-component",
    presets: {
      avatar: {
        width: 300
      }
    },
    getImageSrc: function getImageSrc(props) {
      if (!props) {
        return "";
      }

      var src = props.src,
          transform = props.transform;

      if (!transform) {
        return src;
      }

      if (!src || src.startsWith("data:") || src.endsWith("svg")) {
        return src;
      }

      var params = sanitizeTransformArgs(transform);
      params = convertTransformToQueryParams(params);
      return src + "?" + params;
    },
    render: function render(props) {
      var transform = props.transform,
          srcSetInitial = props.srcSet,
          imageProps = _objectWithoutProperties(props, _excluded);

      var srcSet = srcSetInitial;
      var sizes;
      var src = imageProps.src;

      if (srcSet && srcSet === "auto") {
        srcSet = {}; // Check if image width was forced, and additionally if width was set as pixels, with "px" in the value.

        var forcedWidth = props.width || props.style && props.style.width;
        var srcSetAutoWidths = getSrcSetAutoSizes(forcedWidth);
        srcSetAutoWidths.forEach(function (width) {
          srcSet[width + "w"] = imagePlugin.getImageSrc({
            src: src,
            transform: _objectSpread(_objectSpread({}, transform), {}, {
              width: width
            })
          });
        });
        sizes = getSizes(forcedWidth);
      }

      return /*#__PURE__*/React.createElement(Image, Object.assign({}, imageProps, {
        srcSet: srcSet,
        src: src,
        sizes: sizes
      }));
    }
  };
  return imagePlugin;
});
//# sourceMappingURL=image.js.map