{"version":3,"sources":["../../../src/contexts/Ui/index.tsx"],"names":["React","plugins","UiContext","createContext","UiProvider","ui","setter","setState","state","value","setData","uiStatePlugins","byType","map","pl","cloneElement","render","key","name","props","children","Component","UiConsumer"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,OAAT,QAAwB,iBAAxB;AAEA,OAAO,IAAMC,SAAS,gBAAGF,KAAK,CAACG,aAAN,CAAoB,EAApB,CAAlB;AAqBP,WAAaC,UAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,4DACmB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KADnB;;AAAA,8DAGc,UAACC,MAAD,EAAsB;AAC5B,aAAO,MAAKC,QAAL,CAAc,UAACC,KAAD,EAAkB;AACnC,eAAO;AAAEH,UAAAA,EAAE,kCAAOG,KAAK,CAACH,EAAb,GAAoBC,MAAM,CAACE,KAAK,CAACH,EAAP,CAA1B;AAAJ,SAAP;AACH,OAFM,CAAP;AAGH,KAPL;;AAAA;AAAA;;AAAA;AAAA;AAAA,WASI,kBAAS;AACL,UAAMI,KAAqB,mCAAQ,KAAKD,KAAL,CAAWH,EAAnB;AAAuBE,QAAAA,QAAQ,EAAE,KAAKG;AAAtC,QAA3B;;AACA,UAAMC,cAAc,GAAGV,OAAO,CAACW,MAAR,CAA8B,UAA9B,CAAvB;AACA,0BACI,oBAAC,SAAD,CAAW,QAAX;AAAoB,QAAA,KAAK,EAAEH;AAA3B,SACKE,cAAc,CAACE,GAAf,CAAmB,UAAAC,EAAE;AAAA,4BAAId,KAAK,CAACe,YAAN,CAAmBD,EAAE,CAACE,MAAH,EAAnB,EAAgC;AAAEC,UAAAA,GAAG,EAAEH,EAAE,CAACI;AAAV,SAAhC,CAAJ;AAAA,OAArB,CADL,EAEK,KAAKC,KAAL,CAAWC,QAFhB,CADJ;AAMH;AAlBL;;AAAA;AAAA,EAAgCpB,KAAK,CAACqB,SAAtC;AAqBA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAkB;AAAA,MAAfF,QAAe,QAAfA,QAAe;AACxC,sBAAO,oBAAC,SAAD,CAAW,QAAX,QAAqB,UAAAf,EAAE;AAAA,wBAAIL,KAAK,CAACe,YAAN,CAAmBK,QAAnB,EAA6B;AAAEf,MAAAA,EAAE,EAAFA;AAAF,KAA7B,CAAJ;AAAA,GAAvB,CAAP;AACH,CAFM","sourcesContent":["import React from \"react\";\nimport { UiStatePlugin } from \"../../types\";\nimport { plugins } from \"@webiny/plugins\";\n\nexport const UiContext = React.createContext({});\n\ntype Props = {};\n\ntype State = {\n    ui: { [key: string]: any };\n};\n\ninterface UiData {\n    [key: string]: any;\n}\n\ninterface UiDataSetter {\n    (ui: UiData): UiData;\n}\n\nexport interface UiContextValue {\n    setState: (setter: UiDataSetter) => void;\n    [key: string]: any;\n}\n\nexport class UiProvider extends React.Component<Props, State> {\n    state: State = { ui: {} };\n\n    setData = (setter: Function) => {\n        return this.setState((state: State) => {\n            return { ui: { ...state.ui, ...setter(state.ui) } };\n        });\n    };\n\n    render() {\n        const value: UiContextValue = { ...this.state.ui, setState: this.setData };\n        const uiStatePlugins = plugins.byType<UiStatePlugin>(\"ui-state\");\n        return (\n            <UiContext.Provider value={value}>\n                {uiStatePlugins.map(pl => React.cloneElement(pl.render(), { key: pl.name }))}\n                {this.props.children}\n            </UiContext.Provider>\n        );\n    }\n}\n\nexport const UiConsumer = ({ children }) => {\n    return <UiContext.Consumer>{ui => React.cloneElement(children, { ui })}</UiContext.Consumer>;\n};\n"],"file":"index.js"}