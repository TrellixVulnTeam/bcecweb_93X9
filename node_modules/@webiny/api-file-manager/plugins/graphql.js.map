{"version":3,"sources":["../../src/plugins/graphql.ts"],"names":["emptyResolver","resolve","fn","Response","e","ErrorResponse","plugin","type","schema","typeDefs","resolvers","File","src","file","args","context","settings","fileManager","getSettings","srcPrefix","key","Query","Mutation","FmQuery","getFile","_","files","id","listFiles","data","meta","ListResponse","listTags","error","version","i18nContent","tenancy","getCurrentTenant","getLocale","system","getVersion","FmMutation","createFile","updateFile","createFiles","createFilesInBatch","deleteFile","storage","delete","install","upgrade","updateSettings"],"mappings":"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","sourcesContent":["import { Response, ErrorResponse, ListResponse } from \"@webiny/handler-graphql\";\nimport { FileInput, FileManagerContext, FilesListOpts, FileManagerSettings } from \"~/types\";\nimport { GraphQLSchemaPlugin } from \"@webiny/handler-graphql/types\";\n\nconst emptyResolver = () => ({});\n\nconst resolve = async fn => {\n    try {\n        return new Response(await fn());\n    } catch (e) {\n        return new ErrorResponse(e);\n    }\n};\n\nconst plugin: GraphQLSchemaPlugin<FileManagerContext> = {\n    type: \"graphql-schema\",\n    schema: {\n        typeDefs: /* GraphQL */ `\n            type FmCreatedBy {\n                id: ID\n                displayName: String\n            }\n\n            input FileInput {\n                key: String\n                name: String\n                size: Int\n                type: String\n                tags: [String]\n                meta: JSON\n            }\n\n            type UploadFileResponseDataFile {\n                name: String\n                type: String\n                size: Int\n                key: String\n            }\n\n            type UploadFileResponseData {\n                # Contains data that is necessary for initiating a file upload.\n                data: JSON\n                file: UploadFileResponseDataFile\n            }\n\n            type FileListMeta {\n                cursor: String\n                totalCount: Int\n                hasMoreItems: Boolean\n            }\n\n            type FileError {\n                code: String\n                message: String\n                data: JSON\n            }\n\n            type FileListResponse {\n                data: [File]\n                meta: FileListMeta\n                error: FileError\n            }\n\n            type FileResponse {\n                data: File\n                error: FileError\n            }\n\n            type CreateFilesResponse {\n                data: [File]!\n                error: FileError\n            }\n\n            type File {\n                id: ID\n                key: String\n                name: String\n                size: Int\n                type: String\n                src: String\n                tags: [String]\n                meta: JSON\n                createdOn: DateTime\n                createdBy: FmCreatedBy\n            }\n\n            type FileManagerBooleanResponse {\n                data: Boolean\n                error: FileError\n            }\n\n            type FileManagerSettings {\n                uploadMinFileSize: Number\n                uploadMaxFileSize: Number\n            }\n\n            input FileManagerSettingsInput {\n                uploadMinFileSize: Number\n                uploadMaxFileSize: Number\n            }\n\n            type FileManagerSettingsResponse {\n                data: FileManagerSettings\n                error: FileError\n            }\n\n            input FileWhereInput {\n                search: String\n                type: String\n                type_in: [String!]\n                tag: String\n                tags_in: [String!]\n                id_in: [ID!]\n                id: ID\n            }\n\n            type FmQuery {\n                getFile(id: ID, where: JSON, sort: String): FileResponse\n\n                listFiles(\n                    limit: Int\n                    after: String\n                    types: [String]\n                    tags: [String]\n                    ids: [ID]\n                    search: String\n                ): FileListResponse\n\n                listTags: [String]\n\n                # Get installed version\n                version: String\n\n                getSettings: FileManagerSettingsResponse\n            }\n\n            type FilesDeleteResponse {\n                data: Boolean\n                error: FileError\n            }\n\n            type FmMutation {\n                createFile(data: FileInput!): FileResponse\n                createFiles(data: [FileInput]!): CreateFilesResponse\n                updateFile(id: ID!, data: FileInput!): FileResponse\n                deleteFile(id: ID!): FilesDeleteResponse\n\n                # Install File manager\n                install(srcPrefix: String): FileManagerBooleanResponse\n\n                upgrade(version: String!): FileManagerBooleanResponse\n\n                updateSettings(data: FileManagerSettingsInput): FileManagerSettingsResponse\n            }\n\n            input FilesInstallInput {\n                srcPrefix: String!\n            }\n\n            extend type Query {\n                fileManager: FmQuery\n            }\n\n            extend type Mutation {\n                fileManager: FmMutation\n            }\n        `,\n        resolvers: {\n            File: {\n                async src(file, args, context: FileManagerContext) {\n                    const settings = await context.fileManager.settings.getSettings();\n                    return settings.srcPrefix + file.key;\n                }\n            },\n            Query: {\n                fileManager: emptyResolver\n            },\n            Mutation: {\n                fileManager: emptyResolver\n            },\n            FmQuery: {\n                getFile(_, args: { id: string }, context) {\n                    return resolve(() => context.fileManager.files.getFile(args.id));\n                },\n                async listFiles(_, args: FilesListOpts, context) {\n                    try {\n                        const [data, meta] = await context.fileManager.files.listFiles(args);\n                        return new ListResponse(data, meta);\n                    } catch (e) {\n                        return new ErrorResponse(e);\n                    }\n                },\n                async listTags(_, args, context) {\n                    try {\n                        return await context.fileManager.files.listTags(args || {});\n                    } catch (error) {\n                        return new ErrorResponse(error);\n                    }\n                },\n                async version(_, args, context) {\n                    const { i18nContent, tenancy, fileManager } = context;\n                    if (!tenancy.getCurrentTenant() || !i18nContent.getLocale()) {\n                        return null;\n                    }\n\n                    return await fileManager.system.getVersion();\n                },\n                async getSettings(_, args, context) {\n                    return resolve(() => context.fileManager.settings.getSettings());\n                }\n            },\n            FmMutation: {\n                async createFile(_, args: { data: FileInput }, context) {\n                    return resolve(() => context.fileManager.files.createFile(args.data));\n                },\n                async updateFile(_, args, context) {\n                    return resolve(() => context.fileManager.files.updateFile(args.id, args.data));\n                },\n                async createFiles(_, args, context) {\n                    return resolve(() => context.fileManager.files.createFilesInBatch(args.data));\n                },\n                async deleteFile(_, args, context) {\n                    return resolve(async () => {\n                        const file = await context.fileManager.files.getFile(args.id);\n                        return await context.fileManager.storage.delete({\n                            id: file.id,\n                            key: file.key\n                        });\n                    });\n                },\n                async install(_, args, context) {\n                    return resolve(() =>\n                        context.fileManager.system.install({ srcPrefix: args.srcPrefix })\n                    );\n                },\n                async upgrade(_, args, context) {\n                    return resolve(() => context.fileManager.system.upgrade(args.version));\n                },\n                async updateSettings(_, args: { data: Partial<FileManagerSettings> }, context) {\n                    return resolve(() => context.fileManager.settings.updateSettings(args.data));\n                }\n            }\n        }\n    }\n};\n\nexport default plugin;\n"],"file":"graphql.js"}