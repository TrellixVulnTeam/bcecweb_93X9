"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileStorage = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _error = _interopRequireDefault(require("@webiny/error"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const storagePluginType = "api-file-manager-storage";

class FileStorage {
  constructor({
    context
  }) {
    (0, _defineProperty2.default)(this, "storagePlugin", void 0);
    (0, _defineProperty2.default)(this, "context", void 0);
    this.storagePlugin = context.plugins.byType(storagePluginType).pop();

    if (!this.storagePlugin) {
      throw new _error.default(`Missing plugin of type "${storagePluginType}".`, "STORAGE_PLUGIN_ERROR");
    }

    this.context = context;
  }

  async upload(args) {
    const settings = await this.context.fileManager.settings.getSettings(); // Add file to cloud storage.

    const {
      file: fileData
    } = await this.storagePlugin.upload(_objectSpread(_objectSpread({}, args), {}, {
      settings
    }));
    const {
      fileManager
    } = this.context; // Save file in DB.

    return await fileManager.files.createFile(_objectSpread(_objectSpread({}, fileData), {}, {
      meta: {
        private: Boolean(args.hideInFileManager)
      }
    }));
  }

  async uploadFiles(args) {
    const settings = await this.context.fileManager.settings.getSettings(); // Upload files to cloud storage.

    const promises = [];

    for (let i = 0; i < args.files.length; i++) {
      const item = args.files[i];
      promises.push(this.storagePlugin.upload(_objectSpread(_objectSpread({}, item), {}, {
        settings
      })));
    } // Wait for all to resolve.


    const uploadFileResponses = await Promise.all(promises);
    const filesData = uploadFileResponses.map(response => response.file);
    const {
      fileManager
    } = this.context; // Save files in DB.

    return fileManager.files.createFilesInBatch(filesData);
  }

  async delete(args) {
    const {
      id,
      key
    } = args;
    const {
      fileManager
    } = this.context; // Delete file from cloud storage.

    await this.storagePlugin.delete({
      key
    }); // Delete file from the DB.

    return await fileManager.files.deleteFile(id);
  }

}

exports.FileStorage = FileStorage;
//# sourceMappingURL=FileStorage.js.map