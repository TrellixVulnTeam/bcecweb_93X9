{"version":3,"sources":["../../../src/plugins/storage/FileStorage.ts"],"names":["storagePluginType","FileStorage","constructor","context","storagePlugin","plugins","byType","pop","WebinyError","upload","args","settings","fileManager","getSettings","file","fileData","files","createFile","meta","private","Boolean","hideInFileManager","uploadFiles","promises","i","length","item","push","uploadFileResponses","Promise","all","filesData","map","response","createFilesInBatch","delete","id","key","deleteFile"],"mappings":";;;;;;;;;;;AACA;;;;;;AAiBA,MAAMA,iBAAiB,GAAG,0BAA1B;;AAEO,MAAMC,WAAN,CAAkB;AAGrBC,EAAAA,WAAW,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAc;AAAA;AAAA;AACrB,SAAKC,aAAL,GAAqBD,OAAO,CAACE,OAAR,CAAgBC,MAAhB,CAAuBN,iBAAvB,EAA0CO,GAA1C,EAArB;;AACA,QAAI,CAAC,KAAKH,aAAV,EAAyB;AACrB,YAAM,IAAII,cAAJ,CACD,2BAA0BR,iBAAkB,IAD3C,EAEF,sBAFE,CAAN;AAIH;;AACD,SAAKG,OAAL,GAAeA,OAAf;AACH;;AAEW,QAANM,MAAM,CAACC,IAAD,EAAwB;AAChC,UAAMC,QAAQ,GAAG,MAAM,KAAKR,OAAL,CAAaS,WAAb,CAAyBD,QAAzB,CAAkCE,WAAlC,EAAvB,CADgC,CAEhC;;AACA,UAAM;AAAEC,MAAAA,IAAI,EAAEC;AAAR,QAAqB,MAAM,KAAKX,aAAL,CAAmBK,MAAnB,iCAC1BC,IAD0B;AAE7BC,MAAAA;AAF6B,OAAjC;AAKA,UAAM;AAAEC,MAAAA;AAAF,QAAkB,KAAKT,OAA7B,CARgC,CAUhC;;AACA,WAAO,MAAMS,WAAW,CAACI,KAAZ,CAAkBC,UAAlB,iCACNF,QADM;AAETG,MAAAA,IAAI,EAAE;AAAEC,QAAAA,OAAO,EAAEC,OAAO,CAACV,IAAI,CAACW,iBAAN;AAAlB;AAFG,OAAb;AAIH;;AAEgB,QAAXC,WAAW,CAACZ,IAAD,EAAO;AACpB,UAAMC,QAAQ,GAAG,MAAM,KAAKR,OAAL,CAAaS,WAAb,CAAyBD,QAAzB,CAAkCE,WAAlC,EAAvB,CADoB,CAEpB;;AACA,UAAMU,QAAQ,GAAG,EAAjB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,IAAI,CAACM,KAAL,CAAWS,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,YAAME,IAAI,GAAGhB,IAAI,CAACM,KAAL,CAAWQ,CAAX,CAAb;AACAD,MAAAA,QAAQ,CAACI,IAAT,CACI,KAAKvB,aAAL,CAAmBK,MAAnB,iCACOiB,IADP;AAEIf,QAAAA;AAFJ,SADJ;AAMH,KAZmB,CAapB;;;AACA,UAAMiB,mBAAmB,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYP,QAAZ,CAAlC;AAEA,UAAMQ,SAAS,GAAGH,mBAAmB,CAACI,GAApB,CAAwBC,QAAQ,IAAIA,QAAQ,CAACnB,IAA7C,CAAlB;AAEA,UAAM;AAAEF,MAAAA;AAAF,QAAkB,KAAKT,OAA7B,CAlBoB,CAmBpB;;AACA,WAAOS,WAAW,CAACI,KAAZ,CAAkBkB,kBAAlB,CAAqCH,SAArC,CAAP;AACH;;AAEW,QAANI,MAAM,CAACzB,IAAD,EAAoC;AAC5C,UAAM;AAAE0B,MAAAA,EAAF;AAAMC,MAAAA;AAAN,QAAc3B,IAApB;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAkB,KAAKT,OAA7B,CAF4C,CAG5C;;AACA,UAAM,KAAKC,aAAL,CAAmB+B,MAAnB,CAA0B;AAC5BE,MAAAA;AAD4B,KAA1B,CAAN,CAJ4C,CAO5C;;AACA,WAAO,MAAMzB,WAAW,CAACI,KAAZ,CAAkBsB,UAAlB,CAA6BF,EAA7B,CAAb;AACH;;AA/DoB","sourcesContent":["import { FileManagerContext } from \"~/types\";\nimport WebinyError from \"@webiny/error\";\n\nexport type Args = {\n    name: string;\n    type: string;\n    size: number;\n    buffer: Buffer;\n    keyPrefix?: string;\n};\n\nexport type Result = Record<string, any>;\n\nexport interface FileStoragePlugin {\n    upload: (args: Args) => Promise<Result>;\n    delete: (args: { key: string }) => Promise<void>;\n}\n\nconst storagePluginType = \"api-file-manager-storage\";\n\nexport class FileStorage {\n    storagePlugin: FileStoragePlugin;\n    context: FileManagerContext;\n    constructor({ context }) {\n        this.storagePlugin = context.plugins.byType(storagePluginType).pop();\n        if (!this.storagePlugin) {\n            throw new WebinyError(\n                `Missing plugin of type \"${storagePluginType}\".`,\n                \"STORAGE_PLUGIN_ERROR\"\n            );\n        }\n        this.context = context;\n    }\n\n    async upload(args): Promise<Result> {\n        const settings = await this.context.fileManager.settings.getSettings();\n        // Add file to cloud storage.\n        const { file: fileData } = await this.storagePlugin.upload({\n            ...args,\n            settings\n        });\n\n        const { fileManager } = this.context;\n\n        // Save file in DB.\n        return await fileManager.files.createFile({\n            ...fileData,\n            meta: { private: Boolean(args.hideInFileManager) }\n        });\n    }\n\n    async uploadFiles(args) {\n        const settings = await this.context.fileManager.settings.getSettings();\n        // Upload files to cloud storage.\n        const promises = [];\n        for (let i = 0; i < args.files.length; i++) {\n            const item = args.files[i];\n            promises.push(\n                this.storagePlugin.upload({\n                    ...item,\n                    settings\n                })\n            );\n        }\n        // Wait for all to resolve.\n        const uploadFileResponses = await Promise.all(promises);\n\n        const filesData = uploadFileResponses.map(response => response.file);\n\n        const { fileManager } = this.context;\n        // Save files in DB.\n        return fileManager.files.createFilesInBatch(filesData);\n    }\n\n    async delete(args: { id: string; key: string }) {\n        const { id, key } = args;\n        const { fileManager } = this.context;\n        // Delete file from cloud storage.\n        await this.storagePlugin.delete({\n            key\n        });\n        // Delete file from the DB.\n        return await fileManager.files.deleteFile(id);\n    }\n}\n"],"file":"FileStorage.js"}