{"version":3,"sources":["../../../src/plugins/definitions/FileStorageTransformPlugin.ts"],"names":["FileStorageTransformPlugin","Plugin","constructor","params","_params","toStorage","file","fromStorage"],"mappings":";;;;;;;;;;;AAAA;;AAsBO,MAAMA,0BAAN,SAAyCC,eAAzC,CAAgD;AAI5CC,EAAAA,WAAW,CAACC,MAAD,EAAiB;AAC/B;AAD+B;AAG/B,SAAKC,OAAL,GAAeD,MAAf;AACH;AAED;AACJ;AACA;AACA;;;AAC0B,QAATE,SAAS,CAACF,MAAD,EAAwD;AAC1E,QAAI,CAAC,KAAKC,OAAL,CAAaC,SAAlB,EAA6B;AACzB,aAAOF,MAAM,CAACG,IAAd;AACH;;AACD,WAAO,KAAKF,OAAL,CAAaC,SAAb,CAAuBF,MAAvB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AAC4B,QAAXI,WAAW,CAACJ,MAAD,EAA0D;AAC9E,QAAI,CAAC,KAAKC,OAAL,CAAaG,WAAlB,EAA+B;AAC3B,aAAOJ,MAAM,CAACG,IAAd;AACH;;AACD,WAAO,KAAKF,OAAL,CAAaG,WAAb,CAAyBJ,MAAzB,CAAP;AACH;;AA9BkD;;;8BAA1CH,0B,UACqB,4B","sourcesContent":["import { Plugin } from \"@webiny/plugins\";\nimport { File } from \"~/types\";\n\nexport interface ToParams {\n    /**\n     * File that is being sent to the storage operations method.\n     */\n    file: File & Record<string, any>;\n}\n\nexport interface FromParams {\n    /**\n     * File that was fetched from the storage operations method.\n     */\n    file: File & Record<string, any>;\n}\n\nexport interface Params {\n    toStorage?: (params: ToParams) => Promise<File & Record<string, any>>;\n    fromStorage?: (params: FromParams) => Promise<File & Record<string, any>>;\n}\n\nexport class FileStorageTransformPlugin extends Plugin {\n    public static readonly type = \"fm.files.storage.transform\";\n    private readonly _params: Params;\n\n    public constructor(params: Params) {\n        super();\n\n        this._params = params;\n    }\n\n    /**\n     * Transform the file value into something that can be stored.\n     * Be aware that you must return the whole file object.\n     */\n    public async toStorage(params: ToParams): Promise<File & Record<string, any>> {\n        if (!this._params.toStorage) {\n            return params.file;\n        }\n        return this._params.toStorage(params);\n    }\n    /**\n     * Transform the file value from the storage type to one required by our system.\n     * Be aware that you must return the whole file object.\n     * This method MUST reverse what ever toStorage method changed on the file object.\n     */\n    public async fromStorage(params: FromParams): Promise<File & Record<string, any>> {\n        if (!this._params.fromStorage) {\n            return params.file;\n        }\n        return this._params.fromStorage(params);\n    }\n}\n"],"file":"FileStorageTransformPlugin.js"}