{"version":3,"sources":["../../../src/plugins/definitions/FilePlugin.ts"],"names":["FilePlugin","Plugin","constructor","params","_params","beforeCreate","_execute","afterCreate","beforeUpdate","afterUpdate","beforeBatchCreate","afterBatchCreate","beforeDelete","afterDelete","callback"],"mappings":";;;;;;;;;;;AAAA;;AA2HO,MAAMA,UAAN,SAAyBC,eAAzB,CAAgC;AAI5BC,EAAAA,WAAW,CAACC,MAAD,EAAkB;AAChC;AADgC;AAEhC,SAAKC,OAAL,GAAeD,MAAM,IAAK,EAA1B;AACH;;AAEwB,QAAZE,YAAY,CAACF,MAAD,EAA4C;AACjE,UAAM,KAAKG,QAAL,CAAc,cAAd,EAA8BH,MAA9B,CAAN;AACH;;AAEuB,QAAXI,WAAW,CAACJ,MAAD,EAA2C;AAC/D,UAAM,KAAKG,QAAL,CAAc,aAAd,EAA6BH,MAA7B,CAAN;AACH;;AAEwB,QAAZK,YAAY,CAACL,MAAD,EAA4C;AACjE,UAAM,KAAKG,QAAL,CAAc,cAAd,EAA8BH,MAA9B,CAAN;AACH;;AAEuB,QAAXM,WAAW,CAACN,MAAD,EAA2C;AAC/D,UAAM,KAAKG,QAAL,CAAc,aAAd,EAA6BH,MAA7B,CAAN;AACH;;AAE6B,QAAjBO,iBAAiB,CAACP,MAAD,EAAiD;AAC3E,UAAM,KAAKG,QAAL,CAAc,mBAAd,EAAmCH,MAAnC,CAAN;AACH;;AAE4B,QAAhBQ,gBAAgB,CAACR,MAAD,EAAgD;AACzE,UAAM,KAAKG,QAAL,CAAc,kBAAd,EAAkCH,MAAlC,CAAN;AACH;;AAEwB,QAAZS,YAAY,CAACT,MAAD,EAA4C;AACjE,UAAM,KAAKG,QAAL,CAAc,cAAd,EAA8BH,MAA9B,CAAN;AACH;;AAEuB,QAAXU,WAAW,CAACV,MAAD,EAA2C;AAC/D,UAAM,KAAKG,QAAL,CAAc,aAAd,EAA6BH,MAA7B,CAAN;AACH;;AAEqB,QAARG,QAAQ,CAACQ,QAAD,EAAmBX,MAAnB,EAA+C;AACjE,QAAI,OAAO,KAAKC,OAAL,CAAaU,QAAb,CAAP,KAAkC,UAAtC,EAAkD;AAC9C;AACH;;AACD,UAAM,KAAKV,OAAL,CAAaU,QAAb,EAAuBX,MAAvB,CAAN;AACH;;AA9CkC;;;8BAA1BH,U,UACqB,S","sourcesContent":["import { Plugin } from \"@webiny/plugins\";\nimport { File, FileManagerContext } from \"~/types\";\n\n/**\n * Parameters for beforeCreate lifecycle.\n */\nexport interface BeforeCreateParams {\n    context: FileManagerContext;\n    /**\n     * Data to be inserted into the storage.\n     */\n    data: File;\n}\n/**\n * Parameters for afterCreate lifecycle.\n */\nexport interface AfterCreateParams {\n    context: FileManagerContext;\n    /**\n     * Data that was inserted into the storage.\n     */\n    data: File;\n    /**\n     * Result of the storage operations create method.\n     * Possibly changed something on the \"data\".\n     */\n    file: File;\n}\n/**\n * Parameters for beforeUpdate lifecycle.\n */\nexport interface BeforeUpdateParams {\n    context: FileManagerContext;\n    /**\n     * Original file from the storage.\n     */\n    original: File;\n    /**\n     * Data to be updated to the storage.\n     */\n    data: File;\n}\n/**\n * Parameters for afterUpdate lifecycle.\n */\nexport interface AfterUpdateParams {\n    context: FileManagerContext;\n    /**\n     * Original file from the storage.\n     */\n    original: File;\n    /**\n     * Data that was updated in the storage.\n     */\n    data: File;\n    /**\n     * Result of the storage operations update method.\n     * Possibly changed something on the \"data\".\n     */\n    file: File;\n}\n/**\n * Parameters for beforeBatchCreate lifecycle.\n */\nexport interface BeforeBatchCreateParams {\n    context: FileManagerContext;\n    /**\n     * Files to be inserted into the storage.\n     */\n    data: File[];\n}\n\n/**\n * Parameters for afterBatchCreate lifecycle.\n */\nexport interface AfterBatchCreateParams {\n    context: FileManagerContext;\n    /**\n     * Files that were inserted into the storage.\n     */\n    data: File[];\n    /**\n     * Results of the insert.\n     */\n    files: File[];\n}\n/**\n * Parameters for beforeDelete lifecycle.\n */\nexport interface BeforeDeleteParams {\n    context: FileManagerContext;\n    /**\n     * File to be deleted from the storage.\n     */\n    file: File;\n}\n/**\n * Parameters for afterDelete lifecycle.\n */\nexport interface AfterDeleteParams {\n    context: FileManagerContext;\n    /**\n     * File that was deleted from the storage.\n     */\n    file: File;\n}\n\n/**\n * Definition for the constructor parameters of the FilePlugin.\n *\n * @category FilePlugin\n */\nexport interface Params {\n    beforeCreate?: (params: BeforeCreateParams) => Promise<void>;\n    afterCreate?: (params: AfterCreateParams) => Promise<void>;\n    beforeUpdate?: (params: BeforeUpdateParams) => Promise<void>;\n    afterUpdate?: (params: AfterUpdateParams) => Promise<void>;\n    beforeBatchCreate?: (params: BeforeBatchCreateParams) => Promise<void>;\n    afterBatchCreate?: (params: AfterBatchCreateParams) => Promise<void>;\n    beforeDelete?: (params: BeforeDeleteParams) => Promise<void>;\n    afterDelete?: (params: AfterDeleteParams) => Promise<void>;\n}\n\nexport class FilePlugin extends Plugin {\n    public static readonly type = \"fm.file\";\n    private readonly _params: Params;\n\n    public constructor(params?: Params) {\n        super();\n        this._params = params || ({} as any);\n    }\n\n    public async beforeCreate(params: BeforeCreateParams): Promise<void> {\n        await this._execute(\"beforeCreate\", params);\n    }\n\n    public async afterCreate(params: AfterCreateParams): Promise<void> {\n        await this._execute(\"afterCreate\", params);\n    }\n\n    public async beforeUpdate(params: BeforeUpdateParams): Promise<void> {\n        await this._execute(\"beforeUpdate\", params);\n    }\n\n    public async afterUpdate(params: AfterUpdateParams): Promise<void> {\n        await this._execute(\"afterUpdate\", params);\n    }\n\n    public async beforeBatchCreate(params: BeforeBatchCreateParams): Promise<void> {\n        await this._execute(\"beforeBatchCreate\", params);\n    }\n\n    public async afterBatchCreate(params: AfterBatchCreateParams): Promise<void> {\n        await this._execute(\"afterBatchCreate\", params);\n    }\n\n    public async beforeDelete(params: BeforeDeleteParams): Promise<void> {\n        await this._execute(\"beforeDelete\", params);\n    }\n\n    public async afterDelete(params: AfterDeleteParams): Promise<void> {\n        await this._execute(\"afterDelete\", params);\n    }\n\n    private async _execute(callback: string, params: any): Promise<void> {\n        if (typeof this._params[callback] !== \"function\") {\n            return;\n        }\n        await this._params[callback](params);\n    }\n}\n"],"file":"FilePlugin.js"}