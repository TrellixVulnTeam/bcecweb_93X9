import { FileManagerContext } from "../../types";
import { Plugin } from "@webiny/plugins";
export declare type CallbackFunction<TParams> = (params: TParams) => Promise<void>;
export interface Params {
    context: FileManagerContext;
}
interface Config {
    beforeInstall?: CallbackFunction<Params>;
    afterInstall?: CallbackFunction<Params>;
}
export declare abstract class InstallationPlugin extends Plugin {
    static readonly type = "fm.install";
    private readonly _config;
    constructor(config?: Partial<Config>);
    beforeInstall(params: Params): Promise<void>;
    afterInstall(params: Params): Promise<void>;
    private _execute;
}
export {};
