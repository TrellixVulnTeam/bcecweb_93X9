{"version":3,"sources":["../../../src/plugins/crud/system.crud.ts"],"names":["systemCrudContextPlugin","ContextPlugin","context","pluginType","SystemStorageOperationsProviderPlugin","type","providerPlugin","plugins","byType","find","WebinyError","storageOperations","provide","fileManager","system","getVersion","get","version","setVersion","data","update","original","ex","create","install","srcPrefix","Error","installationPlugins","InstallationPlugin","settings","createSettings","WEBINY_VERSION","upgrade","identity","security","getIdentity","NotAuthorizedError","upgradePlugins","filter","pl","app","plugin","deployedVersion","installedAppVersion","upgradeToVersion","apply","name"],"mappings":"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","sourcesContent":["import { NotAuthorizedError } from \"@webiny/api-security\";\nimport { getApplicablePlugin } from \"@webiny/api-upgrade\";\nimport Error from \"@webiny/error\";\nimport { FileManagerContext, FileManagerSettings } from \"~/types\";\nimport { UpgradePlugin } from \"@webiny/api-upgrade/types\";\nimport WebinyError from \"@webiny/error\";\nimport { ContextPlugin } from \"@webiny/handler/plugins/ContextPlugin\";\nimport { executeCallbacks } from \"~/utils\";\nimport { InstallationPlugin } from \"~/plugins/definitions/InstallationPlugin\";\nimport { SystemStorageOperationsProviderPlugin } from \"~/plugins/definitions/SystemStorageOperationsProviderPlugin\";\n\nconst systemCrudContextPlugin = new ContextPlugin<FileManagerContext>(async context => {\n    const pluginType = SystemStorageOperationsProviderPlugin.type;\n    const providerPlugin = context.plugins\n        .byType<SystemStorageOperationsProviderPlugin>(pluginType)\n        .find(() => true);\n\n    if (!providerPlugin) {\n        throw new WebinyError(`Missing \"${pluginType}\" plugin.`, \"PLUGIN_NOT_FOUND\", {\n            type: pluginType\n        });\n    }\n\n    const storageOperations = await providerPlugin.provide({\n        context\n    });\n\n    if (!context.fileManager) {\n        context.fileManager = {} as any;\n    }\n\n    context.fileManager.system = {\n        async getVersion() {\n            const system = await storageOperations.get();\n\n            return system ? system.version : null;\n        },\n        async setVersion(version: string) {\n            const system = await storageOperations.get();\n\n            if (system) {\n                const data = {\n                    ...system,\n                    version\n                };\n                try {\n                    await storageOperations.update({\n                        original: system,\n                        data\n                    });\n                    return;\n                } catch (ex) {\n                    throw new WebinyError(\n                        \"Could not update the system data.\",\n                        \"SYSTEM_UPDATE_ERROR\",\n                        {\n                            data\n                        }\n                    );\n                }\n            }\n\n            const data = {\n                version\n            };\n            try {\n                await storageOperations.create({\n                    data\n                });\n                return;\n            } catch (ex) {\n                throw new WebinyError(\"Could not create the system data.\", \"SYSTEM_CREATE_ERROR\", {\n                    data\n                });\n            }\n        },\n        async install({ srcPrefix }) {\n            const { fileManager } = context;\n            const version = await fileManager.system.getVersion();\n\n            if (version) {\n                throw new Error(\"File Manager is already installed.\", \"FILES_INSTALL_ABORTED\");\n            }\n\n            const data: Partial<FileManagerSettings> = {};\n\n            if (srcPrefix) {\n                data.srcPrefix = srcPrefix;\n            }\n\n            const installationPlugins = context.plugins.byType<InstallationPlugin>(\n                InstallationPlugin.type\n            );\n\n            await executeCallbacks<InstallationPlugin[\"beforeInstall\"]>(\n                installationPlugins,\n                \"beforeInstall\",\n                {\n                    context\n                }\n            );\n\n            await fileManager.settings.createSettings(data);\n\n            await fileManager.system.setVersion(context.WEBINY_VERSION);\n\n            await executeCallbacks<InstallationPlugin[\"afterInstall\"]>(\n                installationPlugins,\n                \"afterInstall\",\n                {\n                    context\n                }\n            );\n\n            return true;\n        },\n        async upgrade(version) {\n            const identity = context.security.getIdentity();\n            if (!identity) {\n                throw new NotAuthorizedError();\n            }\n\n            const upgradePlugins = context.plugins\n                .byType<UpgradePlugin>(\"api-upgrade\")\n                .filter(pl => pl.app === \"file-manager\");\n\n            const plugin = getApplicablePlugin({\n                deployedVersion: context.WEBINY_VERSION,\n                installedAppVersion: await this.getVersion(),\n                upgradePlugins,\n                upgradeToVersion: version\n            });\n\n            await plugin.apply(context);\n\n            // Store new app version\n            await context.fileManager.system.setVersion(version);\n\n            return true;\n        }\n    };\n});\n\nsystemCrudContextPlugin.name = \"FileManagerSystemCrud\";\n\nexport default systemCrudContextPlugin;\n"],"file":"system.crud.js"}