{"version":3,"sources":["../../../../src/plugins/crud/utils/createFileModel.ts"],"names":["create","key","validation","name","size","type","meta","value","private","tags","Array","isArray","map","item","toLowerCase","list","length","Error","i","tag"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;eAEe,CAACA,MAAM,GAAG,IAAV,KAAmB;AAC9B,SAAO,wBAAW;AACdC,IAAAA,GAAG,EAAE,oBAAO;AACRC,MAAAA,UAAU,EAAEA,uBAAWF,MAAX,CAAmB,GAAEA,MAAM,GAAG,WAAH,GAAiB,EAAG,gBAA/C;AADJ,KAAP,CADS;AAIdG,IAAAA,IAAI,EAAE,oBAAO;AAAED,MAAAA,UAAU,EAAEA,uBAAWF,MAAX,CAAkB,gBAAlB;AAAd,KAAP,CAJQ;AAKdI,IAAAA,IAAI,EAAE,qBALQ;AAMdC,IAAAA,IAAI,EAAE,oBAAO;AAAEH,MAAAA,UAAU,EAAEA,uBAAWF,MAAX,CAAkB,eAAlB;AAAd,KAAP,CANQ;AAOdM,IAAAA,IAAI,EAAE,iCAAO;AAAEC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX;AAAT,KAAP,CAPQ;AAQdC,IAAAA,IAAI,EAAE,mBAAMF,KAAK,IAAI;AACjB,UAAI,CAACG,KAAK,CAACC,OAAN,CAAcJ,KAAd,CAAL,EAA2B;AACvB,eAAO,IAAP;AACH;;AAED,aAAOA,KAAK,CAACK,GAAN,CAAUC,IAAI,IAAIA,IAAI,CAACC,WAAL,EAAlB,CAAP;AACH,KANK,EAOF,oBAAO;AACHC,MAAAA,IAAI,EAAE,IADH;AAEHb,MAAAA,UAAU,EAAEO,IAAI,IAAI;AAChB,YAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAL,EAA0B;AACtB;AACH;;AAED,YAAIA,IAAI,CAACO,MAAL,GAAc,EAAlB,EAAsB;AAClB,gBAAMC,KAAK,CAAC,mCAAD,CAAX;AACH;;AAED,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,IAAI,CAACO,MAAzB,EAAiCE,CAAC,EAAlC,EAAsC;AAClC,gBAAMC,GAAG,GAAGV,IAAI,CAACS,CAAD,CAAhB;;AACA,cAAI,OAAOC,GAAP,KAAe,QAAnB,EAA6B;AACzB,kBAAMF,KAAK,CAAC,4BAAD,CAAX;AACH;;AAED,cAAIE,GAAG,CAACH,MAAJ,GAAa,EAAjB,EAAqB;AACjB,kBAAMC,KAAK,CAAE,OAAME,GAAI,mCAAZ,CAAX;AACH;AACJ;AACJ;AArBE,KAAP,CAPE;AARQ,GAAX,GAAP;AAwCH,C","sourcesContent":["import { withFields, string, number, onSet } from \"@commodo/fields\";\nimport { object } from \"commodo-fields-object\";\nimport { validation } from \"@webiny/validation\";\n\nexport default (create = true) => {\n    return withFields({\n        key: string({\n            validation: validation.create(`${create ? \"required,\" : \"\"}maxLength:1000`)\n        }),\n        name: string({ validation: validation.create(\"maxLength:1000\") }),\n        size: number(),\n        type: string({ validation: validation.create(\"maxLength:255\") }),\n        meta: object({ value: { private: false } }),\n        tags: onSet(value => {\n            if (!Array.isArray(value)) {\n                return null;\n            }\n\n            return value.map(item => item.toLowerCase());\n        })(\n            string({\n                list: true,\n                validation: tags => {\n                    if (!Array.isArray(tags)) {\n                        return;\n                    }\n\n                    if (tags.length > 15) {\n                        throw Error(\"You cannot set more than 15 tags.\");\n                    }\n\n                    for (let i = 0; i < tags.length; i++) {\n                        const tag = tags[i];\n                        if (typeof tag !== \"string\") {\n                            throw Error(\"Tag must be typeof string.\");\n                        }\n\n                        if (tag.length > 50) {\n                            throw Error(`Tag ${tag} is more than 50 characters long.`);\n                        }\n                    }\n                }\n            })\n        )\n    })();\n};\n"],"file":"createFileModel.js"}