{"version":3,"sources":["../../../src/plugins/crud/files.crud.ts"],"names":["BATCH_CREATE_MAX_FILES","checkOwnership","file","permission","context","own","identity","security","getIdentity","createdBy","id","NotAuthorizedError","getLocaleCode","i18nContent","WebinyError","locale","code","filesContextCrudPlugin","ContextPlugin","pluginType","FilesStorageOperationsProviderPlugin","type","providerPlugin","plugins","byType","find","storageOperations","provide","fileManager","filePlugins","FilePlugin","files","getFile","rwd","get","NotFoundError","createFile","input","tenant","tenancy","getCurrentTenant","meta","private","createdOn","Date","toISOString","displayName","webinyVersion","WEBINY_VERSION","data","result","create","ex","message","updateFile","original","update","deleteFile","delete","createFilesInBatch","inputs","Array","isArray","Error","length","map","results","createBatch","listFiles","params","limit","search","types","tags","ids","after","where","type_in","tag_in","tag","toLowerCase","id_in","list","sort","listTags","name"],"mappings":"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","sourcesContent":["import mdbid from \"mdbid\";\nimport { NotFoundError } from \"@webiny/handler-graphql\";\nimport { NotAuthorizedError } from \"@webiny/api-security\";\nimport Error from \"@webiny/error\";\nimport {\n    File,\n    FileManagerContext,\n    FileManagerFilesStorageOperationsListParamsWhere,\n    FileManagerFilesStorageOperationsTagsParamsWhere,\n    FilePermission\n} from \"~/types\";\nimport checkBasePermissions from \"./utils/checkBasePermissions\";\nimport { ContextPlugin } from \"@webiny/handler/plugins/ContextPlugin\";\nimport { FilePlugin } from \"~/plugins/definitions/FilePlugin\";\nimport { FilesStorageOperationsProviderPlugin } from \"~/plugins/definitions/FilesStorageOperationsProviderPlugin\";\nimport WebinyError from \"@webiny/error\";\nimport { runLifecycleEvent } from \"~/plugins/crud/utils/lifecycleEvents\";\n\nconst BATCH_CREATE_MAX_FILES = 20;\n\n/**\n * If permission is limited to \"own\" files only, check that current identity owns the file.\n */\nconst checkOwnership = (file: File, permission: FilePermission, context: FileManagerContext) => {\n    if (permission?.own === true) {\n        const identity = context.security.getIdentity();\n        if (file.createdBy.id !== identity.id) {\n            throw new NotAuthorizedError();\n        }\n    }\n};\n\nconst getLocaleCode = (context: FileManagerContext): string => {\n    if (!context.i18nContent) {\n        throw new WebinyError(\n            \"Missing i18nContent on the FileManagerContext.\",\n            \"MISSING_I18N_CONTENT\"\n        );\n    } else if (!context.i18nContent.locale) {\n        throw new WebinyError(\n            \"Missing i18nContent.locale on the FileManagerContext.\",\n            \"MISSING_I18N_CONTENT_LOCALE\"\n        );\n    } else if (!context.i18nContent.locale.code) {\n        throw new WebinyError(\n            \"Missing i18nContent.locale.code on the FileManagerContext.\",\n            \"MISSING_I18N_CONTENT_LOCALE_CODE\"\n        );\n    }\n    return context.i18nContent.locale.code;\n};\n\nconst filesContextCrudPlugin = new ContextPlugin<FileManagerContext>(async context => {\n    const pluginType = FilesStorageOperationsProviderPlugin.type;\n\n    const providerPlugin = context.plugins\n        .byType<FilesStorageOperationsProviderPlugin>(pluginType)\n        .find(() => true);\n\n    if (!providerPlugin) {\n        throw new WebinyError(`Missing \"${pluginType}\" plugin.`, \"PLUGIN_NOT_FOUND\", {\n            type: pluginType\n        });\n    }\n\n    const storageOperations = await providerPlugin.provide({\n        context\n    });\n\n    if (!context.fileManager) {\n        context.fileManager = {} as any;\n    }\n\n    const filePlugins = context.plugins.byType<FilePlugin>(FilePlugin.type);\n\n    context.fileManager.files = {\n        async getFile(id: string) {\n            const permission = await checkBasePermissions(context, { rwd: \"r\" });\n\n            const file = await storageOperations.get(id);\n\n            if (!file) {\n                throw new NotFoundError(`File with id \"${id}\" does not exists.`);\n            }\n\n            checkOwnership(file, permission, context);\n\n            return file;\n        },\n        async createFile(input) {\n            await checkBasePermissions(context, { rwd: \"w\" });\n            const identity = context.security.getIdentity();\n            const tenant = context.tenancy.getCurrentTenant();\n\n            const id = mdbid();\n\n            const file: File = {\n                ...input,\n                id,\n                meta: {\n                    private: false,\n                    ...(input.meta || {})\n                },\n                tenant: tenant.id,\n                createdOn: new Date().toISOString(),\n                createdBy: {\n                    id: identity.id,\n                    displayName: identity.displayName,\n                    type: identity.type\n                },\n                locale: getLocaleCode(context),\n                webinyVersion: context.WEBINY_VERSION\n            };\n\n            try {\n                await runLifecycleEvent(\"beforeCreate\", {\n                    context,\n                    plugins: filePlugins,\n                    data: file\n                });\n                const result = await storageOperations.create({\n                    file\n                });\n                await runLifecycleEvent(\"afterCreate\", {\n                    context,\n                    plugins: filePlugins,\n                    data: file,\n                    file: result\n                });\n                return result;\n            } catch (ex) {\n                throw new WebinyError(\n                    ex.message || \"Could not create a file.\",\n                    ex.code || \"CREATE_FILE_ERROR\",\n                    {\n                        ...(ex.data || {}),\n                        file\n                    }\n                );\n            }\n        },\n        async updateFile(id, input) {\n            const permission = await checkBasePermissions(context, { rwd: \"w\" });\n\n            const original = await storageOperations.get(id);\n\n            if (!original) {\n                throw new NotFoundError(`File with id \"${id}\" does not exists.`);\n            }\n\n            checkOwnership(original, permission, context);\n\n            const file = {\n                ...original,\n                ...input,\n                id: original.id,\n                webinyVersion: context.WEBINY_VERSION\n            };\n\n            try {\n                await runLifecycleEvent(\"beforeUpdate\", {\n                    context,\n                    plugins: filePlugins,\n                    original,\n                    data: file\n                });\n                const result = await storageOperations.update({\n                    original,\n                    file\n                });\n                await runLifecycleEvent(\"afterUpdate\", {\n                    context,\n                    plugins: filePlugins,\n                    original,\n                    data: file,\n                    file: result\n                });\n                return result;\n            } catch (ex) {\n                throw new WebinyError(\n                    ex.message || \"Could not update a file.\",\n                    ex.code || \"UPDATE_FILE_ERROR\",\n                    {\n                        ...(ex.data || {}),\n                        original,\n                        file\n                    }\n                );\n            }\n        },\n        async deleteFile(id) {\n            const permission = await checkBasePermissions(context, { rwd: \"d\" });\n\n            const file = await storageOperations.get(id);\n            if (!file) {\n                throw new NotFoundError(`File with id \"${id}\" does not exists.`);\n            }\n\n            checkOwnership(file, permission, context);\n\n            try {\n                await runLifecycleEvent(\"beforeDelete\", {\n                    context,\n                    plugins: filePlugins,\n                    file\n                });\n                await storageOperations.delete(id);\n                await runLifecycleEvent(\"afterDelete\", {\n                    context,\n                    plugins: filePlugins,\n                    file\n                });\n            } catch (ex) {\n                throw new WebinyError(\n                    ex.message || \"Could not delete a file.\",\n                    ex.code || \"DELETE_FILE_ERROR\",\n                    {\n                        ...(ex.data || {}),\n                        id,\n                        file\n                    }\n                );\n            }\n\n            return true;\n        },\n        async createFilesInBatch(inputs) {\n            if (!Array.isArray(inputs)) {\n                throw new Error(`\"data\" must be an array.`, \"CREATE_FILES_NON_ARRAY\");\n            }\n\n            if (inputs.length === 0) {\n                throw new Error(\n                    `\"data\" argument must contain at least one file.`,\n                    \"CREATE_FILES_MIN_FILES\"\n                );\n            }\n\n            if (inputs.length > BATCH_CREATE_MAX_FILES) {\n                throw new Error(\n                    `\"data\" argument must not contain more than ${BATCH_CREATE_MAX_FILES} files.`,\n                    \"CREATE_FILES_MAX_FILES\"\n                );\n            }\n\n            await checkBasePermissions(context, { rwd: \"w\" });\n\n            const identity = context.security.getIdentity();\n            const tenant = context.tenancy.getCurrentTenant();\n            const createdBy = {\n                id: identity.id,\n                displayName: identity.displayName,\n                type: identity.type\n            };\n\n            const files: File[] = inputs.map(input => {\n                return {\n                    ...input,\n                    meta: {\n                        private: false,\n                        ...(input.meta || {})\n                    },\n                    id: mdbid(),\n                    tenant: tenant.id,\n                    createdOn: new Date().toISOString(),\n                    createdBy,\n                    locale: getLocaleCode(context),\n                    webinyVersion: context.WEBINY_VERSION\n                };\n            });\n\n            try {\n                await runLifecycleEvent(\"beforeBatchCreate\", {\n                    context,\n                    plugins: filePlugins,\n                    data: files\n                });\n                const results = await storageOperations.createBatch({\n                    files\n                });\n                await runLifecycleEvent(\"afterBatchCreate\", {\n                    context,\n                    plugins: filePlugins,\n                    data: files,\n                    files: results\n                });\n                return results;\n            } catch (ex) {\n                throw new WebinyError(\n                    ex.message || \"Could not create a batch of files.\",\n                    ex.code || \"CREATE_FILES_ERROR\",\n                    {\n                        ...(ex.data || {}),\n                        files\n                    }\n                );\n            }\n        },\n        async listFiles(params = {}) {\n            const permission = await checkBasePermissions(context, { rwd: \"r\" });\n\n            const {\n                limit = 40,\n                search = \"\",\n                types = [],\n                tags = [],\n                ids = [],\n                after = null\n            } = params;\n\n            const { i18nContent } = context;\n\n            const where: FileManagerFilesStorageOperationsListParamsWhere = {\n                private: false,\n                locale: i18nContent.locale.code\n            };\n            /**\n             * Always override the createdBy received from the user, if any.\n             */\n            if (permission.own === true) {\n                const identity = context.security.getIdentity();\n                where.createdBy = identity.id;\n            }\n            /**\n             * To have standardized where objects across the applications, we transform the types into type_in.\n             */\n            if (Array.isArray(types) && types.length > 0) {\n                where.type_in = types;\n            }\n            /**\n             * TODO: determine the change of this part.\n             * Either assign search keyword to something meaningful or throw it out.\n             */\n            if (search) {\n                where.search = search;\n            }\n            /**\n             * Same as on types/type_in.\n             */\n            if (Array.isArray(tags) && tags.length > 0) {\n                where.tag_in = tags.map(tag => tag.toLowerCase());\n            }\n            /**\n             * Same as on types/type_in.\n             */\n            if (Array.isArray(ids) && ids.length > 0) {\n                where.id_in = ids;\n            }\n\n            return storageOperations.list({\n                where,\n                after,\n                limit,\n                sort: [\"id_DESC\"]\n            });\n        },\n        async listTags({ after, limit }) {\n            await checkBasePermissions(context);\n            const { i18nContent } = context;\n\n            const where: FileManagerFilesStorageOperationsTagsParamsWhere = {\n                locale: i18nContent.locale.code\n            };\n\n            const params = {\n                where,\n                limit: limit || 100000,\n                after\n            };\n\n            try {\n                /**\n                 * There is a meta object on the second key.\n                 * TODO: use when changing GraphQL output of the tags.\n                 */\n                const [tags] = await storageOperations.tags(params);\n                /**\n                 * just to keep it standardized, sort by the tag ASC\n                 */\n                return tags.sort();\n            } catch (ex) {\n                throw new WebinyError(\n                    ex.message || \"Could not search for tags.\",\n                    ex.code || \"FILE_TAG_SEARCH_ERROR\",\n                    {\n                        ...(ex.data || {}),\n                        params\n                    }\n                );\n            }\n        }\n    };\n});\n\nfilesContextCrudPlugin.name = \"FileManagerFilesCrud\";\n\nexport default filesContextCrudPlugin;\n"],"file":"files.crud.js"}