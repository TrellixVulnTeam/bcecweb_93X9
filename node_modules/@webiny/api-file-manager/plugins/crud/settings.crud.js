"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SETTINGS_KEY = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _fields = require("@commodo/fields");

var _validation = require("@webiny/validation");

var _SettingsStorageOperationsProviderPlugin = require("../definitions/SettingsStorageOperationsProviderPlugin");

var _error = _interopRequireDefault(require("@webiny/error"));

var _ContextPlugin = require("@webiny/handler/plugins/ContextPlugin");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const SETTINGS_KEY = "file-manager";
exports.SETTINGS_KEY = SETTINGS_KEY;
const CreateDataModel = (0, _fields.withFields)({
  uploadMinFileSize: (0, _fields.number)({
    value: 0,
    validation: _validation.validation.create("gte:0")
  }),
  uploadMaxFileSize: (0, _fields.number)({
    value: 26214401
  }),
  srcPrefix: (0, _fields.onSet)(value => {
    // Make sure srcPrefix always ends with forward slash.
    if (typeof value === "string") {
      return value.endsWith("/") ? value : value + "/";
    }

    return value;
  })((0, _fields.string)({
    value: "/files/"
  }))
})();
const UpdateDataModel = (0, _fields.withFields)({
  uploadMinFileSize: (0, _fields.number)({
    validation: _validation.validation.create("gte:0")
  }),
  uploadMaxFileSize: (0, _fields.number)(),
  srcPrefix: (0, _fields.onSet)(value => {
    // Make sure srcPrefix always ends with forward slash.
    if (typeof value === "string") {
      return value.endsWith("/") ? value : value + "/";
    }

    return value;
  })((0, _fields.string)())
})();
const settingsCrudContextPlugin = new _ContextPlugin.ContextPlugin(async context => {
  const pluginType = _SettingsStorageOperationsProviderPlugin.SettingsStorageOperationsProviderPlugin.type;
  const providerPlugin = context.plugins.byType(pluginType).find(() => true);

  if (!providerPlugin) {
    throw new _error.default(`Missing "${pluginType}" plugin.`, "PLUGIN_NOT_FOUND", {
      type: pluginType
    });
  }

  const storageOperations = await providerPlugin.provide({
    context
  });

  if (!context.fileManager) {
    context.fileManager = {};
  }

  context.fileManager.settings = {
    async getSettings() {
      return storageOperations.get();
    },

    async createSettings(data) {
      const settings = new CreateDataModel().populate(data);
      await settings.validate();
      const settingsData = await settings.toJSON();
      return storageOperations.create({
        data: settingsData
      });
    },

    async updateSettings(data) {
      const updatedValue = new UpdateDataModel().populate(data);
      await updatedValue.validate();
      const existingSettings = await storageOperations.get();
      const updatedSettings = await updatedValue.toJSON({
        onlyDirty: true
      });
      return storageOperations.update({
        original: existingSettings,
        data: _objectSpread(_objectSpread({}, existingSettings), updatedSettings)
      });
    },

    async deleteSettings() {
      await storageOperations.delete();
      return true;
    }

  };
});
settingsCrudContextPlugin.name = "FileMangerSettingsCrud";
var _default = settingsCrudContextPlugin;
exports.default = _default;
//# sourceMappingURL=settings.crud.js.map