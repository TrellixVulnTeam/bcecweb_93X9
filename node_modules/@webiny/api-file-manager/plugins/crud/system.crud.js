"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _apiSecurity = require("@webiny/api-security");

var _apiUpgrade = require("@webiny/api-upgrade");

var _error = _interopRequireDefault(require("@webiny/error"));

var _ContextPlugin = require("@webiny/handler/plugins/ContextPlugin");

var _utils = require("../../utils");

var _InstallationPlugin = require("../definitions/InstallationPlugin");

var _SystemStorageOperationsProviderPlugin = require("../definitions/SystemStorageOperationsProviderPlugin");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const systemCrudContextPlugin = new _ContextPlugin.ContextPlugin(async context => {
  const pluginType = _SystemStorageOperationsProviderPlugin.SystemStorageOperationsProviderPlugin.type;
  const providerPlugin = context.plugins.byType(pluginType).find(() => true);

  if (!providerPlugin) {
    throw new _error.default(`Missing "${pluginType}" plugin.`, "PLUGIN_NOT_FOUND", {
      type: pluginType
    });
  }

  const storageOperations = await providerPlugin.provide({
    context
  });

  if (!context.fileManager) {
    context.fileManager = {};
  }

  context.fileManager.system = {
    async getVersion() {
      const system = await storageOperations.get();
      return system ? system.version : null;
    },

    async setVersion(version) {
      const system = await storageOperations.get();

      if (system) {
        const data = _objectSpread(_objectSpread({}, system), {}, {
          version
        });

        try {
          await storageOperations.update({
            original: system,
            data
          });
          return;
        } catch (ex) {
          throw new _error.default("Could not update the system data.", "SYSTEM_UPDATE_ERROR", {
            data
          });
        }
      }

      const data = {
        version
      };

      try {
        await storageOperations.create({
          data
        });
        return;
      } catch (ex) {
        throw new _error.default("Could not create the system data.", "SYSTEM_CREATE_ERROR", {
          data
        });
      }
    },

    async install({
      srcPrefix
    }) {
      const {
        fileManager
      } = context;
      const version = await fileManager.system.getVersion();

      if (version) {
        throw new _error.default("File Manager is already installed.", "FILES_INSTALL_ABORTED");
      }

      const data = {};

      if (srcPrefix) {
        data.srcPrefix = srcPrefix;
      }

      const installationPlugins = context.plugins.byType(_InstallationPlugin.InstallationPlugin.type);
      await (0, _utils.executeCallbacks)(installationPlugins, "beforeInstall", {
        context
      });
      await fileManager.settings.createSettings(data);
      await fileManager.system.setVersion(context.WEBINY_VERSION);
      await (0, _utils.executeCallbacks)(installationPlugins, "afterInstall", {
        context
      });
      return true;
    },

    async upgrade(version) {
      const identity = context.security.getIdentity();

      if (!identity) {
        throw new _apiSecurity.NotAuthorizedError();
      }

      const upgradePlugins = context.plugins.byType("api-upgrade").filter(pl => pl.app === "file-manager");
      const plugin = (0, _apiUpgrade.getApplicablePlugin)({
        deployedVersion: context.WEBINY_VERSION,
        installedAppVersion: await this.getVersion(),
        upgradePlugins,
        upgradeToVersion: version
      });
      await plugin.apply(context); // Store new app version

      await context.fileManager.system.setVersion(version);
      return true;
    }

  };
});
systemCrudContextPlugin.name = "FileManagerSystemCrud";
var _default = systemCrudContextPlugin;
exports.default = _default;
//# sourceMappingURL=system.crud.js.map