{"version":3,"sources":["../../../src/plugins/crud/settings.crud.ts"],"names":["SETTINGS_KEY","CreateDataModel","uploadMinFileSize","value","validation","create","uploadMaxFileSize","srcPrefix","endsWith","UpdateDataModel","settingsCrudContextPlugin","ContextPlugin","context","pluginType","SettingsStorageOperationsProviderPlugin","type","providerPlugin","plugins","byType","find","WebinyError","storageOperations","provide","fileManager","settings","getSettings","get","createSettings","data","populate","validate","settingsData","toJSON","updateSettings","updatedValue","existingSettings","updatedSettings","onlyDirty","update","original","deleteSettings","delete","name"],"mappings":"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","sourcesContent":["import { withFields, string, number, onSet } from \"@commodo/fields\";\nimport { validation } from \"@webiny/validation\";\nimport { FileManagerContext, FileManagerSettings } from \"~/types\";\nimport { SettingsStorageOperationsProviderPlugin } from \"~/plugins/definitions/SettingsStorageOperationsProviderPlugin\";\nimport WebinyError from \"@webiny/error\";\nimport { ContextPlugin } from \"@webiny/handler/plugins/ContextPlugin\";\n\nexport const SETTINGS_KEY = \"file-manager\";\n\nconst CreateDataModel = withFields({\n    uploadMinFileSize: number({ value: 0, validation: validation.create(\"gte:0\") }),\n    uploadMaxFileSize: number({ value: 26214401 }),\n    srcPrefix: onSet(value => {\n        // Make sure srcPrefix always ends with forward slash.\n        if (typeof value === \"string\") {\n            return value.endsWith(\"/\") ? value : value + \"/\";\n        }\n        return value;\n    })(string({ value: \"/files/\" }))\n})();\n\nconst UpdateDataModel = withFields({\n    uploadMinFileSize: number({\n        validation: validation.create(\"gte:0\")\n    }),\n    uploadMaxFileSize: number(),\n    srcPrefix: onSet(value => {\n        // Make sure srcPrefix always ends with forward slash.\n        if (typeof value === \"string\") {\n            return value.endsWith(\"/\") ? value : value + \"/\";\n        }\n        return value;\n    })(string())\n})();\n\nconst settingsCrudContextPlugin = new ContextPlugin<FileManagerContext>(async context => {\n    const pluginType = SettingsStorageOperationsProviderPlugin.type;\n\n    const providerPlugin = context.plugins\n        .byType<SettingsStorageOperationsProviderPlugin>(pluginType)\n        .find(() => true);\n\n    if (!providerPlugin) {\n        throw new WebinyError(`Missing \"${pluginType}\" plugin.`, \"PLUGIN_NOT_FOUND\", {\n            type: pluginType\n        });\n    }\n\n    const storageOperations = await providerPlugin.provide({\n        context\n    });\n\n    if (!context.fileManager) {\n        context.fileManager = {} as any;\n    }\n\n    context.fileManager.settings = {\n        async getSettings() {\n            return storageOperations.get();\n        },\n        async createSettings(data) {\n            const settings = new CreateDataModel().populate(data);\n            await settings.validate();\n\n            const settingsData: FileManagerSettings = await settings.toJSON();\n\n            return storageOperations.create({\n                data: settingsData\n            });\n        },\n        async updateSettings(data) {\n            const updatedValue = new UpdateDataModel().populate(data);\n            await updatedValue.validate();\n\n            const existingSettings = await storageOperations.get();\n\n            const updatedSettings: Partial<FileManagerSettings> = await updatedValue.toJSON({\n                onlyDirty: true\n            });\n\n            return storageOperations.update({\n                original: existingSettings,\n                data: {\n                    ...existingSettings,\n                    ...updatedSettings\n                }\n            });\n        },\n        async deleteSettings() {\n            await storageOperations.delete();\n\n            return true;\n        }\n    };\n});\n\nsettingsCrudContextPlugin.name = \"FileMangerSettingsCrud\";\n\nexport default settingsCrudContextPlugin;\n"],"file":"settings.crud.js"}