"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * We need to respond with adequate CORS headers.
 * @type {{"Access-Control-Allow-Origin": string, "Access-Control-Allow-Credentials": boolean}}
 */
const baseHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Credentials": true
};

var _default = handler => async event => {
  if (event.httpMethod === "OPTIONS") {
    return {
      body: "",
      statusCode: 204,
      headers: baseHeaders
    };
  }

  try {
    const {
      data,
      statusCode,
      headers = {}
    } = await handler(event);
    const isBuffer = Buffer.isBuffer(data);
    const body = isBuffer ? data.toString("base64") : JSON.stringify({
      error: false,
      data,
      message: null
    });
    return {
      isBase64Encoded: isBuffer,
      statusCode: statusCode || 200,
      headers: _objectSpread(_objectSpread({}, baseHeaders), headers),
      body
    };
  } catch (e) {
    return {
      statusCode: 500,
      headers: baseHeaders,
      body: JSON.stringify({
        error: true,
        data: null,
        message: e.message
      })
    };
  }
};

exports.default = _default;
//# sourceMappingURL=createHandler.js.map