{"version":3,"sources":["../../../src/handlers/download/index.ts"],"names":["MAX_RETURN_CONTENT_LENGTH","DEFAULT_CACHE_MAX_AGE","extractFilenameOptions","event","path","pathParameters","filename","decodeURI","options","queryStringParameters","extension","pathLib","extname","getS3Object","s3","context","i","loaders","length","loader","canProcess","file","name","process","params","object","getObject","promise","type","handle","invocationArgs","handler","region","S3","ContentLength","data","Body","headers","ContentType","putObjectAcl","Bucket","ACL","Key","statusCode","Location"],"mappings":"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","sourcesContent":["import { HandlerPlugin } from \"@webiny/handler/types\";\nimport S3 from \"aws-sdk/clients/s3\";\nimport sanitizeFilename from \"sanitize-filename\";\nimport pathLib from \"path\";\nimport { createHandler, getEnvironment, getObjectParams } from \"../utils\";\nimport loaders from \"../transform/loaders\";\n\nconst MAX_RETURN_CONTENT_LENGTH = 5000000; // ~4.77MB\nconst DEFAULT_CACHE_MAX_AGE = 30758400; // 1 year\n\n/**\n * Based on given path, extracts file key and additional options sent via query params.\n * @param event\n */\nconst extractFilenameOptions = event => {\n    const path = sanitizeFilename(event.pathParameters.path);\n    return {\n        filename: decodeURI(path),\n        options: event.queryStringParameters,\n        extension: pathLib.extname(path)\n    };\n};\n\nconst getS3Object = async (event, s3, context) => {\n    const { options, filename, extension } = extractFilenameOptions(event);\n\n    for (let i = 0; i < loaders.length; i++) {\n        const loader = loaders[i];\n        const canProcess = loader.canProcess({\n            context,\n            s3,\n            options,\n            file: {\n                name: filename,\n                extension\n            }\n        });\n\n        if (canProcess) {\n            return loader.process({\n                context,\n                s3,\n                options,\n                file: {\n                    name: filename,\n                    extension\n                }\n            });\n        }\n    }\n\n    // If no processors handled the file request, just return the S3 object by default.\n    const params = getObjectParams(filename);\n    return {\n        object: await s3.getObject(params).promise(),\n        params: params\n    };\n};\n\nexport default (): HandlerPlugin => ({\n    type: \"handler\",\n    name: \"handler-download-file\",\n    async handle(context) {\n        const event = context.invocationArgs;\n\n        const handler = createHandler(async event => {\n            const { region } = getEnvironment();\n            const s3 = new S3({ region });\n\n            const { params, object } = await getS3Object(event, s3, context);\n\n            if (object.ContentLength < MAX_RETURN_CONTENT_LENGTH) {\n                return {\n                    data: object.Body,\n                    headers: {\n                        \"Content-Type\": object.ContentType,\n                        \"Cache-Control\": \"public, max-age=\" + DEFAULT_CACHE_MAX_AGE\n                    }\n                };\n            }\n\n            // Lambda can return max 6MB of content, so if our object's size is larger, we are sending\n            // a 301 Redirect, redirecting the user to the public URL of the object in S3.\n            await s3\n                .putObjectAcl({\n                    Bucket: params.Bucket,\n                    ACL: \"public-read\",\n                    Key: params.Key\n                })\n                .promise();\n\n            return {\n                statusCode: 301,\n                headers: {\n                    Location: `https://${params.Bucket}.s3.amazonaws.com/${params.Key}`\n                }\n            };\n        });\n\n        return await handler(event);\n    }\n});\n"],"file":"index.js"}