"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _s = _interopRequireDefault(require("aws-sdk/clients/s3"));

var _sanitizeFilename = _interopRequireDefault(require("sanitize-filename"));

var _path = _interopRequireDefault(require("path"));

var _utils = require("../utils");

var _loaders = _interopRequireDefault(require("../transform/loaders"));

const MAX_RETURN_CONTENT_LENGTH = 5000000; // ~4.77MB

const DEFAULT_CACHE_MAX_AGE = 30758400; // 1 year

/**
 * Based on given path, extracts file key and additional options sent via query params.
 * @param event
 */

const extractFilenameOptions = event => {
  const path = (0, _sanitizeFilename.default)(event.pathParameters.path);
  return {
    filename: decodeURI(path),
    options: event.queryStringParameters,
    extension: _path.default.extname(path)
  };
};

const getS3Object = async (event, s3, context) => {
  const {
    options,
    filename,
    extension
  } = extractFilenameOptions(event);

  for (let i = 0; i < _loaders.default.length; i++) {
    const loader = _loaders.default[i];
    const canProcess = loader.canProcess({
      context,
      s3,
      options,
      file: {
        name: filename,
        extension
      }
    });

    if (canProcess) {
      return loader.process({
        context,
        s3,
        options,
        file: {
          name: filename,
          extension
        }
      });
    }
  } // If no processors handled the file request, just return the S3 object by default.


  const params = (0, _utils.getObjectParams)(filename);
  return {
    object: await s3.getObject(params).promise(),
    params: params
  };
};

var _default = () => ({
  type: "handler",
  name: "handler-download-file",

  async handle(context) {
    const event = context.invocationArgs;
    const handler = (0, _utils.createHandler)(async event => {
      const {
        region
      } = (0, _utils.getEnvironment)();
      const s3 = new _s.default({
        region
      });
      const {
        params,
        object
      } = await getS3Object(event, s3, context);

      if (object.ContentLength < MAX_RETURN_CONTENT_LENGTH) {
        return {
          data: object.Body,
          headers: {
            "Content-Type": object.ContentType,
            "Cache-Control": "public, max-age=" + DEFAULT_CACHE_MAX_AGE
          }
        };
      } // Lambda can return max 6MB of content, so if our object's size is larger, we are sending
      // a 301 Redirect, redirecting the user to the public URL of the object in S3.


      await s3.putObjectAcl({
        Bucket: params.Bucket,
        ACL: "public-read",
        Key: params.Key
      }).promise();
      return {
        statusCode: 301,
        headers: {
          Location: `https://${params.Bucket}.s3.amazonaws.com/${params.Key}`
        }
      };
    });
    return await handler(event);
  }

});

exports.default = _default;
//# sourceMappingURL=index.js.map