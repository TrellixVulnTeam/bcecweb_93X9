{"version":3,"sources":["../../../src/handlers/manage/index.ts"],"names":["type","name","handle","context","event","invocationArgs","handler","keys","i","Records","length","record","s3","object","key","push","region","S3","extension","path","extname","j","managers","manager","canProcess","process"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;eAEe,OAAsB;AACjCA,EAAAA,IAAI,EAAE,SAD2B;AAEjCC,EAAAA,IAAI,EAAE,uBAF2B;;AAGjC,QAAMC,MAAN,CAAaC,OAAb,EAAsB;AAClB,UAAMC,KAAK,GAAGD,OAAO,CAACE,cAAtB;AAEA,UAAMC,OAAO,GAAG,0BAAc,MAAMF,KAAN,IAAe;AACzC,YAAMG,IAAI,GAAG,EAAb;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACK,OAAN,CAAcC,MAAlC,EAA0CF,CAAC,EAA3C,EAA+C;AAC3C,cAAMG,MAAM,GAAGP,KAAK,CAACK,OAAN,CAAcD,CAAd,CAAf;;AACA,YAAI,OAAOG,MAAM,CAACC,EAAP,CAAUC,MAAV,CAAiBC,GAAxB,KAAgC,QAApC,EAA8C;AAC1CP,UAAAA,IAAI,CAACQ,IAAL,CAAUJ,MAAM,CAACC,EAAP,CAAUC,MAAV,CAAiBC,GAA3B;AACH;AACJ;;AAED,YAAM;AAAEE,QAAAA;AAAF,UAAa,4BAAnB;AACA,YAAMJ,EAAE,GAAG,IAAIK,UAAJ,CAAO;AAAED,QAAAA;AAAF,OAAP,CAAX;;AAEA,WAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACG,MAAzB,EAAiCF,CAAC,EAAlC,EAAsC;AAClC,cAAMM,GAAG,GAAGP,IAAI,CAACC,CAAD,CAAhB;;AACA,cAAMU,SAAS,GAAGC,cAAKC,OAAL,CAAaN,GAAb,CAAlB;;AAEA,aAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,kBAASZ,MAA7B,EAAqCW,CAAC,EAAtC,EAA0C;AACtC,gBAAME,OAAO,GAAGD,kBAASD,CAAT,CAAhB;AACA,gBAAMG,UAAU,GAAGD,OAAO,CAACC,UAAR,CAAmB;AAClCZ,YAAAA,EADkC;AAElCE,YAAAA,GAFkC;AAGlCI,YAAAA;AAHkC,WAAnB,CAAnB;;AAMA,cAAIM,UAAJ,EAAgB;AACZ,kBAAMD,OAAO,CAACE,OAAR,CAAgB;AAClBb,cAAAA,EADkB;AAElBE,cAAAA,GAFkB;AAGlBI,cAAAA;AAHkB,aAAhB,CAAN;AAKH;AACJ;AACJ;AACJ,KAjCe,CAAhB;AAmCA,WAAO,MAAMZ,OAAO,CAACF,KAAD,CAApB;AACH;;AA1CgC,CAAtB,C","sourcesContent":["import path from \"path\";\nimport S3 from \"aws-sdk/clients/s3\";\nimport { HandlerPlugin } from \"@webiny/handler/types\";\nimport { createHandler, getEnvironment } from \"../utils\";\nimport managers from \"../transform/managers\";\n\nexport default (): HandlerPlugin => ({\n    type: \"handler\",\n    name: \"handler-download-file\",\n    async handle(context) {\n        const event = context.invocationArgs;\n\n        const handler = createHandler(async event => {\n            const keys = [];\n            for (let i = 0; i < event.Records.length; i++) {\n                const record = event.Records[i];\n                if (typeof record.s3.object.key === \"string\") {\n                    keys.push(record.s3.object.key);\n                }\n            }\n\n            const { region } = getEnvironment();\n            const s3 = new S3({ region });\n\n            for (let i = 0; i < keys.length; i++) {\n                const key = keys[i];\n                const extension = path.extname(key);\n\n                for (let j = 0; j < managers.length; j++) {\n                    const manager = managers[j];\n                    const canProcess = manager.canProcess({\n                        s3,\n                        key,\n                        extension\n                    });\n\n                    if (canProcess) {\n                        await manager.process({\n                            s3,\n                            key,\n                            extension\n                        });\n                    }\n                }\n            }\n        });\n\n        return await handler(event);\n    }\n});\n"],"file":"index.js"}