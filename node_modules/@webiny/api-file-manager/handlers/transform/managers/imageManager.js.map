{"version":3,"sources":["../../../../src/handlers/transform/managers/imageManager.ts"],"names":["canProcess","opts","key","extension","SUPPORTED_IMAGES","includes","startsWith","OPTIMIZED_IMAGE_PREFIX","OPTIMIZED_TRANSFORMED_IMAGE_PREFIX","process","s3","deleteObject","promise","SUPPORTED_TRANSFORMABLE_IMAGES","env","imagesList","listObjects","Bucket","bucket","Prefix","i","Contents","length","imageObject","Key"],"mappings":";;;;;;;AAAA;;AACA;;eASe;AACXA,EAAAA,UAAU,EAAEC,IAAI,IAAI;AAChB,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAqBF,IAA3B;;AACA,QAAI,CAACG,yBAAiBC,QAAjB,CAA0BF,SAA1B,CAAL,EAA2C;AACvC,aAAO,KAAP;AACH;;AAED,QACID,GAAG,CAACI,UAAJ,CACIC,kCAA0BL,GAAG,CAACI,UAAJ,CAAeE,0CAAf,CAD9B,CADJ,EAIE;AACE,aAAO,KAAP;AACH;;AAED,WAAO,IAAP;AACH,GAhBU;;AAiBX,QAAMC,OAAN,CAAc;AAAEC,IAAAA,EAAF;AAAMR,IAAAA,GAAN;AAAWC,IAAAA;AAAX,GAAd,EAAsC;AAClC;AAEA,UAAMO,EAAE,CAACC,YAAH,CAAgB,4BAAgB,yBAAY;AAAET,MAAAA;AAAF,KAAZ,CAAhB,CAAhB,EAAuDU,OAAvD,EAAN,CAHkC,CAKlC;;AACA,QAAIC,uCAA+BR,QAA/B,CAAwCF,SAAxC,CAAJ,EAAwD;AACpD,YAAMW,GAAG,GAAG,4BAAZ;AACA,YAAMC,UAAU,GAAG,MAAML,EAAE,CACtBM,WADoB,CACR;AACTC,QAAAA,MAAM,EAAEH,GAAG,CAACI,MADH;AAETC,QAAAA,MAAM,EAAE,mDAAsCjB,GAAtC;AAFC,OADQ,EAKpBU,OALoB,EAAzB;;AAOA,WAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,UAAU,CAACM,QAAX,CAAoBC,MAAxC,EAAgDF,CAAC,EAAjD,EAAqD;AACjD,cAAMG,WAAW,GAAGR,UAAU,CAACM,QAAX,CAAoBD,CAApB,CAApB;AACA,cAAMV,EAAE,CAACC,YAAH,CAAgB,4BAAgBY,WAAW,CAACC,GAA5B,CAAhB,EAAkDZ,OAAlD,EAAN;AACH;AACJ;AACJ;;AArCU,C","sourcesContent":["import { getObjectParams, getEnvironment } from \"~/handlers/utils\";\nimport {\n    SUPPORTED_IMAGES,\n    SUPPORTED_TRANSFORMABLE_IMAGES,\n    OPTIMIZED_IMAGE_PREFIX,\n    OPTIMIZED_TRANSFORMED_IMAGE_PREFIX,\n    getImageKey,\n    getOptimizedTransformedImageKeyPrefix\n} from \"../utils\";\n\nexport default {\n    canProcess: opts => {\n        const { key, extension } = opts;\n        if (!SUPPORTED_IMAGES.includes(extension)) {\n            return false;\n        }\n\n        if (\n            key.startsWith(\n                OPTIMIZED_IMAGE_PREFIX || key.startsWith(OPTIMIZED_TRANSFORMED_IMAGE_PREFIX)\n            )\n        ) {\n            return false;\n        }\n\n        return true;\n    },\n    async process({ s3, key, extension }) {\n        // 1. Get optimized image's key.\n\n        await s3.deleteObject(getObjectParams(getImageKey({ key }))).promise();\n\n        // 2. Search for all transformed images and delete those too.\n        if (SUPPORTED_TRANSFORMABLE_IMAGES.includes(extension)) {\n            const env = getEnvironment();\n            const imagesList = await s3\n                .listObjects({\n                    Bucket: env.bucket,\n                    Prefix: getOptimizedTransformedImageKeyPrefix(key)\n                })\n                .promise();\n\n            for (let i = 0; i < imagesList.Contents.length; i++) {\n                const imageObject = imagesList.Contents[i];\n                await s3.deleteObject(getObjectParams(imageObject.Key)).promise();\n            }\n        }\n    }\n};\n"],"file":"imageManager.js"}