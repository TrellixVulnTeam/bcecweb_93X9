{"version":3,"sources":["../../../../src/handlers/transform/loaders/imageLoader.ts"],"names":["IMAGE_TRANSFORMER_FUNCTION","process","env","callImageTransformerLambda","key","transformations","context","handlerClient","invoke","name","payload","body","canProcess","opts","SUPPORTED_IMAGES","includes","file","extension","s3","options","objectParams","SUPPORTED_TRANSFORMABLE_IMAGES","object","getObject","promise","params","e","imageTransformerLambdaResponse","error","Error","message"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAIA;AACA,MAAMA,0BAA0B,GAAGC,OAAO,CAACC,GAAR,CAAYF,0BAA/C;;AAQA,MAAMG,0BAA0B,GAAG,OAAO;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,eAAP;AAAwBC,EAAAA;AAAxB,CAAP,KAAgE;AAC/F,SAAO,MAAMA,OAAO,CAACC,aAAR,CAAsBC,MAAtB,CAA6B;AACtCC,IAAAA,IAAI,EAAET,0BADgC;AAEtCU,IAAAA,OAAO,EAAE;AACLC,MAAAA,IAAI,EAAE;AACFP,QAAAA,GADE;AAEFC,QAAAA;AAFE;AADD;AAF6B,GAA7B,CAAb;AASH,CAVD;;eAYe;AACXO,EAAAA,UAAU,EAAEC,IAAI,IAAI;AAChB,WAAOC,yBAAiBC,QAAjB,CAA0BF,IAAI,CAACG,IAAL,CAAUC,SAApC,CAAP;AACH,GAHU;;AAIX,QAAMhB,OAAN,CAAc;AAAEiB,IAAAA,EAAF;AAAMF,IAAAA,IAAN;AAAYG,IAAAA,OAAZ;AAAqBb,IAAAA;AAArB,GAAd,EAA8C;AAC1C;AACA,QAAIc,YAAJ;AAEA,UAAMf,eAAe,GAAG,2CAA6Bc,OAA7B,CAAxB;;AAEA,QAAId,eAAe,IAAIgB,uCAA+BN,QAA/B,CAAwCC,IAAI,CAACC,SAA7C,CAAvB,EAAgF;AAC5EG,MAAAA,YAAY,GAAG,4BAAgB,yBAAY;AAAEhB,QAAAA,GAAG,EAAEY,IAAI,CAACP,IAAZ;AAAkBJ,QAAAA;AAAlB,OAAZ,CAAhB,CAAf;;AACA,UAAI;AACA,eAAO;AACHiB,UAAAA,MAAM,EAAE,MAAMJ,EAAE,CAACK,SAAH,CAAaH,YAAb,EAA2BI,OAA3B,EADX;AAEHC,UAAAA,MAAM,EAAEL;AAFL,SAAP;AAIH,OALD,CAKE,OAAOM,CAAP,EAAU;AACR,cAAMC,8BAA8B,GAAG,MAAMxB,0BAA0B,CAAC;AACpEC,UAAAA,GAAG,EAAEY,IAAI,CAACP,IAD0D;AAEpEJ,UAAAA,eAFoE;AAGpEC,UAAAA;AAHoE,SAAD,CAAvE;;AAMA,YAAIqB,8BAA8B,CAACC,KAAnC,EAA0C;AACtC,gBAAMC,KAAK,CAACF,8BAA8B,CAACG,OAAhC,CAAX;AACH;;AAED,eAAO;AACHR,UAAAA,MAAM,EAAE,MAAMJ,EAAE,CAACK,SAAH,CAAaH,YAAb,EAA2BI,OAA3B,EADX;AAEHC,UAAAA,MAAM,EAAEL;AAFL,SAAP;AAIH;AACJ;;AAEDA,IAAAA,YAAY,GAAG,4BAAgB,yBAAY;AAAEhB,MAAAA,GAAG,EAAEY,IAAI,CAACP;AAAZ,KAAZ,CAAhB,CAAf;;AACA,QAAI;AACA,aAAO;AACHa,QAAAA,MAAM,EAAE,MAAMJ,EAAE,CAACK,SAAH,CAAaH,YAAb,EAA2BI,OAA3B,EADX;AAEHC,QAAAA,MAAM,EAAEL;AAFL,OAAP;AAIH,KALD,CAKE,OAAOM,CAAP,EAAU;AACR,YAAMC,8BAA8B,GAAG,MAAMxB,0BAA0B,CAAC;AACpEC,QAAAA,GAAG,EAAEY,IAAI,CAACP,IAD0D;AAEpEH,QAAAA;AAFoE,OAAD,CAAvE;;AAKA,UAAIqB,8BAA8B,CAACC,KAAnC,EAA0C;AACtC,cAAMC,KAAK,CAACF,8BAA8B,CAACG,OAAhC,CAAX;AACH;;AAED,aAAO;AACHR,QAAAA,MAAM,EAAE,MAAMJ,EAAE,CAACK,SAAH,CAAaH,YAAb,EAA2BI,OAA3B,EADX;AAEHC,QAAAA,MAAM,EAAEL;AAFL,OAAP;AAIH;AACJ;;AAxDU,C","sourcesContent":["import sanitizeImageTransformations from \"./sanitizeImageTransformations\";\nimport { getObjectParams } from \"../../utils\";\nimport { SUPPORTED_IMAGES, SUPPORTED_TRANSFORMABLE_IMAGES, getImageKey } from \"../utils\";\nimport { Context } from \"@webiny/handler/types\";\nimport { ClientContext } from \"@webiny/handler-client/types\";\n\n// @ts-ignore\nconst IMAGE_TRANSFORMER_FUNCTION = process.env.IMAGE_TRANSFORMER_FUNCTION;\n\ninterface TransformerParams {\n    context: Context & ClientContext;\n    key: string;\n    transformations?: any;\n}\n\nconst callImageTransformerLambda = async ({ key, transformations, context }: TransformerParams) => {\n    return await context.handlerClient.invoke({\n        name: IMAGE_TRANSFORMER_FUNCTION,\n        payload: {\n            body: {\n                key,\n                transformations\n            }\n        }\n    });\n};\n\nexport default {\n    canProcess: opts => {\n        return SUPPORTED_IMAGES.includes(opts.file.extension);\n    },\n    async process({ s3, file, options, context }) {\n        // Loaders must return {object, params} object.\n        let objectParams;\n\n        const transformations = sanitizeImageTransformations(options);\n\n        if (transformations && SUPPORTED_TRANSFORMABLE_IMAGES.includes(file.extension)) {\n            objectParams = getObjectParams(getImageKey({ key: file.name, transformations }));\n            try {\n                return {\n                    object: await s3.getObject(objectParams).promise(),\n                    params: objectParams\n                };\n            } catch (e) {\n                const imageTransformerLambdaResponse = await callImageTransformerLambda({\n                    key: file.name,\n                    transformations,\n                    context\n                });\n\n                if (imageTransformerLambdaResponse.error) {\n                    throw Error(imageTransformerLambdaResponse.message);\n                }\n\n                return {\n                    object: await s3.getObject(objectParams).promise(),\n                    params: objectParams\n                };\n            }\n        }\n\n        objectParams = getObjectParams(getImageKey({ key: file.name }));\n        try {\n            return {\n                object: await s3.getObject(objectParams).promise(),\n                params: objectParams\n            };\n        } catch (e) {\n            const imageTransformerLambdaResponse = await callImageTransformerLambda({\n                key: file.name,\n                context\n            });\n\n            if (imageTransformerLambdaResponse.error) {\n                throw Error(imageTransformerLambdaResponse.message);\n            }\n\n            return {\n                object: await s3.getObject(objectParams).promise(),\n                params: objectParams\n            };\n        }\n    }\n};\n"],"file":"imageLoader.js"}