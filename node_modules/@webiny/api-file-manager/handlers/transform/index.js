"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _s = _interopRequireDefault(require("aws-sdk/clients/s3"));

var _transformImage = _interopRequireDefault(require("./transformImage"));

var _optimizeImage = _interopRequireDefault(require("./optimizeImage"));

var _utils = require("../utils");

var _utils2 = require("./utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var _default = () => ({
  type: "handler",
  name: "handler-download-file",

  async handle(context) {
    const event = context.invocationArgs;
    const handler = (0, _utils.createHandler)(async ({
      body: {
        transformations,
        key
      }
    }) => {
      try {
        const env = (0, _utils.getEnvironment)();
        const s3 = new _s.default({
          region: env.region
        });
        let optimizedImageObject;
        const params = {
          initial: (0, _utils.getObjectParams)(key),
          optimized: (0, _utils.getObjectParams)((0, _utils2.getImageKey)({
            key
          })),
          optimizedTransformed: (0, _utils.getObjectParams)((0, _utils2.getImageKey)({
            key,
            transformations
          }))
        }; // 1. Get optimized image.

        try {
          optimizedImageObject = await s3.getObject(params.optimized).promise();
        } catch (e) {
          // If not found, try to create it by loading the initially uploaded image.
          optimizedImageObject = await s3.getObject(params.initial).promise();
          await s3.putObject(_objectSpread(_objectSpread({}, params.optimized), {}, {
            ContentType: optimizedImageObject.ContentType,
            Body: await (0, _optimizeImage.default)(optimizedImageObject.Body, optimizedImageObject.ContentType)
          })).promise();
          optimizedImageObject = await s3.getObject(params.optimized).promise();
        } // 2. If no transformations requested, just exit.


        if (!transformations) {
          return {
            error: false,
            message: ""
          };
        } // 3. If transformations requested, apply them in save it into the bucket.


        await s3.putObject(_objectSpread(_objectSpread({}, params.optimizedTransformed), {}, {
          ContentType: optimizedImageObject.ContentType,
          Body: await (0, _transformImage.default)(optimizedImageObject.Body, transformations)
        })).promise();
        return {
          error: false,
          message: ""
        };
      } catch (e) {
        return {
          error: true,
          message: e.message
        };
      }
    });
    return await handler(event);
  }

});

exports.default = _default;
//# sourceMappingURL=index.js.map