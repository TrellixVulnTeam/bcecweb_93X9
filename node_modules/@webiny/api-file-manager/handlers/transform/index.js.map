{"version":3,"sources":["../../../src/handlers/transform/index.ts"],"names":["type","name","handle","context","event","invocationArgs","handler","body","transformations","key","env","s3","S3","region","optimizedImageObject","params","initial","optimized","optimizedTransformed","getObject","promise","e","putObject","ContentType","Body","error","message"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;eAGe,OAAsB;AACjCA,EAAAA,IAAI,EAAE,SAD2B;AAEjCC,EAAAA,IAAI,EAAE,uBAF2B;;AAGjC,QAAMC,MAAN,CAAaC,OAAb,EAAsB;AAClB,UAAMC,KAAK,GAAGD,OAAO,CAACE,cAAtB;AAEA,UAAMC,OAAO,GAAG,0BAAc,OAAO;AAAEC,MAAAA,IAAI,EAAE;AAAEC,QAAAA,eAAF;AAAmBC,QAAAA;AAAnB;AAAR,KAAP,KAA8C;AACxE,UAAI;AACA,cAAMC,GAAG,GAAG,4BAAZ;AACA,cAAMC,EAAE,GAAG,IAAIC,UAAJ,CAAO;AAAEC,UAAAA,MAAM,EAAEH,GAAG,CAACG;AAAd,SAAP,CAAX;AAEA,YAAIC,oBAAJ;AAEA,cAAMC,MAAM,GAAG;AACXC,UAAAA,OAAO,EAAE,4BAAgBP,GAAhB,CADE;AAEXQ,UAAAA,SAAS,EAAE,4BAAgB,yBAAY;AAAER,YAAAA;AAAF,WAAZ,CAAhB,CAFA;AAGXS,UAAAA,oBAAoB,EAAE,4BAAgB,yBAAY;AAAET,YAAAA,GAAF;AAAOD,YAAAA;AAAP,WAAZ,CAAhB;AAHX,SAAf,CANA,CAYA;;AACA,YAAI;AACAM,UAAAA,oBAAoB,GAAG,MAAMH,EAAE,CAACQ,SAAH,CAAaJ,MAAM,CAACE,SAApB,EAA+BG,OAA/B,EAA7B;AACH,SAFD,CAEE,OAAOC,CAAP,EAAU;AACR;AACAP,UAAAA,oBAAoB,GAAG,MAAMH,EAAE,CAACQ,SAAH,CAAaJ,MAAM,CAACC,OAApB,EAA6BI,OAA7B,EAA7B;AAEA,gBAAMT,EAAE,CACHW,SADC,iCAEKP,MAAM,CAACE,SAFZ;AAGEM,YAAAA,WAAW,EAAET,oBAAoB,CAACS,WAHpC;AAIEC,YAAAA,IAAI,EAAE,MAAM,4BACRV,oBAAoB,CAACU,IADb,EAERV,oBAAoB,CAACS,WAFb;AAJd,cASDH,OATC,EAAN;AAWAN,UAAAA,oBAAoB,GAAG,MAAMH,EAAE,CAACQ,SAAH,CAAaJ,MAAM,CAACE,SAApB,EAA+BG,OAA/B,EAA7B;AACH,SA/BD,CAiCA;;;AACA,YAAI,CAACZ,eAAL,EAAsB;AAClB,iBAAO;AAAEiB,YAAAA,KAAK,EAAE,KAAT;AAAgBC,YAAAA,OAAO,EAAE;AAAzB,WAAP;AACH,SApCD,CAsCA;;;AACA,cAAMf,EAAE,CACHW,SADC,iCAEKP,MAAM,CAACG,oBAFZ;AAGEK,UAAAA,WAAW,EAAET,oBAAoB,CAACS,WAHpC;AAIEC,UAAAA,IAAI,EAAE,MAAM,6BAAeV,oBAAoB,CAACU,IAApC,EAA0ChB,eAA1C;AAJd,YAMDY,OANC,EAAN;AAQA,eAAO;AAAEK,UAAAA,KAAK,EAAE,KAAT;AAAgBC,UAAAA,OAAO,EAAE;AAAzB,SAAP;AACH,OAhDD,CAgDE,OAAOL,CAAP,EAAU;AACR,eAAO;AAAEI,UAAAA,KAAK,EAAE,IAAT;AAAeC,UAAAA,OAAO,EAAEL,CAAC,CAACK;AAA1B,SAAP;AACH;AACJ,KApDe,CAAhB;AAsDA,WAAO,MAAMpB,OAAO,CAACF,KAAD,CAApB;AACH;;AA7DgC,CAAtB,C","sourcesContent":["import S3 from \"aws-sdk/clients/s3\";\nimport transformImage from \"./transformImage\";\nimport optimizeImage from \"./optimizeImage\";\nimport { createHandler, getEnvironment, getObjectParams } from \"../utils\";\nimport { getImageKey } from \"./utils\";\nimport { HandlerPlugin } from \"@webiny/handler/types\";\n\nexport default (): HandlerPlugin => ({\n    type: \"handler\",\n    name: \"handler-download-file\",\n    async handle(context) {\n        const event = context.invocationArgs;\n\n        const handler = createHandler(async ({ body: { transformations, key } }) => {\n            try {\n                const env = getEnvironment();\n                const s3 = new S3({ region: env.region });\n\n                let optimizedImageObject;\n\n                const params = {\n                    initial: getObjectParams(key),\n                    optimized: getObjectParams(getImageKey({ key })),\n                    optimizedTransformed: getObjectParams(getImageKey({ key, transformations }))\n                };\n\n                // 1. Get optimized image.\n                try {\n                    optimizedImageObject = await s3.getObject(params.optimized).promise();\n                } catch (e) {\n                    // If not found, try to create it by loading the initially uploaded image.\n                    optimizedImageObject = await s3.getObject(params.initial).promise();\n\n                    await s3\n                        .putObject({\n                            ...params.optimized,\n                            ContentType: optimizedImageObject.ContentType,\n                            Body: await optimizeImage(\n                                optimizedImageObject.Body,\n                                optimizedImageObject.ContentType\n                            )\n                        })\n                        .promise();\n\n                    optimizedImageObject = await s3.getObject(params.optimized).promise();\n                }\n\n                // 2. If no transformations requested, just exit.\n                if (!transformations) {\n                    return { error: false, message: \"\" };\n                }\n\n                // 3. If transformations requested, apply them in save it into the bucket.\n                await s3\n                    .putObject({\n                        ...params.optimizedTransformed,\n                        ContentType: optimizedImageObject.ContentType,\n                        Body: await transformImage(optimizedImageObject.Body, transformations)\n                    })\n                    .promise();\n\n                return { error: false, message: \"\" };\n            } catch (e) {\n                return { error: true, message: e.message };\n            }\n        });\n\n        return await handler(event);\n    }\n});\n"],"file":"index.js"}