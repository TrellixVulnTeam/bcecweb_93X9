import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { Fragment, useEffect, useRef, useCallback, useState } from "react";
import { ApolloLink } from "apollo-link";
import { setContext } from "apollo-link-context";
import loadScript from "load-script";
import { Global } from "@emotion/core";
import { plugins } from "@webiny/plugins";
import { useI18N } from "@webiny/app-i18n/hooks/useI18N";
import { useSecurity } from "@webiny/app-security";
import { CircularProgress } from "@webiny/ui/Progress";
import { playgroundDialog, PlaygroundContainer } from "./Playground.styles";
import { settings } from "./settings";

var withHeaders = function withHeaders(link, headers) {
  return ApolloLink.from([setContext( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_, req) {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", {
                headers: _objectSpread(_objectSpread({}, req.headers), headers)
              });

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }()), link]);
};

var initScripts = function initScripts() {
  return new Promise(function (resolve) {
    // @ts-ignore
    if (window.GraphQLPlayground) {
      return resolve();
    }

    return loadScript("https://cdn.jsdelivr.net/npm/@apollographql/graphql-playground-react@1.7.32/build/static/js/middleware.js", resolve);
  });
};

var Playground = function Playground(_ref2) {
  var createApolloClient = _ref2.createApolloClient;

  var _useState = useState(true),
      _useState2 = _slicedToArray(_useState, 2),
      loading = _useState2[0],
      setLoading = _useState2[1];

  var _useI18N = useI18N(),
      getCurrentLocale = _useI18N.getCurrentLocale;

  var _useSecurity = useSecurity(),
      identity = _useSecurity.identity;

  var links = useRef({});
  var locale = getCurrentLocale("content");
  var tabs = plugins.byType("graphql-playground-tab").map(function (pl) {
    return pl.tab({
      locale: locale,
      identity: identity
    });
  }).filter(Boolean);
  var createApolloLink = useCallback(function (_ref3) {
    var endpoint = _ref3.endpoint,
        headers = _ref3.headers;

    // If the request endpoint is not know to us, return the first available
    if (!endpoint.includes(process.env.REACT_APP_API_URL)) {
      return {
        link: withHeaders(Object.values(links.current)[0], headers)
      };
    }

    if (!links.current[endpoint]) {
      links.current[endpoint] = createApolloClient({
        uri: endpoint
      }).link;
    }

    return {
      link: withHeaders(links.current[endpoint], headers)
    };
  }, []);
  useEffect(function () {
    initScripts().then(function () {
      setLoading(false);
    });
  }, []);
  useEffect(function () {
    if (!loading) {
      // @ts-ignore
      window.GraphQLPlayground.init(document.getElementById("graphql-playground"), {
        tabs: tabs,
        createApolloLink: createApolloLink,
        settings: settings
      });
    }
  }, [loading]);
  return /*#__PURE__*/React.createElement(Fragment, null, loading ? /*#__PURE__*/React.createElement(CircularProgress, {
    label: "Loading playground..."
  }) : /*#__PURE__*/React.createElement(PlaygroundContainer, {
    id: "graphql-playground"
  }), /*#__PURE__*/React.createElement(Global, {
    styles: playgroundDialog
  }));
};

export default Playground;
//# sourceMappingURL=Playground.js.map