import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject;

import React, { useState } from "react";
import { useQuery } from "@apollo/react-hooks";
import gql from "graphql-tag";
export var GET_I18N_INFORMATION = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    query GetI18NInformation {\n        i18n {\n            getI18NInformation {\n                currentLocales {\n                    context\n                    locale\n                }\n                locales {\n                    code\n                    default\n                }\n            }\n        }\n    }\n"])));
export var I18NContext = /*#__PURE__*/React.createContext(null);
var defaultState = {
  currentLocales: [],
  locales: []
};

var updateLocaleStorage = function updateLocaleStorage(currentLocales) {
  localStorage.setItem("wby_i18n_locale", currentLocales.reduce(function (current, _ref) {
    var context = _ref.context,
        locale = _ref.locale;
    return "".concat(current).concat(context, ":").concat(locale, ";");
  }, ""));
};

export var I18NProvider = function I18NProvider(props) {
  var children = props.children,
      loader = props.loader;

  var _useState = useState(defaultState),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var _useQuery = useQuery(GET_I18N_INFORMATION, {
    onCompleted: function onCompleted(data) {
      var _data$i18n;

      var _ref2 = (data === null || data === void 0 ? void 0 : (_data$i18n = data.i18n) === null || _data$i18n === void 0 ? void 0 : _data$i18n.getI18NInformation) || {},
          fetchedCurrentLocales = _ref2.currentLocales,
          locales = _ref2.locales; // wby_i18n_locale: "default:en-US;content:en-US;"


      // wby_i18n_locale: "default:en-US;content:en-US;"
      var parsedLocales = {};

      if (localStorage.getItem("wby_i18n_locale")) {
        localStorage.getItem("wby_i18n_locale").split(";").filter(Boolean).forEach(function (item) {
          var _item$split = item.split(":"),
              _item$split2 = _slicedToArray(_item$split, 2),
              context = _item$split2[0],
              locale = _item$split2[1];

          parsedLocales[context] = locale;
        });
      }

      var currentLocales = [];

      for (var i = 0; i < fetchedCurrentLocales.length; i++) {
        var item = fetchedCurrentLocales[i];
        currentLocales.push({
          context: item.context,
          locale: parsedLocales[item.context] || item.locale
        });
      }

      updateLocaleStorage(currentLocales);
      setState({
        locales: locales,
        currentLocales: currentLocales
      });
    }
  }),
      loading = _useQuery.loading,
      refetch = _useQuery.refetch;

  if (loading && loader) {
    return loader;
  }

  var value = {
    refetchLocales: refetch,
    updateLocaleStorage: updateLocaleStorage,
    state: state,
    setState: setState
  };
  return /*#__PURE__*/React.createElement(I18NContext.Provider, {
    value: value
  }, children);
};
//# sourceMappingURL=I18NContext.js.map