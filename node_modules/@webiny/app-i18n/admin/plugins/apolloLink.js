import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { setContext } from "apollo-link-context";
import { ApolloLinkPlugin } from "@webiny/app/plugins/ApolloLinkPlugin";
export default new ApolloLinkPlugin(function () {
  return setContext( /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_, _ref) {
      var headers, localeStorageLocales;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              headers = _ref.headers;
              localeStorageLocales = localStorage.getItem("wby_i18n_locale");

              if (localeStorageLocales) {
                _context.next = 4;
                break;
              }

              return _context.abrupt("return", {
                headers: headers
              });

            case 4:
              return _context.abrupt("return", {
                headers: _objectSpread(_objectSpread({}, headers), {}, {
                  "x-i18n-locale": localStorage.getItem("wby_i18n_locale")
                })
              });

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }());
});
//# sourceMappingURL=apolloLink.js.map