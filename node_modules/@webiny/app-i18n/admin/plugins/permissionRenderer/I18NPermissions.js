import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2, _templateObject3, _templateObject4;

import React, { Fragment, useCallback, useMemo } from "react";
import { Grid, Cell } from "@webiny/ui/Grid";
import { Select } from "@webiny/ui/Select";
import { i18n } from "@webiny/app/i18n";
import { PermissionInfo, gridNoPaddingClass } from "@webiny/app-admin/components/Permissions";
import { Form } from "@webiny/form";
var t = i18n.ns("app-i18n/admin/plugins/permissionRenderer");
var I18N = "i18n";
var I18N_FULL_ACCESS = "".concat(I18N, ".*");
var I18N_LOCALES = "".concat(I18N, ".locales");
var FULL_ACCESS = "full";
var NO_ACCESS = "no";
export var I18NPermissions = function I18NPermissions(_ref) {
  var value = _ref.value,
      onChange = _ref.onChange;
  var onFormChange = useCallback(function (data) {
    var newValue = [];

    if (Array.isArray(value)) {
      // Let's just filter out the `i18n*` permission objects, it's easier to build new ones from scratch.
      newValue = value.filter(function (item) {
        return !item.name.startsWith(I18N);
      });
    }

    var permission;

    if (data.level === FULL_ACCESS) {
      permission = {
        name: I18N_FULL_ACCESS
      };
    } else if (data.locales) {
      permission = {
        name: I18N_LOCALES
      };
    }

    if (permission) {
      newValue.push(permission);
    }

    onChange(newValue);
  }, [value]);
  var formData = useMemo(function () {
    if (!Array.isArray(value)) {
      return {
        level: NO_ACCESS
      };
    }

    var hasFullAccess = value.find(function (item) {
      return item.name === I18N_FULL_ACCESS || item.name === "*";
    });

    if (hasFullAccess) {
      return {
        level: FULL_ACCESS
      };
    }

    var permission = value.find(function (item) {
      return item.name.startsWith(I18N);
    });

    if (!permission) {
      return {
        level: NO_ACCESS
      };
    }
  }, []);
  return /*#__PURE__*/React.createElement(Form, {
    data: formData,
    onChange: onFormChange
  }, function (_ref2) {
    var Bind = _ref2.Bind;
    return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(Grid, {
      className: gridNoPaddingClass
    }, /*#__PURE__*/React.createElement(Cell, {
      span: 6
    }, /*#__PURE__*/React.createElement(PermissionInfo, {
      title: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Access Level"])))
    })), /*#__PURE__*/React.createElement(Cell, {
      span: 6
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "level"
    }, /*#__PURE__*/React.createElement(Select, {
      label: t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Access Level"])))
    }, /*#__PURE__*/React.createElement("option", {
      value: NO_ACCESS
    }, t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["No access"])))), /*#__PURE__*/React.createElement("option", {
      value: FULL_ACCESS
    }, t(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Full access"])))))))));
  });
};
//# sourceMappingURL=I18NPermissions.js.map