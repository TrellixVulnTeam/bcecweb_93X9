import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { NavigationMenuElement } from "@webiny/app-admin/ui/elements/NavigationMenuElement";
import { UIViewPlugin } from "@webiny/app-admin/ui/UIView";
import { NavigationView } from "@webiny/app-admin/ui/views/NavigationView";
export default [new UIViewPlugin(NavigationView, /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(view) {
    var _view$getSecurityHook, identity, localesMenu;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return view.isRendered();

          case 2:
            _view$getSecurityHook = view.getSecurityHook(), identity = _view$getSecurityHook.identity;

            if (identity.getPermission("i18n.locale")) {
              _context.next = 5;
              break;
            }

            return _context.abrupt("return");

          case 5:
            localesMenu = view.addSettingsMenuElement(new NavigationMenuElement("languages", {
              label: "Languages"
            }));
            localesMenu.addElement(new NavigationMenuElement("locales.crud", {
              label: "Locales",
              path: "/i18n/locales"
            })); // !EXAMPLE!
            // This shows how you can attach your own logic and conditionally show/hide element.
            //
            // localesMenu.addShouldRender(({ next }) => {
            //     // WARNING! Nonsense example :)
            //     // If label matches, continue with other checks in the chain.
            //     if (localesMenu.config.label === "Locales") {
            //         return next();
            //     }
            //
            //     // Hide otherwise.
            //     return false;
            // });

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}())];
//# sourceMappingURL=menus.js.map