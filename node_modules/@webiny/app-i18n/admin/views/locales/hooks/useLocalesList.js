import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

var _templateObject;

import _regeneratorRuntime from "@babel/runtime/regenerator";
import { useCallback, useState } from "react";
import orderBy from "lodash/orderBy";
import { i18n } from "@webiny/app/i18n";
import { useRouter } from "@webiny/react-router";
import { useQuery, useMutation } from "@apollo/react-hooks";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { useConfirmationDialog } from "@webiny/app-admin/hooks/useConfirmationDialog";
import { useI18N } from "../../../../hooks/useI18N";
import { LIST_LOCALES, DELETE_LOCALE } from "./graphql";
import { useCurrentLocale } from "./useCurrentLocale";
var t = i18n.ns("app-i18n/admin/locales/data-list");

var serializeSorters = function serializeSorters(data) {
  if (!data) {
    return data;
  }

  var _Object$entries = Object.entries(data),
      _Object$entries2 = _slicedToArray(_Object$entries, 1),
      _Object$entries2$ = _slicedToArray(_Object$entries2[0], 2),
      key = _Object$entries2$[0],
      value = _Object$entries2$[1];

  return "".concat(key, ":").concat(value);
};

var deserializeSorters = function deserializeSorters(data) {
  if (typeof data !== "string") {
    return data;
  }

  var _ref = data.split(":"),
      _ref2 = _slicedToArray(_ref, 2),
      key = _ref2[0],
      value = _ref2[1];

  return _defineProperty({}, key, value);
};

export var useLocalesList = function useLocalesList(config) {
  var defaultSorter = config.sorters.length ? config.sorters[0].sorters : null;

  var _useState = useState(""),
      _useState2 = _slicedToArray(_useState, 2),
      filter = _useState2[0],
      setFilter = _useState2[1];

  var _useState3 = useState(serializeSorters(defaultSorter)),
      _useState4 = _slicedToArray(_useState3, 2),
      sort = _useState4[0],
      setSort = _useState4[1];

  var _useI18N = useI18N(),
      refetchLocales = _useI18N.refetchLocales,
      getDefaultLocale = _useI18N.getDefaultLocale,
      getCurrentLocale = _useI18N.getCurrentLocale,
      setCurrentLocale = _useI18N.setCurrentLocale;

  var _useRouter = useRouter(),
      history = _useRouter.history;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var listQuery = useQuery(LIST_LOCALES);
  var currentLocaleCode = useCurrentLocale();

  var _useMutation = useMutation(DELETE_LOCALE, {
    refetchQueries: [{
      query: LIST_LOCALES
    }]
  }),
      _useMutation2 = _slicedToArray(_useMutation, 2),
      deleteIt = _useMutation2[0],
      deleteMutation = _useMutation2[1];

  var _useConfirmationDialo = useConfirmationDialog({
    dataTestId: "default-data-list.delete-dialog"
  }),
      showConfirmation = _useConfirmationDialo.showConfirmation;

  var filterLocales = useCallback(function (_ref4) {
    var code = _ref4.code;
    return code.toLowerCase().includes(filter);
  }, [filter]);
  var sortLocaleList = useCallback(function (locales) {
    if (!sort) {
      return locales;
    }

    var _Object$entries3 = Object.entries(deserializeSorters(sort)),
        _Object$entries4 = _slicedToArray(_Object$entries3, 1),
        _Object$entries4$ = _slicedToArray(_Object$entries4[0], 2),
        key = _Object$entries4$[0],
        value = _Object$entries4$[1];

    return orderBy(locales, [key], [value]);
  }, [sort]);
  var data = listQuery.loading ? [] : listQuery.data.i18n.listI18NLocales.data;
  var deleteLocale = useCallback(function (item) {
    showConfirmation( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var response, error, defaultLocale;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return deleteIt({
                variables: item
              });

            case 2:
              response = _context.sent;
              error = response.data.i18n.deleteI18NLocale.error;

              if (!error) {
                _context.next = 6;
                break;
              }

              return _context.abrupt("return", showSnackbar(error.message));

            case 6:
              showSnackbar(t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Locale \"{code}\" deleted."])))({
                code: item.code
              }));

              if (getCurrentLocale("content") === item.code) {
                // Update current "content" locale
                defaultLocale = getDefaultLocale();
                setCurrentLocale(defaultLocale.code, "content");
              }

              if (currentLocaleCode === item.code) {
                history.push("/i18n/locales");
              }

              refetchLocales(); // Reload page

              window.location.reload();

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));
  }, [currentLocaleCode]);
  var loading = [listQuery, deleteMutation].some(function (item) {
    return item.loading;
  });
  var filteredData = filter === "" ? data : data.filter(filterLocales);
  var locales = sortLocaleList(filteredData);
  var createLocale = useCallback(function () {
    return history.push("/i18n/locales?new=true");
  }, []);
  var editLocale = useCallback(function (code) {
    history.push("/i18n/locales?code=".concat(code));
  }, []);
  return {
    locales: locales,
    loading: loading,
    currentLocaleCode: currentLocaleCode,
    createLocale: createLocale,
    filter: filter,
    setFilter: setFilter,
    sort: sort,
    setSort: setSort,
    serializeSorters: serializeSorters,
    editLocale: editLocale,
    deleteLocale: deleteLocale
  };
};
//# sourceMappingURL=useLocalesList.js.map