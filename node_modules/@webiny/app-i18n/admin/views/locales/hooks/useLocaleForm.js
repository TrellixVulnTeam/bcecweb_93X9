import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

var _templateObject;

import _regeneratorRuntime from "@babel/runtime/regenerator";
import { useCallback } from "react";
import { useMutation, useQuery } from "@apollo/react-hooks";
import isEmpty from "lodash/isEmpty";
import pick from "lodash/pick";
import omit from "lodash/omit";
import { i18n } from "@webiny/app/i18n";
import { useRouter } from "@webiny/react-router";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { useI18N } from "../../../../hooks/useI18N";
import { GET_LOCALE, CREATE_LOCALE, UPDATE_LOCALE, LIST_LOCALES } from "./graphql";
import { useCurrentLocale } from "./useCurrentLocale";
var t = i18n.ns("app-i18n/admin/locales/form");
export var useLocaleForm = function useLocaleForm() {
  var _getQuery$data, _getQuery$data$i18n;

  var _useI18N = useI18N(),
      refetchLocales = _useI18N.refetchLocales;

  var _useRouter = useRouter(),
      location = _useRouter.location,
      history = _useRouter.history;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var newEntry = new URLSearchParams(location.search).get("new") === "true";
  var currentLocaleCode = useCurrentLocale();
  var getQuery = useQuery(GET_LOCALE, {
    variables: {
      code: currentLocaleCode
    },
    skip: !currentLocaleCode,
    onCompleted: function onCompleted(data) {
      var _data$i18n, _data$i18n$getI18NLoc;

      var error = data === null || data === void 0 ? void 0 : (_data$i18n = data.i18n) === null || _data$i18n === void 0 ? void 0 : (_data$i18n$getI18NLoc = _data$i18n.getI18NLocale) === null || _data$i18n$getI18NLoc === void 0 ? void 0 : _data$i18n$getI18NLoc.error;

      if (error) {
        history.push("/i18n/locales");
        showSnackbar(error.message);
      }
    }
  });

  var _useMutation = useMutation(CREATE_LOCALE, {
    refetchQueries: [{
      query: LIST_LOCALES
    }]
  }),
      _useMutation2 = _slicedToArray(_useMutation, 2),
      create = _useMutation2[0],
      createMutation = _useMutation2[1];

  var _useMutation3 = useMutation(UPDATE_LOCALE, {
    refetchQueries: [{
      query: LIST_LOCALES
    }]
  }),
      _useMutation4 = _slicedToArray(_useMutation3, 2),
      update = _useMutation4[0],
      updateMutation = _useMutation4[1];

  var loading = [getQuery, createMutation, updateMutation].some(function (item) {
    return item.loading;
  });
  var onSubmit = useCallback( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {
      var _response$data, _response$data$i18n, _response$data$i18n$l;

      var isUpdate, _ref2, _ref3, operation, args, response, error;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              isUpdate = data.createdOn;
              _ref2 = isUpdate ? [update, {
                variables: {
                  code: data.code,
                  data: pick(data, "default")
                }
              }] : [create, {
                variables: {
                  data: omit(data, ["createdOn"])
                }
              }], _ref3 = _slicedToArray(_ref2, 2), operation = _ref3[0], args = _ref3[1];
              _context.next = 4;
              return operation(args);

            case 4:
              response = _context.sent;
              error = response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$i18n = _response$data.i18n) === null || _response$data$i18n === void 0 ? void 0 : (_response$data$i18n$l = _response$data$i18n.locale) === null || _response$data$i18n$l === void 0 ? void 0 : _response$data$i18n$l.error;

              if (!error) {
                _context.next = 8;
                break;
              }

              return _context.abrupt("return", showSnackbar(error.message));

            case 8:
              !isUpdate && history.push("/i18n/locales?code=".concat(data.code));
              showSnackbar(t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Locale saved successfully."]))));
              refetchLocales(); // Reload page

              window.location.reload();

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }(), [currentLocaleCode]);
  var locale = (getQuery === null || getQuery === void 0 ? void 0 : (_getQuery$data = getQuery.data) === null || _getQuery$data === void 0 ? void 0 : (_getQuery$data$i18n = _getQuery$data.i18n) === null || _getQuery$data$i18n === void 0 ? void 0 : _getQuery$data$i18n.getI18NLocale.data) || {};
  var showEmptyView = !newEntry && !loading && isEmpty(locale);
  var createLocale = useCallback(function () {
    return history.push("/i18n/locales?new=true");
  }, []);
  var cancelEditing = useCallback(function () {
    return history.push("/i18n/locales");
  }, []);
  return {
    loading: loading,
    showEmptyView: showEmptyView,
    createLocale: createLocale,
    cancelEditing: cancelEditing,
    locale: locale,
    onSubmit: onSubmit
  };
};
//# sourceMappingURL=useLocaleForm.js.map