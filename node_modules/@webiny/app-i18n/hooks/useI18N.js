import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import { useContext } from "react";
import { I18NContext } from "../contexts/I18N";
export function useI18N() {
  var context = useContext(I18NContext);

  var _ref = context || {},
      state = _ref.state,
      setState = _ref.setState,
      refetchLocales = _ref.refetchLocales,
      updateLocaleStorage = _ref.updateLocaleStorage;

  var self = {
    refetchLocales: refetchLocales,
    getDefaultLocale: function getDefaultLocale() {
      return state.locales.find(function (item) {
        return item.default === true;
      });
    },
    getCurrentLocales: function getCurrentLocales() {
      return state.currentLocales;
    },
    getCurrentLocale: function getCurrentLocale() {
      var _state$currentLocales;

      var localeContext = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "default";
      return (_state$currentLocales = state.currentLocales.find(function (locale) {
        return locale.context === localeContext;
      })) === null || _state$currentLocales === void 0 ? void 0 : _state$currentLocales.locale;
    },
    getLocale: function getLocale() {
      return self.getCurrentLocale.apply(self, arguments);
    },
    setCurrentLocale: function setCurrentLocale(code) {
      var localeContext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "default";

      var newCurrentLocales = _toConsumableArray(self.getCurrentLocales());

      for (var i = 0; i < newCurrentLocales.length; i++) {
        var item = newCurrentLocales[i];

        if (item.context === localeContext) {
          item.locale = code;
          break;
        }
      }

      updateLocaleStorage(newCurrentLocales);
      setState(function (prev) {
        var next = _objectSpread({}, prev);

        next.currentLocales = newCurrentLocales;
        return next;
      });
    },
    getLocales: function getLocales() {
      return state.locales;
    },
    state: state
  };
  return self;
}
//# sourceMappingURL=useI18N.js.map