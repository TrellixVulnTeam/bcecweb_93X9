"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGraphQLSchema = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _graphqlTag = _interopRequireDefault(require("graphql-tag"));

var _schema = require("@graphql-tools/schema");

var _builtInTypes = require("./builtInTypes");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const createGraphQLSchema = context => {
  const scalars = context.plugins.byType("graphql-scalar").map(item => item.scalar);
  const typeDefs = [(0, _graphqlTag.default)`
            type Query
            type Mutation
            ${scalars.map(scalar => `scalar ${scalar.name}`).join(" ")}
            scalar JSON
            scalar Long
            scalar RefInput
            scalar Number
            scalar Any
            scalar Date
            scalar DateTime
            scalar Time
        `];
  const resolvers = [_objectSpread(_objectSpread({}, scalars.reduce((acc, s) => {
    acc[s.name] = s;
    return acc;
  }, {})), {}, {
    JSON: _builtInTypes.JsonScalar,
    Long: _builtInTypes.LongScalar,
    RefInput: _builtInTypes.RefInput,
    Number: _builtInTypes.Number,
    Any: _builtInTypes.Any,
    DateTime: _builtInTypes.DateTimeScalar,
    Date: _builtInTypes.DateScalar,
    Time: _builtInTypes.TimeScalar
  })];
  const gqlPlugins = context.plugins.byType("graphql-schema");

  for (let i = 0; i < gqlPlugins.length; i++) {
    const plugin = gqlPlugins[i];
    typeDefs.push(plugin.schema.typeDefs);
    resolvers.push(plugin.schema.resolvers);
  }

  return (0, _schema.makeExecutableSchema)({
    typeDefs,
    resolvers
  });
};

exports.createGraphQLSchema = createGraphQLSchema;
//# sourceMappingURL=createGraphQLSchema.js.map