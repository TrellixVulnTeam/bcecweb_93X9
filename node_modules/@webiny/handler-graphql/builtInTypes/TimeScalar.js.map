{"version":3,"sources":["../../src/builtInTypes/TimeScalar.ts"],"names":["re","parseTime","value","match","WebinyError","parsed","split","map","Number","length","hours","minutes","seconds","convertToTime","String","padStart","TimeScalar","GraphQLScalarType","name","description","serialize","parseValue"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA,MAAMA,EAAE,GAAG,uCAAX;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAoB;AAClC,MAAI,CAACA,KAAD,IAAUA,KAAK,CAACC,KAAN,CAAYH,EAAZ,MAAoB,IAAlC,EAAwC;AACpC,UAAM,IAAII,cAAJ,CAAgB,gCAAhB,EAAkD,uBAAlD,EAA2E;AAAEF,MAAAA;AAAF,KAA3E,CAAN;AACH;;AACD,QAAMG,MAAM,GAAGH,KAAK,CAACI,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAAf;;AACA,MAAIH,MAAM,CAACI,MAAP,GAAgB,CAApB,EAAuB;AACnB,UAAM,IAAIL,cAAJ,CAAiB,4BAAjB,EAA8C,uBAA9C,EAAuE;AAAEF,MAAAA;AAAF,KAAvE,CAAN;AACH;;AACD,QAAM,CAACQ,KAAD,EAAQC,OAAR,EAAiBC,OAAO,GAAG,CAA3B,IAAgCP,MAAtC;;AACA,MAAIK,KAAK,IAAI,EAAb,EAAiB;AACb,UAAM,IAAIN,cAAJ,CAAiB,qCAAjB,EAAuD,uBAAvD,EAAgF;AAClFF,MAAAA;AADkF,KAAhF,CAAN;AAGH,GAJD,MAIO,IAAIS,OAAO,IAAI,EAAf,EAAmB;AACtB,UAAM,IAAIP,cAAJ,CAAiB,uCAAjB,EAAyD,uBAAzD,EAAkF;AACpFF,MAAAA;AADoF,KAAlF,CAAN;AAGH,GAJM,MAIA,IAAIU,OAAO,IAAI,EAAf,EAAmB;AACtB,UAAM,IAAIR,cAAJ,CAAiB,uCAAjB,EAAyD,uBAAzD,EAAkF;AACpFF,MAAAA;AADoF,KAAlF,CAAN;AAGH;;AACD,SAAO;AACHQ,IAAAA,KADG;AAEHC,IAAAA,OAFG;AAGHC,IAAAA;AAHG,GAAP;AAKH,CA3BD;;AA6BA,MAAMC,aAAa,GAAIX,KAAD,IAA2B;AAC7C,QAAM;AAAEQ,IAAAA,KAAF;AAASC,IAAAA,OAAT;AAAkBC,IAAAA;AAAlB,MAA8BX,SAAS,CAACC,KAAD,CAA7C;AACA,SAAQ,GAAEY,MAAM,CAACJ,KAAD,CAAN,CAAcK,QAAd,CAAuB,CAAvB,EAA0B,GAA1B,CAA+B,IAAGD,MAAM,CAACH,OAAD,CAAN,CAAgBI,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,CAAiC,IAAGD,MAAM,CAClFF,OADkF,CAAN,CAE9EG,QAF8E,CAErE,CAFqE,EAElE,GAFkE,CAE7D,EAFnB;AAGH,CALD;;AAOO,MAAMC,UAAU,GAAG,IAAIC,0BAAJ,CAAsB;AAC5CC,EAAAA,IAAI,EAAE,MADsC;AAE5CC,EAAAA,WAAW,EAAE,2CAF+B;AAG5C;AACAC,EAAAA,SAAS,EAAEP,aAJiC;AAK5C;AACAQ,EAAAA,UAAU,EAAER;AANgC,CAAtB,CAAnB","sourcesContent":["import { GraphQLScalarType } from \"graphql\";\nimport WebinyError from \"@webiny/error\";\n\nconst re = /^([0-9]{2}):([0-9]{2})(:([0-9]{2}))?$/;\n\nconst parseTime = (value?: string) => {\n    if (!value || value.match(re) === null) {\n        throw new WebinyError(\"Value does not look like time.\", \"TIME_VALIDATION_ERROR\", { value });\n    }\n    const parsed = value.split(\":\").map(Number);\n    if (parsed.length < 2) {\n        throw new WebinyError(`Could not parse the value.`, \"TIME_VALIDATION_ERROR\", { value });\n    }\n    const [hours, minutes, seconds = 0] = parsed;\n    if (hours >= 24) {\n        throw new WebinyError(`There cannot be more than 24 hours.`, \"TIME_VALIDATION_ERROR\", {\n            value\n        });\n    } else if (minutes >= 60) {\n        throw new WebinyError(`There cannot be more than 59 minutes.`, \"TIME_VALIDATION_ERROR\", {\n            value\n        });\n    } else if (seconds >= 60) {\n        throw new WebinyError(`There cannot be more than 59 seconds.`, \"TIME_VALIDATION_ERROR\", {\n            value\n        });\n    }\n    return {\n        hours,\n        minutes,\n        seconds\n    };\n};\n\nconst convertToTime = (value: string): string => {\n    const { hours, minutes, seconds } = parseTime(value);\n    return `${String(hours).padStart(2, \"0\")}:${String(minutes).padStart(2, \"0\")}:${String(\n        seconds\n    ).padStart(2, \"0\")}`;\n};\n\nexport const TimeScalar = new GraphQLScalarType({\n    name: \"Time\",\n    description: \"A custom type to support time-only input.\",\n    // sending to client\n    serialize: convertToTime,\n    // received from client\n    parseValue: convertToTime\n});\n"],"file":"TimeScalar.js"}