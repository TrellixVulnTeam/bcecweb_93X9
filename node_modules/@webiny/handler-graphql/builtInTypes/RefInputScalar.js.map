{"version":3,"sources":["../../src/builtInTypes/RefInputScalar.ts"],"names":["isMongoId","value","test","Error","RefInput","GraphQLScalarType","name","description","serialize","id","parseValue","parseLiteral","ast","kind","i","fields","length"],"mappings":";;;;;;;AAAA;;AAEA,MAAMA,SAAS,GAAIC,KAAD,IAAwB;AACtC,MAAI,oBAAoBC,IAApB,CAAyBD,KAAzB,CAAJ,EAAqC;AACjC,WAAOA,KAAP;AACH;;AAED,QAAM,IAAIE,KAAJ,CAAU,2BAAV,CAAN;AACH,CAND;;AAQO,MAAMC,QAAQ,GAAG,IAAIC,0BAAJ,CAAsB;AAC1CC,EAAAA,IAAI,EAAE,UADoC;AAE1CC,EAAAA,WAAW,EACP,oGAHsC;AAI1CC,EAAAA,SAAS,EAAEP,KAAK,IAAI;AAChB,QAAI,CAACA,KAAD,IAAUA,KAAK,CAACQ,EAAN,KAAa,IAA3B,EAAiC;AAC7B,aAAO,IAAP;AACH;;AAED,WAAO,OAAOR,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCA,KAAK,CAACQ,EAAjD;AACH,GAVyC;AAW1CC,EAAAA,UAAU,EAAET,KAAK,IAAI;AACjB,QAAI,CAACA,KAAD,IAAUA,KAAK,CAACQ,EAAN,KAAa,IAA3B,EAAiC;AAC7B,aAAO,IAAP;AACH;;AAED,QAAI,OAAOR,KAAP,KAAiB,QAArB,EAA+B;AAC3B,aAAOD,SAAS,CAACC,KAAD,CAAhB;AACH;;AAED,QAAI,QAAQA,KAAZ,EAAmB;AACf,aAAOD,SAAS,CAACC,KAAK,CAACQ,EAAP,CAAhB;AACH;;AAED,UAAM,IAAIN,KAAJ,CAAU,yBAAV,CAAN;AACH,GAzByC;AA0B1CQ,EAAAA,YAAY,EAAEC,GAAG,IAAI;AACjB,QAAIA,GAAG,CAACC,IAAJ,KAAa,aAAjB,EAAgC;AAC5B,aAAOb,SAAS,CAACY,GAAG,CAACX,KAAL,CAAhB;AACH;;AAED,QAAIW,GAAG,CAACC,IAAJ,KAAa,aAAjB,EAAgC;AAC5B,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAJ,CAAWC,MAA/B,EAAuCF,CAAC,EAAxC,EAA4C;AACxC,cAAM;AAAER,UAAAA,IAAF;AAAQL,UAAAA;AAAR,YAAkBW,GAAG,CAACG,MAAJ,CAAWD,CAAX,CAAxB;;AACA,YAAIR,IAAI,CAACL,KAAL,KAAe,IAAnB,EAAyB;AACrB;AACA,iBAAOD,SAAS,CAACC,KAAK,CAACA,KAAP,CAAhB;AACH;AACJ;AACJ;;AAED,UAAM,IAAIE,KAAJ,CAAU,yBAAV,CAAN;AACH;AA1CyC,CAAtB,CAAjB","sourcesContent":["import { GraphQLScalarType } from \"graphql\";\n\nconst isMongoId = (value: any): string => {\n    if (/^[0-9a-fA-F]{24}$/.test(value)) {\n        return value;\n    }\n\n    throw new Error(\"Must be a valid Mongo ID!\");\n};\n\nexport const RefInput = new GraphQLScalarType({\n    name: \"RefInput\",\n    description:\n        \"A custom input type to be used with references. Supports plain ID and `{ id: ID }` Object literal.\",\n    serialize: value => {\n        if (!value || value.id === null) {\n            return null;\n        }\n\n        return typeof value === \"string\" ? value : value.id;\n    },\n    parseValue: value => {\n        if (!value || value.id === null) {\n            return null;\n        }\n\n        if (typeof value === \"string\") {\n            return isMongoId(value);\n        }\n\n        if (\"id\" in value) {\n            return isMongoId(value.id);\n        }\n\n        throw new Error(\"Invalid RefInput value!\");\n    },\n    parseLiteral: ast => {\n        if (ast.kind === \"StringValue\") {\n            return isMongoId(ast.value);\n        }\n\n        if (ast.kind === \"ObjectValue\") {\n            for (let i = 0; i < ast.fields.length; i++) {\n                const { name, value } = ast.fields[i];\n                if (name.value === \"id\") {\n                    // @ts-ignore\n                    return isMongoId(value.value);\n                }\n            }\n        }\n\n        throw new Error(\"Invalid RefInput value!\");\n    }\n});\n"],"file":"RefInputScalar.js"}