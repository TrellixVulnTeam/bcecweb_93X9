{"version":3,"sources":["../../src/builtInTypes/DateScalar.ts"],"names":["DateScalar","GraphQLScalarType","DateResolver","serialize","value","date","Date","toISOString","substr","ex"],"mappings":";;;;;;;;;;;AAAA;;AACA;;;;;;AACO,MAAMA,UAAU,GAAG,IAAIC,0BAAJ,iCACnBC,4BADmB;AAEtBC,EAAAA,SAAS,EAAEC,KAAK,IAAI;AAChB,QAAI,CAACA,KAAL,EAAY;AACR,aAAO,IAAP;AACH;;AACD,QAAI;AACA,YAAMC,IAAI,GAAG,IAAIC,IAAJ,CAASF,KAAT,CAAb;AACA,aAAOC,IAAI,CAACE,WAAL,GAAmBC,MAAnB,CAA0B,CAA1B,EAA6B,EAA7B,CAAP;AACH,KAHD,CAGE,OAAOC,EAAP,EAAW;AACT,UAAIL,KAAK,CAACG,WAAV,EAAuB;AACnB,eAAOH,KAAK,CAACG,WAAN,GAAoBC,MAApB,CAA2B,CAA3B,EAA8B,EAA9B,CAAP;AACH;;AACD,YAAMC,EAAN;AACH;AACJ;AAfqB,GAAnB","sourcesContent":["import { DateResolver } from \"graphql-scalars\";\nimport { GraphQLScalarType } from \"graphql\";\nexport const DateScalar = new GraphQLScalarType({\n    ...DateResolver,\n    serialize: value => {\n        if (!value) {\n            return null;\n        }\n        try {\n            const date = new Date(value);\n            return date.toISOString().substr(0, 10);\n        } catch (ex) {\n            if (value.toISOString) {\n                return value.toISOString().substr(0, 10);\n            }\n            throw ex;\n        }\n    }\n});\n"],"file":"DateScalar.js"}