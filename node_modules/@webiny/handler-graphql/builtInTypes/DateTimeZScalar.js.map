{"version":3,"sources":["../../src/builtInTypes/DateTimeZScalar.ts"],"names":["validateTimeZone","value","timeWithTimezone","split","WebinyError","separator","includes","zone","hoursMinutes","hours","minutes","undefined","length","DateTimeZScalar","GraphQLScalarType","name","description","parseValue","DateTimeResolver","serialize"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA,MAAMA,gBAAgB,GAAIC,KAAD,IAAyB;AAC9C,QAAMC,gBAAgB,GAAGD,KAAK,CAACE,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAzB;;AACA,MAAI,CAACD,gBAAL,EAAuB;AACnB,UAAM,IAAIE,cAAJ,CACF,kDADE,EAEF,0BAFE,EAGF;AACIH,MAAAA;AADJ,KAHE,CAAN;AAOH;;AACD,QAAMI,SAAS,GAAGH,gBAAgB,CAACI,QAAjB,CAA0B,GAA1B,IAAiC,GAAjC,GAAuC,GAAzD;AACA,QAAMC,IAAI,GAAGL,gBAAgB,CAACC,KAAjB,CAAuBE,SAAvB,EAAkC,CAAlC,CAAb;;AACA,MAAI,CAACE,IAAL,EAAW;AACP,UAAM,IAAIH,cAAJ,CACF,wCADE,EAEF,0BAFE,EAGF;AACIH,MAAAA,KAAK,EAAEC;AADX,KAHE,CAAN;AAOH;;AACD,QAAMM,YAAY,GAAGD,IAAI,CAACJ,KAAL,CAAW,GAAX,CAArB;AACA,QAAM,CAACM,KAAD,EAAQC,OAAR,IAAmBF,YAAzB;;AACA,MAAIC,KAAK,KAAKE,SAAV,IAAuBD,OAAO,KAAKC,SAAnC,IAAgDH,YAAY,CAACI,MAAb,KAAwB,CAA5E,EAA+E;AAC3E,UAAM,IAAIR,cAAJ,CACF,gDADE,EAEF,0BAFE,EAGF;AACIH,MAAAA,KAAK,EAAEM;AADX,KAHE,CAAN;AAOH;AACJ,CAjCD;AAkCA;AACA;AACA;AACA;;;AACO,MAAMM,eAAe,GAAG,IAAIC,0BAAJ,CAAsB;AACjDC,EAAAA,IAAI,EAAE,WAD2C;AAEjDC,EAAAA,WAAW,EAAE,+CAFoC;AAGjDC,EAAAA,UAAU,EAAEhB,KAAK,IAAI;AACjB;AACAiB,qCAAiBD,UAAjB,CAA4BhB,KAA5B;;AACAD,IAAAA,gBAAgB,CAACC,KAAD,CAAhB;AACA,WAAOA,KAAP;AACH,GARgD;AASjDkB,EAAAA,SAAS,EAAElB,KAAK,IAAI;AAChB,WAAOA,KAAP;AACH;AAXgD,CAAtB,CAAxB","sourcesContent":["import { DateTimeResolver } from \"graphql-scalars\";\nimport { GraphQLScalarType } from \"graphql\";\nimport WebinyError from \"@webiny/error\";\n\nconst validateTimeZone = (value: string): void => {\n    const timeWithTimezone = value.split(\"T\")[1];\n    if (!timeWithTimezone) {\n        throw new WebinyError(\n            \"Could not extract time with timezone from value.\",\n            \"DATE_TIME_TIMEZONE_ERROR\",\n            {\n                value\n            }\n        );\n    }\n    const separator = timeWithTimezone.includes(\"-\") ? \"-\" : \"+\";\n    const zone = timeWithTimezone.split(separator)[1];\n    if (!zone) {\n        throw new WebinyError(\n            \"Could not extract timezone from value.\",\n            \"DATE_TIME_TIMEZONE_ERROR\",\n            {\n                value: timeWithTimezone\n            }\n        );\n    }\n    const hoursMinutes = zone.split(\":\");\n    const [hours, minutes] = hoursMinutes;\n    if (hours === undefined || minutes === undefined || hoursMinutes.length !== 2) {\n        throw new WebinyError(\n            \"Could not extract hours or minutes from value.\",\n            \"DATE_TIME_TIMEZONE_ERROR\",\n            {\n                value: zone\n            }\n        );\n    }\n};\n/**\n * A custom type for dateTime with the timezone.\n * Must be in format \"YYYY-MM-ddTHH:mm:ss+HH:mm\".\n */\nexport const DateTimeZScalar = new GraphQLScalarType({\n    name: \"DateTimeZ\",\n    description: \"A custom type for dateTime with the timezone.\",\n    parseValue: value => {\n        // this serves as validator\n        DateTimeResolver.parseValue(value);\n        validateTimeZone(value);\n        return value;\n    },\n    serialize: value => {\n        return value;\n    }\n});\n"],"file":"DateTimeZScalar.js"}