"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Number = void 0;

var _graphql = require("graphql");

var _language = require("graphql/language");

var _error = _interopRequireDefault(require("@webiny/error"));

const parseValue = value => {
  if (String(value).match(/^0x/) !== null) {
    throw new _error.default("Value sent must be a non-hex number.", "INVALID_VALUE", {
      value
    });
  } else if (typeof value === "number") {
    return value;
  } else if (value === null || value === undefined) {
    return null;
  } else if (isNaN(value) === true) {
    throw new _error.default("Value sent must be a number.", "INVALID_VALUE", {
      value
    });
  }

  return parseFloat(value);
};

const Number = new _graphql.GraphQLScalarType({
  name: "Number",
  description: "A custom input type to be used with numbers. Supports Int and Float.",
  serialize: value => {
    try {
      return parseValue(value);
    } catch (ex) {
      console.log({
        message: "Value sent must be a number.",
        code: "INVALID_VALUE",
        data: {
          value
        }
      });
      return null;
    }
  },
  parseValue,
  parseLiteral: ast => {
    if (ast.kind === _language.Kind.INT || ast.kind === _language.Kind.FLOAT) {
      return ast.value;
    }

    throw new Error(`Expected type Number, found {${ast.value}}`);
  }
});
exports.Number = Number;
//# sourceMappingURL=NumberScalar.js.map