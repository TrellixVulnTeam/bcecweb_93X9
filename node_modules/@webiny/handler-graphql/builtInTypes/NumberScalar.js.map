{"version":3,"sources":["../../src/builtInTypes/NumberScalar.ts"],"names":["parseValue","value","String","match","WebinyError","undefined","isNaN","parseFloat","Number","GraphQLScalarType","name","description","serialize","ex","console","log","message","code","data","parseLiteral","ast","kind","Kind","INT","FLOAT","Error"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA,MAAMA,UAAU,GAAIC,KAAD,IAAgB;AAC/B,MAAIC,MAAM,CAACD,KAAD,CAAN,CAAcE,KAAd,CAAoB,KAApB,MAA+B,IAAnC,EAAyC;AACrC,UAAM,IAAIC,cAAJ,CAAgB,sCAAhB,EAAwD,eAAxD,EAAyE;AAC3EH,MAAAA;AAD2E,KAAzE,CAAN;AAGH,GAJD,MAIO,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAClC,WAAOA,KAAP;AACH,GAFM,MAEA,IAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKI,SAAhC,EAA2C;AAC9C,WAAO,IAAP;AACH,GAFM,MAEA,IAAIC,KAAK,CAACL,KAAD,CAAL,KAAiB,IAArB,EAA2B;AAC9B,UAAM,IAAIG,cAAJ,CAAgB,8BAAhB,EAAgD,eAAhD,EAAiE;AACnEH,MAAAA;AADmE,KAAjE,CAAN;AAGH;;AACD,SAAOM,UAAU,CAACN,KAAD,CAAjB;AACH,CAfD;;AAiBO,MAAMO,MAAM,GAAG,IAAIC,0BAAJ,CAAsB;AACxCC,EAAAA,IAAI,EAAE,QADkC;AAExCC,EAAAA,WAAW,EAAE,sEAF2B;AAGxCC,EAAAA,SAAS,EAAGX,KAAD,IAAgB;AACvB,QAAI;AACA,aAAOD,UAAU,CAACC,KAAD,CAAjB;AACH,KAFD,CAEE,OAAOY,EAAP,EAAW;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAY;AACRC,QAAAA,OAAO,EAAE,8BADD;AAERC,QAAAA,IAAI,EAAE,eAFE;AAGRC,QAAAA,IAAI,EAAE;AACFjB,UAAAA;AADE;AAHE,OAAZ;AAOA,aAAO,IAAP;AACH;AACJ,GAhBuC;AAiBxCD,EAAAA,UAjBwC;AAkBxCmB,EAAAA,YAAY,EAAGC,GAAD,IAAc;AACxB,QAAIA,GAAG,CAACC,IAAJ,KAAaC,eAAKC,GAAlB,IAAyBH,GAAG,CAACC,IAAJ,KAAaC,eAAKE,KAA/C,EAAsD;AAClD,aAAOJ,GAAG,CAACnB,KAAX;AACH;;AAED,UAAM,IAAIwB,KAAJ,CAAW,gCAA+BL,GAAG,CAACnB,KAAM,GAApD,CAAN;AACH;AAxBuC,CAAtB,CAAf","sourcesContent":["import { GraphQLScalarType } from \"graphql\";\nimport { Kind } from \"graphql/language\";\nimport WebinyError from \"@webiny/error\";\n\nconst parseValue = (value: any) => {\n    if (String(value).match(/^0x/) !== null) {\n        throw new WebinyError(\"Value sent must be a non-hex number.\", \"INVALID_VALUE\", {\n            value\n        });\n    } else if (typeof value === \"number\") {\n        return value;\n    } else if (value === null || value === undefined) {\n        return null;\n    } else if (isNaN(value) === true) {\n        throw new WebinyError(\"Value sent must be a number.\", \"INVALID_VALUE\", {\n            value\n        });\n    }\n    return parseFloat(value);\n};\n\nexport const Number = new GraphQLScalarType({\n    name: \"Number\",\n    description: \"A custom input type to be used with numbers. Supports Int and Float.\",\n    serialize: (value: any) => {\n        try {\n            return parseValue(value);\n        } catch (ex) {\n            console.log({\n                message: \"Value sent must be a number.\",\n                code: \"INVALID_VALUE\",\n                data: {\n                    value\n                }\n            });\n            return null;\n        }\n    },\n    parseValue,\n    parseLiteral: (ast: any) => {\n        if (ast.kind === Kind.INT || ast.kind === Kind.FLOAT) {\n            return ast.value;\n        }\n\n        throw new Error(`Expected type Number, found {${ast.value}}`);\n    }\n});\n"],"file":"NumberScalar.js"}