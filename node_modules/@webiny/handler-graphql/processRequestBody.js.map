{"version":3,"sources":["../src/processRequestBody.ts"],"names":["processRequestBody","body","schema","context","query","variables","operationName","plugins","byType","forEach","pl","apply","result","requestBody","Array","isArray","i","length","push"],"mappings":";;;;;;;AAAA;;AAIA,MAAMA,kBAAkB,GAAG,OACvBC,IADuB,EAEvBC,MAFuB,EAGvBC,OAHuB,KAItB;AACD,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,SAAT;AAAoBC,IAAAA;AAApB,MAAsCL,IAA5C;AAEAE,EAAAA,OAAO,CAACI,OAAR,CACKC,MADL,CACsC,sBADtC,EAEKC,OAFL,CAEaC,EAAE,IAAIA,EAAE,CAACC,KAAH,CAAS;AAAEV,IAAAA,IAAF;AAAQC,IAAAA,MAAR;AAAgBC,IAAAA;AAAhB,GAAT,CAFnB;AAIA,QAAMS,MAAM,GAAG,MAAM,sBAAQV,MAAR,EAAgBE,KAAhB,EAAuB,EAAvB,EAA2BD,OAA3B,EAAoCE,SAApC,EAA+CC,aAA/C,CAArB;AAEAH,EAAAA,OAAO,CAACI,OAAR,CAAgBC,MAAhB,CAAgD,qBAAhD,EAAuEC,OAAvE,CAA+EC,EAAE,IAAI;AACjFA,IAAAA,EAAE,CAACC,KAAH,CAAS;AAAEC,MAAAA,MAAF;AAAUX,MAAAA,IAAV;AAAgBC,MAAAA,MAAhB;AAAwBC,MAAAA;AAAxB,KAAT;AACH,GAFD;AAIA,SAAOS,MAAP;AACH,CAlBD;;eAoBe,OAAOC,WAAP,EAAoBX,MAApB,EAA4BC,OAA5B,KAAwC;AACnD,MAAIS,MAAJ;;AACA,MAAIE,KAAK,CAACC,OAAN,CAAcF,WAAd,CAAJ,EAAgC;AAC5BD,IAAAA,MAAM,GAAG,EAAT;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,WAAW,CAACI,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzCJ,MAAAA,MAAM,CAACM,IAAP,CAAY,MAAMlB,kBAAkB,CAACa,WAAW,CAACG,CAAD,CAAZ,EAAiBd,MAAjB,EAAyBC,OAAzB,CAApC;AACH;AACJ,GALD,MAKO;AACHS,IAAAA,MAAM,GAAG,MAAMZ,kBAAkB,CAACa,WAAD,EAAcX,MAAd,EAAsBC,OAAtB,CAAjC;AACH;;AAED,SAAOS,MAAP;AACH,C","sourcesContent":["import { graphql, GraphQLSchema } from \"graphql\";\nimport { GraphQLAfterQueryPlugin, GraphQLBeforeQueryPlugin, GraphQLRequestBody } from \"./types\";\nimport { Context } from \"@webiny/handler/types\";\n\nconst processRequestBody = async (\n    body: GraphQLRequestBody,\n    schema: GraphQLSchema,\n    context: Context\n) => {\n    const { query, variables, operationName } = body;\n\n    context.plugins\n        .byType<GraphQLBeforeQueryPlugin>(\"graphql-before-query\")\n        .forEach(pl => pl.apply({ body, schema, context }));\n\n    const result = await graphql(schema, query, {}, context, variables, operationName);\n\n    context.plugins.byType<GraphQLAfterQueryPlugin>(\"graphql-after-query\").forEach(pl => {\n        pl.apply({ result, body, schema, context });\n    });\n\n    return result;\n};\n\nexport default async (requestBody, schema, context) => {\n    let result;\n    if (Array.isArray(requestBody)) {\n        result = [];\n        for (let i = 0; i < requestBody.length; i++) {\n            result.push(await processRequestBody(requestBody[i], schema, context));\n        }\n    } else {\n        result = await processRequestBody(requestBody, schema, context);\n    }\n\n    return result;\n};\n"],"file":"processRequestBody.js"}