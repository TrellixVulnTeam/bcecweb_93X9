{"version":3,"sources":["../src/index.ts"],"names":["runHookCallback","hookName","args","input","context","plugin","plugins","byType","find","item","provider","SCAFFOLD_DOCS_LINK","name","type","scaffold","description","link","isSupported","questions","choices","value","message","default","githubActions","generate","onGenerate","onSuccess","onError"],"mappings":";;;;;;;;;AAIA;;AAEA;;AAOA,MAAMA,eAAe,GAAG,OAAOC,QAAP,EAAyBC,IAAzB,KAA2E;AAC/F,QAAM,CAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,IAAuBF,IAA7B;AACA,QAAMG,MAAM,GAAGD,OAAO,CAACE,OAAR,CACVC,MADU,CAC0B,wBAD1B,EAEVC,IAFU,CAELC,IAAI,IAAIA,IAAI,CAACC,QAAL,KAAkBP,KAAK,CAACO,QAF3B,CAAf;;AAIA,MAAI,OAAOL,MAAM,CAACJ,QAAD,CAAb,KAA4B,UAAhC,EAA4C;AACxC,UAAMI,MAAM,CAACJ,QAAD,CAAN,CAAiB,GAAGC,IAApB,CAAN;AACH;AACJ,CATD;;AAWA,MAAMS,kBAAkB,GAAG,6DAA3B;;eAEe,MAAwE,CACnF;AACIC,EAAAA,IAAI,EAAE,iCADV;AAEIC,EAAAA,IAAI,EAAE,8BAFV;AAGIC,EAAAA,QAAQ,EAAE;AACNF,IAAAA,IAAI,EAAE,cADA;AAENG,IAAAA,WAAW,EACP,0FACCC,sBAAKC,WAAL,GAAmB,MAAM,2BAAK,aAAL,EAAoBN,kBAApB,CAAzB,GAAmE,EADpE,CAHE;AAKNO,IAAAA,SAAS,EAAE,MAAM;AACb,aAAO,CACH;AACIN,QAAAA,IAAI,EAAE,UADV;AAEIC,QAAAA,IAAI,EAAE,MAFV;AAGIM,QAAAA,OAAO,EAAE,CAAC;AAAEP,UAAAA,IAAI,EAAE,gBAAR;AAA0BQ,UAAAA,KAAK,EAAE;AAAjC,SAAD,CAHb;AAIIC,QAAAA,OAAO,EAAE,6BAJb;AAKIC,QAAAA,OAAO,EAAE;AALb,OADG,EAQH;AACA,SAAGC,uBAAcL,SAAd,EATA,CAAP;AAWH,KAjBK;AAkBNM,IAAAA,QAAQ,EAAE,OAAO,GAAGtB,IAAV,KAAmB;AACzB,YAAMF,eAAe,CAAC,UAAD,EAAaE,IAAb,CAArB;AACH,KApBK;AAqBNuB,IAAAA,UAAU,EAAE,OAAO,GAAGvB,IAAV,KAAmB;AAC3B,YAAMF,eAAe,CAAC,YAAD,EAAeE,IAAf,CAArB;AACH,KAvBK;AAwBNwB,IAAAA,SAAS,EAAE,OAAO,GAAGxB,IAAV,KAAmB;AAC1B,YAAMF,eAAe,CAAC,WAAD,EAAcE,IAAd,CAArB;AACH,KA1BK;AA2BNyB,IAAAA,OAAO,EAAE,OAAO,GAAGzB,IAAV,KAAmB;AACxB,YAAMF,eAAe,CAAC,SAAD,EAAYE,IAAZ,CAArB;AACH;AA7BK;AAHd,CADmF,EAoCnFqB,sBApCmF,C","sourcesContent":["import {\n    CliCommandScaffoldCallableArgs,\n    CliCommandScaffoldTemplate\n} from \"@webiny/cli-plugin-scaffold/types\";\nimport githubActions from \"./githubActions\";\nimport { CliPluginsScaffoldCi } from \"./types\";\nimport link from \"terminal-link\";\n\ninterface Input {\n    provider: string;\n    [key: string]: any;\n}\n\nconst runHookCallback = async (hookName: string, args: CliCommandScaffoldCallableArgs<Input>[]) => {\n    const [{ input, context }] = args;\n    const plugin = context.plugins\n        .byType<CliPluginsScaffoldCi<Input>>(\"cli-plugin-scaffold-ci\")\n        .find(item => item.provider === input.provider);\n\n    if (typeof plugin[hookName] === \"function\") {\n        await plugin[hookName](...args);\n    }\n};\n\nconst SCAFFOLD_DOCS_LINK = \"https://www.webiny.com/docs/how-to-guides/scaffolding/ci-cd\";\n\nexport default (): [CliCommandScaffoldTemplate<Input>, CliPluginsScaffoldCi<Input>] => [\n    {\n        name: \"cli-plugin-scaffold-template-ci\",\n        type: \"cli-plugin-scaffold-template\",\n        scaffold: {\n            name: \"Set up CI/CD\",\n            description:\n                \"Sets up a CI/CD pipeline for your Webiny project using a\\n  provider of your choice.\" +\n                (link.isSupported ? \" \" + link(\"Learn more.\", SCAFFOLD_DOCS_LINK) : \"\"),\n            questions: () => {\n                return [\n                    {\n                        name: \"provider\",\n                        type: \"list\",\n                        choices: [{ name: \"GitHub Actions\", value: \"githubActions\" }],\n                        message: \"Choose your CI/CD provider:\",\n                        default: \"githubActions\"\n                    },\n                    // TODO: in the future, add questions via plugins, not hardcoded.\n                    ...githubActions.questions()\n                ];\n            },\n            generate: async (...args) => {\n                await runHookCallback(\"generate\", args);\n            },\n            onGenerate: async (...args) => {\n                await runHookCallback(\"onGenerate\", args);\n            },\n            onSuccess: async (...args) => {\n                await runHookCallback(\"onSuccess\", args);\n            },\n            onError: async (...args) => {\n                await runHookCallback(\"onError\", args);\n            }\n        }\n    },\n    githubActions\n];\n"],"file":"index.js"}