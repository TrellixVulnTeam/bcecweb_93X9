"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _githubActions = _interopRequireDefault(require("./githubActions"));

var _terminalLink = _interopRequireDefault(require("terminal-link"));

const runHookCallback = async (hookName, args) => {
  const [{
    input,
    context
  }] = args;
  const plugin = context.plugins.byType("cli-plugin-scaffold-ci").find(item => item.provider === input.provider);

  if (typeof plugin[hookName] === "function") {
    await plugin[hookName](...args);
  }
};

const SCAFFOLD_DOCS_LINK = "https://www.webiny.com/docs/how-to-guides/scaffolding/ci-cd";

var _default = () => [{
  name: "cli-plugin-scaffold-template-ci",
  type: "cli-plugin-scaffold-template",
  scaffold: {
    name: "Set up CI/CD",
    description: "Sets up a CI/CD pipeline for your Webiny project using a\n  provider of your choice." + (_terminalLink.default.isSupported ? " " + (0, _terminalLink.default)("Learn more.", SCAFFOLD_DOCS_LINK) : ""),
    questions: () => {
      return [{
        name: "provider",
        type: "list",
        choices: [{
          name: "GitHub Actions",
          value: "githubActions"
        }],
        message: "Choose your CI/CD provider:",
        default: "githubActions"
      }, // TODO: in the future, add questions via plugins, not hardcoded.
      ..._githubActions.default.questions()];
    },
    generate: async (...args) => {
      await runHookCallback("generate", args);
    },
    onGenerate: async (...args) => {
      await runHookCallback("onGenerate", args);
    },
    onSuccess: async (...args) => {
      await runHookCallback("onSuccess", args);
    },
    onError: async (...args) => {
      await runHookCallback("onError", args);
    }
  }
}, _githubActions.default];

exports.default = _default;
//# sourceMappingURL=index.js.map