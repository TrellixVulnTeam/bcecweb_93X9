{"version":3,"sources":["../../src/githubActions/index.ts"],"names":["octokit","user","repo","NEW_TOKEN_URL","LONG_LIVED_BRANCHES","generateErrorsCount","plugin","type","name","provider","questions","message","default","choices","value","required","when","answers","githubAccessTokenCreate","validate","answer","Octokit","auth","rest","users","getAuthenticated","then","data","e","newOrExistingRepo","organizations","orgs","listForAuthenticatedUser","map","item","login","repositories","i","length","repository","owner","newRepoOrgName","validForNewPackages","full_name","onGenerate","input","inquirer","newRepoName","existingRepo","newRepoPrivacyType","prompt","createPromptModule","console","log","chalk","bold","green","proceed","process","exit","generate","ora","start","repos","createInOrg","org","private","response","createForAuthenticatedUser","stopAndPersist","symbol","text","get","branch","default_branch","author","email","red","latestCommitSha","git","getRef","ref","object","sha","longLivedBranch","createRef","updateBranchProtection","allow_force_pushes","allow_deletions","enforce_admins","required_pull_request_reviews","restrictions","required_status_checks","strict","contexts","update","REPOSITORY_ENVIRONMENTS","env","createOrUpdateEnvironment","environment_name","reviewers","id","deployment_branch_policy","onSuccess","yellow","html_url","url"],"mappings":"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","sourcesContent":["import { CliPluginsScaffoldCi } from \"../types\";\nimport { Octokit } from \"octokit\";\nimport chalk from \"chalk\";\nimport commitWorkflows from \"./commitWorkflows\";\nimport fetchAllRepositories from \"./fetchAllRepositories\";\nimport validateNpmPackageName from \"validate-npm-package-name\";\nimport open from \"open\";\n\ntype Await<T> = T extends PromiseLike<infer U> ? U : T;\n\ninterface Input {\n    provider: string;\n    githubAccessToken: string;\n    newOrExistingRepo: \"newRepo\" | \"existingRepo\";\n    newRepoName: string;\n    newRepoOrgName: string;\n    newRepoPrivacyType: \"public\" | \"private\";\n    existingRepo: {\n        name: string;\n        owner: string;\n    };\n}\n\nlet octokit: Octokit;\nlet user: Await<ReturnType<typeof octokit.rest.users.getAuthenticated>>[\"data\"];\nlet repo: Await<ReturnType<typeof octokit.rest.repos.createForAuthenticatedUser>>[\"data\"];\n\nconst NEW_TOKEN_URL =\n    \"https://github.com/settings/tokens/new?scopes=repo,workflow&description=webiny-cicd-token\";\n\nconst LONG_LIVED_BRANCHES = [\"dev\", \"staging\", \"prod\"];\n\nlet generateErrorsCount = 0;\n\nconst plugin: CliPluginsScaffoldCi<Input> = {\n    type: \"cli-plugin-scaffold-ci\",\n    name: \"cli-plugin-scaffold-ci-github\",\n    provider: \"githubActions\",\n    questions: () => {\n        return [\n            {\n                name: \"githubAccessTokenCreate\",\n                message: () => {\n                    return `In order to proceed, you will need a GitHub personal access token. Do you want to create a new one?`;\n                },\n                type: \"list\",\n                default: true,\n                choices: async () => {\n                    return [\n                        {\n                            name: \"No, I already have my GitHub personal access token\",\n                            value: false\n                        },\n                        {\n                            name: \"Yes, I want to create a new GitHub personal access token\",\n                            value: true\n                        }\n                    ];\n                }\n            },\n            {\n                name: \"githubAccessToken\",\n                type: \"password\",\n                message: () => {\n                    return `Your GitHub personal access token:`;\n                },\n                required: true,\n                when: answers => {\n                    answers.githubAccessTokenCreate && open(NEW_TOKEN_URL);\n                    return true;\n                },\n                validate: async answer => {\n                    octokit = new Octokit({ auth: answer });\n\n                    try {\n                        user = await octokit.rest.users.getAuthenticated().then(({ data }) => data);\n                    } catch (e) {\n                        return \"Invalid GitHub personal access token provided.\";\n                    }\n\n                    return true;\n                }\n            },\n            {\n                name: \"newOrExistingRepo\",\n                message: `Would you like to create a new code repository or select an existing one?`,\n                type: \"list\",\n                default: \"newRepo\",\n                choices: [\n                    { name: \"Create a new repository\", value: \"newRepo\" },\n                    { name: \"Choose existing repository\", value: \"existingRepo\" }\n                ]\n            },\n\n            {\n                name: \"newRepoOrgName\",\n                when: answers => answers.newOrExistingRepo === \"newRepo\",\n                message:\n                    \"Select an organization within which the new repository will be created (optional):\",\n                type: \"list\",\n                default: null,\n                choices: async () => {\n                    const organizations = await octokit.rest.orgs.listForAuthenticatedUser();\n                    return [\n                        { name: \"Create within my own account\", value: null },\n                        { type: \"separator\" },\n                        ...organizations.data.map(item => item.login)\n                    ];\n                }\n            },\n            {\n                name: \"newRepoName\",\n                message: `Enter your code repository name:`,\n                required: true,\n                when: answers => answers.newOrExistingRepo === \"newRepo\",\n                validate: async (answer, answers) => {\n                    const repositories = await fetchAllRepositories({ octokit });\n                    for (let i = 0; i < repositories.length; i++) {\n                        const repository = repositories[i];\n                        const owner = answers.newRepoOrgName || user.login;\n                        if (repository.name === answer && repository.owner.login === owner) {\n                            return \"A code repository with given name already exists.\";\n                        }\n                    }\n\n                    if (!validateNpmPackageName(answer).validForNewPackages) {\n                        return \"An invalid repository name provided.\";\n                    }\n                    return true;\n                }\n            },\n            {\n                name: \"newRepoPrivacyType\",\n                message: \"Please select the type of code repository to create:\",\n                when: answers => answers.newOrExistingRepo === \"newRepo\",\n                type: \"list\",\n                default: \"private\",\n                choices: [\n                    { name: \"Public\", value: \"public\" },\n                    { name: \"Private\", value: \"private\" }\n                ]\n            },\n            {\n                name: \"existingRepo\",\n                message: \"Please select your code repository:\",\n                when: answers => answers.newOrExistingRepo === \"existingRepo\",\n                type: \"list\",\n                choices: async () => {\n                    return fetchAllRepositories({ octokit }).then(repositories =>\n                        repositories.map(repository => ({\n                            name: repository.full_name,\n                            value: {\n                                name: repository.name,\n                                owner: repository.owner.login\n                            }\n                        }))\n                    );\n                }\n            }\n        ];\n    },\n    onGenerate: async ({ input, inquirer }) => {\n        const { newRepoName, newRepoOrgName, existingRepo, newRepoPrivacyType } = input;\n        const prompt = inquirer.createPromptModule();\n\n        console.log();\n        console.log(`${chalk.bold(\"The following operations will be performed on your behalf:\")}`);\n\n        // 1. Create a new repo or get existing.\n        if (newRepoName) {\n            let message = `- create a new ${chalk.green(\n                input.newRepoName\n            )} ${newRepoPrivacyType} code repository`;\n\n            if (newRepoOrgName) {\n                message += ` (within ${chalk.green(newRepoOrgName)} organization)`;\n            }\n\n            console.log(message);\n        } else {\n            console.log(\n                `- select existing ${chalk.green(\n                    existingRepo.name\n                )} code repository (owned by ${chalk.green(existingRepo.owner)})`\n            );\n        }\n\n        console.log(\n            `- push GitHub actions workflow files (located in ${chalk.green(\".github/workflows\")})`\n        );\n        console.log(\n            `- create protected ${chalk.green(\"dev\")}, ${chalk.green(\"staging\")}, and ${chalk.green(\n                \"prod\"\n            )} branches`\n        );\n\n        console.log(`- set ${chalk.green(\"dev\")} as the default branch`);\n\n        console.log(\n            `- create ${chalk.green(\"pr\")}, ${chalk.green(\"dev\")}, ${chalk.green(\n                \"staging\"\n            )}, and ${chalk.green(\"prod\")} code repository environments`\n        );\n\n        const { proceed } = await prompt({\n            name: \"proceed\",\n            message: `Are you sure you want to continue?`,\n            type: \"confirm\",\n            default: false\n        });\n\n        if (!proceed) {\n            process.exit(0);\n        }\n        console.log();\n    },\n    generate: async ({ input, ora }) => {\n        const { newRepoName, newRepoOrgName, existingRepo, newRepoPrivacyType } = input;\n\n        // 1. Create a new repo or get existing.\n        if (newRepoName) {\n            ora.start(`Creating ${chalk.green(newRepoName)} code repository...`);\n\n            if (newRepoOrgName) {\n                repo = await octokit.rest.repos\n                    .createInOrg({\n                        org: newRepoOrgName,\n                        name: newRepoName,\n                        private: newRepoPrivacyType === \"private\"\n                    })\n                    .then(response => response.data);\n            } else {\n                repo = await octokit.rest.repos\n                    .createForAuthenticatedUser({\n                        name: newRepoName,\n                        private: newRepoPrivacyType === \"private\"\n                    })\n                    .then(response => response.data);\n            }\n\n            ora.stopAndPersist({\n                symbol: chalk.green(\"✔\"),\n                text: `${chalk.green(newRepoName)} code repository created.`\n            });\n        } else {\n            repo = await octokit.rest.repos\n                .get({\n                    repo: existingRepo.name,\n                    owner: existingRepo.owner\n                })\n                .then(response => response.data);\n        }\n\n        // 2. Let's commit GitHub Actions workflows.\n        ora.start(`Creating GitHub Actions workflows...`);\n        try {\n            await commitWorkflows({\n                octokit,\n                owner: repo.owner.login,\n                repo: repo.name,\n                branch: repo.default_branch,\n                author: {\n                    name: user.name,\n                    email: user.email\n                }\n            });\n\n            ora.stopAndPersist({\n                symbol: chalk.green(\"✔\"),\n                text: `GitHub Actions workflows created.`\n            });\n        } catch (e) {\n            generateErrorsCount++;\n            ora.stopAndPersist({\n                symbol: chalk.red(\"✘\"),\n                text: `Creation of GitHub Actions workflows failed with the following message: ${e.message}`\n            });\n        }\n\n        // 3. Create protected (long-lived) branches.\n        ora.start(\n            `Creating long-lived ${chalk.green(\"dev\")}, ${chalk.green(\n                \"staging\"\n            )}, and ${chalk.green(\"prod\")} branches...`\n        );\n\n        try {\n            const latestCommitSha = await octokit.rest.git\n                .getRef({\n                    owner: repo.owner.login,\n                    repo: repo.name,\n                    ref: `heads/${repo.default_branch}`\n                })\n                .then(({ data }) => data.object.sha);\n\n            for (let i = 0; i < LONG_LIVED_BRANCHES.length; i++) {\n                const longLivedBranch = LONG_LIVED_BRANCHES[i];\n                await octokit.rest.git.createRef({\n                    owner: repo.owner.login,\n                    repo: repo.name,\n                    ref: `refs/heads/${longLivedBranch}`,\n                    sha: latestCommitSha\n                });\n            }\n\n            ora.stopAndPersist({\n                symbol: chalk.green(\"✔\"),\n                text: `Long-lived ${chalk.green(\"dev\")}, ${chalk.green(\n                    \"staging\"\n                )}, and ${chalk.green(\"prod\")} branches created.`\n            });\n        } catch (e) {\n            generateErrorsCount++;\n            ora.stopAndPersist({\n                symbol: chalk.red(\"✘\"),\n                text: `Creation of long-lived ${chalk.green(\"dev\")}, ${chalk.green(\n                    \"staging\"\n                )}, and ${chalk.green(\"prod\")} branches failed with the following message: ${\n                    e.message\n                }`\n            });\n        }\n\n        // 4. Protecting branches...\n        ora.start(`Enabling protection for created long-lived branches...`);\n\n        try {\n            for (let i = 0; i < LONG_LIVED_BRANCHES.length; i++) {\n                const longLivedBranch = LONG_LIVED_BRANCHES[i];\n                await octokit.rest.repos.updateBranchProtection({\n                    owner: repo.owner.login,\n                    repo: repo.name,\n                    branch: longLivedBranch,\n                    allow_force_pushes: false,\n                    allow_deletions: false,\n                    enforce_admins: null,\n                    required_pull_request_reviews: null,\n                    restrictions: null,\n                    required_status_checks: {\n                        strict: true,\n                        contexts: []\n                    }\n                });\n            }\n\n            ora.stopAndPersist({\n                symbol: chalk.green(\"✔\"),\n                text: `Protection enabled for created long-lived branches.`\n            });\n        } catch (e) {\n            generateErrorsCount++;\n            ora.stopAndPersist({\n                symbol: chalk.red(\"✘\"),\n                text: `Enabling protection for long-lived branches failed with the following message: ${e.message}`\n            });\n        }\n\n        // 5. Make \"dev\" branch the default one.\n        ora.start(`Setting ${chalk.green(\"dev\")} as the default branch.`);\n\n        try {\n            await octokit.rest.repos.update({\n                owner: repo.owner.login,\n                repo: repo.name,\n                branch: repo.default_branch,\n                default_branch: \"dev\"\n            });\n\n            ora.stopAndPersist({\n                symbol: chalk.green(\"✔\"),\n                text: `Set ${chalk.green(\"dev\")} as the default branch.`\n            });\n        } catch (e) {\n            generateErrorsCount++;\n            ora.stopAndPersist({\n                symbol: chalk.red(\"✘\"),\n                text: `Setting ${chalk.green(\n                    \"dev\"\n                )} as the default branch failed with the following message: ${e.message}`\n            });\n        }\n\n        // 6. Create code repository environments\n\n        ora.start(\n            `Creating ${chalk.green(\"pr\")}, ${chalk.green(\"dev\")}, ${chalk.green(\n                \"staging\"\n            )}, and ${chalk.green(\"prod\")} code repository environments...`\n        );\n\n        const REPOSITORY_ENVIRONMENTS = [\"pr\", ...LONG_LIVED_BRANCHES];\n\n        try {\n            for (let i = 0; i < REPOSITORY_ENVIRONMENTS.length; i++) {\n                const env = REPOSITORY_ENVIRONMENTS[i];\n                await octokit.rest.repos.createOrUpdateEnvironment({\n                    owner: repo.owner.login,\n                    repo: repo.name,\n                    environment_name: env,\n                    reviewers: [{ type: \"User\", id: user.id }],\n                    deployment_branch_policy: null\n                });\n            }\n\n            ora.stopAndPersist({\n                symbol: chalk.green(\"✔\"),\n                text: `${chalk.green(\"pr\")}, ${chalk.green(\"dev\")}, ${chalk.green(\n                    \"staging\"\n                )}, and ${chalk.green(\"prod\")} code repository environments created.`\n            });\n        } catch (e) {\n            generateErrorsCount++;\n            ora.stopAndPersist({\n                symbol: chalk.red(\"✘\"),\n                text: `Creation of ${chalk.green(\"pr\")}, ${chalk.green(\"dev\")}, ${chalk.green(\n                    \"staging\"\n                )}, and ${chalk.green(\n                    \"prod\"\n                )} code repository environments failed with the following message: ${e.message}`\n            });\n        }\n    },\n    onSuccess: async () => {\n        console.log();\n\n        if (generateErrorsCount) {\n            console.log(\n                `${chalk.yellow(\"✔\")} CI/CD partially set up (total errors: ${chalk.yellow(\n                    generateErrorsCount\n                )}).`\n            );\n        } else {\n            console.log(`${chalk.green(\"✔\")} CI/CD pipeline successfully set up.`);\n        }\n\n        console.log();\n\n        console.log(`Check out the created code repository here:`);\n        console.log(repo.html_url);\n        console.log();\n\n        const url = \"https://www.webiny.com/docs/how-to-guides/scaffolding/ci-cd#next-steps\";\n        console.log(`For next steps, please open the following link:`);\n        console.log(url);\n        console.log();\n\n        // On errors, let's not automatically open next steps. Let's let the\n        // user see what were the errors. He can still go to next steps because\n        // the link is displayed on the screen in any case.\n        generateErrorsCount === 0 && open(url);\n    }\n};\n\nexport default plugin;\n"],"file":"index.js"}