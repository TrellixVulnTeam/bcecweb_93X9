{"version":3,"sources":["../../src/plugins/PagePlugin.ts"],"names":["PagePlugin","Plugin","constructor","config","_config","beforeCreate","params","_execute","afterCreate","beforeUpdate","afterUpdate","afterDelete","beforeDelete","beforePublish","afterPublish","beforeUnpublish","afterUnpublish","notFound","callback"],"mappings":";;;;;;;;;;;AAAA;;AAoEO,MAAMA,UAAN,SAAoDC,eAApD,CAA2D;AAI9DC,EAAAA,WAAW,CAACC,MAAD,EAAyB;AAChC;AADgC;AAEhC,SAAKC,OAAL,GAAeD,MAAM,IAAI,EAAzB;AACH;;AAEDE,EAAAA,YAAY,CAACC,MAAD,EAA6C;AACrD,WAAO,KAAKC,QAAL,CAAc,cAAd,EAA8BD,MAA9B,CAAP;AACH;;AAEDE,EAAAA,WAAW,CAACF,MAAD,EAA6C;AACpD,WAAO,KAAKC,QAAL,CAAc,aAAd,EAA6BD,MAA7B,CAAP;AACH;;AAEDG,EAAAA,YAAY,CAACH,MAAD,EAA0D;AAClE,WAAO,KAAKC,QAAL,CAAc,cAAd,EAA8BD,MAA9B,CAAP;AACH;;AAEDI,EAAAA,WAAW,CAACJ,MAAD,EAAyD;AAChE,WAAO,KAAKC,QAAL,CAAc,aAAd,EAA6BD,MAA7B,CAAP;AACH;;AAEDK,EAAAA,WAAW,CAACL,MAAD,EAAoD;AAC3D,WAAO,KAAKC,QAAL,CAAc,aAAd,EAA6BD,MAA7B,CAAP;AACH;;AAEDM,EAAAA,YAAY,CAACN,MAAD,EAAoD;AAC5D,WAAO,KAAKC,QAAL,CAAc,cAAd,EAA8BD,MAA9B,CAAP;AACH;;AAEDO,EAAAA,aAAa,CAACP,MAAD,EAAqD;AAC9D,WAAO,KAAKC,QAAL,CAAc,eAAd,EAA+BD,MAA/B,CAAP;AACH;;AAEDQ,EAAAA,YAAY,CAACR,MAAD,EAAqD;AAC7D,WAAO,KAAKC,QAAL,CAAc,cAAd,EAA8BD,MAA9B,CAAP;AACH;;AAEDS,EAAAA,eAAe,CAACT,MAAD,EAAuD;AAClE,WAAO,KAAKC,QAAL,CAAc,iBAAd,EAAiCD,MAAjC,CAAP;AACH;;AAEDU,EAAAA,cAAc,CAACV,MAAD,EAAuD;AACjE,WAAO,KAAKC,QAAL,CAAc,gBAAd,EAAgCD,MAAhC,CAAP;AACH;;AAEDW,EAAAA,QAAQ,CAACX,MAAD,EAAoD;AACxD,WAAO,KAAKC,QAAL,CAAc,UAAd,EAA0BD,MAA1B,CAAP;AACH;;AAEOC,EAAAA,QAAQ,CAACW,QAAD,EAAWZ,MAAX,EAAmB;AAC/B,QAAI,OAAO,KAAKF,OAAL,CAAac,QAAb,CAAP,KAAkC,UAAtC,EAAkD;AAC9C,aAAO,KAAKd,OAAL,CAAac,QAAb,EAAuBZ,MAAvB,CAAP;AACH;AACJ;;AAzD6D;;;8BAArDN,U,UACqB,S","sourcesContent":["import { Plugin } from \"@webiny/plugins\";\nimport { Page, PbContext } from \"~/types\";\n\nexport type CallbackFunction<TParams> = (params: TParams) => void | Promise<void>;\n\nexport interface UpdateInput {\n    // TODO: add fields from GraphQL\n    [key: string]: any;\n}\n\nexport interface CreateParams {\n    context: PbContext;\n    page: Page;\n}\n\nexport interface BeforeUpdateParams<TPage> {\n    context: PbContext;\n    existingPage: TPage;\n    inputData: UpdateInput;\n    updateData: Partial<TPage>;\n}\n\nexport interface AfterUpdateParams<TPage> {\n    context: PbContext;\n    page: TPage;\n    inputData: UpdateInput;\n}\n\nexport interface DeleteParams<TPage> {\n    context: PbContext;\n    page: TPage;\n    // TODO: @doitadrian - we need to get rid of these two parameters below as they're very DDB specific\n    latestPage: TPage;\n    publishedPage?: TPage;\n}\n\nexport interface PublishParams<TPage> {\n    context: PbContext;\n    page: TPage;\n    // TODO: @doitadrian - we need to get rid of these two parameters below as they're very DDB specific\n    latestPage: TPage;\n    publishedPage?: TPage;\n}\n\nexport interface UnpublishParams<TPage> {\n    context: PbContext;\n    page: TPage;\n}\n\nexport interface NotFoundParams {\n    context: PbContext;\n    args: Record<string, any>;\n}\n\ninterface Config<TPage extends Page = Page> {\n    beforeCreate?: CallbackFunction<CreateParams>;\n    afterCreate?: CallbackFunction<CreateParams>;\n    beforeUpdate?: CallbackFunction<BeforeUpdateParams<TPage>>;\n    afterUpdate?: CallbackFunction<AfterUpdateParams<TPage>>;\n    beforeDelete?: CallbackFunction<DeleteParams<TPage>>;\n    afterDelete?: CallbackFunction<DeleteParams<TPage>>;\n    beforePublish?: CallbackFunction<PublishParams<TPage>>;\n    afterPublish?: CallbackFunction<PublishParams<TPage>>;\n    beforeUnpublish?: CallbackFunction<UnpublishParams<TPage>>;\n    afterUnpublish?: CallbackFunction<UnpublishParams<TPage>>;\n    notFound?: (params: NotFoundParams) => Promise<TPage | undefined>;\n}\n\nexport class PagePlugin<TPage extends Page = Page> extends Plugin {\n    public static readonly type = \"pb.page\";\n    private _config: Config<TPage>;\n\n    constructor(config?: Config<TPage>) {\n        super();\n        this._config = config || {};\n    }\n\n    beforeCreate(params: CreateParams): void | Promise<void> {\n        return this._execute(\"beforeCreate\", params);\n    }\n\n    afterCreate(params: CreateParams): void | Promise<void> {\n        return this._execute(\"afterCreate\", params);\n    }\n\n    beforeUpdate(params: BeforeUpdateParams<TPage>): void | Promise<void> {\n        return this._execute(\"beforeUpdate\", params);\n    }\n\n    afterUpdate(params: AfterUpdateParams<TPage>): void | Promise<void> {\n        return this._execute(\"afterUpdate\", params);\n    }\n\n    afterDelete(params: DeleteParams<TPage>): void | Promise<void> {\n        return this._execute(\"afterDelete\", params);\n    }\n\n    beforeDelete(params: DeleteParams<TPage>): void | Promise<void> {\n        return this._execute(\"beforeDelete\", params);\n    }\n\n    beforePublish(params: PublishParams<TPage>): void | Promise<void> {\n        return this._execute(\"beforePublish\", params);\n    }\n\n    afterPublish(params: PublishParams<TPage>): void | Promise<void> {\n        return this._execute(\"afterPublish\", params);\n    }\n\n    beforeUnpublish(params: UnpublishParams<TPage>): void | Promise<void> {\n        return this._execute(\"beforeUnpublish\", params);\n    }\n\n    afterUnpublish(params: UnpublishParams<TPage>): void | Promise<void> {\n        return this._execute(\"afterUnpublish\", params);\n    }\n\n    notFound(params: NotFoundParams): Promise<Page | undefined> {\n        return this._execute(\"notFound\", params);\n    }\n\n    private _execute(callback, params) {\n        if (typeof this._config[callback] === \"function\") {\n            return this._config[callback](params);\n        }\n    }\n}\n"],"file":"PagePlugin.js"}