import { Plugin } from "@webiny/plugins";
import { DefaultSettings, Page, PageSpecialType, PbContext } from "../types";
export declare type CallbackFunction<TParams> = (params: TParams) => void | Promise<void>;
declare type PreviousSettings = DefaultSettings;
declare type NextSettings = DefaultSettings;
interface UpdateParams {
    context: PbContext;
    previousSettings: PreviousSettings;
    nextSettings: NextSettings;
    meta: {
        diff: {
            pages: Array<[PageSpecialType, string, string, Page]>;
        };
    };
}
interface Config {
    beforeUpdate?: CallbackFunction<UpdateParams>;
    afterUpdate?: CallbackFunction<UpdateParams>;
}
export declare class SettingsPlugin extends Plugin {
    static readonly type = "pb.settings";
    private _config;
    constructor(config?: Config);
    beforeUpdate(params: UpdateParams): void | Promise<void>;
    afterUpdate(params: UpdateParams): void | Promise<void>;
    private _execute;
}
export {};
