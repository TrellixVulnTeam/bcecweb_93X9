import { Plugin } from "@webiny/plugins";
import { Page, PbContext } from "../types";
export declare type CallbackFunction<TParams> = (params: TParams) => void | Promise<void>;
export interface UpdateInput {
    [key: string]: any;
}
export interface CreateParams {
    context: PbContext;
    page: Page;
}
export interface BeforeUpdateParams<TPage> {
    context: PbContext;
    existingPage: TPage;
    inputData: UpdateInput;
    updateData: Partial<TPage>;
}
export interface AfterUpdateParams<TPage> {
    context: PbContext;
    page: TPage;
    inputData: UpdateInput;
}
export interface DeleteParams<TPage> {
    context: PbContext;
    page: TPage;
    latestPage: TPage;
    publishedPage?: TPage;
}
export interface PublishParams<TPage> {
    context: PbContext;
    page: TPage;
    latestPage: TPage;
    publishedPage?: TPage;
}
export interface UnpublishParams<TPage> {
    context: PbContext;
    page: TPage;
}
export interface NotFoundParams {
    context: PbContext;
    args: Record<string, any>;
}
interface Config<TPage extends Page = Page> {
    beforeCreate?: CallbackFunction<CreateParams>;
    afterCreate?: CallbackFunction<CreateParams>;
    beforeUpdate?: CallbackFunction<BeforeUpdateParams<TPage>>;
    afterUpdate?: CallbackFunction<AfterUpdateParams<TPage>>;
    beforeDelete?: CallbackFunction<DeleteParams<TPage>>;
    afterDelete?: CallbackFunction<DeleteParams<TPage>>;
    beforePublish?: CallbackFunction<PublishParams<TPage>>;
    afterPublish?: CallbackFunction<PublishParams<TPage>>;
    beforeUnpublish?: CallbackFunction<UnpublishParams<TPage>>;
    afterUnpublish?: CallbackFunction<UnpublishParams<TPage>>;
    notFound?: (params: NotFoundParams) => Promise<TPage | undefined>;
}
export declare class PagePlugin<TPage extends Page = Page> extends Plugin {
    static readonly type = "pb.page";
    private _config;
    constructor(config?: Config<TPage>);
    beforeCreate(params: CreateParams): void | Promise<void>;
    afterCreate(params: CreateParams): void | Promise<void>;
    beforeUpdate(params: BeforeUpdateParams<TPage>): void | Promise<void>;
    afterUpdate(params: AfterUpdateParams<TPage>): void | Promise<void>;
    afterDelete(params: DeleteParams<TPage>): void | Promise<void>;
    beforeDelete(params: DeleteParams<TPage>): void | Promise<void>;
    beforePublish(params: PublishParams<TPage>): void | Promise<void>;
    afterPublish(params: PublishParams<TPage>): void | Promise<void>;
    beforeUnpublish(params: UnpublishParams<TPage>): void | Promise<void>;
    afterUnpublish(params: UnpublishParams<TPage>): void | Promise<void>;
    notFound(params: NotFoundParams): Promise<Page | undefined>;
    private _execute;
}
export {};
