import { Plugin } from "@webiny/plugins";
import { Menu, PbContext } from "../types";
export declare type CallbackFunction<TParams> = (params: TParams) => void | Promise<void>;
interface MenuParams {
    context: PbContext;
    menu: Menu;
}
interface Config {
    beforeCreate?: CallbackFunction<MenuParams>;
    afterCreate?: CallbackFunction<MenuParams>;
    beforeUpdate?: CallbackFunction<MenuParams>;
    afterUpdate?: CallbackFunction<MenuParams>;
    beforeDelete?: CallbackFunction<MenuParams>;
    afterDelete?: CallbackFunction<MenuParams>;
}
export declare class MenuPlugin extends Plugin {
    static readonly type = "pb.menu";
    private _config;
    constructor(config?: Config);
    beforeCreate(params: MenuParams): void | Promise<void>;
    afterCreate(params: MenuParams): void | Promise<void>;
    beforeUpdate(params: MenuParams): void | Promise<void>;
    afterUpdate(params: MenuParams): void | Promise<void>;
    beforeDelete(params: MenuParams): void | Promise<void>;
    afterDelete(params: MenuParams): void | Promise<void>;
    private _execute;
}
export {};
