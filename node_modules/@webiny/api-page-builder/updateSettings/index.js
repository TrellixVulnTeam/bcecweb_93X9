"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _DefaultSettings = _interopRequireDefault(require("../utils/models/DefaultSettings.model"));

var _defaults = _interopRequireDefault(require("../utils/defaults"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const PK = "PB#SETTINGS";
const SK = "default";
/**
 * Updates system default settings, for all tenants and all locales. Of course, these values can later be overridden
 * via the settings UI in the Admin app. But it's with these settings that every new tenant / locale will start off.
 */

var _default = () => ({
  type: "handler",

  async handle(context) {
    try {
      const {
        invocationArgs: args,
        db
      } = context;
      let [[existingSettingsData]] = await db.read(_objectSpread(_objectSpread({}, _defaults.default.db), {}, {
        query: {
          PK,
          SK
        }
      }));

      if (!existingSettingsData) {
        await db.create(_objectSpread(_objectSpread({}, _defaults.default.db), {}, {
          data: {
            PK,
            SK,
            TYPE: "default",
            tenant: null,
            locale: null
          }
        }));
        existingSettingsData = {};
      }

      const defaultSettingModel = new _DefaultSettings.default();
      defaultSettingModel.populate(existingSettingsData).populate(args.data);
      await defaultSettingModel.validate();
      const updateSettingsData = await defaultSettingModel.toJSON();
      await db.update(_objectSpread(_objectSpread({}, _defaults.default.db), {}, {
        query: {
          PK,
          SK
        },
        data: updateSettingsData
      }));
      return {
        data: updateSettingsData,
        error: null
      };
    } catch (e) {
      return {
        data: null,
        error: {
          message: e.message
        }
      };
    }
  }

});

exports.default = _default;
//# sourceMappingURL=index.js.map