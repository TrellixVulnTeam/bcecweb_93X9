{"version":3,"sources":["../../src/updateSettings/index.ts"],"names":["PK","SK","type","handle","context","invocationArgs","args","db","existingSettingsData","read","defaults","query","create","data","TYPE","tenant","locale","defaultSettingModel","DefaultSettingsModel","populate","validate","updateSettingsData","toJSON","update","error","e","message"],"mappings":";;;;;;;;;;;AAGA;;AACA;;;;;;AAcA,MAAMA,EAAE,GAAG,aAAX;AACA,MAAMC,EAAE,GAAG,SAAX;AAEA;AACA;AACA;AACA;;eACe,OAA2D;AACtEC,EAAAA,IAAI,EAAE,SADgE;;AAEtE,QAAMC,MAAN,CAAaC,OAAb,EAAgD;AAC5C,QAAI;AACA,YAAM;AAAEC,QAAAA,cAAc,EAAEC,IAAlB;AAAwBC,QAAAA;AAAxB,UAA+BH,OAArC;AACA,UAAI,CAAC,CAACI,oBAAD,CAAD,IAA2B,MAAMD,EAAE,CAACE,IAAH,iCAC9BC,kBAASH,EADqB;AAEjCI,QAAAA,KAAK,EAAE;AAAEX,UAAAA,EAAF;AAAMC,UAAAA;AAAN;AAF0B,SAArC;;AAKA,UAAI,CAACO,oBAAL,EAA2B;AACvB,cAAMD,EAAE,CAACK,MAAH,iCACCF,kBAASH,EADV;AAEFM,UAAAA,IAAI,EAAE;AAAEb,YAAAA,EAAF;AAAMC,YAAAA,EAAN;AAAUa,YAAAA,IAAI,EAAE,SAAhB;AAA2BC,YAAAA,MAAM,EAAE,IAAnC;AAAyCC,YAAAA,MAAM,EAAE;AAAjD;AAFJ,WAAN;AAKAR,QAAAA,oBAAoB,GAAG,EAAvB;AACH;;AAED,YAAMS,mBAAmB,GAAG,IAAIC,wBAAJ,EAA5B;AACAD,MAAAA,mBAAmB,CAACE,QAApB,CAA6BX,oBAA7B,EAAmDW,QAAnD,CAA4Db,IAAI,CAACO,IAAjE;AAEA,YAAMI,mBAAmB,CAACG,QAApB,EAAN;AAEA,YAAMC,kBAAkB,GAAG,MAAMJ,mBAAmB,CAACK,MAApB,EAAjC;AACA,YAAMf,EAAE,CAACgB,MAAH,iCAAeb,kBAASH,EAAxB;AAA4BI,QAAAA,KAAK,EAAE;AAAEX,UAAAA,EAAF;AAAMC,UAAAA;AAAN,SAAnC;AAA+CY,QAAAA,IAAI,EAAEQ;AAArD,SAAN;AAEA,aAAO;AAAER,QAAAA,IAAI,EAAEQ,kBAAR;AAA4BG,QAAAA,KAAK,EAAE;AAAnC,OAAP;AACH,KAzBD,CAyBE,OAAOC,CAAP,EAAU;AACR,aAAO;AACHZ,QAAAA,IAAI,EAAE,IADH;AAEHW,QAAAA,KAAK,EAAE;AACHE,UAAAA,OAAO,EAAED,CAAC,CAACC;AADR;AAFJ,OAAP;AAMH;AACJ;;AApCqE,CAA3D,C","sourcesContent":["import { HandlerPlugin } from \"@webiny/handler/types\";\nimport { ArgsContext } from \"@webiny/handler-args/types\";\nimport { DbContext } from \"@webiny/handler-db/types\";\nimport DefaultSettingsModel from \"../utils/models/DefaultSettings.model\";\nimport defaults from \"../utils/defaults\";\nimport { DefaultSettings } from \"../types\";\n\nexport type HandlerArgs = {\n    data: DefaultSettings;\n};\n\nexport type HandlerResponse = {\n    data: DefaultSettings;\n    error: {\n        message: string;\n    };\n};\n\nconst PK = \"PB#SETTINGS\";\nconst SK = \"default\";\n\n/**\n * Updates system default settings, for all tenants and all locales. Of course, these values can later be overridden\n * via the settings UI in the Admin app. But it's with these settings that every new tenant / locale will start off.\n */\nexport default (): HandlerPlugin<DbContext, ArgsContext<HandlerArgs>> => ({\n    type: \"handler\",\n    async handle(context): Promise<HandlerResponse> {\n        try {\n            const { invocationArgs: args, db } = context;\n            let [[existingSettingsData]] = await db.read({\n                ...defaults.db,\n                query: { PK, SK }\n            });\n\n            if (!existingSettingsData) {\n                await db.create({\n                    ...defaults.db,\n                    data: { PK, SK, TYPE: \"default\", tenant: null, locale: null }\n                });\n\n                existingSettingsData = {};\n            }\n\n            const defaultSettingModel = new DefaultSettingsModel();\n            defaultSettingModel.populate(existingSettingsData).populate(args.data);\n\n            await defaultSettingModel.validate();\n\n            const updateSettingsData = await defaultSettingModel.toJSON();\n            await db.update({ ...defaults.db, query: { PK, SK }, data: updateSettingsData });\n\n            return { data: updateSettingsData, error: null };\n        } catch (e) {\n            return {\n                data: null,\n                error: {\n                    message: e.message\n                }\n            };\n        }\n    }\n});\n"],"file":"index.js"}