"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _responses = require("@webiny/handler-graphql/responses");

const resolve = async fn => {
  try {
    return new _responses.Response(await fn());
  } catch (e) {
    return new _responses.ErrorResponse(e);
  }
};

const plugin = {
  type: "graphql-schema",
  schema: {
    typeDefs:
    /* GraphQL */
    `
            type PbCategory {
                createdOn: DateTime
                createdBy: PbCreatedBy
                name: String
                slug: String
                url: String
                layout: String
            }

            input PbCategoryInput {
                name: String!
                slug: String!
                url: String!
                layout: String!
            }

            # Response types
            type PbCategoryResponse {
                data: PbCategory
                error: PbError
            }

            type PbCategoryListResponse {
                data: [PbCategory]
                error: PbError
            }

            extend type PbQuery {
                getCategory(slug: String!): PbCategoryResponse
                listCategories: PbCategoryListResponse

                "Returns category by given slug."
                getCategoryBySlug(slug: String!): PbCategoryResponse
            }

            extend type PbMutation {
                createCategory(data: PbCategoryInput!): PbCategoryResponse
                updateCategory(slug: String!, data: PbCategoryInput!): PbCategoryResponse
                deleteCategory(slug: String!): PbCategoryResponse
            }
        `,
    resolvers: {
      PbQuery: {
        getCategory: async (_, args, context) => {
          return resolve(() => {
            return context.pageBuilder.categories.get(args.slug);
          });
        },
        listCategories: async (_, args, context) => {
          return resolve(() => context.pageBuilder.categories.list());
        }
      },
      PbMutation: {
        createCategory: async (_, args, context) => {
          return resolve(() => {
            return context.pageBuilder.categories.create(args.data);
          });
        },
        updateCategory: async (_, args, context) => {
          return resolve(() => {
            return context.pageBuilder.categories.update(args.slug, args.data);
          });
        },
        deleteCategory: async (_, args, context) => {
          return resolve(() => {
            return context.pageBuilder.categories.delete(args.slug);
          });
        }
      }
    }
  }
};
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=categories.gql.js.map