"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _resolve = _interopRequireDefault(require("./utils/resolve"));

const plugin = {
  type: "graphql-schema",
  schema: {
    typeDefs:
    /* GraphQL */
    `
            type PbPageElement {
                id: ID
                createdOn: DateTime
                createdBy: PbCreatedBy
                name: String
                category: String
                type: String
                content: JSON
                preview: JSON
            }

            input PbPageElementInput {
                id: ID
                name: String
                type: String
                category: String
                content: JSON
                preview: JSON
            }

            # Response types
            type PbPageElementResponse {
                data: PbPageElement
                error: PbError
            }

            type PbPageElementListResponse {
                data: [PbPageElement]
                error: PbError
            }

            extend type PbQuery {
                listPageElements: PbPageElementListResponse
                getPageElement(id: ID!): PbPageElementResponse
            }

            extend type PbMutation {
                createPageElement(data: PbPageElementInput!): PbPageElementResponse
                updatePageElement(id: ID!, data: PbPageElementInput!): PbPageElementResponse
                deletePageElement(id: ID!): PbPageElementResponse
            }
        `,
    resolvers: {
      PbQuery: {
        getPageElement: async (_, args, context) => {
          return (0, _resolve.default)(() => {
            return context.pageBuilder.pageElements.get(args.id);
          });
        },
        listPageElements: async (_, args, context) => {
          return (0, _resolve.default)(() => {
            return context.pageBuilder.pageElements.list();
          });
        }
      },
      PbMutation: {
        createPageElement: async (_, args, context) => {
          return (0, _resolve.default)(() => {
            return context.pageBuilder.pageElements.create(args.data);
          });
        },
        updatePageElement: async (_, args, context) => {
          return (0, _resolve.default)(() => {
            return context.pageBuilder.pageElements.update(args.id, args.data);
          });
        },
        deletePageElement: async (_, args, context) => {
          return (0, _resolve.default)(() => {
            return context.pageBuilder.pageElements.delete(args.id);
          });
        }
      }
    }
  }
};
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=pageElements.gql.js.map