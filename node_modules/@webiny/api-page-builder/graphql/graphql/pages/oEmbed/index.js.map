{"version":3,"sources":["../../../../../src/graphql/graphql/pages/oEmbed/index.ts"],"names":["getHostname","url","match","length","providers","providerList","map","item","provider_name","provider_url","endpoints","endpoint","schemes","hostname","domain","replace","filter","findProvider","candidates","provider","includes","some","scheme","reg","RegExp","fetchEmbed","params","link","Object","keys","k","encodeURIComponent","join","json","then","res","source"],"mappings":";;;;;;;;;;;AAAA;;AACA;;;;;;AAEA,MAAMA,WAAW,GAAGC,GAAG,IAAI;AACvB,QAAMC,KAAK,GAAGD,GAAG,CAACC,KAAJ,CAAU,+BAAV,CAAd;;AACA,MAAIA,KAAK,IAAIA,KAAK,CAACC,MAAN,GAAe,CAAxB,IAA6B,OAAOD,KAAK,CAAC,CAAD,CAAZ,KAAoB,QAAjD,IAA6DA,KAAK,CAAC,CAAD,CAAL,CAASC,MAAT,GAAkB,CAAnF,EAAsF;AAClF,WAAOD,KAAK,CAAC,CAAD,CAAZ;AACH;;AACD,SAAO,IAAP;AACH,CAND;;AAmBA,MAAME,SAAS,GAAGC,mBACbC,GADa,CACRC,IAAD,IAAwB;AACzB,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA,YAAjB;AAA+BC,IAAAA;AAA/B,MAA6CH,IAAnD;AAEA,QAAMI,QAAQ,GAAGD,SAAS,CAAC,CAAD,CAA1B;AACA,QAAM;AAAEE,IAAAA,OAAO,GAAG,EAAZ;AAAgBX,IAAAA;AAAhB,MAAwBU,QAA9B;AAEA,QAAME,QAAQ,GAAGb,WAAW,CAACC,GAAD,CAA5B;AACA,QAAMa,MAAM,GAAGD,QAAQ,GAAGA,QAAQ,CAACE,OAAT,CAAiB,MAAjB,EAAyB,EAAzB,CAAH,GAAkC,EAAzD;AACA,SAAO;AAAEP,IAAAA,aAAF;AAAiBC,IAAAA,YAAjB;AAA+BG,IAAAA,OAA/B;AAAwCE,IAAAA,MAAxC;AAAgDb,IAAAA;AAAhD,GAAP;AACH,CAVa,EAWbe,MAXa,CAWNT,IAAI,IAAI;AACZ,SAAOA,IAAI,CAACO,MAAL,KAAgB,EAAvB;AACH,CAba,CAAlB;;AAeO,MAAMG,YAAY,GAAIhB,GAAD,IAAgD;AACxE,QAAMiB,UAAU,GAAGd,SAAS,CAACY,MAAV,CAAiBG,QAAQ,IAAI;AAC5C,UAAM;AAAEP,MAAAA,OAAF;AAAWE,MAAAA;AAAX,QAA2BK,QAAjC;;AACA,QAAI,CAACP,OAAO,CAACT,MAAb,EAAqB;AACjB,aAAOF,GAAG,CAACmB,QAAJ,CAAaN,MAAb,CAAP;AACH;;AACD,WAAOF,OAAO,CAACS,IAAR,CAAaC,MAAM,IAAI;AAC1B,YAAMC,GAAG,GAAG,IAAIC,MAAJ,CAAWF,MAAM,CAACP,OAAP,CAAe,KAAf,EAAsB,MAAtB,CAAX,EAA0C,GAA1C,CAAZ;AACA,aAAOd,GAAG,CAACC,KAAJ,CAAUqB,GAAV,CAAP;AACH,KAHM,CAAP;AAIH,GATkB,CAAnB;AAWA,SAAOL,UAAU,CAACf,MAAX,GAAoB,CAApB,GAAwBe,UAAU,CAAC,CAAD,CAAlC,GAAwC,IAA/C;AACH,CAbM;;;;AAeA,MAAMO,UAAU,GAAG,OACtBC,MADsB,EAEtBP,QAFsB,KAGrB;AACD,QAAMQ,IAAI,GACL,GAAER,QAAQ,CAAClB,GAAI,eAAhB,GACA2B,MAAM,CAACC,IAAP,CAAYH,MAAZ,EACKpB,GADL,CACSwB,CAAC,IAAK,GAAEA,CAAE,IAAGC,kBAAkB,CAACL,MAAM,CAACI,CAAD,CAAP,CAAY,EADpD,EAEKE,IAFL,CAEU,GAFV,CAFJ;AAMA,QAAMC,IAAI,GAAG,MAAM,wBAAMN,IAAN,EAAYO,IAAZ,CAAiBC,GAAG,IAAIA,GAAG,CAACF,IAAJ,EAAxB,CAAnB;AACA,yCAAYA,IAAZ;AAAkBG,IAAAA,MAAM,EAAEV;AAA1B;AACH,CAZM","sourcesContent":["import fetch from \"node-fetch\";\nimport providerList from \"./providers\";\n\nconst getHostname = url => {\n    const match = url.match(/:\\/\\/(www[0-9]?\\.)?(.[^/:]+)/i);\n    if (match && match.length > 2 && typeof match[2] === \"string\" && match[2].length > 0) {\n        return match[2];\n    }\n    return null;\n};\n\ntype ProviderEndpoint = {\n    schemes: any;\n    url: string;\n};\n\ntype ProviderItem = {\n    provider_name: string;\n    provider_url: string;\n    endpoints: ProviderEndpoint[];\n};\n\nconst providers = providerList\n    .map((item: ProviderItem) => {\n        const { provider_name, provider_url, endpoints } = item;\n\n        const endpoint = endpoints[0];\n        const { schemes = [], url } = endpoint;\n\n        const hostname = getHostname(url);\n        const domain = hostname ? hostname.replace(\"www.\", \"\") : \"\";\n        return { provider_name, provider_url, schemes, domain, url };\n    })\n    .filter(item => {\n        return item.domain !== \"\";\n    });\n\nexport const findProvider = (url: string): { [key: string]: any } | null => {\n    const candidates = providers.filter(provider => {\n        const { schemes, domain }: any = provider;\n        if (!schemes.length) {\n            return url.includes(domain);\n        }\n        return schemes.some(scheme => {\n            const reg = new RegExp(scheme.replace(/\\*/g, \"(.*)\"), \"i\");\n            return url.match(reg);\n        });\n    });\n\n    return candidates.length > 0 ? candidates[0] : null;\n};\n\nexport const fetchEmbed = async (\n    params: { [key: string]: any },\n    provider: { [key: string]: any }\n) => {\n    const link =\n        `${provider.url}?format=json&` +\n        Object.keys(params)\n            .map(k => `${k}=${encodeURIComponent(params[k])}`)\n            .join(\"&\");\n\n    const json = await fetch(link).then(res => res.json());\n    return { ...json, source: params };\n};\n"],"file":"index.js"}