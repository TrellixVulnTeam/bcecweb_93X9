"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchEmbed = exports.findProvider = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

var _providers = _interopRequireDefault(require("./providers"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const getHostname = url => {
  const match = url.match(/:\/\/(www[0-9]?\.)?(.[^/:]+)/i);

  if (match && match.length > 2 && typeof match[2] === "string" && match[2].length > 0) {
    return match[2];
  }

  return null;
};

const providers = _providers.default.map(item => {
  const {
    provider_name,
    provider_url,
    endpoints
  } = item;
  const endpoint = endpoints[0];
  const {
    schemes = [],
    url
  } = endpoint;
  const hostname = getHostname(url);
  const domain = hostname ? hostname.replace("www.", "") : "";
  return {
    provider_name,
    provider_url,
    schemes,
    domain,
    url
  };
}).filter(item => {
  return item.domain !== "";
});

const findProvider = url => {
  const candidates = providers.filter(provider => {
    const {
      schemes,
      domain
    } = provider;

    if (!schemes.length) {
      return url.includes(domain);
    }

    return schemes.some(scheme => {
      const reg = new RegExp(scheme.replace(/\*/g, "(.*)"), "i");
      return url.match(reg);
    });
  });
  return candidates.length > 0 ? candidates[0] : null;
};

exports.findProvider = findProvider;

const fetchEmbed = async (params, provider) => {
  const link = `${provider.url}?format=json&` + Object.keys(params).map(k => `${k}=${encodeURIComponent(params[k])}`).join("&");
  const json = await (0, _nodeFetch.default)(link).then(res => res.json());
  return _objectSpread(_objectSpread({}, json), {}, {
    source: params
  });
};

exports.fetchEmbed = fetchEmbed;
//# sourceMappingURL=index.js.map