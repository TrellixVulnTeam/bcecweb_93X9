{"version":3,"sources":["../../../src/graphql/graphql/menus.gql.ts"],"names":["plugin","type","schema","typeDefs","resolvers","PbQuery","getMenu","_","args","context","pageBuilder","menus","get","slug","getPublicMenu","getPublic","listMenus","list","PbMutation","createMenu","create","data","updateMenu","update","deleteMenu","delete"],"mappings":";;;;;;;;;AAEA;;AAEA,MAAMA,MAAsC,GAAG;AAC3CC,EAAAA,IAAI,EAAE,gBADqC;AAE3CC,EAAAA,MAAM,EAAE;AACJC,IAAAA,QAAQ;AAAE;AAAe;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SA7CY;AA8CJC,IAAAA,SAAS,EAAE;AACPC,MAAAA,OAAO,EAAE;AACLC,QAAAA,OAAO,EAAE,OAAOC,CAAP,EAAUC,IAAV,EAAkCC,OAAlC,KAA8C;AACnD,iBAAO,sBAAQ,MAAM;AACjB,mBAAOA,OAAO,CAACC,WAAR,CAAoBC,KAApB,CAA0BC,GAA1B,CAA8BJ,IAAI,CAACK,IAAnC,CAAP;AACH,WAFM,CAAP;AAGH,SALI;AAMLC,QAAAA,aAAa,EAAE,OAAOP,CAAP,EAAUC,IAAV,EAAkCC,OAAlC,KAA8C;AACzD,iBAAO,sBAAQ,MAAM;AACjB,mBAAOA,OAAO,CAACC,WAAR,CAAoBC,KAApB,CAA0BI,SAA1B,CAAoCP,IAAI,CAACK,IAAzC,CAAP;AACH,WAFM,CAAP;AAGH,SAVI;AAWLG,QAAAA,SAAS,EAAE,OAAOT,CAAP,EAAUC,IAAV,EAAgBC,OAAhB,KAA4B;AACnC,iBAAO,sBAAQ,MAAM;AACjB,mBAAOA,OAAO,CAACC,WAAR,CAAoBC,KAApB,CAA0BM,IAA1B,EAAP;AACH,WAFM,CAAP;AAGH;AAfI,OADF;AAkBPC,MAAAA,UAAU,EAAE;AACRC,QAAAA,UAAU,EAAE,OAAOZ,CAAP,EAAUC,IAAV,EAA+CC,OAA/C,KAA2D;AACnE,iBAAO,sBAAQ,MAAM;AACjB,mBAAOA,OAAO,CAACC,WAAR,CAAoBC,KAApB,CAA0BS,MAA1B,CAAiCZ,IAAI,CAACa,IAAtC,CAAP;AACH,WAFM,CAAP;AAGH,SALO;AAMRC,QAAAA,UAAU,EAAE,OACRf,CADQ,EAERC,IAFQ,EAGRC,OAHQ,KAIP;AACD,iBAAO,sBAAQ,MAAM;AACjB,mBAAOA,OAAO,CAACC,WAAR,CAAoBC,KAApB,CAA0BY,MAA1B,CAAiCf,IAAI,CAACK,IAAtC,EAA4CL,IAAI,CAACa,IAAjD,CAAP;AACH,WAFM,CAAP;AAGH,SAdO;AAeRG,QAAAA,UAAU,EAAE,OAAOjB,CAAP,EAAUC,IAAV,EAAkCC,OAAlC,KAA8C;AACtD,iBAAO,sBAAQ,MAAM;AACjB,mBAAOA,OAAO,CAACC,WAAR,CAAoBC,KAApB,CAA0Bc,MAA1B,CAAiCjB,IAAI,CAACK,IAAtC,CAAP;AACH,WAFM,CAAP;AAGH;AAnBO;AAlBL;AA9CP;AAFmC,CAA/C;eA2Feb,M","sourcesContent":["import { GraphQLSchemaPlugin } from \"@webiny/handler-graphql/types\";\nimport { PbContext } from \"../../types\";\nimport resolve from \"./utils/resolve\";\n\nconst plugin: GraphQLSchemaPlugin<PbContext> = {\n    type: \"graphql-schema\",\n    schema: {\n        typeDefs: /* GraphQL */ `\n            type PbMenu {\n                id: ID\n                createdOn: DateTime\n                createdBy: PbCreatedBy\n                title: String\n                slug: String\n                description: String\n                items: JSON\n            }\n\n            input PbMenuInput {\n                id: ID\n                title: String!\n                slug: String!\n                description: String\n                items: JSON\n            }\n\n            # Response types\n            type PbMenuResponse {\n                data: PbMenu\n                error: PbError\n            }\n\n            type PbMenuListResponse {\n                data: [PbMenu]\n                error: PbError\n            }\n\n            extend type PbQuery {\n                getMenu(slug: String!): PbMenuResponse\n                getPublicMenu(slug: String!): PbMenuResponse\n                listMenus: PbMenuListResponse\n\n                \"Returns menu by given slug.\"\n                getMenuBySlug(slug: String!): PbMenuResponse\n            }\n\n            extend type PbMutation {\n                createMenu(data: PbMenuInput!): PbMenuResponse\n                updateMenu(slug: String!, data: PbMenuInput!): PbMenuResponse\n                deleteMenu(slug: String!): PbMenuResponse\n            }\n        `,\n        resolvers: {\n            PbQuery: {\n                getMenu: async (_, args: { slug: string }, context) => {\n                    return resolve(() => {\n                        return context.pageBuilder.menus.get(args.slug);\n                    });\n                },\n                getPublicMenu: async (_, args: { slug: string }, context) => {\n                    return resolve(() => {\n                        return context.pageBuilder.menus.getPublic(args.slug);\n                    });\n                },\n                listMenus: async (_, args, context) => {\n                    return resolve(() => {\n                        return context.pageBuilder.menus.list();\n                    });\n                }\n            },\n            PbMutation: {\n                createMenu: async (_, args: { data: Record<string, any> }, context) => {\n                    return resolve(() => {\n                        return context.pageBuilder.menus.create(args.data);\n                    });\n                },\n                updateMenu: async (\n                    _,\n                    args: { slug: string; data: Record<string, any> },\n                    context\n                ) => {\n                    return resolve(() => {\n                        return context.pageBuilder.menus.update(args.slug, args.data);\n                    });\n                },\n                deleteMenu: async (_, args: { slug: string }, context) => {\n                    return resolve(() => {\n                        return context.pageBuilder.menus.delete(args.slug);\n                    });\n                }\n            }\n        }\n    }\n};\n\nexport default plugin;\n"],"file":"menus.gql.js"}