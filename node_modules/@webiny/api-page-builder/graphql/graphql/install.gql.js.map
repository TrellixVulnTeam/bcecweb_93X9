{"version":3,"sources":["../../../src/graphql/graphql/install.gql.ts"],"names":["plugin","type","schema","typeDefs","resolvers","PbQuery","version","_","args","context","tenancy","pageBuilder","getCurrentTenant","system","getVersion","PbMutation","install","name","data","insertDemoData","Response","e","ErrorResponse","upgrade"],"mappings":";;;;;;;AACA;;AAGA,MAAMA,MAAsC,GAAG;AAC3CC,EAAAA,IAAI,EAAE,gBADqC;AAE3CC,EAAAA,MAAM,EAAE;AACJC,IAAAA,QAAQ;AAAE;AAAe;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SA7BY;AA8BJC,IAAAA,SAAS,EAAE;AACPC,MAAAA,OAAO,EAAE;AACLC,QAAAA,OAAO,EAAE,OAAOC,CAAP,EAAUC,IAAV,EAAgBC,OAAhB,KAA4B;AACjC,gBAAM;AAAEC,YAAAA,OAAF;AAAWC,YAAAA;AAAX,cAA2BF,OAAjC;;AACA,cAAI,CAACC,OAAO,CAACE,gBAAR,EAAL,EAAiC;AAC7B,mBAAO,IAAP;AACH;;AAED,iBAAOD,WAAW,CAACE,MAAZ,CAAmBC,UAAnB,EAAP;AACH;AARI,OADF;AAWPC,MAAAA,UAAU,EAAE;AACRC,QAAAA,OAAO,EAAE,OAAOT,CAAP,EAAUC,IAAV,EAAgBC,OAAhB,KAA4B;AACjC,cAAI;AACA,kBAAMA,OAAO,CAACE,WAAR,CAAoBE,MAApB,CAA2BG,OAA3B,CAAmC;AACrCC,cAAAA,IAAI,EAAET,IAAI,CAACU,IAAL,CAAUD,IADqB;AAErCE,cAAAA,cAAc,EAAE;AAFqB,aAAnC,CAAN;AAIA,mBAAO,IAAIC,mBAAJ,CAAa,IAAb,CAAP;AACH,WAND,CAME,OAAOC,CAAP,EAAU;AACR,mBAAO,IAAIC,wBAAJ,CAAkBD,CAAlB,CAAP;AACH;AACJ,SAXO;AAYRE,QAAAA,OAAO,EAAE,OAAOhB,CAAP,EAAUC,IAAV,EAAgBC,OAAhB,KAA4B;AACjC,cAAI;AACA,kBAAMA,OAAO,CAACE,WAAR,CAAoBE,MAApB,CAA2BU,OAA3B,CAAmCf,IAAI,CAACF,OAAxC,CAAN;AACA,mBAAO,IAAIc,mBAAJ,CAAa,IAAb,CAAP;AACH,WAHD,CAGE,OAAOC,CAAP,EAAU;AACR,mBAAO,IAAIC,wBAAJ,CAAkBD,CAAlB,CAAP;AACH;AACJ;AAnBO;AAXL;AA9BP;AAFmC,CAA/C;eAoEerB,M","sourcesContent":["import { GraphQLSchemaPlugin } from \"@webiny/handler-graphql/types\";\nimport { Response, ErrorResponse } from \"@webiny/handler-graphql/responses\";\nimport { PbContext } from \"../../types\";\n\nconst plugin: GraphQLSchemaPlugin<PbContext> = {\n    type: \"graphql-schema\",\n    schema: {\n        typeDefs: /* GraphQL */ `\n            input PbInstallInput {\n                websiteUrl: String\n                name: String!\n            }\n\n            type PbInstallResponse {\n                data: Boolean\n                error: PbError\n            }\n\n            type PbUpgradeResponse {\n                data: Boolean\n                error: PbError\n            }\n\n            extend type PbQuery {\n                # Get installed version\n                version: String\n            }\n\n            extend type PbMutation {\n                # Install Page Builder (there are x steps because the process takes a long time).\n                install(data: PbInstallInput!): PbInstallResponse\n\n                # Upgrade Page Builder to a newer version\n                upgrade(version: String!): PbUpgradeResponse\n            }\n        `,\n        resolvers: {\n            PbQuery: {\n                version: async (_, args, context) => {\n                    const { tenancy, pageBuilder } = context;\n                    if (!tenancy.getCurrentTenant()) {\n                        return null;\n                    }\n\n                    return pageBuilder.system.getVersion();\n                }\n            },\n            PbMutation: {\n                install: async (_, args, context) => {\n                    try {\n                        await context.pageBuilder.system.install({\n                            name: args.data.name,\n                            insertDemoData: true\n                        });\n                        return new Response(true);\n                    } catch (e) {\n                        return new ErrorResponse(e);\n                    }\n                },\n                upgrade: async (_, args, context) => {\n                    try {\n                        await context.pageBuilder.system.upgrade(args.version);\n                        return new Response(true);\n                    } catch (e) {\n                        return new ErrorResponse(e);\n                    }\n                }\n            }\n        }\n    }\n};\n\nexport default plugin;\n"],"file":"install.gql.js"}