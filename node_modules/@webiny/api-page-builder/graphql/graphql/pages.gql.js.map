{"version":3,"sources":["../../../src/graphql/graphql/pages.gql.ts"],"names":["plugin","type","schema","typeDefs","resolvers","PbPage","uniquePageId","page","id","split","category","args","context","pageBuilder","categories","get","revisions","pages","listPageRevisions","url","settings","default","getCurrent","websiteUrl","path","PbPageListItem","auth","PbQuery","getPage","_","Response","e","ErrorResponse","listPages","data","meta","listLatest","ListResponse","listPublishedPages","listPublished","listPageTags","listTags","getPublishedPage","getPublishedById","preview","getPublishedByPath","oembedData","provider","code","message","PbMutation","createPage","from","Error","createFrom","create","deletePage","latestPage","delete","updatePage","update","publishPage","publish","unpublishPage","unpublish","requestReview","requestChanges","PbPageSettings","_empty","pageSettings"],"mappings":"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","sourcesContent":["import { ListResponse, Response, ErrorResponse } from \"@webiny/handler-graphql/responses\";\nimport { GraphQLSchemaPlugin } from \"@webiny/handler-graphql/types\";\nimport { Page, PbContext } from \"../../types\";\nimport Error from \"@webiny/error\";\nimport resolve from \"./utils/resolve\";\nimport pageSettings from \"./pages/pageSettings\";\nimport { fetchEmbed, findProvider } from \"./pages/oEmbed\";\nimport get from \"lodash/get\";\n\nconst plugin: GraphQLSchemaPlugin<PbContext> = {\n    type: \"graphql-schema\",\n    schema: {\n        typeDefs: /* GraphQL */ `\n            type PbPageCategory {\n                slug: String\n                name: String\n                url: String\n            }\n\n            type PbPageVisibilitySettings {\n                published: Boolean\n                latest: Boolean\n            }\n\n            type PbPageVisibility {\n                get: PbPageVisibilitySettings\n                list: PbPageVisibilitySettings\n            }\n\n            type PbPage {\n                id: ID\n                pid: ID\n                uniquePageId: ID\n                editor: String\n                createdFrom: ID\n                createdBy: PbCreatedBy\n                createdOn: DateTime\n                savedOn: DateTime\n                publishedOn: DateTime\n                locked: Boolean\n                category: PbPageCategory\n                version: Int\n                title: String\n                status: String\n                visibility: PbPageVisibility\n                path: String\n                url: String\n                settings: PbPageSettings\n                content: JSON\n                revisions: [PbPageRevision]\n            }\n\n            type PbPageRevision {\n                id: ID\n                pid: ID\n                version: Int\n                title: String\n                status: String\n                locked: Boolean\n                savedOn: DateTime\n            }\n\n            type PbPageListItemImages {\n                general: PbFile\n            }\n\n            type PbPageListItem {\n                id: ID\n                pid: ID\n                uniquePageId: ID\n                editor: String\n                status: String\n                locked: Boolean\n                publishedOn: DateTime\n                images: PbPageListItemImages\n                version: Int\n                category: PbPageCategory\n                title: String\n                snippet: String\n                tags: [String]\n                path: String\n                url: String\n                savedOn: DateTime\n                createdFrom: ID\n                createdOn: DateTime\n                createdBy: PbCreatedBy\n            }\n\n            type PbPageListMeta {\n                page: Int\n                limit: Int\n                totalCount: Int\n                totalPages: Int\n                from: Int\n                to: Int\n                nextPage: Int\n                previousPage: Int\n            }\n\n            type PbPageSettings {\n                _empty: String\n            }\n\n            input PbPageVisibilitySettingsInput {\n                published: Boolean\n                latest: Boolean\n            }\n\n            input PbPageVisibilityInput {\n                get: PbPageVisibilitySettingsInput\n                list: PbPageVisibilitySettingsInput\n            }\n\n            input PbUpdatePageInput {\n                title: String\n                category: ID\n                path: String\n                visibility: PbPageVisibilityInput\n                settings: PbPageSettingsInput\n                content: JSON\n            }\n\n            input PbPageSettingsInput {\n                _empty: String\n            }\n\n            type PbPageDeleteResponse {\n                data: Boolean\n                error: PbError\n            }\n\n            type PbPageResponse {\n                data: PbPage\n                error: PbError\n            }\n\n            type PbDeletePageResponseData {\n                page: PbPage\n                latestPage: PbPage\n            }\n\n            type PbDeletePageResponse {\n                data: PbDeletePageResponseData\n                error: PbError\n            }\n\n            type PbPageListResponse {\n                data: [PbPageListItem]\n                meta: PbPageListMeta\n                error: PbError\n            }\n\n            type PbSearchTagsResponse {\n                data: [String]\n            }\n\n            type PbOembedResponse {\n                data: JSON\n                error: PbError\n            }\n\n            type PbPageTagsListResponse {\n                data: [String]\n                error: PbError\n            }\n\n            enum PbListPagesSortOrders {\n                desc\n                asc\n            }\n\n            enum PbPageStatuses {\n                published\n                unpublished\n                draft\n                reviewRequested\n                changesRequested\n            }\n\n            input PbListPagesSortInput {\n                title: PbListPagesSortOrders\n                createdOn: PbListPagesSortOrders\n                publishedOn: PbListPagesSortOrders\n            }\n\n            input PbListPagesWhereInput {\n                category: String\n                status: PbPageStatuses\n                tags: PbListPagesWhereTagsInput\n            }\n\n            input PbListPagesSearchInput {\n                # By specifying \"query\", the search will be performed against pages' \"title\" and \"snippet\" fields.\n                query: String\n            }\n\n            enum PbTagsRule {\n                all\n                any\n            }\n\n            input PbListPagesWhereTagsInput {\n                query: [String]\n                rule: PbTagsRule\n            }\n\n            input PbListPublishedPagesWhereInput {\n                category: String\n                tags: PbListPagesWhereTagsInput\n            }\n\n            input PbListPageTagsSearchInput {\n                query: String!\n            }\n\n            extend type PbQuery {\n                getPage(id: ID): PbPageResponse\n\n                getPublishedPage(\n                    id: ID\n                    path: String\n                    returnNotFoundPage: Boolean\n                    returnErrorPage: Boolean\n                    preview: Boolean\n                ): PbPageResponse\n\n                listPages(\n                    where: PbListPagesWhereInput\n                    limit: Int\n                    page: Int\n                    sort: PbListPagesSortInput\n                    search: PbListPagesSearchInput\n                ): PbPageListResponse\n\n                listPublishedPages(\n                    where: PbListPublishedPagesWhereInput\n                    limit: Int\n                    page: Int\n                    sort: PbListPagesSortInput\n                    search: PbListPagesSearchInput\n                    exclude: [String]\n                ): PbPageListResponse\n\n                listPageTags(search: PbListPageTagsSearchInput!): PbPageTagsListResponse\n\n                # Returns existing tags based on given search term.\n                searchTags(query: String!): PbSearchTagsResponse\n\n                oembedData(url: String!, width: String, height: String): PbOembedResponse\n            }\n\n            extend type PbMutation {\n                createPage(from: ID, category: String): PbPageResponse\n\n                # Update page by given ID.\n                updatePage(id: ID!, data: PbUpdatePageInput!): PbPageResponse\n\n                # Publish page\n                publishPage(id: ID!): PbPageResponse\n\n                # Unpublish page\n                unpublishPage(id: ID!): PbPageResponse\n\n                # Signifies that a page needs to be reviewed.\n                requestReview(id: ID!): PbPageResponse\n\n                # Signifies that certain changes are needed on given page.\n                requestChanges(id: ID!): PbPageResponse\n\n                # Delete page and all of its revisions\n                deletePage(id: ID!): PbDeletePageResponse\n\n                # Delete a single revision\n                deleteRevision(id: ID!): PbDeleteResponse\n\n                updateImageSize: PbDeleteResponse\n            }\n        `,\n        resolvers: {\n            PbPage: {\n                uniquePageId: async (page: Page) => {\n                    const [uniquePageId] = page.id.split(\"#\");\n                    return uniquePageId;\n                },\n                category: async (page: Page, args, context) => {\n                    return context.pageBuilder.categories.get(page.category);\n                },\n                revisions: async (page: Page, args, context) => {\n                    return context.pageBuilder.pages.listPageRevisions(page.id);\n                },\n                url: async (page: Page, args, context) => {\n                    const settings = await context.pageBuilder.settings.default.getCurrent();\n                    const websiteUrl = get(settings, \"websiteUrl\") || \"\";\n                    return websiteUrl + page.path;\n                }\n            },\n            PbPageListItem: {\n                uniquePageId: async (page: Page) => {\n                    const [uniquePageId] = page.id.split(\"#\");\n                    return uniquePageId;\n                },\n                category: async (page: Page, args, context) => {\n                    return context.pageBuilder.categories.get(page.category, { auth: false });\n                },\n                url: async (page: Page, args, context) => {\n                    const settings = await context.pageBuilder.settings.default.getCurrent();\n                    const websiteUrl = get(settings, \"websiteUrl\") || \"\";\n                    return websiteUrl + page.path;\n                }\n            },\n            PbQuery: {\n                getPage: async (_, args: { id: string }, context) => {\n                    try {\n                        return new Response(await context.pageBuilder.pages.get(args.id));\n                    } catch (e) {\n                        return new ErrorResponse(e);\n                    }\n                },\n\n                listPages: async (_, args, context) => {\n                    try {\n                        const [data, meta] = await context.pageBuilder.pages.listLatest(args);\n                        return new ListResponse(data, meta);\n                    } catch (e) {\n                        return new ErrorResponse(e);\n                    }\n                },\n\n                listPublishedPages: async (_, args, context) => {\n                    try {\n                        const [data, meta] = await context.pageBuilder.pages.listPublished(args);\n                        return new ListResponse(data, meta);\n                    } catch (e) {\n                        return new ErrorResponse(e);\n                    }\n                },\n                listPageTags: async (_, args: { search: { query: string } }, context) => {\n                    return resolve(() => context.pageBuilder.pages.listTags(args));\n                },\n\n                getPublishedPage: async (\n                    _,\n                    args: { id?: string; path?: string; preview?: boolean },\n                    context\n                ) => {\n                    if (args.id) {\n                        return resolve(() =>\n                            context.pageBuilder.pages.getPublishedById({\n                                id: args.id,\n                                preview: args.preview\n                            })\n                        );\n                    }\n\n                    return resolve(() =>\n                        context.pageBuilder.pages.getPublishedByPath({\n                            path: args.path\n                        })\n                    );\n                },\n\n                oembedData: async (_, args: { url: string; width?: string; height?: string }) => {\n                    try {\n                        const provider = findProvider(args.url);\n                        if (!provider) {\n                            return new ErrorResponse({\n                                code: \"OEMBED_PROVIDER_NOT_FOUND\",\n                                message: \"OEmbed provider for the requested URL was not found.\"\n                            });\n                        }\n\n                        return new Response(await fetchEmbed(args, provider));\n                    } catch (e) {\n                        return new ErrorResponse({\n                            code: \"OEMBED_ERROR\",\n                            message: e.message\n                        });\n                    }\n                }\n            },\n            PbMutation: {\n                createPage: async (_, args: { from?: string; category?: string }, context) => {\n                    return resolve(() => {\n                        const { from, category } = args;\n                        if (!from && !category) {\n                            throw new Error(\n                                `Cannot create page - you must provide either \"from\" or \"category\" input.`\n                            );\n                        }\n\n                        if (from) {\n                            return context.pageBuilder.pages.createFrom(from);\n                        }\n                        return context.pageBuilder.pages.create(category);\n                    });\n                },\n                deletePage: async (_, args: { id: string }, context: PbContext) => {\n                    return resolve(async () => {\n                        const [page, latestPage] = await context.pageBuilder.pages.delete(args.id);\n                        return { page, latestPage };\n                    });\n                },\n\n                updatePage: async (\n                    _,\n                    args: { id: string; data: Record<string, any> },\n                    context: PbContext\n                ) => {\n                    return resolve(() => {\n                        const { data } = args;\n                        return context.pageBuilder.pages.update(args.id, data);\n                    });\n                },\n\n                publishPage: async (_, args: { id: string }, context) => {\n                    return resolve(() => context.pageBuilder.pages.publish(args.id));\n                },\n\n                unpublishPage: async (_, args: { id: string }, context) => {\n                    return resolve(() => context.pageBuilder.pages.unpublish(args.id));\n                },\n\n                requestReview: async (_, args: { id: string }, context) => {\n                    return resolve(() => context.pageBuilder.pages.requestReview(args.id));\n                },\n\n                requestChanges: async (_, args: { id: string }, context) => {\n                    return resolve(() => context.pageBuilder.pages.requestChanges(args.id));\n                }\n            },\n            PbPageSettings: {\n                _empty: () => \"\"\n            }\n        }\n    }\n};\n\nexport default [plugin, pageSettings];\n"],"file":"pages.gql.js"}