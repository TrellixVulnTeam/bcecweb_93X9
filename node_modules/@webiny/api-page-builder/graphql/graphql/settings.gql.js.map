{"version":3,"sources":["../../../src/graphql/graphql/settings.gql.ts"],"names":["plugin","type","schema","typeDefs","resolvers","PbSettingsResponse","id","settings","args","context","pageBuilder","default","getSettingsCacheKey","PbDefaultSettingsResponse","PbQuery","getCurrentSettings","_","Response","getCurrent","err","ErrorResponse","getSettings","get","getDefaultSettings","getDefault","PbMutation","updateSettings","update","data"],"mappings":";;;;;;;AAAA;;AAIA,MAAMA,MAAsC,GAAG;AAC3CC,EAAAA,IAAI,EAAE,gBADqC;AAE3CC,EAAAA,MAAM,EAAE;AACJC,IAAAA,QAAQ;AAAE;AAAe;AACjzHY;AA0HJC,IAAAA,SAAS,EAAE;AACPC,MAAAA,kBAAkB,EAAE;AAChBC,QAAAA,EAAE,EAAE,CAACC,QAAD,EAAWC,IAAX,EAAiBC,OAAjB,KAA6B;AAC7B,iBAAOA,OAAO,CAACC,WAAR,CAAoBH,QAApB,CAA6BI,OAA7B,CAAqCC,mBAArC,EAAP;AACH;AAHe,OADb;AAMPC,MAAAA,yBAAyB,EAAE;AACvBP,QAAAA,EAAE,EAAE,MAAM;AADa,OANpB;AASPQ,MAAAA,OAAO,EAAE;AACLC,QAAAA,kBAAkB,EAAE,OAAOC,CAAP,EAAUR,IAAV,EAAgBC,OAAhB,KAA4B;AAC5C,cAAI;AACA,mBAAO,IAAIQ,mBAAJ,CACH,MAAMR,OAAO,CAACC,WAAR,CAAoBH,QAApB,CAA6BI,OAA7B,CAAqCO,UAArC,EADH,CAAP;AAGH,WAJD,CAIE,OAAOC,GAAP,EAAY;AACV,mBAAO,IAAIC,wBAAJ,CAAkBD,GAAlB,CAAP;AACH;AACJ,SATI;AAULE,QAAAA,WAAW,EAAE,OAAOL,CAAP,EAAUR,IAAV,EAAgBC,OAAhB,KAA4B;AACrC,cAAI;AACA,mBAAO,IAAIQ,mBAAJ,CAAa,MAAMR,OAAO,CAACC,WAAR,CAAoBH,QAApB,CAA6BI,OAA7B,CAAqCW,GAArC,EAAnB,CAAP;AACH,WAFD,CAEE,OAAOH,GAAP,EAAY;AACV,mBAAO,IAAIC,wBAAJ,CAAkBD,GAAlB,CAAP;AACH;AACJ,SAhBI;AAiBLI,QAAAA,kBAAkB,EAAE,OAAOP,CAAP,EAAUR,IAAV,EAAgBC,OAAhB,KAA4B;AAC5C,cAAI;AACA,mBAAO,IAAIQ,mBAAJ,CACH,MAAMR,OAAO,CAACC,WAAR,CAAoBH,QAApB,CAA6BI,OAA7B,CAAqCa,UAArC,EADH,CAAP;AAGH,WAJD,CAIE,OAAOL,GAAP,EAAY;AACV,mBAAO,IAAIC,wBAAJ,CAAkBD,GAAlB,CAAP;AACH;AACJ;AAzBI,OATF;AAoCPM,MAAAA,UAAU,EAAE;AACRC,QAAAA,cAAc,EAAE,OAAOV,CAAP,EAAUR,IAAV,EAAgBC,OAAhB,KAA4B;AACxC,cAAI;AACA,mBAAO,IAAIQ,mBAAJ,CACH,MAAMR,OAAO,CAACC,WAAR,CAAoBH,QAApB,CAA6BI,OAA7B,CAAqCgB,MAArC,CAA4CnB,IAAI,CAACoB,IAAjD,CADH,CAAP;AAGH,WAJD,CAIE,OAAOT,GAAP,EAAY;AACV,mBAAO,IAAIC,wBAAJ,CAAkBD,GAAlB,CAAP;AACH;AACJ;AATO;AApCL;AA1HP;AAFmC,CAA/C;eA+KenB,M","sourcesContent":["import { ErrorResponse, Response } from \"@webiny/handler-graphql/responses\";\nimport { GraphQLSchemaPlugin } from \"@webiny/handler-graphql/types\";\nimport { PbContext } from \"../../types\";\n\nconst plugin: GraphQLSchemaPlugin<PbContext> = {\n    type: \"graphql-schema\",\n    schema: {\n        typeDefs: /* GraphQL */ `\n            type PbSettingsError {\n                code: String\n                message: String\n                data: JSON\n            }\n\n            type PbSocialMedia {\n                facebook: String\n                twitter: String\n                instagram: String\n                image: PbFile\n            }\n\n            type PbSettingsPrerenderingStorage {\n                name: String\n            }\n\n            type PbSettingsPrerenderingApp {\n                url: String\n            }\n\n            type PbSettingsPrerendering {\n                storage: PbSettingsPrerenderingStorage\n                app: PbSettingsPrerenderingApp\n            }\n\n            type PbSettings {\n                name: String\n                favicon: PbFile\n                logo: PbFile\n                websiteUrl: String\n                websitePreviewUrl: String\n                social: PbSocialMedia\n                pages: PbSettingsPages\n                prerendering: PbSettingsPrerendering\n            }\n\n            type PbSettingsResponse {\n                # This field's value is hardcoded and it's here to help frontend clients cache data more easily.\n                id: ID\n                error: PbSettingsError\n                data: PbSettings\n            }\n\n            type PbDefaultSettingsResponse {\n                # This field's value is hardcoded and it's here to help frontend clients cache data more easily.\n                id: ID\n                error: PbSettingsError\n                data: PbSettings\n            }\n\n            type PbSettingsPages {\n                home: ID\n                notFound: ID\n            }\n\n            type PbDefaultPage {\n                id: String\n                parent: String\n                title: String\n            }\n\n            input PbSettingsPrerenderingStorageInput {\n                name: String\n            }\n\n            input PbSettingsPrerenderingAppInput {\n                url: String\n            }\n\n            input PbSettingsPrerenderingInput {\n                storage: PbSettingsPrerenderingStorageInput\n                app: PbSettingsPrerenderingAppInput\n            }\n\n            input PbSocialMediaInput {\n                facebook: String\n                twitter: String\n                instagram: String\n                image: PbFileInput\n            }\n\n            input PbDefaultPageInput {\n                id: String\n                title: String\n            }\n\n            input PbSettingsInput {\n                name: String\n                websiteUrl: String\n                websitePreviewUrl: String\n                favicon: PbFileInput\n                logo: PbFileInput\n                social: PbSocialMediaInput\n                pages: PbSettingsPagesInput\n                prerendering: PbSettingsPrerenderingInput\n            }\n\n            input PbSettingsPagesInput {\n                home: ID\n                notFound: ID\n            }\n\n            extend type PbQuery {\n                # Returns settings for current locale and tenant (uses defaults).\n                getCurrentSettings: PbSettingsResponse\n\n                # Returns settings for current locale and tenant (does not use defaults).\n                getSettings: PbSettingsResponse\n\n                # Returns default settings that are composed of the default settings for all tenants,\n                # overwritten by the default settings for the current tenant. Use a value from these\n                # settings if it hasn't been returned by the base getSettings field.\n                getDefaultSettings: PbDefaultSettingsResponse\n            }\n\n            extend type PbMutation {\n                updateSettings(data: PbSettingsInput!): PbSettingsResponse\n            }\n        `,\n        resolvers: {\n            PbSettingsResponse: {\n                id: (settings, args, context) => {\n                    return context.pageBuilder.settings.default.getSettingsCacheKey();\n                }\n            },\n            PbDefaultSettingsResponse: {\n                id: () => \"PB#SETTINGS\"\n            },\n            PbQuery: {\n                getCurrentSettings: async (_, args, context) => {\n                    try {\n                        return new Response(\n                            await context.pageBuilder.settings.default.getCurrent()\n                        );\n                    } catch (err) {\n                        return new ErrorResponse(err);\n                    }\n                },\n                getSettings: async (_, args, context) => {\n                    try {\n                        return new Response(await context.pageBuilder.settings.default.get());\n                    } catch (err) {\n                        return new ErrorResponse(err);\n                    }\n                },\n                getDefaultSettings: async (_, args, context) => {\n                    try {\n                        return new Response(\n                            await context.pageBuilder.settings.default.getDefault()\n                        );\n                    } catch (err) {\n                        return new ErrorResponse(err);\n                    }\n                }\n            },\n            PbMutation: {\n                updateSettings: async (_, args, context) => {\n                    try {\n                        return new Response(\n                            await context.pageBuilder.settings.default.update(args.data)\n                        );\n                    } catch (err) {\n                        return new ErrorResponse(err);\n                    }\n                }\n            }\n        }\n    }\n};\n\nexport default plugin;\n"],"file":"settings.gql.js"}