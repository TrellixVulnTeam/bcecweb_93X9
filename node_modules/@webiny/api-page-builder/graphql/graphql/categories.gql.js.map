{"version":3,"sources":["../../../src/graphql/graphql/categories.gql.ts"],"names":["resolve","fn","Response","e","ErrorResponse","plugin","type","schema","typeDefs","resolvers","PbQuery","getCategory","_","args","context","pageBuilder","categories","get","slug","listCategories","list","PbMutation","createCategory","create","data","updateCategory","update","deleteCategory","delete"],"mappings":";;;;;;;AAAA;;AAIA,MAAMA,OAAO,GAAG,MAAMC,EAAN,IAAY;AACxB,MAAI;AACA,WAAO,IAAIC,mBAAJ,CAAa,MAAMD,EAAE,EAArB,CAAP;AACH,GAFD,CAEE,OAAOE,CAAP,EAAU;AACR,WAAO,IAAIC,wBAAJ,CAAkBD,CAAlB,CAAP;AACH;AACJ,CAND;;AAQA,MAAME,MAAsC,GAAG;AAC3CC,EAAAA,IAAI,EAAE,gBADqC;AAE3CC,EAAAA,MAAM,EAAE;AACJC,IAAAA,QAAQ;AAAE;AAAe;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SA1CY;AA2CJC,IAAAA,SAAS,EAAE;AACPC,MAAAA,OAAO,EAAE;AACLC,QAAAA,WAAW,EAAE,OAAOC,CAAP,EAAUC,IAAV,EAAkCC,OAAlC,KAA8C;AACvD,iBAAOd,OAAO,CAAC,MAAM;AACjB,mBAAOc,OAAO,CAACC,WAAR,CAAoBC,UAApB,CAA+BC,GAA/B,CAAmCJ,IAAI,CAACK,IAAxC,CAAP;AACH,WAFa,CAAd;AAGH,SALI;AAMLC,QAAAA,cAAc,EAAE,OAAOP,CAAP,EAAUC,IAAV,EAAgBC,OAAhB,KAA4B;AACxC,iBAAOd,OAAO,CAAC,MAAMc,OAAO,CAACC,WAAR,CAAoBC,UAApB,CAA+BI,IAA/B,EAAP,CAAd;AACH;AARI,OADF;AAWPC,MAAAA,UAAU,EAAE;AACRC,QAAAA,cAAc,EAAE,OAAOV,CAAP,EAAUC,IAAV,EAA+CC,OAA/C,KAA2D;AACvE,iBAAOd,OAAO,CAAC,MAAM;AACjB,mBAAOc,OAAO,CAACC,WAAR,CAAoBC,UAApB,CAA+BO,MAA/B,CAAsCV,IAAI,CAACW,IAA3C,CAAP;AACH,WAFa,CAAd;AAGH,SALO;AAMRC,QAAAA,cAAc,EAAE,OACZb,CADY,EAEZC,IAFY,EAGZC,OAHY,KAIX;AACD,iBAAOd,OAAO,CAAC,MAAM;AACjB,mBAAOc,OAAO,CAACC,WAAR,CAAoBC,UAApB,CAA+BU,MAA/B,CAAsCb,IAAI,CAACK,IAA3C,EAAiDL,IAAI,CAACW,IAAtD,CAAP;AACH,WAFa,CAAd;AAGH,SAdO;AAeRG,QAAAA,cAAc,EAAE,OAAOf,CAAP,EAAUC,IAAV,EAAkCC,OAAlC,KAA8C;AAC1D,iBAAOd,OAAO,CAAC,MAAM;AACjB,mBAAOc,OAAO,CAACC,WAAR,CAAoBC,UAApB,CAA+BY,MAA/B,CAAsCf,IAAI,CAACK,IAA3C,CAAP;AACH,WAFa,CAAd;AAGH;AAnBO;AAXL;AA3CP;AAFmC,CAA/C;eAiFeb,M","sourcesContent":["import { Response, ErrorResponse } from \"@webiny/handler-graphql/responses\";\nimport { GraphQLSchemaPlugin } from \"@webiny/handler-graphql/types\";\nimport { PbContext } from \"../../types\";\n\nconst resolve = async fn => {\n    try {\n        return new Response(await fn());\n    } catch (e) {\n        return new ErrorResponse(e);\n    }\n};\n\nconst plugin: GraphQLSchemaPlugin<PbContext> = {\n    type: \"graphql-schema\",\n    schema: {\n        typeDefs: /* GraphQL */ `\n            type PbCategory {\n                createdOn: DateTime\n                createdBy: PbCreatedBy\n                name: String\n                slug: String\n                url: String\n                layout: String\n            }\n\n            input PbCategoryInput {\n                name: String!\n                slug: String!\n                url: String!\n                layout: String!\n            }\n\n            # Response types\n            type PbCategoryResponse {\n                data: PbCategory\n                error: PbError\n            }\n\n            type PbCategoryListResponse {\n                data: [PbCategory]\n                error: PbError\n            }\n\n            extend type PbQuery {\n                getCategory(slug: String!): PbCategoryResponse\n                listCategories: PbCategoryListResponse\n\n                \"Returns category by given slug.\"\n                getCategoryBySlug(slug: String!): PbCategoryResponse\n            }\n\n            extend type PbMutation {\n                createCategory(data: PbCategoryInput!): PbCategoryResponse\n                updateCategory(slug: String!, data: PbCategoryInput!): PbCategoryResponse\n                deleteCategory(slug: String!): PbCategoryResponse\n            }\n        `,\n        resolvers: {\n            PbQuery: {\n                getCategory: async (_, args: { slug: string }, context) => {\n                    return resolve(() => {\n                        return context.pageBuilder.categories.get(args.slug);\n                    });\n                },\n                listCategories: async (_, args, context) => {\n                    return resolve(() => context.pageBuilder.categories.list());\n                }\n            },\n            PbMutation: {\n                createCategory: async (_, args: { data: Record<string, any> }, context) => {\n                    return resolve(() => {\n                        return context.pageBuilder.categories.create(args.data);\n                    });\n                },\n                updateCategory: async (\n                    _,\n                    args: { slug: string; data: Record<string, any> },\n                    context\n                ) => {\n                    return resolve(() => {\n                        return context.pageBuilder.categories.update(args.slug, args.data);\n                    });\n                },\n                deleteCategory: async (_, args: { slug: string }, context) => {\n                    return resolve(() => {\n                        return context.pageBuilder.categories.delete(args.slug);\n                    });\n                }\n            }\n        }\n    }\n};\n\nexport default plugin;\n"],"file":"categories.gql.js"}