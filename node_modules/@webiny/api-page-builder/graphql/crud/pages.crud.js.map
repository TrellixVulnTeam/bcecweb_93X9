{"version":3,"sources":["../../../src/graphql/crud/pages.crud.ts"],"names":["STATUS_CHANGES_REQUESTED","STATUS_REVIEW_REQUESTED","STATUS_DRAFT","STATUS_PUBLISHED","STATUS_UNPUBLISHED","getZeroPaddedVersionNumber","number","String","padStart","DEFAULT_EDITOR","PERMISSION_NAME","plugin","type","apply","context","db","i18nContent","elasticsearch","PK_PAGE","pid","PK_PAGE_PUBLISHED_PATH","ES_DEFAULTS","defaults","es","pagePlugins","plugins","byType","PagePlugin","pageBuilder","pages","dataLoaders","getPublishedById","DataLoader","argsArray","batch","notFoundError","NotFoundError","idNotProvidedError","Error","errorsAndResults","batchResultIndex","i","length","args","id","push","version","split","read","query","PK","SK","batchResults","execute","errorResult","page","preview","status","content","cacheKeyFn","key","get","rev","permission","rwd","exactRevision","latestRevision","identity","security","getIdentity","load","getPublishedByPath","path","normalizedPath","settings","default","getCurrent","home","notFound","listLatest","sort","from","size","filter","term","getLocale","code","latest","own","listLatestPlugins","SearchLatestPagesPlugin","modifyQuery","modifySort","response","search","body","bool","must","undefined","must_not","results","hits","total","value","data","map","item","_source","meta","limit","totalCount","listPublished","published","listPublishedPlugins","SearchPublishedPagesPlugin","listTags","sharedIndex","process","env","ELASTICSEARCH_SHARED_INDEXES","tenant","tenancy","getCurrentTenant","aggs","tags","terms","field","include","aggregations","buckets","listPageRevisions","pageId","$beginsWith","a","b","create","categorySlug","category","categories","title","pagePath","slug","uniqid","time","url","join","replace","CreateDataModel","populate","validate","zeroPaddedVersion","updateSettingsModel","UpdateSettingsModel","general","layout","owner","displayName","locale","editor","visibility","list","locked","publishedOn","createdFrom","toJSON","savedOn","Date","toISOString","createdOn","ownedBy","createdBy","ddbData","TYPE","PAGE","latestPageKeys","esDb","index","createFrom","fromPid","fromVersion","latestPage","NotAuthorizedError","nextVersion","zeroPaddedNextVersion","nextId","update","existingPage","existingLatestPage","updateData","inputData","newContent","newPageData","newLatestPage","delete","PAGE_PK","publishedPage","publishedPathEntryDeleted","pageItemCollection","$gte","$lt","publish","pw","publishedPageOnPath","pathTakenByAnotherPage","unpublish","publishedRev","requestReview","latestPageData","allowedStatuses","includes","requestChanges","prerendering","render","current","appUrl","storageName","paths","dbNamespace","Array","isArray","prerenderingServiceClient","configuration","storage","folder","name","namespace","queue","add","tag","flush","p"],"mappings":"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","sourcesContent":["import mdbid from \"mdbid\";\nimport uniqid from \"uniqid\";\nimport trimStart from \"lodash/trimStart\";\nimport omit from \"lodash/omit\";\nimport get from \"lodash/get\";\nimport merge from \"lodash/merge\";\nimport DataLoader from \"dataloader\";\nimport { NotAuthorizedError } from \"@webiny/api-security\";\nimport Error from \"@webiny/error\";\nimport { NotFoundError } from \"@webiny/handler-graphql\";\nimport { Args as FlushArgs } from \"@webiny/api-prerendering-service/flush/types\";\nimport { ContextPlugin } from \"@webiny/handler/types\";\nimport getPKPrefix from \"./utils/getPKPrefix\";\nimport defaults from \"./utils/defaults\";\nimport { Page, PagesCrud, PageSecurityPermission, PbContext, TYPE } from \"~/types\";\nimport { SearchPublishedPagesPlugin } from \"~/plugins/SearchPublishedPagesPlugin\";\nimport { SearchLatestPagesPlugin } from \"~/plugins/SearchLatestPagesPlugin\";\nimport createListMeta from \"./utils/createListMeta\";\nimport checkBasePermissions from \"./utils/checkBasePermissions\";\nimport checkOwnPermissions from \"./utils/checkOwnPermissions\";\nimport getNormalizedListPagesArgs from \"./utils/getNormalizedListPagesArgs\";\nimport executeCallbacks from \"./utils/executeCallbacks\";\nimport normalizePath from \"./pages/normalizePath\";\nimport { compressContent, extractContent } from \"./pages/contentCompression\";\nimport { CreateDataModel, UpdateSettingsModel } from \"./pages/models\";\nimport { getESLatestPageData, getESPublishedPageData } from \"./pages/esPageData\";\nimport { PagePlugin } from \"~/plugins/PagePlugin\";\n\nconst STATUS_CHANGES_REQUESTED = \"changesRequested\";\nconst STATUS_REVIEW_REQUESTED = \"reviewRequested\";\nconst STATUS_DRAFT = \"draft\";\nconst STATUS_PUBLISHED = \"published\";\nconst STATUS_UNPUBLISHED = \"unpublished\";\n\nconst getZeroPaddedVersionNumber = number => String(number).padStart(4, \"0\");\n\nconst DEFAULT_EDITOR = \"page-builder\";\nconst PERMISSION_NAME = \"pb.page\";\n\nconst plugin: ContextPlugin<PbContext> = {\n    type: \"context\",\n    async apply(context) {\n        const { db, i18nContent, elasticsearch } = context;\n\n        const PK_PAGE = pid => `${getPKPrefix(context)}P#${pid}`;\n        const PK_PAGE_PUBLISHED_PATH = () => `${getPKPrefix(context)}PATH`;\n        const ES_DEFAULTS = () => defaults.es(context);\n\n        // Used in a couple of key events - (un)publishing and pages deletion.\n        const pagePlugins = context.plugins.byType<PagePlugin>(PagePlugin.type);\n\n        context.pageBuilder = {\n            ...context.pageBuilder,\n            pages: {\n                dataLoaders: {\n                    getPublishedById: new DataLoader(\n                        async argsArray => {\n                            const batch = db.batch();\n                            const notFoundError = new NotFoundError(\"Page not found.\");\n                            const idNotProvidedError = new Error(\n                                'Cannot get published page - \"id\" not provided.'\n                            );\n\n                            const errorsAndResults = [];\n\n                            let batchResultIndex = 0;\n                            for (let i = 0; i < argsArray.length; i++) {\n                                const args = argsArray[i];\n\n                                if (!args.id) {\n                                    errorsAndResults.push(idNotProvidedError);\n                                    continue;\n                                }\n\n                                // If we have a full ID, then try to load it directly.\n                                const [pid, version] = args.id.split(\"#\");\n\n                                if (version) {\n                                    errorsAndResults.push(batchResultIndex++);\n                                    batch.read({\n                                        ...defaults.db,\n                                        query: { PK: PK_PAGE(pid), SK: `REV#${version}` }\n                                    });\n                                    continue;\n                                }\n\n                                errorsAndResults.push(batchResultIndex++);\n                                batch.read({\n                                    ...defaults.db,\n                                    query: {\n                                        PK: PK_PAGE(pid),\n                                        SK: `P`\n                                    }\n                                });\n                            }\n\n                            // Replace batch result indexes with actual results.\n                            const batchResults = await batch.execute();\n                            for (let i = 0; i < errorsAndResults.length; i++) {\n                                const errorResult = errorsAndResults[i];\n                                if (typeof errorResult !== \"number\") {\n                                    continue;\n                                }\n\n                                const [[page]] = batchResults[errorResult];\n                                if (!page) {\n                                    errorsAndResults[i] = notFoundError;\n                                    continue;\n                                }\n\n                                // If preview enabled, return the page, without checking if the page\n                                // is published. The preview flag is not utilized anywhere else.\n                                if (argsArray[i].preview || page.status === \"published\") {\n                                    errorsAndResults[i] = page;\n\n                                    // Extract compressed page content.\n                                    errorsAndResults[i].content = await extractContent(\n                                        errorsAndResults[i].content\n                                    );\n\n                                    continue;\n                                }\n\n                                errorsAndResults[i] = notFoundError;\n                            }\n\n                            return errorsAndResults;\n                        },\n                        {\n                            cacheKeyFn: key => key.id + key.preview\n                        }\n                    )\n                },\n                async get(id) {\n                    const [pid, rev] = id.split(\"#\");\n                    const permission = await checkBasePermissions(context, PERMISSION_NAME, {\n                        rwd: \"r\"\n                    });\n\n                    let page;\n                    if (rev) {\n                        const [[exactRevision]] = await db.read<Page>({\n                            ...defaults.db,\n                            query: { PK: PK_PAGE(pid), SK: `REV#${rev}` }\n                        });\n                        page = exactRevision;\n                    } else {\n                        const [[latestRevision]] = await db.read<Page>({\n                            ...defaults.db,\n                            query: { PK: PK_PAGE(pid), SK: `L` }\n                        });\n                        page = latestRevision;\n                    }\n\n                    if (!page) {\n                        throw new NotFoundError(\"Page not found.\");\n                    }\n\n                    const identity = context.security.getIdentity();\n                    checkOwnPermissions(identity, permission, page, \"ownedBy\");\n\n                    // Extract compressed page content.\n                    page.content = await extractContent(page.content);\n                    return page;\n                },\n\n                async getPublishedById(args) {\n                    return this.dataLoaders.getPublishedById.load(args);\n                },\n\n                async getPublishedByPath(args) {\n                    if (!args.path) {\n                        throw new Error('Cannot get published page - \"path\" not provided.');\n                    }\n\n                    const notFoundError = new NotFoundError(\"Page not found.\");\n\n                    const normalizedPath = normalizePath(args.path);\n                    if (normalizedPath === \"/\") {\n                        const settings = await context.pageBuilder.settings.default.getCurrent();\n                        if (!settings?.pages?.home) {\n                            throw notFoundError;\n                        }\n\n                        return context.pageBuilder.pages.getPublishedById({\n                            id: settings.pages.home\n                        });\n                    }\n\n                    let [[page]] = await db.read<Page>({\n                        ...defaults.db,\n                        query: { PK: PK_PAGE_PUBLISHED_PATH(), SK: normalizedPath }\n                    });\n\n                    if (!page) {\n                        // Try loading dynamic pages\n                        for (const plugin of pagePlugins) {\n                            if (typeof plugin.notFound === \"function\") {\n                                page = await plugin.notFound({ args, context });\n                                if (page) {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    if (page) {\n                        // Extract compressed page content.\n                        page.content = await extractContent(page.content);\n                        return page;\n                    }\n\n                    throw notFoundError;\n                },\n\n                async listLatest(args) {\n                    const permission = await checkBasePermissions(context, PERMISSION_NAME, {\n                        rwd: \"r\"\n                    });\n                    const { sort, from, size, query, page } = getNormalizedListPagesArgs(\n                        args,\n                        context\n                    );\n\n                    query.filter.push(\n                        {\n                            term: { \"locale.keyword\": i18nContent.getLocale().code }\n                        },\n                        { term: { latest: true } }\n                    );\n\n                    // If users can only manage own records, let's add the special filter.\n                    if (permission.own === true) {\n                        const identity = context.security.getIdentity();\n                        query.filter.push({\n                            term: { \"createdBy.id.keyword\": identity.id }\n                        });\n                    }\n\n                    const listLatestPlugins = context.plugins.byType<SearchLatestPagesPlugin>(\n                        SearchLatestPagesPlugin.type\n                    );\n\n                    for (const plugin of listLatestPlugins) {\n                        // Apply query modifications\n                        plugin.modifyQuery({ query, args, context });\n\n                        // Apply sort modifications\n                        plugin.modifySort({ sort, args, context });\n                    }\n\n                    const response = await elasticsearch.search({\n                        ...ES_DEFAULTS(),\n                        body: {\n                            query: {\n                                bool: {\n                                    must: query.must.length > 0 ? query.must : undefined,\n                                    must_not:\n                                        query.must_not.length > 0 ? query.must_not : undefined,\n                                    filter: query.filter.length > 0 ? query.filter : undefined\n                                }\n                            },\n                            from,\n                            size,\n                            sort\n                        }\n                    });\n\n                    const results = response.body.hits;\n                    const total = results.total.value;\n                    const data = total > 0 ? results.hits.map(item => item._source) : [];\n\n                    const meta = createListMeta({ page, limit: size, totalCount: total });\n                    return [data, meta];\n                },\n\n                async listPublished(args) {\n                    const { sort, from, size, query, page } = getNormalizedListPagesArgs(\n                        args,\n                        context\n                    );\n\n                    query.filter.push(\n                        {\n                            term: { \"locale.keyword\": i18nContent.getLocale().code }\n                        },\n                        { term: { published: true } }\n                    );\n\n                    const listPublishedPlugins = context.plugins.byType<SearchPublishedPagesPlugin>(\n                        SearchPublishedPagesPlugin.type\n                    );\n\n                    for (const plugin of listPublishedPlugins) {\n                        // Apply query modifications\n                        plugin.modifyQuery({ query, args, context });\n\n                        // Apply sort modifications\n                        plugin.modifySort({ sort, args, context });\n                    }\n\n                    const response = await elasticsearch.search({\n                        ...ES_DEFAULTS(),\n                        body: {\n                            query: {\n                                bool: {\n                                    must: query.must.length > 0 ? query.must : undefined,\n                                    must_not:\n                                        query.must_not.length > 0 ? query.must_not : undefined,\n                                    filter: query.filter.length > 0 ? query.filter : undefined\n                                }\n                            },\n                            from,\n                            size,\n                            sort\n                        }\n                    });\n\n                    const results = response.body.hits;\n                    const total = results.total.value;\n                    const data = total > 0 ? results.hits.map(item => item._source) : [];\n\n                    const meta = createListMeta({ page, limit: size, totalCount: total });\n                    return [data, meta];\n                },\n\n                async listTags(args) {\n                    if (args.search.query.length < 2) {\n                        throw new Error(\"Please provide at least two characters.\");\n                    }\n\n                    let query = undefined;\n                    // When ES index is shared between tenants, we need to filter records by tenant ID\n                    const sharedIndex = process.env.ELASTICSEARCH_SHARED_INDEXES === \"true\";\n                    if (sharedIndex) {\n                        const tenant = context.tenancy.getCurrentTenant();\n                        query = {\n                            bool: {\n                                filter: [{ term: { \"tenant.keyword\": tenant.id } }]\n                            }\n                        };\n                    }\n\n                    const response = await elasticsearch.search({\n                        ...ES_DEFAULTS(),\n                        body: {\n                            query,\n                            size: 0,\n                            aggs: {\n                                tags: {\n                                    terms: {\n                                        field: \"tags.keyword\",\n                                        include: `.*${args.search.query}.*`,\n                                        size: 10\n                                    }\n                                }\n                            }\n                        }\n                    });\n\n                    try {\n                        return response.body.aggregations.tags.buckets.map(item => item.key);\n                    } catch {\n                        return [];\n                    }\n                },\n\n                async listPageRevisions(pageId) {\n                    const [pid] = pageId.split(\"#\");\n                    const [pages] = await db.read<Page>({\n                        ...defaults.db,\n                        query: {\n                            PK: PK_PAGE(pid),\n                            SK: { $beginsWith: \"REV#\" },\n                            sort: { SK: -1 }\n                        }\n                    });\n\n                    return pages.sort((a, b) => b.version - a.version);\n                },\n\n                async create(categorySlug) {\n                    await checkBasePermissions(context, PERMISSION_NAME, { rwd: \"w\" });\n\n                    const category = await context.pageBuilder.categories.get(categorySlug);\n                    if (!category) {\n                        throw new NotFoundError(`Category with slug \"${categorySlug}\" not found.`);\n                    }\n\n                    const title = \"Untitled\";\n\n                    let pagePath = \"\";\n                    if (category.slug === \"static\") {\n                        pagePath = normalizePath(\"untitled-\" + uniqid.time());\n                    } else {\n                        pagePath = normalizePath(\n                            [category.url, \"untitled-\" + uniqid.time()]\n                                .join(\"/\")\n                                .replace(/\\/\\//g, \"/\")\n                        );\n                    }\n\n                    const identity = context.security.getIdentity();\n                    new CreateDataModel().populate({ category: category.slug }).validate();\n\n                    const [pid, version] = [mdbid(), 1];\n                    const zeroPaddedVersion = getZeroPaddedVersionNumber(version);\n\n                    const id = `${pid}#${zeroPaddedVersion}`;\n\n                    const updateSettingsModel = new UpdateSettingsModel().populate({\n                        general: {\n                            layout: category.layout\n                        }\n                    });\n\n                    const owner = {\n                        id: identity.id,\n                        displayName: identity.displayName,\n                        type: identity.type\n                    };\n\n                    const page: Page = {\n                        id,\n                        pid,\n                        locale: context.i18nContent.getLocale().code,\n                        tenant: context.tenancy.getCurrentTenant().id,\n                        editor: DEFAULT_EDITOR,\n                        category: category.slug,\n                        title,\n                        path: pagePath,\n                        version: 1,\n                        status: STATUS_DRAFT,\n                        visibility: {\n                            list: { latest: true, published: true },\n                            get: { latest: true, published: true }\n                        },\n                        home: false,\n                        notFound: false,\n                        locked: false,\n                        publishedOn: null,\n                        createdFrom: null,\n                        settings: await updateSettingsModel.toJSON(),\n                        savedOn: new Date().toISOString(),\n                        createdOn: new Date().toISOString(),\n                        ownedBy: owner,\n                        createdBy: owner,\n                        content: compressContent() // Just create the initial { compression, content } object.\n                    };\n\n                    await executeCallbacks<PagePlugin[\"beforeCreate\"]>(\n                        pagePlugins,\n                        \"beforeCreate\",\n                        { context, page }\n                    );\n\n                    const ddbData = {\n                        PK: PK_PAGE(pid),\n                        SK: `REV#${zeroPaddedVersion}`,\n                        TYPE: TYPE.PAGE,\n                        ...page\n                    };\n\n                    const latestPageKeys = { PK: PK_PAGE(pid), SK: \"L\" };\n\n                    await db\n                        .batch()\n                        .create({ ...defaults.db, data: ddbData })\n                        .create({\n                            ...defaults.db,\n                            data: { ...ddbData, ...latestPageKeys }\n                        })\n                        .create({\n                            ...defaults.esDb,\n                            data: {\n                                ...latestPageKeys,\n                                index: ES_DEFAULTS().index,\n                                data: getESLatestPageData(context, {\n                                    ...ddbData,\n                                    ...latestPageKeys\n                                })\n                            }\n                        })\n                        .execute();\n\n                    await executeCallbacks<PagePlugin[\"afterCreate\"]>(pagePlugins, \"afterCreate\", {\n                        context,\n                        page\n                    });\n\n                    return omit(ddbData, [\"PK\", \"SK\", \"content\"]) as any;\n                },\n\n                async createFrom(from) {\n                    const permission = await checkBasePermissions(context, PERMISSION_NAME, {\n                        rwd: \"w\"\n                    });\n\n                    const [fromPid, fromVersion] = from.split(\"#\");\n\n                    const [[[page]], [[latestPage]]] = await db\n                        .batch<[[Page]], [[Page]]>()\n                        .read({\n                            ...defaults.db,\n                            query: {\n                                PK: PK_PAGE(fromPid),\n                                SK: `REV#${fromVersion}`\n                            }\n                        })\n                        .read({\n                            ...defaults.db,\n                            query: {\n                                PK: PK_PAGE(fromPid),\n                                SK: \"L\"\n                            }\n                        })\n                        .execute();\n\n                    if (!page) {\n                        throw new NotFoundError(`Page \"${from}\" not found.`);\n                    }\n\n                    // Must not be able to create a new page (revision) from a page of another author.\n                    if (permission?.own === true) {\n                        const identity = context.security.getIdentity();\n                        if (page.ownedBy.id !== identity.id) {\n                            throw new NotAuthorizedError();\n                        }\n                    }\n\n                    const nextVersion = latestPage.version + 1;\n                    const zeroPaddedNextVersion = getZeroPaddedVersionNumber(nextVersion);\n                    const nextId = `${fromPid}#${zeroPaddedNextVersion}`;\n                    const identity = context.security.getIdentity();\n\n                    const data: Record<string, any> = {\n                        ...page,\n                        SK: `REV#${zeroPaddedNextVersion}`,\n                        id: nextId,\n                        status: STATUS_DRAFT,\n                        locked: false,\n                        publishedOn: null,\n                        version: nextVersion,\n                        savedOn: new Date().toISOString(),\n                        createdFrom: from,\n                        createdOn: new Date().toISOString(),\n                        createdBy: {\n                            id: identity.id,\n                            displayName: identity.displayName,\n                            type: identity.type\n                        }\n                    };\n\n                    await executeCallbacks<PagePlugin[\"beforeCreate\"]>(\n                        pagePlugins,\n                        \"beforeCreate\",\n                        {\n                            context,\n                            page: data as Page\n                        }\n                    );\n\n                    const latestPageKeys = {\n                        PK: PK_PAGE(fromPid),\n                        SK: \"L\"\n                    };\n\n                    const batch = db\n                        .batch()\n                        .create({ ...defaults.db, data })\n                        .update({\n                            ...defaults.db,\n                            query: latestPageKeys,\n                            data: {\n                                ...data,\n                                ...latestPageKeys\n                            }\n                        });\n\n                    // If the new revision is visible in \"latest\" page lists, then update the ES index.\n                    if (get(data, \"visibility.list.latest\") !== false) {\n                        batch.update({\n                            ...defaults.esDb,\n                            query: latestPageKeys,\n                            data: {\n                                ...latestPageKeys,\n                                index: ES_DEFAULTS().index,\n                                data: getESLatestPageData(context, data as Page)\n                            }\n                        });\n                    }\n\n                    await batch.execute();\n\n                    await executeCallbacks<PagePlugin[\"afterCreate\"]>(pagePlugins, \"afterCreate\", {\n                        page: data as Page,\n                        context\n                    });\n\n                    // Extract compressed page content.\n                    data.content = await extractContent(data.content);\n\n                    return data as Page;\n                },\n\n                async update(id, data) {\n                    const permission = await checkBasePermissions(context, PERMISSION_NAME, {\n                        rwd: \"w\"\n                    });\n\n                    const [pid, rev] = id.split(\"#\");\n\n                    const [[[existingPage]], [[existingLatestPage]]] = await db\n                        .batch()\n                        .read({\n                            ...defaults.db,\n                            query: { PK: PK_PAGE(pid), SK: `REV#${rev}` },\n                            limit: 1\n                        })\n                        .read({\n                            ...defaults.db,\n                            query: { PK: PK_PAGE(pid), SK: \"L\" },\n                            limit: 1\n                        })\n                        .execute();\n\n                    if (!existingPage) {\n                        throw new NotFoundError(`Page \"${id}\" not found.`);\n                    }\n\n                    if (existingPage.locked) {\n                        throw new Error(`Cannot update page because it's locked.`);\n                    }\n\n                    const identity = context.security.getIdentity();\n                    checkOwnPermissions(identity, permission, existingPage, \"ownedBy\");\n\n                    const updateData: Partial<Page> = {\n                        ...data,\n                        savedOn: new Date().toISOString()\n                    };\n\n                    await executeCallbacks<PagePlugin[\"beforeUpdate\"]>(\n                        pagePlugins,\n                        \"beforeUpdate\",\n                        {\n                            context,\n                            existingPage,\n                            inputData: data,\n                            updateData\n                        }\n                    );\n\n                    const newContent = updateData.content;\n                    if (newContent) {\n                        updateData.content = compressContent(newContent);\n                    }\n\n                    const newPageData = { ...existingPage, ...updateData };\n                    const newLatestPage = { ...existingLatestPage, ...updateData };\n\n                    const batch = db.batch().update({\n                        ...defaults.db,\n                        query: { PK: PK_PAGE(pid), SK: `REV#${rev}` },\n                        data: newPageData\n                    });\n\n                    // If we updated the latest rev, make sure the changes are propagated to \"L\" record and ES.\n                    if (newLatestPage.id === id) {\n                        const latestPageKeys = { PK: PK_PAGE(pid), SK: \"L\" };\n\n                        batch.update({\n                            ...defaults.db,\n                            query: latestPageKeys,\n                            data: newLatestPage\n                        });\n\n                        // Update the ES index according to the value of the \"latest pages lists\" visibility setting.\n                        if (get(newPageData, \"visibility.list.latest\") !== false) {\n                            batch.update({\n                                ...defaults.esDb,\n                                query: latestPageKeys,\n                                data: {\n                                    ...latestPageKeys,\n                                    index: ES_DEFAULTS().index,\n                                    data: getESLatestPageData(context, newPageData)\n                                }\n                            });\n                        } else {\n                            batch.delete({\n                                ...defaults.esDb,\n                                query: latestPageKeys\n                            });\n                        }\n                    }\n\n                    await batch.execute();\n\n                    await executeCallbacks<PagePlugin[\"afterUpdate\"]>(pagePlugins, \"afterUpdate\", {\n                        context,\n                        page: newPageData as Page,\n                        inputData: data\n                    });\n\n                    return {\n                        ...newPageData,\n                        content: newContent || newPageData.content\n                    };\n                },\n\n                async delete(pageId) {\n                    const permission = await checkBasePermissions(context, PERMISSION_NAME, {\n                        rwd: \"d\"\n                    });\n\n                    const [pid, rev] = pageId.split(\"#\");\n                    const PAGE_PK = PK_PAGE(pid);\n\n                    // 1. Load the page and latest / published page (rev) data.\n                    const [[[page]], [[latestPage]], [[publishedPage]]] = await db\n                        .batch<[[Page]], [[Page]], [[Page]]>()\n                        .read({\n                            ...defaults.db,\n                            query: { PK: PAGE_PK, SK: `REV#${rev}` }\n                        })\n                        .read({\n                            ...defaults.db,\n                            query: { PK: PAGE_PK, SK: \"L\" }\n                        })\n                        .read({\n                            ...defaults.db,\n                            query: { PK: PAGE_PK, SK: \"P\" }\n                        })\n                        .execute();\n\n                    // 2. Do a couple of checks.\n                    if (!page) {\n                        throw new NotFoundError(`Page \"${pageId}\" not found.`);\n                    }\n\n                    const identity = context.security.getIdentity();\n                    checkOwnPermissions(identity, permission, page, \"ownedBy\");\n\n                    const settings = await context.pageBuilder.settings.default.getCurrent();\n                    const pages = settings?.pages || {};\n                    for (const key in pages) {\n                        if (pages[key] === page.pid) {\n                            throw new Error(`Cannot delete page because it's set as ${key}.`);\n                        }\n                    }\n\n                    // 3. Let's start updating. But first, let's trigger before-delete hook callbacks.\n                    await executeCallbacks<PagePlugin[\"beforeDelete\"]>(\n                        pagePlugins,\n                        \"beforeDelete\",\n                        {\n                            context,\n                            page,\n                            latestPage,\n                            publishedPage\n                        }\n                    );\n\n                    // Before we continue, note that if `publishedPageData` exists, then `publishedPagePathData`\n                    // also exists. And to delete it, we can read `publishedPageData.path` to get its SK.\n                    // There can't be a situation where just one record exists, there's always gonna be both.\n\n                    // If we are deleting the initial version, we need to remove all versions and all of the meta data.\n                    if (page.version === 1) {\n                        // 4.1. We delete pages in batches of 15.\n                        let publishedPathEntryDeleted = false;\n                        while (true) {\n                            const [pageItemCollection] = await db.read({\n                                ...defaults.db,\n                                limit: 15,\n                                query: { PK: PAGE_PK, SK: { $gte: \" \" } }\n                            });\n\n                            if (pageItemCollection.length === 0) {\n                                break;\n                            }\n\n                            const batch = db.batch();\n                            for (let i = 0; i < pageItemCollection.length; i++) {\n                                const item = pageItemCollection[i];\n                                if (item.status === \"published\" && !publishedPathEntryDeleted) {\n                                    publishedPathEntryDeleted = true;\n                                    batch.delete({\n                                        ...defaults.db,\n                                        query: { PK: PK_PAGE_PUBLISHED_PATH(), SK: item.path }\n                                    });\n                                }\n\n                                batch.delete({\n                                    ...defaults.db,\n                                    query: { PK: item.PK, SK: item.SK }\n                                });\n                            }\n\n                            await batch.execute();\n                        }\n\n                        // 4.2. Finally, delete data from ES.\n                        await db\n                            .batch()\n                            .delete({\n                                ...defaults.esDb,\n                                query: {\n                                    PK: PAGE_PK,\n                                    SK: \"L\"\n                                }\n                            })\n                            .delete({\n                                ...defaults.esDb,\n                                query: {\n                                    PK: PAGE_PK,\n                                    SK: \"P\"\n                                }\n                            })\n                            .execute();\n\n                        await executeCallbacks<PagePlugin[\"afterDelete\"]>(\n                            pagePlugins,\n                            \"afterDelete\",\n                            {\n                                context,\n                                page,\n                                latestPage,\n                                publishedPage\n                            }\n                        );\n\n                        return [page, null];\n                    }\n\n                    // 5. If we are deleting a specific version (version > 1)...\n\n                    // 6.1. Delete the actual page entry.\n                    const batch = db.batch().delete({\n                        ...defaults.db,\n                        query: { PK: PAGE_PK, SK: `REV#${rev}` }\n                    });\n\n                    // 6.2. If the page is published, remove published data, both from DB and ES.\n                    if (publishedPage && publishedPage.id === page.id) {\n                        batch\n                            .delete({\n                                ...defaults.db,\n                                query: {\n                                    PK: PAGE_PK,\n                                    SK: \"P\"\n                                }\n                            })\n                            .delete({\n                                ...defaults.db,\n                                query: {\n                                    PK: PK_PAGE_PUBLISHED_PATH(),\n                                    SK: publishedPage.path\n                                }\n                            })\n                            .delete({\n                                ...defaults.esDb,\n                                query: {\n                                    PK: PAGE_PK,\n                                    SK: \"P\"\n                                }\n                            });\n                    }\n\n                    // 6.3. If the page is latest, assign the previously latest page as the new latest.\n                    // Updates must be made again both on DB and ES side.\n                    let newLatestPage;\n                    if (latestPage.id === page.id) {\n                        [[newLatestPage]] = await db.read({\n                            ...defaults.db,\n                            query: { PK: PAGE_PK, SK: { $lt: `REV#${rev}` } },\n                            sort: { SK: -1 },\n                            limit: 1\n                        });\n\n                        // Update latest page data.\n                        batch\n                            .update({\n                                ...defaults.db,\n                                query: {\n                                    PK: PAGE_PK,\n                                    SK: \"L\"\n                                },\n                                data: {\n                                    ...newLatestPage,\n                                    PK: PAGE_PK,\n                                    SK: \"L\"\n                                }\n                            })\n                            .update({\n                                ...defaults.esDb,\n                                query: {\n                                    PK: PAGE_PK,\n                                    SK: \"L\"\n                                },\n                                data: {\n                                    PK: PAGE_PK,\n                                    SK: \"L\",\n                                    index: ES_DEFAULTS().index,\n                                    data: getESLatestPageData(context, newLatestPage)\n                                }\n                            });\n                    }\n\n                    await batch.execute();\n\n                    await executeCallbacks<PagePlugin[\"afterDelete\"]>(pagePlugins, \"afterDelete\", {\n                        context,\n                        page,\n                        latestPage,\n                        publishedPage\n                    });\n\n                    // 7. Done. We return both the deleted page, and the new latest one (if there is one).\n                    return [page, newLatestPage];\n                },\n\n                async publish(pageId: string) {\n                    const permission = await checkBasePermissions<PageSecurityPermission>(\n                        context,\n                        PERMISSION_NAME,\n                        {\n                            pw: \"p\"\n                        }\n                    );\n\n                    const [pid, rev] = pageId.split(\"#\");\n                    const PAGE_PK = PK_PAGE(pid);\n\n                    // `publishedPageData` will give us a record that contains `id` and `path, which tell us\n                    // the current revision and over which path it has been published, respectively.\n                    const [[[page]], [[publishedPage]], [[latestPage]]] = await db\n                        .batch<[[Page]], [[Page]], [[Page]]>()\n                        .read({\n                            ...defaults.db,\n                            query: { PK: PAGE_PK, SK: `REV#${rev}` }\n                        })\n                        .read({\n                            ...defaults.db,\n                            query: {\n                                PK: PAGE_PK,\n                                SK: \"P\"\n                            }\n                        })\n                        .read({\n                            ...defaults.db,\n                            query: {\n                                PK: PAGE_PK,\n                                SK: \"L\"\n                            }\n                        })\n                        .execute();\n\n                    if (!page) {\n                        throw new NotFoundError(`Page \"${pageId}\" not found.`);\n                    }\n\n                    const identity = context.security.getIdentity();\n                    checkOwnPermissions(identity, permission, page, \"ownedBy\");\n\n                    if (page.status === STATUS_PUBLISHED) {\n                        throw new NotFoundError(`Page \"${pageId}\" is already published.`);\n                    }\n\n                    const [[publishedPageOnPath]] = await db.read<Page>({\n                        ...defaults.db,\n                        query: {\n                            PK: PK_PAGE_PUBLISHED_PATH(),\n                            SK: page.path\n                        }\n                    });\n\n                    await executeCallbacks<PagePlugin[\"beforePublish\"]>(\n                        pagePlugins,\n                        \"beforePublish\",\n                        {\n                            context,\n                            page,\n                            latestPage,\n                            publishedPage\n                        }\n                    );\n\n                    const pathTakenByAnotherPage =\n                        publishedPageOnPath && publishedPageOnPath.pid !== page.pid;\n\n                    // If this is true, let's unpublish the page first. Note that we're not talking about this\n                    // same page, but a previous revision. We're talking about a completely different page\n                    // (with different PID). Remember that page ID equals `PID#version`.\n                    if (pathTakenByAnotherPage) {\n                        // Note two things here...\n                        // 1) It is possible that this call is about to try to unpublish a page that is set as\n                        // a special page (home / 404). In that case, this whole process will fail, and that\n                        // is to be expected. Maybe we could think of a better solution in the future, but for\n                        // now, it works like this. If there was only more ⏱.\n                        // 2) If a user doesn't have the unpublish permission, again, the whole action will fail.\n                        await this.unpublish(publishedPageOnPath.id);\n                    }\n\n                    // Now that the other page has been unpublished, we can continue with publish the current one.\n\n                    // Change loaded page's status to published.\n                    page.status = STATUS_PUBLISHED;\n                    page.locked = true;\n                    page.publishedOn = new Date().toISOString();\n\n                    // We need to issue a couple of updates.\n                    const batch = db.batch();\n\n                    // 1. Update the page in the database first.\n                    batch.update({\n                        ...defaults.db,\n                        query: {\n                            PK: PAGE_PK,\n                            SK: `REV#${rev}`\n                        },\n                        data: page\n                    });\n\n                    // If we just published the latest version, update the latest revision entry too.\n                    if (latestPage.id === pageId) {\n                        batch.update({\n                            ...defaults.db,\n                            query: {\n                                PK: PAGE_PK,\n                                SK: \"L\"\n                            },\n                            data: { ...page, PK: PAGE_PK, SK: \"L\" }\n                        });\n                    }\n\n                    if (publishedPage) {\n                        const [, publishedRev] = publishedPage.id.split(\"#\");\n                        batch\n                            .update({\n                                ...defaults.db,\n                                query: {\n                                    PK: PAGE_PK,\n                                    SK: `REV#${publishedRev}`\n                                },\n                                data: {\n                                    ...publishedPage,\n                                    status: STATUS_UNPUBLISHED,\n                                    PK: PAGE_PK,\n                                    SK: `REV#${publishedRev}`\n                                }\n                            })\n                            .update({\n                                ...defaults.db,\n                                query: {\n                                    PK: PAGE_PK,\n                                    SK: \"P\"\n                                },\n                                data: { ...page, PK: PAGE_PK, SK: \"P\" }\n                            });\n\n                        // If the paths are different, delete previous published-page-on-path entry.\n                        if (publishedPage.path !== page.path) {\n                            batch\n                                .delete({\n                                    ...defaults.db,\n                                    query: {\n                                        PK: PK_PAGE_PUBLISHED_PATH(),\n                                        SK: publishedPage.path\n                                    }\n                                })\n                                .create({\n                                    ...defaults.db,\n                                    data: {\n                                        ...page,\n                                        PK: PK_PAGE_PUBLISHED_PATH(),\n                                        SK: page.path\n                                    }\n                                });\n                        } else {\n                            batch.update({\n                                ...defaults.db,\n                                query: {\n                                    PK: PK_PAGE_PUBLISHED_PATH(),\n                                    SK: page.path\n                                },\n                                data: {\n                                    ...page,\n                                    PK: PK_PAGE_PUBLISHED_PATH(),\n                                    SK: page.path\n                                }\n                            });\n                        }\n                    } else {\n                        batch\n                            .create({\n                                ...defaults.db,\n                                data: {\n                                    ...page,\n                                    PK: PAGE_PK,\n                                    SK: \"P\"\n                                }\n                            })\n                            .create({\n                                ...defaults.db,\n                                data: {\n                                    ...page,\n                                    PK: PK_PAGE_PUBLISHED_PATH(),\n                                    SK: page.path\n                                }\n                            });\n                    }\n\n                    // If we are publishing the latest revision, let's also update the latest revision entry's\n                    // status in ES. Also, if we are publishing the latest revision and the \"LATEST page lists\n                    // visibility\" is not false, then we need to update the latest page revision entry in ES.\n                    if (\n                        latestPage?.id === pageId &&\n                        get(page, \"visibility.list.latest\") !== false\n                    ) {\n                        batch.update({\n                            ...defaults.esDb,\n                            query: {\n                                PK: PAGE_PK,\n                                SK: \"L\"\n                            },\n                            data: {\n                                PK: PAGE_PK,\n                                SK: \"L\",\n                                index: ES_DEFAULTS().index,\n                                data: getESLatestPageData(context, page)\n                            }\n                        });\n                    }\n\n                    // Update the published revision entry in ES,\n                    // if the \"PUBLISHED page lists visibility\" setting is not explicitly set to false.\n                    if (get(page, \"visibility.list.published\") !== false) {\n                        batch.create({\n                            ...defaults.esDb,\n                            data: {\n                                PK: PAGE_PK,\n                                SK: \"P\",\n                                index: ES_DEFAULTS().index,\n                                data: getESPublishedPageData(context, {\n                                    ...page,\n                                    id: pageId,\n                                    status: STATUS_PUBLISHED,\n                                    locked: true\n                                })\n                            }\n                        });\n                    } else {\n                        batch.delete({\n                            ...defaults.esDb,\n                            query: {\n                                PK: PAGE_PK,\n                                SK: \"P\"\n                            }\n                        });\n                    }\n\n                    await batch.execute();\n\n                    await executeCallbacks<PagePlugin[\"afterPublish\"]>(\n                        pagePlugins,\n                        \"afterPublish\",\n                        {\n                            context,\n                            page,\n                            latestPage,\n                            publishedPage\n                        }\n                    );\n\n                    return page;\n                },\n\n                async unpublish(pageId: string) {\n                    const permission = await checkBasePermissions<PageSecurityPermission>(\n                        context,\n                        PERMISSION_NAME,\n                        {\n                            pw: \"u\"\n                        }\n                    );\n\n                    const [pid, rev] = pageId.split(\"#\");\n                    const PAGE_PK = PK_PAGE(pid);\n\n                    const [[[page]], [[publishedPage]], [[latestPage]]] = await db\n                        .batch()\n                        .read({\n                            ...defaults.db,\n                            query: { PK: PAGE_PK, SK: `REV#${rev}` },\n                            limit: 1\n                        })\n                        .read({\n                            ...defaults.db,\n                            limit: 1,\n                            query: {\n                                PK: PAGE_PK,\n                                SK: \"P\"\n                            }\n                        })\n                        .read({\n                            ...defaults.db,\n                            limit: 1,\n                            query: {\n                                PK: PAGE_PK,\n                                SK: \"L\"\n                            }\n                        })\n                        .execute();\n\n                    if (!page) {\n                        throw new NotFoundError(`Page \"${pageId}\" not found.`);\n                    }\n\n                    const identity = context.security.getIdentity();\n                    checkOwnPermissions(identity, permission, page, \"ownedBy\");\n\n                    if (!publishedPage || publishedPage.id !== pageId) {\n                        throw new Error(`Page \"${pageId}\" is not published.`);\n                    }\n\n                    const settings = await context.pageBuilder.settings.default.getCurrent();\n                    const pages = settings?.pages || {};\n                    for (const key in pages) {\n                        if (pages[key] === page.pid) {\n                            throw new Error(`Cannot unpublish page because it's set as ${key}.`);\n                        }\n                    }\n\n                    await executeCallbacks<PagePlugin[\"beforeUnpublish\"]>(\n                        pagePlugins,\n                        \"beforeUnpublish\",\n                        {\n                            context,\n                            page\n                        }\n                    );\n\n                    page.status = STATUS_UNPUBLISHED;\n\n                    const batch = db\n                        .batch()\n                        .delete({\n                            ...defaults.db,\n                            query: {\n                                PK: PAGE_PK,\n                                SK: \"P\"\n                            }\n                        })\n                        .delete({\n                            ...defaults.db,\n                            query: {\n                                PK: PK_PAGE_PUBLISHED_PATH(),\n                                SK: publishedPage.path\n                            }\n                        })\n                        .update({\n                            ...defaults.db,\n                            query: {\n                                PK: PAGE_PK,\n                                SK: `REV#${rev}`\n                            },\n                            data: page\n                        });\n\n                    // If we are unpublishing the latest revision, let's also update the latest revision entry's\n                    // status in ES. We can only do that if the entry actually exists, or in other words, if the\n                    // published page's \"LATEST pages lists visibility\" setting is not set to false.\n                    if (latestPage.id === pageId && get(page, \"visibility.list.latest\") !== false) {\n                        batch.update({\n                            ...defaults.esDb,\n                            query: {\n                                PK: PAGE_PK,\n                                SK: \"L\"\n                            },\n                            data: {\n                                PK: PAGE_PK,\n                                SK: \"L\",\n                                index: ES_DEFAULTS().index,\n                                data: getESLatestPageData(context, page)\n                            }\n                        });\n                    }\n\n                    // And of course, delete the published revision entry in ES.\n                    if (get(page, \"visibility.list.published\") !== false) {\n                        batch.delete({\n                            ...defaults.esDb,\n                            query: {\n                                PK: PAGE_PK,\n                                SK: \"P\"\n                            }\n                        });\n                    }\n\n                    await batch.execute();\n\n                    await executeCallbacks<PagePlugin[\"afterUnpublish\"]>(\n                        pagePlugins,\n                        \"afterUnpublish\",\n                        {\n                            context,\n                            page\n                        }\n                    );\n\n                    return page;\n                },\n\n                async requestReview(pageId: string) {\n                    const permission = await checkBasePermissions(context, PERMISSION_NAME, {\n                        pw: \"r\"\n                    });\n\n                    const [pid, rev] = pageId.split(\"#\");\n                    const PAGE_PK = PK_PAGE(pid);\n\n                    const [[[page]], [[latestPageData]]] = await db\n                        .batch()\n                        .read({\n                            ...defaults.db,\n                            query: { PK: PAGE_PK, SK: `REV#${rev}` }\n                        })\n                        .read({\n                            ...defaults.db,\n                            query: {\n                                PK: PAGE_PK,\n                                SK: \"L\"\n                            }\n                        })\n                        .execute();\n\n                    if (!page) {\n                        throw new NotFoundError(`Page \"${pageId}\" not found.`);\n                    }\n\n                    const allowedStatuses = [STATUS_DRAFT, STATUS_CHANGES_REQUESTED];\n                    if (!allowedStatuses.includes(page.status)) {\n                        throw new Error(\n                            `Cannot request review - page is not a draft nor a change request has been issued.`\n                        );\n                    }\n\n                    const identity = context.security.getIdentity();\n                    checkOwnPermissions(identity, permission, page, \"ownedBy\");\n\n                    // Change loaded page's status to `reviewRequested`.\n                    page.status = STATUS_REVIEW_REQUESTED;\n                    page.locked = true;\n\n                    const batch = db.batch().update({\n                        ...defaults.db,\n                        query: {\n                            PK: PAGE_PK,\n                            SK: `REV#${rev}`\n                        },\n                        data: page\n                    });\n\n                    // If we updated the latest version, then make sure the changes are propagated to ES too.\n                    if (latestPageData.id === pageId) {\n                        // 0nly update if the \"LATEST pages lists visibility\" is not set to false.\n                        if (get(page, \"visibility.list.latest\") !== false) {\n                            batch.update({\n                                ...defaults.esDb,\n                                query: {\n                                    PK: PAGE_PK,\n                                    SK: \"L\"\n                                },\n                                data: {\n                                    PK: PAGE_PK,\n                                    SK: \"L\",\n                                    index: ES_DEFAULTS().index,\n                                    data: getESLatestPageData(context, page)\n                                }\n                            });\n                        }\n                    }\n\n                    await batch.execute();\n\n                    return page;\n                },\n\n                async requestChanges(pageId: string) {\n                    const permission = await checkBasePermissions(context, PERMISSION_NAME, {\n                        pw: \"c\"\n                    });\n\n                    const [pid, rev] = pageId.split(\"#\");\n                    const PAGE_PK = PK_PAGE(pid);\n\n                    const [[[page]], [[latestPageData]]] = await db\n                        .batch()\n                        .read({\n                            ...defaults.db,\n                            query: { PK: PAGE_PK, SK: `REV#${rev}` }\n                        })\n                        .read({\n                            ...defaults.db,\n                            query: {\n                                PK: PAGE_PK,\n                                SK: \"L\"\n                            }\n                        })\n                        .execute();\n\n                    if (!page) {\n                        throw new NotFoundError(`Page \"${pageId}\" not found.`);\n                    }\n\n                    if (page.status !== STATUS_REVIEW_REQUESTED) {\n                        throw new Error(\n                            `Cannot request changes on a page that's not under review.`,\n                            \"REQUESTED_CHANGES_ON_PAGE_REVISION_NOT_UNDER_REVIEW\"\n                        );\n                    }\n\n                    const identity = context.security.getIdentity();\n                    if (page.createdBy.id === identity.id) {\n                        throw new Error(\n                            \"Cannot request changes on page revision you created.\",\n                            \"REQUESTED_CHANGES_ON_PAGE_REVISION_YOU_CREATED\"\n                        );\n                    }\n\n                    checkOwnPermissions(identity, permission, page, \"ownedBy\");\n\n                    // Change loaded page's status to published.\n                    page.status = STATUS_CHANGES_REQUESTED;\n                    page.locked = false;\n\n                    const batch = await db.batch().update({\n                        ...defaults.db,\n                        query: {\n                            PK: PAGE_PK,\n                            SK: `REV#${rev}`\n                        },\n                        data: page\n                    });\n\n                    // If we updated the latest version, then make sure the changes are propagated to ES too.\n                    if (latestPageData.id === pageId) {\n                        // Only update if the \"LATEST pages lists visibility\" is not set to false.\n                        if (get(page, \"visibility.list.latest\") !== false) {\n                            batch.update({\n                                ...defaults.esDb,\n                                query: {\n                                    PK: PAGE_PK,\n                                    SK: \"L\"\n                                },\n                                data: {\n                                    PK: PAGE_PK,\n                                    SK: \"L\",\n                                    index: ES_DEFAULTS().index,\n                                    data: getESLatestPageData(context, page)\n                                }\n                            });\n                        }\n                    }\n\n                    await batch.execute();\n\n                    return page;\n                },\n\n                prerendering: {\n                    async render(args) {\n                        const current = await context.pageBuilder.settings.default.getCurrent();\n                        const appUrl = get(current, \"prerendering.app.url\");\n                        const storageName = get(current, \"prerendering.storage.name\");\n\n                        if (!appUrl || !storageName) {\n                            return;\n                        }\n\n                        const meta = merge(current?.prerendering?.meta, {\n                            tenant: context.tenancy.getCurrentTenant().id,\n                            locale: i18nContent.getLocale().code\n                        });\n\n                        const { paths, tags } = args;\n\n                        const dbNamespace = \"T#\" + context.tenancy.getCurrentTenant().id;\n\n                        if (Array.isArray(paths)) {\n                            await context.prerenderingServiceClient.render(\n                                paths.map(item => ({\n                                    url: appUrl + item.path,\n                                    configuration: merge(\n                                        {\n                                            meta,\n                                            storage: {\n                                                folder: trimStart(item.path, \"/\"),\n                                                name: storageName\n                                            },\n                                            db: {\n                                                namespace: dbNamespace\n                                            }\n                                        },\n                                        item.configuration\n                                    )\n                                }))\n                            );\n                        }\n\n                        if (Array.isArray(tags)) {\n                            await context.prerenderingServiceClient.queue.add(\n                                tags.map(item => ({\n                                    render: {\n                                        tag: item.tag,\n                                        configuration: merge(\n                                            {\n                                                db: {\n                                                    namespace: dbNamespace\n                                                }\n                                            },\n                                            item.configuration\n                                        )\n                                    }\n                                }))\n                            );\n                        }\n                    },\n                    async flush(args) {\n                        const current = await context.pageBuilder.settings.default.getCurrent();\n                        const appUrl = get(current, \"prerendering.app.url\");\n                        const storageName = get(current, \"prerendering.storage.name\");\n\n                        if (!storageName) {\n                            return;\n                        }\n\n                        const { paths, tags } = args;\n\n                        const dbNamespace = \"T#\" + context.tenancy.getCurrentTenant().id;\n\n                        if (Array.isArray(paths)) {\n                            await context.prerenderingServiceClient.flush(\n                                paths.map<FlushArgs>(p => ({\n                                    url: appUrl + p.path,\n                                    // Configuration is mainly static (defined here), but some configuration\n                                    // overrides can arrive via the call args, so let's do a merge here.\n                                    configuration: merge(\n                                        {\n                                            db: {\n                                                namespace: dbNamespace\n                                            }\n                                        },\n                                        p.configuration\n                                    )\n                                }))\n                            );\n                        }\n\n                        if (Array.isArray(tags)) {\n                            await context.prerenderingServiceClient.queue.add(\n                                tags.map(item => ({\n                                    flush: {\n                                        tag: item.tag,\n                                        configuration: merge(\n                                            {\n                                                db: {\n                                                    namespace: dbNamespace\n                                                }\n                                            },\n                                            item.configuration\n                                        )\n                                    }\n                                }))\n                            );\n                        }\n                    }\n                }\n            } as PagesCrud\n        };\n    }\n};\n\nexport default plugin;\n"],"file":"pages.crud.js"}