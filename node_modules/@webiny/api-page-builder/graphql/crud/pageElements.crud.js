"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _mdbid = _interopRequireDefault(require("mdbid"));

var _fields = require("@commodo/fields");

var _commodoFieldsObject = require("commodo-fields-object");

var _validation = require("@webiny/validation");

var _defaults = _interopRequireDefault(require("./utils/defaults"));

var _getPKPrefix = _interopRequireDefault(require("./utils/getPKPrefix"));

var _checkBasePermissions = _interopRequireDefault(require("./utils/checkBasePermissions"));

var _checkOwnPermissions = _interopRequireDefault(require("./utils/checkOwnPermissions"));

var _handlerGraphql = require("@webiny/handler-graphql");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const CreateDataModel = (0, _fields.withFields)({
  name: (0, _fields.string)({
    validation: _validation.validation.create("required,maxLength:100")
  }),
  type: (0, _fields.string)({
    validation: _validation.validation.create("required,in:element:block")
  }),
  category: (0, _fields.string)({
    validation: _validation.validation.create("required,maxLength:100")
  }),
  content: (0, _commodoFieldsObject.object)({
    validation: _validation.validation.create("required")
  }),
  preview: (0, _commodoFieldsObject.object)({
    validation: _validation.validation.create("required")
  })
})();
const UpdateDataModel = (0, _fields.withFields)({
  name: (0, _fields.string)({
    validation: _validation.validation.create("maxLength:100")
  }),
  type: (0, _fields.string)({
    validation: _validation.validation.create("in:element:block")
  }),
  category: (0, _fields.string)({
    validation: _validation.validation.create("maxLength:100")
  }),
  content: (0, _commodoFieldsObject.object)(),
  preview: (0, _commodoFieldsObject.object)()
})();
const TYPE = "pb.pageElement";
const PERMISSION_NAME = "pb.page";
const plugin = {
  type: "context",

  async apply(context) {
    const {
      db
    } = context;

    const PK = () => `${(0, _getPKPrefix.default)(context)}PE`;

    context.pageBuilder = _objectSpread(_objectSpread({}, context.pageBuilder), {}, {
      pageElements: {
        async get(id) {
          const permission = await (0, _checkBasePermissions.default)(context, PERMISSION_NAME, {
            rwd: "r"
          });
          const [[pageElement]] = await db.read(_objectSpread(_objectSpread({}, _defaults.default.db), {}, {
            query: {
              PK: PK(),
              SK: id
            },
            limit: 1
          }));

          if (!pageElement) {
            return null;
          }

          const identity = context.security.getIdentity();
          (0, _checkOwnPermissions.default)(identity, permission, pageElement);
          return pageElement;
        },

        async list() {
          const permission = await (0, _checkBasePermissions.default)(context, PERMISSION_NAME, {
            rwd: "r"
          });
          const [pageElements] = await db.read(_objectSpread(_objectSpread({}, _defaults.default.db), {}, {
            query: {
              PK: PK(),
              SK: {
                $gt: " "
              }
            }
          })); // If user can only manage own records, let's check if he owns the loaded one.

          if (permission.own) {
            const identity = context.security.getIdentity();
            return pageElements.filter(item => item.createdBy.id === identity.id);
          }

          return pageElements;
        },

        async create(data) {
          await (0, _checkBasePermissions.default)(context, PERMISSION_NAME, {
            rwd: "w"
          });
          const createDataModel = new CreateDataModel().populate(data);
          await createDataModel.validate();
          const id = (0, _mdbid.default)();
          const identity = context.security.getIdentity();
          const createData = Object.assign(await createDataModel.toJSON(), {
            PK: PK(),
            SK: id,
            TYPE,
            tenant: context.tenancy.getCurrentTenant().id,
            locale: context.i18nContent.getLocale().code,
            id,
            createdOn: new Date().toISOString(),
            createdBy: {
              id: identity.id,
              type: identity.type,
              displayName: identity.displayName
            }
          });
          await db.create(_objectSpread(_objectSpread({}, _defaults.default.db), {}, {
            data: createData
          }));
          return createData;
        },

        async update(id, data) {
          const permission = await (0, _checkBasePermissions.default)(context, PERMISSION_NAME, {
            rwd: "w"
          });
          const pageElement = await this.get(id);

          if (!pageElement) {
            throw new _handlerGraphql.NotFoundError(`Page element "${id}" not found.`);
          }

          const identity = context.security.getIdentity();
          (0, _checkOwnPermissions.default)(identity, permission, pageElement);
          const updateDataModel = new UpdateDataModel().populate(data);
          await updateDataModel.validate();
          const updateData = await updateDataModel.toJSON({
            onlyDirty: true
          });
          await db.update(_objectSpread(_objectSpread({}, _defaults.default.db), {}, {
            query: {
              PK: PK(),
              SK: id
            },
            data: updateData
          }));
          return _objectSpread(_objectSpread({}, pageElement), updateData);
        },

        async delete(slug) {
          const permission = await (0, _checkBasePermissions.default)(context, PERMISSION_NAME, {
            rwd: "d"
          });
          const pageElement = await this.get(slug);

          if (!pageElement) {
            throw new _handlerGraphql.NotFoundError(`PageElement "${slug}" not found.`);
          }

          const identity = context.security.getIdentity();
          (0, _checkOwnPermissions.default)(identity, permission, pageElement);
          await db.delete(_objectSpread(_objectSpread({}, _defaults.default.db), {}, {
            query: {
              PK: PK(),
              SK: slug
            }
          }));
          return pageElement;
        }

      }
    });
  }

};
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=pageElements.crud.js.map