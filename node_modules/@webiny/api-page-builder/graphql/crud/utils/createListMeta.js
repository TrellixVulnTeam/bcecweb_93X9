"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var _default = params => {
  const meta = _objectSpread({
    page: 0,
    limit: 0,
    totalCount: 0,
    totalPages: null,
    from: null,
    to: null,
    nextPage: null,
    previousPage: null
  }, params);

  if (meta.page && meta.limit) {
    meta.totalPages = Math.ceil(meta.totalCount / meta.limit);

    if (meta.totalCount) {
      meta.from = 1 + meta.limit * (meta.page - 1);
    } else {
      meta.from = 0;
    }

    meta.to = meta.limit * meta.page;

    if (meta.to > meta.totalCount) {
      meta.to = meta.totalCount;
    }

    meta.nextPage = meta.page < meta.totalPages ? meta.page + 1 : null;
    meta.previousPage = meta.page === 1 ? null : meta.page - 1;
  }

  return meta;
};

exports.default = _default;
//# sourceMappingURL=createListMeta.js.map