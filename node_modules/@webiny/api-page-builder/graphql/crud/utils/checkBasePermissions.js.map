{"version":3,"sources":["../../../../src/graphql/crud/utils/checkBasePermissions.ts"],"names":["context","name","check","i18nContent","checkI18NContentPermission","pbPagePermission","security","getPermission","NotAuthorizedError","rwd","pw","hasPw","permission","isCustom","Object","keys","length","includes"],"mappings":";;;;;;;;;AACA;;AACA;;eAGe,OACXA,OADW,EAEXC,IAFW,EAGXC,KAHW,KAIY;AACvB,QAAMF,OAAO,CAACG,WAAR,CAAoBC,0BAApB,EAAN;AACA,QAAMC,gBAAgB,GAAG,MAAML,OAAO,CAACM,QAAR,CAAiBC,aAAjB,CAA4CN,IAA5C,CAA/B;;AACA,MAAI,CAACI,gBAAL,EAAuB;AACnB,UAAM,IAAIG,+BAAJ,EAAN;AACH;;AAED,MAAIN,KAAK,CAACO,GAAN,IAAa,CAAC,qBAAOJ,gBAAP,EAAyBH,KAAK,CAACO,GAA/B,CAAlB,EAAuD;AACnD,UAAM,IAAID,+BAAJ,EAAN;AACH;;AAED,MAAIN,KAAK,CAACQ,EAAN,IAAY,CAACC,KAAK,CAAcN,gBAAd,EAAgCH,KAAK,CAACQ,EAAtC,CAAtB,EAAiE;AAC7D,UAAM,IAAIF,+BAAJ,EAAN;AACH;;AAED,SAAOH,gBAAP;AACH,C,EAED;;;;;AACA,MAAMM,KAAK,GAAG,CAAoCC,UAApC,EAA6DF,EAA7D,KAA4E;AACtF,QAAMG,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYH,UAAZ,EAAwBI,MAAxB,GAAiC,CAAlD,CADsF,CACjC;;AAErD,MAAI,CAACH,QAAL,EAAe;AACX;AACA,WAAO,IAAP;AACH;;AAED,MAAI,OAAOD,UAAU,CAAC,IAAD,CAAjB,KAA4B,QAAhC,EAA0C;AACtC,WAAO,KAAP;AACH;;AAED,SAAOA,UAAU,CAAC,IAAD,CAAV,CAAiBK,QAAjB,CAA0BP,EAA1B,CAAP;AACH,CAbD","sourcesContent":["import { PbContext } from \"../../../types\";\nimport { NotAuthorizedError } from \"@webiny/api-security\";\nimport hasRwd from \"./hasRwd\";\nimport { SecurityPermission } from \"@webiny/api-security/types\";\n\nexport default async <TPermission = SecurityPermission>(\n    context: PbContext,\n    name: string,\n    check: { rwd?: string; pw?: string }\n): Promise<TPermission> => {\n    await context.i18nContent.checkI18NContentPermission();\n    const pbPagePermission = await context.security.getPermission<TPermission>(name);\n    if (!pbPagePermission) {\n        throw new NotAuthorizedError();\n    }\n\n    if (check.rwd && !hasRwd(pbPagePermission, check.rwd)) {\n        throw new NotAuthorizedError();\n    }\n\n    if (check.pw && !hasPw<TPermission>(pbPagePermission, check.pw)) {\n        throw new NotAuthorizedError();\n    }\n\n    return pbPagePermission;\n};\n\n// Has publishing workflow permissions?\nconst hasPw = <TPermission = Record<string, any>>(permission: TPermission, pw: string) => {\n    const isCustom = Object.keys(permission).length > 1; // \"name\" key is always present\n\n    if (!isCustom) {\n        // Means it's a \"full-access\" permission.\n        return true;\n    }\n\n    if (typeof permission[\"pw\"] !== \"string\") {\n        return false;\n    }\n\n    return permission[\"pw\"].includes(pw);\n};\n"],"file":"checkBasePermissions.js"}