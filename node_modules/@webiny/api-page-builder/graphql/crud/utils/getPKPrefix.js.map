{"version":3,"sources":["../../../../src/graphql/crud/utils/getPKPrefix.ts"],"names":["context","options","prefix","locale","i18nContent","getLocale","code","Error","tenant","tenancy","getCurrentTenant","id"],"mappings":";;;;;;;;;AAGA;;eAOe,CAACA,OAAD,EAAuDC,OAAgB,GAAG,EAA1E,KAAiF;AAC5F,MAAIC,MAAM,GAAG,KAAb;;AAEA,MAAID,OAAO,CAACE,MAAR,KAAmB,KAAvB,EAA8B;AAC1B,QAAIA,MAAM,GAAGF,OAAO,CAACE,MAArB;;AACA,QAAIA,MAAM,KAAK,QAAf,EAAyB;AAAA;;AACrB,YAAM;AAAEC,QAAAA;AAAF,UAAkBJ,OAAxB;AACAG,MAAAA,MAAM,4BAAGC,WAAW,CAACC,SAAZ,EAAH,0DAAG,sBAAyBC,IAAlC;AACH;;AAED,QAAI,CAACH,MAAL,EAAa;AACT,YAAM,IAAII,cAAJ,CACD,gDADC,EAEF,wBAFE,CAAN;AAIH;;AACDL,IAAAA,MAAM,GAAI,KAAIC,MAAO,IAAGD,MAAO,EAA/B;AACH;;AAED,MAAID,OAAO,CAACO,MAAR,KAAmB,KAAvB,EAA8B;AAC1B,QAAIA,MAAM,GAAGP,OAAO,CAACO,MAArB;;AACA,QAAIA,MAAM,KAAK,QAAf,EAAyB;AAAA;;AACrB,YAAM;AAAEC,QAAAA;AAAF,UAAcT,OAApB;AACAQ,MAAAA,MAAM,4BAAGC,OAAO,CAACC,gBAAR,EAAH,0DAAG,sBAA4BC,EAArC;AACH;;AAED,QAAI,CAACH,MAAL,EAAa;AACT,YAAM,IAAID,cAAJ,CACD,gDADC,EAEF,wBAFE,CAAN;AAIH;;AACDL,IAAAA,MAAM,GAAI,KAAIM,MAAO,IAAGN,MAAO,EAA/B;AACH;;AACD,SAAOA,MAAP;AACH,C","sourcesContent":["import { I18NContentContext } from \"@webiny/api-i18n-content/types\";\nimport { TenancyContext } from \"@webiny/api-tenancy/types\";\nimport { Context } from \"@webiny/handler/types\";\nimport Error from \"@webiny/error\";\n\nexport type Options = {\n    tenant?: boolean | string;\n    locale?: boolean | string;\n};\n\nexport default (context: Context<TenancyContext, I18NContentContext>, options: Options = {}) => {\n    let prefix = \"PB#\";\n\n    if (options.locale !== false) {\n        let locale = options.locale;\n        if (locale !== \"string\") {\n            const { i18nContent } = context;\n            locale = i18nContent.getLocale()?.code;\n        }\n\n        if (!locale) {\n            throw new Error(\n                `Cannot construct primary key - locale missing.`,\n                \"PB_CANNOT_CONSTRUCT_PK\"\n            );\n        }\n        prefix = `L#${locale}#${prefix}`;\n    }\n\n    if (options.tenant !== false) {\n        let tenant = options.tenant;\n        if (tenant !== \"string\") {\n            const { tenancy } = context;\n            tenant = tenancy.getCurrentTenant()?.id;\n        }\n\n        if (!tenant) {\n            throw new Error(\n                `Cannot construct primary key - tenant missing.`,\n                \"PB_CANNOT_CONSTRUCT_PK\"\n            );\n        }\n        prefix = `T#${tenant}#${prefix}`;\n    }\n    return prefix;\n};\n"],"file":"getPKPrefix.js"}