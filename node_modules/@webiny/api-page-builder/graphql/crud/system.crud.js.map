{"version":3,"sources":["../../../src/graphql/crud/system.crud.ts"],"names":["type","apply","context","tenancy","db","keys","PK","getCurrentTenant","id","SK","pageBuilder","system","getVersion","read","defaults","query","version","setVersion","update","data","create","install","name","insertDemoData","fileManager","elasticsearch","hookPlugins","plugins","byType","InstallationPlugin","Error","index","es","body","exists","indices","settings","analysis","analyzer","lowercase_analyzer","filter","tokenizer","mappings","properties","property","fields","keyword","ignore_above","staticCategory","categories","get","slug","url","layout","dataLoaders","clearAll","fileIdToKeyMap","mainMenu","menus","title","description","pages","fmSettings","getSettings","welcomeToWebinyPageContent","srcPrefix","initialPages","path","content","notFoundPageData","visibility","latest","published","list","homePage","notFoundPage","Promise","all","map","then","page","publish","default","home","pid","notFound","WEBINY_VERSION","upgrade","identity","security","getIdentity","NotAuthorizedError","upgradePlugins","pl","app","plugin","deployedVersion","installedAppVersion","upgradeToVersion"],"mappings":"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","sourcesContent":["import Error from \"@webiny/error\";\nimport { NotAuthorizedError } from \"@webiny/api-security\";\nimport { UpgradePlugin } from \"@webiny/api-upgrade/types\";\nimport { getApplicablePlugin } from \"@webiny/api-upgrade\";\nimport executeCallbacks from \"./utils/executeCallbacks\";\nimport { preparePageData } from \"./install/welcome-to-webiny-page-data\";\nimport { notFoundPageData } from \"./install/notFoundPageData\";\nimport savePageAssets from \"./install/utils/savePageAssets\";\nimport defaults from \"./utils/defaults\";\nimport { PbContext } from \"~/types\";\nimport { InstallationPlugin } from \"~/plugins/InstallationPlugin\";\n\nexport default {\n    type: \"context\",\n    apply(context: PbContext) {\n        const { tenancy, db } = context;\n        const keys = () => ({ PK: `T#${tenancy.getCurrentTenant().id}#SYSTEM`, SK: \"PB\" });\n\n        context.pageBuilder = {\n            ...context.pageBuilder,\n            system: {\n                async getVersion() {\n                    const [[system]] = await db.read({\n                        ...defaults.db,\n                        query: keys()\n                    });\n\n                    return system ? system.version : null;\n                },\n                async setVersion(version: string) {\n                    const [[system]] = await db.read({\n                        ...defaults.db,\n                        query: keys()\n                    });\n\n                    if (system) {\n                        await db.update({\n                            ...defaults.db,\n                            query: keys(),\n                            data: {\n                                version\n                            }\n                        });\n                    } else {\n                        await db.create({\n                            ...defaults.db,\n                            data: {\n                                ...keys(),\n                                version\n                            }\n                        });\n                    }\n                },\n                async install({ name, insertDemoData }) {\n                    const { pageBuilder, fileManager, elasticsearch } = context;\n\n                    const hookPlugins = context.plugins.byType<InstallationPlugin>(\n                        InstallationPlugin.type\n                    );\n                    await executeCallbacks<InstallationPlugin[\"beforeInstall\"]>(\n                        hookPlugins,\n                        \"beforeInstall\",\n                        {\n                            context\n                        }\n                    );\n\n                    // Check whether the PB app is already installed\n                    const version = await pageBuilder.system.getVersion();\n                    if (version) {\n                        throw new Error(\"Page builder is already installed.\", \"PB_INSTALL_ABORTED\");\n                    }\n\n                    // 1. Create ES index if it doesn't already exist.\n                    const { index } = defaults.es(context);\n                    const { body: exists } = await elasticsearch.indices.exists({ index });\n                    if (!exists) {\n                        await elasticsearch.indices.create({\n                            index,\n                            body: {\n                                // need this part for sorting to work on text fields\n                                settings: {\n                                    analysis: {\n                                        analyzer: {\n                                            lowercase_analyzer: {\n                                                type: \"custom\",\n                                                filter: [\"lowercase\", \"trim\"],\n                                                tokenizer: \"keyword\"\n                                            }\n                                        }\n                                    }\n                                },\n                                mappings: {\n                                    properties: {\n                                        property: {\n                                            type: \"text\",\n                                            fields: {\n                                                keyword: {\n                                                    type: \"keyword\",\n                                                    ignore_above: 256\n                                                }\n                                            },\n                                            analyzer: \"lowercase_analyzer\"\n                                        }\n                                    }\n                                }\n                            }\n                        });\n                    }\n\n                    if (insertDemoData) {\n                        // 2. Create initial page category.\n                        let staticCategory = await pageBuilder.categories.get(\"static\");\n                        if (!staticCategory) {\n                            staticCategory = await pageBuilder.categories.create({\n                                name: \"Static\",\n                                slug: \"static\",\n                                url: \"/static/\",\n                                layout: \"static\"\n                            });\n                            pageBuilder.categories.dataLoaders.get.clearAll();\n                        }\n\n                        // 3. Create page blocks.\n\n                        // Upload page data images\n                        const fileIdToKeyMap = await savePageAssets({ context });\n\n                        // 4. Create initial menu.\n                        const mainMenu = await pageBuilder.menus.get(\"main-menu\");\n                        if (!mainMenu) {\n                            await pageBuilder.menus.create({\n                                title: \"Main Menu\",\n                                slug: \"main-menu\",\n                                description:\n                                    \"The main menu of the website, containing links to most important pages.\"\n                            });\n                        }\n\n                        // 5. Create sample pages.\n                        const { pages } = pageBuilder;\n                        const fmSettings = await fileManager.settings.getSettings();\n\n                        const welcomeToWebinyPageContent = preparePageData({\n                            srcPrefix: fmSettings && fmSettings.srcPrefix,\n                            fileIdToKeyMap\n                        });\n\n                        const initialPages = [\n                            {\n                                title: \"Welcome to Webiny\",\n                                path: \"/welcome-to-webiny\",\n                                content: welcomeToWebinyPageContent,\n                                settings: {}\n                            },\n                            {\n                                title: \"Not Found\",\n                                path: \"/not-found\",\n                                content: notFoundPageData,\n                                settings: {},\n                                // Do not show the page in page lists, only direct get is possible.\n                                visibility: {\n                                    get: { latest: true, published: true },\n                                    list: { latest: false, published: false }\n                                }\n                            }\n                        ];\n\n                        const [homePage, notFoundPage] = await Promise.all(\n                            initialPages.map(data =>\n                                pages\n                                    .create(staticCategory.slug)\n                                    .then(page => pages.update(page.id, data))\n                                    .then(page => pages.publish(page.id))\n                            )\n                        );\n\n                        await pageBuilder.settings.default.update({\n                            name: name,\n                            pages: {\n                                home: homePage.pid,\n                                notFound: notFoundPage.pid\n                            }\n                        });\n                    }\n\n                    // 6. Mark the Page Builder app as installed.\n                    await this.setVersion(context.WEBINY_VERSION);\n\n                    await executeCallbacks<InstallationPlugin[\"afterInstall\"]>(\n                        hookPlugins,\n                        \"afterInstall\",\n                        {\n                            context\n                        }\n                    );\n                },\n                async upgrade(version) {\n                    const identity = context.security.getIdentity();\n                    if (!identity) {\n                        throw new NotAuthorizedError();\n                    }\n\n                    const upgradePlugins = context.plugins\n                        .byType<UpgradePlugin>(\"api-upgrade\")\n                        .filter(pl => pl.app === \"page-builder\");\n\n                    const plugin = getApplicablePlugin({\n                        deployedVersion: context.WEBINY_VERSION,\n                        installedAppVersion: await this.getVersion(),\n                        upgradePlugins,\n                        upgradeToVersion: version\n                    });\n\n                    await plugin.apply(context);\n\n                    // Store new app version\n                    await this.setVersion(version);\n\n                    return true;\n                }\n            }\n        };\n    }\n};\n"],"file":"system.crud.js"}