"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _defaults = _interopRequireDefault(require("./utils/defaults"));

var _getPKPrefix = _interopRequireDefault(require("./utils/getPKPrefix"));

var _apiSecurity = require("@webiny/api-security");

var _dataloader = _interopRequireDefault(require("dataloader"));

var _executeCallbacks = _interopRequireDefault(require("./utils/executeCallbacks"));

var _models = require("../../utils/models");

var _mergeWith = _interopRequireDefault(require("lodash/mergeWith"));

var _error = _interopRequireDefault(require("@webiny/error"));

var _SettingsPlugin = require("../../plugins/SettingsPlugin");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const TYPE = "pb.settings";

const checkBasePermissions = async context => {
  await context.i18nContent.checkI18NContentPermission();
  const pbPagePermission = await context.security.getPermission("pb.settings");

  if (!pbPagePermission) {
    throw new _apiSecurity.NotAuthorizedError();
  }
};

const plugin = {
  type: "context",

  async apply(context) {
    const {
      db,
      tenancy,
      i18nContent
    } = context;
    const settingsPlugins = context.plugins.byType(_SettingsPlugin.SettingsPlugin.type);
    context.pageBuilder = _objectSpread(_objectSpread({}, context.pageBuilder), {}, {
      settings: {
        dataLoaders: {
          get: new _dataloader.default(async keys => {
            const results = [];

            for (let i = 0; i < keys.length; i++) {
              const {
                PK,
                SK
              } = keys[i];
              const [[data]] = await db.read(_objectSpread(_objectSpread({}, _defaults.default.db), {}, {
                query: {
                  PK,
                  SK
                },
                limit: 1
              }));
              results.push(data);
            }

            return results;
          }, {
            cacheKeyFn: key => key.PK + key.SK
          })
        },
        // Default settings - contain website, social media, and prerendering settings.
        default: {
          PK: options => {
            const prefix = (0, _getPKPrefix.default)(context, options);
            return `${prefix}SETTINGS`;
          },
          SK: "default",

          getSettingsCacheKey(options) {
            return this.PK(options);
          },

          async getCurrent() {
            // With this line commented, we made this endpoint public.
            // We did this because of the public website pages which need to access the settings.
            // It's possible we'll create another GraphQL field, made for this exact purpose.
            // auth !== false && (await checkBasePermissions(context));
            const current = await context.pageBuilder.settings.default.get({});
            const defaults = await context.pageBuilder.settings.default.getDefault();
            return (0, _mergeWith.default)({}, defaults, current, (prev, next) => {
              // No need to use falsy value if we have it set in the default settings.
              if (prev && !next) {
                return prev;
              }
            });
          },

          async get(options) {
            // With this line commented, we made this endpoint public.
            // We did this because of the public website pages which need to access the settings.
            // It's possible we'll create another GraphQL field, made for this exact purpose.
            // auth !== false && (await checkBasePermissions(context));
            return context.pageBuilder.settings.dataLoaders.get.load({
              PK: this.PK(options),
              SK: this.SK
            });
          },

          async getDefault(options) {
            const allTenants = await this.get({
              tenant: false,
              locale: false
            });
            const tenantAllLocales = await this.get({
              tenant: options === null || options === void 0 ? void 0 : options.tenant,
              locale: false
            });

            if (!allTenants && !tenantAllLocales) {
              return null;
            }

            return (0, _mergeWith.default)({}, allTenants, tenantAllLocales, (next, prev) => {
              // No need to use falsy value if we have it set in the default settings.
              if (prev && !next) {
                return prev;
              }
            });
          },

          async update(rawData, options) {
            (options === null || options === void 0 ? void 0 : options.auth) !== false && (await checkBasePermissions(context));
            let previous = await this.get(options);

            if (!previous) {
              previous = await new _models.DefaultSettingsModel().populate({}).toJSON();
              let tenant = undefined,
                  locale = undefined;

              if ((options === null || options === void 0 ? void 0 : options.tenant) !== false) {
                tenant = (options === null || options === void 0 ? void 0 : options.tenant) || tenancy.getCurrentTenant().id;
              }

              if ((options === null || options === void 0 ? void 0 : options.locale) !== false) {
                locale = (options === null || options === void 0 ? void 0 : options.locale) || i18nContent.getLocale().code;
              }

              await db.create(_objectSpread(_objectSpread({}, _defaults.default.db), {}, {
                data: _objectSpread(_objectSpread({}, previous), {}, {
                  PK: this.PK(options),
                  SK: this.SK,
                  TYPE,
                  type: "default",
                  tenant,
                  locale
                })
              }));
            }

            const settingsModel = new _models.DefaultSettingsModel().populate(previous).populate(rawData);
            await settingsModel.validate();
            const next = await settingsModel.toJSON(); // Before continuing, let's check for differences that matter.
            // 1. Check differences in `pages` property (`home`, `notFound`). If there are
            // differences, check if the pages can be set as the new `specialType` page, and then,
            // after save, make sure to trigger events, on which other plugins can do their tasks.

            const specialTypes = ["home", "notFound"];
            const changedPages = [];

            for (let i = 0; i < specialTypes.length; i++) {
              var _previous, _previous$pages, _next$pages;

              const specialType = specialTypes[i];
              const p = (_previous = previous) === null || _previous === void 0 ? void 0 : (_previous$pages = _previous.pages) === null || _previous$pages === void 0 ? void 0 : _previous$pages[specialType];
              const n = next === null || next === void 0 ? void 0 : (_next$pages = next.pages) === null || _next$pages === void 0 ? void 0 : _next$pages[specialType];

              if (p !== n) {
                // Only throw if previously we had a page (p), and now all of a sudden
                // we don't (!n). Allows updating settings without sending these.
                if (p && !n) {
                  throw new _error.default(`Cannot unset "${specialType}" page. Please provide a new page if you want to unset current one.`, "CANNOT_UNSET_SPECIAL_PAGE");
                } // Only load if the next page (n) has been sent, which is always a
                // must if previously a page was defined (p).


                if (n) {
                  const page = await context.pageBuilder.pages.getPublishedById({
                    id: n
                  });
                  changedPages.push([specialType, p, n, page]);
                }
              }
            }

            await (0, _executeCallbacks.default)(settingsPlugins, "beforeUpdate", {
              context,
              previousSettings: previous,
              nextSettings: next,
              meta: {
                diff: {
                  pages: changedPages
                }
              }
            });
            await db.update(_objectSpread(_objectSpread({}, _defaults.default.db), {}, {
              query: {
                PK: this.PK(options),
                SK: this.SK
              },
              data: next
            }));
            await (0, _executeCallbacks.default)(settingsPlugins, "afterUpdate", {
              context,
              previousSettings: previous,
              nextSettings: next,
              meta: {
                diff: {
                  pages: changedPages
                }
              }
            });
            return next;
          }

        }
      }
    });
  }

};
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=settings.crud.js.map