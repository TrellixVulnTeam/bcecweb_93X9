{"version":3,"sources":["../../../src/graphql/crud/menus.crud.ts"],"names":["CreateDataModel","title","validation","create","slug","description","items","UpdateDataModel","TYPE","PERMISSION_NAME","plugin","type","apply","context","db","PK","hookPlugins","plugins","byType","MenuPlugin","pageBuilder","menus","get","permission","rwd","menu","read","defaults","query","SK","limit","identity","security","getIdentity","getPublic","NotFoundError","list","$gt","own","filter","item","createdBy","id","data","createDataModel","populate","validate","Object","assign","toJSON","createdOn","Date","toISOString","displayName","menuWithSameSlug","Error","tenant","tenancy","getCurrentTenant","locale","i18nContent","getLocale","code","update","updateDataModel","updateData","onlyDirty","delete"],"mappings":"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","sourcesContent":["import { ContextPlugin } from \"@webiny/handler/types\";\nimport defaults from \"./utils/defaults\";\nimport getPKPrefix from \"./utils/getPKPrefix\";\nimport { PbContext } from \"../types\";\nimport { Menu } from \"../../types\";\nimport { NotFoundError } from \"@webiny/handler-graphql\";\nimport checkBasePermissions from \"./utils/checkBasePermissions\";\nimport checkOwnPermissions from \"./utils/checkOwnPermissions\";\nimport Error from \"@webiny/error\";\nimport { validation } from \"@webiny/validation\";\nimport { withFields, string } from \"@commodo/fields\";\nimport { object } from \"commodo-fields-object\";\nimport executeCallbacks from \"./utils/executeCallbacks\";\nimport prepareMenuItems from \"./menus/prepareMenuItems\";\nimport { MenuPlugin } from \"~/plugins/MenuPlugin\";\n\nconst CreateDataModel = withFields({\n    title: string({ validation: validation.create(\"required,minLength:1,maxLength:100\") }),\n    slug: string({ validation: validation.create(\"required,minLength:1,maxLength:100\") }),\n    description: string({ validation: validation.create(\"maxLength:100\") }),\n    items: object()\n})();\n\nconst UpdateDataModel = withFields({\n    title: string({ validation: validation.create(\"minLength:1,maxLength:100\") }),\n    description: string({ validation: validation.create(\"maxLength:100\") }),\n    items: object()\n})();\n\nconst TYPE = \"pb.menu\";\nconst PERMISSION_NAME = TYPE;\n\nconst plugin: ContextPlugin<PbContext> = {\n    type: \"context\",\n    async apply(context) {\n        const { db } = context;\n        const PK = () => `${getPKPrefix(context)}M`;\n\n        const hookPlugins = context.plugins.byType<MenuPlugin>(MenuPlugin.type);\n\n        context.pageBuilder = {\n            ...context.pageBuilder,\n            menus: {\n                async get(slug) {\n                    const permission = await checkBasePermissions(context, PERMISSION_NAME, {\n                        rwd: \"r\"\n                    });\n\n                    const [[menu]] = await db.read<Menu>({\n                        ...defaults.db,\n                        query: { PK: PK(), SK: slug },\n                        limit: 1\n                    });\n\n                    if (!menu) {\n                        return null;\n                    }\n\n                    const identity = context.security.getIdentity();\n                    checkOwnPermissions(identity, permission, menu);\n\n                    return menu;\n                },\n\n                /**\n                 * Used to fetch menu data from a public website. Items are prepared for consumption too.\n                 * @param slug\n                 */\n                async getPublic(slug) {\n                    const [[menu]] = await db.read<Menu>({\n                        ...defaults.db,\n                        query: { PK: PK(), SK: slug }\n                    });\n\n                    if (!menu) {\n                        throw new NotFoundError();\n                    }\n\n                    menu.items = await prepareMenuItems({ menu, context });\n                    return menu;\n                },\n\n                async list() {\n                    const permission = await checkBasePermissions(context, PERMISSION_NAME, {\n                        rwd: \"r\"\n                    });\n\n                    const [menus] = await db.read<Menu>({\n                        ...defaults.db,\n                        query: { PK: PK(), SK: { $gt: \" \" } }\n                    });\n\n                    // If user can only manage own records, let's check if he owns the loaded one.\n                    if (permission.own) {\n                        const identity = context.security.getIdentity();\n                        return menus.filter(item => item.createdBy.id === identity.id);\n                    }\n\n                    return menus;\n                },\n\n                async create(data) {\n                    await checkBasePermissions(context, PERMISSION_NAME, { rwd: \"w\" });\n\n                    const createDataModel = new CreateDataModel().populate(data);\n                    await createDataModel.validate();\n\n                    const identity = context.security.getIdentity();\n                    const menu: Menu = Object.assign(await createDataModel.toJSON(), {\n                        createdOn: new Date().toISOString(),\n                        createdBy: {\n                            id: identity.id,\n                            type: identity.type,\n                            displayName: identity.displayName\n                        }\n                    });\n\n                    const [[menuWithSameSlug]] = await db.read<Menu>({\n                        ...defaults.db,\n                        query: { PK: PK(), SK: menu.slug },\n                        limit: 1\n                    });\n\n                    if (menuWithSameSlug) {\n                        throw new Error(`Menu \"${menu.slug}\" already exists.`);\n                    }\n\n                    await executeCallbacks<MenuPlugin[\"beforeCreate\"]>(\n                        hookPlugins,\n                        \"beforeCreate\",\n                        {\n                            context,\n                            menu\n                        }\n                    );\n\n                    await db.create({\n                        ...defaults.db,\n                        data: {\n                            ...menu,\n                            PK: PK(),\n                            SK: createDataModel.slug,\n                            TYPE,\n                            tenant: context.tenancy.getCurrentTenant().id,\n                            locale: context.i18nContent.getLocale().code\n                        }\n                    });\n\n                    await executeCallbacks<MenuPlugin[\"afterCreate\"]>(hookPlugins, \"afterCreate\", {\n                        context,\n                        menu\n                    });\n\n                    return menu;\n                },\n\n                async update(slug, data) {\n                    const permission = await checkBasePermissions(context, PERMISSION_NAME, {\n                        rwd: \"w\"\n                    });\n\n                    const menu = await this.get(slug);\n                    if (!menu) {\n                        throw new NotFoundError(`Menu \"${slug}\" not found.`);\n                    }\n\n                    const identity = context.security.getIdentity();\n                    checkOwnPermissions(identity, permission, menu);\n\n                    const updateDataModel = new UpdateDataModel().populate(data);\n                    await updateDataModel.validate();\n\n                    const updateData = await updateDataModel.toJSON({ onlyDirty: true });\n\n                    await executeCallbacks<MenuPlugin[\"beforeUpdate\"]>(\n                        hookPlugins,\n                        \"beforeUpdate\",\n                        {\n                            context,\n                            menu\n                        }\n                    );\n\n                    await db.update({\n                        ...defaults.db,\n                        query: { PK: PK(), SK: slug },\n                        data: updateData\n                    });\n\n                    await executeCallbacks<MenuPlugin[\"afterUpdate\"]>(hookPlugins, \"afterUpdate\", {\n                        context,\n                        menu\n                    });\n\n                    return { ...menu, ...updateData };\n                },\n                async delete(slug) {\n                    const permission = await checkBasePermissions(context, PERMISSION_NAME, {\n                        rwd: \"d\"\n                    });\n\n                    const menu = await this.get(slug);\n                    if (!menu) {\n                        throw new NotFoundError(`Menu \"${slug}\" not found.`);\n                    }\n\n                    const identity = context.security.getIdentity();\n                    checkOwnPermissions(identity, permission, menu);\n\n                    await executeCallbacks<MenuPlugin[\"beforeDelete\"]>(\n                        hookPlugins,\n                        \"beforeDelete\",\n                        {\n                            context,\n                            menu\n                        }\n                    );\n\n                    await db.delete({\n                        ...defaults.db,\n                        query: { PK: PK(), SK: slug }\n                    });\n\n                    await executeCallbacks<MenuPlugin[\"afterDelete\"]>(hookPlugins, \"afterDelete\", {\n                        context,\n                        menu\n                    });\n\n                    return menu;\n                }\n            }\n        };\n    }\n};\n\nexport default plugin;\n"],"file":"menus.crud.js"}