{"version":3,"sources":["../../../../src/graphql/crud/menus/prepareMenuItems.ts"],"names":["applyCleanup","items","Array","isArray","i","length","__cleanup__","splice","title","children","path","url","id","type","applyModifier","modifier","context","item","prepareItems","modifiers","menu","page","pageBuilder","pages","getPublishedById","Object","assign","category","sortBy","sortDir","tags","tagsRule","where","query","rule","listPublished","limit","sort","map"],"mappings":"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","sourcesContent":["import cloneDeep from \"lodash/cloneDeep\";\nimport { PbContext } from \"../../types\";\nimport { Menu } from \"../../../types\";\n\nconst applyCleanup = async items => {\n    if (!Array.isArray(items)) {\n        return;\n    }\n\n    for (let i = 0; i < items.length; i++) {\n        if (items[i].__cleanup__) {\n            items.splice(i, 1);\n            i--;\n            continue;\n        }\n\n        const { title, children, path, url, id, type } = items[i];\n        items[i] = { title, path, url, children, id, type };\n\n        await applyCleanup(items[i].children);\n    }\n};\n\nconst applyModifier = async ({ items, modifier, context }) => {\n    if (!Array.isArray(items)) {\n        return;\n    }\n\n    for (let i = 0; i < items.length; i++) {\n        const item = items[i];\n        await modifier({ item, context });\n\n        await applyModifier({ items: item.children, modifier, context });\n    }\n};\n\nconst prepareItems = async ({\n    items,\n    modifiers,\n    context\n}: {\n    items?: Record<string, any>[];\n    modifiers: Array<(args: { item: Record<string, any>; context: PbContext }) => void>;\n    context: PbContext;\n}) => {\n    for (let i = 0; i < modifiers.length; i++) {\n        const modifier = modifiers[i];\n        await applyModifier({ items, modifier, context });\n    }\n\n    // Cleanup empty items.\n    await applyCleanup(items);\n};\n\nexport default async ({ menu, context }: { menu: Menu; context: PbContext }) => {\n    // TODO determine real type\n    const items: any = cloneDeep(menu.items);\n    // Each modifier is recursively applied to all items.\n    await prepareItems({\n        items,\n        context,\n        modifiers: [\n            async ({ context, item }) => {\n                if (item.type === \"page\") {\n                    let page;\n                    try {\n                        page = await context.pageBuilder.pages.getPublishedById({\n                            id: item.page\n                        });\n                    } catch {}\n\n                    if (page) {\n                        // First try to use the title set on the menu item. If none, use page title.\n                        Object.assign(item, page, { title: item.title || page.title });\n                    } else {\n                        item.__cleanup__ = true;\n                    }\n\n                    return;\n                }\n\n                if (item.type === \"pages-list\") {\n                    const { category, sortBy, sortDir, tags, tagsRule } = item;\n\n                    const where = { category, tags: null };\n                    if (tags) {\n                        where.tags = { query: tags, rule: tagsRule || \"all\" };\n                    }\n\n                    const [children] = await context.pageBuilder.pages.listPublished({\n                        limit: 200,\n                        where,\n                        sort: { [sortBy]: sortDir }\n                    });\n\n                    item.children = children.map(item => ({\n                        path: item.path,\n                        title: item.title,\n                        id: item.id\n                    }));\n                }\n            }\n        ]\n    });\n\n    return items;\n};\n"],"file":"prepareMenuItems.js"}