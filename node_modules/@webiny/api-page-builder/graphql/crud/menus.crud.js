"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _defaults = _interopRequireDefault(require("./utils/defaults"));

var _getPKPrefix = _interopRequireDefault(require("./utils/getPKPrefix"));

var _handlerGraphql = require("@webiny/handler-graphql");

var _checkBasePermissions = _interopRequireDefault(require("./utils/checkBasePermissions"));

var _checkOwnPermissions = _interopRequireDefault(require("./utils/checkOwnPermissions"));

var _error = _interopRequireDefault(require("@webiny/error"));

var _validation = require("@webiny/validation");

var _fields = require("@commodo/fields");

var _commodoFieldsObject = require("commodo-fields-object");

var _executeCallbacks = _interopRequireDefault(require("./utils/executeCallbacks"));

var _prepareMenuItems = _interopRequireDefault(require("./menus/prepareMenuItems"));

var _MenuPlugin = require("../../plugins/MenuPlugin");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const CreateDataModel = (0, _fields.withFields)({
  title: (0, _fields.string)({
    validation: _validation.validation.create("required,minLength:1,maxLength:100")
  }),
  slug: (0, _fields.string)({
    validation: _validation.validation.create("required,minLength:1,maxLength:100")
  }),
  description: (0, _fields.string)({
    validation: _validation.validation.create("maxLength:100")
  }),
  items: (0, _commodoFieldsObject.object)()
})();
const UpdateDataModel = (0, _fields.withFields)({
  title: (0, _fields.string)({
    validation: _validation.validation.create("minLength:1,maxLength:100")
  }),
  description: (0, _fields.string)({
    validation: _validation.validation.create("maxLength:100")
  }),
  items: (0, _commodoFieldsObject.object)()
})();
const TYPE = "pb.menu";
const PERMISSION_NAME = TYPE;
const plugin = {
  type: "context",

  async apply(context) {
    const {
      db
    } = context;

    const PK = () => `${(0, _getPKPrefix.default)(context)}M`;

    const hookPlugins = context.plugins.byType(_MenuPlugin.MenuPlugin.type);
    context.pageBuilder = _objectSpread(_objectSpread({}, context.pageBuilder), {}, {
      menus: {
        async get(slug) {
          const permission = await (0, _checkBasePermissions.default)(context, PERMISSION_NAME, {
            rwd: "r"
          });
          const [[menu]] = await db.read(_objectSpread(_objectSpread({}, _defaults.default.db), {}, {
            query: {
              PK: PK(),
              SK: slug
            },
            limit: 1
          }));

          if (!menu) {
            return null;
          }

          const identity = context.security.getIdentity();
          (0, _checkOwnPermissions.default)(identity, permission, menu);
          return menu;
        },

        /**
         * Used to fetch menu data from a public website. Items are prepared for consumption too.
         * @param slug
         */
        async getPublic(slug) {
          const [[menu]] = await db.read(_objectSpread(_objectSpread({}, _defaults.default.db), {}, {
            query: {
              PK: PK(),
              SK: slug
            }
          }));

          if (!menu) {
            throw new _handlerGraphql.NotFoundError();
          }

          menu.items = await (0, _prepareMenuItems.default)({
            menu,
            context
          });
          return menu;
        },

        async list() {
          const permission = await (0, _checkBasePermissions.default)(context, PERMISSION_NAME, {
            rwd: "r"
          });
          const [menus] = await db.read(_objectSpread(_objectSpread({}, _defaults.default.db), {}, {
            query: {
              PK: PK(),
              SK: {
                $gt: " "
              }
            }
          })); // If user can only manage own records, let's check if he owns the loaded one.

          if (permission.own) {
            const identity = context.security.getIdentity();
            return menus.filter(item => item.createdBy.id === identity.id);
          }

          return menus;
        },

        async create(data) {
          await (0, _checkBasePermissions.default)(context, PERMISSION_NAME, {
            rwd: "w"
          });
          const createDataModel = new CreateDataModel().populate(data);
          await createDataModel.validate();
          const identity = context.security.getIdentity();
          const menu = Object.assign(await createDataModel.toJSON(), {
            createdOn: new Date().toISOString(),
            createdBy: {
              id: identity.id,
              type: identity.type,
              displayName: identity.displayName
            }
          });
          const [[menuWithSameSlug]] = await db.read(_objectSpread(_objectSpread({}, _defaults.default.db), {}, {
            query: {
              PK: PK(),
              SK: menu.slug
            },
            limit: 1
          }));

          if (menuWithSameSlug) {
            throw new _error.default(`Menu "${menu.slug}" already exists.`);
          }

          await (0, _executeCallbacks.default)(hookPlugins, "beforeCreate", {
            context,
            menu
          });
          await db.create(_objectSpread(_objectSpread({}, _defaults.default.db), {}, {
            data: _objectSpread(_objectSpread({}, menu), {}, {
              PK: PK(),
              SK: createDataModel.slug,
              TYPE,
              tenant: context.tenancy.getCurrentTenant().id,
              locale: context.i18nContent.getLocale().code
            })
          }));
          await (0, _executeCallbacks.default)(hookPlugins, "afterCreate", {
            context,
            menu
          });
          return menu;
        },

        async update(slug, data) {
          const permission = await (0, _checkBasePermissions.default)(context, PERMISSION_NAME, {
            rwd: "w"
          });
          const menu = await this.get(slug);

          if (!menu) {
            throw new _handlerGraphql.NotFoundError(`Menu "${slug}" not found.`);
          }

          const identity = context.security.getIdentity();
          (0, _checkOwnPermissions.default)(identity, permission, menu);
          const updateDataModel = new UpdateDataModel().populate(data);
          await updateDataModel.validate();
          const updateData = await updateDataModel.toJSON({
            onlyDirty: true
          });
          await (0, _executeCallbacks.default)(hookPlugins, "beforeUpdate", {
            context,
            menu
          });
          await db.update(_objectSpread(_objectSpread({}, _defaults.default.db), {}, {
            query: {
              PK: PK(),
              SK: slug
            },
            data: updateData
          }));
          await (0, _executeCallbacks.default)(hookPlugins, "afterUpdate", {
            context,
            menu
          });
          return _objectSpread(_objectSpread({}, menu), updateData);
        },

        async delete(slug) {
          const permission = await (0, _checkBasePermissions.default)(context, PERMISSION_NAME, {
            rwd: "d"
          });
          const menu = await this.get(slug);

          if (!menu) {
            throw new _handlerGraphql.NotFoundError(`Menu "${slug}" not found.`);
          }

          const identity = context.security.getIdentity();
          (0, _checkOwnPermissions.default)(identity, permission, menu);
          await (0, _executeCallbacks.default)(hookPlugins, "beforeDelete", {
            context,
            menu
          });
          await db.delete(_objectSpread(_objectSpread({}, _defaults.default.db), {}, {
            query: {
              PK: PK(),
              SK: slug
            }
          }));
          await (0, _executeCallbacks.default)(hookPlugins, "afterDelete", {
            context,
            menu
          });
          return menu;
        }

      }
    });
  }

};
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=menus.crud.js.map