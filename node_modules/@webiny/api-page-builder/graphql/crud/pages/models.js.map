{"version":3,"sources":["../../../../src/graphql/crud/pages/models.ts"],"names":["CreateDataModel","category","validation","create","VisibilityModel","get","instanceOf","latest","published","list","UpdateDataModel","title","path","normalizePath","visibility","content","UpdateSettingsModel","general","value","tags","Array","isArray","length","Error","i","validateSync","snippet","layout","image","seo","description","meta","name","social","property"],"mappings":"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","sourcesContent":["import { withFields, string, fields, boolean, onSet } from \"@commodo/fields\";\nimport { object } from \"commodo-fields-object\";\nimport { validation } from \"@webiny/validation\";\nimport Error from \"@webiny/error\";\nimport normalizePath from \"./normalizePath\";\n\nexport const CreateDataModel = withFields({\n    category: string({ validation: validation.create(\"required,maxLength:100\") })\n})();\n\nexport const VisibilityModel = withFields({\n    get: fields({ instanceOf: withFields({ latest: boolean(), published: boolean() })() }),\n    list: fields({ instanceOf: withFields({ latest: boolean(), published: boolean() })() })\n})();\n\nexport const UpdateDataModel = withFields({\n    title: string({\n        validation: validation.create(\"maxLength:150\")\n    }),\n    path: onSet(normalizePath)(\n        string({\n            validation: validation.create(\"minLength:2,maxLength:100\")\n        })\n    ),\n    visibility: fields({ instanceOf: VisibilityModel }),\n    category: string({ validation: validation.create(\"maxLength:100\") }),\n    content: object()\n})();\n\nexport const UpdateSettingsModel = withFields({\n    general: fields({\n        value: {},\n        instanceOf: withFields({\n            tags: string({\n                list: true,\n                validation: value => {\n                    if (!Array.isArray(value)) {\n                        return;\n                    }\n\n                    if (value.length > 30) {\n                        throw new Error(\"Cannot store more than 30 tags.\");\n                    }\n\n                    for (let i = 0; i < value.length; i++) {\n                        validation.validateSync(value[i], \"maxLength:50\");\n                    }\n                }\n            }),\n            snippet: string({ validation: validation.create(\"maxLength:500\") }),\n            layout: string({ validation: validation.create(\"maxLength:50\") }),\n            image: object()\n        })()\n    }),\n    seo: fields({\n        value: {},\n        instanceOf: withFields({\n            title: string({ validation: validation.create(\"maxLength:500\") }),\n            description: string({ validation: validation.create(\"maxLength:500\") }),\n            meta: fields({\n                list: true,\n                value: [],\n                validation: value => {\n                    if (!Array.isArray(value)) {\n                        return;\n                    }\n\n                    if (value.length > 30) {\n                        throw new Error(\"Cannot store more than 30 SEO tags.\");\n                    }\n                    for (let i = 0; i < value.length; i++) {\n                        validation.validateSync(value[i], \"maxLength:50\");\n                    }\n                },\n                instanceOf: withFields({\n                    name: string({ validation: validation.create(\"maxLength:100\") }),\n                    content: string({ validation: validation.create(\"maxLength:200\") })\n                })()\n            })\n        })()\n    }),\n    social: fields({\n        value: {},\n        instanceOf: withFields({\n            meta: fields({\n                value: [],\n                list: true,\n                validation: value => {\n                    if (!Array.isArray(value)) {\n                        return;\n                    }\n\n                    if (value.length > 30) {\n                        throw new Error(\"Cannot store more than 30 social tags.\");\n                    }\n                    for (let i = 0; i < value.length; i++) {\n                        validation.validateSync(value[i], \"maxLength:50\");\n                    }\n                },\n                instanceOf: withFields({\n                    property: string({ validation: validation.create(\"maxLength:100\") }),\n                    content: string({ validation: validation.create(\"maxLength:200\") })\n                })()\n            }),\n            title: string({ validation: validation.create(\"maxLength:500\") }),\n            description: string({ validation: validation.create(\"maxLength:500\") }),\n            image: object()\n        })()\n    })\n})();\n"],"file":"models.js"}