"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getESPublishedPageData = exports.getESLatestPageData = exports.getESPageData = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _IndexPageDataPlugin = require("../../../plugins/IndexPageDataPlugin");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const getESPageData = (context, page) => {
  var _page$settings, _page$settings$genera, _page$settings2, _page$settings2$gener, _page$settings3, _page$settings3$gener;

  return {
    __type: "page",
    tenant: context.tenancy.getCurrentTenant().id,
    webinyVersion: context.WEBINY_VERSION,
    id: page.id,
    pid: page.pid,
    editor: page.editor,
    locale: page.locale,
    createdOn: page.createdOn,
    savedOn: page.savedOn,
    createdBy: page.createdBy,
    ownedBy: page.ownedBy,
    category: page.category,
    version: page.version,
    title: page.title,
    titleLC: page.title.toLowerCase(),
    path: page.path,
    status: page.status,
    locked: page.locked,
    publishedOn: page.publishedOn,
    // Pull tags & snippet from settings.general.
    tags: (page === null || page === void 0 ? void 0 : (_page$settings = page.settings) === null || _page$settings === void 0 ? void 0 : (_page$settings$genera = _page$settings.general) === null || _page$settings$genera === void 0 ? void 0 : _page$settings$genera.tags) || [],
    snippet: (page === null || page === void 0 ? void 0 : (_page$settings2 = page.settings) === null || _page$settings2 === void 0 ? void 0 : (_page$settings2$gener = _page$settings2.general) === null || _page$settings2$gener === void 0 ? void 0 : _page$settings2$gener.snippet) || null,
    // Save some images that could maybe be used on listing pages.
    images: {
      general: page === null || page === void 0 ? void 0 : (_page$settings3 = page.settings) === null || _page$settings3 === void 0 ? void 0 : (_page$settings3$gener = _page$settings3.general) === null || _page$settings3$gener === void 0 ? void 0 : _page$settings3$gener.image
    }
  };
};

exports.getESPageData = getESPageData;

const getESLatestPageData = (context, page) => {
  const data = _objectSpread(_objectSpread({}, getESPageData(context, page)), {}, {
    latest: true
  });

  return modifyData(data, page, context);
};

exports.getESLatestPageData = getESLatestPageData;

const getESPublishedPageData = (context, page) => {
  const data = _objectSpread(_objectSpread({}, getESPageData(context, page)), {}, {
    published: true
  });

  return modifyData(data, page, context);
};

exports.getESPublishedPageData = getESPublishedPageData;

const modifyData = (data, page, context) => {
  const pagePlugins = context.plugins.byType(_IndexPageDataPlugin.IndexPageDataPlugin.type);

  for (const plugin of pagePlugins) {
    plugin.apply({
      context,
      page,
      data
    });
  }

  return data;
};
//# sourceMappingURL=esPageData.js.map