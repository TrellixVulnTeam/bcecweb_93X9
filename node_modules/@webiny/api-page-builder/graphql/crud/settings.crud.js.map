{"version":3,"sources":["../../../src/graphql/crud/settings.crud.ts"],"names":["TYPE","checkBasePermissions","context","i18nContent","checkI18NContentPermission","pbPagePermission","security","getPermission","NotAuthorizedError","plugin","type","apply","db","tenancy","settingsPlugins","plugins","byType","SettingsPlugin","pageBuilder","settings","dataLoaders","get","DataLoader","keys","results","i","length","PK","SK","data","read","defaults","query","limit","push","cacheKeyFn","key","default","options","prefix","getSettingsCacheKey","getCurrent","current","getDefault","prev","next","load","allTenants","tenant","locale","tenantAllLocales","update","rawData","auth","previous","DefaultSettingsModel","populate","toJSON","undefined","getCurrentTenant","id","getLocale","code","create","settingsModel","validate","specialTypes","changedPages","specialType","p","pages","n","Error","page","getPublishedById","previousSettings","nextSettings","meta","diff"],"mappings":"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","sourcesContent":["import { ContextPlugin } from \"@webiny/handler/types\";\nimport defaults from \"./utils/defaults\";\nimport getPKPrefix from \"./utils/getPKPrefix\";\nimport { PbContext, DefaultSettings } from \"../../types\";\nimport { NotAuthorizedError } from \"@webiny/api-security\";\nimport DataLoader from \"dataloader\";\nimport executeCallbacks from \"./utils/executeCallbacks\";\nimport { DefaultSettingsModel } from \"../../utils/models\";\nimport mergeWith from \"lodash/mergeWith\";\nimport Error from \"@webiny/error\";\nimport { SettingsPlugin } from \"~/plugins/SettingsPlugin\";\n\nconst TYPE = \"pb.settings\";\n\nconst checkBasePermissions = async (context: PbContext) => {\n    await context.i18nContent.checkI18NContentPermission();\n    const pbPagePermission = await context.security.getPermission(\"pb.settings\");\n    if (!pbPagePermission) {\n        throw new NotAuthorizedError();\n    }\n};\n\nconst plugin: ContextPlugin<PbContext> = {\n    type: \"context\",\n    async apply(context) {\n        const { db, tenancy, i18nContent } = context;\n\n        const settingsPlugins = context.plugins.byType<SettingsPlugin>(SettingsPlugin.type);\n\n        context.pageBuilder = {\n            ...context.pageBuilder,\n            settings: {\n                dataLoaders: {\n                    get: new DataLoader<{ PK: string; SK: string }, DefaultSettings, string>(\n                        async keys => {\n                            const results = [];\n                            for (let i = 0; i < keys.length; i++) {\n                                const { PK, SK } = keys[i];\n                                const [[data]] = await db.read<DefaultSettings>({\n                                    ...defaults.db,\n                                    query: { PK, SK },\n                                    limit: 1\n                                });\n                                results.push(data);\n                            }\n\n                            return results;\n                        },\n                        {\n                            cacheKeyFn: key => key.PK + key.SK\n                        }\n                    )\n                },\n                // Default settings - contain website, social media, and prerendering settings.\n                default: {\n                    PK: options => {\n                        const prefix = getPKPrefix(context, options);\n                        return `${prefix}SETTINGS`;\n                    },\n                    SK: \"default\",\n                    getSettingsCacheKey(options) {\n                        return this.PK(options);\n                    },\n\n                    async getCurrent() {\n                        // With this line commented, we made this endpoint public.\n                        // We did this because of the public website pages which need to access the settings.\n                        // It's possible we'll create another GraphQL field, made for this exact purpose.\n                        // auth !== false && (await checkBasePermissions(context));\n\n                        const current = await context.pageBuilder.settings.default.get({});\n                        const defaults = await context.pageBuilder.settings.default.getDefault();\n\n                        return mergeWith({}, defaults, current, (prev, next) => {\n                            // No need to use falsy value if we have it set in the default settings.\n                            if (prev && !next) {\n                                return prev;\n                            }\n                        });\n                    },\n                    async get(options) {\n                        // With this line commented, we made this endpoint public.\n                        // We did this because of the public website pages which need to access the settings.\n                        // It's possible we'll create another GraphQL field, made for this exact purpose.\n                        // auth !== false && (await checkBasePermissions(context));\n\n                        return context.pageBuilder.settings.dataLoaders.get.load({\n                            PK: this.PK(options),\n                            SK: this.SK\n                        });\n                    },\n                    async getDefault(options) {\n                        const allTenants = await this.get({ tenant: false, locale: false });\n                        const tenantAllLocales = await this.get({\n                            tenant: options?.tenant,\n                            locale: false\n                        });\n                        if (!allTenants && !tenantAllLocales) {\n                            return null;\n                        }\n\n                        return mergeWith({}, allTenants, tenantAllLocales, (next, prev) => {\n                            // No need to use falsy value if we have it set in the default settings.\n                            if (prev && !next) {\n                                return prev;\n                            }\n                        });\n                    },\n                    async update(rawData, options) {\n                        options?.auth !== false && (await checkBasePermissions(context));\n\n                        let previous = await this.get(options);\n                        if (!previous) {\n                            previous = await new DefaultSettingsModel().populate({}).toJSON();\n\n                            let tenant = undefined,\n                                locale = undefined;\n                            if (options?.tenant !== false) {\n                                tenant = options?.tenant || tenancy.getCurrentTenant().id;\n                            }\n                            if (options?.locale !== false) {\n                                locale = options?.locale || i18nContent.getLocale().code;\n                            }\n\n                            await db.create({\n                                ...defaults.db,\n                                data: {\n                                    ...previous,\n                                    PK: this.PK(options),\n                                    SK: this.SK,\n                                    TYPE,\n                                    type: \"default\",\n                                    tenant,\n                                    locale\n                                }\n                            });\n                        }\n\n                        const settingsModel = new DefaultSettingsModel()\n                            .populate(previous)\n                            .populate(rawData);\n                        await settingsModel.validate();\n\n                        const next = await settingsModel.toJSON();\n\n                        // Before continuing, let's check for differences that matter.\n\n                        // 1. Check differences in `pages` property (`home`, `notFound`). If there are\n                        // differences, check if the pages can be set as the new `specialType` page, and then,\n                        // after save, make sure to trigger events, on which other plugins can do their tasks.\n                        const specialTypes = [\"home\", \"notFound\"];\n\n                        const changedPages = [];\n                        for (let i = 0; i < specialTypes.length; i++) {\n                            const specialType = specialTypes[i];\n                            const p = previous?.pages?.[specialType];\n                            const n = next?.pages?.[specialType];\n\n                            if (p !== n) {\n                                // Only throw if previously we had a page (p), and now all of a sudden\n                                // we don't (!n). Allows updating settings without sending these.\n                                if (p && !n) {\n                                    throw new Error(\n                                        `Cannot unset \"${specialType}\" page. Please provide a new page if you want to unset current one.`,\n                                        \"CANNOT_UNSET_SPECIAL_PAGE\"\n                                    );\n                                }\n\n                                // Only load if the next page (n) has been sent, which is always a\n                                // must if previously a page was defined (p).\n                                if (n) {\n                                    const page = await context.pageBuilder.pages.getPublishedById({\n                                        id: n\n                                    });\n\n                                    changedPages.push([specialType, p, n, page]);\n                                }\n                            }\n                        }\n\n                        await executeCallbacks<SettingsPlugin[\"beforeUpdate\"]>(\n                            settingsPlugins,\n                            \"beforeUpdate\",\n                            {\n                                context,\n                                previousSettings: previous,\n                                nextSettings: next,\n                                meta: {\n                                    diff: {\n                                        pages: changedPages\n                                    }\n                                }\n                            }\n                        );\n\n                        await db.update({\n                            ...defaults.db,\n                            query: { PK: this.PK(options), SK: this.SK },\n                            data: next\n                        });\n\n                        await executeCallbacks<SettingsPlugin[\"afterUpdate\"]>(\n                            settingsPlugins,\n                            \"afterUpdate\",\n                            {\n                                context,\n                                previousSettings: previous,\n                                nextSettings: next,\n                                meta: {\n                                    diff: {\n                                        pages: changedPages\n                                    }\n                                }\n                            }\n                        );\n\n                        return next;\n                    }\n                }\n            }\n        };\n    }\n};\n\nexport default plugin;\n"],"file":"settings.crud.js"}