{"version":3,"sources":["../../../../../src/graphql/crud/install/utils/downloadInstallFiles.ts"],"names":["PAGE_BUILDER_S3_BUCKET","process","env","S3_BUCKET","PAGE_BUILDER_INSTALLATION_FILES_ZIP_KEY","extractZip","zipPath","dir","Promise","resolve","reject","e","deleteFile","path","INSTALL_DIR","INSTALL_ZIP_PATH","join","INSTALL_EXTRACT_DIR","s3","S3","region","AWS_REGION","installationFilesUrl","getSignedUrlPromise","Bucket","Key","fs","ensureDirSync"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,MAAMA,sBAAsB,GAAGC,OAAO,CAACC,GAAR,CAAYC,SAA3C;AACA,MAAMC,uCAAuC,GAAG,oBAAhD;;AAEA,SAASC,UAAT,CAAoBC,OAApB,EAA6BC,GAA7B,EAAkC;AAC9B,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,6BAAQJ,OAAR,EAAiB;AAAEC,MAAAA;AAAF,KAAjB,EAA0BI,CAAC,IAAI;AAC3B,UAAIA,CAAJ,EAAO;AACHD,QAAAA,MAAM,CAACC,CAAD,CAAN;AACA;AACH,OAJ0B,CAK3B;;;AACAF,MAAAA,OAAO;AACV,KAPD;AAQH,GATM,CAAP;AAUH;;AAED,SAASG,UAAT,CAAoBC,IAApB,EAA0B;AACtB,SAAO,IAAIL,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,yBAAOG,IAAP,EAAaF,CAAC,IAAI;AACd,UAAIA,CAAJ,EAAO;AACHD,QAAAA,MAAM,CAACC,CAAD,CAAN;AACA;AACH,OAJa,CAKd;;;AACAF,MAAAA,OAAO;AACV,KAPD;AAQH,GATM,CAAP;AAUH;;AAED,MAAMK,WAAW,GAAG,MAApB;;AACA,MAAMC,gBAAgB,GAAGF,cAAKG,IAAL,CAAUF,WAAV,EAAuB,oBAAvB,CAAzB;;AACA,MAAMG,mBAAmB,GAAGJ,cAAKG,IAAL,CAAUF,WAAV,EAAuB,gBAAvB,CAA5B;;eAEe,YAAY;AACvB,QAAMI,EAAE,GAAG,IAAIC,UAAJ,CAAO;AAAEC,IAAAA,MAAM,EAAEnB,OAAO,CAACC,GAAR,CAAYmB;AAAtB,GAAP,CAAX;AACA,QAAMC,oBAAoB,GAAG,MAAMJ,EAAE,CAACK,mBAAH,CAAuB,WAAvB,EAAoC;AACnEC,IAAAA,MAAM,EAAExB,sBAD2D;AAEnEyB,IAAAA,GAAG,EAAErB;AAF8D,GAApC,CAAnC;;AAKAsB,mBAAGC,aAAH,CAAiBb,WAAjB;;AACA,QAAM,uBAASQ,oBAAT,EAA+BP,gBAA/B,CAAN;AAEA,QAAMV,UAAU,CAACU,gBAAD,EAAmBE,mBAAnB,CAAhB;AACA,QAAML,UAAU,CAACG,gBAAD,CAAhB;AAEA,SAAOE,mBAAP;AACH,C","sourcesContent":["import fs from \"fs-extra\";\nimport extract from \"extract-zip\";\nimport path from \"path\";\nimport rimraf from \"rimraf\";\nimport S3 from \"aws-sdk/clients/s3\";\nimport download from \"./download\";\n\nconst PAGE_BUILDER_S3_BUCKET = process.env.S3_BUCKET;\nconst PAGE_BUILDER_INSTALLATION_FILES_ZIP_KEY = \"pbInstallation.zip\";\n\nfunction extractZip(zipPath, dir) {\n    return new Promise((resolve, reject) => {\n        extract(zipPath, { dir }, e => {\n            if (e) {\n                reject(e);\n                return;\n            }\n            // @ts-ignore\n            resolve();\n        });\n    });\n}\n\nfunction deleteFile(path) {\n    return new Promise((resolve, reject) => {\n        rimraf(path, e => {\n            if (e) {\n                reject(e);\n                return;\n            }\n            // @ts-ignore\n            resolve();\n        });\n    });\n}\n\nconst INSTALL_DIR = \"/tmp\";\nconst INSTALL_ZIP_PATH = path.join(INSTALL_DIR, \"apiPageBuilder.zip\");\nconst INSTALL_EXTRACT_DIR = path.join(INSTALL_DIR, \"apiPageBuilder\");\n\nexport default async () => {\n    const s3 = new S3({ region: process.env.AWS_REGION });\n    const installationFilesUrl = await s3.getSignedUrlPromise(\"getObject\", {\n        Bucket: PAGE_BUILDER_S3_BUCKET,\n        Key: PAGE_BUILDER_INSTALLATION_FILES_ZIP_KEY\n    });\n\n    fs.ensureDirSync(INSTALL_DIR);\n    await download(installationFilesUrl, INSTALL_ZIP_PATH);\n\n    await extractZip(INSTALL_ZIP_PATH, INSTALL_EXTRACT_DIR);\n    await deleteFile(INSTALL_ZIP_PATH);\n\n    return INSTALL_EXTRACT_DIR;\n};\n"],"file":"downloadInstallFiles.js"}