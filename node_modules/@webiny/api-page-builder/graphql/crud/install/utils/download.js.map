{"version":3,"sources":["../../../../../src/graphql/crud/install/utils/download.ts"],"names":["streamPipeline","pipeline","download","URL","path","response","ok","Error","statusText","body","e","console","log"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA,MAAMA,cAAc,GAAG,qBAAUC,gBAAV,CAAvB;AACA;AACA;AACA;AACA;AACA;;AACe,eAAeC,QAAf,CAAwBC,GAAxB,EAAqCC,IAArC,EAAmD;AAC9D,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAM,wBAAMF,GAAN,CAAvB;;AACA,QAAI,CAACE,QAAQ,CAACC,EAAd,EAAkB;AACd,YAAM,IAAIC,KAAJ,CAAW,uBAAsBF,QAAQ,CAACG,UAAW,EAArD,CAAN;AACH;;AACD,UAAMR,cAAc,CAACK,QAAQ,CAACI,IAAV,EAAgB,2BAAkBL,IAAlB,CAAhB,CAApB;AACH,GAND,CAME,OAAOM,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAa,uCAAsCT,GAAI,EAAvD,EAA0DO,CAA1D;AACH;AACJ","sourcesContent":["import { createWriteStream } from \"fs\";\nimport { promisify } from \"util\";\nimport { pipeline } from \"stream\";\nimport fetch from \"node-fetch\";\n\nconst streamPipeline = promisify(pipeline);\n/**\n * Download a remote file and save it onto disk.\n * @param {String} URL\n * @param {String} path\n */\nexport default async function download(URL: string, path: string) {\n    try {\n        const response = await fetch(URL);\n        if (!response.ok) {\n            throw new Error(`unexpected response ${response.statusText}`);\n        }\n        await streamPipeline(response.body, createWriteStream(path));\n    } catch (e) {\n        console.log(`[download]: Error while downloading ${URL}`, e);\n    }\n}\n"],"file":"download.js"}