"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _extractZip = _interopRequireDefault(require("extract-zip"));

var _path = _interopRequireDefault(require("path"));

var _rimraf = _interopRequireDefault(require("rimraf"));

var _s = _interopRequireDefault(require("aws-sdk/clients/s3"));

var _download = _interopRequireDefault(require("./download"));

const PAGE_BUILDER_S3_BUCKET = process.env.S3_BUCKET;
const PAGE_BUILDER_INSTALLATION_FILES_ZIP_KEY = "pbInstallation.zip";

function extractZip(zipPath, dir) {
  return new Promise((resolve, reject) => {
    (0, _extractZip.default)(zipPath, {
      dir
    }, e => {
      if (e) {
        reject(e);
        return;
      } // @ts-ignore


      resolve();
    });
  });
}

function deleteFile(path) {
  return new Promise((resolve, reject) => {
    (0, _rimraf.default)(path, e => {
      if (e) {
        reject(e);
        return;
      } // @ts-ignore


      resolve();
    });
  });
}

const INSTALL_DIR = "/tmp";

const INSTALL_ZIP_PATH = _path.default.join(INSTALL_DIR, "apiPageBuilder.zip");

const INSTALL_EXTRACT_DIR = _path.default.join(INSTALL_DIR, "apiPageBuilder");

var _default = async () => {
  const s3 = new _s.default({
    region: process.env.AWS_REGION
  });
  const installationFilesUrl = await s3.getSignedUrlPromise("getObject", {
    Bucket: PAGE_BUILDER_S3_BUCKET,
    Key: PAGE_BUILDER_INSTALLATION_FILES_ZIP_KEY
  });

  _fsExtra.default.ensureDirSync(INSTALL_DIR);

  await (0, _download.default)(installationFilesUrl, INSTALL_ZIP_PATH);
  await extractZip(INSTALL_ZIP_PATH, INSTALL_EXTRACT_DIR);
  await deleteFile(INSTALL_ZIP_PATH);
  return INSTALL_EXTRACT_DIR;
};

exports.default = _default;
//# sourceMappingURL=downloadInstallFiles.js.map