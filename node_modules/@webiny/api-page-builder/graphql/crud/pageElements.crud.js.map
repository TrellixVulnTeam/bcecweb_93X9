{"version":3,"sources":["../../../src/graphql/crud/pageElements.crud.ts"],"names":["CreateDataModel","name","validation","create","type","category","content","preview","UpdateDataModel","TYPE","PERMISSION_NAME","plugin","apply","context","db","PK","pageBuilder","pageElements","get","id","permission","rwd","pageElement","read","defaults","query","SK","limit","identity","security","getIdentity","list","$gt","own","filter","item","createdBy","data","createDataModel","populate","validate","createData","Object","assign","toJSON","tenant","tenancy","getCurrentTenant","locale","i18nContent","getLocale","code","createdOn","Date","toISOString","displayName","update","NotFoundError","updateDataModel","updateData","onlyDirty","delete","slug"],"mappings":"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","sourcesContent":["import { ContextPlugin } from \"@webiny/handler/types\";\nimport mdbid from \"mdbid\";\nimport { withFields, string } from \"@commodo/fields\";\nimport { object } from \"commodo-fields-object\";\nimport { validation } from \"@webiny/validation\";\nimport defaults from \"./utils/defaults\";\nimport getPKPrefix from \"./utils/getPKPrefix\";\nimport { PageElement, PbContext } from \"../../types\";\nimport checkBasePermissions from \"./utils/checkBasePermissions\";\nimport checkOwnPermissions from \"./utils/checkOwnPermissions\";\nimport { NotFoundError } from \"@webiny/handler-graphql\";\n\nconst CreateDataModel = withFields({\n    name: string({ validation: validation.create(\"required,maxLength:100\") }),\n    type: string({ validation: validation.create(\"required,in:element:block\") }),\n    category: string({ validation: validation.create(\"required,maxLength:100\") }),\n    content: object({ validation: validation.create(\"required\") }),\n    preview: object({ validation: validation.create(\"required\") })\n})();\n\nconst UpdateDataModel = withFields({\n    name: string({ validation: validation.create(\"maxLength:100\") }),\n    type: string({ validation: validation.create(\"in:element:block\") }),\n    category: string({ validation: validation.create(\"maxLength:100\") }),\n    content: object(),\n    preview: object()\n})();\n\nconst TYPE = \"pb.pageElement\";\nconst PERMISSION_NAME = \"pb.page\";\n\nconst plugin: ContextPlugin<PbContext> = {\n    type: \"context\",\n    async apply(context) {\n        const { db } = context;\n\n        const PK = () => `${getPKPrefix(context)}PE`;\n\n        context.pageBuilder = {\n            ...context.pageBuilder,\n            pageElements: {\n                async get(id) {\n                    const permission = await checkBasePermissions(context, PERMISSION_NAME, {\n                        rwd: \"r\"\n                    });\n\n                    const [[pageElement]] = await db.read<PageElement>({\n                        ...defaults.db,\n                        query: { PK: PK(), SK: id },\n                        limit: 1\n                    });\n\n                    if (!pageElement) {\n                        return null;\n                    }\n\n                    const identity = context.security.getIdentity();\n                    checkOwnPermissions(identity, permission, pageElement);\n\n                    return pageElement;\n                },\n\n                async list() {\n                    const permission = await checkBasePermissions(context, PERMISSION_NAME, {\n                        rwd: \"r\"\n                    });\n\n                    const [pageElements] = await db.read<PageElement>({\n                        ...defaults.db,\n                        query: { PK: PK(), SK: { $gt: \" \" } }\n                    });\n\n                    // If user can only manage own records, let's check if he owns the loaded one.\n                    if (permission.own) {\n                        const identity = context.security.getIdentity();\n                        return pageElements.filter(item => item.createdBy.id === identity.id);\n                    }\n\n                    return pageElements;\n                },\n\n                async create(data) {\n                    await checkBasePermissions(context, PERMISSION_NAME, { rwd: \"w\" });\n\n                    const createDataModel = new CreateDataModel().populate(data);\n                    await createDataModel.validate();\n\n                    const id = mdbid();\n                    const identity = context.security.getIdentity();\n\n                    const createData = Object.assign(await createDataModel.toJSON(), {\n                        PK: PK(),\n                        SK: id,\n                        TYPE,\n                        tenant: context.tenancy.getCurrentTenant().id,\n                        locale: context.i18nContent.getLocale().code,\n                        id,\n                        createdOn: new Date().toISOString(),\n                        createdBy: {\n                            id: identity.id,\n                            type: identity.type,\n                            displayName: identity.displayName\n                        }\n                    });\n\n                    await db.create({ ...defaults.db, data: createData });\n\n                    return createData;\n                },\n\n                async update(id, data) {\n                    const permission = await checkBasePermissions(context, PERMISSION_NAME, {\n                        rwd: \"w\"\n                    });\n                    const pageElement = await this.get(id);\n                    if (!pageElement) {\n                        throw new NotFoundError(`Page element \"${id}\" not found.`);\n                    }\n\n                    const identity = context.security.getIdentity();\n                    checkOwnPermissions(identity, permission, pageElement);\n\n                    const updateDataModel = new UpdateDataModel().populate(data);\n                    await updateDataModel.validate();\n\n                    const updateData = await updateDataModel.toJSON({ onlyDirty: true });\n\n                    await db.update({\n                        ...defaults.db,\n                        query: { PK: PK(), SK: id },\n                        data: updateData\n                    });\n\n                    return { ...pageElement, ...updateData };\n                },\n\n                async delete(slug) {\n                    const permission = await checkBasePermissions(context, PERMISSION_NAME, {\n                        rwd: \"d\"\n                    });\n\n                    const pageElement = await this.get(slug);\n                    if (!pageElement) {\n                        throw new NotFoundError(`PageElement \"${slug}\" not found.`);\n                    }\n\n                    const identity = context.security.getIdentity();\n                    checkOwnPermissions(identity, permission, pageElement);\n\n                    await db.delete({\n                        ...defaults.db,\n                        query: { PK: PK(), SK: slug }\n                    });\n\n                    return pageElement;\n                }\n            }\n        };\n    }\n};\n\nexport default plugin;\n"],"file":"pageElements.crud.js"}