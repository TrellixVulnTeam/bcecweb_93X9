"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _utils = require("../utils");

var _defaults = _interopRequireDefault(require("../../crud/utils/defaults"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const plugin = {
  name: "api-upgrade-page-builder",
  type: "api-upgrade",
  app: "page-builder",
  version: "5.0.0",

  async apply(context) {
    const {
      elasticsearch,
      fileManager,
      db
    } = context;
    const limit = 1000;
    let hasMoreItems = true;
    let after = undefined;
    let esItems = [];

    while (hasMoreItems) {
      const response = await elasticsearch.search(_objectSpread(_objectSpread({}, _defaults.default.es(context)), {}, {
        body: {
          sort: {
            createdOn: {
              order: "asc",
              // eslint-disable-next-line
              unmapped_type: "date"
            }
          },
          size: limit + 1,
          after
        }
      }));
      const {
        hits
      } = response.body.hits;
      hasMoreItems = hits.length > limit;
      after = hasMoreItems ? hits[limit - 1].sort : undefined;
      esItems = [...esItems, ...hits.filter(item => !item._id.includes("T#root#"))];
    }

    console.log(`Fetched ${esItems.length} items from Elasticsearch`);

    if (esItems.length === 0) {
      return;
    } // Store a backup of old items


    const esJSON = JSON.stringify(esItems);
    const {
      file
    } = await fileManager.storage.storagePlugin.upload({
      name: "upgrade-page-builder-es-5.0.0.json",
      type: "application/json",
      size: esJSON.length,
      buffer: Buffer.from(esJSON)
    });
    console.log(`Stored backup of Elasticsearch items to ${file.key}`); // Store items to ES DDB table

    await (0, _utils.paginateBatch)(esItems, 25, async items => {
      await db.batch().create(...items.map(item => {
        return _objectSpread(_objectSpread({}, _defaults.default.esDb), {}, {
          data: {
            PK: `T#root#L#${item._source.locale}#PB#P#${item._source.pid}`,
            SK: item._source.published === true ? "P" : "L",
            index: item._index,
            data: item._source,
            savedOn: new Date().toISOString(),
            version: "5.0.0"
          }
        });
      })).execute();
    });
    console.log(`Inserted items into Elasticsearch DynamoDB table.`); // Delete original items from ES index

    const operations = esItems.map(item => {
      return {
        delete: {
          _id: item._id,
          _index: item._index
        }
      };
    });
    const {
      body: {
        items,
        errors
      }
    } = await elasticsearch.bulk({
      body: operations,
      // eslint-disable-next-line
      filter_path: "errors,items.*.error"
    });
    console.log(`Deleted old Elasticsearch items from "root-page-builder" index.`);

    if (errors) {
      console.warn("These items were not deleted", items);
    }
  }

};
var _default = plugin; // Target _id: T#root#L#en-US#PB#P#603e248312ee4400089d16ec:L
// Target _id: T#root#L#en-US#PB#P#603e248312ee4400089d16ec:P
// const record = {
//     _index: "root-page-builder",
//     _type: "_doc",
//     _id: "P#6026a3873d8f6b0009c67db6",
//     _score: 1.0,
//     _source: {
//         __type: "page",
//         id: "6026a3873d8f6b0009c67db6#0001",
//         pid: "6026a3873d8f6b0009c67db6",
//         editor: "page-builder",
//         locale: "en-US",
//         createdOn: "2021-02-12T15:49:27.077Z",
//         savedOn: "2021-02-12T15:49:27.417Z",
//         createdBy: {
//             type: "admin",
//             displayName: "Pavel Denisjuk",
//             id: "admin@webiny.com"
//         },
//         ownedBy: {
//             type: "admin",
//             displayName: "Pavel Denisjuk",
//             id: "admin@webiny.com"
//         },
//         category: "static",
//         version: 1,
//         title: "Welcome to Webiny",
//         titleLC: "welcome to webiny",
//         path: "/welcome-to-webiny",
//         status: "published",
//         locked: true,
//         publishedOn: "2021-02-12T15:49:27.560Z",
//         tags: [],
//         snippet: null,
//         images: {
//             general: null
//         },
//         published: true
//     }
// };

exports.default = _default;
//# sourceMappingURL=index.js.map