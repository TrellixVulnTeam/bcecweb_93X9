{"version":3,"sources":["../../../src/admin/utils/createElementPlugin.tsx"],"names":["React","cloneDeep","plugins","Title","el","elementPlugins","byType","rootPlugin","find","pl","elementType","content","type","name","id","register","title","target","toolbar","refresh","group","preview","src","width","height","backgroundColor","onCreate","settings","create"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AAEA,OAAOC,KAAP;AAEA,gBAAe,UAACC,EAAD,EAAyB;AACpC,MAAMC,cAAc,GAAGH,OAAO,CAACI,MAAR,CAA0C,wBAA1C,CAAvB;AACA,MAAMC,UAAU,GAAGF,cAAc,CAACG,IAAf,CAAoB,UAAAC,EAAE;AAAA,WAAIA,EAAE,CAACC,WAAH,KAAmBN,EAAE,CAACO,OAAH,CAAWC,IAAlC;AAAA,GAAtB,CAAnB;;AAEA,MAAI,CAACL,UAAL,EAAiB;AACb;AACH;;AAED,MAAMM,IAAI,GAAG,mBAAmBT,EAAE,CAACU,EAAnC;AAEAZ,EAAAA,OAAO,CAACa,QAAR,CAAiB;AACbF,IAAAA,IAAI,EAAJA,IADa;AAEbG,IAAAA,KAAK,EAAEZ,EAAE,CAACS,IAFG;AAGbD,IAAAA,IAAI,EAAE,wBAHO;AAIbF,IAAAA,WAAW,EAAEG,IAJA;AAKbI,IAAAA,MAAM,EAAEV,UAAU,CAACU,MALN;AAMbC,IAAAA,OAAO,EAAE;AACLF,MAAAA,KADK,uBACc;AAAA,YAAXG,OAAW,QAAXA,OAAW;AACf,4BAAO,oBAAC,KAAD;AAAO,UAAA,MAAM,EAAEN,IAAf;AAAqB,UAAA,KAAK,EAAET,EAAE,CAACS,IAA/B;AAAqC,UAAA,EAAE,EAAET,EAAE,CAACU,EAA5C;AAAgD,UAAA,OAAO,EAAEK;AAAzD,UAAP;AACH,OAHI;AAILC,MAAAA,KAAK,EAAE,+BAJF;AAKLC,MAAAA,OALK,qBAKK;AACN,4BACI;AACI,UAAA,GAAG,EAAEjB,EAAE,CAACiB,OAAH,CAAWC,GADpB;AAEI,UAAA,GAAG,EAAElB,EAAE,CAACS,IAFZ;AAGI,UAAA,KAAK,EAAE;AAAEU,YAAAA,KAAK,EAAE,GAAT;AAAcC,YAAAA,MAAM,EAAE,MAAtB;AAA8BC,YAAAA,eAAe,EAAE;AAA/C;AAHX,UADJ;AAOH;AAbI,KANI;AAqBbC,IAAAA,QAAQ,EAAE,MArBG;AAsBbC,IAAAA,QAAQ,EAAEpB,UAAU,GAAGA,UAAU,CAACoB,QAAd,GAAyB,EAtBhC;AAuBbC,IAAAA,MAvBa,oBAuBJ;AACL,aAAO3B,SAAS,CAACG,EAAE,CAACO,OAAJ,CAAhB;AACH;AAzBY,GAAjB;AA2BH,CArCD","sourcesContent":["import React from \"react\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport { plugins } from \"@webiny/plugins\";\nimport { PbEditorElement, PbEditorPageElementPlugin } from \"../../types\";\nimport Title from \"./components/Title\";\n\nexport default (el: PbEditorElement) => {\n    const elementPlugins = plugins.byType<PbEditorPageElementPlugin>(\"pb-editor-page-element\");\n    const rootPlugin = elementPlugins.find(pl => pl.elementType === el.content.type);\n\n    if (!rootPlugin) {\n        return;\n    }\n\n    const name = \"saved-element-\" + el.id;\n\n    plugins.register({\n        name,\n        title: el.name,\n        type: \"pb-editor-page-element\",\n        elementType: name,\n        target: rootPlugin.target,\n        toolbar: {\n            title({ refresh }) {\n                return <Title plugin={name} title={el.name} id={el.id} refresh={refresh} />;\n            },\n            group: \"pb-editor-element-group-saved\",\n            preview() {\n                return (\n                    <img\n                        src={el.preview.src}\n                        alt={el.name}\n                        style={{ width: 227, height: \"auto\", backgroundColor: \"#fff\" }}\n                    />\n                );\n            }\n        },\n        onCreate: \"skip\",\n        settings: rootPlugin ? rootPlugin.settings : [],\n        create() {\n            return cloneDeep(el.content);\n        }\n    });\n};\n"],"file":"createElementPlugin.js"}