import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
var MINUTE = 60 * 1000; // Plain in-memory store for fetch response

var CACHE = {};

function getCacheTimer(time) {
  var cacheTimer = 0;
  var now = new Date().getTime();

  if (cacheTimer < now + time) {
    cacheTimer = now + time;
  }

  return cacheTimer;
}

export function fetchWithCache(_x) {
  return _fetchWithCache.apply(this, arguments);
}

function _fetchWithCache() {
  _fetchWithCache = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(params) {
    var url, _params$time, time, ignoreCache, now, response;

    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            url = params.url, _params$time = params.time, time = _params$time === void 0 ? 5 * MINUTE : _params$time, ignoreCache = params.ignoreCache;
            now = new Date().getTime();

            if (!(!CACHE[url] || CACHE[url].cacheTimer < now || ignoreCache)) {
              _context2.next = 13;
              break;
            }

            _context2.prev = 3;
            _context2.next = 6;
            return fetch(url, {
              method: "GET",
              mode: "no-cors"
            });

          case 6:
            response = _context2.sent;

            // Update cache with response
            if (response) {
              CACHE[url] = _objectSpread(_objectSpread({}, response), {}, {
                active: true
              });
              CACHE[url].cacheTimer = getCacheTimer(time);
            }

            _context2.next = 13;
            break;

          case 10:
            _context2.prev = 10;
            _context2.t0 = _context2["catch"](3);
            CACHE[url] = {
              active: false
            };

          case 13:
            return _context2.abrupt("return", CACHE[url]);

          case 14:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[3, 10]]);
  }));
  return _fetchWithCache.apply(this, arguments);
}

export var pingSite = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(params) {
    var url, cb, ignoreCache, response;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            url = params.url, cb = params.cb, ignoreCache = params.ignoreCache;
            _context.prev = 1;
            _context.next = 4;
            return fetchWithCache({
              url: url,
              ignoreCache: ignoreCache
            });

          case 4:
            response = _context.sent;
            cb(response && response.active);
            _context.next = 12;
            break;

          case 8:
            _context.prev = 8;
            _context.t0 = _context["catch"](1);
            console.error(_context.t0);
            cb(false);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[1, 8]]);
  }));

  return function pingSite(_x2) {
    return _ref.apply(this, arguments);
  };
}();
//# sourceMappingURL=utils.js.map