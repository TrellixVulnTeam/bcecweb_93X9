{"version":3,"sources":["../../../../src/admin/hooks/useSiteStatus/utils.ts"],"names":["MINUTE","CACHE","getCacheTimer","time","cacheTimer","now","Date","getTime","fetchWithCache","params","url","ignoreCache","fetch","method","mode","response","active","pingSite","cb","console","error"],"mappings":";;;AAAA,IAAMA,MAAM,GAAG,KAAK,IAApB,C,CACA;;AACA,IAAMC,KAAK,GAAG,EAAd;;AAEA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AACzB,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAMC,GAAG,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAZ;;AACA,MAAIH,UAAU,GAAGC,GAAG,GAAGF,IAAvB,EAA6B;AACzBC,IAAAA,UAAU,GAAGC,GAAG,GAAGF,IAAnB;AACH;;AACD,SAAOC,UAAP;AACH;;AAED,gBAAsBI,cAAtB;AAAA;AAAA;;;6EAAO,kBAA8BC,MAA9B;AAAA;;AAAA;AAAA;AAAA;AAAA;AACKC,YAAAA,GADL,GAC6CD,MAD7C,CACKC,GADL,iBAC6CD,MAD7C,CACUN,IADV,EACUA,IADV,6BACiB,IAAIH,MADrB,iBAC6BW,WAD7B,GAC6CF,MAD7C,CAC6BE,WAD7B;AAGGN,YAAAA,GAHH,GAGS,IAAIC,IAAJ,GAAWC,OAAX,EAHT;;AAAA,kBAKC,CAACN,KAAK,CAACS,GAAD,CAAN,IAAeT,KAAK,CAACS,GAAD,CAAL,CAAWN,UAAX,GAAwBC,GAAvC,IAA8CM,WAL/C;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAO4BC,KAAK,CAACF,GAAD,EAAM;AAC9BG,cAAAA,MAAM,EAAE,KADsB;AAE9BC,cAAAA,IAAI,EAAE;AAFwB,aAAN,CAPjC;;AAAA;AAOWC,YAAAA,QAPX;;AAWK;AACA,gBAAIA,QAAJ,EAAc;AACVd,cAAAA,KAAK,CAACS,GAAD,CAAL,mCAAkBK,QAAlB;AAA4BC,gBAAAA,MAAM,EAAE;AAApC;AACAf,cAAAA,KAAK,CAACS,GAAD,CAAL,CAAWN,UAAX,GAAwBF,aAAa,CAACC,IAAD,CAArC;AACH;;AAfN;AAAA;;AAAA;AAAA;AAAA;AAiBKF,YAAAA,KAAK,CAACS,GAAD,CAAL,GAAa;AAAEM,cAAAA,MAAM,EAAE;AAAV,aAAb;;AAjBL;AAAA,8CAqBIf,KAAK,CAACS,GAAD,CArBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAwBP,OAAO,IAAMO,QAAQ;AAAA,sEAAG,iBAAOR,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,YAAAA,GADY,GACaD,MADb,CACZC,GADY,EACPQ,EADO,GACaT,MADb,CACPS,EADO,EACHP,WADG,GACaF,MADb,CACHE,WADG;AAAA;AAAA;AAAA,mBAGOH,cAAc,CAAC;AAAEE,cAAAA,GAAG,EAAHA,GAAF;AAAOC,cAAAA,WAAW,EAAXA;AAAP,aAAD,CAHrB;;AAAA;AAGVI,YAAAA,QAHU;AAKhBG,YAAAA,EAAE,CAACH,QAAQ,IAAIA,QAAQ,CAACC,MAAtB,CAAF;AALgB;AAAA;;AAAA;AAAA;AAAA;AAOhBG,YAAAA,OAAO,CAACC,KAAR;AACAF,YAAAA,EAAE,CAAC,KAAD,CAAF;;AARgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARD,QAAQ;AAAA;AAAA;AAAA,GAAd","sourcesContent":["const MINUTE = 60 * 1000;\n// Plain in-memory store for fetch response\nconst CACHE = {};\n\nfunction getCacheTimer(time) {\n    let cacheTimer = 0;\n    const now = new Date().getTime();\n    if (cacheTimer < now + time) {\n        cacheTimer = now + time;\n    }\n    return cacheTimer;\n}\n\nexport async function fetchWithCache(params: { url: string; time?: number; ignoreCache: boolean }) {\n    const { url, time = 5 * MINUTE, ignoreCache } = params;\n\n    const now = new Date().getTime();\n\n    if (!CACHE[url] || CACHE[url].cacheTimer < now || ignoreCache) {\n        try {\n            const response = await fetch(url, {\n                method: \"GET\",\n                mode: \"no-cors\"\n            });\n            // Update cache with response\n            if (response) {\n                CACHE[url] = { ...response, active: true };\n                CACHE[url].cacheTimer = getCacheTimer(time);\n            }\n        } catch (e) {\n            CACHE[url] = { active: false };\n        }\n    }\n\n    return CACHE[url];\n}\n\nexport const pingSite = async (params: { url: string; cb: any; ignoreCache: boolean }) => {\n    const { url, cb, ignoreCache } = params;\n    try {\n        const response = await fetchWithCache({ url, ignoreCache });\n\n        cb(response && response.active);\n    } catch (e) {\n        console.error(e);\n        cb(false);\n    }\n};\n"],"file":"utils.js"}