import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _get from "lodash/get";

var _templateObject, _templateObject2;

import { useQuery, useMutation } from "@apollo/react-hooks";
import gql from "graphql-tag";
import { useTenancy } from "@webiny/app-tenancy/hooks/useTenancy";
import { useI18N } from "@webiny/app-i18n/hooks/useI18N";
var DATA_FIELDS =
/* GraphQL */
"\n    {\n        id\n        data {\n            websiteUrl\n            websitePreviewUrl\n            name\n            logo {\n                id\n                src\n            }\n            favicon {\n                id\n                src\n            }\n            pages {\n                home\n                notFound\n            }\n            social {\n                facebook\n                twitter\n                instagram\n                image {\n                    id\n                    src\n                }\n            }\n        }\n        error {\n            message\n        }\n    }\n";
export var GET_SETTINGS = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    query GetSettings {\n        pageBuilder {\n            getSettings ", "\n            getDefaultSettings ", "\n        }\n    }\n"])), DATA_FIELDS, DATA_FIELDS);
export var UPDATE_SETTINGS = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    mutation UpdateSettings($data: PbSettingsInput!) {\n        pageBuilder {\n            updateSettings(data: $data) ", "\n        }\n    }\n"])), DATA_FIELDS);
export function usePageBuilderSettings() {
  var getSettingsQuery = useQuery(GET_SETTINGS);

  var _useTenancy = useTenancy(),
      tenant = _useTenancy.tenant;

  var _useI18N = useI18N(),
      getCurrentLocale = _useI18N.getCurrentLocale;

  var settings = _get(getSettingsQuery, "data.pageBuilder.getSettings.data") || {};
  var defaultSettings = _get(getSettingsQuery, "data.pageBuilder.getDefaultSettings.data") || {};

  var getWebsiteUrl = function getWebsiteUrl() {
    var preview = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    if (preview) {
      return settings.websitePreviewUrl || defaultSettings.websitePreviewUrl;
    }

    return settings.websiteUrl || defaultSettings.websiteUrl;
  };

  var getPageUrl = function getPageUrl(page) {
    var preview = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var url = getWebsiteUrl(preview) + page.path;

    if (!preview || page.status === "published") {
      return url;
    } // We must append `preview` query param if page status is not `published`.


    var query = ["preview=" + encodeURIComponent(page.id), "__locale=" + getCurrentLocale("content"), tenant ? "__tenant=" + tenant.id : null];
    return url + "?" + query.filter(Boolean).join("&");
  };

  var isSpecialPage = function isSpecialPage(page, type) {
    var _settings$pages;

    if (!((_settings$pages = settings.pages) !== null && _settings$pages !== void 0 && _settings$pages[type])) {
      return false;
    }

    return settings.pages[type] === page.pid;
  };

  var updateSettingsMutation = useMutation(UPDATE_SETTINGS);
  return {
    getWebsiteUrl: getWebsiteUrl,
    getPageUrl: getPageUrl,
    isSpecialPage: isSpecialPage,
    settings: settings,
    defaultSettings: defaultSettings,
    getSettingsQuery: getSettingsQuery,
    updateSettingsMutation: updateSettingsMutation
  };
}
//# sourceMappingURL=usePageBuilderSettings.js.map