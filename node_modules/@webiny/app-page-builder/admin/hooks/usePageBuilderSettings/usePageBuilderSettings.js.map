{"version":3,"sources":["../../../../src/admin/hooks/usePageBuilderSettings/usePageBuilderSettings.ts"],"names":["useQuery","useMutation","gql","useTenancy","useI18N","DATA_FIELDS","GET_SETTINGS","UPDATE_SETTINGS","usePageBuilderSettings","getSettingsQuery","tenant","getCurrentLocale","settings","defaultSettings","getWebsiteUrl","preview","websitePreviewUrl","websiteUrl","getPageUrl","page","url","path","status","query","encodeURIComponent","id","filter","Boolean","join","isSpecialPage","type","pages","pid","updateSettingsMutation"],"mappings":";;;;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,qBAAtC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,SAASC,UAAT,QAA2B,sCAA3B;AACA,SAASC,OAAT,QAAwB,gCAAxB;AAEA,IAAMC,WAAW;AAAG;AAAH,knBAAjB;AAmCA,OAAO,IAAMC,YAAY,GAAGJ,GAAH,6MAGCG,WAHD,EAIQA,WAJR,CAAlB;AASP,OAAO,IAAME,eAAe,GAAGL,GAAH,yNAGcG,WAHd,CAArB;AAQP,OAAO,SAASG,sBAAT,GAAkC;AACrC,MAAMC,gBAAgB,GAAGT,QAAQ,CAACM,YAAD,CAAjC;;AACA,oBAAmBH,UAAU,EAA7B;AAAA,MAAQO,MAAR,eAAQA,MAAR;;AACA,iBAA6BN,OAAO,EAApC;AAAA,MAAQO,gBAAR,YAAQA,gBAAR;;AAEA,MAAMC,QAAQ,GAAG,KAAIH,gBAAJ,EAAsB,mCAAtB,KAA8D,EAA/E;AACA,MAAMI,eAAe,GAAG,KAAIJ,gBAAJ,EAAsB,0CAAtB,KAAqE,EAA7F;;AAEA,MAAMK,aAAa,GAAG,SAAhBA,aAAgB,GAAqB;AAAA,QAApBC,OAAoB,uEAAV,KAAU;;AACvC,QAAIA,OAAJ,EAAa;AACT,aAAOH,QAAQ,CAACI,iBAAT,IAA8BH,eAAe,CAACG,iBAArD;AACH;;AACD,WAAOJ,QAAQ,CAACK,UAAT,IAAuBJ,eAAe,CAACI,UAA9C;AACH,GALD;;AAOA,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAA2B;AAAA,QAApBJ,OAAoB,uEAAV,KAAU;AAC1C,QAAMK,GAAG,GAAGN,aAAa,CAACC,OAAD,CAAb,GAAyBI,IAAI,CAACE,IAA1C;;AACA,QAAI,CAACN,OAAD,IAAYI,IAAI,CAACG,MAAL,KAAgB,WAAhC,EAA6C;AACzC,aAAOF,GAAP;AACH,KAJyC,CAM1C;;;AACA,QAAMG,KAAK,GAAG,CACV,aAAaC,kBAAkB,CAACL,IAAI,CAACM,EAAN,CADrB,EAEV,cAAcd,gBAAgB,CAAC,SAAD,CAFpB,EAGVD,MAAM,GAAG,cAAcA,MAAM,CAACe,EAAxB,GAA6B,IAHzB,CAAd;AAMA,WAAOL,GAAG,GAAG,GAAN,GAAYG,KAAK,CAACG,MAAN,CAAaC,OAAb,EAAsBC,IAAtB,CAA2B,GAA3B,CAAnB;AACH,GAdD;;AAgBA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACV,IAAD,EAAOW,IAAP,EAAqC;AAAA;;AACvD,QAAI,qBAAClB,QAAQ,CAACmB,KAAV,4CAAC,gBAAiBD,IAAjB,CAAD,CAAJ,EAA6B;AACzB,aAAO,KAAP;AACH;;AAED,WAAOlB,QAAQ,CAACmB,KAAT,CAAeD,IAAf,MAAyBX,IAAI,CAACa,GAArC;AACH,GAND;;AAQA,MAAMC,sBAAsB,GAAGhC,WAAW,CAACM,eAAD,CAA1C;AACA,SAAO;AACHO,IAAAA,aAAa,EAAbA,aADG;AAEHI,IAAAA,UAAU,EAAVA,UAFG;AAGHW,IAAAA,aAAa,EAAbA,aAHG;AAIHjB,IAAAA,QAAQ,EAARA,QAJG;AAKHC,IAAAA,eAAe,EAAfA,eALG;AAMHJ,IAAAA,gBAAgB,EAAhBA,gBANG;AAOHwB,IAAAA,sBAAsB,EAAtBA;AAPG,GAAP;AASH","sourcesContent":["import { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport { get } from \"lodash\";\nimport { useTenancy } from \"@webiny/app-tenancy/hooks/useTenancy\";\nimport { useI18N } from \"@webiny/app-i18n/hooks/useI18N\";\n\nconst DATA_FIELDS = /* GraphQL */ `\n    {\n        id\n        data {\n            websiteUrl\n            websitePreviewUrl\n            name\n            logo {\n                id\n                src\n            }\n            favicon {\n                id\n                src\n            }\n            pages {\n                home\n                notFound\n            }\n            social {\n                facebook\n                twitter\n                instagram\n                image {\n                    id\n                    src\n                }\n            }\n        }\n        error {\n            message\n        }\n    }\n`;\n\nexport const GET_SETTINGS = gql`\n    query GetSettings {\n        pageBuilder {\n            getSettings ${DATA_FIELDS}\n            getDefaultSettings ${DATA_FIELDS}\n        }\n    }\n`;\n\nexport const UPDATE_SETTINGS = gql`\n    mutation UpdateSettings($data: PbSettingsInput!) {\n        pageBuilder {\n            updateSettings(data: $data) ${DATA_FIELDS}\n        }\n    }\n`;\n\nexport function usePageBuilderSettings() {\n    const getSettingsQuery = useQuery(GET_SETTINGS);\n    const { tenant } = useTenancy();\n    const { getCurrentLocale } = useI18N();\n\n    const settings = get(getSettingsQuery, \"data.pageBuilder.getSettings.data\") || {};\n    const defaultSettings = get(getSettingsQuery, \"data.pageBuilder.getDefaultSettings.data\") || {};\n\n    const getWebsiteUrl = (preview = false) => {\n        if (preview) {\n            return settings.websitePreviewUrl || defaultSettings.websitePreviewUrl;\n        }\n        return settings.websiteUrl || defaultSettings.websiteUrl;\n    };\n\n    const getPageUrl = (page, preview = false) => {\n        const url = getWebsiteUrl(preview) + page.path;\n        if (!preview || page.status === \"published\") {\n            return url;\n        }\n\n        // We must append `preview` query param if page status is not `published`.\n        const query = [\n            \"preview=\" + encodeURIComponent(page.id),\n            \"__locale=\" + getCurrentLocale(\"content\"),\n            tenant ? \"__tenant=\" + tenant.id : null\n        ];\n\n        return url + \"?\" + query.filter(Boolean).join(\"&\");\n    };\n\n    const isSpecialPage = (page, type: \"home\" | \"notFound\") => {\n        if (!settings.pages?.[type]) {\n            return false;\n        }\n\n        return settings.pages[type] === page.pid;\n    };\n\n    const updateSettingsMutation = useMutation(UPDATE_SETTINGS);\n    return {\n        getWebsiteUrl,\n        getPageUrl,\n        isSpecialPage,\n        settings,\n        defaultSettings,\n        getSettingsQuery,\n        updateSettingsMutation\n    };\n}\n"],"file":"usePageBuilderSettings.js"}