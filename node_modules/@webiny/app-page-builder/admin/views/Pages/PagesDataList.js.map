{"version":3,"sources":["../../../../src/admin/views/Pages/PagesDataList.tsx"],"names":["React","useCallback","useEffect","useMemo","useState","styled","i18n","useRouter","useQuery","debounce","get","LIST_PAGES","TimeAgo","DataList","DataListModalOverlay","DataListModalOverlayAction","ListItem","ListItemMeta","ListItemText","ListItemTextSecondary","ListTextOverline","Typography","css","Form","Select","LIST_CATEGORIES","Cell","Grid","AutoComplete","Scrollbar","statusesLabels","ButtonIcon","ButtonSecondary","SearchUI","deserializeSorters","serializeSorters","GQLCache","t","ns","rightAlign","alignItems","InlineLoaderWrapper","position","bottom","left","display","justifyContent","width","height","backgroundColor","sorters","label","createdOn","title","PagesDataList","onCreatePage","canCreate","filter","setFilter","history","location","query","URLSearchParams","search","fetchMoreLoading","setFetchMoreLoading","where","setWhere","sort","setSort","undefined","setSearchParams","params","set","delete","push","pathname","toString","variables","listQuery","writePageListVariablesToLocalStorage","listPagesData","selectedPageId","categoriesQuery","categoriesData","loading","find","item","loadMoreOnScroll","scrollFrame","fetchMore","top","meta","nextPage","page","updateQuery","prev","fetchMoreResult","next","pageBuilder","listPages","data","pagesDataListModalOverlay","status","category","newSort","Bind","map","id","slug","name","Boolean","Array","isArray","createdBy","firstName","savedOn","version"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport styled from \"@emotion/styled\";\nimport { i18n } from \"@webiny/app/i18n\";\nimport { useRouter } from \"@webiny/react-router\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport debounce from \"lodash/debounce\";\nimport get from \"lodash/get\";\nimport { LIST_PAGES } from \"../../graphql/pages\";\nimport TimeAgo from \"timeago-react\";\nimport {\n    DataList,\n    DataListModalOverlay,\n    DataListModalOverlayAction,\n    ListItem,\n    ListItemMeta,\n    ListItemText,\n    ListItemTextSecondary,\n    ListTextOverline\n} from \"@webiny/ui/List\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { css } from \"emotion\";\nimport { Form } from \"@webiny/form\";\nimport { Select } from \"@webiny/ui/Select\";\nimport { LIST_CATEGORIES } from \"./../Categories/graphql\";\nimport { Cell, Grid } from \"@webiny/ui/Grid\";\nimport { AutoComplete } from \"@webiny/ui/AutoComplete\";\nimport { Scrollbar } from \"@webiny/ui/Scrollbar\";\nimport statusesLabels from \"../../constants/pageStatusesLabels\";\nimport { ButtonIcon, ButtonSecondary } from \"@webiny/ui/Button\";\nimport { ReactComponent as AddIcon } from \"@webiny/app-admin/assets/icons/add-18px.svg\";\nimport { ReactComponent as FilterIcon } from \"@webiny/app-admin/assets/icons/filter-24px.svg\";\nimport SearchUI from \"@webiny/app-admin/components/SearchUI\";\nimport { deserializeSorters, serializeSorters } from \"../utils\";\nimport * as GQLCache from \"~/admin/views/Pages/cache\";\n\nconst t = i18n.ns(\"app-page-builder/admin/pages/data-list\");\nconst rightAlign = css({\n    alignItems: \"flex-end !important\"\n});\nconst InlineLoaderWrapper = styled(\"div\")({\n    position: \"absolute\",\n    bottom: 0,\n    left: 0,\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"100%\",\n    height: 40,\n    backgroundColor: \"var(--mdc-theme-surface)\"\n});\nconst sorters = [\n    {\n        label: t`Newest to oldest`,\n        sorters: { createdOn: \"desc\" }\n    },\n    {\n        label: t`Oldest to newest`,\n        sorters: { createdOn: \"asc\" }\n    },\n    {\n        label: t`Title A-Z`,\n        sorters: { title: \"asc\" }\n    },\n    {\n        label: t`Title Z-A`,\n        sorters: { title: \"desc\" }\n    }\n];\n\ntype PagesDataListProps = {\n    onCreatePage: (event?: React.SyntheticEvent) => void;\n    canCreate: boolean;\n};\nconst PagesDataList = ({ onCreatePage, canCreate }: PagesDataListProps) => {\n    const [filter, setFilter] = useState(\"\");\n    const { history, location } = useRouter();\n    const query = new URLSearchParams(location.search);\n\n    const [fetchMoreLoading, setFetchMoreLoading] = useState(false);\n    const [where, setWhere] = useState({});\n    const [sort, setSort] = useState({ createdOn: \"desc\" });\n    const search = {\n        query: query.get(\"search\") || undefined\n    };\n\n    const setSearchParams = useMemo(() => {\n        return debounce(({ filter, location }) => {\n            const params = new URLSearchParams(location.search);\n            if (filter) {\n                params.set(\"search\", filter);\n            } else {\n                params.delete(\"search\");\n            }\n            // Update search in URL.\n            history.push(`${location.pathname}?${params.toString()}`);\n        }, 250);\n    }, []);\n    // Update \"search\" param whenever filter is changed\n    useEffect(() => {\n        setSearchParams({\n            filter,\n            location\n        });\n    }, [filter]);\n\n    const variables = {\n        search,\n        sort,\n        where\n    };\n\n    const listQuery = useQuery(LIST_PAGES, {\n        variables\n    });\n\n    GQLCache.writePageListVariablesToLocalStorage(variables);\n\n    const listPagesData = get(listQuery, \"data.pageBuilder.listPages.data\", []);\n    const selectedPageId = new URLSearchParams(location.search).get(\"id\");\n\n    const categoriesQuery = useQuery(LIST_CATEGORIES);\n    const categoriesData = get(categoriesQuery, \"data.pageBuilder.listCategories.data\", []);\n\n    const loading = [listQuery].find(item => item.loading);\n    // Load more pages on page list scroll\n    const loadMoreOnScroll = useCallback(\n        debounce(({ scrollFrame, fetchMore }) => {\n            if (scrollFrame.top > 0.9) {\n                const meta = get(listQuery, \"data.pageBuilder.listPages.meta\", {});\n                if (meta.nextPage) {\n                    setFetchMoreLoading(true);\n                    fetchMore({\n                        variables: { page: meta.page + 1 },\n                        updateQuery: (prev, { fetchMoreResult }) => {\n                            if (!fetchMoreResult) {\n                                return prev;\n                            }\n\n                            const next = { ...fetchMoreResult };\n\n                            next.pageBuilder.listPages.data = [\n                                ...prev.pageBuilder.listPages.data,\n                                ...fetchMoreResult.pageBuilder.listPages.data\n                            ];\n                            setFetchMoreLoading(false);\n                            return next;\n                        }\n                    });\n                }\n            }\n        }, 500),\n        [listQuery]\n    );\n\n    const pagesDataListModalOverlay = useMemo(\n        () => (\n            <DataListModalOverlay>\n                <Form\n                    data={{ ...where, sort: serializeSorters(sort) }}\n                    onChange={({ status, category, sort }) => {\n                        // Update \"where\" filter.\n                        const where = { category, status: undefined };\n                        if (status !== \"all\") {\n                            where.status = status;\n                        }\n\n                        setWhere(where);\n\n                        // Update \"sort\".\n                        if (typeof sort === \"string\") {\n                            const newSort = deserializeSorters(sort);\n                            // @ts-ignore\n                            setSort(newSort);\n                        }\n                    }}\n                >\n                    {({ Bind }) => (\n                        <Grid>\n                            <Cell span={12}>\n                                <Bind name={\"category\"}>\n                                    <AutoComplete\n                                        description={\"Filter by a specific category.\"}\n                                        label={t`Filter by category`}\n                                        options={categoriesData.map(item => ({\n                                            id: item.slug,\n                                            name: item.name\n                                        }))}\n                                    />\n                                </Bind>\n                            </Cell>\n                            <Cell span={12}>\n                                <Bind name={\"status\"}>\n                                    <Select\n                                        label={t`Filter by status`}\n                                        description={\"Filter by a specific page status.\"}\n                                    >\n                                        <option value={\"all\"}>{t`All`}</option>\n                                        <option value={\"draft\"}>{t`Draft`}</option>\n                                        <option value={\"published\"}>{t`Published`}</option>\n                                        <option value={\"unpublished\"}>{t`Unpublished`}</option>\n                                        <option\n                                            value={\"reviewRequested\"}\n                                        >{t`Review requested`}</option>\n                                        <option\n                                            value={\"changesRequested\"}\n                                        >{t`Changes requested`}</option>\n                                    </Select>\n                                </Bind>\n                            </Cell>\n                            <Cell span={12}>\n                                <Bind name={\"sort\"}>\n                                    <Select label={t`Sort by`} description={\"Sort pages by\"}>\n                                        {sorters.map(({ label, sorters }) => {\n                                            return (\n                                                <option\n                                                    key={label}\n                                                    value={serializeSorters(sorters)}\n                                                >\n                                                    {label}\n                                                </option>\n                                            );\n                                        })}\n                                    </Select>\n                                </Bind>\n                            </Cell>\n                        </Grid>\n                    )}\n                </Form>\n            </DataListModalOverlay>\n        ),\n        [categoriesData, where, sort]\n    );\n\n    return (\n        <DataList\n            title={t`Pages`}\n            loading={Boolean(loading)}\n            actions={\n                canCreate ? (\n                    <ButtonSecondary data-testid=\"new-record-button\" onClick={onCreatePage}>\n                        <ButtonIcon icon={<AddIcon />} /> {t`New Page`}\n                    </ButtonSecondary>\n                ) : null\n            }\n            data={listPagesData}\n            search={\n                <SearchUI value={filter} onChange={setFilter} inputPlaceholder={t`Search pages`} />\n            }\n            modalOverlay={pagesDataListModalOverlay}\n            modalOverlayAction={\n                <DataListModalOverlayAction\n                    icon={<FilterIcon />}\n                    data-testid={\"default-data-list.filter\"}\n                />\n            }\n        >\n            {({ data }) => (\n                <>\n                    <Scrollbar\n                        data-testid=\"default-data-list\"\n                        onScrollFrame={scrollFrame =>\n                            loadMoreOnScroll({ scrollFrame, fetchMore: listQuery.fetchMore })\n                        }\n                    >\n                        {Array.isArray(data) &&\n                            data.map(page => (\n                                <ListItem key={page.id} selected={page.id === selectedPageId}>\n                                    <ListItemText\n                                        onClick={() => {\n                                            query.set(\"id\", page.id);\n                                            history.push({ search: query.toString() });\n                                        }}\n                                    >\n                                        {page.title}\n                                        <ListTextOverline>\n                                            {page.category?.name || t`Unknown category`}\n                                        </ListTextOverline>\n                                        {page.createdBy && (\n                                            <ListItemTextSecondary>\n                                                Created by: {page.createdBy.firstName || \"N/A\"}.\n                                                Last modified: <TimeAgo datetime={page.savedOn} />.\n                                            </ListItemTextSecondary>\n                                        )}\n                                    </ListItemText>\n                                    <ListItemMeta className={rightAlign}>\n                                        <Typography use={\"subtitle2\"}>\n                                            {`${statusesLabels[page.status]} (v${page.version})`}\n                                        </Typography>\n                                    </ListItemMeta>\n                                </ListItem>\n                            ))}\n                    </Scrollbar>\n                    {fetchMoreLoading && (\n                        <InlineLoaderWrapper>\n                            <Typography use={\"overline\"}>{t`Loading more pages...`}</Typography>\n                        </InlineLoaderWrapper>\n                    )}\n                </>\n            )}\n        </DataList>\n    );\n};\n\nexport default PagesDataList;\n"],"file":"PagesDataList.js"}