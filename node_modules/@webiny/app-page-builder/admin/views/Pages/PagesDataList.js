import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18;

import React, { useCallback, useEffect, useMemo, useState } from "react";
import styled from "@emotion/styled";
import { i18n } from "@webiny/app/i18n";
import { useRouter } from "@webiny/react-router";
import { useQuery } from "@apollo/react-hooks";
import debounce from "lodash/debounce";
import get from "lodash/get";
import { LIST_PAGES } from "../../graphql/pages";
import TimeAgo from "timeago-react";
import { DataList, DataListModalOverlay, DataListModalOverlayAction, ListItem, ListItemMeta, ListItemText, ListItemTextSecondary, ListTextOverline } from "@webiny/ui/List";
import { Typography } from "@webiny/ui/Typography";
import { css } from "emotion";
import { Form } from "@webiny/form";
import { Select } from "@webiny/ui/Select";
import { LIST_CATEGORIES } from "./../Categories/graphql";
import { Cell, Grid } from "@webiny/ui/Grid";
import { AutoComplete } from "@webiny/ui/AutoComplete";
import { Scrollbar } from "@webiny/ui/Scrollbar";
import statusesLabels from "../../constants/pageStatusesLabels";
import { ButtonIcon, ButtonSecondary } from "@webiny/ui/Button";
import { ReactComponent as AddIcon } from "@svgr/webpack!@webiny/app-admin/assets/icons/add-18px.svg";
import { ReactComponent as FilterIcon } from "@svgr/webpack!@webiny/app-admin/assets/icons/filter-24px.svg";
import SearchUI from "@webiny/app-admin/components/SearchUI";
import { deserializeSorters, serializeSorters } from "../utils";
import * as GQLCache from "./cache";
var t = i18n.ns("app-page-builder/admin/pages/data-list");
var rightAlign = /*#__PURE__*/css({
  alignItems: "flex-end !important"
}, "label:rightAlign;");
var InlineLoaderWrapper = /*#__PURE__*/styled("div", {
  target: "e1cgujve0",
  label: "InlineLoaderWrapper"
})({
  position: "absolute",
  bottom: 0,
  left: 0,
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  width: "100%",
  height: 40,
  backgroundColor: "var(--mdc-theme-surface)"
});
var sorters = [{
  label: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Newest to oldest"]))),
  sorters: {
    createdOn: "desc"
  }
}, {
  label: t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Oldest to newest"]))),
  sorters: {
    createdOn: "asc"
  }
}, {
  label: t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["Title A-Z"]))),
  sorters: {
    title: "asc"
  }
}, {
  label: t(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Title Z-A"]))),
  sorters: {
    title: "desc"
  }
}];

var PagesDataList = function PagesDataList(_ref) {
  var onCreatePage = _ref.onCreatePage,
      canCreate = _ref.canCreate;

  var _useState = useState(""),
      _useState2 = _slicedToArray(_useState, 2),
      filter = _useState2[0],
      setFilter = _useState2[1];

  var _useRouter = useRouter(),
      history = _useRouter.history,
      location = _useRouter.location;

  var query = new URLSearchParams(location.search);

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      fetchMoreLoading = _useState4[0],
      setFetchMoreLoading = _useState4[1];

  var _useState5 = useState({}),
      _useState6 = _slicedToArray(_useState5, 2),
      where = _useState6[0],
      setWhere = _useState6[1];

  var _useState7 = useState({
    createdOn: "desc"
  }),
      _useState8 = _slicedToArray(_useState7, 2),
      sort = _useState8[0],
      setSort = _useState8[1];

  var search = {
    query: query.get("search") || undefined
  };
  var setSearchParams = useMemo(function () {
    return debounce(function (_ref2) {
      var filter = _ref2.filter,
          location = _ref2.location;
      var params = new URLSearchParams(location.search);

      if (filter) {
        params.set("search", filter);
      } else {
        params.delete("search");
      } // Update search in URL.


      history.push("".concat(location.pathname, "?").concat(params.toString()));
    }, 250);
  }, []); // Update "search" param whenever filter is changed

  useEffect(function () {
    setSearchParams({
      filter: filter,
      location: location
    });
  }, [filter]);
  var variables = {
    search: search,
    sort: sort,
    where: where
  };
  var listQuery = useQuery(LIST_PAGES, {
    variables: variables
  });
  GQLCache.writePageListVariablesToLocalStorage(variables);
  var listPagesData = get(listQuery, "data.pageBuilder.listPages.data", []);
  var selectedPageId = new URLSearchParams(location.search).get("id");
  var categoriesQuery = useQuery(LIST_CATEGORIES);
  var categoriesData = get(categoriesQuery, "data.pageBuilder.listCategories.data", []);
  var loading = [listQuery].find(function (item) {
    return item.loading;
  }); // Load more pages on page list scroll

  var loadMoreOnScroll = useCallback(debounce(function (_ref3) {
    var scrollFrame = _ref3.scrollFrame,
        fetchMore = _ref3.fetchMore;

    if (scrollFrame.top > 0.9) {
      var meta = get(listQuery, "data.pageBuilder.listPages.meta", {});

      if (meta.nextPage) {
        setFetchMoreLoading(true);
        fetchMore({
          variables: {
            page: meta.page + 1
          },
          updateQuery: function updateQuery(prev, _ref4) {
            var fetchMoreResult = _ref4.fetchMoreResult;

            if (!fetchMoreResult) {
              return prev;
            }

            var next = _objectSpread({}, fetchMoreResult);

            next.pageBuilder.listPages.data = [].concat(_toConsumableArray(prev.pageBuilder.listPages.data), _toConsumableArray(fetchMoreResult.pageBuilder.listPages.data));
            setFetchMoreLoading(false);
            return next;
          }
        });
      }
    }
  }, 500), [listQuery]);
  var pagesDataListModalOverlay = useMemo(function () {
    return /*#__PURE__*/React.createElement(DataListModalOverlay, null, /*#__PURE__*/React.createElement(Form, {
      data: _objectSpread(_objectSpread({}, where), {}, {
        sort: serializeSorters(sort)
      }),
      onChange: function onChange(_ref5) {
        var status = _ref5.status,
            category = _ref5.category,
            sort = _ref5.sort;
        // Update "where" filter.
        var where = {
          category: category,
          status: undefined
        };

        if (status !== "all") {
          where.status = status;
        }

        setWhere(where); // Update "sort".

        if (typeof sort === "string") {
          var newSort = deserializeSorters(sort); // @ts-ignore

          setSort(newSort);
        }
      }
    }, function (_ref6) {
      var Bind = _ref6.Bind;
      return /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
        span: 12
      }, /*#__PURE__*/React.createElement(Bind, {
        name: "category"
      }, /*#__PURE__*/React.createElement(AutoComplete, {
        description: "Filter by a specific category.",
        label: t(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["Filter by category"]))),
        options: categoriesData.map(function (item) {
          return {
            id: item.slug,
            name: item.name
          };
        })
      }))), /*#__PURE__*/React.createElement(Cell, {
        span: 12
      }, /*#__PURE__*/React.createElement(Bind, {
        name: "status"
      }, /*#__PURE__*/React.createElement(Select, {
        label: t(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["Filter by status"]))),
        description: "Filter by a specific page status."
      }, /*#__PURE__*/React.createElement("option", {
        value: "all"
      }, t(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["All"])))), /*#__PURE__*/React.createElement("option", {
        value: "draft"
      }, t(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["Draft"])))), /*#__PURE__*/React.createElement("option", {
        value: "published"
      }, t(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["Published"])))), /*#__PURE__*/React.createElement("option", {
        value: "unpublished"
      }, t(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["Unpublished"])))), /*#__PURE__*/React.createElement("option", {
        value: "reviewRequested"
      }, t(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["Review requested"])))), /*#__PURE__*/React.createElement("option", {
        value: "changesRequested"
      }, t(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["Changes requested"]))))))), /*#__PURE__*/React.createElement(Cell, {
        span: 12
      }, /*#__PURE__*/React.createElement(Bind, {
        name: "sort"
      }, /*#__PURE__*/React.createElement(Select, {
        label: t(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["Sort by"]))),
        description: "Sort pages by"
      }, sorters.map(function (_ref7) {
        var label = _ref7.label,
            sorters = _ref7.sorters;
        return /*#__PURE__*/React.createElement("option", {
          key: label,
          value: serializeSorters(sorters)
        }, label);
      })))));
    }));
  }, [categoriesData, where, sort]);
  return /*#__PURE__*/React.createElement(DataList, {
    title: t(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["Pages"]))),
    loading: Boolean(loading),
    actions: canCreate ? /*#__PURE__*/React.createElement(ButtonSecondary, {
      "data-testid": "new-record-button",
      onClick: onCreatePage
    }, /*#__PURE__*/React.createElement(ButtonIcon, {
      icon: /*#__PURE__*/React.createElement(AddIcon, null)
    }), " ", t(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["New Page"])))) : null,
    data: listPagesData,
    search: /*#__PURE__*/React.createElement(SearchUI, {
      value: filter,
      onChange: setFilter,
      inputPlaceholder: t(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["Search pages"])))
    }),
    modalOverlay: pagesDataListModalOverlay,
    modalOverlayAction: /*#__PURE__*/React.createElement(DataListModalOverlayAction, {
      icon: /*#__PURE__*/React.createElement(FilterIcon, null),
      "data-testid": "default-data-list.filter"
    })
  }, function (_ref8) {
    var data = _ref8.data;
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Scrollbar, {
      "data-testid": "default-data-list",
      onScrollFrame: function onScrollFrame(scrollFrame) {
        return loadMoreOnScroll({
          scrollFrame: scrollFrame,
          fetchMore: listQuery.fetchMore
        });
      }
    }, Array.isArray(data) && data.map(function (page) {
      var _page$category;

      return /*#__PURE__*/React.createElement(ListItem, {
        key: page.id,
        selected: page.id === selectedPageId
      }, /*#__PURE__*/React.createElement(ListItemText, {
        onClick: function onClick() {
          query.set("id", page.id);
          history.push({
            search: query.toString()
          });
        }
      }, page.title, /*#__PURE__*/React.createElement(ListTextOverline, null, ((_page$category = page.category) === null || _page$category === void 0 ? void 0 : _page$category.name) || t(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["Unknown category"])))), page.createdBy && /*#__PURE__*/React.createElement(ListItemTextSecondary, null, "Created by: ", page.createdBy.firstName || "N/A", ". Last modified: ", /*#__PURE__*/React.createElement(TimeAgo, {
        datetime: page.savedOn
      }), ".")), /*#__PURE__*/React.createElement(ListItemMeta, {
        className: rightAlign
      }, /*#__PURE__*/React.createElement(Typography, {
        use: "subtitle2"
      }, "".concat(statusesLabels[page.status], " (v").concat(page.version, ")"))));
    })), fetchMoreLoading && /*#__PURE__*/React.createElement(InlineLoaderWrapper, null, /*#__PURE__*/React.createElement(Typography, {
      use: "overline"
    }, t(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral(["Loading more pages..."]))))));
  });
};

export default PagesDataList;
//# sourceMappingURL=PagesDataList.js.map