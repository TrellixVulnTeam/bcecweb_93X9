import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2;

import React from "react";
import { useQuery } from "@apollo/react-hooks";
import { useRouter } from "@webiny/react-router";
import styled from "@emotion/styled";
import { renderPlugins } from "@webiny/app/plugins";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { GET_PAGE } from "../../graphql/pages";
import ElementAnimation from "../../../render/components/ElementAnimation";
import { ButtonDefault, ButtonIcon } from "@webiny/ui/Button";
import EmptyView from "@webiny/app-admin/components/EmptyView";
import { i18n } from "@webiny/app/i18n";
import { ReactComponent as AddIcon } from "@svgr/webpack!@webiny/app-admin/assets/icons/add-18px.svg";
var t = i18n.ns("app-page-builder/admin/views/pages/page-details");
var DetailsContainer = /*#__PURE__*/styled("div", {
  target: "e1c91zhx0",
  label: "DetailsContainer"
})({
  height: "calc(100% - 10px)",
  overflow: "hidden",
  position: "relative",
  nav: {
    backgroundColor: "var(--mdc-theme-surface)"
  }
});

var EmptyPageDetails = function EmptyPageDetails(_ref) {
  var onCreatePage = _ref.onCreatePage,
      canCreate = _ref.canCreate;
  return /*#__PURE__*/React.createElement(EmptyView, {
    title: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Click on the left side list to display page details {message} "])))({
      message: canCreate ? "or create a..." : ""
    }),
    action: canCreate ? /*#__PURE__*/React.createElement(ButtonDefault, {
      "data-testid": "new-record-button",
      onClick: onCreatePage
    }, /*#__PURE__*/React.createElement(ButtonIcon, {
      icon: /*#__PURE__*/React.createElement(AddIcon, null)
    }), " ", t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["New Page"])))) : null
  });
};

var PageDetails = function PageDetails(_ref2) {
  var _getPageQuery$data, _getPageQuery$data$pa, _getPageQuery$data$pa2;

  var onCreatePage = _ref2.onCreatePage,
      canCreate = _ref2.canCreate;

  var _useRouter = useRouter(),
      history = _useRouter.history,
      location = _useRouter.location;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var query = new URLSearchParams(location.search);
  var pageId = query.get("id");
  var getPageQuery = useQuery(GET_PAGE, {
    variables: {
      id: pageId
    },
    skip: !pageId,
    onCompleted: function onCompleted(data) {
      var _data$pageBuilder, _data$pageBuilder$get;

      var error = data === null || data === void 0 ? void 0 : (_data$pageBuilder = data.pageBuilder) === null || _data$pageBuilder === void 0 ? void 0 : (_data$pageBuilder$get = _data$pageBuilder.getPage) === null || _data$pageBuilder$get === void 0 ? void 0 : _data$pageBuilder$get.error;

      if (error) {
        history.push("/page-builder/pages");
        showSnackbar(error.message);
      }
    }
  });

  if (!pageId) {
    return /*#__PURE__*/React.createElement(EmptyPageDetails, {
      canCreate: canCreate,
      onCreatePage: onCreatePage
    });
  }

  var page = ((_getPageQuery$data = getPageQuery.data) === null || _getPageQuery$data === void 0 ? void 0 : (_getPageQuery$data$pa = _getPageQuery$data.pageBuilder) === null || _getPageQuery$data$pa === void 0 ? void 0 : (_getPageQuery$data$pa2 = _getPageQuery$data$pa.getPage) === null || _getPageQuery$data$pa2 === void 0 ? void 0 : _getPageQuery$data$pa2.data) || {};
  return /*#__PURE__*/React.createElement(ElementAnimation, null, function (_ref3) {
    var refresh = _ref3.refresh;
    return /*#__PURE__*/React.createElement(DetailsContainer, {
      onScroll: refresh
    }, /*#__PURE__*/React.createElement("test-id", {
      "data-testid": "pb-page-details"
    }, renderPlugins("pb-page-details", {
      page: page,
      getPageQuery: getPageQuery
    })));
  });
};

export default PageDetails;
//# sourceMappingURL=PageDetails.js.map