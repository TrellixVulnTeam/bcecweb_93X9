{"version":3,"sources":["../../../../src/admin/views/Pages/cache.ts"],"names":["dotProp","orderBy","get","GQL","readPageListVariables","variables","JSON","parse","localStorage","getItem","writePageListVariablesToLocalStorage","setItem","stringify","extractVariables","key","replace","modifyCacheForAllListPagesQuery","cache","operation","existingQueriesInCache","Object","keys","data","filter","includes","endsWith","forEach","cacheKey","sortEntries","list","sort","value","order","toLowerCase","addPageToListCache","page","gqlParams","query","LIST_PAGES","readQuery","listPagesData","writeQuery","set","updateLatestRevisionInListCache","revision","id","split","uniqueId","index","findIndex","item","startsWith","removePageFromListCache","delete","removeRevisionFromEntryCache","GET_PAGE","revisions","newRevisions"],"mappings":"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","sourcesContent":["import dotProp from \"dot-prop-immutable\";\nimport orderBy from \"lodash/orderBy\";\nimport get from \"lodash/get\";\nimport { PbPageData } from \"~/types\";\nimport * as GQL from \"~/admin/graphql/pages\";\n\nexport const readPageListVariables = () => {\n    let variables;\n\n    try {\n        variables = JSON.parse(localStorage.getItem(\"wby_pb_pages_list_latest_variables\"));\n    } catch {}\n\n    return variables;\n};\n\nexport const writePageListVariablesToLocalStorage = variables => {\n    // Needs to be refactored. Possibly, with our own GQL client, this is going to be much easier to handle.\n    localStorage.setItem(\"wby_pb_pages_list_latest_variables\", JSON.stringify(variables));\n};\n\nconst extractVariables = key => {\n    // TODO: Find a better way to parse the query/id from cache\n    const variables = key.replace(\"$ROOT_QUERY.pageBuilder.listPages(\", \"\").replace(\")\", \"\");\n    return JSON.parse(variables);\n};\n\nconst modifyCacheForAllListPagesQuery = (cache, operation: (variables: any) => void) => {\n    const existingQueriesInCache = Object.keys(cache.data.data).filter(\n        key => key.includes(\".listPages\") && !key.endsWith(\".meta\")\n    );\n\n    existingQueriesInCache.forEach(cacheKey => {\n        const variables = extractVariables(cacheKey);\n        operation(variables);\n    });\n};\n\n/*\n * We need to preserve the order of entries with new entry addition\n * because we're not re-fetching the list but updating it directly inside cache.\n * */\nconst sortEntries = (list, sort) => {\n    if (!sort || typeof sort !== \"object\") {\n        return list;\n    }\n    const [key] = Object.keys(sort);\n    const value = sort[key];\n    const order = value.toLowerCase() as \"asc\" | \"desc\";\n    return orderBy(list, [key], [order]);\n};\n\nexport const addPageToListCache = (cache, page: PbPageData) => {\n    modifyCacheForAllListPagesQuery(cache, variables => {\n        const gqlParams = { query: GQL.LIST_PAGES, variables };\n        const data = cache.readQuery(gqlParams);\n        const listPagesData = get(data, \"pageBuilder.listPages.data\");\n        if (!listPagesData) {\n            return;\n        }\n\n        cache.writeQuery({\n            ...gqlParams,\n            data: dotProp.set(\n                data,\n                \"pageBuilder.listPages.data\",\n                sortEntries([page, ...listPagesData], variables.sort)\n            )\n        });\n    });\n};\n\nexport const updateLatestRevisionInListCache = (cache, revision) => {\n    modifyCacheForAllListPagesQuery(cache, variables => {\n        const gqlParams = { query: GQL.LIST_PAGES, variables };\n        const data = cache.readQuery(gqlParams);\n\n        const listPagesData = get(data, \"pageBuilder.listPages.data\");\n        if (!listPagesData) {\n            return;\n        }\n\n        const [uniqueId] = revision.id.split(\"#\");\n        const index = listPagesData.findIndex(item => item.id.startsWith(uniqueId));\n        if (index === -1) {\n            return;\n        }\n\n        cache.writeQuery({\n            ...gqlParams,\n            data: dotProp.set(data, `pageBuilder.listPages.data.${index}`, revision)\n        });\n    });\n};\n\nexport const removePageFromListCache = (cache, page) => {\n    // Delete the item from list cache\n    modifyCacheForAllListPagesQuery(cache, variables => {\n        const gqlParams = { query: GQL.LIST_PAGES, variables };\n        const data = cache.readQuery(gqlParams);\n\n        const listPagesData = get(data, \"pageBuilder.listPages.data\");\n        if (!listPagesData) {\n            return;\n        }\n\n        const [uniqueId] = page.id.split(\"#\");\n        const index = listPagesData.findIndex(item => item.id.startsWith(uniqueId));\n        if (index === -1) {\n            return;\n        }\n\n        cache.writeQuery({\n            ...gqlParams,\n            data: dotProp.delete(data, `pageBuilder.listPages.data.${index}`)\n        });\n    });\n};\n\nexport const removeRevisionFromEntryCache = (cache, revision) => {\n    const gqlParams = {\n        query: GQL.GET_PAGE,\n        variables: { id: revision.id }\n    };\n\n    const data = cache.readQuery(gqlParams);\n    const revisions = get(data, \"pageBuilder.getPage.data.revisions\");\n    if (!revisions) {\n        return;\n    }\n    const index = revisions.findIndex(item => item.id === revision.id);\n    const newRevisions = dotProp.delete(revisions, index);\n\n    cache.writeQuery({\n        ...gqlParams,\n        data: dotProp.set(data, \"pageBuilder.getPage.data.revisions\", newRevisions)\n    });\n\n    // Return new revisions\n    return newRevisions;\n};\n"],"file":"cache.js"}