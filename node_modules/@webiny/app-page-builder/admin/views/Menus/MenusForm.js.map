{"version":3,"sources":["../../../../src/admin/views/Menus/MenusForm.tsx"],"names":["React","useCallback","useMemo","styled","i18n","Form","Grid","Cell","ButtonDefault","ButtonIcon","ButtonPrimary","CircularProgress","useMutation","useQuery","SimpleForm","SimpleFormFooter","SimpleFormContent","SimpleFormHeader","validation","GET_MENU","CREATE_MENU","UPDATE_MENU","LIST_MENUS","useRouter","useSnackbar","Input","MenuItems","useSecurity","pick","get","set","isEmpty","omit","EmptyView","t","ns","ButtonWrapper","display","justifyContent","MenusForm","canCreate","location","history","showSnackbar","newEntry","URLSearchParams","search","slug","getQuery","variables","skip","onCompleted","data","error","pageBuilder","getMenu","push","message","refetchQueries","query","create","createMutation","update","cache","dataFromCache","readQuery","updatedData","writeQuery","updateMutation","loadedMenu","loading","find","item","onSubmit","formData","isUpdate","operation","args","response","menu","items","identity","pbMenuPermission","getPermission","canSave","own","createdBy","id","login","rwd","includes","showEmptyView","form","Bind","title","createdOn","props","submit"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo } from \"react\";\nimport styled from \"@emotion/styled\";\nimport { i18n } from \"@webiny/app/i18n\";\nimport { Form } from \"@webiny/form\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { ButtonDefault, ButtonIcon, ButtonPrimary } from \"@webiny/ui/Button\";\nimport { CircularProgress } from \"@webiny/ui/Progress\";\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\nimport {\n    SimpleForm,\n    SimpleFormFooter,\n    SimpleFormContent,\n    SimpleFormHeader\n} from \"@webiny/app-admin/components/SimpleForm\";\nimport { validation } from \"@webiny/validation\";\nimport { GET_MENU, CREATE_MENU, UPDATE_MENU, LIST_MENUS } from \"./graphql\";\nimport { useRouter } from \"@webiny/react-router\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nimport { Input } from \"@webiny/ui/Input\";\nimport MenuItems from \"./MenusForm/MenuItems\";\nimport { useSecurity } from \"@webiny/app-security\";\nimport pick from \"object.pick\";\nimport get from \"lodash/get\";\nimport set from \"lodash/set\";\nimport isEmpty from \"lodash/isEmpty\";\nimport omit from \"lodash/omit\";\nimport EmptyView from \"@webiny/app-admin/components/EmptyView\";\nimport { ReactComponent as AddIcon } from \"@webiny/app-admin/assets/icons/add-18px.svg\";\n\nconst t = i18n.ns(\"app-page-builder/admin/menus/form\");\nconst ButtonWrapper = styled(\"div\")({\n    display: \"flex\",\n    justifyContent: \"space-between\"\n});\n\ntype MenusFormProps = {\n    canCreate: boolean;\n};\nconst MenusForm = ({ canCreate }: MenusFormProps) => {\n    const { location, history } = useRouter();\n    const { showSnackbar } = useSnackbar();\n\n    const newEntry = new URLSearchParams(location.search).get(\"new\") === \"true\";\n    const slug = new URLSearchParams(location.search).get(\"slug\");\n\n    const getQuery = useQuery(GET_MENU, {\n        variables: { slug },\n        skip: !slug,\n        onCompleted: data => {\n            const error = data?.pageBuilder?.getMenu?.error;\n            if (error) {\n                history.push(\"/page-builder/menus\");\n                showSnackbar(error.message);\n            }\n        }\n    });\n\n    const [create, createMutation] = useMutation(CREATE_MENU, {\n        refetchQueries: [{ query: LIST_MENUS }]\n    });\n\n    const [update, updateMutation] = useMutation(UPDATE_MENU, {\n        refetchQueries: [{ query: LIST_MENUS }],\n        update: (cache, { data }) => {\n            const dataFromCache = cache.readQuery<Record<string, any>>({\n                query: GET_MENU,\n                variables: { slug }\n            });\n            const updatedData = get(data, \"pageBuilder.menu.data\");\n\n            if (updatedData) {\n                cache.writeQuery({\n                    query: GET_MENU,\n                    data: set(dataFromCache, \"pageBuilder.getMenu.data\", updatedData)\n                });\n            }\n        }\n    });\n\n    const loadedMenu = getQuery.data?.pageBuilder?.getMenu?.data || {};\n\n    const loading = [getQuery, createMutation, updateMutation].find(item => item.loading);\n\n    const onSubmit = useCallback(\n        async formData => {\n            const isUpdate = loadedMenu.slug;\n            const data = pick(formData, [\"slug\", \"title\", \"description\", \"items\"]);\n            const [operation, args] = isUpdate\n                ? [update, { variables: { slug: data.slug, data } }]\n                : [create, { variables: { data: data } }];\n\n            const response = await operation(args);\n\n            const error = response?.data?.pageBuilder?.menu?.error;\n            if (error) {\n                return showSnackbar(error.message);\n            }\n\n            !isUpdate && history.push(`/page-builder/menus?slug=${formData.slug}`);\n            showSnackbar(t`Menu saved successfully.`);\n        },\n        [loadedMenu.slug]\n    );\n\n    const data = useMemo(() => {\n        const data = getQuery.data?.pageBuilder?.getMenu.data || {};\n        if (!data.items) {\n            data.items = [];\n        }\n        return data;\n    }, [loadedMenu.slug]);\n\n    const { identity } = useSecurity();\n    const pbMenuPermission = useMemo(() => {\n        return identity.getPermission(\"pb.menu\");\n    }, []);\n\n    const canSave = useMemo(() => {\n        // User should be able to save the form\n        // if it's a new entry and user has the \"own\" permission set.\n        if (!loadedMenu.slug && pbMenuPermission.own) {\n            return true;\n        }\n\n        if (pbMenuPermission.own) {\n            return loadedMenu?.createdBy?.id === identity.login;\n        }\n\n        if (typeof pbMenuPermission.rwd === \"string\") {\n            return pbMenuPermission.rwd.includes(\"w\");\n        }\n\n        return true;\n    }, [loadedMenu.slug]);\n\n    const showEmptyView = !newEntry && !loading && isEmpty(omit(data, \"items\"));\n    // Render \"No content selected\" view.\n    if (showEmptyView) {\n        return (\n            <EmptyView\n                title={t`Click on the left side list to display menu details {message}`({\n                    message: canCreate ? \"or create a...\" : \"\"\n                })}\n                action={\n                    canCreate ? (\n                        <ButtonDefault\n                            data-testid=\"new-record-button\"\n                            onClick={() => history.push(\"/page-builder/menus?new=true\")}\n                        >\n                            <ButtonIcon icon={<AddIcon />} /> {t`New Menu`}\n                        </ButtonDefault>\n                    ) : null\n                }\n            />\n        );\n    }\n\n    return (\n        <Form data={data} onSubmit={onSubmit}>\n            {({ data, form, Bind }) => (\n                <SimpleForm data-testid={\"pb-menus-form\"}>\n                    {loading && <CircularProgress />}\n                    <SimpleFormHeader title={data.title || t`New menu`} />\n                    <SimpleFormContent>\n                        <Grid>\n                            <Cell span={6}>\n                                <Bind name=\"title\" validators={validation.create(\"required\")}>\n                                    <Input label={t`Name`} />\n                                </Bind>\n                            </Cell>\n                            <Cell span={6}>\n                                <Bind name=\"slug\" validators={validation.create(\"required\")}>\n                                    <Input disabled={data.createdOn} label={t`Slug`} />\n                                </Bind>\n                            </Cell>\n                            <Cell span={12}>\n                                <Bind name=\"description\">\n                                    <Input rows={5} label={t`Description`} />\n                                </Bind>\n                            </Cell>\n                        </Grid>\n                        <Bind name=\"items\">\n                            {props => <MenuItems menuForm={form} {...props} canSave={canSave} />}\n                        </Bind>\n                    </SimpleFormContent>\n                    <SimpleFormFooter>\n                        <ButtonWrapper>\n                            <ButtonDefault\n                                onClick={() => history.push(\"/page-builder/menus\")}\n                            >{t`Cancel`}</ButtonDefault>\n                            {canSave && (\n                                <ButtonPrimary onClick={form.submit}>{t`Save menu`}</ButtonPrimary>\n                            )}\n                        </ButtonWrapper>\n                    </SimpleFormFooter>\n                </SimpleForm>\n            )}\n        </Form>\n    );\n};\n\nexport default MenusForm;\n"],"file":"MenusForm.js"}