import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9;

import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useCallback, useMemo } from "react";
import styled from "@emotion/styled";
import { i18n } from "@webiny/app/i18n";
import { Form } from "@webiny/form";
import { Grid, Cell } from "@webiny/ui/Grid";
import { ButtonDefault, ButtonIcon, ButtonPrimary } from "@webiny/ui/Button";
import { CircularProgress } from "@webiny/ui/Progress";
import { useMutation, useQuery } from "@apollo/react-hooks";
import { SimpleForm, SimpleFormFooter, SimpleFormContent, SimpleFormHeader } from "@webiny/app-admin/components/SimpleForm";
import { validation } from "@webiny/validation";
import { GET_MENU, CREATE_MENU, UPDATE_MENU, LIST_MENUS } from "./graphql";
import { useRouter } from "@webiny/react-router";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { Input } from "@webiny/ui/Input";
import MenuItems from "./MenusForm/MenuItems";
import { useSecurity } from "@webiny/app-security";
import pick from "object.pick";
import get from "lodash/get";
import set from "lodash/set";
import isEmpty from "lodash/isEmpty";
import omit from "lodash/omit";
import EmptyView from "@webiny/app-admin/components/EmptyView";
import { ReactComponent as AddIcon } from "@svgr/webpack!@webiny/app-admin/assets/icons/add-18px.svg";
var t = i18n.ns("app-page-builder/admin/menus/form");
var ButtonWrapper = /*#__PURE__*/styled("div", {
  target: "e1q7975l0",
  label: "ButtonWrapper"
})({
  display: "flex",
  justifyContent: "space-between"
});

var MenusForm = function MenusForm(_ref) {
  var _getQuery$data, _getQuery$data$pageBu, _getQuery$data$pageBu2;

  var canCreate = _ref.canCreate;

  var _useRouter = useRouter(),
      location = _useRouter.location,
      history = _useRouter.history;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var newEntry = new URLSearchParams(location.search).get("new") === "true";
  var slug = new URLSearchParams(location.search).get("slug");
  var getQuery = useQuery(GET_MENU, {
    variables: {
      slug: slug
    },
    skip: !slug,
    onCompleted: function onCompleted(data) {
      var _data$pageBuilder, _data$pageBuilder$get;

      var error = data === null || data === void 0 ? void 0 : (_data$pageBuilder = data.pageBuilder) === null || _data$pageBuilder === void 0 ? void 0 : (_data$pageBuilder$get = _data$pageBuilder.getMenu) === null || _data$pageBuilder$get === void 0 ? void 0 : _data$pageBuilder$get.error;

      if (error) {
        history.push("/page-builder/menus");
        showSnackbar(error.message);
      }
    }
  });

  var _useMutation = useMutation(CREATE_MENU, {
    refetchQueries: [{
      query: LIST_MENUS
    }]
  }),
      _useMutation2 = _slicedToArray(_useMutation, 2),
      create = _useMutation2[0],
      createMutation = _useMutation2[1];

  var _useMutation3 = useMutation(UPDATE_MENU, {
    refetchQueries: [{
      query: LIST_MENUS
    }],
    update: function update(cache, _ref2) {
      var data = _ref2.data;
      var dataFromCache = cache.readQuery({
        query: GET_MENU,
        variables: {
          slug: slug
        }
      });
      var updatedData = get(data, "pageBuilder.menu.data");

      if (updatedData) {
        cache.writeQuery({
          query: GET_MENU,
          data: set(dataFromCache, "pageBuilder.getMenu.data", updatedData)
        });
      }
    }
  }),
      _useMutation4 = _slicedToArray(_useMutation3, 2),
      update = _useMutation4[0],
      updateMutation = _useMutation4[1];

  var loadedMenu = ((_getQuery$data = getQuery.data) === null || _getQuery$data === void 0 ? void 0 : (_getQuery$data$pageBu = _getQuery$data.pageBuilder) === null || _getQuery$data$pageBu === void 0 ? void 0 : (_getQuery$data$pageBu2 = _getQuery$data$pageBu.getMenu) === null || _getQuery$data$pageBu2 === void 0 ? void 0 : _getQuery$data$pageBu2.data) || {};
  var loading = [getQuery, createMutation, updateMutation].find(function (item) {
    return item.loading;
  });
  var onSubmit = useCallback( /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(formData) {
      var _response$data, _response$data$pageBu, _response$data$pageBu2;

      var isUpdate, data, _ref4, _ref5, operation, args, response, error;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              isUpdate = loadedMenu.slug;
              data = pick(formData, ["slug", "title", "description", "items"]);
              _ref4 = isUpdate ? [update, {
                variables: {
                  slug: data.slug,
                  data: data
                }
              }] : [create, {
                variables: {
                  data: data
                }
              }], _ref5 = _slicedToArray(_ref4, 2), operation = _ref5[0], args = _ref5[1];
              _context.next = 5;
              return operation(args);

            case 5:
              response = _context.sent;
              error = response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$pageBu = _response$data.pageBuilder) === null || _response$data$pageBu === void 0 ? void 0 : (_response$data$pageBu2 = _response$data$pageBu.menu) === null || _response$data$pageBu2 === void 0 ? void 0 : _response$data$pageBu2.error;

              if (!error) {
                _context.next = 9;
                break;
              }

              return _context.abrupt("return", showSnackbar(error.message));

            case 9:
              !isUpdate && history.push("/page-builder/menus?slug=".concat(formData.slug));
              showSnackbar(t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Menu saved successfully."]))));

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), [loadedMenu.slug]);
  var data = useMemo(function () {
    var _getQuery$data2, _getQuery$data2$pageB;

    var data = ((_getQuery$data2 = getQuery.data) === null || _getQuery$data2 === void 0 ? void 0 : (_getQuery$data2$pageB = _getQuery$data2.pageBuilder) === null || _getQuery$data2$pageB === void 0 ? void 0 : _getQuery$data2$pageB.getMenu.data) || {};

    if (!data.items) {
      data.items = [];
    }

    return data;
  }, [loadedMenu.slug]);

  var _useSecurity = useSecurity(),
      identity = _useSecurity.identity;

  var pbMenuPermission = useMemo(function () {
    return identity.getPermission("pb.menu");
  }, []);
  var canSave = useMemo(function () {
    // User should be able to save the form
    // if it's a new entry and user has the "own" permission set.
    if (!loadedMenu.slug && pbMenuPermission.own) {
      return true;
    }

    if (pbMenuPermission.own) {
      var _loadedMenu$createdBy;

      return (loadedMenu === null || loadedMenu === void 0 ? void 0 : (_loadedMenu$createdBy = loadedMenu.createdBy) === null || _loadedMenu$createdBy === void 0 ? void 0 : _loadedMenu$createdBy.id) === identity.login;
    }

    if (typeof pbMenuPermission.rwd === "string") {
      return pbMenuPermission.rwd.includes("w");
    }

    return true;
  }, [loadedMenu.slug]);
  var showEmptyView = !newEntry && !loading && isEmpty(omit(data, "items")); // Render "No content selected" view.

  if (showEmptyView) {
    return /*#__PURE__*/React.createElement(EmptyView, {
      title: t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Click on the left side list to display menu details {message}"])))({
        message: canCreate ? "or create a..." : ""
      }),
      action: canCreate ? /*#__PURE__*/React.createElement(ButtonDefault, {
        "data-testid": "new-record-button",
        onClick: function onClick() {
          return history.push("/page-builder/menus?new=true");
        }
      }, /*#__PURE__*/React.createElement(ButtonIcon, {
        icon: /*#__PURE__*/React.createElement(AddIcon, null)
      }), " ", t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["New Menu"])))) : null
    });
  }

  return /*#__PURE__*/React.createElement(Form, {
    data: data,
    onSubmit: onSubmit
  }, function (_ref6) {
    var data = _ref6.data,
        form = _ref6.form,
        Bind = _ref6.Bind;
    return /*#__PURE__*/React.createElement(SimpleForm, {
      "data-testid": "pb-menus-form"
    }, loading && /*#__PURE__*/React.createElement(CircularProgress, null), /*#__PURE__*/React.createElement(SimpleFormHeader, {
      title: data.title || t(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["New menu"])))
    }), /*#__PURE__*/React.createElement(SimpleFormContent, null, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 6
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "title",
      validators: validation.create("required")
    }, /*#__PURE__*/React.createElement(Input, {
      label: t(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["Name"])))
    }))), /*#__PURE__*/React.createElement(Cell, {
      span: 6
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "slug",
      validators: validation.create("required")
    }, /*#__PURE__*/React.createElement(Input, {
      disabled: data.createdOn,
      label: t(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["Slug"])))
    }))), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "description"
    }, /*#__PURE__*/React.createElement(Input, {
      rows: 5,
      label: t(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["Description"])))
    })))), /*#__PURE__*/React.createElement(Bind, {
      name: "items"
    }, function (props) {
      return /*#__PURE__*/React.createElement(MenuItems, Object.assign({
        menuForm: form
      }, props, {
        canSave: canSave
      }));
    })), /*#__PURE__*/React.createElement(SimpleFormFooter, null, /*#__PURE__*/React.createElement(ButtonWrapper, null, /*#__PURE__*/React.createElement(ButtonDefault, {
      onClick: function onClick() {
        return history.push("/page-builder/menus");
      }
    }, t(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["Cancel"])))), canSave && /*#__PURE__*/React.createElement(ButtonPrimary, {
      onClick: form.submit
    }, t(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["Save menu"])))))));
  });
};

export default MenusForm;
//# sourceMappingURL=MenusForm.js.map