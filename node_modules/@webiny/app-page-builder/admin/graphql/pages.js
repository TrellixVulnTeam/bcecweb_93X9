import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9;

import gql from "graphql-tag";
var error = "\nerror {\n    code\n    message\n}";
export var DATA_FIELDS = "\n    id\n    pid\n    title\n    path\n    version\n    locked\n    status\n    revisions {\n        id\n        savedOn\n        locked\n        title\n        status\n        version\n    }\n    \n";
export var LIST_PAGES_DATA_FIELDS = "\n    id\n    pid\n    status\n    title\n    version\n    savedOn\n    category {\n        name\n        slug\n    }\n    createdBy {\n        id\n        displayName\n    }\n";
export var CREATE_PAGE = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    mutation PbCreatePage($from: ID, $category: String) {\n        pageBuilder {\n            createPage(from: $from, category: $category) {\n                data {\n                    ", "\n                }\n                ", "\n            }\n        }\n    }\n"])), LIST_PAGES_DATA_FIELDS, error);
export var LIST_PAGES = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    query PbListPages(\n        $where: PbListPagesWhereInput\n        $sort: PbListPagesSortInput\n        $search: PbListPagesSearchInput\n        $limit: Int\n        $page: Int\n    ) {\n        pageBuilder {\n            listPages(where: $where, sort: $sort, limit: $limit, page: $page, search: $search) {\n                data {\n                    ", "\n                }\n                meta {\n                    page\n                    limit\n                    totalCount\n                    totalPages\n                    from\n                    to\n                    nextPage\n                    previousPage\n                }\n                error {\n                    data\n                    code\n                    message\n                }\n            }\n        }\n    }\n"])), LIST_PAGES_DATA_FIELDS);
export var GET_PAGE = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n    query PbGetPagePreview($id: ID!) {\n        pageBuilder {\n            getPage(id: $id) {\n                data {\n                    ", "\n                    createdBy {\n                        id\n                    }\n                    content\n\n                }\n                ", "\n            }\n        }\n    }\n"])), DATA_FIELDS, error);
export var PUBLISH_PAGE = gql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n    mutation PbPublishPage($id: ID!) {\n        pageBuilder {\n            publishPage(id: $id) {\n                data {\n                    ", "\n                }\n                ", "\n            }\n        }\n    }\n"])), DATA_FIELDS, error);
export var UNPUBLISH_PAGE = gql(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n    mutation PbUnpublishPage($id: ID!) {\n        pageBuilder {\n            unpublishPage(id: $id) {\n                data {\n                    ", "\n                }\n                ", "\n            }\n        }\n    }\n"])), DATA_FIELDS, error);
export var DELETE_PAGE = gql(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n    mutation PbDeletePage($id: ID!) {\n        pageBuilder {\n            deletePage(id: $id) {\n                data {\n                    latestPage {\n                        id\n                        status\n                        version\n                    }\n                }\n                ", "\n            }\n        }\n    }\n"])), error);
var PAGE_ELEMENT_FIELDS =
/*GraphQL*/
"\n    {\n        id\n        name\n        type\n        category\n        content\n        preview\n    }\n";
export var LIST_PAGE_ELEMENTS = gql(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n    query PbListPageElements {\n        pageBuilder {\n            listPageElements {\n                data ", "\n            }\n        }\n    }\n"])), PAGE_ELEMENT_FIELDS);
export var CREATE_PAGE_ELEMENT = gql(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n    mutation PbCreatePageElement($data: PbPageElementInput!) {\n        pageBuilder {\n            createPageElement(data: $data) {\n                data ", "\n                ", "\n            }\n        }\n    }\n"])), PAGE_ELEMENT_FIELDS, error);
export var UPDATE_PAGE_ELEMENT = gql(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n    mutation PbUpdatePageElement($id: ID!, $data: PbPageElementInput!) {\n        pageBuilder {\n            updatePageElement(id: $id, data: $data) {\n                data ", "\n                ", "\n            }\n        }\n    }\n"])), PAGE_ELEMENT_FIELDS, error);
//# sourceMappingURL=pages.js.map