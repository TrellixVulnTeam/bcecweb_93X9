{"version":3,"sources":["../../../src/admin/graphql/pages.ts"],"names":["gql","error","DATA_FIELDS","LIST_PAGES_DATA_FIELDS","CREATE_PAGE","LIST_PAGES","GET_PAGE","PUBLISH_PAGE","UNPUBLISH_PAGE","DELETE_PAGE","PAGE_ELEMENT_FIELDS","LIST_PAGE_ELEMENTS","CREATE_PAGE_ELEMENT","UPDATE_PAGE_ELEMENT"],"mappings":";;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAEA,IAAMC,KAAK,wCAAX;AAMA,OAAO,IAAMC,WAAW,6MAAjB;AAmBP,OAAO,IAAMC,sBAAsB,qLAA5B;AAiBP,OAAO,IAAMC,WAAW,GAAGJ,GAAH,kVAKFG,sBALE,EAONF,KAPM,CAAjB;AAaP,OAAO,IAAMI,UAAU,GAAGL,GAAH,u3BAWDG,sBAXC,CAAhB;AAiCP,OAAO,IAAMG,QAAQ,GAAGN,GAAH,wZAKCE,WALD,EAYHD,KAZG,CAAd;AAkBP,OAAO,IAAMM,YAAY,GAAGP,GAAH,ySAKHE,WALG,EAOPD,KAPO,CAAlB;AAaP,OAAO,IAAMO,cAAc,GAAGR,GAAH,6SAKLE,WALK,EAOTD,KAPS,CAApB;AAaP,OAAO,IAAMQ,WAAW,GAAGT,GAAH,maAWNC,KAXM,CAAjB;AAiBP,IAAMS,mBAAmB;AAAG;AAAH,8GAAzB;AAWA,OAAO,IAAMC,kBAAkB,GAAGX,GAAH,6NAIRU,mBAJQ,CAAxB;AAUP,OAAO,IAAME,mBAAmB,GAAGZ,GAAH,iSAITU,mBAJS,EAKdT,KALc,CAAzB;AAWP,OAAO,IAAMY,mBAAmB,GAAGb,GAAH,oTAITU,mBAJS,EAKdT,KALc,CAAzB","sourcesContent":["import gql from \"graphql-tag\";\n\nconst error = `\nerror {\n    code\n    message\n}`;\n\nexport const DATA_FIELDS = `\n    id\n    pid\n    title\n    path\n    version\n    locked\n    status\n    revisions {\n        id\n        savedOn\n        locked\n        title\n        status\n        version\n    }\n    \n`;\n\nexport const LIST_PAGES_DATA_FIELDS = `\n    id\n    pid\n    status\n    title\n    version\n    savedOn\n    category {\n        name\n        slug\n    }\n    createdBy {\n        id\n        displayName\n    }\n`;\n\nexport const CREATE_PAGE = gql`\n    mutation PbCreatePage($from: ID, $category: String) {\n        pageBuilder {\n            createPage(from: $from, category: $category) {\n                data {\n                    ${LIST_PAGES_DATA_FIELDS}\n                }\n                ${error}\n            }\n        }\n    }\n`;\n\nexport const LIST_PAGES = gql`\n    query PbListPages(\n        $where: PbListPagesWhereInput\n        $sort: PbListPagesSortInput\n        $search: PbListPagesSearchInput\n        $limit: Int\n        $page: Int\n    ) {\n        pageBuilder {\n            listPages(where: $where, sort: $sort, limit: $limit, page: $page, search: $search) {\n                data {\n                    ${LIST_PAGES_DATA_FIELDS}\n                }\n                meta {\n                    page\n                    limit\n                    totalCount\n                    totalPages\n                    from\n                    to\n                    nextPage\n                    previousPage\n                }\n                error {\n                    data\n                    code\n                    message\n                }\n            }\n        }\n    }\n`;\n\nexport const GET_PAGE = gql`\n    query PbGetPagePreview($id: ID!) {\n        pageBuilder {\n            getPage(id: $id) {\n                data {\n                    ${DATA_FIELDS}\n                    createdBy {\n                        id\n                    }\n                    content\n\n                }\n                ${error}\n            }\n        }\n    }\n`;\n\nexport const PUBLISH_PAGE = gql`\n    mutation PbPublishPage($id: ID!) {\n        pageBuilder {\n            publishPage(id: $id) {\n                data {\n                    ${DATA_FIELDS}\n                }\n                ${error}\n            }\n        }\n    }\n`;\n\nexport const UNPUBLISH_PAGE = gql`\n    mutation PbUnpublishPage($id: ID!) {\n        pageBuilder {\n            unpublishPage(id: $id) {\n                data {\n                    ${DATA_FIELDS}\n                }\n                ${error}\n            }\n        }\n    }\n`;\n\nexport const DELETE_PAGE = gql`\n    mutation PbDeletePage($id: ID!) {\n        pageBuilder {\n            deletePage(id: $id) {\n                data {\n                    latestPage {\n                        id\n                        status\n                        version\n                    }\n                }\n                ${error}\n            }\n        }\n    }\n`;\n\nconst PAGE_ELEMENT_FIELDS = /*GraphQL*/ `\n    {\n        id\n        name\n        type\n        category\n        content\n        preview\n    }\n`;\n\nexport const LIST_PAGE_ELEMENTS = gql`\n    query PbListPageElements {\n        pageBuilder {\n            listPageElements {\n                data ${PAGE_ELEMENT_FIELDS}\n            }\n        }\n    }\n`;\n\nexport const CREATE_PAGE_ELEMENT = gql`\n    mutation PbCreatePageElement($data: PbPageElementInput!) {\n        pageBuilder {\n            createPageElement(data: $data) {\n                data ${PAGE_ELEMENT_FIELDS}\n                ${error}\n            }\n        }\n    }\n`;\n\nexport const UPDATE_PAGE_ELEMENT = gql`\n    mutation PbUpdatePageElement($id: ID!, $data: PbPageElementInput!) {\n        pageBuilder {\n            updatePageElement(id: $id, data: $data) {\n                data ${PAGE_ELEMENT_FIELDS}\n                ${error}\n            }\n        }\n    }\n`;\n"],"file":"pages.js"}