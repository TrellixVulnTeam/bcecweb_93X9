import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject;

import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useCallback } from "react";
import { IconButton } from "@webiny/ui/Button";
import { Icon } from "@webiny/ui/Icon";
import { ReactComponent as MoreVerticalIcon } from "@svgr/webpack!../../../../assets/more_vert.svg";
import { ReactComponent as PreviewIcon } from "@svgr/webpack!../../../../assets/visibility.svg";
import { ReactComponent as HomeIcon } from "@svgr/webpack!../../../../assets/round-home-24px.svg";
import { ListItemGraphic } from "@webiny/ui/List";
import { MenuItem, Menu } from "@webiny/ui/Menu";
import { usePageBuilderSettings } from "../../../../hooks/usePageBuilderSettings";
import { useSiteStatus } from "../../../../hooks/useSiteStatus";
import { css } from "emotion";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import classNames from "classnames";
import { useConfirmationDialog } from "@webiny/app-admin/hooks/useConfirmationDialog";
import { useConfigureWebsiteUrlDialog } from "../../../../hooks/useConfigureWebsiteUrl";
import { plugins } from "@webiny/plugins";
import gql from "graphql-tag";
import { useMutation } from "@apollo/react-hooks";
import { SecureView } from "@webiny/app-security";
var PUBLISH_PAGE = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    mutation PbPublishPage($id: ID!) {\n        pageBuilder {\n            publishPage(id: $id) {\n                data {\n                    id\n                    path\n                    status\n                    locked\n                }\n                error {\n                    code\n                    message\n                }\n            }\n        }\n    }\n"])));
var menuStyles = /*#__PURE__*/css({
  width: 250,
  right: -105,
  left: "auto !important",
  ".disabled": {
    opacity: 0.5,
    pointerEvents: "none"
  }
}, "label:menuStyles;");

var PageOptionsMenu = function PageOptionsMenu(props) {
  var page = props.page;

  var _usePageBuilderSettin = usePageBuilderSettings(),
      settings = _usePageBuilderSettin.settings,
      isSpecialPage = _usePageBuilderSettin.isSpecialPage,
      getPageUrl = _usePageBuilderSettin.getPageUrl,
      getWebsiteUrl = _usePageBuilderSettin.getWebsiteUrl,
      updateSettingsMutation = _usePageBuilderSettin.updateSettingsMutation;

  var _useSiteStatus = useSiteStatus(getWebsiteUrl()),
      _useSiteStatus2 = _slicedToArray(_useSiteStatus, 2),
      isSiteRunning = _useSiteStatus2[0],
      refreshSiteStatus = _useSiteStatus2[1];

  var _useConfigureWebsiteU = useConfigureWebsiteUrlDialog(getWebsiteUrl(), refreshSiteStatus),
      showConfigureWebsiteUrlDialog = _useConfigureWebsiteU.showConfigureWebsiteUrlDialog;

  var publishPageMutation = useMutation(PUBLISH_PAGE);

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var _useConfirmationDialo = useConfirmationDialog({
    title: "Set as homepage",
    message: /*#__PURE__*/React.createElement("span", null, "You're about to set the ", /*#__PURE__*/React.createElement("strong", null, page.title), " page as your new homepage, are you sure you want to continue?", " ", page.status !== "published" && "Note that your page will be automatically published.")
  }),
      showConfirmation = _useConfirmationDialo.showConfirmation; // We must prevent opening in new tab - Cypress doesn't work with new tabs.


  var target = window.Cypress ? "_self" : "_blank";
  var url = getPageUrl(page, !page.locked);
  var handlePreviewClick = useCallback(function () {
    if (isSiteRunning) {
      window.open(url, target, "noopener");
    } else {
      showConfigureWebsiteUrlDialog();
    }
  }, [url, isSiteRunning]);
  var previewButtonLabel = page.locked ? "View" : "Preview";
  return /*#__PURE__*/React.createElement(Menu, {
    className: menuStyles,
    handle: /*#__PURE__*/React.createElement(IconButton, {
      "data-testid": "pb-page-details-header-page-options-menu",
      icon: /*#__PURE__*/React.createElement(MoreVerticalIcon, null)
    })
  }, /*#__PURE__*/React.createElement(MenuItem, {
    onClick: handlePreviewClick
  }, /*#__PURE__*/React.createElement(ListItemGraphic, null, /*#__PURE__*/React.createElement(Icon, {
    "data-testid": "pb-page-details-header-page-options-menu-preview",
    icon: /*#__PURE__*/React.createElement(PreviewIcon, null)
  })), previewButtonLabel), /*#__PURE__*/React.createElement(SecureView, {
    permission: "pb.settings"
  }, /*#__PURE__*/React.createElement(MenuItem, {
    className: classNames({
      disabled: isSpecialPage(page, "home")
    }),
    onClick: function onClick() {
      showConfirmation( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _publishPageMutation, publish, _updateSettingsMutati, updateSettings, response, error;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (page.locked) {
                  _context.next = 4;
                  break;
                }

                _publishPageMutation = _slicedToArray(publishPageMutation, 1), publish = _publishPageMutation[0];
                _context.next = 4;
                return publish({
                  variables: {
                    id: page.id
                  }
                });

              case 4:
                _updateSettingsMutati = _slicedToArray(updateSettingsMutation, 1), updateSettings = _updateSettingsMutati[0];
                _context.next = 7;
                return updateSettings({
                  variables: {
                    data: {
                      pages: _objectSpread(_objectSpread({}, settings.pages), {}, {
                        home: page.id
                      })
                    }
                  }
                });

              case 7:
                response = _context.sent;
                error = response.data.pageBuilder.updateSettings.error;

                if (error) {
                  showSnackbar(error.message);
                } else {
                  showSnackbar("Homepage set successfully!");
                }

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      })));
    }
  }, /*#__PURE__*/React.createElement(ListItemGraphic, null, /*#__PURE__*/React.createElement(Icon, {
    icon: /*#__PURE__*/React.createElement(HomeIcon, null)
  })), "Set as homepage")), plugins.byType("pb-page-details-header-right-options-menu-item").map(function (plugin) {
    return /*#__PURE__*/React.createElement(React.Fragment, {
      key: plugin.name
    }, plugin.render(props));
  }));
};

export default PageOptionsMenu;
//# sourceMappingURL=PageOptionsMenu.js.map