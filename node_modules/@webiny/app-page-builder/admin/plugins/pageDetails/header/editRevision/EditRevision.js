import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

var _templateObject, _templateObject2;

import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useCallback, useState } from "react";
import { IconButton } from "@webiny/ui/Button";
import { useRouter } from "@webiny/react-router";
import { Tooltip } from "@webiny/ui/Tooltip";
import { ReactComponent as EditIcon } from "@svgr/webpack!../../../../assets/edit.svg";
import { CREATE_PAGE } from "../../../../graphql/pages";
import * as GQLCache from "../../../../views/Pages/cache";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { i18n } from "@webiny/app/i18n";
import { useMutation } from "@apollo/react-hooks";
import usePermission from "../../../../../hooks/usePermission";
var t = i18n.ns("app-headless-cms/app-page-builder/page-details/header/edit");

var EditRevision = function EditRevision(props) {
  var page = props.page;

  var _usePermission = usePermission(),
      canEdit = _usePermission.canEdit;

  var _useRouter = useRouter(),
      history = _useRouter.history;

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      inProgress = _useState2[0],
      setInProgress = _useState2[1];

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var _useMutation = useMutation(CREATE_PAGE),
      _useMutation2 = _slicedToArray(_useMutation, 1),
      createPageFrom = _useMutation2[0];

  var createFromAndEdit = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var response, _response$data$pageBu, data, error;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            setInProgress(true);
            _context.next = 3;
            return createPageFrom({
              variables: {
                from: page.id
              },
              update: function update(cache, _ref2) {
                var data = _ref2.data;

                if (data.pageBuilder.createPage.error) {
                  return;
                }

                GQLCache.updateLatestRevisionInListCache(cache, data.pageBuilder.createPage.data);
              }
            });

          case 3:
            response = _context.sent;
            setInProgress(false);
            _response$data$pageBu = response.data.pageBuilder.createPage, data = _response$data$pageBu.data, error = _response$data$pageBu.error;

            if (!error) {
              _context.next = 8;
              break;
            }

            return _context.abrupt("return", showSnackbar(error.message));

          case 8:
            history.push("/page-builder/editor/".concat(encodeURIComponent(data.id)));

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })), [page]);

  if (!canEdit(page)) {
    return null;
  }

  if (page.locked) {
    return /*#__PURE__*/React.createElement(Tooltip, {
      content: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Edit"]))),
      placement: "top"
    }, /*#__PURE__*/React.createElement(IconButton, {
      disabled: inProgress,
      icon: /*#__PURE__*/React.createElement(EditIcon, null),
      onClick: createFromAndEdit,
      "data-testid": "pb-page-details-header-edit-revision"
    }));
  }

  return /*#__PURE__*/React.createElement(Tooltip, {
    content: t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Edit"]))),
    placement: "top"
  }, /*#__PURE__*/React.createElement(IconButton, {
    disabled: inProgress,
    icon: /*#__PURE__*/React.createElement(EditIcon, null),
    onClick: function onClick() {
      history.push("/page-builder/editor/".concat(encodeURIComponent(page.id)));
    },
    "data-testid": "pb-page-details-header-edit-revision"
  }));
};

export default EditRevision;
//# sourceMappingURL=EditRevision.js.map