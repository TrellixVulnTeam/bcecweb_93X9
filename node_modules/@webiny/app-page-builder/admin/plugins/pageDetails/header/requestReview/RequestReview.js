import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;

import _regeneratorRuntime from "@babel/runtime/regenerator";
import React from "react";
import { IconButton } from "@webiny/ui/Button";
import { Tooltip } from "@webiny/ui/Tooltip";
import { ReactComponent as RequestReviewIcon } from "@svgr/webpack!../../../../assets/emoji_people-24px.svg";
import { useConfirmationDialog } from "@webiny/app-admin/hooks/useConfirmationDialog";
import { i18n } from "@webiny/app/i18n";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { useMutation } from "@apollo/react-hooks";
import gql from "graphql-tag";
import usePermission from "../../../../../hooks/usePermission";
var t = i18n.ns("app-page-builder/page-details/header/request-review");
var REQUEST_REVIEW = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    mutation PbPageRequestReview($id: ID!) {\n        pageBuilder {\n            requestReview(id: $id) {\n                data {\n                    id\n                    status\n                    locked\n                }\n                error {\n                    code\n                    message\n                    data\n                }\n            }\n        }\n    }\n"])));

var RequestReview = function RequestReview(props) {
  var page = props.page;

  var _usePermission = usePermission(),
      canRequestReview = _usePermission.canRequestReview;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var _useMutation = useMutation(REQUEST_REVIEW),
      _useMutation2 = _slicedToArray(_useMutation, 1),
      requestReview = _useMutation2[0];

  var _useConfirmationDialo = useConfirmationDialog({
    title: t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Request Review"]))),
    message: /*#__PURE__*/React.createElement("p", null, t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["You are about to request review of the {title} page. Are you sure you want to continue?"])))({
      title: /*#__PURE__*/React.createElement("strong", null, page.title)
    }))
  }),
      showConfirmation = _useConfirmationDialo.showConfirmation;

  if (!canRequestReview()) {
    return null;
  }

  var buttonEnabled = page.status === "draft" || page.status === "changesRequested";
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tooltip, {
    content: t(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Request Review"]))),
    placement: "top"
  }, /*#__PURE__*/React.createElement(IconButton, {
    disabled: !buttonEnabled,
    icon: /*#__PURE__*/React.createElement(RequestReviewIcon, null),
    onClick: function onClick() {
      return showConfirmation( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var response, error;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return requestReview({
                  variables: {
                    id: page.id
                  }
                });

              case 2:
                response = _context.sent;
                error = response.data.pageBuilder.requestReview.error;

                if (error) {
                  showSnackbar(error.message);
                } else {
                  showSnackbar(t(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["Review request sent successfully."]))));
                }

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      })));
    }
  })));
};

export default RequestReview;
//# sourceMappingURL=RequestReview.js.map