import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;

import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useCallback } from "react";
import { useApolloClient } from "@apollo/react-hooks";
import { useRouter } from "@webiny/react-router";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { useConfirmationDialog } from "@webiny/app-admin/hooks/useConfirmationDialog";
import { useDialog } from "@webiny/app-admin/hooks/useDialog";
import { IconButton } from "@webiny/ui/Button";
import { Tooltip } from "@webiny/ui/Tooltip";
import { ReactComponent as DeleteIcon } from "@svgr/webpack!../../../../assets/delete.svg";
import { DELETE_PAGE } from "../../../../graphql/pages";
import { i18n } from "@webiny/app/i18n";
import usePermission from "../../../../../hooks/usePermission";
import * as GQLCache from "../../../../views/Pages/cache";
var t = i18n.ns("app-headless-cms/app-page-builder/page-details/header/delete-page");

var DeletePage = function DeletePage(props) {
  var page = props.page;
  var client = useApolloClient();

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var _useRouter = useRouter(),
      history = _useRouter.history;

  var _useDialog = useDialog(),
      showDialog = _useDialog.showDialog;

  var _usePermission = usePermission(),
      canDelete = _usePermission.canDelete;

  var _useConfirmationDialo = useConfirmationDialog({
    title: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Delete page"]))),
    message: /*#__PURE__*/React.createElement("p", null, t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["You are about to delete the entire page and all of its revisions!"]))), /*#__PURE__*/React.createElement("br", null), t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["Are you sure you want to permanently delete the page {title}?"])))({
      title: /*#__PURE__*/React.createElement("strong", null, page.title)
    })),
    dataTestId: "pb-page-details-header-delete-dialog"
  }),
      showConfirmation = _useConfirmationDialo.showConfirmation;

  var confirmDelete = useCallback(function () {
    return showConfirmation( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var _res$pageBuilder;

      var _page$id$split, _page$id$split2, uniquePageId, id, _yield$client$mutate, res, _res$pageBuilder$dele, error;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _page$id$split = page.id.split("#"), _page$id$split2 = _slicedToArray(_page$id$split, 1), uniquePageId = _page$id$split2[0];
              id = "".concat(uniquePageId, "#0001");
              _context.next = 4;
              return client.mutate({
                mutation: DELETE_PAGE,
                variables: {
                  id: id
                },
                update: function update(cache, _ref2) {
                  var data = _ref2.data;

                  if (data.pageBuilder.deletePage.error) {
                    return;
                  } // Also, delete the page from "LIST_PAGES_ cache


                  // Also, delete the page from "LIST_PAGES_ cache
                  GQLCache.removePageFromListCache(cache, page);
                }
              });

            case 4:
              _yield$client$mutate = _context.sent;
              res = _yield$client$mutate.data;
              _res$pageBuilder$dele = res === null || res === void 0 ? void 0 : (_res$pageBuilder = res.pageBuilder) === null || _res$pageBuilder === void 0 ? void 0 : _res$pageBuilder.deletePage, error = _res$pageBuilder$dele.error;

              if (!error) {
                _context.next = 9;
                break;
              }

              return _context.abrupt("return", showDialog(error.message, {
                title: t(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Could not delete page."])))
              }));

            case 9:
              showSnackbar( /*#__PURE__*/React.createElement("span", null, t(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["The page {title} was deleted successfully."])))({
                title: /*#__PURE__*/React.createElement("strong", null, page.title.substr(0, 20), "...")
              })));
              history.push("/page-builder/pages");

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));
  }, [page.id]);

  if (!canDelete(page)) {
    return null;
  }

  return /*#__PURE__*/React.createElement(Tooltip, {
    content: "Delete",
    placement: "top"
  }, /*#__PURE__*/React.createElement(IconButton, {
    icon: /*#__PURE__*/React.createElement(DeleteIcon, null),
    onClick: confirmDelete,
    "data-testid": "pb-page-details-header-delete-button"
  }));
};

export default DeletePage;
//# sourceMappingURL=DeletePage.js.map