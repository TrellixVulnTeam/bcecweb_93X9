import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { useCallback } from "react";
import { useApolloClient } from "@apollo/react-hooks";
import { useRouter } from "@webiny/react-router";
import { CREATE_PAGE, DELETE_PAGE } from "../../../graphql/pages";
import { usePublishRevisionHandler } from "./usePublishRevisionHandler";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import * as GQLCache from "../../../views/Pages/cache";
export function useRevisionHandlers(props) {
  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var _useRouter = useRouter(),
      history = _useRouter.history;

  var client = useApolloClient();
  var page = props.page,
      revision = props.revision;

  var _usePublishRevisionHa = usePublishRevisionHandler({
    page: page
  }),
      publishRevision = _usePublishRevisionHa.publishRevision,
      unpublishRevision = _usePublishRevisionHa.unpublishRevision;

  var createRevision = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var _yield$client$mutate, res, _res$pageBuilder$crea, data, error;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return client.mutate({
              mutation: CREATE_PAGE,
              variables: {
                from: revision.id
              },
              update: function update(cache, _ref2) {
                var data = _ref2.data;

                if (data.pageBuilder.createPage.error) {
                  return;
                }

                GQLCache.updateLatestRevisionInListCache(cache, data.pageBuilder.createPage.data);
              }
            });

          case 2:
            _yield$client$mutate = _context.sent;
            res = _yield$client$mutate.data;
            _res$pageBuilder$crea = res.pageBuilder.createPage, data = _res$pageBuilder$crea.data, error = _res$pageBuilder$crea.error;

            if (!error) {
              _context.next = 7;
              break;
            }

            return _context.abrupt("return", showSnackbar(error.message));

          case 7:
            history.push("/page-builder/editor/".concat(encodeURIComponent(data.id)));

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })), [revision]);
  var editRevision = useCallback(function () {
    history.push("/page-builder/editor/".concat(encodeURIComponent(revision.id)));
  }, [revision]);
  var deleteRevision = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    var _yield$client$mutate2, res, error;

    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return client.mutate({
              mutation: DELETE_PAGE,
              variables: {
                id: revision.id
              },
              update: function update(cache, response) {
                if (response.data.pageBuilder.deletePage.error) {
                  return;
                } // We have other revisions, update entry's cache


                // We have other revisions, update entry's cache
                var revisions = GQLCache.removeRevisionFromEntryCache(cache, revision);

                if (revision.id === page.id) {
                  GQLCache.updateLatestRevisionInListCache(cache, revisions[0]); // Redirect to the first revision in the list of all entry revisions.

                  // Redirect to the first revision in the list of all entry revisions.
                  return history.push("/page-builder/pages?id=" + encodeURIComponent(revisions[0].id));
                }
              }
            });

          case 2:
            _yield$client$mutate2 = _context2.sent;
            res = _yield$client$mutate2.data;
            error = res.pageBuilder.deletePage.error;

            if (!error) {
              _context2.next = 7;
              break;
            }

            return _context2.abrupt("return", showSnackbar(error.message));

          case 7:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })), [revision, page]);
  return {
    publishRevision: publishRevision,
    unpublishRevision: unpublishRevision,
    createRevision: createRevision,
    editRevision: editRevision,
    deleteRevision: deleteRevision
  };
}
//# sourceMappingURL=useRevisionHandlers.js.map