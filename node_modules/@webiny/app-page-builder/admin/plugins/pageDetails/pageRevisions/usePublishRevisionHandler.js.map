{"version":3,"sources":["../../../../../src/admin/plugins/pageDetails/pageRevisions/usePublishRevisionHandler.tsx"],"names":["React","set","useApolloClient","useSnackbar","PUBLISH_PAGE","UNPUBLISH_PAGE","GET_PAGE","usePublishRevisionHandler","page","client","showSnackbar","publishRevision","revision","mutate","mutation","variables","id","update","cache","data","pageBuilder","publishPage","error","pageFromCache","readQuery","query","revisions","forEach","r","status","locked","writeQuery","res","message","version","unpublishRevision","unpublishPage"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { set } from \"dot-prop-immutable\";\nimport { useApolloClient } from \"@apollo/react-hooks\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nimport { PUBLISH_PAGE, UNPUBLISH_PAGE, GET_PAGE } from \"../../../graphql/pages\";\n\nexport function usePublishRevisionHandler({ page }) {\n    const client = useApolloClient();\n    const { showSnackbar } = useSnackbar();\n\n    const publishRevision = async revision => {\n        const { data: res } = await client.mutate({\n            mutation: PUBLISH_PAGE,\n            variables: { id: revision.id },\n            update: (cache, { data }) => {\n                // Don't do anything if there was an error during publishing!\n                if (data.pageBuilder.publishPage.error) {\n                    return;\n                }\n\n                // Update revisions\n                const pageFromCache = cache.readQuery({\n                    query: GET_PAGE,\n                    variables: { id: page.id }\n                });\n\n                page.revisions.forEach(r => {\n                    // Update published/locked fields on the revision that was just published.\n                    if (r.id === revision.id) {\n                        r.status = \"published\";\n                        r.locked = true;\n                        return;\n                    }\n\n                    // Unpublish other published revisions\n                    if (r.status === \"published\") {\n                        r.status = \"unpublished\";\n                    }\n                });\n\n                // Write our data back to the cache.\n                cache.writeQuery({\n                    query: GET_PAGE,\n                    data: set(pageFromCache, \"pageBuilder.getPage.data\", page)\n                });\n            }\n        });\n\n        const { error } = res.pageBuilder.publishPage;\n        if (error) {\n            return showSnackbar(error.message);\n        }\n\n        showSnackbar(\n            <span>\n                Successfully published revision <strong>#{revision.version}</strong>!\n            </span>\n        );\n    };\n\n    const unpublishRevision = async revision => {\n        const { data: res } = await client.mutate({\n            mutation: UNPUBLISH_PAGE,\n            variables: { id: revision.id },\n            update: (cache, { data }) => {\n                // Don't do anything if there was an error during publishing!\n                if (data.pageBuilder.unpublishPage.error) {\n                    return;\n                }\n\n                // Update revisions\n                const pageFromCache = cache.readQuery({\n                    query: GET_PAGE,\n                    variables: { id: page.id }\n                });\n\n                page.revisions.forEach(r => {\n                    // Update published/locked fields on the revision that was just published.\n                    if (r.id === revision.id) {\n                        r.status = \"unpublished\";\n                        r.locked = true;\n                        return;\n                    }\n                });\n\n                // Write our data back to the cache.\n                cache.writeQuery({\n                    query: GET_PAGE,\n                    data: set(pageFromCache, \"pageBuilder.getPage.data\", page)\n                });\n            }\n        });\n\n        const { error } = res.pageBuilder.unpublishPage;\n        if (error) {\n            return showSnackbar(error.message);\n        }\n\n        showSnackbar(\n            <span>\n                Successfully unpublished revision <strong>#{revision.version}</strong>!\n            </span>\n        );\n    };\n\n    return {\n        publishRevision,\n        unpublishRevision\n    };\n}\n"],"file":"usePublishRevisionHandler.js"}