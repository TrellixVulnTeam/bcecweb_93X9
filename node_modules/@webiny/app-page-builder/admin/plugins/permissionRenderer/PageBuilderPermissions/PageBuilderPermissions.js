import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16;

import React, { Fragment, useCallback, useMemo } from "react";
import { Grid, Cell } from "@webiny/ui/Grid";
import { Select } from "@webiny/ui/Select";
import { i18n } from "@webiny/app/i18n";
import { PermissionInfo, gridNoPaddingClass } from "@webiny/app-admin/components/Permissions";
import { Form } from "@webiny/form";
import { Elevation } from "@webiny/ui/Elevation";
import { Typography } from "@webiny/ui/Typography";
import { Checkbox, CheckboxGroup } from "@webiny/ui/Checkbox";
import CustomSection from "./CustomSection";
var t = i18n.ns("app-page-builder/admin/plugins/permissionRenderer");
var PAGE_BUILDER = "pb";
var PAGE_BUILDER_FULL_ACCESS = "pb.*";
var PAGE_BUILDER_SETTINGS_ACCESS = "".concat(PAGE_BUILDER, ".settings");
var FULL_ACCESS = "full";
var NO_ACCESS = "no";
var CUSTOM_ACCESS = "custom";
var ENTITIES = ["category", "menu", "page"];
var pwOptions = [{
  id: "p",
  name: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Publish"])))
}, {
  id: "u",
  name: t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Unpublish"])))
}, {
  id: "r",
  name: t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["Request review"])))
}, {
  id: "c",
  name: t(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Request changes"])))
}];
export var PageBuilderPermissions = function PageBuilderPermissions(_ref) {
  var value = _ref.value,
      onChange = _ref.onChange;
  var onFormChange = useCallback(function (formData) {
    var newValue = [];

    if (Array.isArray(value)) {
      // Let's just filter out the `pb*` permission objects, it's easier to build new ones from scratch.
      newValue = value.filter(function (item) {
        return !item.name.startsWith(PAGE_BUILDER);
      });
    }

    if (formData.accessLevel === NO_ACCESS) {
      onChange(newValue);
      return;
    }

    if (formData.accessLevel === FULL_ACCESS) {
      newValue.push({
        name: PAGE_BUILDER_FULL_ACCESS
      });
      onChange(newValue);
      return;
    } // Handling custom access level.
    // Categories, menus, and pages first.


    ENTITIES.forEach(function (entity) {
      if (formData["".concat(entity, "AccessScope")] && formData["".concat(entity, "AccessScope")] !== NO_ACCESS) {
        var permission = {
          name: "".concat(PAGE_BUILDER, ".").concat(entity),
          rwd: "r"
        };

        if (formData["".concat(entity, "AccessScope")] === "own") {
          permission.own = true;
          permission.rwd = "rwd";
        } else if (formData["".concat(entity, "RWD")]) {
          permission.rwd = formData["".concat(entity, "RWD")];
        } // For pages, we can also manage publishing and reviewing of pages.


        if (entity === "page") {
          // Set default publishing workflow value
          permission.pw = "";

          if (Array.isArray(formData["".concat(entity, "PW")])) {
            permission.pw = formData["".concat(entity, "PW")].join("");
          }
        }

        newValue.push(permission);
      }
    }); // Settings.

    if (formData.settingsAccessLevel === FULL_ACCESS) {
      newValue.push({
        name: PAGE_BUILDER_SETTINGS_ACCESS
      });
    }

    onChange(newValue);
  }, [value]);
  var formData = useMemo(function () {
    if (!Array.isArray(value)) {
      return {
        accessLevel: NO_ACCESS
      };
    }

    var hasFullAccess = value.find(function (item) {
      return item.name === PAGE_BUILDER_FULL_ACCESS || item.name === "*";
    });

    if (hasFullAccess) {
      return {
        accessLevel: FULL_ACCESS
      };
    }

    var permissions = value.filter(function (item) {
      return item.name.startsWith(PAGE_BUILDER);
    });

    if (!permissions.length) {
      return {
        accessLevel: NO_ACCESS
      };
    } // We're dealing with custom permissions. Let's first prepare data for "categories", "menus", and "pages".


    var formData = {
      accessLevel: CUSTOM_ACCESS,
      settingsAccessLevel: NO_ACCESS
    };
    ENTITIES.forEach(function (entity) {
      var _data;

      var data = (_data = {}, _defineProperty(_data, "".concat(entity, "AccessScope"), NO_ACCESS), _defineProperty(_data, "".concat(entity, "RWD"), "r"), _data);
      var entityPermission = permissions.find(function (item) {
        return item.name === "".concat(PAGE_BUILDER, ".").concat(entity);
      });

      if (entityPermission) {
        data["".concat(entity, "AccessScope")] = entityPermission.own ? "own" : FULL_ACCESS;

        if (entityPermission.rwd) {
          data["".concat(entity, "RWD")] = entityPermission.rwd;
        } // For pages, we can also manage publishing workflow.


        if (entity === "page") {
          data["".concat(entity, "PW")] = entityPermission.pw ? _toConsumableArray(entityPermission.pw) : [];
        }
      }

      Object.assign(formData, data);
    }); // Finally, let's prepare data for Page Builder settings.

    var hasSettingsAccess = permissions.find(function (item) {
      return item.name === PAGE_BUILDER_SETTINGS_ACCESS;
    });

    if (hasSettingsAccess) {
      formData.settingsAccessLevel = FULL_ACCESS;
    }

    return formData;
  }, []);
  return /*#__PURE__*/React.createElement(Form, {
    data: formData,
    onChange: onFormChange
  }, function (_ref2) {
    var data = _ref2.data,
        Bind = _ref2.Bind,
        setValue = _ref2.setValue;
    return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(Grid, {
      className: gridNoPaddingClass
    }, /*#__PURE__*/React.createElement(Cell, {
      span: 6
    }, /*#__PURE__*/React.createElement(PermissionInfo, {
      title: t(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["Access Level"])))
    })), /*#__PURE__*/React.createElement(Cell, {
      span: 6
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "accessLevel"
    }, /*#__PURE__*/React.createElement(Select, {
      label: t(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["Access Level"])))
    }, /*#__PURE__*/React.createElement("option", {
      value: NO_ACCESS
    }, t(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["No access"])))), /*#__PURE__*/React.createElement("option", {
      value: FULL_ACCESS
    }, t(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["Full access"])))), /*#__PURE__*/React.createElement("option", {
      value: CUSTOM_ACCESS
    }, t(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["Custom access"])))))))), data.accessLevel === CUSTOM_ACCESS && /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(CustomSection, {
      data: data,
      Bind: Bind,
      setValue: setValue,
      entity: "category",
      title: "Categories"
    }), /*#__PURE__*/React.createElement(CustomSection, {
      data: data,
      Bind: Bind,
      setValue: setValue,
      entity: "menu",
      title: "Menus"
    }), /*#__PURE__*/React.createElement(CustomSection, {
      data: data,
      Bind: Bind,
      setValue: setValue,
      entity: "page",
      title: "Pages"
    }, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "pagePW"
    }, /*#__PURE__*/React.createElement(CheckboxGroup, {
      label: t(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["Publishing actions"]))),
      description: t(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["Publishing-related actions that can be performed on the content."])))
    }, function (_ref3) {
      var getValue = _ref3.getValue,
          onChange = _ref3.onChange;
      return pwOptions.map(function (_ref4) {
        var id = _ref4.id,
            name = _ref4.name;
        return /*#__PURE__*/React.createElement(Checkbox, {
          disabled: !["full", "own"].includes(data.pageAccessScope),
          key: id,
          label: name,
          value: getValue(id),
          onChange: onChange(id)
        });
      });
    })))), /*#__PURE__*/React.createElement(Elevation, {
      z: 1,
      style: {
        marginTop: 10
      }
    }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Typography, {
      use: "overline"
    }, t(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["Settings"]))))), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Grid, {
      style: {
        padding: 0,
        paddingBottom: 24
      }
    }, /*#__PURE__*/React.createElement(Cell, {
      span: 6
    }, /*#__PURE__*/React.createElement(PermissionInfo, {
      title: t(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["Manage settings"])))
    })), /*#__PURE__*/React.createElement(Cell, {
      span: 6,
      align: "middle"
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "settingsAccessLevel"
    }, /*#__PURE__*/React.createElement(Select, {
      label: t(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["Access Level"])))
    }, /*#__PURE__*/React.createElement("option", {
      value: NO_ACCESS
    }, t(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["No access"])))), /*#__PURE__*/React.createElement("option", {
      value: FULL_ACCESS
    }, t(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["Full Access"])))))))))))));
  });
};
//# sourceMappingURL=PageBuilderPermissions.js.map