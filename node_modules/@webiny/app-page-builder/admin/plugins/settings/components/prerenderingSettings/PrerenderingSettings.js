import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _get from "lodash/get";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React from "react";
import { Form } from "@webiny/form";
import { Grid, Cell } from "@webiny/ui/Grid";
import { ButtonPrimary } from "@webiny/ui/Button";
import { useQuery, useMutation } from "@apollo/react-hooks";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { GET_SETTINGS, UPDATE_SETTINGS } from "./graphql";
import { CircularProgress } from "@webiny/ui/Progress";
import { validation } from "@webiny/validation";
import { SimpleForm, SimpleFormFooter, SimpleFormContent, SimpleFormHeader } from "@webiny/app-admin/components/SimpleForm";
import { Input } from "@webiny/ui/Input";

var PrerenderingSettings = function PrerenderingSettings() {
  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var _useQuery = useQuery(GET_SETTINGS),
      data = _useQuery.data,
      queryInProgress = _useQuery.loading;

  var settings = _get(data, "pageBuilder.getSettings.data") || {};

  var prerendering = _get(data, "pageBuilder.getDefaultSettings.data.prerendering");

  var appUrl = _get(prerendering, "app.url");

  var storageName = _get(prerendering, "storage.name");

  var _useMutation = useMutation(UPDATE_SETTINGS),
      _useMutation2 = _slicedToArray(_useMutation, 2),
      update = _useMutation2[0],
      mutationInProgress = _useMutation2[1].loading;

  return /*#__PURE__*/React.createElement(Form, {
    data: settings,
    onSubmit: /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return update({
                  variables: {
                    data: data
                  }
                });

              case 2:
                showSnackbar("Settings updated successfully.");

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }()
  }, function (_ref2) {
    var Bind = _ref2.Bind,
        form = _ref2.form;
    return /*#__PURE__*/React.createElement(SimpleForm, null, (queryInProgress || mutationInProgress) && /*#__PURE__*/React.createElement(CircularProgress, null), /*#__PURE__*/React.createElement(SimpleFormHeader, {
      title: "Prerendering Settings"
    }), /*#__PURE__*/React.createElement(SimpleFormContent, null, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "prerendering.app.url",
      validators: validation.create("url")
    }, /*#__PURE__*/React.createElement(Input, {
      label: "App URL",
      description: /*#__PURE__*/React.createElement("span", null, "The URL to access your app, which is used for prerendering.\xA0", appUrl && /*#__PURE__*/React.createElement(React.Fragment, null, "If not specified, the default one (", /*#__PURE__*/React.createElement("a", {
        href: appUrl
      }, appUrl), ") is used."))
    }))), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "prerendering.storage.name"
    }, /*#__PURE__*/React.createElement(Input, {
      label: "Storage name",
      description: /*#__PURE__*/React.createElement("span", null, "The name of the cloud resource (bucket) where the prerendered pages and other related assets are stored.\xA0", storageName && /*#__PURE__*/React.createElement(React.Fragment, null, "If not specified, the default one (", /*#__PURE__*/React.createElement("strong", null, storageName), ") is used."))
    }))))), /*#__PURE__*/React.createElement(SimpleFormFooter, null, /*#__PURE__*/React.createElement(ButtonPrimary, {
      onClick: form.submit
    }, "Save")));
  });
};

export default PrerenderingSettings;
//# sourceMappingURL=PrerenderingSettings.js.map