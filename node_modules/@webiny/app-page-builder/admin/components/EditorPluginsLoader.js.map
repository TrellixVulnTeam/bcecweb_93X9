{"version":3,"sources":["../../../src/admin/components/EditorPluginsLoader.tsx"],"names":["React","useEffect","useReducer","plugins","CircularProgress","globalState","render","editor","EditorPluginsLoader","children","location","state","newState","loaded","setLoaded","loadPlugins","byType","loadEditorPlugins","loadRenderPlugins","pathname","startsWith","renderPlugins","register","skipExisting","Promise","all","filter","Boolean","editorPlugins"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AAEA,IAAMC,WAAW,GAAG;AAAEC,EAAAA,MAAM,EAAE,KAAV;AAAiBC,EAAAA,MAAM,EAAE;AAAzB,CAApB,C,CAEA;AACA;AACA;;AACA,OAAO,SAASC,mBAAT,OAAqD;AAAA,MAAtBC,QAAsB,QAAtBA,QAAsB;AAAA,MAAZC,QAAY,QAAZA,QAAY;;AACxD,oBAA4BR,UAAU,CAClC,UAACS,KAAD,EAAQC,QAAR;AAAA,2CAA2BD,KAA3B,GAAqCC,QAArC;AAAA,GADkC,EAElCP,WAFkC,CAAtC;AAAA;AAAA,MAAOQ,MAAP;AAAA,MAAeC,SAAf;;AADwD,WAMzCC,WANyC;AAAA;AAAA;;AAAA;AAAA,4EAMxD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gCACuDZ,OAAO,CAACa,MAAR,CAAe,mBAAf,CADvD,kGACaC,iBADb,qBACaA,iBADb,EACgCC,iBADhC,qBACgCA,iBADhC,EAGI;;AAHJ,oBAIQR,QAAQ,CAACS,QAAT,CAAkBC,UAAlB,CAA6B,qBAA7B,KAAuD,CAACP,MAAM,CAACP,MAJvE;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAKoCY,iBAAiB,EALrD;;AAAA;AAKcG,cAAAA,aALd;AAOQ;AACAlB,cAAAA,OAAO,CAACmB,QAAR,CAAiBD,aAAjB,EAAgC;AAAEE,gBAAAA,YAAY,EAAE;AAAhB,eAAhC;AAEAlB,cAAAA,WAAW,CAACC,MAAZ,GAAqB,IAArB;AACAQ,cAAAA,SAAS,CAAC;AAAER,gBAAAA,MAAM,EAAE;AAAV,eAAD,CAAT;;AAXR;AAAA,oBAeQI,QAAQ,CAACS,QAAT,CAAkBC,UAAlB,CAA6B,sBAA7B,KAAwD,CAACP,MAAM,CAACN,MAfxE;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAgBoCiB,OAAO,CAACC,GAAR,CACxB,CAACR,iBAAiB,EAAlB,EAAsB,CAACJ,MAAM,CAACP,MAAR,GAAiBY,iBAAiB,EAAlC,GAAuC,IAA7D,EAAmEQ,MAAnE,CAA0EC,OAA1E,CADwB,CAhBpC;;AAAA;AAgBcC,cAAAA,aAhBd;AAoBQ;AACAzB,cAAAA,OAAO,CAACmB,QAAR,CAAiBM,aAAjB,EAAgC;AAAEL,gBAAAA,YAAY,EAAE;AAAhB,eAAhC;AAEAlB,cAAAA,WAAW,CAACE,MAAZ,GAAqB,IAArB;AACAF,cAAAA,WAAW,CAACC,MAAZ,GAAqB,IAArB;AAEAQ,cAAAA,SAAS,CAAC;AAAEP,gBAAAA,MAAM,EAAE,IAAV;AAAgBD,gBAAAA,MAAM,EAAE;AAAxB,eAAD,CAAT;;AA1BR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KANwD;AAAA;AAAA;;AAoCxDL,EAAAA,SAAS,CAAC,YAAM;AACZc,IAAAA,WAAW;AACd,GAFQ,EAEN,EAFM,CAAT;;AAIA,MAAIL,QAAQ,CAACS,QAAT,CAAkBC,UAAlB,CAA6B,qBAA7B,KAAuDP,MAAM,CAACP,MAAlE,EAA0E;AACtE,WAAOG,QAAP;AACH;;AAED,MAAIC,QAAQ,CAACS,QAAT,CAAkBC,UAAlB,CAA6B,sBAA7B,KAAwDP,MAAM,CAACN,MAAnE,EAA2E;AACvE,WAAOE,QAAP;AACH;;AAED,sBAAO,oBAAC,gBAAD,OAAP;AACH","sourcesContent":["import React, { useEffect, useReducer } from \"react\";\nimport { plugins } from \"@webiny/plugins\";\nimport { CircularProgress } from \"@webiny/ui/Progress\";\n\nconst globalState = { render: false, editor: false };\n\n// Since these plugins are loaded asynchronously, and some overrides might've been registered\n// already by the developer (e.g. in the main App.tsx file), we only register new plugins.\n// In other words, if the plugin with a particular name already exists, we skip its registration.\nexport function EditorPluginsLoader({ children, location }) {\n    const [loaded, setLoaded] = useReducer(\n        (state, newState) => ({ ...state, ...newState }),\n        globalState\n    );\n\n    async function loadPlugins() {\n        const [{ loadEditorPlugins, loadRenderPlugins }] = plugins.byType(\"pb-plugins-loader\");\n\n        // If we are on pages list route, import plugins required to render the page content.\n        if (location.pathname.startsWith(\"/page-builder/pages\") && !loaded.render) {\n            const renderPlugins = await loadRenderPlugins();\n\n            // \"skipExisting\" will ensure existing plugins (with the same name) are not overridden.\n            plugins.register(renderPlugins, { skipExisting: true });\n\n            globalState.render = true;\n            setLoaded({ render: true });\n        }\n\n        // If we are on the Editor route, import plugins required to render both editor and preview.\n        if (location.pathname.startsWith(\"/page-builder/editor\") && !loaded.editor) {\n            const editorPlugins = await Promise.all(\n                [loadEditorPlugins(), !loaded.render ? loadRenderPlugins() : null].filter(Boolean)\n            );\n\n            // \"skipExisting\" will ensure existing plugins (with the same name) are not overridden.\n            plugins.register(editorPlugins, { skipExisting: true });\n\n            globalState.editor = true;\n            globalState.render = true;\n\n            setLoaded({ editor: true, render: true });\n        }\n    }\n\n    useEffect(() => {\n        loadPlugins();\n    }, []);\n\n    if (location.pathname.startsWith(\"/page-builder/pages\") && loaded.render) {\n        return children;\n    }\n\n    if (location.pathname.startsWith(\"/page-builder/editor\") && loaded.editor) {\n        return children;\n    }\n\n    return <CircularProgress />;\n}\n"],"file":"EditorPluginsLoader.js"}