import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _debounce from "lodash/debounce";
import _get from "lodash/get";

var _templateObject, _templateObject2;

import React, { useState } from "react";
import { AutoComplete } from "@webiny/ui/AutoComplete";
import gql from "graphql-tag";
import { useQuery } from "@apollo/react-hooks";
// We utilize the same "listPages" GraphQL field.
var GET_PUBLISHED_PAGE = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    query GetPublishedPage($id: ID) {\n        pageBuilder {\n            getPublishedPage(id: $id) {\n                data {\n                    uniquePageId\n                    status\n                    title\n                }\n                error {\n                    code\n                    message\n                    data\n                }\n            }\n        }\n    }\n"])));
var LIST_PUBLISHED_PAGES = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    query ListPublishedPages($search: PbListPagesSearchInput) {\n        pageBuilder {\n            listPublishedPages(search: $search) {\n                data {\n                    uniquePageId\n                    status\n                    title\n                }\n                error {\n                    code\n                    message\n                    data\n                }\n            }\n        }\n    }\n"])));
export function PagesAutocomplete(props) {
  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      query = _useState2[0],
      setQuery = _useState2[1];

  var listPublishedPagesQuery = useQuery(LIST_PUBLISHED_PAGES, {
    variables: {
      search: {
        query: query
      }
    }
  });
  var getPublishedPageQuery = useQuery(GET_PUBLISHED_PAGE, {
    skip: !props.value,
    variables: {
      id: props.value
    }
  });

  var publishedPages = _get(listPublishedPagesQuery, "data.pageBuilder.listPublishedPages.data", []);

  var publishedPage = _get(getPublishedPageQuery, "data.pageBuilder.getPublishedPage.data");

  return /*#__PURE__*/React.createElement(AutoComplete, Object.assign({}, props, {
    options: publishedPages,
    onInput: _debounce(function (query) {
      return typeof query === "string" && setQuery(query);
    }, 250),
    valueProp: "uniquePageId",
    textProp: "title",
    value: publishedPage
  }));
}
//# sourceMappingURL=PagesAutocomplete.js.map