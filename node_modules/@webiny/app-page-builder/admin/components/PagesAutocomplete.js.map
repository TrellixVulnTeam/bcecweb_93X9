{"version":3,"sources":["../../../src/admin/components/PagesAutocomplete.tsx"],"names":["React","useState","AutoComplete","gql","useQuery","GET_PUBLISHED_PAGE","LIST_PUBLISHED_PAGES","PagesAutocomplete","props","query","setQuery","listPublishedPagesQuery","variables","search","getPublishedPageQuery","skip","value","id","publishedPages","publishedPage"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,SAASC,QAAT,QAAyB,qBAAzB;AAGA;AACA,IAAMC,kBAAkB,GAAGF,GAAH,gdAAxB;AAmBA,IAAMG,oBAAoB,GAAGH,GAAH,sfAA1B;AAmBA,OAAO,SAASI,iBAAT,CAA2BC,KAA3B,EAAkC;AACrC,kBAA0BP,QAAQ,EAAlC;AAAA;AAAA,MAAOQ,KAAP;AAAA,MAAcC,QAAd;;AACA,MAAMC,uBAAuB,GAAGP,QAAQ,CAACE,oBAAD,EAAuB;AAC3DM,IAAAA,SAAS,EAAE;AACPC,MAAAA,MAAM,EAAE;AACJJ,QAAAA,KAAK,EAALA;AADI;AADD;AADgD,GAAvB,CAAxC;AAQA,MAAMK,qBAAqB,GAAGV,QAAQ,CAACC,kBAAD,EAAqB;AACvDU,IAAAA,IAAI,EAAE,CAACP,KAAK,CAACQ,KAD0C;AAEvDJ,IAAAA,SAAS,EAAE;AAAEK,MAAAA,EAAE,EAAET,KAAK,CAACQ;AAAZ;AAF4C,GAArB,CAAtC;;AAKA,MAAME,cAAc,GAAG,KACnBP,uBADmB,EAEnB,0CAFmB,EAGnB,EAHmB,CAAvB;;AAKA,MAAMQ,aAAa,GAAG,KAAIL,qBAAJ,EAA2B,wCAA3B,CAAtB;;AAEA,sBACI,oBAAC,YAAD,oBACQN,KADR;AAEI,IAAA,OAAO,EAAEU,cAFb;AAGI,IAAA,OAAO,EAAE,UAAS,UAAAT,KAAK;AAAA,aAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BC,QAAQ,CAACD,KAAD,CAAzC;AAAA,KAAd,EAAgE,GAAhE,CAHb;AAII,IAAA,SAAS,EAAE,cAJf;AAKI,IAAA,QAAQ,EAAE,OALd;AAMI,IAAA,KAAK,EAAEU;AANX,KADJ;AAUH","sourcesContent":["import React, { useState } from \"react\";\nimport { AutoComplete } from \"@webiny/ui/AutoComplete\";\nimport gql from \"graphql-tag\";\nimport { get } from \"lodash\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { debounce } from \"lodash\";\n\n// We utilize the same \"listPages\" GraphQL field.\nconst GET_PUBLISHED_PAGE = gql`\n    query GetPublishedPage($id: ID) {\n        pageBuilder {\n            getPublishedPage(id: $id) {\n                data {\n                    uniquePageId\n                    status\n                    title\n                }\n                error {\n                    code\n                    message\n                    data\n                }\n            }\n        }\n    }\n`;\n\nconst LIST_PUBLISHED_PAGES = gql`\n    query ListPublishedPages($search: PbListPagesSearchInput) {\n        pageBuilder {\n            listPublishedPages(search: $search) {\n                data {\n                    uniquePageId\n                    status\n                    title\n                }\n                error {\n                    code\n                    message\n                    data\n                }\n            }\n        }\n    }\n`;\n\nexport function PagesAutocomplete(props) {\n    const [query, setQuery] = useState<string>();\n    const listPublishedPagesQuery = useQuery(LIST_PUBLISHED_PAGES, {\n        variables: {\n            search: {\n                query\n            }\n        }\n    });\n\n    const getPublishedPageQuery = useQuery(GET_PUBLISHED_PAGE, {\n        skip: !props.value,\n        variables: { id: props.value }\n    });\n\n    const publishedPages = get(\n        listPublishedPagesQuery,\n        \"data.pageBuilder.listPublishedPages.data\",\n        []\n    );\n    const publishedPage = get(getPublishedPageQuery, \"data.pageBuilder.getPublishedPage.data\");\n\n    return (\n        <AutoComplete\n            {...props}\n            options={publishedPages}\n            onInput={debounce(query => typeof query === \"string\" && setQuery(query), 250)}\n            valueProp={\"uniquePageId\"}\n            textProp={\"title\"}\n            value={publishedPage}\n        />\n    );\n}\n"],"file":"PagesAutocomplete.js"}