{"version":3,"sources":["../src/types.ts"],"names":["AlignmentTypesEnum","DisplayMode"],"mappings":"AA6FA,WAAYA,kBAAZ;;WAAYA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;GAAAA,kB,KAAAA,kB;;AA+cZ,WAAYC,WAAZ;;WAAYA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;GAAAA,W,KAAAA,W","sourcesContent":["import React, { ComponentType, ReactElement, ReactNode } from \"react\";\nimport { DragObjectWithTypeWithTarget } from \"./editor/components/Droppable\";\nimport { BaseEventAction, EventAction } from \"./editor/recoil/eventActions\";\nimport { PluginsAtomType } from \"./editor/recoil/modules\";\nimport { PbState } from \"./editor/recoil/modules/types\";\nimport { Plugin } from \"@webiny/app/types\";\nimport { BindComponent } from \"@webiny/form/Bind\";\nimport { IconPrefix, IconName } from \"@fortawesome/fontawesome-svg-core\";\nimport { Form, FormSetValue } from \"@webiny/form/Form\";\n\nexport type PbElementDataSettingsSpacingValueType = {\n    all?: string;\n    top?: string;\n    right?: string;\n    bottom?: string;\n    left?: string;\n};\nexport type PbElementDataSettingsBackgroundType = {\n    color?: string;\n    image?: {\n        scaling?: string;\n        position?: string;\n        file?: {\n            src?: string;\n        };\n    };\n};\nexport type PbElementDataSettingsMarginType = {\n    advanced?: boolean;\n    mobile?: PbElementDataSettingsSpacingValueType;\n    desktop?: PbElementDataSettingsSpacingValueType;\n};\nexport type PbElementDataSettingsPaddingType = {\n    advanced?: boolean;\n    mobile?: PbElementDataSettingsSpacingValueType;\n    desktop?: PbElementDataSettingsSpacingValueType;\n};\nexport type PbElementDataSettingsBorderType = {\n    width?:\n        | number\n        | {\n              all?: number;\n              top?: number;\n              right?: number;\n              bottom?: number;\n              left?: number;\n          };\n    style?: \"none\" | \"solid\" | \"dashed\" | \"dotted\";\n    radius?:\n        | number\n        | {\n              all?: number;\n              topLeft?: number;\n              topRight?: number;\n              bottomLeft?: number;\n              bottomRight?: number;\n          };\n    borders?: {\n        top?: boolean;\n        right?: boolean;\n        bottom?: boolean;\n        left?: boolean;\n    };\n};\nexport type PbElementDataTextType = {\n    color?: string;\n    alignment: string;\n    typography: string;\n    tag: string;\n    data: {\n        text: string;\n    };\n};\nexport type PbElementDataImageType = {\n    width?: string | number;\n    height?: string | number;\n    file?: {\n        id?: string;\n        src?: string;\n    };\n    title?: string;\n};\nexport type PbElementDataIconType = {\n    id?: [string, string];\n    width?: number;\n    color?: string;\n    svg?: string;\n    position?: string;\n};\nexport type PbElementDataSettingsFormType = {\n    parent?: string;\n    revision?: string;\n};\nexport enum AlignmentTypesEnum {\n    HORIZONTAL_LEFT = \"horizontalLeft\",\n    HORIZONTAL_CENTER = \"horizontalCenter\",\n    HORIZONTAL_RIGHT = \"horizontalRight\",\n    VERTICAL_TOP = \"verticalTop\",\n    VERTICAL_CENTER = \"verticalCenter\",\n    VERTICAL_BOTTOM = \"verticalBottom\"\n}\nexport type PbElementDataSettingsType = {\n    alignment?: AlignmentTypesEnum;\n    horizontalAlign?: \"left\" | \"center\" | \"right\" | \"justify\";\n    horizontalAlignFlex?: \"flex-start\" | \"center\" | \"flex-end\";\n    verticalAlign?: \"start\" | \"center\" | \"end\";\n    margin?: PbElementDataSettingsMarginType;\n    padding?: PbElementDataSettingsPaddingType;\n    height?: {\n        value?: number;\n    };\n    background?: PbElementDataSettingsBackgroundType;\n    border?: PbElementDataSettingsBorderType;\n    grid?: {\n        cellsType?: string;\n        size?: number;\n    };\n    columnWidth?: {\n        value?: string;\n    };\n    width?: {\n        value?: string;\n    };\n    className?: string;\n    form?: PbElementDataSettingsFormType;\n    [key: string]: any;\n};\nexport type PbElementDataType = {\n    settings?: PbElementDataSettingsType;\n    // this needs to be any since editor can be changed\n    text?: PbElementDataTextType;\n    image?: PbElementDataImageType;\n    buttonText?: string;\n    link?: {\n        href?: string;\n        newTab?: boolean;\n    };\n    type?: string;\n    icon?: PbElementDataIconType;\n    source?: {\n        url?: string;\n    };\n    oembed?: {\n        source?: {\n            url?: string;\n        };\n        html?: string;\n    };\n    width?: number;\n    [key: string]: any;\n};\n\nexport type PbEditorElement = {\n    id: string;\n    type: string;\n    data: PbElementDataType;\n    parent?: string;\n    elements: (string | PbEditorElement)[];\n    [key: string]: any;\n};\n\nexport type PbElement = {\n    id: string;\n    type: string;\n    data: PbElementDataType;\n    elements: PbElement[];\n};\n\nexport type PbTheme = {\n    colors: { [key: string]: string };\n    elements: { [key: string]: any };\n};\n\nexport type PbThemePlugin = Plugin & {\n    theme: PbTheme;\n};\n\nexport type PbPageLayout = {\n    name: string;\n    title: string;\n    component: React.ComponentType<any>;\n};\n\nexport type PbPageLayoutPlugin = Plugin & {\n    layout: PbPageLayout;\n};\n\nexport type PbPageData = {\n    id: string;\n    path: string;\n    title?: string;\n    content: any;\n    settings?: {\n        general?: {\n            layout?: string;\n        };\n        seo?: {\n            title: string;\n            description: string;\n            meta: { name: string; content: string }[];\n        };\n        social?: {\n            title: string;\n            description: string;\n            meta: { property: string; content: string }[];\n            image: {\n                src: string;\n            };\n        };\n    };\n};\n\nexport type PbPageRevision = {\n    id: string;\n    locked: boolean;\n    savedOn: string;\n    status: string;\n    title: string;\n    version: number;\n};\n\nexport type PbRenderElementPlugin = Plugin & {\n    type: \"pb-render-page-element\";\n    // Name of the pb-element plugin this render plugin is handling.\n    elementType: string;\n    render: (params: { theme: PbTheme; element: PbElement }) => React.ReactNode;\n};\n\nexport type PbPageSettingsFieldsPlugin = Plugin & {\n    fields: string;\n};\n\nexport type PbRenderElementStylePlugin = Plugin & {\n    renderStyle: (params: {\n        element: { id: string; type: string; data: { [key: string]: any } };\n        style: { [key: string]: any };\n    }) => { [key: string]: any };\n};\n\nexport type PbRenderElementAttributesPlugin = Plugin & {\n    renderAttributes: (params: {\n        element: { id: string; type: string; data: { [key: string]: any } };\n        attributes: { [key: string]: string };\n    }) => { [key: string]: string };\n};\n\nexport type PbPageElementImagesListComponentPlugin = Plugin & {\n    type: \"pb-page-element-images-list-component\";\n    title: string;\n    componentName: string;\n    component: ComponentType<any>;\n};\n\nexport type PbPageElementPagesListComponentPlugin = Plugin & {\n    type: \"pb-page-element-pages-list-component\";\n    title: string;\n    componentName: string;\n    component: ComponentType<any>;\n};\n\nexport type PbAddonRenderPlugin = Plugin & {\n    type: \"addon-render\";\n    component: ReactElement;\n};\n\nexport type PbDocumentElementPlugin = Plugin & {\n    elementType: \"document\";\n    create(options?: any): PbElement;\n    render(props): ReactElement;\n};\n\nexport type PbPageDetailsRevisionContentPlugin = Plugin & {\n    type: \"pb-page-details-revision-content\";\n    render(params: { page: Record<string, any>; getPageQuery: any }): ReactElement;\n};\n\nexport type PbPageDetailsHeaderRightOptionsMenuItemPlugin = Plugin & {\n    type: \"pb-page-details-header-right-options-menu-item\";\n    render(props: any): ReactElement;\n};\n\nexport type PbPageDetailsRevisionContentPreviewPlugin = Plugin & {\n    type: \"pb-page-details-revision-content-preview\";\n    render(params: { page: Record<string, any>; getPageQuery: any }): ReactElement;\n};\n\nexport type PbMenuItemPlugin = Plugin & {\n    type: \"pb-menu-item\";\n    menuItem: {\n        /* Item type (this will be stored to DB when menu is saved) */\n        type: string;\n        /* Menu item title */\n        title: string;\n        /* Menu item icon */\n        icon: ReactElement;\n        /* Can other menu items become children of this item ? */\n        canHaveChildren: boolean;\n        /* Render function for menu item form */\n        renderForm: (params: {\n            data: { [key: string]: any };\n            onSubmit: Function;\n            onCancel: Function;\n        }) => ReactElement;\n    };\n};\n\nexport type PbEditorPageElementGroupPlugin = Plugin & {\n    type: \"pb-editor-page-element-group\";\n    group: {\n        // Title rendered in the toolbar.\n        title: string;\n        // Icon rendered in the toolbar.\n        icon: ReactElement;\n        // Empty element group view rendered in the toolbar.\n        emptyView?: ReactElement;\n    };\n};\n\nexport type PbEditorPageElementTitle = (params: { refresh: () => void }) => ReactNode;\n\nexport type PbEditorPageElementPlugin = Plugin & {\n    type: \"pb-editor-page-element\";\n    elementType: string;\n    toolbar?: {\n        // Element title in the toolbar.\n        title?: string | PbEditorPageElementTitle;\n        // Element group this element belongs to.\n        group?: string;\n        // A function to render an element preview in the toolbar.\n        preview?: ({ theme: PbTheme }) => ReactNode;\n    };\n    // Help link\n    help?: string;\n    // Whitelist elements that can accept this element (for drag&drop interaction)\n    target?: string[];\n    // Array of element settings plugin names.\n    settings?: Array<string | Array<string | any>>;\n    // A function to create an element data structure.\n    create: (\n        options: { [key: string]: any },\n        parent?: PbEditorElement\n    ) => Omit<PbEditorElement, \"id\">;\n    // A function to render an element in the editor.\n    render: (params: { theme?: PbTheme; element: PbEditorElement; isActive: boolean }) => ReactNode;\n    // A function to check if an element can be deleted.\n    canDelete?: (params: { element: PbEditorElement }) => boolean;\n    // Executed when another element is dropped on the drop zones of current element.\n    onReceived?: (params: {\n        state?: EventActionHandlerCallableState;\n        meta: EventActionHandlerMeta;\n        source: PbEditorElement | DragObjectWithTypeWithTarget;\n        target: PbEditorElement;\n        position: number | null;\n    }) => EventActionHandlerActionCallableResponse;\n    // Executed when an immediate child element is deleted\n    onChildDeleted?: (params: {\n        element: PbEditorElement;\n        child: PbEditorElement;\n    }) => PbEditorElement | undefined;\n    // Executed after element was created\n    onCreate?: string;\n    // Render element preview (used when creating element screenshots; not all elements have a simple DOM representation\n    // so this callback is used to customize the look of the element in a PNG image)\n    renderElementPreview?: (params: {\n        element: PbEditorElement;\n        width: number;\n        height: number;\n    }) => ReactElement;\n};\n\nexport type PbEditorPageElementActionPlugin = Plugin & {\n    type: \"pb-editor-page-element-action\";\n    render: (params: { element: PbEditorElement; plugin: PbEditorPageElementPlugin }) => ReactNode;\n};\n\nexport type PbPageDetailsPlugin = Plugin & {\n    render: (params: { [key: string]: any }) => ReactNode;\n};\n\nexport type PbEditorPageSettingsPlugin = Plugin & {\n    type: \"pb-editor-page-settings\";\n    /* Settings group title */\n    title: string;\n    /* Settings group description */\n    description: string;\n    /* Settings group icon */\n    icon: ReactNode;\n    /* Render function that handles the specified `fields` */\n    render: (params: {\n        data: Record<string, any>;\n        setValue: FormSetValue;\n        form: Form;\n        Bind: BindComponent;\n    }) => ReactNode;\n};\n\nexport interface PbEditorPageQueryFieldsPlugin extends Plugin {\n    type: \"pb-editor-page-query-fields\";\n    fields: string;\n}\n\nexport type PbIcon = {\n    /**\n     * [ pack, icon ], ex: [\"fab\", \"cog\"]\n     */\n    id: [IconPrefix, IconName];\n    /**\n     * Icon name\n     */\n    name: string;\n    /**\n     * SVG element\n     */\n    svg: ReactElement;\n};\n\nexport type PbIconsPlugin = Plugin & {\n    type: \"pb-icons\";\n    getIcons(): PbIcon[];\n};\n\nexport type PbEditorBarPluginShouldRenderProps = {\n    plugins: PluginsAtomType;\n    activeElement: any;\n};\n\nexport type PbEditorBarPlugin = Plugin & {\n    type: \"pb-editor-bar\";\n    shouldRender(props: PbEditorBarPluginShouldRenderProps): boolean;\n    render(): ReactElement;\n};\n\nexport type PbEditorContentPlugin = Plugin & {\n    type: \"pb-editor-content\";\n    render(): ReactElement;\n};\n\nexport type PbEditorDefaultBarLeftPlugin = Plugin & {\n    type: \"pb-editor-default-bar-left\";\n    render(): ReactElement;\n};\n\nexport type PbEditorDefaultBarCenterPlugin = Plugin & {\n    type: \"pb-editor-default-bar-center\";\n    render(): ReactElement;\n};\n\nexport type PbEditorDefaultBarRightPlugin = Plugin & {\n    type: \"pb-editor-default-bar-right\";\n    render(): ReactElement;\n};\n\nexport type PbEditorDefaultBarRightPageOptionsPlugin = Plugin & {\n    type: \"pb-editor-default-bar-right-page-options\";\n    render(): ReactElement;\n};\n\nexport type PbEditorToolbarTopPlugin = Plugin & {\n    type: \"pb-editor-toolbar-top\";\n    renderAction(): ReactElement;\n    renderDialog?: () => ReactElement;\n    renderDrawer?: () => ReactElement;\n    toolbar?: {\n        drawerClassName?: string;\n    };\n};\n\nexport type PbEditorToolbarBottomPlugin = Plugin & {\n    type: \"pb-editor-toolbar-bottom\";\n    renderAction(): ReactElement;\n    renderDialog?: () => ReactElement;\n};\n\nexport type PbEditorBlockPlugin = Plugin & {\n    type: \"pb-editor-block\";\n    title: string;\n    category: string;\n    tags: string[];\n    image: {\n        src?: string;\n        meta: {\n            width: number;\n            height: number;\n            aspectRatio: number;\n        };\n    };\n    create(): PbEditorElement;\n    preview(): ReactElement;\n};\n\nexport type PbEditorBlockCategoryPlugin = Plugin & {\n    type: \"pb-editor-block-category\";\n    title: string;\n    categoryName: string;\n    description: string;\n    icon: ReactElement;\n};\n\nexport type PbEditorPageElementSettingsPlugin = Plugin & {\n    type: \"pb-editor-page-element-settings\";\n    renderAction(params: { options?: any }): ReactElement;\n    elements?: boolean | string[];\n};\n\nexport type PbEditorPageElementStyleSettingsPlugin = Plugin & {\n    type: \"pb-editor-page-element-style-settings\";\n    render(params: { options?: any }): ReactElement;\n    elements?: boolean | string[];\n};\n\nexport type PbEditorPageElementAdvancedSettingsPlugin = Plugin & {\n    type: \"pb-editor-page-element-advanced-settings\";\n    elementType: string;\n    render(params?: { Bind: BindComponent; data: any; submit: () => void }): ReactElement;\n    onSave?: (data: FormData) => FormData;\n};\n\nexport type PbEditorEventActionPlugin = Plugin & {\n    type: \"pb-editor-event-action-plugin\";\n    name: string;\n    // returns an unregister event action callable\n    // please have one action per plugin\n    // you can register more but then unregistering won't work properly\n    onEditorMount: (handler: EventActionHandler) => () => void;\n    // runs when editor is unmounting\n    // by default it runs unregister callable\n    // but dev can do what ever and then run unregister callable - or not\n    onEditorUnmount?: (handler: EventActionHandler, cb: () => void) => void;\n};\n\nexport type PbEditorGridPresetPluginType = Plugin & {\n    name: string;\n    type: \"pb-editor-grid-preset\";\n    cellsType: string;\n    icon: React.FunctionComponent;\n};\n// this will run when saving the element for later use\nexport type PbEditorPageElementSaveActionPlugin = Plugin & {\n    type: \"pb-editor-page-element-save-action\";\n    elementType: string;\n    onSave: (element: PbEditorElement) => PbEditorElement;\n};\n\nexport type PbEditorPageElementSettingsRenderComponentProps = {\n    defaultAccordionValue?: boolean;\n};\n\nexport type PbConfigPluginType = Plugin & {\n    type: \"pb-config\";\n    config(): PbConfigType;\n};\n\nexport type PbConfigType = {\n    maxEventActionsNesting: number;\n};\n\nexport enum DisplayMode {\n    DESKTOP = \"desktop\",\n    TABLET = \"tablet\",\n    MOBILE_LANDSCAPE = \"mobile-landscape\",\n    MOBILE_PORTRAIT = \"mobile-portrait\"\n}\n\nexport type PbEditorResponsiveModePlugin = Plugin & {\n    type: \"pb-editor-responsive-mode\";\n    config: {\n        displayMode: string;\n        toolTip: {\n            title: string;\n            subTitle: string;\n            body: string;\n            subTitleIcon?: ReactNode;\n        };\n        icon: React.ReactElement;\n    };\n};\n\nexport type PbRenderResponsiveModePlugin = Plugin & {\n    type: \"pb-render-responsive-mode\";\n    config: {\n        displayMode: string;\n        maxWidth: number;\n        minWidth: number;\n    };\n};\n\nexport type PbEditorElementPluginArgs = {\n    create?: (defaultValue) => Record<string, any>;\n    settings?: (defaultValue) => Array<string | Array<string | any>>;\n    toolbar?: (defaultValue) => Record<string, any>;\n    elementType?: string;\n};\n\nexport type PbRenderElementPluginArgs = {\n    elementType?: string;\n};\n\n// ============== EVENT ACTION HANDLER ================= //\nexport interface EventActionHandlerCallableState extends PbState {\n    getElementById(id: string): Promise<PbEditorElement>;\n    getElementTree(element?: PbEditorElement): Promise<any>;\n}\n\nexport interface EventActionHandler {\n    on(\n        target: EventActionHandlerTarget,\n        callable: EventActionCallable\n    ): EventActionHandlerUnregister;\n    trigger<T extends EventActionHandlerCallableArgs>(\n        ev: EventAction<T>\n    ): Promise<Partial<PbState>>;\n    undo: () => void;\n    redo: () => void;\n    startBatch: () => void;\n    endBatch: () => void;\n    enableHistory: () => void;\n    disableHistory: () => void;\n    getElementTree: (element?: PbEditorElement) => Promise<any>;\n}\n\nexport interface EventActionHandlerTarget {\n    new (...args: any[]): EventAction<any>;\n}\nexport interface EventActionHandlerUnregister {\n    (): boolean;\n}\n\nexport interface EventActionHandlerMeta {\n    client: any;\n    eventActionHandler: EventActionHandler;\n}\n\nexport interface EventActionHandlerConfig {\n    maxEventActionsNesting: number;\n}\n\nexport interface EventActionHandlerActionCallableResponse {\n    state?: Partial<EventActionHandlerCallableState>;\n    actions?: BaseEventAction[];\n}\n\nexport interface EventActionHandlerMutationActionCallable<T, A extends any = any> {\n    (state: T, args?: A): T;\n}\n\nexport interface EventActionHandlerCallableArgs {\n    [key: string]: any;\n}\n\nexport interface EventActionCallable<T extends EventActionHandlerCallableArgs = any> {\n    (state: EventActionHandlerCallableState, meta: EventActionHandlerMeta, args?: T):\n        | EventActionHandlerActionCallableResponse\n        | Promise<EventActionHandlerActionCallableResponse>;\n}\n"],"file":"types.js"}