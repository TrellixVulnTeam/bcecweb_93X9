import _createForOfIteratorHelper from "@babel/runtime/helpers/createForOfIteratorHelper";
import React from "react";
import { plugins } from "@webiny/plugins";
import kebabCase from "lodash/kebabCase";
import { PageBuilderContext } from "../contexts/PageBuilder";

var useResponsiveClassName = function useResponsiveClassName() {
  var _React$useContext = React.useContext(PageBuilderContext),
      _React$useContext$res = _React$useContext.responsiveDisplayMode,
      displayMode = _React$useContext$res.displayMode,
      setDisplayMode = _React$useContext$res.setDisplayMode;

  var ref = React.useRef(); // Get "responsive-mode" plugins

  var responsiveModeConfigs = React.useMemo(function () {
    return plugins.byType("pb-render-responsive-mode").map(function (pl) {
      return pl.config;
    });
  }, []); // Create resize observer

  var resizeObserver = React.useMemo(function () {
    return new ResizeObserver(function (entries) {
      var _iterator = _createForOfIteratorHelper(entries),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var entry = _step.value;
          var _entry$contentRect = entry.contentRect,
              width = _entry$contentRect.width,
              height = _entry$contentRect.height;
          handlerResize({
            width: width,
            height: height
          });
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    });
  }, []);
  var pageElementRef = React.useCallback(function (node) {
    if (ref.current) {
      // Make sure to cleanup any events/references added to the last instance
      resizeObserver.disconnect();
    }

    if (node) {
      // Add resize observer
      resizeObserver.observe(node); // Save a reference to the node

      ref.current = node;
    }
  }, []); // Handle document resize

  var handlerResize = React.useCallback(function (_ref) {
    var width = _ref.width;
    var mode = "desktop";
    responsiveModeConfigs.forEach(function (config) {
      if (width <= config.minWidth) {
        mode = config.displayMode;
      }
    });
    setDisplayMode(mode);
  }, [responsiveModeConfigs]);
  return {
    pageElementRef: pageElementRef,
    responsiveClassName: "webiny-pb-media-query--".concat(kebabCase(displayMode))
  };
};

export default useResponsiveClassName;
//# sourceMappingURL=useResponsiveClassName.js.map