import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import React, { useMemo } from "react";
import kebabCase from "lodash/kebabCase";
import { plugins } from "@webiny/plugins";
import { usePageBuilder } from "../../hooks/usePageBuilder";

var combineClassNames = function combineClassNames() {
  for (var _len = arguments.length, styles = new Array(_len), _key = 0; _key < _len; _key++) {
    styles[_key] = arguments[_key];
  }

  return styles.filter(function (s) {
    return s !== "" && s !== "css-0";
  }).join(" ");
};

var ElementRootComponent = function ElementRootComponent(_ref) {
  var _element$data$setting;

  var element = _ref.element,
      style = _ref.style,
      children = _ref.children,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? null : _ref$className;
  var shallowElement = useMemo(function () {
    return {
      id: element ? element.id : null,
      type: element ? element.type : null,
      data: element ? element.data : null,
      elements: []
    };
  }, [element.id, element.data]);
  var finalStyle = useMemo(function () {
    var stylePlugins = plugins.byType("pb-render-page-element-style"); // Reduce style

    return stylePlugins.reduce(function (accumulatedStyles, plugin) {
      return plugin.renderStyle({
        element: shallowElement,
        style: accumulatedStyles
      });
    }, style || {});
  }, [style, shallowElement.id, shallowElement.data]);
  var attributes = useMemo(function () {
    var attributePlugins = plugins.byType("pb-render-page-element-attributes");
    return attributePlugins.reduce(function (accumulatedAttributes, plugin) {
      return plugin.renderAttributes({
        element: shallowElement,
        attributes: accumulatedAttributes
      });
    }, {});
  }, [shallowElement.id]);

  var _usePageBuilder = usePageBuilder(),
      displayMode = _usePageBuilder.responsiveDisplayMode.displayMode; // required due to re-rendering when set content atom and still nothing in elements atom


  if (!element) {
    return null;
  } // Handle element visibility.// Use per-device style


  var visibility = finalStyle["--".concat(kebabCase(displayMode), "-visibility")];

  if (visibility === "hidden") {
    return null;
  }

  var classNames = ((_element$data$setting = element.data.settings) === null || _element$data$setting === void 0 ? void 0 : _element$data$setting.className) || "";

  var getAllClasses = function getAllClasses() {
    for (var _len2 = arguments.length, extraClasses = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      extraClasses[_key2] = arguments[_key2];
    }

    return [className].concat(extraClasses, _toConsumableArray(classNames.split(" "))).filter(function (v) {
      return v && v !== "css-0";
    }).join(" ");
  };

  if (typeof children === "function") {
    return children({
      getAllClasses: getAllClasses,
      combineClassNames: combineClassNames,
      elementStyle: finalStyle,
      elementAttributes: attributes,
      customClasses: classNames.split(" ")
    });
  }

  return /*#__PURE__*/React.createElement("div", Object.assign({
    className: getAllClasses(),
    style: finalStyle
  }, attributes), children);
};

export var ElementRoot = /*#__PURE__*/React.memo(ElementRootComponent);
//# sourceMappingURL=ElementRoot.js.map