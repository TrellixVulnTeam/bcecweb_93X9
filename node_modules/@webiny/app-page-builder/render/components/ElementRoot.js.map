{"version":3,"sources":["../../../src/render/components/ElementRoot.tsx"],"names":["React","useMemo","kebabCase","plugins","usePageBuilder","combineClassNames","styles","filter","s","join","ElementRootComponent","element","style","children","className","shallowElement","id","type","data","elements","finalStyle","stylePlugins","byType","reduce","accumulatedStyles","plugin","renderStyle","attributes","attributePlugins","accumulatedAttributes","renderAttributes","displayMode","responsiveDisplayMode","visibility","classNames","settings","getAllClasses","extraClasses","split","v","elementStyle","elementAttributes","customClasses","ElementRoot","memo"],"mappings":"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","sourcesContent":["import React, { CSSProperties, ReactElement, useMemo } from \"react\";\nimport kebabCase from \"lodash/kebabCase\";\nimport { plugins } from \"@webiny/plugins\";\nimport {\n    PbRenderElementStylePlugin,\n    PbRenderElementAttributesPlugin,\n    PbElement,\n    PbEditorElement\n} from \"~/types\";\nimport { usePageBuilder } from \"~/hooks/usePageBuilder\";\n\ntype CombineClassNamesType = (...styles) => string;\nconst combineClassNames: CombineClassNamesType = (...styles) => {\n    return styles.filter(s => s !== \"\" && s !== \"css-0\").join(\" \");\n};\n\ntype ElementRootChildrenFunctionParamsType = {\n    getAllClasses: (...classes: string[]) => string;\n    combineClassNames: (...classes: string[]) => string;\n    elementStyle: CSSProperties;\n    elementAttributes: { [key: string]: string };\n    customClasses: string[];\n};\ntype ElementRootChildrenFunction = (params: ElementRootChildrenFunctionParamsType) => ReactElement;\n\ntype ElementRootProps = {\n    element: PbElement | PbEditorElement;\n    style?: CSSProperties;\n    className?: string;\n    children?: ReactElement | ReactElement[] | ElementRootChildrenFunction;\n};\n\nconst ElementRootComponent: React.FunctionComponent<ElementRootProps> = ({\n    element,\n    style,\n    children,\n    className = null\n}) => {\n    const shallowElement = useMemo(\n        () => ({\n            id: element ? element.id : null,\n            type: element ? element.type : null,\n            data: element ? element.data : null,\n            elements: []\n        }),\n        [element.id, element.data]\n    );\n\n    const finalStyle = useMemo(() => {\n        const stylePlugins = plugins.byType<PbRenderElementStylePlugin>(\n            \"pb-render-page-element-style\"\n        );\n        // Reduce style\n        return stylePlugins.reduce((accumulatedStyles, plugin) => {\n            return plugin.renderStyle({ element: shallowElement, style: accumulatedStyles });\n        }, style || {});\n    }, [style, shallowElement.id, shallowElement.data]);\n\n    const attributes = useMemo(() => {\n        const attributePlugins = plugins.byType<PbRenderElementAttributesPlugin>(\n            \"pb-render-page-element-attributes\"\n        );\n        return attributePlugins.reduce((accumulatedAttributes, plugin) => {\n            return plugin.renderAttributes({\n                element: shallowElement,\n                attributes: accumulatedAttributes\n            });\n        }, {});\n    }, [shallowElement.id]);\n\n    const {\n        responsiveDisplayMode: { displayMode }\n    } = usePageBuilder();\n\n    // required due to re-rendering when set content atom and still nothing in elements atom\n    if (!element) {\n        return null;\n    }\n    // Handle element visibility.// Use per-device style\n    const visibility = finalStyle[`--${kebabCase(displayMode)}-visibility`];\n    if (visibility === \"hidden\") {\n        return null;\n    }\n\n    const classNames = element.data.settings?.className || \"\";\n\n    const getAllClasses = (...extraClasses) => {\n        return [className, ...extraClasses, ...classNames.split(\" \")]\n            .filter(v => v && v !== \"css-0\")\n            .join(\" \");\n    };\n\n    if (typeof children === \"function\") {\n        return children({\n            getAllClasses,\n            combineClassNames,\n            elementStyle: finalStyle,\n            elementAttributes: attributes,\n            customClasses: classNames.split(\" \")\n        });\n    }\n\n    return (\n        <div className={getAllClasses()} style={finalStyle} {...attributes}>\n            {children}\n        </div>\n    );\n};\n\nexport const ElementRoot = React.memo(ElementRootComponent);\n"],"file":"ElementRoot.js"}