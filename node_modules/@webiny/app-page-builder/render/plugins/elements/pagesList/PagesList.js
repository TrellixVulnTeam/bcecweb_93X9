import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["component"];
import React, { useState } from "react";
import { useRouter } from "@webiny/react-router";
import { useQuery } from "@apollo/react-hooks";
import { usePageBuilder } from "../../../../hooks/usePageBuilder";
import { LIST_PUBLISHED_PAGES } from "./graphql";
import { plugins } from "@webiny/plugins";
import get from "lodash/get";
import trimEnd from "lodash/trimEnd";

var PagesListRender = function PagesListRender(props) {
  var _ref = props.data || {},
      component = _ref.component,
      vars = _objectWithoutProperties(_ref, _excluded);

  var components = plugins.byType("pb-page-element-pages-list-component");
  var pageList = components.find(function (cmp) {
    return cmp.componentName === component;
  });

  var _usePageBuilder = usePageBuilder(),
      theme = _usePageBuilder.theme;

  var _useState = useState(1),
      _useState2 = _slicedToArray(_useState, 2),
      page = _useState2[0],
      setPage = _useState2[1];

  var _useRouter = useRouter(),
      location = _useRouter.location; // Extract page id from URL.


  var query = new URLSearchParams(location.search);
  var pageId;

  if (query.get("id")) {
    var _query$get$split = query.get("id").split("#");

    var _query$get$split2 = _slicedToArray(_query$get$split, 1);

    pageId = _query$get$split2[0];
  }

  if (!pageList) {
    return /*#__PURE__*/React.createElement("div", null, "Selected page list component not found!");
  }

  var ListComponent = pageList.component;
  var sort = null;

  if (vars.sortBy && vars.sortDirection) {
    sort = _defineProperty({}, vars.sortBy, vars.sortDirection);
  } // Lets ensure the trailing "/" is removed.


  var path = trimEnd(location.pathname, "/");
  var variables = {
    sort: sort,
    where: {
      category: vars.category,
      tags: {
        query: vars.tags,
        rule: vars.tagsRule
      }
    },
    limit: parseInt(vars.resultsPerPage),
    page: page,

    /**
     * When rendering page preview inside admin app there will be no page path/slug present in URL.
     * In that case we'll use the extracted page id from URL.
     */
    exclude: [pageId ? pageId : path]
  };

  var _useQuery = useQuery(LIST_PUBLISHED_PAGES, {
    variables: variables,
    skip: !ListComponent
  }),
      data = _useQuery.data,
      loading = _useQuery.loading;

  if (!ListComponent) {
    return /*#__PURE__*/React.createElement("div", null, "You must select a component to render your list!");
  }

  if (loading) {
    return /*#__PURE__*/React.createElement("div", null, "Loading...");
  }

  var totalCount = get(data, "pageBuilder.listPublishedPages.meta.totalCount");

  if (!totalCount) {
    return /*#__PURE__*/React.createElement("div", null, "No pages match the criteria.");
  }

  var listPublishedPages = get(data, "pageBuilder.listPublishedPages");
  var prevPage = null;

  if (listPublishedPages.meta.previousPage) {
    prevPage = function prevPage() {
      return setPage(listPublishedPages.meta.previousPage);
    };
  }

  var nextPage = null;

  if (listPublishedPages.meta.nextPage) {
    nextPage = function nextPage() {
      return setPage(listPublishedPages.meta.nextPage);
    };
  }

  return /*#__PURE__*/React.createElement(ListComponent, Object.assign({}, listPublishedPages, {
    nextPage: nextPage,
    prevPage: prevPage,
    theme: theme
  }));
};

var PagesList = function PagesList(props) {
  var _ref2 = props.data || {},
      component = _ref2.component;

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("ps-tag", {
    "data-key": "pb-pages-list",
    "data-value": component
  }), /*#__PURE__*/React.createElement(PagesListRender, props));
};

export default /*#__PURE__*/React.memo(PagesList);
//# sourceMappingURL=PagesList.js.map