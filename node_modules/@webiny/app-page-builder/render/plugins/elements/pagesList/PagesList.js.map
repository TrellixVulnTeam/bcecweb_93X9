{"version":3,"sources":["../../../../../src/render/plugins/elements/pagesList/PagesList.tsx"],"names":["React","useState","useRouter","useQuery","usePageBuilder","LIST_PUBLISHED_PAGES","plugins","get","trimEnd","PagesListRender","props","data","component","vars","components","byType","pageList","find","cmp","componentName","theme","page","setPage","location","query","URLSearchParams","search","pageId","split","ListComponent","sort","sortBy","sortDirection","path","pathname","variables","where","category","tags","rule","tagsRule","limit","parseInt","resultsPerPage","exclude","skip","loading","totalCount","listPublishedPages","prevPage","meta","previousPage","nextPage","PagesList","memo"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,cAAT;AACA,SAASC,oBAAT;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,OAAP,MAAoB,gBAApB;;AAiBA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC7B,aAA+BA,KAAK,CAACC,IAAN,IAAc,EAA7C;AAAA,MAAQC,SAAR,QAAQA,SAAR;AAAA,MAAsBC,IAAtB;;AACA,MAAMC,UAAU,GAAGR,OAAO,CAACS,MAAR,CACf,sCADe,CAAnB;AAGA,MAAMC,QAAQ,GAAGF,UAAU,CAACG,IAAX,CAAgB,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,aAAJ,KAAsBP,SAA1B;AAAA,GAAnB,CAAjB;;AACA,wBAAkBR,cAAc,EAAhC;AAAA,MAAQgB,KAAR,mBAAQA,KAAR;;AACA,kBAAwBnB,QAAQ,CAAC,CAAD,CAAhC;AAAA;AAAA,MAAOoB,IAAP;AAAA,MAAaC,OAAb;;AACA,mBAAqBpB,SAAS,EAA9B;AAAA,MAAQqB,QAAR,cAAQA,QAAR,CAR6B,CAU7B;;;AACA,MAAMC,KAAK,GAAG,IAAIC,eAAJ,CAAoBF,QAAQ,CAACG,MAA7B,CAAd;AACA,MAAIC,MAAJ;;AACA,MAAIH,KAAK,CAACjB,GAAN,CAAU,IAAV,CAAJ,EAAqB;AAAA,2BACNiB,KAAK,CAACjB,GAAN,CAAU,IAAV,EAAgBqB,KAAhB,CAAsB,GAAtB,CADM;;AAAA;;AAChBD,IAAAA,MADgB;AAEpB;;AAED,MAAI,CAACX,QAAL,EAAe;AACX,wBAAO,2EAAP;AACH;;AAED,MAAmBa,aAAnB,GAAqCb,QAArC,CAAQJ,SAAR;AAEA,MAAIkB,IAAI,GAAG,IAAX;;AACA,MAAIjB,IAAI,CAACkB,MAAL,IAAelB,IAAI,CAACmB,aAAxB,EAAuC;AACnCF,IAAAA,IAAI,uBAAMjB,IAAI,CAACkB,MAAX,EAAoBlB,IAAI,CAACmB,aAAzB,CAAJ;AACH,GA1B4B,CA4B7B;;;AACA,MAAMC,IAAI,GAAGzB,OAAO,CAACe,QAAQ,CAACW,QAAV,EAAoB,GAApB,CAApB;AAEA,MAAMC,SAAS,GAAG;AACdL,IAAAA,IAAI,EAAJA,IADc;AAEdM,IAAAA,KAAK,EAAE;AACHC,MAAAA,QAAQ,EAAExB,IAAI,CAACwB,QADZ;AAEHC,MAAAA,IAAI,EAAE;AACFd,QAAAA,KAAK,EAAEX,IAAI,CAACyB,IADV;AAEFC,QAAAA,IAAI,EAAE1B,IAAI,CAAC2B;AAFT;AAFH,KAFO;AASdC,IAAAA,KAAK,EAAEC,QAAQ,CAAC7B,IAAI,CAAC8B,cAAN,CATD;AAUdtB,IAAAA,IAAI,EAAJA,IAVc;;AAWd;AACR;AACA;AACA;AACQuB,IAAAA,OAAO,EAAE,CAACjB,MAAM,GAAGA,MAAH,GAAYM,IAAnB;AAfK,GAAlB;;AAkBA,kBAA0B9B,QAAQ,CAACE,oBAAD,EAAuB;AACrD8B,IAAAA,SAAS,EAATA,SADqD;AAErDU,IAAAA,IAAI,EAAE,CAAChB;AAF8C,GAAvB,CAAlC;AAAA,MAAQlB,IAAR,aAAQA,IAAR;AAAA,MAAcmC,OAAd,aAAcA,OAAd;;AAKA,MAAI,CAACjB,aAAL,EAAoB;AAChB,wBAAO,oFAAP;AACH;;AAED,MAAIiB,OAAJ,EAAa;AACT,wBAAO,8CAAP;AACH;;AAED,MAAMC,UAAU,GAAGxC,GAAG,CAACI,IAAD,EAAO,gDAAP,CAAtB;;AACA,MAAI,CAACoC,UAAL,EAAiB;AACb,wBAAO,gEAAP;AACH;;AAED,MAAMC,kBAAkB,GAAGzC,GAAG,CAACI,IAAD,EAAO,gCAAP,CAA9B;AAEA,MAAIsC,QAAQ,GAAG,IAAf;;AACA,MAAID,kBAAkB,CAACE,IAAnB,CAAwBC,YAA5B,EAA0C;AACtCF,IAAAA,QAAQ,GAAG;AAAA,aAAM3B,OAAO,CAAC0B,kBAAkB,CAACE,IAAnB,CAAwBC,YAAzB,CAAb;AAAA,KAAX;AACH;;AAED,MAAIC,QAAQ,GAAG,IAAf;;AACA,MAAIJ,kBAAkB,CAACE,IAAnB,CAAwBE,QAA5B,EAAsC;AAClCA,IAAAA,QAAQ,GAAG;AAAA,aAAM9B,OAAO,CAAC0B,kBAAkB,CAACE,IAAnB,CAAwBE,QAAzB,CAAb;AAAA,KAAX;AACH;;AAED,sBACI,oBAAC,aAAD,oBACQJ,kBADR;AAEI,IAAA,QAAQ,EAAEI,QAFd;AAGI,IAAA,QAAQ,EAAEH,QAHd;AAII,IAAA,KAAK,EAAE7B;AAJX,KADJ;AAQH,CAvFD;;AAyFA,IAAMiC,SAAS,GAAG,SAAZA,SAAY,CAAA3C,KAAK,EAAI;AACvB,cAAsBA,KAAK,CAACC,IAAN,IAAc,EAApC;AAAA,MAAQC,SAAR,SAAQA,SAAR;;AAEA,sBACI,uDACI;AAAQ,gBAAU,eAAlB;AAAmC,kBAAYA;AAA/C,IADJ,eAEI,oBAAC,eAAD,EAAqBF,KAArB,CAFJ,CADJ;AAMH,CATD;;AAUA,4BAAeV,KAAK,CAACsD,IAAN,CAAWD,SAAX,CAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useRouter } from \"@webiny/react-router\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { usePageBuilder } from \"../../../../hooks/usePageBuilder\";\nimport { LIST_PUBLISHED_PAGES } from \"./graphql\";\nimport { plugins } from \"@webiny/plugins\";\nimport get from \"lodash/get\";\nimport trimEnd from \"lodash/trimEnd\";\n\nimport { PbPageElementPagesListComponentPlugin } from \"../../../../types\";\n\ndeclare global {\n    // eslint-disable-next-line\n    namespace JSX {\n        interface IntrinsicElements {\n            // @ts-ignore\n            \"ps-tag\": {\n                key?: string;\n                value?: string;\n            };\n        }\n    }\n}\n\nconst PagesListRender = props => {\n    const { component, ...vars } = props.data || {};\n    const components = plugins.byType<PbPageElementPagesListComponentPlugin>(\n        \"pb-page-element-pages-list-component\"\n    );\n    const pageList = components.find(cmp => cmp.componentName === component);\n    const { theme } = usePageBuilder();\n    const [page, setPage] = useState(1);\n    const { location } = useRouter();\n\n    // Extract page id from URL.\n    const query = new URLSearchParams(location.search);\n    let pageId;\n    if (query.get(\"id\")) {\n        [pageId] = query.get(\"id\").split(\"#\");\n    }\n\n    if (!pageList) {\n        return <div>Selected page list component not found!</div>;\n    }\n\n    const { component: ListComponent } = pageList;\n\n    let sort = null;\n    if (vars.sortBy && vars.sortDirection) {\n        sort = { [vars.sortBy]: vars.sortDirection };\n    }\n\n    // Lets ensure the trailing \"/\" is removed.\n    const path = trimEnd(location.pathname, \"/\");\n\n    const variables = {\n        sort,\n        where: {\n            category: vars.category,\n            tags: {\n                query: vars.tags,\n                rule: vars.tagsRule\n            }\n        },\n        limit: parseInt(vars.resultsPerPage),\n        page,\n        /**\n         * When rendering page preview inside admin app there will be no page path/slug present in URL.\n         * In that case we'll use the extracted page id from URL.\n         */\n        exclude: [pageId ? pageId : path]\n    };\n\n    const { data, loading } = useQuery(LIST_PUBLISHED_PAGES, {\n        variables,\n        skip: !ListComponent\n    });\n\n    if (!ListComponent) {\n        return <div>You must select a component to render your list!</div>;\n    }\n\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    const totalCount = get(data, \"pageBuilder.listPublishedPages.meta.totalCount\");\n    if (!totalCount) {\n        return <div>No pages match the criteria.</div>;\n    }\n\n    const listPublishedPages = get(data, \"pageBuilder.listPublishedPages\");\n\n    let prevPage = null;\n    if (listPublishedPages.meta.previousPage) {\n        prevPage = () => setPage(listPublishedPages.meta.previousPage);\n    }\n\n    let nextPage = null;\n    if (listPublishedPages.meta.nextPage) {\n        nextPage = () => setPage(listPublishedPages.meta.nextPage);\n    }\n\n    return (\n        <ListComponent\n            {...listPublishedPages}\n            nextPage={nextPage}\n            prevPage={prevPage}\n            theme={theme}\n        />\n    );\n};\n\nconst PagesList = props => {\n    const { component } = props.data || {};\n\n    return (\n        <>\n            <ps-tag data-key={\"pb-pages-list\"} data-value={component} />\n            <PagesListRender {...props} />\n        </>\n    );\n};\nexport default React.memo(PagesList);\n"],"file":"PagesList.js"}