import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import React from "react";
import { css } from "emotion";
import kebabCase from "lodash/kebabCase";
import Element from "../../../components/Element";
import { ElementRoot } from "../../../components/ElementRoot";
import ElementAnimation from "../../../components/ElementAnimation";
import { PageBuilderContext } from "../../../../contexts/PageBuilder";

var Block = function Block(_ref) {
  var element = _ref.element;

  var _React$useContext = React.useContext(PageBuilderContext),
      displayMode = _React$useContext.responsiveDisplayMode.displayMode;

  return /*#__PURE__*/React.createElement(ElementAnimation, null, /*#__PURE__*/React.createElement(ElementRoot, {
    element: element
  }, function (_ref2) {
    var elementStyle = _ref2.elementStyle,
        elementAttributes = _ref2.elementAttributes,
        customClasses = _ref2.customClasses,
        combineClassNames = _ref2.combineClassNames;
    var containerStyle = elementStyle; // Use per-device style

    var width = elementStyle["--".concat(kebabCase(displayMode), "-align-items")];
    /**
     * We're swapping "justifyContent" & "alignItems" value here because
     * ".webiny-pb-layout-block" has "flex-direction: column"
     */

    var alignItems = elementStyle["--".concat(kebabCase(displayMode), "-justify-content")];
    var justifyContent = elementStyle["--".concat(kebabCase(displayMode), "-align-items")];
    return /*#__PURE__*/React.createElement("div", Object.assign({
      style: {
        width: "100%",
        display: "flex"
      },
      className: "webiny-pb-layout-block-container " + /*#__PURE__*/css(containerStyle, "label:Block;")
    }, elementAttributes), /*#__PURE__*/React.createElement("div", {
      style: {
        width: width,
        justifyContent: justifyContent,
        alignItems: alignItems
      },
      className: combineClassNames.apply(void 0, ["webiny-pb-layout-block webiny-pb-base-page-element-style"].concat(_toConsumableArray(customClasses)))
    }, element.elements.map(function (element) {
      return /*#__PURE__*/React.createElement(Element, {
        key: element.id,
        element: element
      });
    })));
  }));
};

export default Block;
//# sourceMappingURL=Block.js.map