import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import React from "react";
import kebabCase from "lodash/kebabCase";
import { ElementRoot } from "../../../components/ElementRoot";
import { Link } from "@webiny/react-router";
import { PageBuilderContext } from "../../../../contexts/PageBuilder";

var Button = function Button(_ref) {
  var element = _ref.element;

  var _React$useContext = React.useContext(PageBuilderContext),
      displayMode = _React$useContext.responsiveDisplayMode.displayMode;

  var _ref2 = element.data || {},
      _ref2$type = _ref2.type,
      type = _ref2$type === void 0 ? "default" : _ref2$type,
      _ref2$icon = _ref2.icon,
      icon = _ref2$icon === void 0 ? {} : _ref2$icon,
      _ref2$link = _ref2.link,
      link = _ref2$link === void 0 ? {} : _ref2$link;

  var _icon$svg = icon.svg,
      svg = _icon$svg === void 0 ? null : _icon$svg;
  var _icon$position = icon.position,
      position = _icon$position === void 0 ? "left" : _icon$position;
  var classes = ["webiny-pb-base-page-element-style", "webiny-pb-page-element-button", "webiny-pb-page-element-button--" + type, "webiny-pb-page-element-button__icon--" + position];
  var content = /*#__PURE__*/React.createElement(React.Fragment, null, svg && /*#__PURE__*/React.createElement("span", {
    dangerouslySetInnerHTML: {
      __html: svg
    }
  }), /*#__PURE__*/React.createElement("p", null, element.data.buttonText));
  return /*#__PURE__*/React.createElement(ElementRoot, {
    className: "webiny-pb-base-page-element-style",
    element: element
  }, function (_ref3) {
    var getAllClasses = _ref3.getAllClasses,
        elementStyle = _ref3.elementStyle,
        elementAttributes = _ref3.elementAttributes;
    // Use per-device style
    var justifyContent = elementStyle["--".concat(kebabCase(displayMode), "-justify-content")];
    return /*#__PURE__*/React.createElement("div", {
      style: {
        display: "flex",
        justifyContent: justifyContent
      }
    }, /*#__PURE__*/React.createElement(Link, Object.assign({
      to: link.href || "/",
      target: link.newTab ? "_blank" : "_self",
      style: !link.href ? _objectSpread(_objectSpread({}, elementStyle), {}, {
        pointerEvents: "none"
      }) : elementStyle
    }, elementAttributes, {
      className: getAllClasses.apply(void 0, classes)
    }), content));
  });
};

export default Button;
//# sourceMappingURL=Button.js.map