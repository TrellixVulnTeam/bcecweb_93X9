import _get from "lodash/get";
import kebabCase from "lodash/kebabCase";
import { applyPerDeviceStyleWithFallback } from "../../../utils";
var scaling = {
  cover: {
    backgroundSize: "cover",
    backgroundRepeat: "no-repeat"
  },
  contain: {
    backgroundSize: "contain",
    backgroundRepeat: "no-repeat"
  },
  originalSize: {
    backgroundSize: "auto",
    backgroundRepeat: "no-repeat"
  },
  tile: {
    backgroundSize: "auto",
    backgroundRepeat: "repeat"
  },
  tileHorizontally: {
    backgroundSize: "auto",
    backgroundRepeat: "repeat-x"
  },
  tileVertically: {
    backgroundSize: "auto",
    backgroundRepeat: "repeat-y"
  }
};
export default {
  name: "pb-render-page-element-style-background",
  type: "pb-render-page-element-style",
  renderStyle: function renderStyle(_ref) {
    var element = _ref.element,
        style = _ref.style;

    var _get2 = _get(element, "data.settings", {}),
        background = _get2.background; // Set per-device property value


    applyPerDeviceStyleWithFallback(function (_ref2) {
      var displayMode = _ref2.displayMode,
          fallbackMode = _ref2.fallbackMode;
      // Set background color
      style["--".concat(kebabCase(displayMode), "-background-color")] = _get(background, "".concat(displayMode, ".color"), _get(style, "--".concat(kebabCase(fallbackMode), "-background-color"), "transparent")); // Set background image properties

      var image = _get(background, "".concat(displayMode, ".image"));

      var src = _get(image, "file.src");

      if (src) {
        var scaleSettings = _get(scaling, _get(image, "scaling", "cover"), {});

        var position = _get(image, "position", "center center");

        style["--".concat(kebabCase(displayMode), "-background-size")] = scaleSettings.backgroundSize;
        style["--".concat(kebabCase(displayMode), "-background-repeat")] = scaleSettings.backgroundRepeat;
        style["--".concat(kebabCase(displayMode), "-background-image")] = src ? "url(".concat(src, ")") : "";
        style["--".concat(kebabCase(displayMode), "-background-position")] = position;
      } else {
        style["--".concat(kebabCase(displayMode), "-background-size")] = _get(style, "--".concat(kebabCase(fallbackMode), "-background-size"), "none");
        style["--".concat(kebabCase(displayMode), "-background-repeat")] = _get(style, "--".concat(kebabCase(fallbackMode), "-background-repeat"), "none");
        style["--".concat(kebabCase(displayMode), "-background-image")] = _get(style, "--".concat(kebabCase(fallbackMode), "-background-image"), "none");
        style["--".concat(kebabCase(displayMode), "-background-position")] = _get(style, "--".concat(kebabCase(fallbackMode), "-background-position"), "none");
      }
    });
    return style;
  }
};
//# sourceMappingURL=index.js.map