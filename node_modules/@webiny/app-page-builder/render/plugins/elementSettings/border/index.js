import _get from "lodash/get";
import kebabCase from "lodash/kebabCase";
import camelCase from "lodash/camelCase";
import { applyPerDeviceStyleWithFallback } from "../../../utils";
var borderRadiusSides = ["top-left", "top-right", "bottom-left", "bottom-right"];
var boxSides = ["top", "right", "bottom", "left"];

var removeUnitFromEnd = function removeUnitFromEnd(value) {
  var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "px";

  if (value) {
    return value.replace(unit, "");
  }

  return value;
};

export default {
  name: "pb-render-page-element-style-border",
  type: "pb-render-page-element-style",
  renderStyle: function renderStyle(_ref) {
    var element = _ref.element,
        style = _ref.style;

    var _get2 = _get(element, "data.settings", {}),
        border = _get2.border; // Set "per-side" border style


    boxSides.forEach(function (side, index) {
      // Set per-device property value
      applyPerDeviceStyleWithFallback(function (_ref2) {
        var displayMode = _ref2.displayMode,
            fallbackMode = _ref2.fallbackMode;
        // Set "border style"
        style["--".concat(kebabCase(displayMode), "-border-").concat(side, "-style")] = _get(border, "".concat(displayMode, ".style"), _get(style, "--".concat(kebabCase(fallbackMode), "-border-").concat(side, "-style"))); // Set "border-color"

        style["--".concat(kebabCase(displayMode), "-border-").concat(side, "-color")] = _get(border, "".concat(displayMode, ".color"), _get(style, "--".concat(kebabCase(fallbackMode), "-border-").concat(side, "-color"))); // Set "border-width"

        var advancedWidth = _get(border, "".concat(displayMode, ".width.advanced"), false);

        var fallbackWidthValue = _get(style, "--".concat(kebabCase(fallbackMode), "-border-").concat(side, "-width"), 0);

        var allWidth = _get(border, "".concat(displayMode, ".width.all"), removeUnitFromEnd(fallbackWidthValue));

        var sideWidth = _get(border, "".concat(displayMode, ".width.").concat(side), removeUnitFromEnd(fallbackWidthValue));

        style["--".concat(kebabCase(displayMode), "-border-").concat(side, "-width")] = (advancedWidth ? sideWidth : allWidth) + "px"; // Set "border-radius".

        var advancedRadius = _get(border, "".concat(displayMode, ".radius.advanced"), false);

        var borderRadiusSide = borderRadiusSides[index];

        var fallbackRadiusValue = _get(style, "--".concat(kebabCase(fallbackMode), "-border-").concat(kebabCase(borderRadiusSide), "-radius"), 0);

        var allRadius = _get(border, "".concat(displayMode, ".radius.all"), removeUnitFromEnd(fallbackRadiusValue));

        var sideRadius = _get(border, "".concat(displayMode, ".radius.").concat(camelCase(borderRadiusSide)), removeUnitFromEnd(fallbackRadiusValue));

        style["--".concat(kebabCase(displayMode), "-border-").concat(kebabCase(borderRadiusSide), "-radius")] = (advancedRadius ? sideRadius : allRadius) + "px";
      });
    });
    return style;
  }
};
//# sourceMappingURL=index.js.map