{"version":3,"sources":["../../../../src/editor/plugins/toolbar/Action.tsx"],"names":["React","useCallback","useEventActionHandler","TogglePluginActionEvent","isPluginActiveSelector","css","IconButton","Tooltip","useRecoilValue","activeStyle","color","getButtonIcon","icon","isActive","Array","isArray","Action","id","onClick","tooltip","plugin","closeOtherInGroup","handler","togglePlugin","trigger","name","clickHandler","btnIcon","iconButton","visible","memo"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,SAASC,qBAAT;AACA,SAASC,uBAAT;AACA,SAASC,sBAAT;AACA,SAASC,GAAT,QAAoB,SAApB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,cAAT,QAA+B,QAA/B;AAEA,IAAMC,WAAW,gBAAGJ,GAAG,CAAC;AACpB,4BAA0B;AACtBK,IAAAA,KAAK,EAAE;AADe;AADN,CAAD,uBAAvB;;AAMA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,IAAD,EAA4BC,QAA5B,EAA2D;AAC7E,MAAIC,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAJ,EAAyB;AACrB,WAAOC,QAAQ,GAAGD,IAAI,CAAC,CAAD,CAAP,GAAaA,IAAI,CAAC,CAAD,CAAhC;AACH;;AACD,SAAOA,IAAP;AACH,CALD;;AAiBA,IAAMI,MAAgD,GAAG,SAAnDA,MAAmD,OAOnD;AAAA,MANFC,EAME,QANFA,EAME;AAAA,MALFL,IAKE,QALFA,IAKE;AAAA,MAJFM,OAIE,QAJFA,OAIE;AAAA,MAHFC,OAGE,QAHFA,OAGE;AAAA,MAFFC,MAEE,QAFFA,MAEE;AAAA,MADFC,iBACE,QADFA,iBACE;AACF,MAAMC,OAAO,GAAGpB,qBAAqB,EAArC;AACA,MAAMW,QAAQ,GAAGL,cAAc,CAACJ,sBAAsB,CAACgB,MAAD,CAAvB,CAA/B;AAEA,MAAMG,YAAY,GAAGtB,WAAW,CAAC,YAAM;AACnC,QAAI,CAACmB,MAAL,EAAa;AACT;AACH;;AACDE,IAAAA,OAAO,CAACE,OAAR,CACI,IAAIrB,uBAAJ,CAA4B;AACxBsB,MAAAA,IAAI,EAAEL,MADkB;AAExBC,MAAAA,iBAAiB,EAAEA;AAFK,KAA5B,CADJ;AAMH,GAV+B,EAU7B,CAACD,MAAD,EAASC,iBAAT,CAV6B,CAAhC;AAYA,MAAMK,YAAY,GAAGzB,WAAW,CAAC,YAAM;AACnC,QAAI,OAAOiB,OAAP,KAAmB,UAAvB,EAAmC;AAC/B,aAAOA,OAAO,EAAd;AACH;;AACDK,IAAAA,YAAY;AACf,GAL+B,EAK7B,CAACH,MAAD,EAASC,iBAAT,CAL6B,CAAhC;AAOA,MAAMM,OAAO,GAAGhB,aAAa,CAACC,IAAD,EAAOC,QAAP,CAA7B;AAEA,MAAMe,UAAU,gBACZ,oBAAC,UAAD;AACI,IAAA,EAAE,EAAEX,EADR;AAEI,IAAA,IAAI,EAAEU,OAFV;AAGI,IAAA,OAAO,EAAED,YAHb;AAII,IAAA,SAAS,EAAEb,QAAQ,IAAIJ;AAJ3B,IADJ;;AASA,MAAIU,OAAJ,EAAa;AACT,wBACI,oBAAC,OAAD;AACI,MAAA,SAAS,EAAE,OADf;AAEI,MAAA,OAAO,eAAE,kCAAOA,OAAP;AAFb,OAGSN,QAAQ,GAAG;AAAEgB,MAAAA,OAAO,EAAE;AAAX,KAAH,GAAwB,EAHzC,GAKKD,UALL,CADJ;AASH;;AAED,SAAOA,UAAP;AACH,CAtDD;;AAwDA,4BAAe5B,KAAK,CAAC8B,IAAN,CAAWd,MAAX,CAAf","sourcesContent":["import React, { useCallback } from \"react\";\nimport { useEventActionHandler } from \"../../hooks/useEventActionHandler\";\nimport { TogglePluginActionEvent } from \"../../recoil/actions\";\nimport { isPluginActiveSelector } from \"../../recoil/modules\";\nimport { css } from \"emotion\";\nimport { IconButton } from \"@webiny/ui/Button\";\nimport { Tooltip } from \"@webiny/ui/Tooltip\";\nimport { useRecoilValue } from \"recoil\";\n\nconst activeStyle = css({\n    \".mdc-icon-button__icon\": {\n        color: \"var(--mdc-theme-primary)\"\n    }\n});\n\nconst getButtonIcon = (icon: Element | Element[], isActive: boolean): Element => {\n    if (Array.isArray(icon)) {\n        return isActive ? icon[0] : icon[1];\n    }\n    return icon;\n};\ntype ActionPropsType = {\n    id?: string;\n    icon: any;\n    onClick?: () => any;\n    tooltip?: string;\n    plugin?: string;\n    /*\n     * If set \"true\", will close all other active plugins of same type.\n     * */\n    closeOtherInGroup?: boolean;\n};\nconst Action: React.FunctionComponent<ActionPropsType> = ({\n    id,\n    icon,\n    onClick,\n    tooltip,\n    plugin,\n    closeOtherInGroup\n}) => {\n    const handler = useEventActionHandler();\n    const isActive = useRecoilValue(isPluginActiveSelector(plugin));\n\n    const togglePlugin = useCallback(() => {\n        if (!plugin) {\n            return;\n        }\n        handler.trigger(\n            new TogglePluginActionEvent({\n                name: plugin,\n                closeOtherInGroup: closeOtherInGroup\n            })\n        );\n    }, [plugin, closeOtherInGroup]);\n\n    const clickHandler = useCallback(() => {\n        if (typeof onClick === \"function\") {\n            return onClick();\n        }\n        togglePlugin();\n    }, [plugin, closeOtherInGroup]);\n\n    const btnIcon = getButtonIcon(icon, isActive);\n\n    const iconButton = (\n        <IconButton\n            id={id}\n            icon={btnIcon}\n            onClick={clickHandler}\n            className={isActive && activeStyle}\n        />\n    );\n\n    if (tooltip) {\n        return (\n            <Tooltip\n                placement={\"right\"}\n                content={<span>{tooltip}</span>}\n                {...(isActive ? { visible: false } : {})}\n            >\n                {iconButton}\n            </Tooltip>\n        );\n    }\n\n    return iconButton;\n};\n\nexport default React.memo(Action);\n"],"file":"Action.js"}