import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useCallback, useEffect, useState, useMemo } from "react";
import * as Styled from "./StyledComponents";
import { activePluginParamsByNameSelector } from "../../../recoil/modules";
import { useEventActionHandler } from "../../../hooks/useEventActionHandler";
import { DeactivatePluginActionEvent, DragEndActionEvent, DragStartActionEvent, DropElementActionEvent } from "../../../recoil/actions";
import Draggable from "../../../components/Draggable";
import { plugins } from "@webiny/plugins";
import { usePageBuilder } from "../../../../hooks/usePageBuilder";
import { useRecoilValue } from "recoil";
import { css } from "emotion";
import { List, ListItem, ListItemMeta } from "@webiny/ui/List";
import { Icon } from "@webiny/ui/Icon";
import { Typography } from "@webiny/ui/Typography";
import { ButtonFloating } from "@webiny/ui/Button";
import { ReactComponent as AddIcon } from "@svgr/webpack!../../../assets/icons/add.svg";
import { useKeyHandler } from "../../../hooks/useKeyHandler";
var ADD_ELEMENT = "pb-editor-toolbar-add-element"; // @ts-ignore

var categoriesList = /*#__PURE__*/css({
  backgroundColor: "var(--mdc-theme-surface)",
  boxShadow: "inset 1px 0px 5px 0px var(--mdc-theme-background)",
  borderTop: "1px solid var(--mdc-theme-background)",
  ".mdc-list-item": {
    width: 150,
    fontWeight: "600 !important",
    borderBottom: "1px solid var(--mdc-theme-background)",
    "&.active": {
      backgroundColor: "var(--mdc-theme-background)",
      color: "var(--mdc-theme-primary)",
      ".mdc-list-item__meta": {
        color: "var(--mdc-theme-primary)"
      }
    }
  }
}, "label:categoriesList;");

var AddElement = function AddElement() {
  var handler = useEventActionHandler();
  var plugin = useRecoilValue(activePluginParamsByNameSelector(ADD_ELEMENT));

  var _ref = plugin || {},
      params = _ref.params;

  var _useKeyHandler = useKeyHandler(),
      removeKeyHandler = _useKeyHandler.removeKeyHandler,
      addKeyHandler = _useKeyHandler.addKeyHandler;

  var dragStart = useCallback(function () {
    handler.trigger(new DragStartActionEvent());
  }, []);
  var dragEnd = useCallback(function () {
    handler.trigger(new DragEndActionEvent());
  }, []);
  var deactivatePlugin = useCallback(function () {
    handler.trigger(new DeactivatePluginActionEvent({
      name: ADD_ELEMENT
    }));
  }, []);
  var dropElement = useCallback(function (args) {
    handler.trigger(new DropElementActionEvent(args));
  }, []);
  var getGroups = useCallback(function () {
    return plugins.byType("pb-editor-page-element-group");
  }, []);
  var getGroupElements = useCallback(function (group) {
    return plugins.byType("pb-editor-page-element").filter(function (el) {
      return el.toolbar && el.toolbar.group === group;
    });
  }, []);

  var _useState = useState(getGroups()[0].name),
      _useState2 = _slicedToArray(_useState, 2),
      group = _useState2[0],
      setGroup = _useState2[1];

  var _usePageBuilder = usePageBuilder(),
      theme = _usePageBuilder.theme;

  var refresh = useCallback(function () {
    setGroup(group);
  }, []);
  var enableDragOverlay = useCallback(function () {
    var el = document.querySelector(".pb-editor");

    if (!el) {
      return;
    }

    el.classList.add("pb-editor-dragging");
  }, []);
  var disableDragOverlay = useCallback(function () {
    var el = document.querySelector(".pb-editor");

    if (!el) {
      return;
    }

    el.classList.remove("pb-editor-dragging");
  }, []);
  var renderDraggable = useCallback(function (element, plugin) {
    var elementType = plugin.elementType;
    return /*#__PURE__*/React.createElement(Draggable, {
      enabled: true,
      key: plugin.name,
      target: plugin.target,
      beginDrag: function beginDrag(props) {
        dragStart();
        setTimeout(deactivatePlugin, 20);
        return {
          type: elementType,
          target: props.target
        };
      },
      endDrag: function endDrag() {
        dragEnd();
      }
    }, function (_ref2) {
      var drag = _ref2.drag;
      return /*#__PURE__*/React.createElement("div", {
        ref: drag
      }, renderOverlay(element, null, "Drag to Add", plugin));
    });
  }, []);
  var renderOverlay = useCallback(function (element) {
    var onClick = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var label = arguments.length > 2 ? arguments[2] : undefined;
    var plugin = arguments.length > 3 ? arguments[3] : undefined;
    return /*#__PURE__*/React.createElement(Styled.ElementPreview, null, /*#__PURE__*/React.createElement(Styled.Overlay, null, /*#__PURE__*/React.createElement(Styled.Backdrop, {
      className: "backdrop"
    }), /*#__PURE__*/React.createElement(Styled.AddBlock, {
      className: "add-block"
    }, /*#__PURE__*/React.createElement(ButtonFloating, {
      "data-testid": "pb-editor-add-element-button-".concat(plugin.elementType),
      onClick: onClick,
      label: label,
      icon: /*#__PURE__*/React.createElement(AddIcon, null),
      onMouseDown: enableDragOverlay,
      onMouseUp: disableDragOverlay
    }))), element);
  }, [enableDragOverlay, disableDragOverlay]);
  var renderClickable = useCallback(function (element, plugin) {
    var item = renderOverlay(element, function () {
      dropElement({
        source: {
          type: plugin.elementType
        },
        target: _objectSpread({}, params)
      });
      deactivatePlugin();
    }, "Click to Add", plugin);
    return /*#__PURE__*/React.cloneElement(item, {
      key: plugin.name
    });
  }, [params, deactivatePlugin, dropElement, renderOverlay]);
  useEffect(function () {
    addKeyHandler("escape", function (e) {
      e.preventDefault();
      deactivatePlugin();
    });
    return function () {
      return removeKeyHandler("escape");
    };
  });
  var emptyViewContent = useMemo(function () {
    var _getGroups$find = getGroups().find(function (pl) {
      return pl.name === group;
    }),
        selectedGroup = _getGroups$find.group;

    return selectedGroup.emptyView;
  }, [group]);
  var groupElements = group ? getGroupElements(group) : [];
  return /*#__PURE__*/React.createElement(Styled.Flex, null, /*#__PURE__*/React.createElement(List, {
    className: categoriesList
  }, getGroups().map(function (plugin) {
    return /*#__PURE__*/React.createElement(ListItem, {
      onClick: function onClick() {
        return setGroup(plugin.name);
      },
      key: plugin.name,
      className: plugin.name === group && "active"
    }, plugin.group.title, plugin.group.icon && /*#__PURE__*/React.createElement(ListItemMeta, null, /*#__PURE__*/React.createElement(Icon, {
      icon: plugin.group.icon
    })));
  })), /*#__PURE__*/React.createElement(Styled.Elements, null, groupElements.length ? groupElements.map(function (plugin) {
    return (params ? renderClickable : renderDraggable)( /*#__PURE__*/React.createElement("div", {
      "data-role": "draggable"
    }, /*#__PURE__*/React.createElement(Styled.ElementBox, null, /*#__PURE__*/React.createElement(Styled.ElementTitle, null, typeof plugin.toolbar.title === "function" ? plugin.toolbar.title({
      refresh: refresh
    }) : /*#__PURE__*/React.createElement(Typography, {
      use: "overline"
    }, plugin.toolbar.title)), /*#__PURE__*/React.createElement(Styled.ElementPreviewCanvas, null, plugin.toolbar.preview({
      theme: theme
    })))), plugin);
  }) : emptyViewContent));
};

export default /*#__PURE__*/React.memo(AddElement);
//# sourceMappingURL=AddElement.js.map