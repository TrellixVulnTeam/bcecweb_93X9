import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

var _templateObject;

import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useState, useEffect, createContext } from "react";
import { Typography } from "@webiny/ui/Typography";
import { Tooltip } from "@webiny/ui/Tooltip";
import { i18n } from "@webiny/app/i18n";
import { useEventActionHandler } from "../../../hooks/useEventActionHandler";
import { NavigatorTitle } from "./StyledComponents";
import { TreeView } from "./TreeView";
import { ReactComponent as UnfoldMoreIcon } from "@svgr/webpack!./assets/unfold_more_24px.svg";
import { ReactComponent as UnfoldLessIcon } from "@svgr/webpack!./assets/unfold_less_24px.svg";
import { UpdateElementTreeActionEvent } from "../../../recoil/actions";
var t = i18n.ns("app-page-builder/editor/plugins/toolbar/navigator");
export var NavigatorContext = /*#__PURE__*/createContext(null);

var Navigator = function Navigator() {
  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      elementTree = _useState2[0],
      setElementTree = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      expandAll = _useState4[0],
      setExpandAll = _useState4[1];

  var _useState5 = useState([]),
      _useState6 = _slicedToArray(_useState5, 2),
      activeElementPath = _useState6[0],
      setActiveElementPath = _useState6[1];

  var eventHandler = useEventActionHandler();

  var refreshElementTree = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var _elementTree;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return eventHandler.getElementTree();

            case 3:
              _elementTree = _context.sent;
              setElementTree(_elementTree);
              _context.next = 9;
              break;

            case 7:
              _context.prev = 7;
              _context.t0 = _context["catch"](0);

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[0, 7]]);
    }));

    return function refreshElementTree() {
      return _ref.apply(this, arguments);
    };
  }(); // Update element tree


  useEffect(function () {
    eventHandler.on(UpdateElementTreeActionEvent, function () {
      refreshElementTree();
      return {};
    });
  }, []); // Get initial element tree.

  useEffect(function () {
    if (elementTree) {
      return;
    } // Load element tree.


    refreshElementTree();
  });
  return /*#__PURE__*/React.createElement(NavigatorContext.Provider, {
    value: {
      refresh: refreshElementTree,
      expandAll: expandAll,
      activeElementPath: activeElementPath,
      setActiveElementPath: setActiveElementPath
    }
  }, /*#__PURE__*/React.createElement(NavigatorTitle, null, /*#__PURE__*/React.createElement(Typography, {
    use: "subtitle1"
  }, "Navigator"), /*#__PURE__*/React.createElement("button", {
    className: "action",
    onClick: function onClick() {
      setExpandAll(!expandAll);
    }
  }, /*#__PURE__*/React.createElement(Tooltip, {
    content: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["{message}"])))({
      message: expandAll ? "collapse all" : "expand all"
    })
  }, expandAll ? /*#__PURE__*/React.createElement(UnfoldLessIcon, null) : /*#__PURE__*/React.createElement(UnfoldMoreIcon, null)))), elementTree && /*#__PURE__*/React.createElement(TreeView, {
    element: elementTree,
    level: 0
  }));
};

export default Navigator;
//# sourceMappingURL=Navigator.js.map