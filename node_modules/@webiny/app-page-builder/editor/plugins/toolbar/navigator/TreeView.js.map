{"version":3,"sources":["../../../../../src/editor/plugins/toolbar/navigator/TreeView.tsx"],"names":["React","useCallback","useContext","useEffect","useRecoilState","useRecoilValue","get","Typography","Icon","activeElementAtom","elementByIdSelector","uiAtom","useVisibilitySetting","ElementTypeContainer","CollapsableList","DragBlockIndicator","BLOCK","useMoveBlock","useSortableList","NavigatorContext","ElementVisibilityAction","elementId","updateVisibility","getHighlightItemProps","dropItemAbove","isOver","elementType","top","bottom","TreeViewItem","element","level","children","index","id","displayMode","activeElement","setActiveElementAtomValue","elementAtomValue","setElementAtomValue","refresh","activeElementPath","setActiveElementPath","move","type","endDrag","dragAndDropRef","ref","handlerId","path","onMouseOver","ev","stopPropagation","isHighlighted","onMouseOut","handleOnClick","elementRef","document","getElementById","scrollIntoView","behavior","block","hidden","contentStyle","opacity","highlightItem","elements","length","includes","TreeView","map","item"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,UAA7B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,QAA/C;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,iBAAT,EAA4BC,mBAA5B,EAAiDC,MAAjD;;AAEA,SAASC,oBAAT;AACA,SAASC,oBAAT;AACA,OAAOC,eAAP;AACA,OAAOC,kBAAP;AACA,SAASC,KAAT,EAAgBC,YAAhB,EAA8BC,eAA9B;AACA,SAASC,gBAAT;;AAEA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,OAA0C;AAAA,MAAvCC,SAAuC,QAAvCA,SAAuC;;AACtE,8BAA6BT,oBAAoB,CAACS,SAAD,CAAjD;AAAA,MAAQC,gBAAR,yBAAQA,gBAAR;;AAEA,sBACI,oBAAC,IAAD;AACI,IAAA,OAAO,EAAE;AAAA,aAAMA,gBAAgB,CAAC,KAAD,CAAtB;AAAA,KADb;AAEI,IAAA,IAAI,eAAE,oBAAC,iBAAD,OAFV;AAGI,IAAA,SAAS,EAAE;AAHf,IADJ;AAOH,CAVD;;AAYA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,QAA4C;AAAA,MAAzCC,aAAyC,SAAzCA,aAAyC;AAAA,MAA1BC,MAA0B,SAA1BA,MAA0B;AAAA,MAAlBC,WAAkB,SAAlBA,WAAkB;;AACtE,MAAI,CAACD,MAAD,IAAWC,WAAW,KAAKV,KAA/B,EAAsC;AAClC,WAAO;AACHW,MAAAA,GAAG,EAAE,KADF;AAEHC,MAAAA,MAAM,EAAE;AAFL,KAAP;AAIH;;AACD,MAAIJ,aAAJ,EAAmB;AACf,WAAO;AACHG,MAAAA,GAAG,EAAE,IADF;AAEHC,MAAAA,MAAM,EAAE;AAFL,KAAP;AAIH;;AACD,SAAO;AACHD,IAAAA,GAAG,EAAE,KADF;AAEHC,IAAAA,MAAM,EAAE;AAFL,GAAP;AAIH,CAjBD;;AAmBA,IAAMC,YAAY,GAAG,SAAfA,YAAe,QAAyC;AAAA,MAAtCC,OAAsC,SAAtCA,OAAsC;AAAA,MAA7BC,KAA6B,SAA7BA,KAA6B;AAAA,MAAtBC,QAAsB,SAAtBA,QAAsB;AAAA,MAAZC,KAAY,SAAZA,KAAY;AAC1D,MAAMZ,SAAS,GAAGS,OAAO,CAACI,EAA1B;;AACA,wBAAwB7B,cAAc,CAACM,MAAD,CAAtC;AAAA,MAAQwB,WAAR,mBAAQA,WAAR;;AACA,wBAAmD/B,cAAc,CAACK,iBAAD,CAAjE;AAAA;AAAA,MAAO2B,aAAP;AAAA,MAAsBC,yBAAtB;;AACA,yBAAgDjC,cAAc,CAACM,mBAAmB,CAACW,SAAD,CAApB,CAA9D;AAAA;AAAA,MAAOiB,gBAAP;AAAA,MAAyBC,mBAAzB;;AACA,oBAA6DrC,UAAU,CAACiB,gBAAD,CAAvE;AAAA,MAAQqB,OAAR,eAAQA,OAAR;AAAA,MAAiBC,iBAAjB,eAAiBA,iBAAjB;AAAA,MAAoCC,oBAApC,eAAoCA,oBAApC;;AACA,sBAAiBzB,YAAY,CAACI,SAAD,CAA7B;AAAA,MAAQsB,IAAR,iBAAQA,IAAR,CAN0D,CAO1D;;;AACA,yBAKIzB,eAAe,CAAC;AAChByB,IAAAA,IAAI,EAAJA,IADgB;AAEhBT,IAAAA,EAAE,EAAEb,SAFY;AAGhBY,IAAAA,KAAK,EAALA,KAHgB;AAIhBW,IAAAA,IAAI,EAAEd,OAAO,CAACc,IAJE;AAKhBC,IAAAA,OAAO,EAAE,mBAAM;AACXL,MAAAA,OAAO;AACV;AAPe,GAAD,CALnB;AAAA,MACSM,cADT,oBACIC,GADJ;AAAA,MAEIC,SAFJ,oBAEIA,SAFJ;AAAA,MAGIvB,MAHJ,oBAGIA,MAHJ;AAAA,MAIID,aAJJ,oBAIIA,aAJJ,CAR0D,CAsB1D;;;AACArB,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIiC,aAAa,KAAKf,SAAtB,EAAiC;AAC7BqB,MAAAA,oBAAoB,CAACZ,OAAO,CAACmB,IAAT,CAApB;AACH;AACJ,GAJQ,EAIN,CAACb,aAAD,EAAgBf,SAAhB,CAJM,CAAT;AAMA,MAAM6B,WAAW,GAAGjD,WAAW,CAC3B,UAACkD,EAAD,EAAc;AACV,QAAI,CAACrB,OAAD,IAAYA,OAAO,CAACc,IAAR,KAAiB,UAAjC,EAA6C;AACzC;AACH;;AACDO,IAAAA,EAAE,CAACC,eAAH;;AACA,QAAId,gBAAgB,IAAIA,gBAAgB,CAACe,aAAzC,EAAwD;AACpD;AACH;;AACDd,IAAAA,mBAAmB,CAAC;AAAEc,MAAAA,aAAa,EAAE;AAAjB,KAAD,CAAnB;AACH,GAV0B,EAW3B,CAAChC,SAAD,CAX2B,CAA/B;AAcA,MAAMiC,UAAU,GAAGrD,WAAW,CAAC,YAAM;AACjC,QAAI,CAAC6B,OAAD,IAAYA,OAAO,CAACc,IAAR,KAAiB,UAAjC,EAA6C;AACzC;AACH;;AACDL,IAAAA,mBAAmB,CAAC;AAAEc,MAAAA,aAAa,EAAE;AAAjB,KAAD,CAAnB;AACH,GAL6B,EAK3B,CAAChC,SAAD,CAL2B,CAA9B;AAOA,MAAMkC,aAAa,GAAGtD,WAAW,CAAC,YAAM;AACpCoC,IAAAA,yBAAyB,CAAChB,SAAD,CAAzB;AAEA,QAAMmC,UAAU,GAAGC,QAAQ,CAACC,cAAT,CAAwBrC,SAAxB,CAAnB;;AACA,QAAImC,UAAJ,EAAgB;AACZA,MAAAA,UAAU,CAACG,cAAX,CAA0B;AAAEC,QAAAA,QAAQ,EAAE,QAAZ;AAAsBC,QAAAA,KAAK,EAAE;AAA7B,OAA1B;AACH;AACJ,GAPgC,EAO9B,CAACxC,SAAD,CAP8B,CAAjC;;AASA,MAAI,CAACiB,gBAAL,EAAuB;AACnB,WAAO,IAAP;AACH;;AAED,MAAMwB,MAAM,GAAGxD,GAAG,CAACgC,gBAAD,qCAA+CH,WAA/C,cAAqE,KAArE,CAAlB;AACA,MAAM4B,YAAY,GAAGtC,MAAM,IAAIK,OAAO,CAACc,IAAR,KAAiB5B,KAA3B,GAAmC;AAAEgD,IAAAA,OAAO,EAAE;AAAX,GAAnC,GAAsD;AAAEA,IAAAA,OAAO,EAAE;AAAX,GAA3E;AACA,MAAMC,aAAa,GAAG1C,qBAAqB,CAAC;AACxCE,IAAAA,MAAM,EAANA,MADwC;AAExCD,IAAAA,aAAa,EAAbA,aAFwC;AAGxCE,IAAAA,WAAW,EAAEI,OAAO,CAACc;AAHmB,GAAD,CAA3C;AAMA,sBACI,oBAAC,eAAD;AACI,IAAA,KAAK,EAAEb,KADX;AAEI,IAAA,aAAa,EAAEkC,aAFnB;AAGI,IAAA,MAAM,eACF,oBAAC,oBAAD;AACI,MAAA,WAAW,EAAEf,WADjB;AAEI,MAAA,UAAU,EAAEI,UAFhB;AAGI,MAAA,OAAO,EAAEC,aAHb;AAII,MAAA,GAAG,EAAET,cAJT;AAKI,yBAAiBE;AALrB,oBAOI,oBAAC,UAAD;AAAY,MAAA,GAAG,EAAE,WAAjB;AAA8B,MAAA,SAAS,EAAE;AAAzC,OACKlB,OAAO,CAACc,IADb,CAPJ,EAUKkB,MAAM,gBAAG,oBAAC,uBAAD;AAAyB,MAAA,SAAS,EAAEzC;AAApC,MAAH,GAAuD,IAVlE,eAWI,oBAAC,kBAAD;AAAoB,MAAA,IAAI,EAAES,OAAO,CAACc;AAAlC,MAXJ,CAJR;AAkBI,IAAA,aAAa,EAAEd,OAAO,CAACoC,QAAR,CAAiBC,MAAjB,IAA2B,CAlB9C;AAmBI,IAAA,MAAM,EAAE/B,aAAa,KAAKf,SAnB9B;AAoBI,IAAA,YAAY,EAAEoB,iBAAiB,CAAC2B,QAAlB,CAA2B/C,SAA3B,CApBlB;AAqBI,IAAA,KAAK,EAAE0C;AArBX,KAuBK/B,QAvBL,CADJ;AA2BH,CAlGD;;AAyGA,OAAO,IAAMqC,QAAQ,GAAG,SAAXA,QAAW,QAAuC;AAAA,MAApCvC,OAAoC,SAApCA,OAAoC;AAAA,MAA3BC,KAA2B,SAA3BA,KAA2B;;AAC3D,MAAI,CAACD,OAAO,CAACI,EAAT,IAAeJ,OAAO,CAACoC,QAAR,CAAiBC,MAAjB,KAA4B,CAA/C,EAAkD;AAC9C,WAAO,IAAP;AACH;;AAED,sBACI,0CACKrC,OAAO,CAACoC,QAAR,CAAiBI,GAAjB,CAAqB,UAACC,IAAD,EAAOtC,KAAP;AAAA,wBAClB,oBAAC,YAAD;AAAc,MAAA,GAAG,EAAEsC,IAAI,CAACrC,EAAxB;AAA4B,MAAA,OAAO,EAAEqC,IAArC;AAA2C,MAAA,KAAK,EAAExC,KAAlD;AAAyD,MAAA,KAAK,EAAEE;AAAhE,oBACI,oBAAC,QAAD;AAAU,MAAA,OAAO,EAAEsC,IAAnB;AAAyB,MAAA,KAAK,EAAExC,KAAK,GAAG;AAAxC,MADJ,CADkB;AAAA,GAArB,CADL,CADJ;AASH,CAdM","sourcesContent":["import React, { useCallback, useContext, useEffect } from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport get from \"lodash/get\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { Icon } from \"@webiny/ui/Icon\";\nimport { activeElementAtom, elementByIdSelector, uiAtom } from \"~/editor/recoil/modules\";\nimport { ReactComponent as VisibilityOffIcon } from \"~/editor/assets/icons/visibility_off_24px.svg\";\nimport { useVisibilitySetting } from \"~/editor/plugins/elementSettings/visibility/VisibilitySettings\";\nimport { ElementTypeContainer } from \"./StyledComponents\";\nimport CollapsableList from \"./CollapsableList\";\nimport DragBlockIndicator from \"./DragBlockIndicator\";\nimport { BLOCK, useMoveBlock, useSortableList } from \"./navigatorHooks\";\nimport { NavigatorContext } from \"./Navigator\";\n\nconst ElementVisibilityAction = ({ elementId }: { elementId: string }) => {\n    const { updateVisibility } = useVisibilitySetting(elementId);\n\n    return (\n        <Icon\n            onClick={() => updateVisibility(false)}\n            icon={<VisibilityOffIcon />}\n            className={\"collapsable__header-icon\"}\n        />\n    );\n};\n\nconst getHighlightItemProps = ({ dropItemAbove, isOver, elementType }) => {\n    if (!isOver || elementType !== BLOCK) {\n        return {\n            top: false,\n            bottom: false\n        };\n    }\n    if (dropItemAbove) {\n        return {\n            top: true,\n            bottom: false\n        };\n    }\n    return {\n        top: false,\n        bottom: true\n    };\n};\n\nconst TreeViewItem = ({ element, level, children, index }) => {\n    const elementId = element.id;\n    const { displayMode } = useRecoilValue(uiAtom);\n    const [activeElement, setActiveElementAtomValue] = useRecoilState(activeElementAtom);\n    const [elementAtomValue, setElementAtomValue] = useRecoilState(elementByIdSelector(elementId));\n    const { refresh, activeElementPath, setActiveElementPath } = useContext(NavigatorContext);\n    const { move } = useMoveBlock(elementId);\n    // Use \"Drag&Drop\"\n    const {\n        ref: dragAndDropRef,\n        handlerId,\n        isOver,\n        dropItemAbove\n    } = useSortableList({\n        move,\n        id: elementId,\n        index,\n        type: element.type,\n        endDrag: () => {\n            refresh();\n        }\n    });\n    // Set active element path in context.\n    useEffect(() => {\n        if (activeElement === elementId) {\n            setActiveElementPath(element.path);\n        }\n    }, [activeElement, elementId]);\n\n    const onMouseOver = useCallback(\n        (ev): void => {\n            if (!element || element.type === \"document\") {\n                return;\n            }\n            ev.stopPropagation();\n            if (elementAtomValue && elementAtomValue.isHighlighted) {\n                return;\n            }\n            setElementAtomValue({ isHighlighted: true } as any);\n        },\n        [elementId]\n    );\n\n    const onMouseOut = useCallback(() => {\n        if (!element || element.type === \"document\") {\n            return;\n        }\n        setElementAtomValue({ isHighlighted: false } as any);\n    }, [elementId]);\n\n    const handleOnClick = useCallback(() => {\n        setActiveElementAtomValue(elementId);\n\n        const elementRef = document.getElementById(elementId);\n        if (elementRef) {\n            elementRef.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\n        }\n    }, [elementId]);\n\n    if (!elementAtomValue) {\n        return null;\n    }\n\n    const hidden = get(elementAtomValue, `data.settings.visibility.${displayMode}.hidden`, false);\n    const contentStyle = isOver && element.type !== BLOCK ? { opacity: 0.5 } : { opacity: 1 };\n    const highlightItem = getHighlightItemProps({\n        isOver,\n        dropItemAbove,\n        elementType: element.type\n    });\n\n    return (\n        <CollapsableList\n            level={level}\n            highlightItem={highlightItem}\n            header={\n                <ElementTypeContainer\n                    onMouseOver={onMouseOver}\n                    onMouseOut={onMouseOut}\n                    onClick={handleOnClick}\n                    ref={dragAndDropRef}\n                    data-handler-id={handlerId}\n                >\n                    <Typography use={\"subtitle2\"} className={\"title\"}>\n                        {element.type}\n                    </Typography>\n                    {hidden ? <ElementVisibilityAction elementId={elementId} /> : null}\n                    <DragBlockIndicator type={element.type} />\n                </ElementTypeContainer>\n            }\n            disableAction={element.elements.length <= 0}\n            active={activeElement === elementId}\n            inActivePath={activeElementPath.includes(elementId)}\n            style={contentStyle}\n        >\n            {children}\n        </CollapsableList>\n    );\n};\n\ntype TreeViewProps = {\n    element: { id: string; type: string; elements: any[] };\n    level: number;\n};\n\nexport const TreeView = ({ element, level }: TreeViewProps) => {\n    if (!element.id || element.elements.length === 0) {\n        return null;\n    }\n\n    return (\n        <>\n            {element.elements.map((item, index) => (\n                <TreeViewItem key={item.id} element={item} level={level} index={index}>\n                    <TreeView element={item} level={level + 1} />\n                </TreeViewItem>\n            ))}\n        </>\n    );\n};\n"],"file":"TreeView.js"}