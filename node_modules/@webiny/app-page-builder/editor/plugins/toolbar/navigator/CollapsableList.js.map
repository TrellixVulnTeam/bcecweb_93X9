{"version":3,"sources":["../../../../../src/editor/plugins/toolbar/navigator/CollapsableList.tsx"],"names":["React","useState","useContext","useEffect","classNames","EmptyBlock","Collapsable","ArrowRight","NavigatorContext","CollapsableList","children","header","level","disableAction","active","style","headerStyle","inActivePath","highlightItem","isOpen","setOpen","expandAll","list","Array","from","map","_","i","collapsed","disabled","Children","content","cloneElement","className"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAqE,OAArE;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,UAAlC;AACA,SAASC,gBAAT;;AAcA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,OAUI;AAAA,MATxBC,QASwB,QATxBA,QASwB;AAAA,MARxBC,MAQwB,QARxBA,MAQwB;AAAA,MAPxBC,KAOwB,QAPxBA,KAOwB;AAAA,MANxBC,aAMwB,QANxBA,aAMwB;AAAA,MALxBC,MAKwB,QALxBA,MAKwB;AAAA,MAJxBC,KAIwB,QAJxBA,KAIwB;AAAA,MAHxBC,WAGwB,QAHxBA,WAGwB;AAAA,MAFxBC,YAEwB,QAFxBA,YAEwB;AAAA,MADxBC,aACwB,QADxBA,aACwB;;AACxB,kBAA0BjB,QAAQ,CAAC,IAAD,CAAlC;AAAA;AAAA,MAAOkB,MAAP;AAAA,MAAeC,OAAf;;AACA,oBAAsBlB,UAAU,CAACM,gBAAD,CAAhC;AAAA,MAAQa,SAAR,eAAQA,SAAR;;AACA,MAAMC,IAAI,GAAGC,KAAK,CAACC,IAAN,CAAW,IAAID,KAAJ,CAAUX,KAAV,CAAX,EAA6Ba,GAA7B,CAAiC,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUA,CAAV;AAAA,GAAjC,CAAb;AAEAxB,EAAAA,SAAS,CAAC,YAAM;AACZiB,IAAAA,OAAO,CAACC,SAAD,CAAP;AACH,GAFQ,EAEN,CAACA,SAAD,CAFM,CAAT,CALwB,CAQxB;;AACAlB,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIc,YAAJ,EAAkB;AACdG,MAAAA,OAAO,CAAC,IAAD,CAAP;AACH;AACJ,GAJQ,EAIN,CAACH,YAAD,CAJM,CAAT;AAMA,sBACI,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAC,aAAvB;AAAqC,IAAA,KAAK,EAAEF,KAA5C;AAAmD,IAAA,aAAa,EAAEG;AAAlE,kBACI;AACI,IAAA,SAAS,EAAEd,UAAU,CAAC,qBAAD,EAAwB;AACzCU,MAAAA,MAAM,EAAEA,MADiC;AAEzCc,MAAAA,SAAS,EAAE,CAACT;AAF6B,KAAxB,CADzB;AAKI,IAAA,KAAK,EAAEH;AALX,KAOKM,IAAI,CAACG,GAAL,CAAS,UAAAE,CAAC;AAAA,wBACP,oBAAC,UAAD;AAAY,MAAA,GAAG,EAAEA;AAAjB,MADO;AAAA,GAAV,CAPL,eAUI;AACI,IAAA,SAAS,EAAEvB,UAAU,+BAA+B;AAChDyB,MAAAA,QAAQ,EAAEhB;AADsC,KAA/B,CADzB;AAII,IAAA,OAAO,EAAE;AAAA,aAAMO,OAAO,CAAC,CAACD,MAAF,CAAb;AAAA;AAJb,kBAMI,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAEf,UAAU,qBAAI,MAAJ,EAAae,MAAb;AAAjC,IANJ,CAVJ,EAkBKR,MAlBL,CADJ,eAqBI;AAAK,IAAA,SAAS,iCAA0BQ,MAAM,GAAG,EAAH,GAAQ,WAAxC;AAAd,KACKnB,KAAK,CAAC8B,QAAN,CAAeL,GAAf,CAAmBf,QAAnB,EAA6B,UAAAqB,OAAO;AAAA,wBACjC/B,KAAK,CAACgC,YAAN,CAAmBD,OAAnB,EAA4B;AACxBE,MAAAA,SAAS,EAAE;AADa,KAA5B,CADiC;AAAA,GAApC,CADL,CArBJ,CADJ;AA+BH,CAxDD;;AA0DA,eAAexB,eAAf","sourcesContent":["import React, { useState, useContext, useEffect, ReactElement } from \"react\";\nimport classNames from \"classnames\";\nimport { EmptyBlock, Collapsable, ArrowRight, HighlightItem } from \"./StyledComponents\";\nimport { NavigatorContext } from \"./Navigator\";\n\ntype CollapsableListProps = {\n    children: ReactElement | ReactElement[];\n    header: ReactElement;\n    level: number;\n    disableAction: boolean;\n    active: boolean;\n    style?: React.CSSProperties;\n    headerStyle?: React.CSSProperties;\n    inActivePath: boolean;\n    highlightItem: HighlightItem;\n};\n\nconst CollapsableList = ({\n    children,\n    header,\n    level,\n    disableAction,\n    active,\n    style,\n    headerStyle,\n    inActivePath,\n    highlightItem\n}: CollapsableListProps) => {\n    const [isOpen, setOpen] = useState(true);\n    const { expandAll } = useContext(NavigatorContext);\n    const list = Array.from(new Array(level)).map((_, i) => i);\n\n    useEffect(() => {\n        setOpen(expandAll);\n    }, [expandAll]);\n    // Open list item if it's in active path\n    useEffect(() => {\n        if (inActivePath) {\n            setOpen(true);\n        }\n    }, [inActivePath]);\n\n    return (\n        <Collapsable className=\"collapsable\" style={style} highlightItem={highlightItem}>\n            <div\n                className={classNames(\"collapsable__header\", {\n                    active: active,\n                    collapsed: !isOpen\n                })}\n                style={headerStyle}\n            >\n                {list.map(i => (\n                    <EmptyBlock key={i} />\n                ))}\n                <button\n                    className={classNames(`collapsable__header-action`, {\n                        disabled: disableAction\n                    })}\n                    onClick={() => setOpen(!isOpen)}\n                >\n                    <ArrowRight className={classNames({ [\"open\"]: isOpen })} />\n                </button>\n                {header}\n            </div>\n            <div className={`collapsable__content ${isOpen ? \"\" : \"collapsed\"}`}>\n                {React.Children.map(children, content =>\n                    React.cloneElement(content, {\n                        className: \"collapsable__content-item\"\n                    })\n                )}\n            </div>\n        </Collapsable>\n    );\n};\n\nexport default CollapsableList;\n"],"file":"CollapsableList.js"}