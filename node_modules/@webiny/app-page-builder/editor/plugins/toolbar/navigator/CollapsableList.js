import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useState, useContext, useEffect } from "react";
import classNames from "classnames";
import { EmptyBlock, Collapsable, ArrowRight } from "./StyledComponents";
import { NavigatorContext } from "./Navigator";

var CollapsableList = function CollapsableList(_ref) {
  var children = _ref.children,
      header = _ref.header,
      level = _ref.level,
      disableAction = _ref.disableAction,
      active = _ref.active,
      style = _ref.style,
      headerStyle = _ref.headerStyle,
      inActivePath = _ref.inActivePath,
      highlightItem = _ref.highlightItem;

  var _useState = useState(true),
      _useState2 = _slicedToArray(_useState, 2),
      isOpen = _useState2[0],
      setOpen = _useState2[1];

  var _useContext = useContext(NavigatorContext),
      expandAll = _useContext.expandAll;

  var list = Array.from(new Array(level)).map(function (_, i) {
    return i;
  });
  useEffect(function () {
    setOpen(expandAll);
  }, [expandAll]); // Open list item if it's in active path

  useEffect(function () {
    if (inActivePath) {
      setOpen(true);
    }
  }, [inActivePath]);
  return /*#__PURE__*/React.createElement(Collapsable, {
    className: "collapsable",
    style: style,
    highlightItem: highlightItem
  }, /*#__PURE__*/React.createElement("div", {
    className: classNames("collapsable__header", {
      active: active,
      collapsed: !isOpen
    }),
    style: headerStyle
  }, list.map(function (i) {
    return /*#__PURE__*/React.createElement(EmptyBlock, {
      key: i
    });
  }), /*#__PURE__*/React.createElement("button", {
    className: classNames("collapsable__header-action", {
      disabled: disableAction
    }),
    onClick: function onClick() {
      return setOpen(!isOpen);
    }
  }, /*#__PURE__*/React.createElement(ArrowRight, {
    className: classNames(_defineProperty({}, "open", isOpen))
  })), header), /*#__PURE__*/React.createElement("div", {
    className: "collapsable__content ".concat(isOpen ? "" : "collapsed")
  }, React.Children.map(children, function (content) {
    return /*#__PURE__*/React.cloneElement(content, {
      className: "collapsable__content-item"
    });
  })));
};

export default CollapsableList;
//# sourceMappingURL=CollapsableList.js.map