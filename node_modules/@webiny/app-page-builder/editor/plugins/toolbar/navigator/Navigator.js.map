{"version":3,"sources":["../../../../../src/editor/plugins/toolbar/navigator/Navigator.tsx"],"names":["React","useState","useEffect","createContext","Typography","Tooltip","i18n","useEventActionHandler","NavigatorTitle","TreeView","UpdateElementTreeActionEvent","t","ns","NavigatorContext","Navigator","elementTree","setElementTree","expandAll","setExpandAll","activeElementPath","setActiveElementPath","eventHandler","refreshElementTree","getElementTree","on","refresh","message"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,aAArC,QAA0D,OAA1D;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,qBAAT;AACA,SAASC,cAAT;AACA,SAASC,QAAT;;;AAGA,SAASC,4BAAT;AAEA,IAAMC,CAAC,GAAGL,IAAI,CAACM,EAAL,CAAQ,mDAAR,CAAV;AAEA,OAAO,IAAMC,gBAAgB,gBAAGV,aAAa,CAAC,IAAD,CAAtC;;AAEP,IAAMW,SAAS,GAAG,SAAZA,SAAY,GAAM;AACpB,kBAAsCb,QAAQ,CAAC,IAAD,CAA9C;AAAA;AAAA,MAAOc,WAAP;AAAA,MAAoBC,cAApB;;AACA,mBAAkCf,QAAQ,CAAC,KAAD,CAA1C;AAAA;AAAA,MAAOgB,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAAkDjB,QAAQ,CAAC,EAAD,CAA1D;AAAA;AAAA,MAAOkB,iBAAP;AAAA,MAA0BC,oBAA1B;;AACA,MAAMC,YAAY,GAAGd,qBAAqB,EAA1C;;AAEA,MAAMe,kBAAkB;AAAA,wEAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEOD,YAAY,CAACE,cAAb,EAFP;;AAAA;AAEbR,cAAAA,YAFa;AAGnBC,cAAAA,cAAc,CAACD,YAAD,CAAd;AAHmB;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAlBO,kBAAkB;AAAA;AAAA;AAAA,KAAxB,CANoB,CAYpB;;;AACApB,EAAAA,SAAS,CAAC,YAAM;AACZmB,IAAAA,YAAY,CAACG,EAAb,CAAgBd,4BAAhB,EAA8C,YAAM;AAChDY,MAAAA,kBAAkB;AAClB,aAAO,EAAP;AACH,KAHD;AAIH,GALQ,EAKN,EALM,CAAT,CAboB,CAoBpB;;AACApB,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIa,WAAJ,EAAiB;AACb;AACH,KAHW,CAIZ;;;AACAO,IAAAA,kBAAkB;AACrB,GANQ,CAAT;AAQA,sBACI,oBAAC,gBAAD,CAAkB,QAAlB;AACI,IAAA,KAAK,EAAE;AACHG,MAAAA,OAAO,EAAEH,kBADN;AAEHL,MAAAA,SAAS,EAATA,SAFG;AAGHE,MAAAA,iBAAiB,EAAjBA,iBAHG;AAIHC,MAAAA,oBAAoB,EAApBA;AAJG;AADX,kBAQI,oBAAC,cAAD,qBACI,oBAAC,UAAD;AAAY,IAAA,GAAG,EAAE;AAAjB,iBADJ,eAEI;AACI,IAAA,SAAS,EAAE,QADf;AAEI,IAAA,OAAO,EAAE,mBAAM;AACXF,MAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACH;AAJL,kBAMI,oBAAC,OAAD;AACI,IAAA,OAAO,EAAEN,CAAC,8EAAD,CAAa;AAClBe,MAAAA,OAAO,EAAET,SAAS,GAAG,cAAH,GAAoB;AADpB,KAAb;AADb,KAKKA,SAAS,gBAAG,oBAAC,cAAD,OAAH,gBAAwB,oBAAC,cAAD,OALtC,CANJ,CAFJ,CARJ,EAyBKF,WAAW,iBAAI,oBAAC,QAAD;AAAU,IAAA,OAAO,EAAEA,WAAnB;AAAgC,IAAA,KAAK,EAAE;AAAvC,IAzBpB,CADJ;AA6BH,CA1DD;;AA4DA,eAAeD,SAAf","sourcesContent":["import React, { useState, useEffect, createContext } from \"react\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { Tooltip } from \"@webiny/ui/Tooltip\";\nimport { i18n } from \"@webiny/app/i18n\";\nimport { useEventActionHandler } from \"~/editor/hooks/useEventActionHandler\";\nimport { NavigatorTitle } from \"./StyledComponents\";\nimport { TreeView } from \"./TreeView\";\nimport { ReactComponent as UnfoldMoreIcon } from \"./assets/unfold_more_24px.svg\";\nimport { ReactComponent as UnfoldLessIcon } from \"./assets/unfold_less_24px.svg\";\nimport { UpdateElementTreeActionEvent } from \"~/editor/recoil/actions\";\n\nconst t = i18n.ns(\"app-page-builder/editor/plugins/toolbar/navigator\");\n\nexport const NavigatorContext = createContext(null);\n\nconst Navigator = () => {\n    const [elementTree, setElementTree] = useState(null);\n    const [expandAll, setExpandAll] = useState(false);\n    const [activeElementPath, setActiveElementPath] = useState([]);\n    const eventHandler = useEventActionHandler();\n\n    const refreshElementTree = async () => {\n        try {\n            const elementTree = await eventHandler.getElementTree();\n            setElementTree(elementTree);\n        } catch (e) {}\n    };\n    // Update element tree\n    useEffect(() => {\n        eventHandler.on(UpdateElementTreeActionEvent, () => {\n            refreshElementTree();\n            return {};\n        });\n    }, []);\n\n    // Get initial element tree.\n    useEffect(() => {\n        if (elementTree) {\n            return;\n        }\n        // Load element tree.\n        refreshElementTree();\n    });\n\n    return (\n        <NavigatorContext.Provider\n            value={{\n                refresh: refreshElementTree,\n                expandAll,\n                activeElementPath,\n                setActiveElementPath\n            }}\n        >\n            <NavigatorTitle>\n                <Typography use={\"subtitle1\"}>Navigator</Typography>\n                <button\n                    className={\"action\"}\n                    onClick={() => {\n                        setExpandAll(!expandAll);\n                    }}\n                >\n                    <Tooltip\n                        content={t`{message}`({\n                            message: expandAll ? \"collapse all\" : \"expand all\"\n                        })}\n                    >\n                        {expandAll ? <UnfoldLessIcon /> : <UnfoldMoreIcon />}\n                    </Tooltip>\n                </button>\n            </NavigatorTitle>\n            {elementTree && <TreeView element={elementTree} level={0} />}\n        </NavigatorContext.Provider>\n    );\n};\n\nexport default Navigator;\n"],"file":"Navigator.js"}