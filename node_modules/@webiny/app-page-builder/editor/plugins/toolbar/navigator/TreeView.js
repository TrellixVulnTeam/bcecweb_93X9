import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useCallback, useContext, useEffect } from "react";
import { useRecoilState, useRecoilValue } from "recoil";
import get from "lodash/get";
import { Typography } from "@webiny/ui/Typography";
import { Icon } from "@webiny/ui/Icon";
import { activeElementAtom, elementByIdSelector, uiAtom } from "../../../recoil/modules";
import { ReactComponent as VisibilityOffIcon } from "@svgr/webpack!../../../assets/icons/visibility_off_24px.svg";
import { useVisibilitySetting } from "../../elementSettings/visibility/VisibilitySettings";
import { ElementTypeContainer } from "./StyledComponents";
import CollapsableList from "./CollapsableList";
import DragBlockIndicator from "./DragBlockIndicator";
import { BLOCK, useMoveBlock, useSortableList } from "./navigatorHooks";
import { NavigatorContext } from "./Navigator";

var ElementVisibilityAction = function ElementVisibilityAction(_ref) {
  var elementId = _ref.elementId;

  var _useVisibilitySetting = useVisibilitySetting(elementId),
      updateVisibility = _useVisibilitySetting.updateVisibility;

  return /*#__PURE__*/React.createElement(Icon, {
    onClick: function onClick() {
      return updateVisibility(false);
    },
    icon: /*#__PURE__*/React.createElement(VisibilityOffIcon, null),
    className: "collapsable__header-icon"
  });
};

var getHighlightItemProps = function getHighlightItemProps(_ref2) {
  var dropItemAbove = _ref2.dropItemAbove,
      isOver = _ref2.isOver,
      elementType = _ref2.elementType;

  if (!isOver || elementType !== BLOCK) {
    return {
      top: false,
      bottom: false
    };
  }

  if (dropItemAbove) {
    return {
      top: true,
      bottom: false
    };
  }

  return {
    top: false,
    bottom: true
  };
};

var TreeViewItem = function TreeViewItem(_ref3) {
  var element = _ref3.element,
      level = _ref3.level,
      children = _ref3.children,
      index = _ref3.index;
  var elementId = element.id;

  var _useRecoilValue = useRecoilValue(uiAtom),
      displayMode = _useRecoilValue.displayMode;

  var _useRecoilState = useRecoilState(activeElementAtom),
      _useRecoilState2 = _slicedToArray(_useRecoilState, 2),
      activeElement = _useRecoilState2[0],
      setActiveElementAtomValue = _useRecoilState2[1];

  var _useRecoilState3 = useRecoilState(elementByIdSelector(elementId)),
      _useRecoilState4 = _slicedToArray(_useRecoilState3, 2),
      elementAtomValue = _useRecoilState4[0],
      setElementAtomValue = _useRecoilState4[1];

  var _useContext = useContext(NavigatorContext),
      refresh = _useContext.refresh,
      activeElementPath = _useContext.activeElementPath,
      setActiveElementPath = _useContext.setActiveElementPath;

  var _useMoveBlock = useMoveBlock(elementId),
      move = _useMoveBlock.move; // Use "Drag&Drop"


  var _useSortableList = useSortableList({
    move: move,
    id: elementId,
    index: index,
    type: element.type,
    endDrag: function endDrag() {
      refresh();
    }
  }),
      dragAndDropRef = _useSortableList.ref,
      handlerId = _useSortableList.handlerId,
      isOver = _useSortableList.isOver,
      dropItemAbove = _useSortableList.dropItemAbove; // Set active element path in context.


  useEffect(function () {
    if (activeElement === elementId) {
      setActiveElementPath(element.path);
    }
  }, [activeElement, elementId]);
  var onMouseOver = useCallback(function (ev) {
    if (!element || element.type === "document") {
      return;
    }

    ev.stopPropagation();

    if (elementAtomValue && elementAtomValue.isHighlighted) {
      return;
    }

    setElementAtomValue({
      isHighlighted: true
    });
  }, [elementId]);
  var onMouseOut = useCallback(function () {
    if (!element || element.type === "document") {
      return;
    }

    setElementAtomValue({
      isHighlighted: false
    });
  }, [elementId]);
  var handleOnClick = useCallback(function () {
    setActiveElementAtomValue(elementId);
    var elementRef = document.getElementById(elementId);

    if (elementRef) {
      elementRef.scrollIntoView({
        behavior: "smooth",
        block: "center"
      });
    }
  }, [elementId]);

  if (!elementAtomValue) {
    return null;
  }

  var hidden = get(elementAtomValue, "data.settings.visibility.".concat(displayMode, ".hidden"), false);
  var contentStyle = isOver && element.type !== BLOCK ? {
    opacity: 0.5
  } : {
    opacity: 1
  };
  var highlightItem = getHighlightItemProps({
    isOver: isOver,
    dropItemAbove: dropItemAbove,
    elementType: element.type
  });
  return /*#__PURE__*/React.createElement(CollapsableList, {
    level: level,
    highlightItem: highlightItem,
    header: /*#__PURE__*/React.createElement(ElementTypeContainer, {
      onMouseOver: onMouseOver,
      onMouseOut: onMouseOut,
      onClick: handleOnClick,
      ref: dragAndDropRef,
      "data-handler-id": handlerId
    }, /*#__PURE__*/React.createElement(Typography, {
      use: "subtitle2",
      className: "title"
    }, element.type), hidden ? /*#__PURE__*/React.createElement(ElementVisibilityAction, {
      elementId: elementId
    }) : null, /*#__PURE__*/React.createElement(DragBlockIndicator, {
      type: element.type
    })),
    disableAction: element.elements.length <= 0,
    active: activeElement === elementId,
    inActivePath: activeElementPath.includes(elementId),
    style: contentStyle
  }, children);
};

export var TreeView = function TreeView(_ref4) {
  var element = _ref4.element,
      level = _ref4.level;

  if (!element.id || element.elements.length === 0) {
    return null;
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, element.elements.map(function (item, index) {
    return /*#__PURE__*/React.createElement(TreeViewItem, {
      key: item.id,
      element: item,
      level: level,
      index: index
    }, /*#__PURE__*/React.createElement(TreeView, {
      element: item,
      level: level + 1
    }));
  }));
};
//# sourceMappingURL=TreeView.js.map