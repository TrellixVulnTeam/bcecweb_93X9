{"version":3,"sources":["../../../../../src/editor/plugins/toolbar/navigator/navigatorHooks.ts"],"names":["useRef","useState","useRecoilValue","useDrag","useDrop","elementByIdSelector","rootElementAtom","MoveBlockActionEvent","useEventActionHandler","BLOCK","useMoveBlock","elementId","rootElementId","rootElementValue","handler","moveBlock","args","trigger","move","current","next","source","id","position","type","target","elements","useSortableList","index","beginDrag","endDrag","ref","dropItemAbove","setDropItemAbove","isDraggingDownwardsRef","accept","collect","monitor","handlerId","getHandlerId","isOver","shallow","drop","item","dragIndex","dropIndex","draggingDownwards","effectiveDropIndex","hover","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","clientOffset","getClientOffset","hoverClientY","y","dropAbove","canDrop","dragInNavigator","isDragging","begin","end","canDrag","drag","preview"],"mappings":"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","sourcesContent":["import { useRef, useState } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { useDrag, useDrop, DropTargetMonitor } from \"react-dnd\";\nimport { elementByIdSelector, rootElementAtom } from \"~/editor/recoil/modules\";\nimport { MoveBlockActionArgsType } from \"~/editor/recoil/actions/moveBlock/types\";\nimport { MoveBlockActionEvent } from \"~/editor/recoil/actions\";\nimport { useEventActionHandler } from \"~/editor/hooks/useEventActionHandler\";\nimport { DraggableItem } from \"~/editor/components/Draggable\";\n\nexport const BLOCK = \"block\";\n\nexport const useMoveBlock = elementId => {\n    const rootElementId = useRecoilValue(rootElementAtom);\n    const rootElementValue = useRecoilValue(elementByIdSelector(rootElementId));\n    const handler = useEventActionHandler();\n\n    const moveBlock = (args: MoveBlockActionArgsType) => {\n        handler.trigger(new MoveBlockActionEvent(args));\n    };\n\n    const move = (current: number, next: number) => {\n        moveBlock({\n            source: {\n                id: elementId,\n                position: current,\n                type: \"block\"\n            },\n            target: {\n                id: rootElementValue.elements[next] as string,\n                position: next,\n                type: \"block\"\n            },\n            rootElementId: rootElementId\n        });\n    };\n\n    return {\n        move\n    };\n};\ninterface XYCoord {\n    x: number;\n    y: number;\n}\ninterface DragItem {\n    index: number;\n    id: string;\n    type: string;\n}\ninterface UseSortableListArgs {\n    index: number;\n    id: string;\n    type: string;\n    move: (current: number, next: number) => void;\n    beginDrag?: Function;\n    endDrag?: Function;\n}\n\nexport const useSortableList = ({\n    index,\n    move,\n    id,\n    type,\n    beginDrag,\n    endDrag\n}: UseSortableListArgs) => {\n    const ref = useRef<HTMLDivElement>(null);\n    const [dropItemAbove, setDropItemAbove] = useState(false);\n    const isDraggingDownwardsRef = useRef<boolean>(false);\n\n    const [{ handlerId, isOver }, drop] = useDrop({\n        accept: BLOCK,\n        collect(monitor) {\n            return {\n                handlerId: monitor.getHandlerId(),\n                isOver: monitor.isOver() && monitor.isOver({ shallow: true })\n            };\n        },\n        drop(item: DragItem) {\n            if (!ref.current) {\n                return;\n            }\n            const dragIndex = item.index;\n            const dropIndex = index;\n            const draggingDownwards = isDraggingDownwardsRef.current;\n\n            // Calculate effective drop position.\n            let effectiveDropIndex;\n            if (draggingDownwards) {\n                effectiveDropIndex = dropItemAbove ? dropIndex - 1 : dropIndex;\n            } else {\n                effectiveDropIndex = dropItemAbove ? dropIndex : dropIndex + 1;\n            }\n\n            // Don't replace items with themselves.\n            if (dragIndex === effectiveDropIndex) {\n                return;\n            }\n\n            // Time to actually perform the action\n            move(dragIndex, effectiveDropIndex);\n            // Note: we're mutating the monitor item here!\n            // Generally it's better to avoid mutations,\n            // but it's good here for the sake of performance\n            // to avoid expensive index searches.\n            item.index = dropIndex;\n        },\n        hover(item: DragItem, monitor: DropTargetMonitor) {\n            if (!ref.current) {\n                return;\n            }\n            const dragIndex = item.index;\n            const hoverIndex = index;\n\n            // Don't replace items with themselves\n            if (dragIndex === hoverIndex) {\n                return;\n            }\n\n            // Set dragging downwards\n            isDraggingDownwardsRef.current = dragIndex < hoverIndex;\n\n            // Determine rectangle on screen\n            const hoverBoundingRect = ref.current?.getBoundingClientRect();\n\n            // Get vertical middle\n            const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n\n            // Determine mouse position\n            const clientOffset = monitor.getClientOffset();\n\n            // Get pixels to the top\n            const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top;\n\n            // Perform the \"drop above\" move, only when the cursor is above 50% of the item's height.\n            const dropAbove = hoverClientY < hoverMiddleY;\n            setDropItemAbove(dropAbove);\n        },\n        canDrop() {\n            return type === BLOCK;\n        }\n    });\n\n    const [{ isDragging }, drag, preview] = useDrag({\n        item: { type, target: [BLOCK], id, index, dragInNavigator: true } as DraggableItem,\n        collect: monitor => ({\n            isDragging: monitor.isDragging()\n        }),\n        begin(monitor) {\n            if (typeof beginDrag === \"function\") {\n                return beginDrag(monitor);\n            }\n        },\n        end(item, monitor) {\n            if (typeof endDrag === \"function\") {\n                return endDrag(item, monitor);\n            }\n        },\n        canDrag: type === BLOCK\n    });\n\n    drag(drop(ref));\n\n    return {\n        ref,\n        isDragging,\n        handlerId,\n        drag,\n        drop,\n        preview,\n        isOver,\n        dropItemAbove\n    };\n};\n"],"file":"navigatorHooks.js"}