import _cloneDeep from "lodash/cloneDeep";
import React, { useMemo } from "react";
import { merge } from "dot-prop-immutable";
import { useEventActionHandler } from "../../../hooks/useEventActionHandler";
import { UpdateElementActionEvent } from "../../../recoil/actions";
import { plugins } from "@webiny/plugins";
import { renderPlugins } from "@webiny/app/plugins";
import { withActiveElement } from "../../../components";
import { Form } from "@webiny/form";
var emptyElement = {
  data: {},
  type: null
};

var AdvancedSettings = function AdvancedSettings(_ref) {
  var element = _ref.element;

  var _ref2 = element || _cloneDeep(emptyElement),
      data = _ref2.data,
      type = _ref2.type;

  var eventActionHandler = useEventActionHandler(); // Get element settings plugins

  var advancedSettingsPlugin = useMemo(function () {
    return plugins.byType("pb-editor-page-element-advanced-settings").filter(function (pl) {
      return pl.elementType === element.type || pl.elementType === "all";
    });
  }, [element.type]);

  var onSubmit = function onSubmit(formData) {
    formData = advancedSettingsPlugin.reduce(function (formData, pl) {
      if (pl.onSave) {
        return pl.onSave(formData);
      }

      return formData;
    }, formData);
    eventActionHandler.trigger(new UpdateElementActionEvent({
      element: merge(element, "data", formData),
      history: true
    }));
  };

  if (!advancedSettingsPlugin.length) {
    return null;
  }

  return /*#__PURE__*/React.createElement(Form, {
    key: element && element.id,
    data: data,
    onSubmit: onSubmit
  }, function (_ref3) {
    var submit = _ref3.submit,
        Bind = _ref3.Bind,
        data = _ref3.data,
        form = _ref3.form;
    return /*#__PURE__*/React.createElement(React.Fragment, null, renderPlugins("pb-editor-page-element-advanced-settings", {
      Bind: Bind,
      data: data,
      form: form,
      submit: submit
    }, {
      wrapper: false,
      filter: function filter(pl) {
        return pl.elementType === type || pl.elementType === "all";
      }
    }));
  });
};

var AdvancedSettingsMemoized = /*#__PURE__*/React.memo(AdvancedSettings);
export default withActiveElement()(AdvancedSettingsMemoized);
//# sourceMappingURL=AdvancedSettings.js.map