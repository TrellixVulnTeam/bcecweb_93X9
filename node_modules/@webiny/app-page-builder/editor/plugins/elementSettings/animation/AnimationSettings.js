import React, { useEffect } from "react";
import { useRecoilValue } from "recoil";
import { css } from "emotion";
import get from "lodash/get";
import { Cell, Grid } from "@webiny/ui/Grid";
import { activeElementAtom, elementByIdSelector } from "../../../recoil/modules";
import ElementAnimation from "../../../../render/components/ElementAnimation";
import useUpdateHandlers from "../useUpdateHandlers"; // Components

import DurationInput from "../components/SliderWithInput";
import SelectField from "../components/SelectField";
import { ContentWrapper } from "../components/StyledComponents";
import Accordion from "../components/Accordion";
import Wrapper from "../components/Wrapper";
import InputField from "../components/InputField"; // Icon

import { ReactComponent as TimerIcon } from "@svgr/webpack!./icons/round-av_timer-24px.svg";
var classes = {
  grid: /*#__PURE__*/css({
    "&.mdc-layout-grid": {
      padding: 0,
      marginBottom: 24
    }
  }, "label:grid;"),
  animationTypeSelectWrapper: /*#__PURE__*/css({}, "label:animationTypeSelectWrapper;"),
  inputWrapper: /*#__PURE__*/css({
    "& .mdc-text-field": {
      width: "100% !important",
      margin: "0px !important"
    }
  }, "label:inputWrapper;")
};
/**
 * Duration and delay accept values from 50 to 3000, with step 50ms.
 * https://github.com/michalsnik/aos#setting-duration-delay
 */

var STEP = 50;
var MAX_VALUE = 3000;
var DATA_NAMESPACE = "data.settings.animation";

var Settings = function Settings(_ref) {
  var defaultAccordionValue = _ref.defaultAccordionValue;
  var activeElementId = useRecoilValue(activeElementAtom);
  var element = useRecoilValue(elementByIdSelector(activeElementId));

  var _useUpdateHandlers = useUpdateHandlers({
    element: element,
    dataNamespace: DATA_NAMESPACE
  }),
      getUpdateValue = _useUpdateHandlers.getUpdateValue,
      getUpdatePreview = _useUpdateHandlers.getUpdatePreview;

  var animationName = get(element, DATA_NAMESPACE + ".name", "");
  var animationDuration = get(element, DATA_NAMESPACE + ".duration", 0); // Trigger animation manually on "animation" type change.

  useEffect(function () {
    if (animationName) {
      var animationElement = document.querySelector("[data-aos=".concat(animationName, "]"));

      if (animationElement) {
        animationElement.classList.remove("aos-animate");
        setTimeout(function () {
          return animationElement.classList.add("aos-animate");
        }, animationDuration || 250);
      }
    }
  }, [animationName, animationDuration]);
  return /*#__PURE__*/React.createElement(Accordion, {
    title: "Animation",
    defaultValue: defaultAccordionValue
  }, /*#__PURE__*/React.createElement(ContentWrapper, {
    direction: "column"
  }, /*#__PURE__*/React.createElement(Grid, {
    className: classes.grid
  }, /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(Wrapper, {
    label: "Animation"
  }, /*#__PURE__*/React.createElement(SelectField, {
    value: get(element, DATA_NAMESPACE + ".name", ""),
    onChange: getUpdateValue("name")
  }, /*#__PURE__*/React.createElement("option", {
    value: ""
  }, "No animation"), /*#__PURE__*/React.createElement("optgroup", {
    label: "Fade"
  }, /*#__PURE__*/React.createElement("option", {
    value: "fade"
  }, "Fade"), /*#__PURE__*/React.createElement("option", {
    value: "fade-up"
  }, "Fade Up"), /*#__PURE__*/React.createElement("option", {
    value: "fade-down"
  }, "Fade Down"), /*#__PURE__*/React.createElement("option", {
    value: "fade-left"
  }, "Fade Left"), /*#__PURE__*/React.createElement("option", {
    value: "fade-right"
  }, "Fade Right"), /*#__PURE__*/React.createElement("option", {
    value: "fade-up-right"
  }, "Fade Up Right"), /*#__PURE__*/React.createElement("option", {
    value: "fade-up-left"
  }, "Fade Up Left"), /*#__PURE__*/React.createElement("option", {
    value: "fade-down-right"
  }, "Fade Down Right"), /*#__PURE__*/React.createElement("option", {
    value: "fade-down-left"
  }, "Fade Down Left")), /*#__PURE__*/React.createElement("optgroup", {
    label: "Flip"
  }, /*#__PURE__*/React.createElement("option", {
    value: "flip-up"
  }, "Flip Up"), /*#__PURE__*/React.createElement("option", {
    value: "flip-down"
  }, "Flip Down"), /*#__PURE__*/React.createElement("option", {
    value: "flip-left"
  }, "Flip Left"), /*#__PURE__*/React.createElement("option", {
    value: "flip-right"
  }, "Flip Right")), /*#__PURE__*/React.createElement("optgroup", {
    label: "Slide"
  }, /*#__PURE__*/React.createElement("option", {
    value: "slide-up"
  }, "Slide Up"), /*#__PURE__*/React.createElement("option", {
    value: "slide-down"
  }, "Slide Down"), /*#__PURE__*/React.createElement("option", {
    value: "slide-left"
  }, "Slide Left"), /*#__PURE__*/React.createElement("option", {
    value: "slide-right"
  }, "Slide Right"))))), /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(DurationInput, {
    className: "no-bottom-padding",
    label: "Duration",
    icon: /*#__PURE__*/React.createElement(TimerIcon, null),
    valueKey: DATA_NAMESPACE + ".duration",
    updateValue: getUpdateValue("duration"),
    updatePreview: getUpdatePreview("duration"),
    max: MAX_VALUE,
    step: STEP
  })), /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(Wrapper, {
    label: "Delay"
  }, /*#__PURE__*/React.createElement(InputField, {
    placeholder: "ms",
    value: get(element, DATA_NAMESPACE + ".delay", 0),
    onChange: getUpdateValue("delay"),
    min: 0,
    max: MAX_VALUE,
    step: STEP
  }))), /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(Wrapper, {
    label: "Offset"
  }, /*#__PURE__*/React.createElement(InputField, {
    placeholder: "px",
    value: get(element, DATA_NAMESPACE + ".offset", 0),
    onChange: getUpdateValue("offset")
  }))), /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(Wrapper, {
    label: "Easing"
  }, /*#__PURE__*/React.createElement(SelectField, {
    value: get(element, DATA_NAMESPACE + ".easing", ""),
    onChange: getUpdateValue("easing")
  }, /*#__PURE__*/React.createElement("option", {
    value: ""
  }, "Default"), /*#__PURE__*/React.createElement("option", {
    value: "linear"
  }, "Linear"), /*#__PURE__*/React.createElement("option", {
    value: "ease"
  }, "Ase"), /*#__PURE__*/React.createElement("option", {
    value: "ease-in"
  }, "Ase in"), /*#__PURE__*/React.createElement("option", {
    value: "ease-out"
  }, "Out"), /*#__PURE__*/React.createElement("option", {
    value: "ease-in-out"
  }, "In out"), /*#__PURE__*/React.createElement("option", {
    value: "ease-in-back"
  }, "In back"), /*#__PURE__*/React.createElement("option", {
    value: "ease-out-back"
  }, "Out back"), /*#__PURE__*/React.createElement("option", {
    value: "ease-in-out-back"
  }, "In out-back"), /*#__PURE__*/React.createElement("option", {
    value: "ease-in-sine"
  }, "In sine"), /*#__PURE__*/React.createElement("option", {
    value: "ease-out-sine"
  }, "Out sine"), /*#__PURE__*/React.createElement("option", {
    value: "ease-in-out-sine"
  }, "In out-sine"), /*#__PURE__*/React.createElement("option", {
    value: "ease-in-quad"
  }, "In quad"), /*#__PURE__*/React.createElement("option", {
    value: "ease-out-quad"
  }, "Out quad"), /*#__PURE__*/React.createElement("option", {
    value: "ease-in-out-quad"
  }, "In out-quad"), /*#__PURE__*/React.createElement("option", {
    value: "ease-in-cubic"
  }, "In cubic"), /*#__PURE__*/React.createElement("option", {
    value: "ease-out-cubic"
  }, "Out cubic"), /*#__PURE__*/React.createElement("option", {
    value: "ease-in-out-cubic"
  }, "In out-cubic"), /*#__PURE__*/React.createElement("option", {
    value: "ease-in-quart"
  }, "In quart"), /*#__PURE__*/React.createElement("option", {
    value: "ease-out-quart"
  }, "Out quart"), /*#__PURE__*/React.createElement("option", {
    value: "ease-in-out-quart"
  }, "In out-quart")))))));
};

var AnimationSettings = function AnimationSettings(props) {
  return /*#__PURE__*/React.createElement(ElementAnimation, null, function (animation) {
    return /*#__PURE__*/React.createElement(Settings, Object.assign({}, props, {
      animation: animation
    }));
  });
};

export default AnimationSettings;
//# sourceMappingURL=AnimationSettings.js.map