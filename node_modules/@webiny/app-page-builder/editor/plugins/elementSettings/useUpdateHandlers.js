import { useEventActionHandler } from "../../hooks/useEventActionHandler";
import { UpdateElementActionEvent } from "../../recoil/actions";
import { useMemo } from "react";
import lodashSet from "lodash/set";
import lodashMerge from "lodash/merge";
import { useHandler } from "@webiny/app/hooks/useHandler";

var useUpdateHandlers = function useUpdateHandlers(props) {
  var handler = useEventActionHandler();

  var updateElement = function updateElement(args) {
    handler.trigger(new UpdateElementActionEvent(args));
  };

  var updateSettings = useHandler(props, function (_ref) {
    var element = _ref.element,
        dataNamespace = _ref.dataNamespace,
        postModifyElement = _ref.postModifyElement;
    var historyUpdated = {};
    return function (name, newValue) {
      var history = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var propName = "".concat(dataNamespace, ".").concat(name);
      var newElement = lodashMerge({}, element, lodashSet({}, propName, newValue)); // post modify the element.

      if (typeof postModifyElement === "function") {
        postModifyElement({
          name: name,
          newElement: newElement,
          element: element,
          newValue: newValue
        });
      }

      if (!history) {
        updateElement({
          element: newElement,
          history: false
        });
        return;
      }

      if (historyUpdated[propName] !== newValue) {
        historyUpdated[propName] = newValue;
        updateElement({
          element: newElement,
          history: true
        });
      }
    };
  });
  var getUpdateValue = useMemo(function () {
    var handlers = {};
    return function (name) {
      if (!handlers[name]) {
        handlers[name] = function (value) {
          return updateSettings(name, value, true);
        };
      }

      return handlers[name];
    };
  }, [updateSettings]);
  var getUpdatePreview = useMemo(function () {
    var handlers = {};
    return function (name) {
      if (!handlers[name]) {
        handlers[name] = function (value) {
          return updateSettings(name, value, false);
        };
      }

      return handlers[name];
    };
  }, [updateSettings]);
  return {
    getUpdateValue: getUpdateValue,
    getUpdatePreview: getUpdatePreview
  };
};

export default useUpdateHandlers;
//# sourceMappingURL=useUpdateHandlers.js.map