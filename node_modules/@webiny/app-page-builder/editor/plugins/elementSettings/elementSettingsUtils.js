import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { plugins } from "@webiny/plugins";
import orderBy from "lodash/orderBy";
import merge from "lodash/merge";
export var WIDTH_UNIT_OPTIONS = [{
  label: "%",
  value: "%"
}, {
  label: "px",
  value: "px"
}, {
  label: "em",
  value: "em"
}, {
  label: "vw",
  value: "vw"
}, {
  label: "auto",
  value: "auto"
}];
export var HEIGHT_UNIT_OPTIONS = [{
  label: "%",
  value: "%"
}, {
  label: "px",
  value: "px"
}, {
  label: "em",
  value: "em"
}, {
  label: "vh",
  value: "vh"
}, {
  label: "auto",
  value: "auto"
}];
export var createInitialPerDeviceSettingValue = function createInitialPerDeviceSettingValue(defaultValue, baseDisplayMode) {
  // Only set "baseDisplayMode" value if present
  if (baseDisplayMode) {
    return _defineProperty({}, baseDisplayMode, defaultValue);
  }

  var value = {}; // Get responsive editor modes from plugins.

  var editorModes = plugins.byType("pb-editor-responsive-mode").map(function (pl) {
    return pl.config;
  }); // Set default value for each mode.

  editorModes.forEach(function (_ref2) {
    var displayMode = _ref2.displayMode;
    value[displayMode] = defaultValue;
  });
  return value;
};
export var applyFallbackDisplayMode = function applyFallbackDisplayMode(mode, getValue) {
  // Get display modes
  var displayModeConfigs = plugins.byType("pb-render-responsive-mode").map(function (pl) {
    return pl.config;
  }); // Get fallback display mode

  var orderedConfigs = orderBy(displayModeConfigs, "minWidth", "desc");
  var index = orderedConfigs.findIndex(function (_ref3) {
    var displayMode = _ref3.displayMode;
    return displayMode === mode;
  }); // Merge all values from base "DisplayMode" upto current

  var output = undefined;

  for (var i = 0; i < index; i++) {
    var currentValue = getValue(orderedConfigs[i].displayMode); // In case of "string", we don't need to merge all values

    if (currentValue && typeof currentValue === "string") {
      return currentValue;
    }

    if (currentValue) {
      output = merge(output, currentValue);
    }
  }

  return output;
};
//# sourceMappingURL=elementSettingsUtils.js.map