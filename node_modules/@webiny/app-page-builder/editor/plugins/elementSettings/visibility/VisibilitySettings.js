import React, { useCallback, useMemo } from "react";
import { css } from "emotion";
import { useRecoilValue } from "recoil";
import get from "lodash/get";
import { plugins } from "@webiny/plugins";
import { Tooltip } from "@webiny/ui/Tooltip";
import { Switch } from "@webiny/ui/Switch";
import { activeElementAtom, elementWithChildrenByIdSelector, uiAtom } from "../../../recoil/modules";
import { applyFallbackDisplayMode } from "../elementSettingsUtils"; // Components

import Accordion from "../../elementSettings/components/Accordion";
import Wrapper from "../../elementSettings/components/Wrapper";
import useUpdateHandlers from "../../elementSettings/useUpdateHandlers";
var classes = {
  grid: /*#__PURE__*/css({
    "&.mdc-layout-grid": {
      padding: 0,
      marginBottom: 24
    }
  }, "label:grid;"),
  rightCellStyle: /*#__PURE__*/css({
    justifySelf: "end",
    alignSelf: "center"
  }, "label:rightCellStyle;"),
  leftCellStyle: /*#__PURE__*/css({
    alignSelf: "center"
  }, "label:leftCellStyle;")
};
var DATA_NAMESPACE = "data.settings.visibility";
export var useVisibilitySetting = function useVisibilitySetting(elementId) {
  var _useRecoilValue = useRecoilValue(uiAtom),
      displayMode = _useRecoilValue.displayMode;

  var element = useRecoilValue(elementWithChildrenByIdSelector(elementId));

  var _useUpdateHandlers = useUpdateHandlers({
    element: element,
    dataNamespace: DATA_NAMESPACE
  }),
      getUpdateValue = _useUpdateHandlers.getUpdateValue;

  var updateVisibility = useCallback(function (value) {
    return getUpdateValue("".concat(displayMode, ".hidden"))(value);
  }, [getUpdateValue, displayMode]);
  return {
    element: element,
    updateVisibility: updateVisibility
  };
};

var VisibilitySettings = function VisibilitySettings(_ref) {
  var defaultAccordionValue = _ref.defaultAccordionValue;

  var _useRecoilValue2 = useRecoilValue(uiAtom),
      displayMode = _useRecoilValue2.displayMode;

  var activeElementId = useRecoilValue(activeElementAtom);

  var _useVisibilitySetting = useVisibilitySetting(activeElementId),
      element = _useVisibilitySetting.element,
      updateVisibility = _useVisibilitySetting.updateVisibility;

  var _useMemo = useMemo(function () {
    return plugins.byType("pb-editor-responsive-mode").find(function (pl) {
      return pl.config.displayMode === displayMode;
    });
  }, [displayMode]),
      activeDisplayModeConfig = _useMemo.config;

  var fallbackValue = useMemo(function () {
    return applyFallbackDisplayMode(displayMode, function (mode) {
      return get(element, "".concat(DATA_NAMESPACE, ".").concat(mode));
    });
  }, [displayMode]);
  var visibility = get(element, "".concat(DATA_NAMESPACE, ".").concat(displayMode), fallbackValue || {
    hidden: false
  });
  return /*#__PURE__*/React.createElement(Accordion, {
    title: "Visibility",
    defaultValue: defaultAccordionValue,
    icon: /*#__PURE__*/React.createElement(Tooltip, {
      content: "Changes will apply for ".concat(activeDisplayModeConfig.displayMode)
    }, activeDisplayModeConfig.icon)
  }, /*#__PURE__*/React.createElement(Wrapper, {
    containerClassName: classes.grid,
    label: "Hide element",
    leftCellSpan: 8,
    rightCellSpan: 4,
    leftCellClassName: classes.leftCellStyle,
    rightCellClassName: classes.rightCellStyle
  }, /*#__PURE__*/React.createElement(Switch, {
    value: visibility.hidden,
    onChange: updateVisibility
  })));
};

export default /*#__PURE__*/React.memo(VisibilitySettings);
//# sourceMappingURL=VisibilitySettings.js.map