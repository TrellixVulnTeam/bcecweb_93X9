{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/visibility/VisibilitySettings.tsx"],"names":["React","useCallback","useMemo","css","useRecoilValue","get","plugins","Tooltip","Switch","activeElementAtom","elementWithChildrenByIdSelector","uiAtom","applyFallbackDisplayMode","Accordion","Wrapper","useUpdateHandlers","classes","grid","padding","marginBottom","rightCellStyle","justifySelf","alignSelf","leftCellStyle","DATA_NAMESPACE","useVisibilitySetting","elementId","displayMode","element","dataNamespace","getUpdateValue","updateVisibility","value","VisibilitySettings","defaultAccordionValue","activeElementId","byType","find","pl","config","activeDisplayModeConfig","fallbackValue","mode","visibility","hidden","icon","memo"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,QAA4C,OAA5C;AACA,SAASC,GAAT,QAAoB,SAApB;AACA,SAASC,cAAT,QAA+B,QAA/B;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,MAAT,QAAuB,mBAAvB;AAKA,SACIC,iBADJ,EAEIC,+BAFJ,EAGIC,MAHJ;AAKA,SAASC,wBAAT,kC,CACA;;AACA,OAAOC,SAAP;AACA,OAAOC,OAAP;AACA,OAAOC,iBAAP;AAEA,IAAMC,OAAO,GAAG;AACZC,EAAAA,IAAI,eAAEd,GAAG,CAAC;AACN,yBAAqB;AACjBe,MAAAA,OAAO,EAAE,CADQ;AAEjBC,MAAAA,YAAY,EAAE;AAFG;AADf,GAAD,gBADG;AAOZC,EAAAA,cAAc,eAAEjB,GAAG,CAAC;AAChBkB,IAAAA,WAAW,EAAE,KADG;AAEhBC,IAAAA,SAAS,EAAE;AAFK,GAAD,0BAPP;AAWZC,EAAAA,aAAa,eAAEpB,GAAG,CAAC;AACfmB,IAAAA,SAAS,EAAE;AADI,GAAD;AAXN,CAAhB;AAgBA,IAAME,cAAc,GAAG,0BAAvB;AAEA,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAC,SAAS,EAAI;AAC7C,wBAAwBtB,cAAc,CAACO,MAAD,CAAtC;AAAA,MAAQgB,WAAR,mBAAQA,WAAR;;AACA,MAAMC,OAAO,GAAGxB,cAAc,CAACM,+BAA+B,CAACgB,SAAD,CAAhC,CAA9B;;AACA,2BAA2BX,iBAAiB,CAAC;AACzCa,IAAAA,OAAO,EAAPA,OADyC;AAEzCC,IAAAA,aAAa,EAAEL;AAF0B,GAAD,CAA5C;AAAA,MAAQM,cAAR,sBAAQA,cAAR;;AAKA,MAAMC,gBAAgB,GAAG9B,WAAW,CAChC,UAAC+B,KAAD;AAAA,WAAoBF,cAAc,WAAIH,WAAJ,aAAd,CAAwCK,KAAxC,CAApB;AAAA,GADgC,EAEhC,CAACF,cAAD,EAAiBH,WAAjB,CAFgC,CAApC;AAKA,SAAO;AACHC,IAAAA,OAAO,EAAPA,OADG;AAEHG,IAAAA,gBAAgB,EAAhBA;AAFG,GAAP;AAIH,CAjBM;;AAmBP,IAAME,kBAIL,GAAG,SAJEA,kBAIF,OAA+B;AAAA,MAA5BC,qBAA4B,QAA5BA,qBAA4B;;AAC/B,yBAAwB9B,cAAc,CAACO,MAAD,CAAtC;AAAA,MAAQgB,WAAR,oBAAQA,WAAR;;AACA,MAAMQ,eAAe,GAAG/B,cAAc,CAACK,iBAAD,CAAtC;;AACA,8BAAsCgB,oBAAoB,CAACU,eAAD,CAA1D;AAAA,MAAQP,OAAR,yBAAQA,OAAR;AAAA,MAAiBG,gBAAjB,yBAAiBA,gBAAjB;;AAEA,iBAA4C7B,OAAO,CAAC,YAAM;AACtD,WAAOI,OAAO,CACT8B,MADE,CACmC,2BADnC,EAEFC,IAFE,CAEG,UAAAC,EAAE;AAAA,aAAIA,EAAE,CAACC,MAAH,CAAUZ,WAAV,KAA0BA,WAA9B;AAAA,KAFL,CAAP;AAGH,GAJkD,EAIhD,CAACA,WAAD,CAJgD,CAAnD;AAAA,MAAgBa,uBAAhB,YAAQD,MAAR;;AAMA,MAAME,aAAa,GAAGvC,OAAO,CACzB;AAAA,WACIU,wBAAwB,CAACe,WAAD,EAAc,UAAAe,IAAI;AAAA,aACtCrC,GAAG,CAACuB,OAAD,YAAaJ,cAAb,cAA+BkB,IAA/B,EADmC;AAAA,KAAlB,CAD5B;AAAA,GADyB,EAKzB,CAACf,WAAD,CALyB,CAA7B;AAQA,MAAMgB,UAAU,GAAGtC,GAAG,CAClBuB,OADkB,YAEfJ,cAFe,cAEGG,WAFH,GAGlBc,aAAa,IAAI;AAAEG,IAAAA,MAAM,EAAE;AAAV,GAHC,CAAtB;AAMA,sBACI,oBAAC,SAAD;AACI,IAAA,KAAK,EAAE,YADX;AAEI,IAAA,YAAY,EAAEV,qBAFlB;AAGI,IAAA,IAAI,eACA,oBAAC,OAAD;AAAS,MAAA,OAAO,mCAA4BM,uBAAuB,CAACb,WAApD;AAAhB,OACKa,uBAAuB,CAACK,IAD7B;AAJR,kBASI,oBAAC,OAAD;AACI,IAAA,kBAAkB,EAAE7B,OAAO,CAACC,IADhC;AAEI,IAAA,KAAK,EAAE,cAFX;AAGI,IAAA,YAAY,EAAE,CAHlB;AAII,IAAA,aAAa,EAAE,CAJnB;AAKI,IAAA,iBAAiB,EAAED,OAAO,CAACO,aAL/B;AAMI,IAAA,kBAAkB,EAAEP,OAAO,CAACI;AANhC,kBAQI,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAEuB,UAAU,CAACC,MAA1B;AAAkC,IAAA,QAAQ,EAAEb;AAA5C,IARJ,CATJ,CADJ;AAsBH,CAnDD;;AAqDA,4BAAe/B,KAAK,CAAC8C,IAAN,CAAWb,kBAAX,CAAf","sourcesContent":["import React, { useCallback, useMemo } from \"react\";\nimport { css } from \"emotion\";\nimport { useRecoilValue } from \"recoil\";\nimport get from \"lodash/get\";\nimport { plugins } from \"@webiny/plugins\";\nimport { Tooltip } from \"@webiny/ui/Tooltip\";\nimport { Switch } from \"@webiny/ui/Switch\";\nimport {\n    PbEditorPageElementSettingsRenderComponentProps,\n    PbEditorResponsiveModePlugin\n} from \"~/types\";\nimport {\n    activeElementAtom,\n    elementWithChildrenByIdSelector,\n    uiAtom\n} from \"../../../recoil/modules\";\nimport { applyFallbackDisplayMode } from \"../elementSettingsUtils\";\n// Components\nimport Accordion from \"../../elementSettings/components/Accordion\";\nimport Wrapper from \"../../elementSettings/components/Wrapper\";\nimport useUpdateHandlers from \"../../elementSettings/useUpdateHandlers\";\n\nconst classes = {\n    grid: css({\n        \"&.mdc-layout-grid\": {\n            padding: 0,\n            marginBottom: 24\n        }\n    }),\n    rightCellStyle: css({\n        justifySelf: \"end\",\n        alignSelf: \"center\"\n    }),\n    leftCellStyle: css({\n        alignSelf: \"center\"\n    })\n};\n\nconst DATA_NAMESPACE = \"data.settings.visibility\";\n\nexport const useVisibilitySetting = elementId => {\n    const { displayMode } = useRecoilValue(uiAtom);\n    const element = useRecoilValue(elementWithChildrenByIdSelector(elementId));\n    const { getUpdateValue } = useUpdateHandlers({\n        element,\n        dataNamespace: DATA_NAMESPACE\n    });\n\n    const updateVisibility = useCallback(\n        (value: boolean) => getUpdateValue(`${displayMode}.hidden`)(value),\n        [getUpdateValue, displayMode]\n    );\n\n    return {\n        element,\n        updateVisibility\n    };\n};\n\nconst VisibilitySettings: React.FunctionComponent<\n    PbEditorPageElementSettingsRenderComponentProps & {\n        options: any;\n    }\n> = ({ defaultAccordionValue }) => {\n    const { displayMode } = useRecoilValue(uiAtom);\n    const activeElementId = useRecoilValue(activeElementAtom);\n    const { element, updateVisibility } = useVisibilitySetting(activeElementId);\n\n    const { config: activeDisplayModeConfig } = useMemo(() => {\n        return plugins\n            .byType<PbEditorResponsiveModePlugin>(\"pb-editor-responsive-mode\")\n            .find(pl => pl.config.displayMode === displayMode);\n    }, [displayMode]);\n\n    const fallbackValue = useMemo(\n        () =>\n            applyFallbackDisplayMode(displayMode, mode =>\n                get(element, `${DATA_NAMESPACE}.${mode}`)\n            ),\n        [displayMode]\n    );\n\n    const visibility = get(\n        element,\n        `${DATA_NAMESPACE}.${displayMode}`,\n        fallbackValue || { hidden: false }\n    );\n\n    return (\n        <Accordion\n            title={\"Visibility\"}\n            defaultValue={defaultAccordionValue}\n            icon={\n                <Tooltip content={`Changes will apply for ${activeDisplayModeConfig.displayMode}`}>\n                    {activeDisplayModeConfig.icon}\n                </Tooltip>\n            }\n        >\n            <Wrapper\n                containerClassName={classes.grid}\n                label={\"Hide element\"}\n                leftCellSpan={8}\n                rightCellSpan={4}\n                leftCellClassName={classes.leftCellStyle}\n                rightCellClassName={classes.rightCellStyle}\n            >\n                <Switch value={visibility.hidden} onChange={updateVisibility} />\n            </Wrapper>\n        </Accordion>\n    );\n};\n\nexport default React.memo(VisibilitySettings);\n"],"file":"VisibilitySettings.js"}