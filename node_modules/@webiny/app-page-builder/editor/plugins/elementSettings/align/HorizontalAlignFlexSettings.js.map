{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/align/HorizontalAlignFlexSettings.tsx"],"names":["React","useMemo","css","useRecoilValue","classNames","get","set","merge","plugins","Tooltip","IconButton","useEventActionHandler","UpdateElementActionEvent","activeElementAtom","elementWithChildrenByIdSelector","uiAtom","applyFallbackDisplayMode","ContentWrapper","Accordion","classes","activeIcon","color","icon","icons","center","iconDescriptions","AlignmentsTypeEnum","alignments","Object","keys","DATA_NAMESPACE","HorizontalAlignFlexSettings","defaultAccordionValue","displayMode","propName","handler","activeElementId","element","fallbackValue","mode","align","CENTER","byType","find","pl","config","activeEditorModeConfig","updateElement","trigger","history","onClick","type","newElement","plugin","elementType","map","memo"],"mappings":"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","sourcesContent":["import React, { useMemo } from \"react\";\nimport { css } from \"emotion\";\nimport { useRecoilValue } from \"recoil\";\nimport classNames from \"classnames\";\nimport get from \"lodash/get\";\nimport set from \"lodash/set\";\nimport merge from \"lodash/merge\";\nimport { plugins } from \"@webiny/plugins\";\nimport { Tooltip } from \"@webiny/ui/Tooltip\";\nimport { IconButton } from \"@webiny/ui/Button\";\nimport {\n    PbEditorPageElementPlugin,\n    PbEditorElement,\n    PbEditorPageElementSettingsRenderComponentProps,\n    PbEditorResponsiveModePlugin\n} from \"../../../../types\";\nimport { useEventActionHandler } from \"../../../hooks/useEventActionHandler\";\nimport { UpdateElementActionEvent } from \"../../../recoil/actions\";\nimport {\n    activeElementAtom,\n    elementWithChildrenByIdSelector,\n    uiAtom\n} from \"../../../recoil/modules\";\nimport { applyFallbackDisplayMode } from \"../elementSettingsUtils\";\n// Components\nimport { ContentWrapper } from \"../components/StyledComponents\";\nimport Accordion from \"../components/Accordion\";\n// Icons\nimport { ReactComponent as AlignLeftIcon } from \"./icons/align_horizontal_left.svg\";\nimport { ReactComponent as AlignCenterIcon } from \"./icons/align_horizontal_center.svg\";\nimport { ReactComponent as AlignRightIcon } from \"./icons/align_horizontal_right.svg\";\n\nconst classes = {\n    activeIcon: css({\n        \"&.mdc-icon-button\": {\n            color: \"var(--mdc-theme-primary)\"\n        }\n    }),\n    icon: css({\n        \"&.mdc-icon-button\": {\n            color: \"var(--mdc-theme-text-primary-on-background)\"\n        }\n    })\n};\n\ntype IconsType = {\n    [key: string]: React.ReactElement;\n};\n// Icons map for dynamic render\nconst icons: IconsType = {\n    \"flex-start\": <AlignLeftIcon />,\n    center: <AlignCenterIcon />,\n    \"flex-end\": <AlignRightIcon />\n};\n\nconst iconDescriptions = {\n    \"flex-start\": \"Align left\",\n    center: \"Align center\",\n    \"flex-end\": \"Align right\"\n};\nenum AlignmentsTypeEnum {\n    FLEX_START = \"flex-start\",\n    CENTER = \"center\",\n    FLEX_END = \"flex-end\"\n}\n\nconst alignments = Object.keys(icons);\nconst DATA_NAMESPACE = \"data.settings.horizontalAlignFlex\";\n\nconst HorizontalAlignFlexSettings: React.FunctionComponent<PbEditorPageElementSettingsRenderComponentProps> =\n    ({ defaultAccordionValue = false }) => {\n        const { displayMode } = useRecoilValue(uiAtom);\n        const propName = `${DATA_NAMESPACE}.${displayMode}`;\n        const handler = useEventActionHandler();\n        const activeElementId = useRecoilValue(activeElementAtom);\n        const element = useRecoilValue(elementWithChildrenByIdSelector(activeElementId));\n        const fallbackValue = useMemo(\n            () =>\n                applyFallbackDisplayMode(displayMode, mode =>\n                    get(element, `${DATA_NAMESPACE}.${mode}`)\n                ),\n            [displayMode]\n        );\n        const align = get(element, propName, fallbackValue || AlignmentsTypeEnum.CENTER);\n\n        const { config: activeEditorModeConfig } = useMemo(() => {\n            return plugins\n                .byType<PbEditorResponsiveModePlugin>(\"pb-editor-responsive-mode\")\n                .find(pl => pl.config.displayMode === displayMode);\n        }, [displayMode]);\n\n        const updateElement = (element: PbEditorElement) => {\n            handler.trigger(\n                new UpdateElementActionEvent({\n                    element,\n                    history: true\n                })\n            );\n        };\n\n        const onClick = (type: AlignmentsTypeEnum) => {\n            const newElement = merge({}, element, set({}, propName, type));\n            updateElement(newElement);\n        };\n\n        const plugin = plugins\n            .byType<PbEditorPageElementPlugin>(\"pb-editor-page-element\")\n            .find(pl => pl.elementType === element.type);\n\n        if (!plugin) {\n            return null;\n        }\n\n        return (\n            <Accordion\n                title={\"Horizontal align\"}\n                defaultValue={defaultAccordionValue}\n                icon={\n                    <Tooltip\n                        content={`Changes will apply for ${activeEditorModeConfig.displayMode}`}\n                    >\n                        {activeEditorModeConfig.icon}\n                    </Tooltip>\n                }\n            >\n                <ContentWrapper>\n                    {alignments.map(type => (\n                        <Tooltip key={type} content={iconDescriptions[type]} placement={\"top\"}>\n                            <IconButton\n                                className={classNames({\n                                    [classes.activeIcon]: align === type,\n                                    [classes.icon]: align !== type\n                                })}\n                                icon={icons[type]}\n                                onClick={() => onClick(type as AlignmentsTypeEnum)}\n                            />\n                        </Tooltip>\n                    ))}\n                </ContentWrapper>\n            </Accordion>\n        );\n    };\n\nexport default React.memo(HorizontalAlignFlexSettings);\n"],"file":"HorizontalAlignFlexSettings.js"}