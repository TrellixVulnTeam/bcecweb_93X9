import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import React from "react";
import { css } from "emotion";
import { useRecoilValue } from "recoil";
import classNames from "classnames";
import { plugins } from "@webiny/plugins";
import { Tooltip } from "@webiny/ui/Tooltip";
import { IconButton } from "@webiny/ui/Button";
import { useEventActionHandler } from "../../../hooks/useEventActionHandler";
import { UpdateElementActionEvent } from "../../../recoil/actions";
import { activeElementAtom, elementWithChildrenByIdSelector } from "../../../recoil/modules"; // Components

import { ContentWrapper } from "../components/StyledComponents";
import Accordion from "../components/Accordion"; // Icons

import { ReactComponent as AlignTextLeftIcon } from "@svgr/webpack!./icons/format_align_left.svg";
import { ReactComponent as AlignTextCenterIcon } from "@svgr/webpack!./icons/format_align_center.svg";
import { ReactComponent as AlignTextRightIcon } from "@svgr/webpack!./icons/format_align_right.svg";
import { ReactComponent as AlignTextJustifyIcon } from "@svgr/webpack!./icons/format_align_justify.svg";
var classes = {
  activeIcon: /*#__PURE__*/css({
    "&.mdc-icon-button": {
      color: "var(--mdc-theme-primary)"
    }
  }, "label:activeIcon;"),
  icon: /*#__PURE__*/css({
    "&.mdc-icon-button": {
      color: "var(--mdc-theme-text-primary-on-background)"
    }
  }, "label:icon;")
};
// Icons map for dynamic render
var icons = {
  left: /*#__PURE__*/React.createElement(AlignTextLeftIcon, null),
  center: /*#__PURE__*/React.createElement(AlignTextCenterIcon, null),
  right: /*#__PURE__*/React.createElement(AlignTextRightIcon, null),
  justify: /*#__PURE__*/React.createElement(AlignTextJustifyIcon, null)
};
var iconDescriptions = {
  left: "Align left",
  center: "Align center",
  right: "Align right",
  justify: "Align justify"
};
var defaultAlignValue = "left";
var DEFAULT_ALIGNMENTS = Object.keys(icons);

var getAlignValue = function getAlignValue(element, defaultAlign) {
  var _element$data$setting;

  return ((_element$data$setting = element.data.settings) === null || _element$data$setting === void 0 ? void 0 : _element$data$setting.horizontalAlign) || defaultAlign;
};

var HorizontalAlignSettings = function HorizontalAlignSettings(_ref) {
  var _ref$options$alignmen = _ref.options.alignments,
      alignments = _ref$options$alignmen === void 0 ? DEFAULT_ALIGNMENTS : _ref$options$alignmen,
      defaultAccordionValue = _ref.defaultAccordionValue;
  var handler = useEventActionHandler();
  var activeElementId = useRecoilValue(activeElementAtom);
  var element = useRecoilValue(elementWithChildrenByIdSelector(activeElementId));
  var align = getAlignValue(element, defaultAlignValue);

  var updateElement = function updateElement(element) {
    handler.trigger(new UpdateElementActionEvent({
      element: element,
      history: true
    }));
  };

  var _onClick = function onClick() {
    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultAlignValue;
    updateElement(_objectSpread(_objectSpread({}, element), {}, {
      data: _objectSpread(_objectSpread({}, element.data), {}, {
        settings: _objectSpread(_objectSpread({}, element.data.settings), {}, {
          horizontalAlign: type
        })
      })
    }));
  };

  var plugin = plugins.byType("pb-editor-page-element").find(function (pl) {
    return pl.elementType === element.type;
  });

  if (!plugin) {
    return null;
  }

  return /*#__PURE__*/React.createElement(Accordion, {
    title: "Text align",
    defaultValue: defaultAccordionValue
  }, /*#__PURE__*/React.createElement(ContentWrapper, null, alignments.map(function (type) {
    var _classNames;

    return /*#__PURE__*/React.createElement(Tooltip, {
      key: type,
      content: iconDescriptions[type],
      placement: "top"
    }, /*#__PURE__*/React.createElement(IconButton, {
      className: classNames((_classNames = {}, _defineProperty(_classNames, classes.activeIcon, align === type), _defineProperty(_classNames, classes.icon, align !== type), _classNames)),
      icon: icons[type],
      onClick: function onClick() {
        return _onClick(type);
      }
    }));
  })));
};

export default /*#__PURE__*/React.memo(HorizontalAlignSettings);
//# sourceMappingURL=HorizontalAlignSettings.js.map