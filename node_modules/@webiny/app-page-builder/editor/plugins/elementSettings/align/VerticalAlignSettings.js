import _defineProperty from "@babel/runtime/helpers/defineProperty";

var _icons, _iconDescriptions;

import React, { useMemo } from "react";
import { css } from "emotion";
import { useRecoilValue } from "recoil";
import classNames from "classnames";
import get from "lodash/get";
import set from "lodash/set";
import merge from "lodash/merge";
import { plugins } from "@webiny/plugins";
import { Tooltip } from "@webiny/ui/Tooltip";
import { IconButton } from "@webiny/ui/Button";
import { useEventActionHandler } from "../../../hooks/useEventActionHandler";
import { UpdateElementActionEvent } from "../../../recoil/actions";
import { activeElementAtom, uiAtom, elementWithChildrenByIdSelector } from "../../../recoil/modules";
import { applyFallbackDisplayMode } from "../elementSettingsUtils"; // Components

import { ContentWrapper } from "../components/StyledComponents";
import Accordion from "../components/Accordion"; // Icons

import { ReactComponent as AlignTopIcon } from "@svgr/webpack!./icons/align_vertical_top.svg";
import { ReactComponent as AlignCenterIcon } from "@svgr/webpack!./icons/align_vertical_center.svg";
import { ReactComponent as AlignBottomIcon } from "@svgr/webpack!./icons/align_vertical_bottom.svg";
var classes = {
  activeIcon: /*#__PURE__*/css({
    "&.mdc-icon-button": {
      color: "var(--mdc-theme-primary)"
    }
  }, "label:activeIcon;"),
  icon: /*#__PURE__*/css({
    "&.mdc-icon-button": {
      color: "var(--mdc-theme-text-primary-on-background)"
    }
  }, "label:icon;")
};
var AlignTypesEnum; // Icons map for dynamic render

(function (AlignTypesEnum) {
  AlignTypesEnum["start"] = "flex-start";
  AlignTypesEnum["center"] = "center";
  AlignTypesEnum["end"] = "flex-end";
})(AlignTypesEnum || (AlignTypesEnum = {}));

var icons = (_icons = {}, _defineProperty(_icons, AlignTypesEnum.start, /*#__PURE__*/React.createElement(AlignTopIcon, null)), _defineProperty(_icons, AlignTypesEnum.center, /*#__PURE__*/React.createElement(AlignCenterIcon, null)), _defineProperty(_icons, AlignTypesEnum.end, /*#__PURE__*/React.createElement(AlignBottomIcon, null)), _icons);
var alignments = Object.keys(icons);
var iconDescriptions = (_iconDescriptions = {}, _defineProperty(_iconDescriptions, AlignTypesEnum.start, "Align top"), _defineProperty(_iconDescriptions, AlignTypesEnum.center, "Align center"), _defineProperty(_iconDescriptions, AlignTypesEnum.end, "Align bottom"), _iconDescriptions);
var DATA_NAMESPACE = "data.settings.verticalAlign";

var VerticalAlignSettings = function VerticalAlignSettings(_ref) {
  var defaultAccordionValue = _ref.defaultAccordionValue;

  var _useRecoilValue = useRecoilValue(uiAtom),
      displayMode = _useRecoilValue.displayMode;

  var propName = "".concat(DATA_NAMESPACE, ".").concat(displayMode);
  var handler = useEventActionHandler();
  var activeElementId = useRecoilValue(activeElementAtom);
  var element = useRecoilValue(elementWithChildrenByIdSelector(activeElementId));
  var fallbackValue = useMemo(function () {
    return applyFallbackDisplayMode(displayMode, function (mode) {
      return get(element, "".concat(DATA_NAMESPACE, ".").concat(mode));
    });
  }, [displayMode]);
  var align = get(element, propName, fallbackValue || AlignTypesEnum.center);

  var _useMemo = useMemo(function () {
    return plugins.byType("pb-editor-responsive-mode").find(function (pl) {
      return pl.config.displayMode === displayMode;
    });
  }, [displayMode]),
      activeEditorModeConfig = _useMemo.config;

  var updateElement = function updateElement(element) {
    handler.trigger(new UpdateElementActionEvent({
      element: element,
      history: true
    }));
  };

  var _onClick = function onClick(type) {
    var newElement = merge({}, element, set({}, propName, type));
    updateElement(newElement);
  };

  var plugin = plugins.byType("pb-editor-page-element").find(function (pl) {
    return pl.elementType === element.type;
  });

  if (!plugin) {
    return null;
  }

  return /*#__PURE__*/React.createElement(Accordion, {
    title: "Vertical align",
    defaultValue: defaultAccordionValue,
    icon: /*#__PURE__*/React.createElement(Tooltip, {
      content: "Changes will apply for ".concat(activeEditorModeConfig.displayMode)
    }, activeEditorModeConfig.icon)
  }, /*#__PURE__*/React.createElement(ContentWrapper, null, alignments.map(function (type) {
    var _classNames;

    return /*#__PURE__*/React.createElement(Tooltip, {
      key: type,
      content: iconDescriptions[type],
      placement: "top"
    }, /*#__PURE__*/React.createElement(IconButton, {
      className: classNames((_classNames = {}, _defineProperty(_classNames, classes.activeIcon, align === type), _defineProperty(_classNames, classes.icon, align !== type), _classNames)),
      icon: icons[type],
      onClick: function onClick() {
        return _onClick(type);
      }
    }));
  })));
};

export default /*#__PURE__*/React.memo(VerticalAlignSettings);
//# sourceMappingURL=VerticalAlignSettings.js.map