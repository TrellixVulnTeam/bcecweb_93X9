{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/align/HorizontalAlignSettings.tsx"],"names":["React","css","useRecoilValue","classNames","plugins","Tooltip","IconButton","useEventActionHandler","UpdateElementActionEvent","activeElementAtom","elementWithChildrenByIdSelector","ContentWrapper","Accordion","classes","activeIcon","color","icon","icons","left","center","right","justify","iconDescriptions","defaultAlignValue","DEFAULT_ALIGNMENTS","Object","keys","getAlignValue","element","defaultAlign","data","settings","horizontalAlign","HorizontalAlignSettings","options","alignments","defaultAccordionValue","handler","activeElementId","align","updateElement","trigger","history","onClick","type","plugin","byType","find","pl","elementType","map","memo"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { css } from \"emotion\";\nimport { useRecoilValue } from \"recoil\";\nimport classNames from \"classnames\";\nimport { plugins } from \"@webiny/plugins\";\nimport {\n    PbEditorPageElementPlugin,\n    PbEditorElement,\n    PbEditorPageElementSettingsRenderComponentProps\n} from \"../../../../types\";\nimport { Tooltip } from \"@webiny/ui/Tooltip\";\nimport { IconButton } from \"@webiny/ui/Button\";\nimport { useEventActionHandler } from \"../../../hooks/useEventActionHandler\";\nimport { UpdateElementActionEvent } from \"../../../recoil/actions\";\nimport { activeElementAtom, elementWithChildrenByIdSelector } from \"../../../recoil/modules\";\n// Components\nimport { ContentWrapper } from \"../components/StyledComponents\";\nimport Accordion from \"../components/Accordion\";\n// Icons\nimport { ReactComponent as AlignTextLeftIcon } from \"./icons/format_align_left.svg\";\nimport { ReactComponent as AlignTextCenterIcon } from \"./icons/format_align_center.svg\";\nimport { ReactComponent as AlignTextRightIcon } from \"./icons/format_align_right.svg\";\nimport { ReactComponent as AlignTextJustifyIcon } from \"./icons/format_align_justify.svg\";\n\nconst classes = {\n    activeIcon: css({\n        \"&.mdc-icon-button\": {\n            color: \"var(--mdc-theme-primary)\"\n        }\n    }),\n    icon: css({\n        \"&.mdc-icon-button\": {\n            color: \"var(--mdc-theme-text-primary-on-background)\"\n        }\n    })\n};\n\ntype IconsType = {\n    [key: string]: React.ReactElement;\n};\n// Icons map for dynamic render\nconst icons: IconsType = {\n    left: <AlignTextLeftIcon />,\n    center: <AlignTextCenterIcon />,\n    right: <AlignTextRightIcon />,\n    justify: <AlignTextJustifyIcon />\n};\n\nconst iconDescriptions = {\n    left: \"Align left\",\n    center: \"Align center\",\n    right: \"Align right\",\n    justify: \"Align justify\"\n};\n\nconst defaultAlignValue = \"left\";\nconst DEFAULT_ALIGNMENTS = Object.keys(icons);\n\nconst getAlignValue = (element: PbEditorElement, defaultAlign: string): string => {\n    return element.data.settings?.horizontalAlign || defaultAlign;\n};\n\ntype AlignTypesType = \"left\" | \"center\" | \"right\" | \"justify\";\n\ntype HorizontalAlignActionPropsType = {\n    options: {\n        alignments: string[];\n    };\n};\nconst HorizontalAlignSettings: React.FunctionComponent<\n    HorizontalAlignActionPropsType & PbEditorPageElementSettingsRenderComponentProps\n> = ({ options: { alignments = DEFAULT_ALIGNMENTS }, defaultAccordionValue }) => {\n    const handler = useEventActionHandler();\n    const activeElementId = useRecoilValue(activeElementAtom);\n    const element = useRecoilValue(elementWithChildrenByIdSelector(activeElementId));\n    const align = getAlignValue(element, defaultAlignValue);\n\n    const updateElement = (element: PbEditorElement) => {\n        handler.trigger(\n            new UpdateElementActionEvent({\n                element,\n                history: true\n            })\n        );\n    };\n\n    const onClick = (type: AlignTypesType = defaultAlignValue) => {\n        updateElement({\n            ...element,\n            data: {\n                ...element.data,\n                settings: {\n                    ...element.data.settings,\n                    horizontalAlign: type\n                }\n            }\n        });\n    };\n\n    const plugin = plugins\n        .byType<PbEditorPageElementPlugin>(\"pb-editor-page-element\")\n        .find(pl => pl.elementType === element.type);\n\n    if (!plugin) {\n        return null;\n    }\n\n    return (\n        <Accordion title={\"Text align\"} defaultValue={defaultAccordionValue}>\n            <ContentWrapper>\n                {alignments.map(type => (\n                    <Tooltip key={type} content={iconDescriptions[type]} placement={\"top\"}>\n                        <IconButton\n                            className={classNames({\n                                [classes.activeIcon]: align === type,\n                                [classes.icon]: align !== type\n                            })}\n                            icon={icons[type]}\n                            onClick={() => onClick(type as AlignTypesType)}\n                        />\n                    </Tooltip>\n                ))}\n            </ContentWrapper>\n        </Accordion>\n    );\n};\n\nexport default React.memo(HorizontalAlignSettings);\n"],"file":"HorizontalAlignSettings.js"}