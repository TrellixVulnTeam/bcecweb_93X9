{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/border/BorderSettings.tsx"],"names":["React","useCallback","useMemo","useRecoilValue","get","set","merge","plugins","Tooltip","activeElementAtom","elementByIdSelector","uiAtom","useUpdateHandlers","applyFallbackDisplayMode","Accordion","ColorPicker","ContentWrapper","classes","BoxInputs","SelectField","Wrapper","options","DATA_NAMESPACE","BORDER_SETTINGS_COUNT","BorderSettings","defaultAccordionValue","displayMode","activeElementId","element","fallbackValue","mode","byType","find","pl","config","activeDisplayModeConfig","dataNamespace","postModifyElement","newElement","value","Object","keys","length","getUpdateValue","getUpdatePreview","getUpdateValueWithDisplayMode","name","updateColor","updateColorPreview","border","borderStyle","icon","simpleGrid","map","option","color","label","key","memo"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport get from \"lodash/get\";\nimport set from \"lodash/set\";\nimport merge from \"lodash/merge\";\nimport { plugins } from \"@webiny/plugins\";\nimport { Tooltip } from \"@webiny/ui/Tooltip\";\nimport {\n    PbEditorPageElementSettingsRenderComponentProps,\n    PbEditorResponsiveModePlugin\n} from \"../../../../types\";\nimport { activeElementAtom, elementByIdSelector, uiAtom } from \"../../../recoil/modules\";\nimport useUpdateHandlers from \"../useUpdateHandlers\";\nimport { applyFallbackDisplayMode } from \"../elementSettingsUtils\";\n// Components\nimport Accordion from \"../components/Accordion\";\nimport ColorPicker from \"../components/ColorPicker\";\nimport { ContentWrapper, classes } from \"../components/StyledComponents\";\nimport BoxInputs from \"../components/BoxInputs\";\nimport SelectField from \"../components/SelectField\";\nimport Wrapper from \"../components/Wrapper\";\n\nconst options = [\"none\", \"solid\", \"dashed\", \"dotted\"];\nconst DATA_NAMESPACE = \"data.settings.border\";\nconst BORDER_SETTINGS_COUNT = 4;\n\nconst BorderSettings: React.FunctionComponent<PbEditorPageElementSettingsRenderComponentProps> = ({\n    defaultAccordionValue\n}) => {\n    const { displayMode } = useRecoilValue(uiAtom);\n    const activeElementId = useRecoilValue(activeElementAtom);\n    const element = useRecoilValue(elementByIdSelector(activeElementId));\n\n    const fallbackValue = useMemo(() => {\n        return applyFallbackDisplayMode(displayMode, mode =>\n            get(element, `${DATA_NAMESPACE}.${mode}`)\n        );\n    }, [displayMode]);\n\n    const { config: activeDisplayModeConfig } = useMemo(() => {\n        return plugins\n            .byType<PbEditorResponsiveModePlugin>(\"pb-editor-responsive-mode\")\n            .find(pl => pl.config.displayMode === displayMode);\n    }, [displayMode]);\n\n    const { getUpdateValue, getUpdatePreview } = useUpdateHandlers({\n        element,\n        dataNamespace: DATA_NAMESPACE,\n        postModifyElement: ({ newElement }) => {\n            const value = get(newElement, `${DATA_NAMESPACE}.${displayMode}`, {});\n            // if only partial settings are there, merge it with fallback value\n            if (Object.keys(value).length < BORDER_SETTINGS_COUNT) {\n                set(newElement, `${DATA_NAMESPACE}.${displayMode}`, merge(fallbackValue, value));\n            }\n        }\n    });\n\n    const getUpdateValueWithDisplayMode = useCallback(\n        name => value => getUpdateValue(`${displayMode}.${name}`)(value),\n        [getUpdateValue, displayMode]\n    );\n\n    const updateColor = useCallback(\n        value => getUpdateValue(`${displayMode}.color`)(value),\n        [getUpdateValue, displayMode]\n    );\n\n    const updateColorPreview = useCallback(\n        value => getUpdatePreview(`${displayMode}.color`)(value),\n        [getUpdatePreview, displayMode]\n    );\n\n    const border = get(element, `${DATA_NAMESPACE}.${displayMode}`, fallbackValue || {});\n    const borderStyle = get(border, `style`, \"none\");\n\n    return (\n        <Accordion\n            title={\"Border\"}\n            defaultValue={defaultAccordionValue}\n            icon={\n                <Tooltip content={`Changes will apply for ${activeDisplayModeConfig.displayMode}`}>\n                    {activeDisplayModeConfig.icon}\n                </Tooltip>\n            }\n        >\n            <ContentWrapper direction={\"column\"}>\n                <Wrapper label={\"Style\"} containerClassName={classes.simpleGrid}>\n                    <SelectField\n                        value={borderStyle}\n                        onChange={getUpdateValue(`${displayMode}.style`)}\n                    >\n                        {options.map(option => (\n                            <option key={option} value={option}>\n                                {option}\n                            </option>\n                        ))}\n                    </SelectField>\n                </Wrapper>\n                <ColorPicker\n                    className={classes.simpleGrid}\n                    label={\"Color\"}\n                    value={border.color}\n                    updateValue={updateColor}\n                    updatePreview={updateColorPreview}\n                />\n                <BoxInputs\n                    label={\"Width\"}\n                    value={border}\n                    valueKey={\"width\"}\n                    getUpdateValue={getUpdateValueWithDisplayMode}\n                />\n                <BoxInputs\n                    label={\"Radius\"}\n                    value={border}\n                    valueKey={\"radius\"}\n                    getUpdateValue={getUpdateValueWithDisplayMode}\n                    sides={[\n                        {\n                            label: \"Top left\",\n                            key: \"topLeft\"\n                        },\n                        {\n                            label: \"Top right\",\n                            key: \"topRight\"\n                        },\n                        {\n                            label: \"Bottom left\",\n                            key: \"bottomLeft\"\n                        },\n                        {\n                            label: \"Bottom right\",\n                            key: \"bottomRight\"\n                        }\n                    ]}\n                />\n            </ContentWrapper>\n        </Accordion>\n    );\n};\nexport default React.memo(BorderSettings);\n"],"file":"BorderSettings.js"}