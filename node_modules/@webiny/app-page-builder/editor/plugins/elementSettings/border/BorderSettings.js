import React, { useCallback, useMemo } from "react";
import { useRecoilValue } from "recoil";
import get from "lodash/get";
import set from "lodash/set";
import merge from "lodash/merge";
import { plugins } from "@webiny/plugins";
import { Tooltip } from "@webiny/ui/Tooltip";
import { activeElementAtom, elementByIdSelector, uiAtom } from "../../../recoil/modules";
import useUpdateHandlers from "../useUpdateHandlers";
import { applyFallbackDisplayMode } from "../elementSettingsUtils"; // Components

import Accordion from "../components/Accordion";
import ColorPicker from "../components/ColorPicker";
import { ContentWrapper, classes } from "../components/StyledComponents";
import BoxInputs from "../components/BoxInputs";
import SelectField from "../components/SelectField";
import Wrapper from "../components/Wrapper";
var options = ["none", "solid", "dashed", "dotted"];
var DATA_NAMESPACE = "data.settings.border";
var BORDER_SETTINGS_COUNT = 4;

var BorderSettings = function BorderSettings(_ref) {
  var defaultAccordionValue = _ref.defaultAccordionValue;

  var _useRecoilValue = useRecoilValue(uiAtom),
      displayMode = _useRecoilValue.displayMode;

  var activeElementId = useRecoilValue(activeElementAtom);
  var element = useRecoilValue(elementByIdSelector(activeElementId));
  var fallbackValue = useMemo(function () {
    return applyFallbackDisplayMode(displayMode, function (mode) {
      return get(element, "".concat(DATA_NAMESPACE, ".").concat(mode));
    });
  }, [displayMode]);

  var _useMemo = useMemo(function () {
    return plugins.byType("pb-editor-responsive-mode").find(function (pl) {
      return pl.config.displayMode === displayMode;
    });
  }, [displayMode]),
      activeDisplayModeConfig = _useMemo.config;

  var _useUpdateHandlers = useUpdateHandlers({
    element: element,
    dataNamespace: DATA_NAMESPACE,
    postModifyElement: function postModifyElement(_ref2) {
      var newElement = _ref2.newElement;
      var value = get(newElement, "".concat(DATA_NAMESPACE, ".").concat(displayMode), {}); // if only partial settings are there, merge it with fallback value

      // if only partial settings are there, merge it with fallback value
      if (Object.keys(value).length < BORDER_SETTINGS_COUNT) {
        set(newElement, "".concat(DATA_NAMESPACE, ".").concat(displayMode), merge(fallbackValue, value));
      }
    }
  }),
      getUpdateValue = _useUpdateHandlers.getUpdateValue,
      getUpdatePreview = _useUpdateHandlers.getUpdatePreview;

  var getUpdateValueWithDisplayMode = useCallback(function (name) {
    return function (value) {
      return getUpdateValue("".concat(displayMode, ".").concat(name))(value);
    };
  }, [getUpdateValue, displayMode]);
  var updateColor = useCallback(function (value) {
    return getUpdateValue("".concat(displayMode, ".color"))(value);
  }, [getUpdateValue, displayMode]);
  var updateColorPreview = useCallback(function (value) {
    return getUpdatePreview("".concat(displayMode, ".color"))(value);
  }, [getUpdatePreview, displayMode]);
  var border = get(element, "".concat(DATA_NAMESPACE, ".").concat(displayMode), fallbackValue || {});
  var borderStyle = get(border, "style", "none");
  return /*#__PURE__*/React.createElement(Accordion, {
    title: "Border",
    defaultValue: defaultAccordionValue,
    icon: /*#__PURE__*/React.createElement(Tooltip, {
      content: "Changes will apply for ".concat(activeDisplayModeConfig.displayMode)
    }, activeDisplayModeConfig.icon)
  }, /*#__PURE__*/React.createElement(ContentWrapper, {
    direction: "column"
  }, /*#__PURE__*/React.createElement(Wrapper, {
    label: "Style",
    containerClassName: classes.simpleGrid
  }, /*#__PURE__*/React.createElement(SelectField, {
    value: borderStyle,
    onChange: getUpdateValue("".concat(displayMode, ".style"))
  }, options.map(function (option) {
    return /*#__PURE__*/React.createElement("option", {
      key: option,
      value: option
    }, option);
  }))), /*#__PURE__*/React.createElement(ColorPicker, {
    className: classes.simpleGrid,
    label: "Color",
    value: border.color,
    updateValue: updateColor,
    updatePreview: updateColorPreview
  }), /*#__PURE__*/React.createElement(BoxInputs, {
    label: "Width",
    value: border,
    valueKey: "width",
    getUpdateValue: getUpdateValueWithDisplayMode
  }), /*#__PURE__*/React.createElement(BoxInputs, {
    label: "Radius",
    value: border,
    valueKey: "radius",
    getUpdateValue: getUpdateValueWithDisplayMode,
    sides: [{
      label: "Top left",
      key: "topLeft"
    }, {
      label: "Top right",
      key: "topRight"
    }, {
      label: "Bottom left",
      key: "bottomLeft"
    }, {
      label: "Bottom right",
      key: "bottomRight"
    }]
  })));
};

export default /*#__PURE__*/React.memo(BorderSettings);
//# sourceMappingURL=BorderSettings.js.map