import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { useEffect } from "react";
import { renderToStaticMarkup } from "react-dom/server";
import { plugins } from "@webiny/plugins";
import domToImage from "./domToImage";

var replaceContent = function replaceContent(element, doc) {
  var pl = plugins.byType("pb-editor-page-element").find(function (pl) {
    return pl.elementType === element.type;
  });

  if (!pl) {
    return doc;
  }

  if (typeof pl.renderElementPreview === "function") {
    var elementNode = document.getElementById(element.id);

    if (!elementNode) {
      return doc;
    }

    var newContentString = renderToStaticMarkup(pl.renderElementPreview({
      element: element,
      width: elementNode.offsetWidth || 0,
      height: elementNode.offsetHeight || 0
    }));
    var wrapper = document.createElement("div");
    wrapper.innerHTML = newContentString;
    var newContentDoc = wrapper.firstChild; // Element id must not start with a number.

    var validId = Number.isNaN(parseInt(element.id[0]));

    if (validId) {
      var docElement = doc.querySelector("#".concat(element.id));
      docElement && docElement.replaceWith(newContentDoc);
    } else {
      console.warn("Element \"id\" must not start with a number.");
    }
  }

  if (element.elements.length) {
    element.elements.forEach(function (el) {
      doc = replaceContent(el, doc);
    });
  }

  return doc;
};

var generateImage = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(element, onChange) {
    var node, editor, dataUrl;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            node = document.getElementById(element.id);

            if (node) {
              _context.next = 3;
              break;
            }

            return _context.abrupt("return");

          case 3:
            editor = document.querySelector(".pb-editor"); // Hide element highlight while creating the image

            editor.classList.add("pb-editor-no-highlight");
            _context.next = 7;
            return domToImage.toPng(node, {
              onDocument: function onDocument(doc) {
                return replaceContent(element, doc);
              },
              width: 1000
            });

          case 7:
            dataUrl = _context.sent;
            editor.classList.remove("pb-editor-no-highlight");
            onChange(dataUrl);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function generateImage(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var ElementPreview = function ElementPreview(_ref2) {
  var element = _ref2.element,
      onChange = _ref2.onChange;
  useEffect(function () {
    generateImage(element, onChange);
  });
  return null;
};

export default ElementPreview;
//# sourceMappingURL=ElementPreview.js.map