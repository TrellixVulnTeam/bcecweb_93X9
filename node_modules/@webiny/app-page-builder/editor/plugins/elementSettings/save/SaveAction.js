import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useEffect, useCallback, useState } from "react";
import dataURLtoBlob from "dataurl-to-blob";
import SaveDialog from "./SaveDialog";
import pick from "lodash.pick";
import get from "lodash/get";
import createElementPlugin from "../../../../admin/utils/createElementPlugin";
import createBlockPlugin from "../../../../admin/utils/createBlockPlugin";
import { activeElementAtom, elementByIdSelector } from "../../../recoil/modules";
import { useApolloClient } from "@apollo/react-hooks";
import { plugins } from "@webiny/plugins";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { useKeyHandler } from "../../../hooks/useKeyHandler";
import { CREATE_PAGE_ELEMENT, UPDATE_PAGE_ELEMENT } from "../../../../admin/graphql/pages";
import { useRecoilValue } from "recoil";
import { CREATE_FILE } from "./SaveDialog/graphql";
import { useEventActionHandler } from "../../../hooks/useEventActionHandler";

var removeIds = function removeIds(el) {
  delete el.id;
  el.elements = el.elements.map(function (el) {
    delete el.id;

    if (el.elements && el.elements.length) {
      el = removeIds(el);
    }

    return el;
  });
  return el;
};

function getDataURLImageDimensions(dataURL) {
  return new Promise(function (resolve) {
    var image = new window.Image();

    image.onload = function () {
      resolve({
        width: image.width,
        height: image.height
      });
    };

    image.src = dataURL;
  });
}

var pluginOnSave = function pluginOnSave(element) {
  var plugin = plugins.byType("pb-editor-page-element-save-action").find(function (pl) {
    return pl.elementType === element.type;
  });

  if (!plugin) {
    return element;
  }

  return plugin.onSave(element);
};

var SaveAction = function SaveAction(_ref) {
  var children = _ref.children;
  var activeElementId = useRecoilValue(activeElementAtom);
  var element = useRecoilValue(elementByIdSelector(activeElementId));

  var _useKeyHandler = useKeyHandler(),
      addKeyHandler = _useKeyHandler.addKeyHandler,
      removeKeyHandler = _useKeyHandler.removeKeyHandler;

  var _useEventActionHandle = useEventActionHandler(),
      getElementTree = _useEventActionHandle.getElementTree;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isDialogOpened = _useState2[0],
      setOpenDialog = _useState2[1];

  var client = useApolloClient();

  var onSubmit = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(formData) {
      var meta, blob, fileUploaderPlugin, previewImage, createdImageResponse, createdImage, query, _yield$client$mutate, res, mutationName, data;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.t0 = pluginOnSave;
              _context.t1 = removeIds;
              _context.next = 4;
              return getElementTree(element);

            case 4:
              _context.t2 = _context.sent;
              _context.t3 = (0, _context.t1)(_context.t2);
              formData.content = (0, _context.t0)(_context.t3);
              _context.next = 9;
              return getDataURLImageDimensions(formData.preview);

            case 9:
              meta = _context.sent;
              blob = dataURLtoBlob(formData.preview);
              blob.name = "pb-editor-page-element-" + element.id + ".png";
              fileUploaderPlugin = plugins.byName("app-file-manager-storage");
              _context.next = 15;
              return fileUploaderPlugin.upload(blob, {
                apolloClient: client
              });

            case 15:
              previewImage = _context.sent;
              previewImage.meta = meta;
              previewImage.meta.private = true;
              _context.next = 20;
              return client.mutate({
                mutation: CREATE_FILE,
                variables: {
                  data: previewImage
                }
              });

            case 20:
              createdImageResponse = _context.sent;
              createdImage = get(createdImageResponse, "data.fileManager.createFile", {});

              if (!createdImage.error) {
                _context.next = 26;
                break;
              }

              return _context.abrupt("return", showSnackbar("Image could not be saved."));

            case 26:
              if (createdImage.data.id) {
                _context.next = 28;
                break;
              }

              return _context.abrupt("return", showSnackbar("Missing saved image id."));

            case 28:
              formData.preview = createdImage.data;
              query = formData.overwrite ? UPDATE_PAGE_ELEMENT : CREATE_PAGE_ELEMENT;
              _context.next = 32;
              return client.mutate({
                mutation: query,
                variables: formData.overwrite ? {
                  id: element.source,
                  data: pick(formData, ["content", "id", "preview"])
                } : {
                  data: pick(formData, ["type", "category", "preview", "name", "content"])
                }
              });

            case 32:
              _yield$client$mutate = _context.sent;
              res = _yield$client$mutate.data;
              hideDialog();
              mutationName = formData.overwrite ? "updatePageElement" : "createPageElement";
              data = get(res, "pageBuilder.".concat(mutationName, ".data"));

              if (data.type === "block") {
                createBlockPlugin(data);
              } else {
                createElementPlugin(data);
              }

              showSnackbar( /*#__PURE__*/React.createElement("span", null, formData.type[0].toUpperCase() + formData.type.slice(1), " ", /*#__PURE__*/React.createElement("strong", null, data.name), " was saved!"));

            case 39:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function onSubmit(_x) {
      return _ref2.apply(this, arguments);
    };
  }();

  useEffect(function () {
    isDialogOpened ? addKeyHandler("escape", hideDialog) : removeKeyHandler("escape");
  }, [isDialogOpened]);
  var showDialog = useCallback(function () {
    return setOpenDialog(true);
  }, []);
  var hideDialog = useCallback(function () {
    return setOpenDialog(false);
  }, []);

  if (!element) {
    return null;
  }

  var plugin = plugins.byType("pb-editor-page-element").find(function (pl) {
    return pl.elementType === element.type;
  });

  if (!plugin) {
    return null;
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SaveDialog, {
    key: element.id,
    element: element,
    open: isDialogOpened,
    onClose: hideDialog,
    onSubmit: onSubmit,
    type: element.type === "block" ? "block" : "element"
  }), /*#__PURE__*/React.cloneElement(children, {
    onClick: showDialog
  }));
};

export default SaveAction;
//# sourceMappingURL=SaveAction.js.map