{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/save/SaveDialog.tsx"],"names":["React","useState","css","plugins","ElementPreview","CircularProgress","Dialog","DialogTitle","DialogContent","DialogActions","DialogButton","DialogCancel","Input","Switch","Select","Grid","Cell","Form","styled","validation","narrowDialog","width","minWidth","PreviewBox","minHeight","border","backgroundColor","display","justifyContent","alignItems","img","maxHeight","maxWidth","SaveDialog","props","element","open","onClose","onSubmit","type","loading","setLoading","blockCategoriesOptions","byType","map","item","value","categoryName","label","title","data","category","submit","Bind","source","overwrite","create","onChange","id","memo","nextProps"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { css } from \"emotion\";\nimport { plugins } from \"@webiny/plugins\";\nimport ElementPreview from \"./SaveDialog/ElementPreview\";\nimport { CircularProgress } from \"@webiny/ui/Progress\";\n\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    DialogButton,\n    DialogCancel,\n    DialogOnClose\n} from \"@webiny/ui/Dialog\";\nimport { Input } from \"@webiny/ui/Input\";\nimport { Switch } from \"@webiny/ui/Switch\";\nimport { Select } from \"@webiny/ui/Select\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { Form, FormOnSubmit } from \"@webiny/form\";\nimport styled from \"@emotion/styled\";\nimport { validation } from \"@webiny/validation\";\nimport { PbEditorBlockCategoryPlugin, PbEditorElement } from \"../../../../types\";\n\nconst narrowDialog = css({\n    \".mdc-dialog__surface\": {\n        width: 600,\n        minWidth: 600\n    }\n});\n\nconst PreviewBox = styled(\"div\")({\n    width: 500,\n    minHeight: 250,\n    border: \"1px solid var(--mdc-theme-on-background)\",\n    backgroundColor: \"#fff\", // this must always be white\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    img: {\n        maxHeight: 500,\n        maxWidth: 500\n    }\n});\n\ntype Props = {\n    open: boolean;\n    onClose: DialogOnClose;\n    onSubmit: FormOnSubmit;\n    element: PbEditorElement;\n    type: string;\n};\n\nconst SaveDialog = (props: Props) => {\n    const { element, open, onClose, onSubmit, type } = props;\n    const [loading, setLoading] = useState(false);\n\n    const blockCategoriesOptions = plugins\n        .byType<PbEditorBlockCategoryPlugin>(\"pb-editor-block-category\")\n        .map(item => {\n            return {\n                value: item.categoryName,\n                label: item.title\n            };\n        });\n\n    return (\n        <Dialog open={open} onClose={onClose} className={narrowDialog}>\n            <Form\n                onSubmit={async data => {\n                    setLoading(true);\n                    await onSubmit(data);\n                    setLoading(false);\n                }}\n                data={{ type, category: \"general\" }}\n            >\n                {({ data, submit, Bind }) => (\n                    <React.Fragment>\n                        <DialogTitle>Save {type}</DialogTitle>\n                        <DialogContent>\n                            {loading && <CircularProgress label={`Saving ${type}...`} />}\n\n                            {element.source && (\n                                <Grid>\n                                    <Cell span={12}>\n                                        <Bind name=\"overwrite\">\n                                            <Switch label=\"Update existing\" />\n                                        </Bind>\n                                    </Cell>\n                                </Grid>\n                            )}\n                            {!data.overwrite && (\n                                <Grid>\n                                    <Cell span={12}>\n                                        <Bind\n                                            name={\"name\"}\n                                            validators={validation.create(\"required\")}\n                                        >\n                                            <Input label={\"Name\"} autoFocus />\n                                        </Bind>\n                                    </Cell>\n                                </Grid>\n                            )}\n                            {data.type === \"block\" && !data.overwrite && (\n                                <>\n                                    <Grid>\n                                        <Cell span={12}>\n                                            <Bind\n                                                name=\"category\"\n                                                validators={validation.create(\"required\")}\n                                            >\n                                                <Select\n                                                    label=\"Category\"\n                                                    description=\"Select a block category\"\n                                                    options={blockCategoriesOptions}\n                                                />\n                                            </Bind>\n                                        </Cell>\n                                    </Grid>\n                                </>\n                            )}\n                            <Grid>\n                                <Cell span={12}>\n                                    <PreviewBox>\n                                        <Bind name={\"preview\"}>\n                                            {({ value, onChange }) =>\n                                                value ? (\n                                                    <img src={value} alt={\"\"} />\n                                                ) : open ? (\n                                                    <ElementPreview\n                                                        key={element.id}\n                                                        onChange={onChange}\n                                                        element={element}\n                                                    />\n                                                ) : null\n                                            }\n                                        </Bind>\n                                    </PreviewBox>\n                                </Cell>\n                            </Grid>\n                        </DialogContent>\n                        <DialogActions>\n                            <DialogCancel>Cancel</DialogCancel>\n                            <DialogButton onClick={submit}>Save</DialogButton>\n                        </DialogActions>\n                    </React.Fragment>\n                )}\n            </Form>\n        </Dialog>\n    );\n};\n\nexport default React.memo(SaveDialog, (props, nextProps) => {\n    return props.open === nextProps.open;\n});\n"],"file":"SaveDialog.js"}