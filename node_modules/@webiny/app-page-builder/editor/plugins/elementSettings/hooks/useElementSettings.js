import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import { useEffect, useCallback } from "react";
import { useRecoilState, useRecoilValue } from "recoil";
import { plugins } from "@webiny/plugins";
import { useKeyHandler } from "../../../hooks/useKeyHandler";
import { userElementSettingsPlugins } from "../../../helpers";
import { activeElementAtom, elementByIdSelector } from "../../../recoil/modules";

var getElementActions = function getElementActions(plugin) {
  if (!plugin || !plugin.settings) {
    return [];
  }

  var pluginSettings = [].concat(_toConsumableArray(userElementSettingsPlugins(plugin.elementType)), _toConsumableArray(plugin.settings));
  var actions = pluginSettings.map(function (pl) {
    if (typeof pl === "string") {
      return {
        plugin: plugins.byName(pl),
        options: {}
      };
    }

    if (Array.isArray(pl)) {
      return {
        plugin: plugins.byName(pl[0]),
        options: pl[1]
      };
    }

    return null;
  });
  var elementActions = [].concat(_toConsumableArray(actions), [{
    plugin: plugins.byName("pb-editor-page-element-settings-save"),
    options: {}
  }]);
  return elementActions // Eliminate empty plugins
  .filter(function (pl) {
    return pl && pl.plugin;
  }) // Eliminate duplicate plugins
  .filter(function (pl, index, array) {
    return array.findIndex(function (item) {
      return item.plugin.name === pl.plugin.name;
    }) === index;
  });
};

var useElementSettings = function useElementSettings() {
  var _useRecoilState = useRecoilState(activeElementAtom),
      _useRecoilState2 = _slicedToArray(_useRecoilState, 2),
      activeElement = _useRecoilState2[0],
      setActiveElementAtomValue = _useRecoilState2[1];

  var element = useRecoilValue(elementByIdSelector(activeElement));
  var elementType = element ? element.type : undefined;
  var deactivateElement = useCallback(function () {
    3;
    setActiveElementAtomValue(null);
  }, []);

  var _useKeyHandler = useKeyHandler(),
      addKeyHandler = _useKeyHandler.addKeyHandler,
      removeKeyHandler = _useKeyHandler.removeKeyHandler;

  useEffect(function () {
    addKeyHandler("escape", function (e) {
      e.preventDefault();
      deactivateElement();
    });
    return function () {
      return removeKeyHandler("escape");
    };
  });
  var plugin = plugins.byType("pb-editor-page-element").find(function (pl) {
    return pl.elementType === elementType;
  });
  return getElementActions(plugin);
};

export default useElementSettings;
//# sourceMappingURL=useElementSettings.js.map