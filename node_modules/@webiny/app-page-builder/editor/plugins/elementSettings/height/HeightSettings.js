import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React from "react";
import { css } from "emotion";
import { useRecoilValue } from "recoil";
import merge from "lodash/merge";
import set from "lodash/set";
import get from "lodash/get";
import { plugins } from "@webiny/plugins";
import { Tooltip } from "@webiny/ui/Tooltip";
import { Form } from "@webiny/form";
import { useEventActionHandler } from "../../../hooks/useEventActionHandler";
import { UpdateElementActionEvent } from "../../../recoil/actions";
import { uiAtom, activeElementAtom, elementWithChildrenByIdSelector } from "../../../recoil/modules";
import { applyFallbackDisplayMode } from "../elementSettingsUtils"; // Components

import { classes } from "../components/StyledComponents";
import Accordion from "../components/Accordion";
import Wrapper from "../components/Wrapper";
import SpacingPicker from "../components/SpacingPicker";
var rightCellStyle = /*#__PURE__*/css({
  justifySelf: "end"
}, "label:rightCellStyle;");
var spacingPickerStyle = /*#__PURE__*/css({
  width: "120px",
  "& .inner-wrapper": {
    display: "flex"
  }
}, "label:spacingPickerStyle;");
var heightUnitOptions = [{
  label: "%",
  value: "%"
}, {
  label: "px",
  value: "px"
}, {
  label: "em",
  value: "em"
}, {
  label: "vh",
  value: "vh"
}, {
  label: "auto",
  value: "auto"
}];
var HeightUnits;

(function (HeightUnits) {
  HeightUnits["percentage"] = "%";
  HeightUnits["px"] = "px";
  HeightUnits["em"] = "em";
  HeightUnits["vh"] = "vh";
  HeightUnits["auto"] = "auto";
})(HeightUnits || (HeightUnits = {}));

var validateHeight = function validateHeight(value) {
  if (!value) {
    return null;
  }

  var parsedValue = parseInt(value);

  if (isNaN(parsedValue) && value !== HeightUnits.auto) {
    throw Error("Enter a valid number!");
  }

  if (parsedValue < 0) {
    throw Error("Height can't be negative!");
  }

  if (value.endsWith(HeightUnits.percentage) || value.endsWith(HeightUnits.px) || value.endsWith(HeightUnits.em) || value.endsWith(HeightUnits.vh) || value.endsWith(HeightUnits.auto)) {
    return true;
  }

  throw Error("Specify a valid value!");
};

var DATA_NAMESPACE = "data.settings.height";

var Settings = function Settings(_ref) {
  var defaultAccordionValue = _ref.defaultAccordionValue;

  var _useRecoilValue = useRecoilValue(uiAtom),
      displayMode = _useRecoilValue.displayMode;

  var handler = useEventActionHandler();
  var activeElementId = useRecoilValue(activeElementAtom);
  var element = useRecoilValue(elementWithChildrenByIdSelector(activeElementId));

  var updateSettings = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data, form) {
      var valid, newElement;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return form.validate();

            case 2:
              valid = _context.sent;

              if (valid) {
                _context.next = 5;
                break;
              }

              return _context.abrupt("return");

            case 5:
              newElement = merge({}, element, set({}, "".concat(DATA_NAMESPACE, ".").concat(displayMode), data));
              return _context.abrupt("return", handler.trigger(new UpdateElementActionEvent({
                element: newElement,
                history: true
              })));

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function updateSettings(_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }();

  var _React$useMemo = React.useMemo(function () {
    return plugins.byType("pb-editor-responsive-mode").find(function (pl) {
      return pl.config.displayMode === displayMode;
    });
  }, [displayMode]),
      activeDisplayModeConfig = _React$useMemo.config;

  var settings = React.useMemo(function () {
    var fallbackValue = applyFallbackDisplayMode(displayMode, function (mode) {
      return get(element, "".concat(DATA_NAMESPACE, ".").concat(mode));
    });
    return get(element, "".concat(DATA_NAMESPACE, ".").concat(displayMode), fallbackValue || {
      value: "100%"
    });
  }, [displayMode, element]);
  return /*#__PURE__*/React.createElement(Accordion, {
    title: "Height",
    defaultValue: defaultAccordionValue,
    icon: /*#__PURE__*/React.createElement(Tooltip, {
      content: "Changes will apply for ".concat(activeDisplayModeConfig.displayMode)
    }, activeDisplayModeConfig.icon)
  }, /*#__PURE__*/React.createElement(Form, {
    data: settings,
    onChange: updateSettings
  }, function (_ref3) {
    var Bind = _ref3.Bind;
    return /*#__PURE__*/React.createElement(Wrapper, {
      label: "Height",
      containerClassName: classes.simpleGrid,
      rightCellClassName: rightCellStyle
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "value",
      validators: validateHeight
    }, function (_ref4) {
      var value = _ref4.value,
          onChange = _ref4.onChange,
          validation = _ref4.validation;
      return /*#__PURE__*/React.createElement(SpacingPicker, {
        value: value,
        onChange: onChange,
        validation: validation,
        options: heightUnitOptions,
        className: spacingPickerStyle,
        useDefaultStyle: false
      });
    }));
  }));
};

export default /*#__PURE__*/React.memo(Settings);
//# sourceMappingURL=HeightSettings.js.map