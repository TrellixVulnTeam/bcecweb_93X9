{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/background/BackgroundSettings.tsx"],"names":["React","useCallback","useMemo","css","useRecoilValue","startCase","get","set","merge","Tooltip","plugins","Cell","Grid","SingleImageUpload","activeElementAtom","elementWithChildrenByIdSelector","uiAtom","useUpdateHandlers","Wrapper","SelectField","Accordion","ColorPicker","ContentWrapper","classes","applyFallbackDisplayMode","positions","imageSelect","width","DATA_NAMESPACE","BACKGROUND_SETTINGS_COUNT","BackgroundSettings","options","defaultAccordionValue","displayMode","activeElementId","element","dataNamespace","postModifyElement","newElement","value","Object","keys","length","fallbackValue","getUpdateValue","getUpdatePreview","byType","find","pl","config","activeDisplayModeConfig","setImage","setScaling","setPosition","setColor","onColorChange","mode","background","backgroundColor","color","backgroundImage","image","backgroundImageScaling","scaling","backgroundImagePosition","position","file","backgroundImageSrc","src","icon","simpleGrid","map","memo"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo } from \"react\";\nimport { css } from \"emotion\";\nimport { useRecoilValue } from \"recoil\";\nimport startCase from \"lodash/startCase\";\nimport get from \"lodash/get\";\nimport set from \"lodash/set\";\nimport merge from \"lodash/merge\";\nimport { Tooltip } from \"@webiny/ui/Tooltip\";\nimport { plugins } from \"@webiny/plugins\";\nimport { Cell, Grid } from \"@webiny/ui/Grid\";\nimport SingleImageUpload from \"@webiny/app-admin/components/SingleImageUpload\";\nimport {\n    PbEditorPageElementSettingsRenderComponentProps,\n    PbEditorResponsiveModePlugin\n} from \"~/types\";\nimport {\n    activeElementAtom,\n    elementWithChildrenByIdSelector,\n    uiAtom\n} from \"../../../recoil/modules\";\nimport useUpdateHandlers from \"../useUpdateHandlers\";\n// Components\nimport Wrapper from \"../components/Wrapper\";\nimport SelectField from \"../components/SelectField\";\nimport Accordion from \"../components/Accordion\";\nimport ColorPicker from \"../components/ColorPicker\";\nimport { ContentWrapper, classes } from \"../components/StyledComponents\";\nimport { applyFallbackDisplayMode } from \"../elementSettingsUtils\";\n\nconst positions = [\n    \"top left\",\n    \"top\",\n    \"top right\",\n    \"center left\",\n    \"center\",\n    \"center right\",\n    \"bottom left\",\n    \"bottom center\",\n    \"bottom right\"\n];\n\nconst imageSelect = css({\n    width: \"100%\"\n});\n\nconst DATA_NAMESPACE = \"data.settings.background\";\nconst BACKGROUND_SETTINGS_COUNT = 2;\n\ntype SettingsPropsType = {\n    options: {\n        [key: string]: any;\n    };\n};\nconst BackgroundSettings: React.FunctionComponent<\n    SettingsPropsType & PbEditorPageElementSettingsRenderComponentProps\n> = ({ options, defaultAccordionValue }) => {\n    const { displayMode } = useRecoilValue(uiAtom);\n    const activeElementId = useRecoilValue(activeElementAtom);\n    const element = useRecoilValue(elementWithChildrenByIdSelector(activeElementId));\n    const { getUpdateValue, getUpdatePreview } = useUpdateHandlers({\n        element,\n        dataNamespace: DATA_NAMESPACE,\n        postModifyElement: ({ newElement }) => {\n            const value = get(newElement, `${DATA_NAMESPACE}.${displayMode}`, {});\n            // if only partial settings are there, merge it with fallback value\n            if (Object.keys(value).length < BACKGROUND_SETTINGS_COUNT) {\n                set(newElement, `${DATA_NAMESPACE}.${displayMode}`, merge(fallbackValue, value));\n            }\n        }\n    });\n\n    const { config: activeDisplayModeConfig } = useMemo(() => {\n        return plugins\n            .byType<PbEditorResponsiveModePlugin>(\"pb-editor-responsive-mode\")\n            .find(pl => pl.config.displayMode === displayMode);\n    }, [displayMode]);\n\n    const setImage = useCallback(\n        value => getUpdateValue(`${displayMode}.image.file`)(value),\n        [getUpdateValue, displayMode]\n    );\n    const setScaling = useCallback(\n        value => getUpdateValue(`${displayMode}.image.scaling`)(value),\n        [getUpdateValue, displayMode]\n    );\n    const setPosition = useCallback(\n        value => getUpdateValue(`${displayMode}.image.position`)(value),\n        [getUpdateValue, displayMode]\n    );\n    const setColor = useCallback(\n        value => getUpdateValue(`${displayMode}.color`)(value),\n        [getUpdateValue, displayMode]\n    );\n    const onColorChange = useCallback(\n        value => getUpdatePreview(`${displayMode}.color`)(value),\n        [getUpdatePreview, displayMode]\n    );\n\n    const fallbackValue = useMemo(\n        () =>\n            applyFallbackDisplayMode(displayMode, mode =>\n                get(element, `${DATA_NAMESPACE}.${mode}`)\n            ),\n        [displayMode, element]\n    );\n\n    const background = get(element, `${DATA_NAMESPACE}.${displayMode}`, fallbackValue || {});\n    const { color: backgroundColor, image: backgroundImage } = background;\n    const { scaling: backgroundImageScaling, position: backgroundImagePosition } =\n        backgroundImage || {};\n    const { src: backgroundImageSrc } = backgroundImage?.file || {};\n\n    return (\n        <Accordion\n            title={\"Background\"}\n            defaultValue={defaultAccordionValue}\n            icon={\n                <Tooltip content={`Changes will apply for ${activeDisplayModeConfig.displayMode}`}>\n                    {activeDisplayModeConfig.icon}\n                </Tooltip>\n            }\n        >\n            <ContentWrapper direction={\"column\"}>\n                <Grid className={classes.simpleGrid}>\n                    <Cell span={12}>\n                        <ColorPicker\n                            label={\"Color\"}\n                            value={backgroundColor}\n                            updatePreview={onColorChange}\n                            updateValue={setColor}\n                        />\n                    </Cell>\n                </Grid>\n                {options.image !== false && (\n                    <React.Fragment>\n                        <Wrapper label={\"Image\"} containerClassName={classes.simpleGrid}>\n                            <SingleImageUpload\n                                className={imageSelect}\n                                onChange={setImage}\n                                value={{ src: backgroundImageSrc }}\n                            />\n                        </Wrapper>\n                        <Wrapper label={\"Scaling\"} containerClassName={classes.simpleGrid}>\n                            <SelectField\n                                disabled={!backgroundImageSrc}\n                                value={backgroundImageScaling}\n                                onChange={setScaling}\n                            >\n                                <option value=\"cover\">Cover</option>\n                                <option value=\"contain\">Contain</option>\n                                <option value=\"originalSize\">Original size</option>\n                                <option value=\"tile\">Tile</option>\n                                <option value=\"tileHorizontally\">Tile Horizontally</option>\n                                <option value=\"tileVertically\">Tile Vertically</option>\n                            </SelectField>\n                        </Wrapper>\n                        <Wrapper label={\"Position\"} containerClassName={classes.simpleGrid}>\n                            <SelectField\n                                value={backgroundImagePosition}\n                                onChange={setPosition}\n                                disabled={!backgroundImageSrc}\n                            >\n                                {positions.map(position => (\n                                    <option key={position} value={position}>\n                                        {startCase(position)}\n                                    </option>\n                                ))}\n                            </SelectField>\n                        </Wrapper>\n                    </React.Fragment>\n                )}\n            </ContentWrapper>\n        </Accordion>\n    );\n};\n\nexport default React.memo(BackgroundSettings);\n"],"file":"BackgroundSettings.js"}