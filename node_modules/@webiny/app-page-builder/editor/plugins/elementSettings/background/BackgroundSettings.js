import React, { useCallback, useMemo } from "react";
import { css } from "emotion";
import { useRecoilValue } from "recoil";
import startCase from "lodash/startCase";
import get from "lodash/get";
import set from "lodash/set";
import merge from "lodash/merge";
import { Tooltip } from "@webiny/ui/Tooltip";
import { plugins } from "@webiny/plugins";
import { Cell, Grid } from "@webiny/ui/Grid";
import SingleImageUpload from "@webiny/app-admin/components/SingleImageUpload";
import { activeElementAtom, elementWithChildrenByIdSelector, uiAtom } from "../../../recoil/modules";
import useUpdateHandlers from "../useUpdateHandlers"; // Components

import Wrapper from "../components/Wrapper";
import SelectField from "../components/SelectField";
import Accordion from "../components/Accordion";
import ColorPicker from "../components/ColorPicker";
import { ContentWrapper, classes } from "../components/StyledComponents";
import { applyFallbackDisplayMode } from "../elementSettingsUtils";
var positions = ["top left", "top", "top right", "center left", "center", "center right", "bottom left", "bottom center", "bottom right"];
var imageSelect = /*#__PURE__*/css({
  width: "100%"
}, "label:imageSelect;");
var DATA_NAMESPACE = "data.settings.background";
var BACKGROUND_SETTINGS_COUNT = 2;

var BackgroundSettings = function BackgroundSettings(_ref) {
  var options = _ref.options,
      defaultAccordionValue = _ref.defaultAccordionValue;

  var _useRecoilValue = useRecoilValue(uiAtom),
      displayMode = _useRecoilValue.displayMode;

  var activeElementId = useRecoilValue(activeElementAtom);
  var element = useRecoilValue(elementWithChildrenByIdSelector(activeElementId));

  var _useUpdateHandlers = useUpdateHandlers({
    element: element,
    dataNamespace: DATA_NAMESPACE,
    postModifyElement: function postModifyElement(_ref2) {
      var newElement = _ref2.newElement;
      var value = get(newElement, "".concat(DATA_NAMESPACE, ".").concat(displayMode), {}); // if only partial settings are there, merge it with fallback value

      // if only partial settings are there, merge it with fallback value
      if (Object.keys(value).length < BACKGROUND_SETTINGS_COUNT) {
        set(newElement, "".concat(DATA_NAMESPACE, ".").concat(displayMode), merge(fallbackValue, value));
      }
    }
  }),
      getUpdateValue = _useUpdateHandlers.getUpdateValue,
      getUpdatePreview = _useUpdateHandlers.getUpdatePreview;

  var _useMemo = useMemo(function () {
    return plugins.byType("pb-editor-responsive-mode").find(function (pl) {
      return pl.config.displayMode === displayMode;
    });
  }, [displayMode]),
      activeDisplayModeConfig = _useMemo.config;

  var setImage = useCallback(function (value) {
    return getUpdateValue("".concat(displayMode, ".image.file"))(value);
  }, [getUpdateValue, displayMode]);
  var setScaling = useCallback(function (value) {
    return getUpdateValue("".concat(displayMode, ".image.scaling"))(value);
  }, [getUpdateValue, displayMode]);
  var setPosition = useCallback(function (value) {
    return getUpdateValue("".concat(displayMode, ".image.position"))(value);
  }, [getUpdateValue, displayMode]);
  var setColor = useCallback(function (value) {
    return getUpdateValue("".concat(displayMode, ".color"))(value);
  }, [getUpdateValue, displayMode]);
  var onColorChange = useCallback(function (value) {
    return getUpdatePreview("".concat(displayMode, ".color"))(value);
  }, [getUpdatePreview, displayMode]);
  var fallbackValue = useMemo(function () {
    return applyFallbackDisplayMode(displayMode, function (mode) {
      return get(element, "".concat(DATA_NAMESPACE, ".").concat(mode));
    });
  }, [displayMode, element]);
  var background = get(element, "".concat(DATA_NAMESPACE, ".").concat(displayMode), fallbackValue || {});
  var backgroundColor = background.color,
      backgroundImage = background.image;

  var _ref3 = backgroundImage || {},
      backgroundImageScaling = _ref3.scaling,
      backgroundImagePosition = _ref3.position;

  var _ref4 = (backgroundImage === null || backgroundImage === void 0 ? void 0 : backgroundImage.file) || {},
      backgroundImageSrc = _ref4.src;

  return /*#__PURE__*/React.createElement(Accordion, {
    title: "Background",
    defaultValue: defaultAccordionValue,
    icon: /*#__PURE__*/React.createElement(Tooltip, {
      content: "Changes will apply for ".concat(activeDisplayModeConfig.displayMode)
    }, activeDisplayModeConfig.icon)
  }, /*#__PURE__*/React.createElement(ContentWrapper, {
    direction: "column"
  }, /*#__PURE__*/React.createElement(Grid, {
    className: classes.simpleGrid
  }, /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(ColorPicker, {
    label: "Color",
    value: backgroundColor,
    updatePreview: onColorChange,
    updateValue: setColor
  }))), options.image !== false && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Wrapper, {
    label: "Image",
    containerClassName: classes.simpleGrid
  }, /*#__PURE__*/React.createElement(SingleImageUpload, {
    className: imageSelect,
    onChange: setImage,
    value: {
      src: backgroundImageSrc
    }
  })), /*#__PURE__*/React.createElement(Wrapper, {
    label: "Scaling",
    containerClassName: classes.simpleGrid
  }, /*#__PURE__*/React.createElement(SelectField, {
    disabled: !backgroundImageSrc,
    value: backgroundImageScaling,
    onChange: setScaling
  }, /*#__PURE__*/React.createElement("option", {
    value: "cover"
  }, "Cover"), /*#__PURE__*/React.createElement("option", {
    value: "contain"
  }, "Contain"), /*#__PURE__*/React.createElement("option", {
    value: "originalSize"
  }, "Original size"), /*#__PURE__*/React.createElement("option", {
    value: "tile"
  }, "Tile"), /*#__PURE__*/React.createElement("option", {
    value: "tileHorizontally"
  }, "Tile Horizontally"), /*#__PURE__*/React.createElement("option", {
    value: "tileVertically"
  }, "Tile Vertically"))), /*#__PURE__*/React.createElement(Wrapper, {
    label: "Position",
    containerClassName: classes.simpleGrid
  }, /*#__PURE__*/React.createElement(SelectField, {
    value: backgroundImagePosition,
    onChange: setPosition,
    disabled: !backgroundImageSrc
  }, positions.map(function (position) {
    return /*#__PURE__*/React.createElement("option", {
      key: position,
      value: position
    }, startCase(position));
  }))))));
};

export default /*#__PURE__*/React.memo(BackgroundSettings);
//# sourceMappingURL=BackgroundSettings.js.map