{"version":3,"sources":["../../../../src/editor/plugins/elementSettings/useUpdateHandlers.ts"],"names":["useEventActionHandler","UpdateElementActionEvent","useMemo","lodashSet","lodashMerge","useHandler","useUpdateHandlers","props","handler","updateElement","args","trigger","updateSettings","element","dataNamespace","postModifyElement","historyUpdated","name","newValue","history","propName","newElement","getUpdateValue","handlers","value","getUpdatePreview"],"mappings":"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","sourcesContent":["import { useEventActionHandler } from \"../../hooks/useEventActionHandler\";\nimport { UpdateElementActionEvent } from \"../../recoil/actions\";\nimport { UpdateElementActionArgsType } from \"../../recoil/actions/updateElement/types\";\nimport { PbEditorElement } from \"../../../types\";\nimport { useMemo } from \"react\";\nimport lodashSet from \"lodash/set\";\nimport lodashMerge from \"lodash/merge\";\nimport { useHandler } from \"@webiny/app/hooks/useHandler\";\nexport type PostModifyElementArgs = {\n    name: string;\n    newValue: any;\n    element: PbEditorElement;\n    newElement: PbEditorElement;\n};\ntype UpdateHandlersPropsType = {\n    element: PbEditorElement;\n    dataNamespace: string;\n    postModifyElement?: (args: PostModifyElementArgs) => void;\n};\ntype HandlerUpdateCallableType = (name: string) => (value: any) => void;\ntype UseUpdateHandlersType = (props: UpdateHandlersPropsType) => {\n    getUpdateValue: HandlerUpdateCallableType;\n    getUpdatePreview: HandlerUpdateCallableType;\n};\nconst useUpdateHandlers: UseUpdateHandlersType = props => {\n    const handler = useEventActionHandler();\n    const updateElement = (args: UpdateElementActionArgsType) => {\n        handler.trigger(new UpdateElementActionEvent(args));\n    };\n    const updateSettings = useHandler(props, ({ element, dataNamespace, postModifyElement }) => {\n        const historyUpdated = {};\n        return (name: string, newValue: any, history = false) => {\n            const propName = `${dataNamespace}.${name}`;\n\n            const newElement = lodashMerge({}, element, lodashSet({}, propName, newValue));\n            // post modify the element.\n            if (typeof postModifyElement === \"function\") {\n                postModifyElement({ name, newElement, element, newValue });\n            }\n\n            if (!history) {\n                updateElement({\n                    element: newElement,\n                    history: false\n                });\n                return;\n            }\n\n            if (historyUpdated[propName] !== newValue) {\n                historyUpdated[propName] = newValue;\n                updateElement({\n                    element: newElement,\n                    history: true\n                });\n            }\n        };\n    });\n\n    const getUpdateValue = useMemo(() => {\n        const handlers = {};\n        return (name: string) => {\n            if (!handlers[name]) {\n                handlers[name] = value => updateSettings(name, value, true);\n            }\n\n            return handlers[name];\n        };\n    }, [updateSettings]);\n\n    const getUpdatePreview = useMemo(() => {\n        const handlers = {};\n        return (name: string) => {\n            if (!handlers[name]) {\n                handlers[name] = value => updateSettings(name, value, false);\n            }\n\n            return handlers[name];\n        };\n    }, [updateSettings]);\n\n    return { getUpdateValue, getUpdatePreview };\n};\n\nexport default useUpdateHandlers;\n"],"file":"useUpdateHandlers.js"}