{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/grid/GridSettings.tsx"],"names":["React","css","styled","useRecoilValue","Grid","Cell","useEventActionHandler","createElement","calculatePresetPluginCells","getPresetPlugins","UpdateElementActionEvent","activeElementAtom","elementWithChildrenByIdSelector","CellSize","ContentWrapper","Accordion","classes","grid","padding","marginBottom","icon","width","height","StyledIconButton","active","margin","background","border","cursor","opacity","filter","boxShadow","outline","createCells","amount","Array","fill","map","resizeCells","elements","cells","element","index","data","settings","size","updateChildrenWithPreset","target","pl","total","length","max","slice","created","GridSettings","defaultAccordionValue","handler","activeElementId","currentCellsType","cellsType","presetPlugins","onInputSizeChange","value","cellElement","Error","trigger","history","setPreset","totalCellsUsed","reduce","cell","Icon"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { css } from \"emotion\";\nimport styled from \"@emotion/styled\";\nimport { useRecoilValue } from \"recoil\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport {\n    PbEditorGridPresetPluginType,\n    PbEditorPageElementSettingsRenderComponentProps,\n    PbEditorElement\n} from \"../../../../types\";\nimport { useEventActionHandler } from \"../../../hooks/useEventActionHandler\";\nimport { createElement } from \"../../../helpers\";\nimport { calculatePresetPluginCells, getPresetPlugins } from \"../../../plugins/gridPresets\";\nimport { UpdateElementActionEvent } from \"../../../recoil/actions\";\nimport { activeElementAtom, elementWithChildrenByIdSelector } from \"../../../recoil/modules\";\n// Components\nimport CellSize from \"./CellSize\";\nimport { ContentWrapper } from \"../components/StyledComponents\";\nimport Accordion from \"../components/Accordion\";\n\nconst classes = {\n    grid: css({\n        \"&.mdc-layout-grid\": {\n            padding: 0,\n            marginBottom: 24\n        }\n    }),\n    icon: css({\n        \"& .mdc-list-item__graphic > svg\": {\n            width: \"18px\",\n            height: \"18px\"\n        }\n    })\n};\n\nconst StyledIconButton = styled(\"button\")(({ active }: any) => ({\n    padding: \"0\",\n    margin: \"0 2px 2px 0\",\n    background: \"transparent\",\n    width: \"auto\",\n    height: \"auto\",\n    border: \"0 none\",\n    cursor: \"pointer\",\n    opacity: active ? 1 : 0.7,\n    \"& svg\": {\n        filter: active ? \"none\" : \"grayscale(1)\"\n    },\n    \":hover\": {\n        \"& svg\": {\n            boxShadow: active ? \"none\" : \"0 0 5px rgba(0, 204, 176, 1)\"\n        }\n    },\n    \":focus\": {\n        outline: \"none\"\n    }\n}));\n\nconst createCells = (amount: number): PbEditorElement[] => {\n    return Array(amount)\n        .fill(0)\n        .map(() => createElement(\"cell\", {}));\n};\n\nconst resizeCells = (elements: PbEditorElement[], cells: number[]): PbEditorElement[] => {\n    return elements.map((element, index) => {\n        return {\n            ...element,\n            data: {\n                ...element.data,\n                settings: {\n                    ...element.data.settings,\n                    grid: {\n                        size: cells[index]\n                    }\n                }\n            }\n        };\n    });\n};\n\nconst updateChildrenWithPreset = (target: PbEditorElement, pl: PbEditorGridPresetPluginType) => {\n    const cells = calculatePresetPluginCells(pl);\n    const total = target.elements.length;\n    const max = cells.length;\n    if (total === max) {\n        return resizeCells(target.elements as PbEditorElement[], cells);\n    } else if (total > max) {\n        return resizeCells(target.elements.slice(0, max) as PbEditorElement[], cells);\n    }\n    const created = [...(target.elements as PbEditorElement[]), ...createCells(max - total)];\n    return resizeCells(created, cells);\n};\n\nexport const GridSettings: React.FunctionComponent<PbEditorPageElementSettingsRenderComponentProps> =\n    ({ defaultAccordionValue }) => {\n        const handler = useEventActionHandler();\n        const activeElementId = useRecoilValue(activeElementAtom);\n        const element = useRecoilValue(\n            elementWithChildrenByIdSelector(activeElementId)\n        ) as unknown as PbEditorElement;\n        const currentCellsType = element.data.settings?.grid?.cellsType;\n        const presetPlugins = getPresetPlugins();\n\n        const onInputSizeChange = (value: number, index: number) => {\n            const cellElement = element.elements[index] as PbEditorElement;\n            if (!cellElement) {\n                throw new Error(`There is no element on index ${index}.`);\n            }\n            handler.trigger(\n                new UpdateElementActionEvent({\n                    element: {\n                        ...cellElement,\n                        data: {\n                            ...cellElement.data,\n                            settings: {\n                                ...(cellElement.data.settings || {}),\n                                grid: {\n                                    size: value\n                                }\n                            }\n                        }\n                    } as any,\n                    history: true\n                })\n            );\n        };\n\n        const setPreset = (pl: PbEditorGridPresetPluginType) => {\n            const cellsType = pl.cellsType;\n            if (cellsType === currentCellsType) {\n                return;\n            }\n            handler.trigger(\n                new UpdateElementActionEvent({\n                    element: {\n                        ...element,\n                        data: {\n                            ...element.data,\n                            settings: {\n                                ...(element.data.settings || {}),\n                                grid: {\n                                    cellsType\n                                }\n                            }\n                        },\n                        elements: updateChildrenWithPreset(element, pl) as any\n                    },\n                    history: true\n                })\n            );\n        };\n        const totalCellsUsed = element.elements.reduce((total, cell) => {\n            return total + ((cell as PbEditorElement).data.settings?.grid?.size || 1);\n        }, 0);\n\n        return (\n            <Accordion title={\"Grid\"} defaultValue={defaultAccordionValue}>\n                <ContentWrapper direction={\"column\"}>\n                    <Grid className={classes.grid}>\n                        {presetPlugins.map(pl => {\n                            const Icon = pl.icon;\n                            return (\n                                <Cell key={`preset-${pl.cellsType}`} span={4}>\n                                    <StyledIconButton\n                                        onClick={() => setPreset(pl)}\n                                        active={pl.cellsType === currentCellsType}\n                                    >\n                                        <Icon />\n                                    </StyledIconButton>\n                                </Cell>\n                            );\n                        })}\n                    </Grid>\n\n                    <Grid className={classes.grid}>\n                        {element.elements.map((cell, index) => {\n                            const size = (cell as PbEditorElement).data.settings?.grid?.size || 1;\n                            return (\n                                <Cell span={12} key={`cell-size-${index}`}>\n                                    <CellSize\n                                        value={size}\n                                        label={`Cell ${index + 1}`}\n                                        onChange={value => onInputSizeChange(value, index)}\n                                        maxAllowed={12 - totalCellsUsed}\n                                    />\n                                </Cell>\n                            );\n                        })}\n                    </Grid>\n                </ContentWrapper>\n            </Accordion>\n        );\n    };\n"],"file":"GridSettings.js"}