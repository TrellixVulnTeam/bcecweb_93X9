{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/grid/CellSize.tsx"],"names":["React","useEffect","useState","css","IconButton","Typography","Grid","Cell","FormElementMessage","COLORS","classes","grid","position","padding","marginBottom","icon","transform","button","backgroundColor","borderRadius","border","gray","cursor","pointerEvents","opacity","errorMessageContainer","bottom","right","CellSize","value","label","onChange","maxAllowed","errorMessage","setErrorMessage","length","setTimeout","onReduceHandler","newValue","onAddHandler","memo"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { css } from \"emotion\";\nimport { IconButton } from \"@webiny/ui/Button\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { FormElementMessage } from \"@webiny/ui/FormElementMessage\";\n// Icons\nimport { ReactComponent as AddIcon } from \"../../../assets/icons/add.svg\";\nimport { ReactComponent as RemoveIcon } from \"../../../assets/icons/remove.svg\";\nimport { COLORS } from \"../components/StyledComponents\";\n\nconst classes = {\n    grid: css({\n        position: \"relative\",\n        \"&.mdc-layout-grid\": {\n            padding: 0,\n            marginBottom: 8\n        }\n    }),\n    icon: css({\n        \"& .mdc-list-item__graphic > svg\": {\n            transform: \"rotate(90deg)\"\n        }\n    }),\n    button: css({\n        \"&.mdc-icon-button\": {\n            backgroundColor: \"var(--mdc-theme-background)\",\n            borderRadius: \"50%\",\n            border: `1px solid ${COLORS.gray}`\n        },\n        \"&.mdc-icon-button:disabled\": {\n            cursor: \"not-allowed\",\n            pointerEvents: \"all\",\n            opacity: 0.5\n        }\n    }),\n    errorMessageContainer: css({\n        position: \"absolute\",\n        bottom: -20,\n        right: 0\n    })\n};\n\ntype CellSizePropsType = {\n    value: number;\n    maxAllowed: number;\n    label: string;\n    onChange: (value: number) => void;\n};\nconst CellSize: React.FunctionComponent<CellSizePropsType> = ({\n    value,\n    label,\n    onChange,\n    maxAllowed\n}) => {\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    // Hide error message after 2s.\n    useEffect(() => {\n        if (errorMessage.length) {\n            setTimeout(() => setErrorMessage(\"\"), 2000);\n        }\n    }, [errorMessage]);\n\n    const onReduceHandler = () => {\n        const newValue = value - 1;\n        if (newValue <= 0) {\n            setErrorMessage(\"Cell can't get smaller than this.\");\n            return false;\n        }\n        onChange(newValue);\n    };\n\n    const onAddHandler = () => {\n        if (maxAllowed <= 0) {\n            setErrorMessage(\"Cell can't get bigger than this.\");\n            return false;\n        }\n        onChange(value + 1);\n    };\n\n    return (\n        <Grid className={classes.grid}>\n            <Cell align={\"middle\"} span={5}>\n                <Typography use={\"subtitle2\"}>{label}</Typography>\n            </Cell>\n            <Cell align={\"middle\"} span={3}>\n                <IconButton\n                    className={classes.button}\n                    icon={<RemoveIcon />}\n                    onClick={onReduceHandler}\n                />\n            </Cell>\n            <Cell align={\"middle\"} span={1}>\n                <Typography use={\"subtitle2\"}>{value}</Typography>\n            </Cell>\n            <Cell align={\"middle\"} span={3}>\n                <IconButton className={classes.button} icon={<AddIcon />} onClick={onAddHandler} />\n            </Cell>\n            <FormElementMessage error={true} className={classes.errorMessageContainer}>\n                {errorMessage}\n            </FormElementMessage>\n        </Grid>\n    );\n};\n\nexport default React.memo(CellSize);\n"],"file":"CellSize.js"}