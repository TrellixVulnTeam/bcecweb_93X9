import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useEffect, useState } from "react";
import { css } from "emotion";
import { IconButton } from "@webiny/ui/Button";
import { Typography } from "@webiny/ui/Typography";
import { Grid, Cell } from "@webiny/ui/Grid";
import { FormElementMessage } from "@webiny/ui/FormElementMessage"; // Icons

import { ReactComponent as AddIcon } from "@svgr/webpack!../../../assets/icons/add.svg";
import { ReactComponent as RemoveIcon } from "@svgr/webpack!../../../assets/icons/remove.svg";
import { COLORS } from "../components/StyledComponents";
var classes = {
  grid: /*#__PURE__*/css({
    position: "relative",
    "&.mdc-layout-grid": {
      padding: 0,
      marginBottom: 8
    }
  }, "label:grid;"),
  icon: /*#__PURE__*/css({
    "& .mdc-list-item__graphic > svg": {
      transform: "rotate(90deg)"
    }
  }, "label:icon;"),
  button: /*#__PURE__*/css({
    "&.mdc-icon-button": {
      backgroundColor: "var(--mdc-theme-background)",
      borderRadius: "50%",
      border: "1px solid ".concat(COLORS.gray)
    },
    "&.mdc-icon-button:disabled": {
      cursor: "not-allowed",
      pointerEvents: "all",
      opacity: 0.5
    }
  }, "label:button;"),
  errorMessageContainer: /*#__PURE__*/css({
    position: "absolute",
    bottom: -20,
    right: 0
  }, "label:errorMessageContainer;")
};

var CellSize = function CellSize(_ref) {
  var value = _ref.value,
      label = _ref.label,
      onChange = _ref.onChange,
      maxAllowed = _ref.maxAllowed;

  var _useState = useState(""),
      _useState2 = _slicedToArray(_useState, 2),
      errorMessage = _useState2[0],
      setErrorMessage = _useState2[1]; // Hide error message after 2s.


  useEffect(function () {
    if (errorMessage.length) {
      setTimeout(function () {
        return setErrorMessage("");
      }, 2000);
    }
  }, [errorMessage]);

  var onReduceHandler = function onReduceHandler() {
    var newValue = value - 1;

    if (newValue <= 0) {
      setErrorMessage("Cell can't get smaller than this.");
      return false;
    }

    onChange(newValue);
  };

  var onAddHandler = function onAddHandler() {
    if (maxAllowed <= 0) {
      setErrorMessage("Cell can't get bigger than this.");
      return false;
    }

    onChange(value + 1);
  };

  return /*#__PURE__*/React.createElement(Grid, {
    className: classes.grid
  }, /*#__PURE__*/React.createElement(Cell, {
    align: "middle",
    span: 5
  }, /*#__PURE__*/React.createElement(Typography, {
    use: "subtitle2"
  }, label)), /*#__PURE__*/React.createElement(Cell, {
    align: "middle",
    span: 3
  }, /*#__PURE__*/React.createElement(IconButton, {
    className: classes.button,
    icon: /*#__PURE__*/React.createElement(RemoveIcon, null),
    onClick: onReduceHandler
  })), /*#__PURE__*/React.createElement(Cell, {
    align: "middle",
    span: 1
  }, /*#__PURE__*/React.createElement(Typography, {
    use: "subtitle2"
  }, value)), /*#__PURE__*/React.createElement(Cell, {
    align: "middle",
    span: 3
  }, /*#__PURE__*/React.createElement(IconButton, {
    className: classes.button,
    icon: /*#__PURE__*/React.createElement(AddIcon, null),
    onClick: onAddHandler
  })), /*#__PURE__*/React.createElement(FormElementMessage, {
    error: true,
    className: classes.errorMessageContainer
  }, errorMessage));
};

export default /*#__PURE__*/React.memo(CellSize);
//# sourceMappingURL=CellSize.js.map