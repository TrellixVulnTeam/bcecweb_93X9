import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import React from "react";
import { css } from "emotion";
import styled from "@emotion/styled";
import { useRecoilValue } from "recoil";
import { Grid, Cell } from "@webiny/ui/Grid";
import { useEventActionHandler } from "../../../hooks/useEventActionHandler";
import { createElement } from "../../../helpers";
import { calculatePresetPluginCells, getPresetPlugins } from "../../../plugins/gridPresets";
import { UpdateElementActionEvent } from "../../../recoil/actions";
import { activeElementAtom, elementWithChildrenByIdSelector } from "../../../recoil/modules"; // Components

import CellSize from "./CellSize";
import { ContentWrapper } from "../components/StyledComponents";
import Accordion from "../components/Accordion";
var classes = {
  grid: /*#__PURE__*/css({
    "&.mdc-layout-grid": {
      padding: 0,
      marginBottom: 24
    }
  }, "label:grid;"),
  icon: /*#__PURE__*/css({
    "& .mdc-list-item__graphic > svg": {
      width: "18px",
      height: "18px"
    }
  }, "label:icon;")
};
var StyledIconButton = /*#__PURE__*/styled("button", {
  target: "e10a2z370",
  label: "StyledIconButton"
})(function (_ref) {
  var active = _ref.active;
  return {
    padding: "0",
    margin: "0 2px 2px 0",
    background: "transparent",
    width: "auto",
    height: "auto",
    border: "0 none",
    cursor: "pointer",
    opacity: active ? 1 : 0.7,
    "& svg": {
      filter: active ? "none" : "grayscale(1)"
    },
    ":hover": {
      "& svg": {
        boxShadow: active ? "none" : "0 0 5px rgba(0, 204, 176, 1)"
      }
    },
    ":focus": {
      outline: "none"
    }
  };
});

var createCells = function createCells(amount) {
  return Array(amount).fill(0).map(function () {
    return createElement("cell", {});
  });
};

var resizeCells = function resizeCells(elements, cells) {
  return elements.map(function (element, index) {
    return _objectSpread(_objectSpread({}, element), {}, {
      data: _objectSpread(_objectSpread({}, element.data), {}, {
        settings: _objectSpread(_objectSpread({}, element.data.settings), {}, {
          grid: {
            size: cells[index]
          }
        })
      })
    });
  });
};

var updateChildrenWithPreset = function updateChildrenWithPreset(target, pl) {
  var cells = calculatePresetPluginCells(pl);
  var total = target.elements.length;
  var max = cells.length;

  if (total === max) {
    return resizeCells(target.elements, cells);
  } else if (total > max) {
    return resizeCells(target.elements.slice(0, max), cells);
  }

  var created = [].concat(_toConsumableArray(target.elements), _toConsumableArray(createCells(max - total)));
  return resizeCells(created, cells);
};

export var GridSettings = function GridSettings(_ref2) {
  var _element$data$setting, _element$data$setting2;

  var defaultAccordionValue = _ref2.defaultAccordionValue;
  var handler = useEventActionHandler();
  var activeElementId = useRecoilValue(activeElementAtom);
  var element = useRecoilValue(elementWithChildrenByIdSelector(activeElementId));
  var currentCellsType = (_element$data$setting = element.data.settings) === null || _element$data$setting === void 0 ? void 0 : (_element$data$setting2 = _element$data$setting.grid) === null || _element$data$setting2 === void 0 ? void 0 : _element$data$setting2.cellsType;
  var presetPlugins = getPresetPlugins();

  var onInputSizeChange = function onInputSizeChange(value, index) {
    var cellElement = element.elements[index];

    if (!cellElement) {
      throw new Error("There is no element on index ".concat(index, "."));
    }

    handler.trigger(new UpdateElementActionEvent({
      element: _objectSpread(_objectSpread({}, cellElement), {}, {
        data: _objectSpread(_objectSpread({}, cellElement.data), {}, {
          settings: _objectSpread(_objectSpread({}, cellElement.data.settings || {}), {}, {
            grid: {
              size: value
            }
          })
        })
      }),
      history: true
    }));
  };

  var setPreset = function setPreset(pl) {
    var cellsType = pl.cellsType;

    if (cellsType === currentCellsType) {
      return;
    }

    handler.trigger(new UpdateElementActionEvent({
      element: _objectSpread(_objectSpread({}, element), {}, {
        data: _objectSpread(_objectSpread({}, element.data), {}, {
          settings: _objectSpread(_objectSpread({}, element.data.settings || {}), {}, {
            grid: {
              cellsType: cellsType
            }
          })
        }),
        elements: updateChildrenWithPreset(element, pl)
      }),
      history: true
    }));
  };

  var totalCellsUsed = element.elements.reduce(function (total, cell) {
    var _data$settings, _data$settings$grid;

    return total + (((_data$settings = cell.data.settings) === null || _data$settings === void 0 ? void 0 : (_data$settings$grid = _data$settings.grid) === null || _data$settings$grid === void 0 ? void 0 : _data$settings$grid.size) || 1);
  }, 0);
  return /*#__PURE__*/React.createElement(Accordion, {
    title: "Grid",
    defaultValue: defaultAccordionValue
  }, /*#__PURE__*/React.createElement(ContentWrapper, {
    direction: "column"
  }, /*#__PURE__*/React.createElement(Grid, {
    className: classes.grid
  }, presetPlugins.map(function (pl) {
    var Icon = pl.icon;
    return /*#__PURE__*/React.createElement(Cell, {
      key: "preset-".concat(pl.cellsType),
      span: 4
    }, /*#__PURE__*/React.createElement(StyledIconButton, {
      onClick: function onClick() {
        return setPreset(pl);
      },
      active: pl.cellsType === currentCellsType
    }, /*#__PURE__*/React.createElement(Icon, null)));
  })), /*#__PURE__*/React.createElement(Grid, {
    className: classes.grid
  }, element.elements.map(function (cell, index) {
    var _data$settings2, _data$settings2$grid;

    var size = ((_data$settings2 = cell.data.settings) === null || _data$settings2 === void 0 ? void 0 : (_data$settings2$grid = _data$settings2.grid) === null || _data$settings2$grid === void 0 ? void 0 : _data$settings2$grid.size) || 1;
    return /*#__PURE__*/React.createElement(Cell, {
      span: 12,
      key: "cell-size-".concat(index)
    }, /*#__PURE__*/React.createElement(CellSize, {
      value: size,
      label: "Cell ".concat(index + 1),
      onChange: function onChange(value) {
        return onInputSizeChange(value, index);
      },
      maxAllowed: 12 - totalCellsUsed
    }));
  }))));
};
//# sourceMappingURL=GridSettings.js.map