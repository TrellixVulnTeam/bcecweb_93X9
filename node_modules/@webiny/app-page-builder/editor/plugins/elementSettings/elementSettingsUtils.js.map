{"version":3,"sources":["../../../../src/editor/plugins/elementSettings/elementSettingsUtils.ts"],"names":["plugins","orderBy","merge","WIDTH_UNIT_OPTIONS","label","value","HEIGHT_UNIT_OPTIONS","createInitialPerDeviceSettingValue","defaultValue","baseDisplayMode","editorModes","byType","map","pl","config","forEach","displayMode","applyFallbackDisplayMode","mode","getValue","displayModeConfigs","orderedConfigs","index","findIndex","output","undefined","i","currentValue"],"mappings":"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","sourcesContent":["import { plugins } from \"@webiny/plugins\";\nimport orderBy from \"lodash/orderBy\";\nimport merge from \"lodash/merge\";\nimport { PbEditorResponsiveModePlugin, PbRenderResponsiveModePlugin, DisplayMode } from \"~/types\";\n\nexport const WIDTH_UNIT_OPTIONS = [\n    {\n        label: \"%\",\n        value: \"%\"\n    },\n    {\n        label: \"px\",\n        value: \"px\"\n    },\n    {\n        label: \"em\",\n        value: \"em\"\n    },\n    {\n        label: \"vw\",\n        value: \"vw\"\n    },\n    {\n        label: \"auto\",\n        value: \"auto\"\n    }\n];\n\nexport const HEIGHT_UNIT_OPTIONS = [\n    {\n        label: \"%\",\n        value: \"%\"\n    },\n    {\n        label: \"px\",\n        value: \"px\"\n    },\n    {\n        label: \"em\",\n        value: \"em\"\n    },\n    {\n        label: \"vh\",\n        value: \"vh\"\n    },\n    {\n        label: \"auto\",\n        value: \"auto\"\n    }\n];\n\nexport const createInitialPerDeviceSettingValue = (defaultValue: any, baseDisplayMode?: string) => {\n    // Only set \"baseDisplayMode\" value if present\n    if (baseDisplayMode) {\n        return {\n            [baseDisplayMode]: defaultValue\n        };\n    }\n\n    const value = {};\n    // Get responsive editor modes from plugins.\n    const editorModes = plugins\n        .byType<PbEditorResponsiveModePlugin>(\"pb-editor-responsive-mode\")\n        .map(pl => pl.config);\n    // Set default value for each mode.\n    editorModes.forEach(({ displayMode }) => {\n        value[displayMode] = defaultValue;\n    });\n    return value;\n};\n\nexport const applyFallbackDisplayMode = (mode: DisplayMode, getValue: any) => {\n    // Get display modes\n    const displayModeConfigs = plugins\n        .byType<PbRenderResponsiveModePlugin>(\"pb-render-responsive-mode\")\n        .map(pl => pl.config);\n\n    // Get fallback display mode\n    const orderedConfigs = orderBy(displayModeConfigs, \"minWidth\", \"desc\");\n    const index = orderedConfigs.findIndex(({ displayMode }) => displayMode === mode);\n\n    // Merge all values from base \"DisplayMode\" upto current\n    let output = undefined;\n    for (let i = 0; i < index; i++) {\n        const currentValue = getValue(orderedConfigs[i].displayMode);\n        // In case of \"string\", we don't need to merge all values\n        if (currentValue && typeof currentValue === \"string\") {\n            return currentValue;\n        }\n        if (currentValue) {\n            output = merge(output, currentValue);\n        }\n    }\n    return output;\n};\n"],"file":"elementSettingsUtils.js"}