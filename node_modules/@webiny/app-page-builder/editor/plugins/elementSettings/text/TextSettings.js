import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useCallback, useMemo } from "react";
import { css } from "emotion";
import { useRecoilValue } from "recoil";
import get from "lodash/get";
import set from "lodash/set";
import merge from "lodash/merge";
import { plugins } from "@webiny/plugins";
import { Tooltip } from "@webiny/ui/Tooltip";
import { Grid, Cell } from "@webiny/ui/Grid";
import { Typography } from "@webiny/ui/Typography";
import { Link } from "@webiny/react-router";
import { activeElementAtom, elementWithChildrenByIdSelector, uiAtom } from "../../../recoil/modules"; // Components

import Accordion from "../../elementSettings/components/Accordion";
import Wrapper from "../../elementSettings/components/Wrapper";
import SelectField from "../../elementSettings/components/SelectField";
import { BaseColorPicker } from "../components/ColorPicker";
import useUpdateHandlers from "../../elementSettings/useUpdateHandlers";
import TextAlignment from "./TextAlignment";
import { applyFallbackDisplayMode } from "../elementSettingsUtils";
var classes = {
  grid: /*#__PURE__*/css({
    "&.mdc-layout-grid": {
      padding: 0,
      marginBottom: 24
    }
  }, "label:grid;"),
  widthInputStyle: /*#__PURE__*/css({
    maxWidth: 60
  }, "label:widthInputStyle;"),
  rightCellStyle: /*#__PURE__*/css({
    justifySelf: "end"
  }, "label:rightCellStyle;"),
  leftCellStyle: /*#__PURE__*/css({
    alignSelf: "center"
  }, "label:leftCellStyle;"),
  warningMessageGrid: /*#__PURE__*/css({
    "&.mdc-layout-grid": {
      padding: 0,
      marginTop: -16,
      marginBottom: 24,
      color: "var(--mdc-theme-text-secondary-on-background)"
    }
  }, "label:warningMessageGrid;")
};
var TEXT_SETTINGS_COUNT = 4;
var DATA_NAMESPACE = "data.text";

var TextSettings = function TextSettings(_ref) {
  var defaultAccordionValue = _ref.defaultAccordionValue,
      options = _ref.options;

  var _useRecoilValue = useRecoilValue(uiAtom),
      displayMode = _useRecoilValue.displayMode;

  var activeElementId = useRecoilValue(activeElementAtom);
  var element = useRecoilValue(elementWithChildrenByIdSelector(activeElementId));

  var _plugins$byType = plugins.byType("pb-theme"),
      _plugins$byType2 = _slicedToArray(_plugins$byType, 1),
      theme = _plugins$byType2[0].theme;

  var _useMemo = useMemo(function () {
    return plugins.byType("pb-editor-responsive-mode").find(function (pl) {
      return pl.config.displayMode === displayMode;
    });
  }, [displayMode]),
      activeDisplayModeConfig = _useMemo.config;

  var themeTypographyOptions = useMemo(function () {
    var _ref2 = theme.elements[element.type] || {
      types: []
    },
        types = _ref2.types;

    return types.map(function (el) {
      return /*#__PURE__*/React.createElement("option", {
        value: el.className,
        key: el.label
      }, el.label);
    });
  }, [theme, element]);

  var _useUpdateHandlers = useUpdateHandlers({
    element: element,
    dataNamespace: DATA_NAMESPACE,
    postModifyElement: function postModifyElement(_ref3) {
      var newElement = _ref3.newElement;
      var value = get(newElement, "".concat(DATA_NAMESPACE, ".").concat(displayMode), {}); // if only partial settings are there, merge it with fallback value

      // if only partial settings are there, merge it with fallback value
      if (Object.keys(value).length < TEXT_SETTINGS_COUNT) {
        set(newElement, "".concat(DATA_NAMESPACE, ".").concat(displayMode), merge(fallbackValue, value));
      }
    }
  }),
      getUpdateValue = _useUpdateHandlers.getUpdateValue,
      getUpdatePreview = _useUpdateHandlers.getUpdatePreview;

  var updateColor = useCallback(function (value) {
    return getUpdateValue("".concat(displayMode, ".color"))(value);
  }, [getUpdateValue, displayMode]);
  var updateColorPreview = useCallback(function (value) {
    return getUpdatePreview("".concat(displayMode, ".color"))(value);
  }, [getUpdatePreview]);
  var updateTypography = useCallback(function (value) {
    return getUpdateValue("".concat(displayMode, ".typography"))(value);
  }, [getUpdateValue, displayMode]);
  var updateAlignment = useCallback(function (value) {
    return getUpdateValue("".concat(displayMode, ".alignment"))(value);
  }, [getUpdateValue, displayMode]);
  var updateTag = useCallback(function (value) {
    return getUpdateValue("".concat(displayMode, ".tag"))(value);
  }, [getUpdateValue, displayMode]);
  var fallbackValue = useMemo(function () {
    return applyFallbackDisplayMode(displayMode, function (mode) {
      return get(element, "".concat(DATA_NAMESPACE, ".").concat(mode));
    });
  }, [displayMode, element]);
  var text = get(element, "".concat(DATA_NAMESPACE, ".").concat(displayMode), fallbackValue);

  if (!text) {
    return null;
  }

  return /*#__PURE__*/React.createElement(Accordion, {
    title: "Text",
    defaultValue: defaultAccordionValue,
    icon: /*#__PURE__*/React.createElement(Tooltip, {
      content: "Changes will apply for ".concat(activeDisplayModeConfig.displayMode)
    }, activeDisplayModeConfig.icon)
  }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Wrapper, {
    containerClassName: classes.grid,
    label: "Color"
  }, /*#__PURE__*/React.createElement(BaseColorPicker, {
    value: text.color,
    updateValue: updateColor,
    updatePreview: updateColorPreview
  })), options.useCustomTag && /*#__PURE__*/React.createElement(Wrapper, {
    containerClassName: classes.grid,
    label: "Heading Type",
    leftCellSpan: 5,
    rightCellSpan: 7
  }, /*#__PURE__*/React.createElement(SelectField, {
    value: text.tag,
    onChange: updateTag
  }, options.tags.map(function (tag) {
    return /*#__PURE__*/React.createElement("option", {
      value: tag,
      key: tag
    }, tag.toUpperCase());
  }))), /*#__PURE__*/React.createElement(Wrapper, {
    containerClassName: classes.grid,
    label: "Typography",
    leftCellSpan: 5,
    rightCellSpan: 7
  }, /*#__PURE__*/React.createElement(SelectField, {
    value: text.typography,
    onChange: updateTypography,
    disabled: themeTypographyOptions.length === 0
  }, themeTypographyOptions)), themeTypographyOptions.length === 0 && /*#__PURE__*/React.createElement(Grid, {
    className: classes.warningMessageGrid
  }, /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(Typography, {
    use: "caption"
  }, "Please add typography options in", " ", /*#__PURE__*/React.createElement(Link, {
    to: "https://github.com/webiny/webiny-js/blob/next/apps/theme/pageBuilder/index.ts#L21",
    target: "_blank"
  }, "theme"), "."))), /*#__PURE__*/React.createElement(Wrapper, {
    containerClassName: classes.grid,
    label: "Alignment",
    leftCellSpan: 3,
    rightCellSpan: 9,
    leftCellClassName: classes.leftCellStyle,
    rightCellClassName: classes.rightCellStyle
  }, /*#__PURE__*/React.createElement(TextAlignment, {
    value: text.alignment,
    onChange: updateAlignment
  }))));
};

export default /*#__PURE__*/React.memo(TextSettings);
//# sourceMappingURL=TextSettings.js.map