{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/text/TextSettings.tsx"],"names":["React","useCallback","useMemo","css","useRecoilValue","get","set","merge","plugins","Tooltip","Grid","Cell","Typography","Link","activeElementAtom","elementWithChildrenByIdSelector","uiAtom","Accordion","Wrapper","SelectField","BaseColorPicker","useUpdateHandlers","TextAlignment","applyFallbackDisplayMode","classes","grid","padding","marginBottom","widthInputStyle","maxWidth","rightCellStyle","justifySelf","leftCellStyle","alignSelf","warningMessageGrid","marginTop","color","TEXT_SETTINGS_COUNT","DATA_NAMESPACE","TextSettings","defaultAccordionValue","options","displayMode","activeElementId","element","byType","theme","find","pl","config","activeDisplayModeConfig","themeTypographyOptions","elements","type","types","map","el","className","label","dataNamespace","postModifyElement","newElement","value","Object","keys","length","fallbackValue","getUpdateValue","getUpdatePreview","updateColor","updateColorPreview","updateTypography","updateAlignment","updateTag","mode","text","icon","useCustomTag","tag","tags","toUpperCase","typography","alignment","memo"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo } from \"react\";\nimport { css } from \"emotion\";\nimport { useRecoilValue } from \"recoil\";\nimport get from \"lodash/get\";\nimport set from \"lodash/set\";\nimport merge from \"lodash/merge\";\nimport { plugins } from \"@webiny/plugins\";\nimport { Tooltip } from \"@webiny/ui/Tooltip\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { Link } from \"@webiny/react-router\";\nimport {\n    PbEditorPageElementSettingsRenderComponentProps,\n    PbEditorResponsiveModePlugin,\n    PbThemePlugin\n} from \"~/types\";\nimport {\n    activeElementAtom,\n    elementWithChildrenByIdSelector,\n    uiAtom\n} from \"~/editor/recoil/modules\";\n// Components\nimport Accordion from \"../../elementSettings/components/Accordion\";\nimport Wrapper from \"../../elementSettings/components/Wrapper\";\nimport SelectField from \"../../elementSettings/components/SelectField\";\nimport { BaseColorPicker } from \"../components/ColorPicker\";\nimport useUpdateHandlers from \"../../elementSettings/useUpdateHandlers\";\nimport TextAlignment from \"./TextAlignment\";\nimport { applyFallbackDisplayMode } from \"../elementSettingsUtils\";\n\nconst classes = {\n    grid: css({\n        \"&.mdc-layout-grid\": {\n            padding: 0,\n            marginBottom: 24\n        }\n    }),\n    widthInputStyle: css({\n        maxWidth: 60\n    }),\n    rightCellStyle: css({\n        justifySelf: \"end\"\n    }),\n    leftCellStyle: css({\n        alignSelf: \"center\"\n    }),\n    warningMessageGrid: css({\n        \"&.mdc-layout-grid\": {\n            padding: 0,\n            marginTop: -16,\n            marginBottom: 24,\n            color: \"var(--mdc-theme-text-secondary-on-background)\"\n        }\n    })\n};\nconst TEXT_SETTINGS_COUNT = 4;\nconst DATA_NAMESPACE = \"data.text\";\n\nconst TextSettings: React.FunctionComponent<\n    PbEditorPageElementSettingsRenderComponentProps & {\n        options: any;\n    }\n> = ({ defaultAccordionValue, options }) => {\n    const { displayMode } = useRecoilValue(uiAtom);\n    const activeElementId = useRecoilValue(activeElementAtom);\n    const element = useRecoilValue(elementWithChildrenByIdSelector(activeElementId));\n    const [{ theme }] = plugins.byType<PbThemePlugin>(\"pb-theme\");\n\n    const { config: activeDisplayModeConfig } = useMemo(() => {\n        return plugins\n            .byType<PbEditorResponsiveModePlugin>(\"pb-editor-responsive-mode\")\n            .find(pl => pl.config.displayMode === displayMode);\n    }, [displayMode]);\n\n    const themeTypographyOptions = useMemo(() => {\n        const { types } = theme.elements[element.type] || { types: [] };\n        return types.map(el => (\n            <option value={el.className} key={el.label}>\n                {el.label}\n            </option>\n        ));\n    }, [theme, element]);\n\n    const { getUpdateValue, getUpdatePreview } = useUpdateHandlers({\n        element,\n        dataNamespace: DATA_NAMESPACE,\n        postModifyElement: ({ newElement }) => {\n            const value = get(newElement, `${DATA_NAMESPACE}.${displayMode}`, {});\n            // if only partial settings are there, merge it with fallback value\n            if (Object.keys(value).length < TEXT_SETTINGS_COUNT) {\n                set(newElement, `${DATA_NAMESPACE}.${displayMode}`, merge(fallbackValue, value));\n            }\n        }\n    });\n\n    const updateColor = useCallback(\n        (value: string) => getUpdateValue(`${displayMode}.color`)(value),\n        [getUpdateValue, displayMode]\n    );\n    const updateColorPreview = useCallback(\n        (value: string) => getUpdatePreview(`${displayMode}.color`)(value),\n        [getUpdatePreview]\n    );\n\n    const updateTypography = useCallback(\n        (value: string) => getUpdateValue(`${displayMode}.typography`)(value),\n        [getUpdateValue, displayMode]\n    );\n\n    const updateAlignment = useCallback(\n        (value: string) => getUpdateValue(`${displayMode}.alignment`)(value),\n        [getUpdateValue, displayMode]\n    );\n\n    const updateTag = useCallback(\n        (value: string) => getUpdateValue(`${displayMode}.tag`)(value),\n        [getUpdateValue, displayMode]\n    );\n\n    const fallbackValue = useMemo(\n        () =>\n            applyFallbackDisplayMode(displayMode, mode =>\n                get(element, `${DATA_NAMESPACE}.${mode}`)\n            ),\n        [displayMode, element]\n    );\n\n    const text = get(element, `${DATA_NAMESPACE}.${displayMode}`, fallbackValue);\n\n    if (!text) {\n        return null;\n    }\n\n    return (\n        <Accordion\n            title={\"Text\"}\n            defaultValue={defaultAccordionValue}\n            icon={\n                <Tooltip content={`Changes will apply for ${activeDisplayModeConfig.displayMode}`}>\n                    {activeDisplayModeConfig.icon}\n                </Tooltip>\n            }\n        >\n            <>\n                <Wrapper containerClassName={classes.grid} label={\"Color\"}>\n                    <BaseColorPicker\n                        value={text.color}\n                        updateValue={updateColor}\n                        updatePreview={updateColorPreview}\n                    />\n                </Wrapper>\n                {options.useCustomTag && (\n                    <Wrapper\n                        containerClassName={classes.grid}\n                        label={\"Heading Type\"}\n                        leftCellSpan={5}\n                        rightCellSpan={7}\n                    >\n                        <SelectField value={text.tag} onChange={updateTag}>\n                            {options.tags.map(tag => (\n                                <option value={tag} key={tag}>\n                                    {tag.toUpperCase()}\n                                </option>\n                            ))}\n                        </SelectField>\n                    </Wrapper>\n                )}\n                <Wrapper\n                    containerClassName={classes.grid}\n                    label={\"Typography\"}\n                    leftCellSpan={5}\n                    rightCellSpan={7}\n                >\n                    <SelectField\n                        value={text.typography}\n                        onChange={updateTypography}\n                        disabled={themeTypographyOptions.length === 0}\n                    >\n                        {themeTypographyOptions}\n                    </SelectField>\n                </Wrapper>\n                {themeTypographyOptions.length === 0 && (\n                    <Grid className={classes.warningMessageGrid}>\n                        <Cell span={12}>\n                            <Typography use={\"caption\"}>\n                                Please add typography options in{\" \"}\n                                <Link\n                                    to={\n                                        \"https://github.com/webiny/webiny-js/blob/next/apps/theme/pageBuilder/index.ts#L21\"\n                                    }\n                                    target={\"_blank\"}\n                                >\n                                    theme\n                                </Link>\n                                .\n                            </Typography>\n                        </Cell>\n                    </Grid>\n                )}\n                <Wrapper\n                    containerClassName={classes.grid}\n                    label={\"Alignment\"}\n                    leftCellSpan={3}\n                    rightCellSpan={9}\n                    leftCellClassName={classes.leftCellStyle}\n                    rightCellClassName={classes.rightCellStyle}\n                >\n                    <TextAlignment value={text.alignment} onChange={updateAlignment} />\n                </Wrapper>\n            </>\n        </Accordion>\n    );\n};\n\nexport default React.memo(TextSettings);\n"],"file":"TextSettings.js"}