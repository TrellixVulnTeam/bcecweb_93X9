{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/text/TextAlignment.tsx"],"names":["React","css","classNames","Tooltip","IconButton","ContentWrapper","classes","activeIcon","color","icon","icons","left","center","right","justify","alignments","Object","keys","TextAlignment","value","onChange","map","type","memo"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,SAApB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AAEA;AACA,SAASC,cAAT,yC,CACA;;;;;;AAMA,IAAMC,OAAO,GAAG;AACZC,EAAAA,UAAU,eAAEN,GAAG,CAAC;AACZ,yBAAqB;AACjBO,MAAAA,KAAK,EAAE;AADU;AADT,GAAD,sBADH;AAMZC,EAAAA,IAAI,eAAER,GAAG,CAAC;AACN,yBAAqB;AACjBO,MAAAA,KAAK,EAAE;AADU;AADf,GAAD;AANG,CAAhB;AAgBA;AACA,IAAME,KAAgB,GAAG;AACrBC,EAAAA,IAAI,eAAE,oBAAC,iBAAD,OADe;AAErBC,EAAAA,MAAM,eAAE,oBAAC,mBAAD,OAFa;AAGrBC,EAAAA,KAAK,eAAE,oBAAC,kBAAD,OAHc;AAIrBC,EAAAA,OAAO,eAAE,oBAAC,oBAAD;AAJY,CAAzB;AAOA,IAAMC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYP,KAAZ,CAAnB;;AAQA,IAAMQ,aAEL,GAAG,SAFEA,aAEF,OAAyB;AAAA,MAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AACzB,sBACI,oBAAC,cAAD,QACKL,UAAU,CAACM,GAAX,CAAe,UAAAC,IAAI;AAAA;;AAAA,wBAChB,oBAAC,OAAD;AAAS,MAAA,GAAG,EAAEA,IAAd;AAAoB,MAAA,OAAO,EAAEA,IAA7B;AAAmC,MAAA,SAAS,EAAE;AAA9C,oBACI,oBAAC,UAAD;AACI,MAAA,SAAS,EAAEpB,UAAU,iDAChBI,OAAO,CAACC,UADQ,EACKY,KAAK,KAAKG,IADf,gCAEhBhB,OAAO,CAACG,IAFQ,EAEDU,KAAK,KAAKG,IAFT,gBADzB;AAKI,MAAA,IAAI,EAAEZ,KAAK,CAACY,IAAD,CALf;AAMI,MAAA,OAAO,EAAE;AAAA,eAAMF,QAAQ,CAACE,IAAD,CAAd;AAAA;AANb,MADJ,CADgB;AAAA,GAAnB,CADL,CADJ;AAgBH,CAnBD;;AAqBA,4BAAetB,KAAK,CAACuB,IAAN,CAAWL,aAAX,CAAf","sourcesContent":["import React from \"react\";\nimport { css } from \"emotion\";\nimport classNames from \"classnames\";\nimport { Tooltip } from \"@webiny/ui/Tooltip\";\nimport { IconButton } from \"@webiny/ui/Button\";\nimport { PbEditorPageElementSettingsRenderComponentProps } from \"../../../../types\";\n// Components\nimport { ContentWrapper } from \"../components/StyledComponents\";\n// Icons\nimport { ReactComponent as AlignTextLeftIcon } from \"../align/icons/format_align_left.svg\";\nimport { ReactComponent as AlignTextCenterIcon } from \"../align/icons/format_align_center.svg\";\nimport { ReactComponent as AlignTextRightIcon } from \"../align/icons/format_align_right.svg\";\nimport { ReactComponent as AlignTextJustifyIcon } from \"../align/icons/format_align_justify.svg\";\n\nconst classes = {\n    activeIcon: css({\n        \"&.mdc-icon-button\": {\n            color: \"var(--mdc-theme-primary)\"\n        }\n    }),\n    icon: css({\n        \"&.mdc-icon-button\": {\n            color: \"var(--mdc-theme-text-primary-on-background)\"\n        }\n    })\n};\n\ntype IconsType = {\n    [key: string]: React.ReactElement;\n};\n// Icons map for dynamic render\nconst icons: IconsType = {\n    left: <AlignTextLeftIcon />,\n    center: <AlignTextCenterIcon />,\n    right: <AlignTextRightIcon />,\n    justify: <AlignTextJustifyIcon />\n};\n\nconst alignments = Object.keys(icons);\n\ntype AlignTypesType = \"left\" | \"center\" | \"right\" | \"justify\";\n\ntype HorizontalAlignActionPropsType = {\n    value: any;\n    onChange: any;\n};\nconst TextAlignment: React.FunctionComponent<\n    HorizontalAlignActionPropsType & PbEditorPageElementSettingsRenderComponentProps\n> = ({ value, onChange }) => {\n    return (\n        <ContentWrapper>\n            {alignments.map(type => (\n                <Tooltip key={type} content={type} placement={\"top\"}>\n                    <IconButton\n                        className={classNames({\n                            [classes.activeIcon]: value === type,\n                            [classes.icon]: value !== type\n                        })}\n                        icon={icons[type]}\n                        onClick={() => onChange(type as AlignTypesType)}\n                    />\n                </Tooltip>\n            ))}\n        </ContentWrapper>\n    );\n};\n\nexport default React.memo(TextAlignment);\n"],"file":"TextAlignment.js"}