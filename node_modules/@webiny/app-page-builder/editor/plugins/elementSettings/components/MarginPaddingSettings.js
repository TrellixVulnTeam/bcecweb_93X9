import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useCallback, useMemo } from "react";
import get from "lodash/get";
import set from "lodash/set";
import startCase from "lodash/startCase";
import { useRecoilCallback, useRecoilValue } from "recoil";
import classNames from "classnames";
import { css } from "emotion";
import { Typography } from "@webiny/ui/Typography";
import { Tooltip } from "@webiny/ui/Tooltip";
import { plugins } from "@webiny/plugins";
import { activeElementAtom, elementWithChildrenByIdSelector, uiAtom } from "../../../recoil/modules";
import useUpdateHandlers from "../useUpdateHandlers"; // Icons

import { ReactComponent as LinkIcon } from "@svgr/webpack!../../../assets/icons/link.svg"; // Components

import SpacingPicker from "./SpacingPicker";
import { COLORS, SpacingGrid, TopLeft, Top, TopRight, Left, Center, Right, BottomLeft, Bottom, BottomRight } from "./StyledComponents";
import Accordion from "./Accordion";
import { applyFallbackDisplayMode } from "../elementSettingsUtils";
var classes = {
  gridContainerClass: /*#__PURE__*/css({
    "&.mdc-layout-grid": {
      padding: 0,
      margin: "16px 0px 24px"
    }
  }, "label:gridContainerClass;"),
  wrapper: /*#__PURE__*/css({
    display: "flex",
    flexDirection: "column",
    justifyContent: "center"
  }, "label:wrapper;"),
  input: /*#__PURE__*/css({
    "& .mdc-text-field__input": {
      padding: "0px !important",
      textAlign: "center"
    }
  }, "label:input;"),
  linkSettings: /*#__PURE__*/css({
    boxSizing: "border-box",
    width: 25,
    height: 25,
    display: "flex",
    alignItems: "center",
    border: "1px solid ".concat(COLORS.gray),
    padding: "0px 4px",
    "& svg": {
      transform: "rotate(135deg)",
      width: 16,
      height: 16
    }
  }, "label:linkSettings;"),
  linkSettingsActive: /*#__PURE__*/css({
    backgroundColor: "var(--mdc-theme-secondary)",
    color: "var(--mdc-theme-on-primary)"
  }, "label:linkSettingsActive;")
};
/**
 * MarginPaddingSettings (Padding/Margin settings).
 * This component is reused in Padding and Margin plugins since the behavior of both CSS attributes is the same.
 */

var paddingUnitOptions = [{
  label: "%",
  value: "%"
}, {
  label: "px",
  value: "px"
}, {
  label: "em",
  value: "em"
}, {
  label: "vh",
  value: "vh"
}, {
  label: "vw",
  value: "vw"
}];
var marginUnitOptions = [{
  label: "%",
  value: "%"
}, {
  label: "px",
  value: "px"
}, {
  label: "em",
  value: "em"
}, {
  label: "vh",
  value: "vh"
}, {
  label: "vw",
  value: "vw"
}, {
  label: "auto",
  value: "auto"
}];
var options = {
  padding: paddingUnitOptions,
  margin: marginUnitOptions
};
var SIDES = ["top", "right", "bottom", "left"];
var DEFAULT_VALUE = "0px";

var MarginPaddingSettings = function MarginPaddingSettings(_ref) {
  var styleAttribute = _ref.styleAttribute,
      defaultAccordionValue = _ref.defaultAccordionValue;
  var valueKey = "data.settings.".concat(styleAttribute);

  var _useRecoilValue = useRecoilValue(uiAtom),
      displayMode = _useRecoilValue.displayMode;

  var activeElementId = useRecoilValue(activeElementAtom);
  var element = useRecoilValue(elementWithChildrenByIdSelector(activeElementId));

  var _useMemo = useMemo(function () {
    return plugins.byType("pb-editor-responsive-mode").find(function (pl) {
      return pl.config.displayMode === displayMode;
    });
  }, [displayMode]),
      activeEditorModeConfig = _useMemo.config;

  var fallbackValue = useMemo(function () {
    return applyFallbackDisplayMode(displayMode, function (mode) {
      return get(element, "".concat(valueKey, ".").concat(mode));
    });
  }, [displayMode]);
  var advanced = get(element, "".concat(valueKey, ".").concat(displayMode, ".advanced"), get(fallbackValue, "advanced", false)); // Keep track of whether we're using "advanced" value from fallback.

  var isAdvancedValueFallback = get(element, "".concat(valueKey, ".").concat(displayMode, ".advanced")) === undefined;

  var _useUpdateHandlers = useUpdateHandlers({
    element: element,
    dataNamespace: valueKey,
    postModifyElement: function postModifyElement(_ref2) {
      var name = _ref2.name,
          newElement = _ref2.newElement,
          newValue = _ref2.newValue;

      // Bail out early if "advanced" property has changed.
      if (name.includes("advanced")) {
        return;
      }

      var changeInTopValue = name.includes(".top");
      var advanced = get(newElement, "".concat(valueKey, ".").concat(displayMode, ".advanced"), get(fallbackValue, "advanced", false)); // Update all values in advanced settings

      // Update all values in advanced settings
      if (!advanced && changeInTopValue) {
        // Modify the element directly.
        set(newElement, "".concat(valueKey, ".").concat(displayMode, ".top"), newValue);
        set(newElement, "".concat(valueKey, ".").concat(displayMode, ".right"), newValue);
        set(newElement, "".concat(valueKey, ".").concat(displayMode, ".bottom"), newValue);
        set(newElement, "".concat(valueKey, ".").concat(displayMode, ".left"), newValue); // Also set "all"

        // Also set "all"
        set(newElement, "".concat(valueKey, ".").concat(displayMode, ".all"), newValue);
      } // Set "advanced" value if we're using fallback value to show cascade style


      // Set "advanced" value if we're using fallback value to show cascade style
      if (isAdvancedValueFallback) {
        set(newElement, "".concat(valueKey, ".").concat(displayMode, ".advanced"), advanced);
      }
    }
  }),
      getUpdateValue = _useUpdateHandlers.getUpdateValue;

  var toggleAdvanced = useCallback(function (event) {
    event.stopPropagation();
    getUpdateValue("".concat(displayMode, ".advanced"))(!advanced);
  }, [advanced, displayMode, getUpdateValue]);
  var updateValueTop = useRecoilCallback(function (_ref3) {
    var snapshot = _ref3.snapshot;
    return /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value) {
        var _yield$snapshot$getPr, displayMode;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return snapshot.getPromise(uiAtom);

              case 2:
                _yield$snapshot$getPr = _context.sent;
                displayMode = _yield$snapshot$getPr.displayMode;
                getUpdateValue("".concat(displayMode, ".top"))(value);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref4.apply(this, arguments);
      };
    }();
  });
  var updateValueRight = useRecoilCallback(function (_ref5) {
    var snapshot = _ref5.snapshot;
    return /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(value) {
        var _yield$snapshot$getPr2, displayMode;

        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return snapshot.getPromise(uiAtom);

              case 2:
                _yield$snapshot$getPr2 = _context2.sent;
                displayMode = _yield$snapshot$getPr2.displayMode;
                getUpdateValue("".concat(displayMode, ".right"))(value);

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref6.apply(this, arguments);
      };
    }();
  });
  var updateValueBottom = useRecoilCallback(function (_ref7) {
    var snapshot = _ref7.snapshot;
    return /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(value) {
        var _yield$snapshot$getPr3, displayMode;

        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return snapshot.getPromise(uiAtom);

              case 2:
                _yield$snapshot$getPr3 = _context3.sent;
                displayMode = _yield$snapshot$getPr3.displayMode;
                getUpdateValue("".concat(displayMode, ".bottom"))(value);

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x3) {
        return _ref8.apply(this, arguments);
      };
    }();
  });
  var updateValueLeft = useRecoilCallback(function (_ref9) {
    var snapshot = _ref9.snapshot;
    return /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(value) {
        var _yield$snapshot$getPr4, displayMode;

        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return snapshot.getPromise(uiAtom);

              case 2:
                _yield$snapshot$getPr4 = _context4.sent;
                displayMode = _yield$snapshot$getPr4.displayMode;
                getUpdateValue("".concat(displayMode, ".left"))(value);

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x4) {
        return _ref10.apply(this, arguments);
      };
    }();
  });

  var _useMemo2 = useMemo(function () {
    return SIDES.map(function (side) {
      if (advanced) {
        return get(element, valueKey + ".".concat(displayMode, ".") + side, get(fallbackValue, side, DEFAULT_VALUE));
      }

      return get(element, valueKey + ".".concat(displayMode, ".") + "all", get(fallbackValue, "all", DEFAULT_VALUE));
    });
  }, [advanced, element, displayMode, fallbackValue]),
      _useMemo3 = _slicedToArray(_useMemo2, 4),
      top = _useMemo3[0],
      right = _useMemo3[1],
      bottom = _useMemo3[2],
      left = _useMemo3[3];

  return /*#__PURE__*/React.createElement(Accordion, {
    title: startCase(styleAttribute),
    defaultValue: defaultAccordionValue,
    action: /*#__PURE__*/React.createElement(Tooltip, {
      content: "link all sides"
    }, /*#__PURE__*/React.createElement("button", {
      className: classNames(classes.linkSettings, _defineProperty({}, classes.linkSettingsActive, !advanced)),
      onClick: toggleAdvanced
    }, /*#__PURE__*/React.createElement(LinkIcon, null))),
    icon: /*#__PURE__*/React.createElement(Tooltip, {
      content: "Changes will apply for ".concat(activeEditorModeConfig.displayMode)
    }, activeEditorModeConfig.icon)
  }, /*#__PURE__*/React.createElement(SpacingGrid, null, /*#__PURE__*/React.createElement(TopLeft, null), /*#__PURE__*/React.createElement(Top, {
    className: "align-center"
  }, /*#__PURE__*/React.createElement(SpacingPicker, {
    value: top,
    onChange: updateValueTop,
    options: options[styleAttribute]
  })), /*#__PURE__*/React.createElement(TopRight, null), /*#__PURE__*/React.createElement(Left, null, /*#__PURE__*/React.createElement(SpacingPicker, {
    value: left,
    onChange: updateValueLeft,
    options: options[styleAttribute],
    disabled: !advanced
  })), /*#__PURE__*/React.createElement(Center, {
    className: "align-center"
  }, /*#__PURE__*/React.createElement(Typography, {
    className: "text mono",
    use: "subtitle2"
  }, get(element, "data.settings.width.value", "auto"), "\xA0x\xA0", get(element, "data.settings.height.value", "auto"))), /*#__PURE__*/React.createElement(Right, null, /*#__PURE__*/React.createElement(SpacingPicker, {
    value: right,
    onChange: updateValueRight,
    options: options[styleAttribute],
    disabled: !advanced
  })), /*#__PURE__*/React.createElement(BottomLeft, null), /*#__PURE__*/React.createElement(Bottom, {
    className: "align-center"
  }, /*#__PURE__*/React.createElement(SpacingPicker, {
    value: bottom,
    onChange: updateValueBottom,
    options: options[styleAttribute],
    disabled: !advanced
  })), /*#__PURE__*/React.createElement(BottomRight, null)));
};

export default /*#__PURE__*/React.memo(MarginPaddingSettings);
//# sourceMappingURL=MarginPaddingSettings.js.map