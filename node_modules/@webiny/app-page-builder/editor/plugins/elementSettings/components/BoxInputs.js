import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _get from "lodash/get";
import React, { useCallback } from "react";
import classNames from "classnames";
import { css } from "emotion";
import { Grid, Cell } from "@webiny/ui/Grid";
import { Typography } from "@webiny/ui/Typography";
import { ReactComponent as LinkIcon } from "@svgr/webpack!../../../assets/icons/link.svg"; // Components

import InputField from "./InputField";
import { COLORS } from "./StyledComponents";
var classes = {
  gridWrapper: /*#__PURE__*/css({
    "&.mdc-layout-grid": {
      padding: 0,
      marginBottom: 36,
      "& .mdc-layout-grid__inner": {
        gridRowGap: 8
      }
    }
  }, "label:gridWrapper;"),
  wrapper: /*#__PURE__*/css({
    display: "flex"
  }, "label:wrapper;"),
  inputWrapper: /*#__PURE__*/css({
    height: 32
  }, "label:inputWrapper;"),
  input: /*#__PURE__*/css({
    textAlign: "center"
  }, "label:input;"),
  linkSettings: /*#__PURE__*/css({
    display: "flex",
    alignItems: "center",
    border: "1px solid ".concat(COLORS.gray),
    padding: "0px 5px",
    minHeight: 30,
    minWidth: 28,
    "& svg": {
      transform: "rotate(135deg)",
      width: 16,
      height: 16
    }
  }, "label:linkSettings;"),
  linkSettingsActive: /*#__PURE__*/css({
    backgroundColor: "var(--mdc-theme-secondary)",
    color: "var(--mdc-theme-on-primary)"
  }, "label:linkSettingsActive;"),
  controllerWrapper: /*#__PURE__*/css({
    display: "flex",
    flexDirection: "column",
    "& button": {
      border: "1px solid var(--mdc-theme-on-background) !important",
      padding: "0px !important",
      height: "28px !important"
    },
    "&:first-child": {
      borderBottom: "none !important"
    }
  }, "label:controllerWrapper;")
};
var defaultCorners = [{
  label: "Top",
  key: "top"
}, {
  label: "Right",
  key: "right"
}, {
  label: "Bottom",
  key: "bottom"
}, {
  label: "Left",
  key: "left"
}];
/**
 * MarginPaddingSettings (Padding/Margin settings).
 * This component is reused in Padding and Margin plugins since the behavior of both CSS attributes is the same.
 */

var BoxInputs = function BoxInputs(_ref) {
  var label = _ref.label,
      value = _ref.value,
      valueKey = _ref.valueKey,
      getUpdateValue = _ref.getUpdateValue,
      _ref$sides = _ref.sides,
      sides = _ref$sides === void 0 ? defaultCorners : _ref$sides;

  var advanced = _get(value, "".concat(valueKey, ".advanced"), false);

  var all = _get(value, "".concat(valueKey, ".all"), 0);

  var _sides$map = sides.map(function (_ref2) {
    var key = _ref2.key,
        label = _ref2.label;
    return {
      label: label,
      key: key,
      value: _get(value, "".concat(valueKey, ".").concat(key), 0)
    };
  }),
      _sides$map2 = _slicedToArray(_sides$map, 4),
      top = _sides$map2[0],
      right = _sides$map2[1],
      bottom = _sides$map2[2],
      left = _sides$map2[3];

  var toggleLinked = useCallback(function (e) {
    e.stopPropagation();
    getUpdateValue("".concat(valueKey, ".advanced"))(!advanced);
  }, [advanced]);
  return /*#__PURE__*/React.createElement(Grid, {
    className: classes.gridWrapper
  }, /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(Typography, {
    use: "subtitle2"
  }, label)), /*#__PURE__*/React.createElement(Cell, {
    span: 12,
    className: classes.wrapper
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.inputWrapper
  }, /*#__PURE__*/React.createElement(InputField, {
    className: classes.input,
    description: top.label,
    value: !advanced ? all : top.value,
    onChange: !advanced ? getUpdateValue(valueKey + ".all") : getUpdateValue("".concat(valueKey, ".").concat(top.key))
  })), /*#__PURE__*/React.createElement("div", {
    className: classes.inputWrapper
  }, /*#__PURE__*/React.createElement(InputField, {
    disabled: !advanced,
    className: classes.input,
    description: right.label,
    value: advanced ? right.value : "",
    onChange: getUpdateValue("".concat(valueKey, ".").concat(right.key))
  })), /*#__PURE__*/React.createElement("div", {
    className: classes.inputWrapper
  }, /*#__PURE__*/React.createElement(InputField, {
    disabled: !advanced,
    className: classes.input,
    description: bottom.label,
    value: advanced ? bottom.value : "",
    onChange: getUpdateValue("".concat(valueKey, ".").concat(bottom.key))
  })), /*#__PURE__*/React.createElement("div", {
    className: classes.inputWrapper
  }, /*#__PURE__*/React.createElement(InputField, {
    disabled: !advanced,
    className: classes.input,
    description: left.label,
    value: advanced ? left.value : "",
    onChange: getUpdateValue("".concat(valueKey, ".").concat(left.key))
  })), /*#__PURE__*/React.createElement("button", {
    className: classNames(classes.linkSettings, _defineProperty({}, classes.linkSettingsActive, !advanced)),
    onClick: toggleLinked
  }, /*#__PURE__*/React.createElement(LinkIcon, null))));
};

export default /*#__PURE__*/React.memo(BoxInputs);
//# sourceMappingURL=BoxInputs.js.map