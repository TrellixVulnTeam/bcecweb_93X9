{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/components/BoxInputs.tsx"],"names":["React","useCallback","classNames","css","Grid","Cell","Typography","InputField","COLORS","classes","gridWrapper","padding","marginBottom","gridRowGap","wrapper","display","inputWrapper","height","input","textAlign","linkSettings","alignItems","border","gray","minHeight","minWidth","transform","width","linkSettingsActive","backgroundColor","color","controllerWrapper","flexDirection","borderBottom","defaultCorners","label","key","BoxInputs","value","valueKey","getUpdateValue","sides","advanced","all","map","top","right","bottom","left","toggleLinked","e","stopPropagation","memo"],"mappings":"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","sourcesContent":["import React, { useCallback } from \"react\";\nimport { get } from \"lodash\";\nimport classNames from \"classnames\";\nimport { css } from \"emotion\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { ReactComponent as LinkIcon } from \"../../../assets/icons/link.svg\";\n// Components\nimport InputField from \"./InputField\";\nimport { COLORS } from \"./StyledComponents\";\n\nconst classes = {\n    gridWrapper: css({\n        \"&.mdc-layout-grid\": {\n            padding: 0,\n            marginBottom: 36,\n            \"& .mdc-layout-grid__inner\": {\n                gridRowGap: 8\n            }\n        }\n    }),\n    wrapper: css({\n        display: \"flex\"\n    }),\n    inputWrapper: css({\n        height: 32\n    }),\n    input: css({\n        textAlign: \"center\"\n    }),\n    linkSettings: css({\n        display: \"flex\",\n        alignItems: \"center\",\n        border: `1px solid ${COLORS.gray}`,\n        padding: \"0px 5px\",\n        minHeight: 30,\n        minWidth: 28,\n\n        \"& svg\": {\n            transform: \"rotate(135deg)\",\n            width: 16,\n            height: 16\n        }\n    }),\n    linkSettingsActive: css({\n        backgroundColor: \"var(--mdc-theme-secondary)\",\n        color: \"var(--mdc-theme-on-primary)\"\n    }),\n    controllerWrapper: css({\n        display: \"flex\",\n        flexDirection: \"column\",\n\n        \"& button\": {\n            border: \"1px solid var(--mdc-theme-on-background) !important\",\n            padding: \"0px !important\",\n            height: \"28px !important\"\n        },\n        \"&:first-child\": {\n            borderBottom: \"none !important\"\n        }\n    })\n};\n\nconst defaultCorners = [\n    {\n        label: \"Top\",\n        key: \"top\"\n    },\n    {\n        label: \"Right\",\n        key: \"right\"\n    },\n    {\n        label: \"Bottom\",\n        key: \"bottom\"\n    },\n    {\n        label: \"Left\",\n        key: \"left\"\n    }\n];\n\n/**\n * MarginPaddingSettings (Padding/Margin settings).\n * This component is reused in Padding and Margin plugins since the behavior of both CSS attributes is the same.\n */\n\ntype PMSettingsPropsType = {\n    label: string;\n    value: any;\n    valueKey: string;\n    getUpdateValue: any;\n    sides?: Record<string, any>[];\n};\n\nconst BoxInputs: React.FunctionComponent<PMSettingsPropsType> = ({\n    label,\n    value,\n    valueKey,\n    getUpdateValue,\n    sides = defaultCorners\n}) => {\n    const advanced = get(value, `${valueKey}.advanced`, false);\n    const all = get(value, `${valueKey}.all`, 0);\n    const [top, right, bottom, left] = sides.map(({ key, label }) => ({\n        label,\n        key,\n        value: get(value, `${valueKey}.${key}`, 0)\n    }));\n\n    const toggleLinked = useCallback(\n        e => {\n            e.stopPropagation();\n            getUpdateValue(`${valueKey}.advanced`)(!advanced);\n        },\n        [advanced]\n    );\n\n    return (\n        <Grid className={classes.gridWrapper}>\n            <Cell span={12}>\n                <Typography use={\"subtitle2\"}>{label}</Typography>\n            </Cell>\n            <Cell span={12} className={classes.wrapper}>\n                <div className={classes.inputWrapper}>\n                    <InputField\n                        className={classes.input}\n                        description={top.label}\n                        value={!advanced ? all : top.value}\n                        onChange={\n                            !advanced\n                                ? getUpdateValue(valueKey + \".all\")\n                                : getUpdateValue(`${valueKey}.${top.key}`)\n                        }\n                    />\n                </div>\n                <div className={classes.inputWrapper}>\n                    <InputField\n                        disabled={!advanced}\n                        className={classes.input}\n                        description={right.label}\n                        value={advanced ? right.value : \"\"}\n                        onChange={getUpdateValue(`${valueKey}.${right.key}`)}\n                    />\n                </div>\n                <div className={classes.inputWrapper}>\n                    <InputField\n                        disabled={!advanced}\n                        className={classes.input}\n                        description={bottom.label}\n                        value={advanced ? bottom.value : \"\"}\n                        onChange={getUpdateValue(`${valueKey}.${bottom.key}`)}\n                    />\n                </div>\n                <div className={classes.inputWrapper}>\n                    <InputField\n                        disabled={!advanced}\n                        className={classes.input}\n                        description={left.label}\n                        value={advanced ? left.value : \"\"}\n                        onChange={getUpdateValue(`${valueKey}.${left.key}`)}\n                    />\n                </div>\n                <button\n                    className={classNames(classes.linkSettings, {\n                        [classes.linkSettingsActive]: !advanced\n                    })}\n                    onClick={toggleLinked}\n                >\n                    <LinkIcon />\n                </button>\n            </Cell>\n        </Grid>\n    );\n};\n\nexport default React.memo(BoxInputs);\n"],"file":"BoxInputs.js"}