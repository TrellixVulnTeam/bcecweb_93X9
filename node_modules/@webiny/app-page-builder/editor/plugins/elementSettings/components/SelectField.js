import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["value", "onChange", "children", "className", "validation", "description"];
import React from "react";
import { css } from "emotion";
import classNames from "classnames";
import omit from "lodash/omit";
import { FormElementMessage } from "@webiny/ui/FormElementMessage";
import { COLORS } from "./StyledComponents";
var selectStyle = /*#__PURE__*/css({
  display: "block",
  color: COLORS.darkestGray,
  padding: ".6em 1.4em .5em .8em",
  width: "100%",
  maxWidth: "100%",
  boxSizing: "border-box",
  margin: "0",
  border: "1px solid ".concat(COLORS.gray),
  borderRadius: 1,
  MozAppearance: "none",
  WebkitAppearance: "none",
  appearance: "none",
  backgroundColor: COLORS.lightGray,
  backgroundImage: "url(\"data:image/svg+xml;utf8,<svg fill='black' height='24' viewBox='0 0 24 24' width='24' xmlns='http://www.w3.org/2000/svg'><path d='M7 10l5 5 5-5z'/><path d='M0 0h24v24H0z' fill='none'/></svg>\")",
  backgroundRepeat: "no-repeat, repeat",
  backgroundPosition: "right .7em top 50%, 0 0",
  backgroundSize: "24px auto, 100%",
  "&::-ms-expand": {
    display: "none"
  },
  "&:hover:not(:disabled)": {
    borderColor: COLORS.darkGray,
    backgroundColor: COLORS.gray
  },
  "&:focus:not(:disabled)": {
    borderColor: COLORS.darkGray,
    outline: "none",
    backgroundColor: COLORS.gray
  },
  "&:disabled": {
    opacity: 0.5,
    cursor: "not-allowed",
    borderColor: COLORS.lightGray
  },
  "& option": {
    fontWeight: "normal"
  }
}, "label:selectStyle;");

var SelectField = function SelectField(_ref) {
  var value = _ref.value,
      _onChange = _ref.onChange,
      children = _ref.children,
      className = _ref.className,
      _ref$validation = _ref.validation,
      validation = _ref$validation === void 0 ? {
    isValid: true
  } : _ref$validation,
      description = _ref.description,
      props = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("select", Object.assign({
    className: classNames(selectStyle, className),
    value: value,
    onChange: function onChange(_ref2) {
      var value = _ref2.target.value;

      _onChange(value);
    }
  }, omit(props, "validate")), children), validation.isValid === false && /*#__PURE__*/React.createElement(FormElementMessage, {
    error: true
  }, validation.message), validation.isValid !== false && description && /*#__PURE__*/React.createElement(FormElementMessage, null, description));
};

export default /*#__PURE__*/React.memo(SelectField);
//# sourceMappingURL=SelectField.js.map