{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/components/InputField.tsx"],"names":["React","css","classNames","omit","Typography","FormElementMessage","COLORS","inputStyle","boxSizing","border","width","padding","textAlign","minHeight","backgroundColor","lightGray","gray","opacity","cursor","WebkitAppearance","margin","labelStyle","marginBottom","color","getValue","value","defaultValue","type","isNaN","InputField","className","onChange","label","description","validation","isValid","props","target","message","memo"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { css } from \"emotion\";\nimport classNames from \"classnames\";\nimport omit from \"lodash/omit\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { FormElementMessage } from \"@webiny/ui/FormElementMessage\";\nimport { COLORS } from \"./StyledComponents\";\n\nconst inputStyle = css({\n    boxSizing: \"border-box\",\n    border: \"1px solid var(--mdc-theme-on-background)\",\n    width: \"100%\",\n    padding: \"4px 8px\",\n    textAlign: \"left\",\n    minHeight: 32,\n    backgroundColor: COLORS.lightGray,\n    \"&:focus:not(:disabled)\": {\n        backgroundColor: COLORS.gray\n    },\n    \"&:hover:not(:disabled)\": {\n        backgroundColor: COLORS.gray\n    },\n    \"&:disabled\": {\n        opacity: 0.5,\n        cursor: \"not-allowed\"\n    },\n\n    \"&.text-center\": {\n        textAlign: \"center\",\n        padding: 4\n    },\n\n    \"&::-webkit-inner-spin-button\": {\n        WebkitAppearance: \"none\",\n        margin: 0\n    },\n    \"&::-webkit-outer-spin-button\": {\n        WebkitAppearance: \"none\",\n        margin: 0\n    }\n});\n\nconst labelStyle = css({\n    marginBottom: 8,\n    padding: \"0px 8px\",\n    \"& span\": {\n        color: \"var(--mdc-theme-text-primary-on-background)\"\n    }\n});\n\nconst getValue = ({ value, defaultValue, type }) => {\n    if (type === \"number\") {\n        return isNaN(value) ? defaultValue : value;\n    }\n    return value || defaultValue;\n};\n\ntype InputBoxProps = {\n    value?: string | number;\n    onChange?: (value: any) => void;\n    defaultValue?: string | number;\n    [key: string]: any;\n};\nconst InputField = ({\n    className,\n    value,\n    onChange,\n    label,\n    description,\n    validation = { isValid: true },\n    defaultValue = \"\",\n    ...props\n}: InputBoxProps) => {\n    return (\n        <React.Fragment>\n            {label && (\n                <div className={labelStyle}>\n                    <Typography use={\"subtitle2\"}>{label}</Typography>\n                </div>\n            )}\n            <input\n                className={classNames(inputStyle, className)}\n                value={getValue({ value, type: props.type, defaultValue })}\n                onChange={({ target: { value } }) => {\n                    onChange(value);\n                }}\n                {...omit(props, \"validate\")}\n            />\n            {validation.isValid === false && (\n                <FormElementMessage error>{validation.message}</FormElementMessage>\n            )}\n            {validation.isValid !== false && description && (\n                <FormElementMessage>{description}</FormElementMessage>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default React.memo(InputField);\n"],"file":"InputField.js"}