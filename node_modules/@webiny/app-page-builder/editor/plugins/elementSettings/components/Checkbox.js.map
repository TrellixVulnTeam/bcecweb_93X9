{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/components/Checkbox.tsx"],"names":["React","activeElementAtom","elementByIdSelector","Typography","Grid","Cell","Checkbox","CheckboxCmp","useRecoilValue","label","valueKey","defaultValue","value","updateValue","children","activeElementId","element","memo"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,EAA4BC,mBAA5B;AAEA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,iBAA3B;AACA,SAASC,QAAQ,IAAIC,WAArB,QAAwC,qBAAxC;AAEA,SAASC,cAAT,QAA+B,QAA/B;;AAWA,IAAMF,QAAQ,GAAG,SAAXA,QAAW,OAMI;AAAA,MALjBG,KAKiB,QALjBA,KAKiB;AAAA,MAJjBC,QAIiB,QAJjBA,QAIiB;AAAA,MAHVC,YAGU,QAHjBC,KAGiB;AAAA,MAFjBC,WAEiB,QAFjBA,WAEiB;AAAA,MADjBC,QACiB,QADjBA,QACiB;AACjB,MAAMC,eAAe,GAAGP,cAAc,CAACP,iBAAD,CAAtC;AACA,MAAMe,OAAO,GAAGR,cAAc,CAACN,mBAAmB,CAACa,eAAD,CAApB,CAA9B;AACA,MAAMH,KAAK,GAAGF,QAAQ,GAAG,KAAIM,OAAJ,EAAaN,QAAb,EAAuBC,YAAvB,CAAH,GAA0CA,YAAhE;AACA,sBACI,oBAAC,IAAD,qBACI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAZ,kBACI,oBAAC,UAAD;AAAY,IAAA,GAAG,EAAE;AAAjB,KAA8BF,KAA9B,CADJ,CADJ,eAII,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAZ,kBACI,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAEG,KAApB;AAA2B,IAAA,QAAQ,EAAEC;AAArC,KACKC,QADL,CADJ,CAJJ,CADJ;AAYH,CAtBD;;AAwBA,4BAAed,KAAK,CAACiB,IAAN,CAAWX,QAAX,CAAf","sourcesContent":["import React from \"react\";\nimport { activeElementAtom, elementByIdSelector } from \"../../../recoil/modules\";\nimport { get } from \"lodash\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { Checkbox as CheckboxCmp } from \"@webiny/ui/Checkbox\";\nimport { ReactElement } from \"react\";\nimport { useRecoilValue } from \"recoil\";\n\ntype CheckboxProps = {\n    label: string;\n    value: string;\n    valueKey: string;\n    updateValue: (value: any) => void;\n    // One or more <option> or <optgroup> elements.\n    children?: Array<ReactElement<\"option\"> | ReactElement<\"optgroup\">>;\n};\n\nconst Checkbox = ({\n    label,\n    valueKey,\n    value: defaultValue,\n    updateValue,\n    children\n}: CheckboxProps) => {\n    const activeElementId = useRecoilValue(activeElementAtom);\n    const element = useRecoilValue(elementByIdSelector(activeElementId));\n    const value = valueKey ? get(element, valueKey, defaultValue) : defaultValue;\n    return (\n        <Grid>\n            <Cell span={4}>\n                <Typography use={\"overline\"}>{label}</Typography>\n            </Cell>\n            <Cell span={8}>\n                <CheckboxCmp value={value} onChange={updateValue}>\n                    {children}\n                </CheckboxCmp>\n            </Cell>\n        </Grid>\n    );\n};\n\nexport default React.memo(Checkbox);\n"],"file":"Checkbox.js"}