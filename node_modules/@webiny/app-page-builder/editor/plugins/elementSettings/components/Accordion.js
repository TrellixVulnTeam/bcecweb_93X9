import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useCallback, useState } from "react";
import { css } from "emotion";
import classNames from "classnames";
import { COLORS } from "./StyledComponents";
import { Typography } from "@webiny/ui/Typography";
var classes = {
  accordionWrapper: /*#__PURE__*/css({
    /**
     * We're using position: "relative" here for "Popping Out of Hidden Overflow" https://css-tricks.com/popping-hidden-overflow/
     * so that, we can use absolute positioned element inside without "overflow: hidden" being a problem
     */
    position: "relative",
    width: "100%",
    borderBottom: "1px solid ".concat(COLORS.gray)
  }, "label:accordionWrapper;"),
  accordionHeader: /*#__PURE__*/css({
    position: "relative",
    color: "var(--mdc-theme-text-secondary-on-background)",
    cursor: "pointer",
    padding: "12px 16px",
    display: "flex",
    alignItems: "center",
    justifyContent: "space-between",
    "& .accordion-header--left": {
      display: "flex",
      alignItems: "center",
      justifyContent: "space-between",
      "& .accordion-title": {
        span: {
          marginLeft: 16
        }
      }
    },
    "& .accordion-header--right": {
      display: "flex",
      "& .action-container": {
        display: "none",
        marginRight: 8
      },
      "& .icon-container": {
        display: "flex",
        alignItems: "center",
        "& span": {
          display: "flex"
        },
        "& svg": {
          fill: "currentColor",
          width: 14,
          height: 14
        }
      }
    },
    "&::before": {
      position: "absolute",
      top: 20,
      left: 16,
      content: '""',
      width: 0,
      height: 0,
      // Arrow right.
      borderTop: "5px solid transparent",
      borderBottom: "5px solid transparent",
      borderLeft: "5px solid currentColor"
    },
    "&.open": {
      color: COLORS.black,
      backgroundColor: "hsla(0,0%,97%,1)",
      "&::before": {
        transform: "translateY(3px) rotate(90deg)"
      },
      "& .action-container": {
        display: "block"
      }
    }
  }, "label:accordionHeader;"),
  accordionItem: /*#__PURE__*/css({
    overflow: "hidden",
    transition: "max-height 0.3s cubic-bezier(1, 0, 1, 0)",
    height: "auto",
    maxHeight: "9999px",
    "&.collapsed": {
      maxHeight: 0,
      transition: "max-height 0.35s cubic-bezier(0, 1, 0, 1)"
    },
    "& .accordion-content": {
      padding: "16px 12px 24px"
    }
  }, "label:accordionItem;")
};

var Accordion = function Accordion(_ref) {
  var title = _ref.title,
      children = _ref.children,
      action = _ref.action,
      icon = _ref.icon,
      _ref$defaultValue = _ref.defaultValue,
      defaultValue = _ref$defaultValue === void 0 ? false : _ref$defaultValue;

  var _useState = useState(defaultValue),
      _useState2 = _slicedToArray(_useState, 2),
      isOpen = _useState2[0],
      setOpen = _useState2[1];

  var toggleOpen = useCallback(function () {
    return setOpen(!isOpen);
  }, [isOpen]);
  return /*#__PURE__*/React.createElement("div", {
    className: classes.accordionWrapper
  }, /*#__PURE__*/React.createElement("div", {
    className: classNames(classes.accordionHeader, {
      open: isOpen
    }),
    onClick: toggleOpen
  }, /*#__PURE__*/React.createElement("div", {
    className: "accordion-header--left"
  }, /*#__PURE__*/React.createElement("div", {
    className: "accordion-title"
  }, /*#__PURE__*/React.createElement(Typography, {
    use: "subtitle1"
  }, title))), /*#__PURE__*/React.createElement("div", {
    className: "accordion-header--right"
  }, /*#__PURE__*/React.createElement("div", {
    className: "action-container"
  }, action), /*#__PURE__*/React.createElement("div", {
    className: "icon-container"
  }, icon))), /*#__PURE__*/React.createElement("div", {
    className: classNames(classes.accordionItem, {
      collapsed: !isOpen
    })
  }, /*#__PURE__*/React.createElement("div", {
    className: "accordion-content"
  }, children)));
};

export default /*#__PURE__*/React.memo(Accordion);
//# sourceMappingURL=Accordion.js.map