{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/components/Select.tsx"],"names":["React","activeElementAtom","elementWithChildrenByIdSelector","Typography","Grid","Cell","Select","SelectCmp","css","useRecoilValue","selectStyle","select","height","paddingTop","label","value","valueKey","defaultValue","updateValue","options","children","className","activeElementId","element","keyValue","memo"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,EAA4BC,+BAA5B;AAEA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,iBAA3B;AACA,SAASC,MAAM,IAAIC,SAAnB,QAAoC,mBAApC;AACA,SAASC,GAAT,QAAoB,SAApB;AACA,SAASC,cAAT,QAA+B,QAA/B;AAEA,IAAMC,WAAW,gBAAGF,GAAG,CAAC;AACpBG,EAAAA,MAAM,EAAE;AACJC,IAAAA,MAAM,EAAE,EADJ;AAEJC,IAAAA,UAAU,EAAE;AAFR;AADY,CAAD,uBAAvB;;AAoBA,IAAMP,MAAM,GAAG,SAATA,MAAS,OASI;AAAA,MARfQ,KAQe,QARfA,KAQe;AAAA,MAPfC,KAOe,QAPfA,KAOe;AAAA,MANfC,QAMe,QANfA,QAMe;AAAA,MALfC,YAKe,QALfA,YAKe;AAAA,MAJfC,WAIe,QAJfA,WAIe;AAAA,MAHfC,OAGe,QAHfA,OAGe;AAAA,MAFfC,QAEe,QAFfA,QAEe;AAAA,MADfC,SACe,QADfA,SACe;AACf,MAAMC,eAAe,GAAGb,cAAc,CAACR,iBAAD,CAAtC;AACA,MAAMsB,OAAO,GAAGd,cAAc,CAACP,+BAA+B,CAACoB,eAAD,CAAhC,CAA9B;AACA,MAAME,QAAQ,GAAGR,QAAQ,GAAG,KAAIO,OAAJ,EAAaP,QAAb,EAAuBC,YAAvB,CAAH,GAA0CF,KAAnE;AACA,sBACI,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAEM;AAAjB,kBACI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAZ,kBACI,oBAAC,UAAD;AAAY,IAAA,GAAG,EAAE;AAAjB,KAA8BP,KAA9B,CADJ,CADJ,eAII,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAZ,kBACI,oBAAC,SAAD;AACI,IAAA,SAAS,EAAEJ,WADf;AAEI,IAAA,KAAK,EAAEc,QAFX;AAGI,IAAA,QAAQ,EAAEN,WAHd;AAII,IAAA,OAAO,EAAEC;AAJb,KAMKC,QANL,CADJ,CAJJ,CADJ;AAiBH,CA9BD;;AAgCA,4BAAepB,KAAK,CAACyB,IAAN,CAAWnB,MAAX,CAAf","sourcesContent":["import React from \"react\";\nimport { activeElementAtom, elementWithChildrenByIdSelector } from \"../../../recoil/modules\";\nimport { get } from \"lodash\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { Select as SelectCmp } from \"@webiny/ui/Select\";\nimport { css } from \"emotion\";\nimport { useRecoilValue } from \"recoil\";\n\nconst selectStyle = css({\n    select: {\n        height: 35,\n        paddingTop: \"4px !important\"\n    }\n});\n\ntype SelectProps = {\n    label: string;\n    value?: string;\n    valueKey?: string;\n    defaultValue?: string;\n    updateValue: (value: any) => void;\n    options?: Array<string>;\n    disabled?: boolean;\n    // One or more <option> or <optgroup> elements.\n    children?: Array<React.ReactElement<\"option\"> | React.ReactElement<\"optgroup\">>;\n    className?: string;\n};\n\nconst Select = ({\n    label,\n    value,\n    valueKey,\n    defaultValue,\n    updateValue,\n    options,\n    children,\n    className\n}: SelectProps) => {\n    const activeElementId = useRecoilValue(activeElementAtom);\n    const element = useRecoilValue(elementWithChildrenByIdSelector(activeElementId));\n    const keyValue = valueKey ? get(element, valueKey, defaultValue) : value;\n    return (\n        <Grid className={className}>\n            <Cell span={4}>\n                <Typography use={\"overline\"}>{label}</Typography>\n            </Cell>\n            <Cell span={8}>\n                <SelectCmp\n                    className={selectStyle}\n                    value={keyValue}\n                    onChange={updateValue}\n                    options={options}\n                >\n                    {children}\n                </SelectCmp>\n            </Cell>\n        </Grid>\n    );\n};\n\nexport default React.memo(Select);\n"],"file":"Select.js"}