{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/components/PMSettings.tsx"],"names":["React","useMemo","useState","SliderWithInput","Footer","useEventActionHandler","UpdateElementActionEvent","activeElementAtom","elementWithChildrenByIdSelector","Tabs","Tab","set","merge","useRecoilValue","PMSettings","styleAttribute","handler","valueKey","activeElementId","element","advanced","tabIndex","setTabIndex","updateSettings","name","newValue","history","propName","parseInt","newElement","endsWith","prefix","includes","top","right","bottom","left","trigger","getUpdateValue","handlers","value","getUpdatePreview","Boolean","memo"],"mappings":"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","sourcesContent":["import React, { useMemo, useState } from \"react\";\nimport SliderWithInput from \"./SliderWithInput\";\nimport Footer from \"./Footer\";\nimport { useEventActionHandler } from \"../../../hooks/useEventActionHandler\";\nimport { UpdateElementActionEvent } from \"../../../recoil/actions\";\nimport { activeElementAtom, elementWithChildrenByIdSelector } from \"../../../recoil/modules\";\nimport { Tabs, Tab } from \"@webiny/ui/Tabs\";\nimport { get } from \"lodash\";\nimport { set, merge } from \"dot-prop-immutable\";\nimport { ReactComponent as BorderOuterIcon } from \"../../../assets/icons/border_outer.svg\";\nimport { ReactComponent as BorderLeftIcon } from \"../../../assets/icons/border_left.svg\";\nimport { ReactComponent as BorderRightIcon } from \"../../../assets/icons/border_right.svg\";\nimport { ReactComponent as BorderTopIcon } from \"../../../assets/icons/border_top.svg\";\nimport { ReactComponent as BorderBottomIcon } from \"../../../assets/icons/border_bottom.svg\";\nimport { useRecoilValue } from \"recoil\";\n\n/**\n * PMSettings (Padding/Margin settings).\n * This component is reused in Padding and Margin plugins since the behavior of both CSS attributes is the same.\n */\n\ntype PMSettingsPropsType = {\n    styleAttribute: string;\n    // TODO check - not used anywhere\n    title?: string;\n};\n\nconst PMSettings: React.FunctionComponent<PMSettingsPropsType> = ({ styleAttribute }) => {\n    const handler = useEventActionHandler();\n\n    const valueKey = `data.settings.${styleAttribute}`;\n    const activeElementId = useRecoilValue(activeElementAtom);\n    const element = useRecoilValue(elementWithChildrenByIdSelector(activeElementId));\n    const advanced = get(element, `${valueKey}.advanced`, false);\n\n    const [tabIndex, setTabIndex] = useState<number>(0);\n\n    const updateSettings = (name: string, newValue: any, history = false) => {\n        const propName = `${valueKey}.${name}`;\n\n        if (name !== \"advanced\") {\n            newValue = parseInt(newValue) || 0;\n        }\n\n        let newElement = set(element, propName, newValue);\n\n        // Update all values in advanced settings\n        if (propName.endsWith(\".all\")) {\n            const prefix = propName.includes(\"desktop\") ? \"desktop\" : \"mobile\";\n            newElement = merge(newElement, `${valueKey}.${prefix}`, {\n                top: newValue,\n                right: newValue,\n                bottom: newValue,\n                left: newValue\n            });\n        }\n\n        handler.trigger(\n            new UpdateElementActionEvent({\n                element: newElement,\n                history\n            })\n        );\n    };\n\n    const getUpdateValue = useMemo(() => {\n        const handlers = {};\n        return (name: string) => {\n            if (!handlers[name]) {\n                handlers[name] = value => updateSettings(name, value, true);\n            }\n\n            return handlers[name];\n        };\n    }, [updateSettings]);\n\n    const getUpdatePreview = useMemo(() => {\n        const handlers = {};\n        return (name: string) => {\n            if (!handlers[name]) {\n                handlers[name] = value => updateSettings(name, value, false);\n            }\n\n            return handlers[name];\n        };\n    }, [updateSettings]);\n\n    return (\n        <Tabs onActivate={setTabIndex}>\n            <Tab label={\"Desktop\"}>\n                {tabIndex === 0 && (\n                    <>\n                        {!advanced ? (\n                            <SliderWithInput\n                                className={\"no-bottom-padding\"}\n                                icon={<BorderOuterIcon />}\n                                valueKey={valueKey + \".desktop.all\"}\n                                updateValue={getUpdateValue(\"desktop.all\")}\n                                updatePreview={getUpdatePreview(\"desktop.all\")}\n                            />\n                        ) : (\n                            <React.Fragment>\n                                <SliderWithInput\n                                    icon={<BorderTopIcon />}\n                                    valueKey={valueKey + \".desktop.top\"}\n                                    updateValue={getUpdateValue(\"desktop.top\")}\n                                    updatePreview={getUpdatePreview(\"desktop.top\")}\n                                />\n                                <SliderWithInput\n                                    icon={<BorderRightIcon />}\n                                    valueKey={valueKey + \".desktop.right\"}\n                                    updateValue={getUpdateValue(\"desktop.right\")}\n                                    updatePreview={getUpdatePreview(\"desktop.right\")}\n                                />\n                                <SliderWithInput\n                                    icon={<BorderBottomIcon />}\n                                    valueKey={valueKey + \".desktop.bottom\"}\n                                    updateValue={getUpdateValue(\"desktop.bottom\")}\n                                    updatePreview={getUpdatePreview(\"desktop.bottom\")}\n                                />\n                                <SliderWithInput\n                                    className={\"no-bottom-padding\"}\n                                    icon={<BorderLeftIcon />}\n                                    valueKey={valueKey + \".desktop.left\"}\n                                    updateValue={getUpdateValue(\"desktop.left\")}\n                                    updatePreview={getUpdatePreview(\"desktop.left\")}\n                                />\n                            </React.Fragment>\n                        )}\n                    </>\n                )}\n                <Footer advanced={Boolean(advanced)} toggleAdvanced={getUpdateValue(\"advanced\")} />\n            </Tab>\n            <Tab label={\"Mobile\"}>\n                {tabIndex === 1 && (\n                    <>\n                        {!advanced ? (\n                            <SliderWithInput\n                                className={\"no-bottom-padding\"}\n                                icon={<BorderOuterIcon />}\n                                valueKey={valueKey + \".mobile.all\"}\n                                updateValue={getUpdateValue(\"mobile.all\")}\n                                updatePreview={getUpdatePreview(\"mobile.all\")}\n                            />\n                        ) : (\n                            <React.Fragment>\n                                <SliderWithInput\n                                    icon={<BorderTopIcon />}\n                                    valueKey={valueKey + \".mobile.top\"}\n                                    updateValue={getUpdateValue(\"mobile.top\")}\n                                    updatePreview={getUpdatePreview(\"mobile.top\")}\n                                />\n                                <SliderWithInput\n                                    icon={<BorderRightIcon />}\n                                    valueKey={valueKey + \".mobile.right\"}\n                                    updateValue={getUpdateValue(\"mobile.right\")}\n                                    updatePreview={getUpdatePreview(\"mobile.right\")}\n                                />\n                                <SliderWithInput\n                                    icon={<BorderBottomIcon />}\n                                    valueKey={valueKey + \".mobile.bottom\"}\n                                    updateValue={getUpdateValue(\"mobile.bottom\")}\n                                    updatePreview={getUpdatePreview(\"mobile.bottom\")}\n                                />\n                                <SliderWithInput\n                                    className={\"no-bottom-padding\"}\n                                    icon={<BorderLeftIcon />}\n                                    valueKey={valueKey + \".mobile.left\"}\n                                    updateValue={getUpdateValue(\"mobile.left\")}\n                                    updatePreview={getUpdatePreview(\"mobile.left\")}\n                                />\n                            </React.Fragment>\n                        )}\n                    </>\n                )}\n                <Footer advanced={Boolean(advanced)} toggleAdvanced={getUpdateValue(\"advanced\")} />\n            </Tab>\n        </Tabs>\n    );\n};\n\nexport default React.memo(PMSettings);\n"],"file":"PMSettings.js"}