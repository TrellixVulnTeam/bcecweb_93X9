import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _get from "lodash/get";
import React, { useMemo, useState } from "react";
import SliderWithInput from "./SliderWithInput";
import Footer from "./Footer";
import { useEventActionHandler } from "../../../hooks/useEventActionHandler";
import { UpdateElementActionEvent } from "../../../recoil/actions";
import { activeElementAtom, elementWithChildrenByIdSelector } from "../../../recoil/modules";
import { Tabs, Tab } from "@webiny/ui/Tabs";
import { set, merge } from "dot-prop-immutable";
import { ReactComponent as BorderOuterIcon } from "@svgr/webpack!../../../assets/icons/border_outer.svg";
import { ReactComponent as BorderLeftIcon } from "@svgr/webpack!../../../assets/icons/border_left.svg";
import { ReactComponent as BorderRightIcon } from "@svgr/webpack!../../../assets/icons/border_right.svg";
import { ReactComponent as BorderTopIcon } from "@svgr/webpack!../../../assets/icons/border_top.svg";
import { ReactComponent as BorderBottomIcon } from "@svgr/webpack!../../../assets/icons/border_bottom.svg";
import { useRecoilValue } from "recoil";
/**
 * PMSettings (Padding/Margin settings).
 * This component is reused in Padding and Margin plugins since the behavior of both CSS attributes is the same.
 */

var PMSettings = function PMSettings(_ref) {
  var styleAttribute = _ref.styleAttribute;
  var handler = useEventActionHandler();
  var valueKey = "data.settings.".concat(styleAttribute);
  var activeElementId = useRecoilValue(activeElementAtom);
  var element = useRecoilValue(elementWithChildrenByIdSelector(activeElementId));

  var advanced = _get(element, "".concat(valueKey, ".advanced"), false);

  var _useState = useState(0),
      _useState2 = _slicedToArray(_useState, 2),
      tabIndex = _useState2[0],
      setTabIndex = _useState2[1];

  var updateSettings = function updateSettings(name, newValue) {
    var history = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var propName = "".concat(valueKey, ".").concat(name);

    if (name !== "advanced") {
      newValue = parseInt(newValue) || 0;
    }

    var newElement = set(element, propName, newValue); // Update all values in advanced settings

    if (propName.endsWith(".all")) {
      var prefix = propName.includes("desktop") ? "desktop" : "mobile";
      newElement = merge(newElement, "".concat(valueKey, ".").concat(prefix), {
        top: newValue,
        right: newValue,
        bottom: newValue,
        left: newValue
      });
    }

    handler.trigger(new UpdateElementActionEvent({
      element: newElement,
      history: history
    }));
  };

  var getUpdateValue = useMemo(function () {
    var handlers = {};
    return function (name) {
      if (!handlers[name]) {
        handlers[name] = function (value) {
          return updateSettings(name, value, true);
        };
      }

      return handlers[name];
    };
  }, [updateSettings]);
  var getUpdatePreview = useMemo(function () {
    var handlers = {};
    return function (name) {
      if (!handlers[name]) {
        handlers[name] = function (value) {
          return updateSettings(name, value, false);
        };
      }

      return handlers[name];
    };
  }, [updateSettings]);
  return /*#__PURE__*/React.createElement(Tabs, {
    onActivate: setTabIndex
  }, /*#__PURE__*/React.createElement(Tab, {
    label: "Desktop"
  }, tabIndex === 0 && /*#__PURE__*/React.createElement(React.Fragment, null, !advanced ? /*#__PURE__*/React.createElement(SliderWithInput, {
    className: "no-bottom-padding",
    icon: /*#__PURE__*/React.createElement(BorderOuterIcon, null),
    valueKey: valueKey + ".desktop.all",
    updateValue: getUpdateValue("desktop.all"),
    updatePreview: getUpdatePreview("desktop.all")
  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SliderWithInput, {
    icon: /*#__PURE__*/React.createElement(BorderTopIcon, null),
    valueKey: valueKey + ".desktop.top",
    updateValue: getUpdateValue("desktop.top"),
    updatePreview: getUpdatePreview("desktop.top")
  }), /*#__PURE__*/React.createElement(SliderWithInput, {
    icon: /*#__PURE__*/React.createElement(BorderRightIcon, null),
    valueKey: valueKey + ".desktop.right",
    updateValue: getUpdateValue("desktop.right"),
    updatePreview: getUpdatePreview("desktop.right")
  }), /*#__PURE__*/React.createElement(SliderWithInput, {
    icon: /*#__PURE__*/React.createElement(BorderBottomIcon, null),
    valueKey: valueKey + ".desktop.bottom",
    updateValue: getUpdateValue("desktop.bottom"),
    updatePreview: getUpdatePreview("desktop.bottom")
  }), /*#__PURE__*/React.createElement(SliderWithInput, {
    className: "no-bottom-padding",
    icon: /*#__PURE__*/React.createElement(BorderLeftIcon, null),
    valueKey: valueKey + ".desktop.left",
    updateValue: getUpdateValue("desktop.left"),
    updatePreview: getUpdatePreview("desktop.left")
  }))), /*#__PURE__*/React.createElement(Footer, {
    advanced: Boolean(advanced),
    toggleAdvanced: getUpdateValue("advanced")
  })), /*#__PURE__*/React.createElement(Tab, {
    label: "Mobile"
  }, tabIndex === 1 && /*#__PURE__*/React.createElement(React.Fragment, null, !advanced ? /*#__PURE__*/React.createElement(SliderWithInput, {
    className: "no-bottom-padding",
    icon: /*#__PURE__*/React.createElement(BorderOuterIcon, null),
    valueKey: valueKey + ".mobile.all",
    updateValue: getUpdateValue("mobile.all"),
    updatePreview: getUpdatePreview("mobile.all")
  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SliderWithInput, {
    icon: /*#__PURE__*/React.createElement(BorderTopIcon, null),
    valueKey: valueKey + ".mobile.top",
    updateValue: getUpdateValue("mobile.top"),
    updatePreview: getUpdatePreview("mobile.top")
  }), /*#__PURE__*/React.createElement(SliderWithInput, {
    icon: /*#__PURE__*/React.createElement(BorderRightIcon, null),
    valueKey: valueKey + ".mobile.right",
    updateValue: getUpdateValue("mobile.right"),
    updatePreview: getUpdatePreview("mobile.right")
  }), /*#__PURE__*/React.createElement(SliderWithInput, {
    icon: /*#__PURE__*/React.createElement(BorderBottomIcon, null),
    valueKey: valueKey + ".mobile.bottom",
    updateValue: getUpdateValue("mobile.bottom"),
    updatePreview: getUpdatePreview("mobile.bottom")
  }), /*#__PURE__*/React.createElement(SliderWithInput, {
    className: "no-bottom-padding",
    icon: /*#__PURE__*/React.createElement(BorderLeftIcon, null),
    valueKey: valueKey + ".mobile.left",
    updateValue: getUpdateValue("mobile.left"),
    updatePreview: getUpdatePreview("mobile.left")
  }))), /*#__PURE__*/React.createElement(Footer, {
    advanced: Boolean(advanced),
    toggleAdvanced: getUpdateValue("advanced")
  })));
};

export default /*#__PURE__*/React.memo(PMSettings);
//# sourceMappingURL=PMSettings.js.map