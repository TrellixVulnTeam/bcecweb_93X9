import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["plugin", "icon", "tooltip", "onClick", "shortcut"];
import { useEventActionHandler } from "../../../hooks/useEventActionHandler";
import { TogglePluginActionEvent } from "../../../recoil/actions";
import React, { useEffect, useCallback } from "react";
import { isPluginActiveSelector, activePluginsByTypeTotalSelector } from "../../../recoil/modules";
import { css } from "emotion";
import { IconButton } from "@webiny/ui/Button";
import { useKeyHandler } from "../../../hooks/useKeyHandler";
import { Tooltip } from "@webiny/ui/Tooltip";
import { useRecoilValue } from "recoil";
var editorPageElementSettingsPluginType = "pb-editor-page-element-settings";
var activeStyle = /*#__PURE__*/css({
  "&.mdc-icon-button": {
    color: "var(--mdc-theme-primary)"
  }
}, "label:activeStyle;");

var Action = function Action(_ref) {
  var plugin = _ref.plugin,
      icon = _ref.icon,
      tooltip = _ref.tooltip,
      onClick = _ref.onClick,
      _ref$shortcut = _ref.shortcut,
      shortcut = _ref$shortcut === void 0 ? [] : _ref$shortcut,
      props = _objectWithoutProperties(_ref, _excluded);

  var eventActionHandler = useEventActionHandler();
  var isPluginActive = useRecoilValue(isPluginActiveSelector(plugin));
  var settingsActive = useRecoilValue(activePluginsByTypeTotalSelector(editorPageElementSettingsPluginType)) > 0;

  var _useKeyHandler = useKeyHandler(),
      addKeyHandler = _useKeyHandler.addKeyHandler,
      removeKeyHandler = _useKeyHandler.removeKeyHandler;

  var clickHandler = useCallback(function () {
    if (typeof onClick === "function") {
      return onClick();
    }

    eventActionHandler.trigger(new TogglePluginActionEvent({
      name: plugin,
      closeOtherInGroup: true
    }));
  }, [plugin, onClick]);
  useEffect(function () {
    shortcut.map(function (short) {
      addKeyHandler(short, function (e) {
        if (settingsActive) {
          return;
        }

        e.preventDefault();
        onClick();
      });
    });
    return function () {
      shortcut.map(function (short) {
        removeKeyHandler(short);
      });
    };
  }, [onClick]);
  return /*#__PURE__*/React.createElement(Tooltip, Object.assign({
    placement: "bottom",
    content: /*#__PURE__*/React.createElement("span", null, tooltip)
  }, isPluginActive ? {
    visible: false
  } : {}), /*#__PURE__*/React.createElement(IconButton, {
    icon: icon,
    onClick: clickHandler,
    className: isPluginActive && activeStyle,
    "data-testid": props["data-testid"]
  }));
};

export default Action;
//# sourceMappingURL=Action.js.map