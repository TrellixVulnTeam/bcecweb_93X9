{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/components/ColorPicker.tsx"],"names":["React","lodashGet","ColorPickerCmp","activeElementAtom","elementByIdSelector","Typography","Grid","Cell","useRecoilValue","extrapolateActiveElementValue","value","valueKey","defaultValue","activeElementId","element","Error","ColorPicker","label","updatePreview","updateValue","className","targetValue","memo","BaseColorPickerComponent","handlerClassName","BaseColorPicker"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP;AACA,SAASC,iBAAT,EAA4BC,mBAA5B;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,iBAA3B;AACA,SAASC,cAAT,QAA+B,QAA/B;;AAEA,IAAMC,6BAA6B,GAAG,SAAhCA,6BAAgC,CAClCC,KADkC,EAElCC,QAFkC,EAGlCC,YAHkC,EAIb;AACrB,MAAI,CAACD,QAAL,EAAe;AACX,WAAOD,KAAP;AACH;;AACD,MAAMG,eAAe,GAAGL,cAAc,CAACL,iBAAD,CAAtC;AACA,MAAMW,OAAO,GAAGN,cAAc,CAACJ,mBAAmB,CAACS,eAAD,CAApB,CAA9B;;AACA,MAAI,CAACC,OAAL,EAAc;AACV,UAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;AACH;;AACD,SAAOd,SAAS,CAACa,OAAD,EAAUH,QAAV,EAAoBC,YAApB,CAAhB;AACH,CAdD;;AA2BA,IAAMI,WAAW,GAAG,SAAdA,WAAc,OAQI;AAAA,MAPpBC,KAOoB,QAPpBA,KAOoB;AAAA,MANpBP,KAMoB,QANpBA,KAMoB;AAAA,MALpBC,QAKoB,QALpBA,QAKoB;AAAA,MAJpBC,YAIoB,QAJpBA,YAIoB;AAAA,MAHpBM,aAGoB,QAHpBA,aAGoB;AAAA,MAFpBC,WAEoB,QAFpBA,WAEoB;AAAA,MADpBC,SACoB,QADpBA,SACoB;AACpB,MAAMC,WAAW,GAAGZ,6BAA6B,CAACC,KAAD,EAAQC,QAAR,EAAkBC,YAAlB,CAAjD;AACA,sBACI,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAEQ;AAAjB,kBACI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAZ,kBACI,oBAAC,UAAD;AAAY,IAAA,GAAG,EAAE;AAAjB,KAA+BH,KAA/B,CADJ,CADJ,eAII,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAZ,kBACI,oBAAC,cAAD;AACI,IAAA,OAAO,MADX;AAEI,IAAA,KAAK,EAAEI,WAFX;AAGI,IAAA,QAAQ,EAAEH,aAHd;AAII,IAAA,gBAAgB,EAAEC;AAJtB,IADJ,CAJJ,CADJ;AAeH,CAzBD;;AA2BA,4BAAenB,KAAK,CAACsB,IAAN,CAAWN,WAAX,CAAf;AAEA,OAAO,IAAMO,wBAAwB,GAAG,SAA3BA,wBAA2B,QAOP;AAAA,MAN7Bb,KAM6B,SAN7BA,KAM6B;AAAA,MAL7BC,QAK6B,SAL7BA,QAK6B;AAAA,MAJ7BC,YAI6B,SAJ7BA,YAI6B;AAAA,MAH7BM,aAG6B,SAH7BA,aAG6B;AAAA,MAF7BC,WAE6B,SAF7BA,WAE6B;AAAA,MAD7BK,gBAC6B,SAD7BA,gBAC6B;AAC7B,MAAMH,WAAW,GAAGZ,6BAA6B,CAACC,KAAD,EAAQC,QAAR,EAAkBC,YAAlB,CAAjD;AACA,sBACI,oBAAC,cAAD;AACI,IAAA,gBAAgB,EAAEY,gBADtB;AAEI,IAAA,OAAO,MAFX;AAGI,IAAA,KAAK,EAAEH,WAHX;AAII,IAAA,QAAQ,EAAEH,aAJd;AAKI,IAAA,gBAAgB,EAAEC;AALtB,IADJ;AASH,CAlBM;AAoBP,OAAO,IAAMM,eAAe,gBAAGzB,KAAK,CAACsB,IAAN,CAAWC,wBAAX,CAAxB","sourcesContent":["import React from \"react\";\nimport lodashGet from \"lodash/get\";\nimport ColorPickerCmp from \"../../../components/ColorPicker/ColorPicker\";\nimport { activeElementAtom, elementByIdSelector } from \"../../../recoil/modules\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { useRecoilValue } from \"recoil\";\n\nconst extrapolateActiveElementValue = (\n    value?: string,\n    valueKey?: string,\n    defaultValue?: string\n): string | undefined => {\n    if (!valueKey) {\n        return value;\n    }\n    const activeElementId = useRecoilValue(activeElementAtom);\n    const element = useRecoilValue(elementByIdSelector(activeElementId));\n    if (!element) {\n        throw new Error(\"There is no active element.\");\n    }\n    return lodashGet(element, valueKey, defaultValue);\n};\n\ntype ColorPickerProps = {\n    label: string;\n    value?: string;\n    valueKey?: string;\n    defaultValue?: string;\n    updatePreview: Function;\n    updateValue: Function;\n    className?: string;\n    handlerClassName?: string;\n};\n\nconst ColorPicker = ({\n    label,\n    value,\n    valueKey,\n    defaultValue,\n    updatePreview,\n    updateValue,\n    className\n}: ColorPickerProps) => {\n    const targetValue = extrapolateActiveElementValue(value, valueKey, defaultValue);\n    return (\n        <Grid className={className}>\n            <Cell span={4}>\n                <Typography use={\"subtitle2\"}>{label}</Typography>\n            </Cell>\n            <Cell span={8}>\n                <ColorPickerCmp\n                    compact\n                    value={targetValue}\n                    onChange={updatePreview}\n                    onChangeComplete={updateValue}\n                />\n            </Cell>\n        </Grid>\n    );\n};\n\nexport default React.memo(ColorPicker);\n\nexport const BaseColorPickerComponent = ({\n    value,\n    valueKey,\n    defaultValue,\n    updatePreview,\n    updateValue,\n    handlerClassName\n}: Partial<ColorPickerProps>) => {\n    const targetValue = extrapolateActiveElementValue(value, valueKey, defaultValue);\n    return (\n        <ColorPickerCmp\n            handlerClassName={handlerClassName}\n            compact\n            value={targetValue}\n            onChange={updatePreview}\n            onChangeComplete={updateValue}\n        />\n    );\n};\n\nexport const BaseColorPicker = React.memo(BaseColorPickerComponent);\n"],"file":"ColorPicker.js"}