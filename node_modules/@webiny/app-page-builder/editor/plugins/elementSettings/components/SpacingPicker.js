import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React, { useMemo, useCallback } from "react";
import { css } from "emotion";
import classNames from "classnames";
import { FormElementMessage } from "@webiny/ui/FormElementMessage";
import { Form } from "@webiny/form";
import InputField from "./InputField";
import SelectField from "./SelectField";
var defaultWrapperStyle = /*#__PURE__*/css({
  width: 60,
  "& .inner-wrapper": {
    display: "flex"
  }
}, "label:defaultWrapperStyle;");
var defaultInputStyle = /*#__PURE__*/css({
  appearance: "none",
  background: "transparent",
  border: "none",
  margin: 0,
  fontSize: 11,
  padding: 0,
  width: 24,
  textAlign: "right",
  transition: "all 200ms ease-in",
  "&:focus": {
    padding: "0px 4px",
    width: 36,
    textAlign: "center",
    outlineColor: "lightblue"
  }
}, "label:defaultInputStyle;");
var defaultSelectStyle = /*#__PURE__*/css({
  appearance: "none",
  background: "transparent",
  border: "none",
  padding: "0px 0px 0px 4px",
  margin: 0,
  fontSize: 12,
  width: 28,
  backgroundImage: "none",
  "&:focus": {
    outlineWidth: 2,
    outlineStyle: "solid",
    outlineColor: "lightblue"
  }
}, "label:defaultSelectStyle;");

var SpacingPicker = function SpacingPicker(_ref) {
  var value = _ref.value,
      onChange = _ref.onChange,
      disabled = _ref.disabled,
      _ref$options = _ref.options,
      options = _ref$options === void 0 ? [] : _ref$options,
      validation = _ref.validation,
      className = _ref.className,
      inputClassName = _ref.inputClassName,
      selectClassName = _ref.selectClassName,
      _ref$useDefaultStyle = _ref.useDefaultStyle,
      useDefaultStyle = _ref$useDefaultStyle === void 0 ? true : _ref$useDefaultStyle;
  var formData = useMemo(function () {
    var parsedValue = parseInt(value);
    var regx = new RegExp("".concat(parsedValue), "g");
    var unit = value.replace(regx, "");

    if (Number.isNaN(parsedValue) && unit === "auto") {
      return {
        value: "",
        unit: unit
      };
    }

    return {
      value: parsedValue,
      unit: unit
    };
  }, [value]);
  var onFormChange = useCallback(function (formData) {
    if (formData.unit === "auto") {
      onChange(formData.unit);
    } else {
      onChange(formData.value + formData.unit);
    }
  }, []);
  return /*#__PURE__*/React.createElement(Form, {
    data: formData,
    onChange: onFormChange
  }, function (_ref2) {
    var data = _ref2.data,
        Bind = _ref2.Bind;
    return /*#__PURE__*/React.createElement("div", {
      className: classNames(className, _defineProperty({}, defaultWrapperStyle, useDefaultStyle))
    }, /*#__PURE__*/React.createElement("div", {
      className: "inner-wrapper"
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "value"
    }, /*#__PURE__*/React.createElement(InputField, {
      className: classNames(inputClassName, _defineProperty({}, defaultInputStyle, useDefaultStyle)),
      disabled: data.unit === "auto" || disabled,
      type: "number"
    })), /*#__PURE__*/React.createElement(Bind, {
      name: "unit"
    }, /*#__PURE__*/React.createElement(SelectField, {
      className: classNames(selectClassName, _defineProperty({}, defaultSelectStyle, useDefaultStyle)),
      disabled: disabled
    }, options.map(function (item) {
      return /*#__PURE__*/React.createElement("option", {
        key: item.value,
        value: item.value
      }, item.label);
    })))), validation && validation.isValid === false && /*#__PURE__*/React.createElement(FormElementMessage, {
      error: true
    }, validation.message));
  });
};

export default /*#__PURE__*/React.memo(SpacingPicker);
//# sourceMappingURL=SpacingPicker.js.map