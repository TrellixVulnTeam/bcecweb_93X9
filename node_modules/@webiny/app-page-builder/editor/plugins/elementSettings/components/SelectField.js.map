{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/components/SelectField.tsx"],"names":["React","css","classNames","omit","FormElementMessage","COLORS","selectStyle","display","color","darkestGray","padding","width","maxWidth","boxSizing","margin","border","gray","borderRadius","MozAppearance","WebkitAppearance","appearance","backgroundColor","lightGray","backgroundImage","backgroundRepeat","backgroundPosition","backgroundSize","borderColor","darkGray","outline","opacity","cursor","fontWeight","SelectField","value","onChange","children","className","validation","isValid","description","props","target","message","memo"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,SAApB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,SAASC,kBAAT,QAAmC,+BAAnC;AACA,SAASC,MAAT;AAEA,IAAMC,WAAW,gBAAGL,GAAG,CAAC;AACpBM,EAAAA,OAAO,EAAE,OADW;AAEpBC,EAAAA,KAAK,EAAEH,MAAM,CAACI,WAFM;AAGpBC,EAAAA,OAAO,EAAE,sBAHW;AAIpBC,EAAAA,KAAK,EAAE,MAJa;AAKpBC,EAAAA,QAAQ,EAAE,MALU;AAMpBC,EAAAA,SAAS,EAAE,YANS;AAOpBC,EAAAA,MAAM,EAAE,GAPY;AAQpBC,EAAAA,MAAM,sBAAeV,MAAM,CAACW,IAAtB,CARc;AASpBC,EAAAA,YAAY,EAAE,CATM;AAUpBC,EAAAA,aAAa,EAAE,MAVK;AAWpBC,EAAAA,gBAAgB,EAAE,MAXE;AAYpBC,EAAAA,UAAU,EAAE,MAZQ;AAapBC,EAAAA,eAAe,EAAEhB,MAAM,CAACiB,SAbJ;AAcpBC,EAAAA,eAAe,0MAdK;AAepBC,EAAAA,gBAAgB,EAAE,mBAfE;AAgBpBC,EAAAA,kBAAkB,EAAE,yBAhBA;AAiBpBC,EAAAA,cAAc,EAAE,iBAjBI;AAmBpB,mBAAiB;AAAEnB,IAAAA,OAAO,EAAE;AAAX,GAnBG;AAoBpB,4BAA0B;AAAEoB,IAAAA,WAAW,EAAEtB,MAAM,CAACuB,QAAtB;AAAgCP,IAAAA,eAAe,EAAEhB,MAAM,CAACW;AAAxD,GApBN;AAqBpB,4BAA0B;AACtBW,IAAAA,WAAW,EAAEtB,MAAM,CAACuB,QADE;AAEtBC,IAAAA,OAAO,EAAE,MAFa;AAGtBR,IAAAA,eAAe,EAAEhB,MAAM,CAACW;AAHF,GArBN;AA0BpB,gBAAc;AACVc,IAAAA,OAAO,EAAE,GADC;AAEVC,IAAAA,MAAM,EAAE,aAFE;AAGVJ,IAAAA,WAAW,EAAEtB,MAAM,CAACiB;AAHV,GA1BM;AA+BpB,cAAY;AAAEU,IAAAA,UAAU,EAAE;AAAd;AA/BQ,CAAD,uBAAvB;;AA2CA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAQD;AAAA,MAPfC,KAOe,QAPfA,KAOe;AAAA,MANfC,SAMe,QANfA,QAMe;AAAA,MALfC,QAKe,QALfA,QAKe;AAAA,MAJfC,SAIe,QAJfA,SAIe;AAAA,6BAHfC,UAGe;AAAA,MAHfA,UAGe,gCAHF;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAGE;AAAA,MAFfC,WAEe,QAFfA,WAEe;AAAA,MADZC,KACY;;AACf,sBACI,oBAAC,KAAD,CAAO,QAAP,qBACI;AACI,IAAA,SAAS,EAAEvC,UAAU,CAACI,WAAD,EAAc+B,SAAd,CADzB;AAEI,IAAA,KAAK,EAAEH,KAFX;AAGI,IAAA,QAAQ,EAAE,yBAA2B;AAAA,UAAdA,KAAc,SAAxBQ,MAAwB,CAAdR,KAAc;;AACjCC,MAAAA,SAAQ,CAACD,KAAD,CAAR;AACH;AALL,KAMQ/B,IAAI,CAACsC,KAAD,EAAQ,UAAR,CANZ,GAQKL,QARL,CADJ,EAWKE,UAAU,CAACC,OAAX,KAAuB,KAAvB,iBACG,oBAAC,kBAAD;AAAoB,IAAA,KAAK;AAAzB,KAA2BD,UAAU,CAACK,OAAtC,CAZR,EAeKL,UAAU,CAACC,OAAX,KAAuB,KAAvB,IAAgCC,WAAhC,iBACG,oBAAC,kBAAD,QAAqBA,WAArB,CAhBR,CADJ;AAqBH,CA9BD;;AAgCA,4BAAexC,KAAK,CAAC4C,IAAN,CAAWX,WAAX,CAAf","sourcesContent":["import React from \"react\";\nimport { css } from \"emotion\";\nimport classNames from \"classnames\";\nimport omit from \"lodash/omit\";\nimport { FormElementMessage } from \"@webiny/ui/FormElementMessage\";\nimport { COLORS } from \"./StyledComponents\";\n\nconst selectStyle = css({\n    display: \"block\",\n    color: COLORS.darkestGray,\n    padding: \".6em 1.4em .5em .8em\",\n    width: \"100%\",\n    maxWidth: \"100%\",\n    boxSizing: \"border-box\",\n    margin: \"0\",\n    border: `1px solid ${COLORS.gray}`,\n    borderRadius: 1,\n    MozAppearance: \"none\",\n    WebkitAppearance: \"none\",\n    appearance: \"none\",\n    backgroundColor: COLORS.lightGray,\n    backgroundImage: `url(\"data:image/svg+xml;utf8,<svg fill='black' height='24' viewBox='0 0 24 24' width='24' xmlns='http://www.w3.org/2000/svg'><path d='M7 10l5 5 5-5z'/><path d='M0 0h24v24H0z' fill='none'/></svg>\")`,\n    backgroundRepeat: \"no-repeat, repeat\",\n    backgroundPosition: \"right .7em top 50%, 0 0\",\n    backgroundSize: \"24px auto, 100%\",\n\n    \"&::-ms-expand\": { display: \"none\" },\n    \"&:hover:not(:disabled)\": { borderColor: COLORS.darkGray, backgroundColor: COLORS.gray },\n    \"&:focus:not(:disabled)\": {\n        borderColor: COLORS.darkGray,\n        outline: \"none\",\n        backgroundColor: COLORS.gray\n    },\n    \"&:disabled\": {\n        opacity: 0.5,\n        cursor: \"not-allowed\",\n        borderColor: COLORS.lightGray\n    },\n    \"& option\": { fontWeight: \"normal\" }\n});\n\ntype SelectProps = {\n    value?: string;\n    onChange?: (value: any) => void;\n    // One or more <option> or <optgroup> elements.\n    children?: Array<React.ReactElement<\"option\"> | React.ReactElement<\"optgroup\">>;\n    className?: string;\n    [key: string]: any;\n};\n\nconst SelectField = ({\n    value,\n    onChange,\n    children,\n    className,\n    validation = { isValid: true },\n    description,\n    ...props\n}: SelectProps) => {\n    return (\n        <React.Fragment>\n            <select\n                className={classNames(selectStyle, className)}\n                value={value}\n                onChange={({ target: { value } }) => {\n                    onChange(value);\n                }}\n                {...omit(props, \"validate\")}\n            >\n                {children}\n            </select>\n            {validation.isValid === false && (\n                <FormElementMessage error>{validation.message}</FormElementMessage>\n            )}\n\n            {validation.isValid !== false && description && (\n                <FormElementMessage>{description}</FormElementMessage>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default React.memo(SelectField);\n"],"file":"SelectField.js"}