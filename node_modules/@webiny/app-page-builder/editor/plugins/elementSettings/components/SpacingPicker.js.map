{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/components/SpacingPicker.tsx"],"names":["React","useMemo","useCallback","css","classNames","FormElementMessage","Form","InputField","SelectField","defaultWrapperStyle","width","display","defaultInputStyle","appearance","background","border","margin","fontSize","padding","textAlign","transition","outlineColor","defaultSelectStyle","backgroundImage","outlineWidth","outlineStyle","SpacingPicker","value","onChange","disabled","options","validation","className","inputClassName","selectClassName","useDefaultStyle","formData","parsedValue","parseInt","regx","RegExp","unit","replace","Number","isNaN","onFormChange","data","Bind","map","item","label","isValid","message","memo"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,OAAhB,EAAyBC,WAAzB,QAA4C,OAA5C;AACA,SAASC,GAAT,QAAoB,SAApB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,kBAAT,QAAmC,+BAAnC;AACA,SAA4CC,IAA5C,QAAwD,cAAxD;AACA,OAAOC,UAAP;AACA,OAAOC,WAAP;AAEA,IAAMC,mBAAmB,gBAAGN,GAAG,CAAC;AAC5BO,EAAAA,KAAK,EAAE,EADqB;AAE5B,sBAAoB;AAChBC,IAAAA,OAAO,EAAE;AADO;AAFQ,CAAD,+BAA/B;AAOA,IAAMC,iBAAiB,gBAAGT,GAAG,CAAC;AAC1BU,EAAAA,UAAU,EAAE,MADc;AAE1BC,EAAAA,UAAU,EAAE,aAFc;AAG1BC,EAAAA,MAAM,EAAE,MAHkB;AAI1BC,EAAAA,MAAM,EAAE,CAJkB;AAK1BC,EAAAA,QAAQ,EAAE,EALgB;AAM1BC,EAAAA,OAAO,EAAE,CANiB;AAO1BR,EAAAA,KAAK,EAAE,EAPmB;AAQ1BS,EAAAA,SAAS,EAAE,OARe;AAU1BC,EAAAA,UAAU,EAAE,mBAVc;AAY1B,aAAW;AACPF,IAAAA,OAAO,EAAE,SADF;AAEPR,IAAAA,KAAK,EAAE,EAFA;AAGPS,IAAAA,SAAS,EAAE,QAHJ;AAIPE,IAAAA,YAAY,EAAE;AAJP;AAZe,CAAD,6BAA7B;AAoBA,IAAMC,kBAAkB,gBAAGnB,GAAG,CAAC;AAC3BU,EAAAA,UAAU,EAAE,MADe;AAE3BC,EAAAA,UAAU,EAAE,aAFe;AAG3BC,EAAAA,MAAM,EAAE,MAHmB;AAI3BG,EAAAA,OAAO,EAAE,iBAJkB;AAK3BF,EAAAA,MAAM,EAAE,CALmB;AAM3BC,EAAAA,QAAQ,EAAE,EANiB;AAO3BP,EAAAA,KAAK,EAAE,EAPoB;AAQ3Ba,EAAAA,eAAe,EAAE,MARU;AAS3B,aAAW;AACPC,IAAAA,YAAY,EAAE,CADP;AAEPC,IAAAA,YAAY,EAAE,OAFP;AAGPJ,IAAAA,YAAY,EAAE;AAHP;AATgB,CAAD,8BAA9B;;AA2BA,IAAMK,aAAa,GAAG,SAAhBA,aAAgB,OAUI;AAAA,MATtBC,KASsB,QATtBA,KASsB;AAAA,MARtBC,QAQsB,QARtBA,QAQsB;AAAA,MAPtBC,QAOsB,QAPtBA,QAOsB;AAAA,0BANtBC,OAMsB;AAAA,MANtBA,OAMsB,6BANZ,EAMY;AAAA,MALtBC,UAKsB,QALtBA,UAKsB;AAAA,MAJtBC,SAIsB,QAJtBA,SAIsB;AAAA,MAHtBC,cAGsB,QAHtBA,cAGsB;AAAA,MAFtBC,eAEsB,QAFtBA,eAEsB;AAAA,kCADtBC,eACsB;AAAA,MADtBA,eACsB,qCADJ,IACI;AACtB,MAAMC,QAAQ,GAAGnC,OAAO,CAAC,YAAM;AAC3B,QAAMoC,WAAW,GAAGC,QAAQ,CAACX,KAAD,CAA5B;AACA,QAAMY,IAAI,GAAG,IAAIC,MAAJ,WAAcH,WAAd,GAA6B,GAA7B,CAAb;AACA,QAAMI,IAAI,GAAGd,KAAK,CAACe,OAAN,CAAcH,IAAd,EAAoB,EAApB,CAAb;;AAEA,QAAII,MAAM,CAACC,KAAP,CAAaP,WAAb,KAA6BI,IAAI,KAAK,MAA1C,EAAkD;AAC9C,aAAO;AACHd,QAAAA,KAAK,EAAE,EADJ;AAEHc,QAAAA,IAAI,EAAJA;AAFG,OAAP;AAIH;;AACD,WAAO;AACHd,MAAAA,KAAK,EAAEU,WADJ;AAEHI,MAAAA,IAAI,EAAJA;AAFG,KAAP;AAIH,GAfuB,EAerB,CAACd,KAAD,CAfqB,CAAxB;AAiBA,MAAMkB,YAAY,GAAG3C,WAAW,CAAC,UAAAkC,QAAQ,EAAI;AACzC,QAAIA,QAAQ,CAACK,IAAT,KAAkB,MAAtB,EAA8B;AAC1Bb,MAAAA,QAAQ,CAACQ,QAAQ,CAACK,IAAV,CAAR;AACH,KAFD,MAEO;AACHb,MAAAA,QAAQ,CAACQ,QAAQ,CAACT,KAAT,GAAiBS,QAAQ,CAACK,IAA3B,CAAR;AACH;AACJ,GAN+B,EAM7B,EAN6B,CAAhC;AAQA,sBACI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEL,QAAZ;AAAsB,IAAA,QAAQ,EAAES;AAAhC,KACK;AAAA,QAAGC,IAAH,SAAGA,IAAH;AAAA,QAASC,IAAT,SAASA,IAAT;AAAA,wBACG;AAAK,MAAA,SAAS,EAAE3C,UAAU,CAAC4B,SAAD,sBAAevB,mBAAf,EAAqC0B,eAArC;AAA1B,oBACI;AAAK,MAAA,SAAS,EAAE;AAAhB,oBACI,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAE;AAAZ,oBACI,oBAAC,UAAD;AACI,MAAA,SAAS,EAAE/B,UAAU,CAAC6B,cAAD,sBAChBrB,iBADgB,EACIuB,eADJ,EADzB;AAII,MAAA,QAAQ,EAAEW,IAAI,CAACL,IAAL,KAAc,MAAd,IAAwBZ,QAJtC;AAKI,MAAA,IAAI,EAAE;AALV,MADJ,CADJ,eAUI,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAE;AAAZ,oBACI,oBAAC,WAAD;AACI,MAAA,SAAS,EAAEzB,UAAU,CAAC8B,eAAD,sBAChBZ,kBADgB,EACKa,eADL,EADzB;AAII,MAAA,QAAQ,EAAEN;AAJd,OAMKC,OAAO,CAACkB,GAAR,CAAY,UAAAC,IAAI;AAAA,0BACb;AAAQ,QAAA,GAAG,EAAEA,IAAI,CAACtB,KAAlB;AAAyB,QAAA,KAAK,EAAEsB,IAAI,CAACtB;AAArC,SACKsB,IAAI,CAACC,KADV,CADa;AAAA,KAAhB,CANL,CADJ,CAVJ,CADJ,EA0BKnB,UAAU,IAAIA,UAAU,CAACoB,OAAX,KAAuB,KAArC,iBACG,oBAAC,kBAAD;AAAoB,MAAA,KAAK;AAAzB,OAA2BpB,UAAU,CAACqB,OAAtC,CA3BR,CADH;AAAA,GADL,CADJ;AAoCH,CAxED;;AA0EA,4BAAepD,KAAK,CAACqD,IAAN,CAAW3B,aAAX,CAAf","sourcesContent":["import React, { useMemo, useCallback } from \"react\";\nimport { css } from \"emotion\";\nimport classNames from \"classnames\";\nimport { FormElementMessage } from \"@webiny/ui/FormElementMessage\";\nimport { BindComponentRenderPropValidation, Form } from \"@webiny/form\";\nimport InputField from \"./InputField\";\nimport SelectField from \"./SelectField\";\n\nconst defaultWrapperStyle = css({\n    width: 60,\n    \"& .inner-wrapper\": {\n        display: \"flex\"\n    }\n});\n\nconst defaultInputStyle = css({\n    appearance: \"none\",\n    background: \"transparent\",\n    border: \"none\",\n    margin: 0,\n    fontSize: 11,\n    padding: 0,\n    width: 24,\n    textAlign: \"right\",\n\n    transition: \"all 200ms ease-in\",\n\n    \"&:focus\": {\n        padding: \"0px 4px\",\n        width: 36,\n        textAlign: \"center\",\n        outlineColor: \"lightblue\"\n    }\n});\n\nconst defaultSelectStyle = css({\n    appearance: \"none\",\n    background: \"transparent\",\n    border: \"none\",\n    padding: \"0px 0px 0px 4px\",\n    margin: 0,\n    fontSize: 12,\n    width: 28,\n    backgroundImage: \"none\",\n    \"&:focus\": {\n        outlineWidth: 2,\n        outlineStyle: \"solid\",\n        outlineColor: \"lightblue\"\n    }\n});\n\ntype SpacingPickerProps = {\n    value: any;\n    onChange: (value: string | number) => void;\n    options: any[];\n    disabled?: boolean;\n    useDefaultStyle?: boolean;\n    validation?: BindComponentRenderPropValidation;\n    className?: string;\n    inputClassName?: string;\n    selectClassName?: string;\n};\nconst SpacingPicker = ({\n    value,\n    onChange,\n    disabled,\n    options = [],\n    validation,\n    className,\n    inputClassName,\n    selectClassName,\n    useDefaultStyle = true\n}: SpacingPickerProps) => {\n    const formData = useMemo(() => {\n        const parsedValue = parseInt(value);\n        const regx = new RegExp(`${parsedValue}`, \"g\");\n        const unit = value.replace(regx, \"\");\n\n        if (Number.isNaN(parsedValue) && unit === \"auto\") {\n            return {\n                value: \"\",\n                unit\n            };\n        }\n        return {\n            value: parsedValue,\n            unit\n        };\n    }, [value]);\n\n    const onFormChange = useCallback(formData => {\n        if (formData.unit === \"auto\") {\n            onChange(formData.unit);\n        } else {\n            onChange(formData.value + formData.unit);\n        }\n    }, []);\n\n    return (\n        <Form data={formData} onChange={onFormChange}>\n            {({ data, Bind }) => (\n                <div className={classNames(className, { [defaultWrapperStyle]: useDefaultStyle })}>\n                    <div className={\"inner-wrapper\"}>\n                        <Bind name={\"value\"}>\n                            <InputField\n                                className={classNames(inputClassName, {\n                                    [defaultInputStyle]: useDefaultStyle\n                                })}\n                                disabled={data.unit === \"auto\" || disabled}\n                                type={\"number\"}\n                            />\n                        </Bind>\n                        <Bind name={\"unit\"}>\n                            <SelectField\n                                className={classNames(selectClassName, {\n                                    [defaultSelectStyle]: useDefaultStyle\n                                })}\n                                disabled={disabled}\n                            >\n                                {options.map(item => (\n                                    <option key={item.value} value={item.value}>\n                                        {item.label}\n                                    </option>\n                                ))}\n                            </SelectField>\n                        </Bind>\n                    </div>\n                    {validation && validation.isValid === false && (\n                        <FormElementMessage error>{validation.message}</FormElementMessage>\n                    )}\n                </div>\n            )}\n        </Form>\n    );\n};\n\nexport default React.memo(SpacingPicker);\n"],"file":"SpacingPicker.js"}