{"version":3,"sources":["../../../../../src/editor/plugins/elementSettings/clone/CloneAction.ts"],"names":["React","useEventActionHandler","activeElementAtom","elementByIdSelector","plugins","useRecoilValue","CloneElementActionEvent","CloneAction","children","eventActionHandler","activeElementId","element","onClick","trigger","plugin","byType","find","pl","elementType","type","cloneElement","memo"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,qBAAT;AACA,SAASC,iBAAT,EAA4BC,mBAA5B;AACA,SAASC,OAAT,QAAwB,iBAAxB;AAEA,SAASC,cAAT,QAA+B,QAA/B;AACA,SAASC,uBAAT;;AAKA,IAAMC,WAA0D,GAAG,SAA7DA,WAA6D,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AACjF,MAAMC,kBAAkB,GAAGR,qBAAqB,EAAhD;AACA,MAAMS,eAAe,GAAGL,cAAc,CAACH,iBAAD,CAAtC;AACA,MAAMS,OAAwB,GAAGN,cAAc,CAACF,mBAAmB,CAACO,eAAD,CAApB,CAA/C;;AAEA,MAAI,CAACC,OAAL,EAAc;AACV,WAAO,IAAP;AACH;;AACD,MAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAClBH,IAAAA,kBAAkB,CAACI,OAAnB,CACI,IAAIP,uBAAJ,CAA4B;AACxBK,MAAAA,OAAO,EAAPA;AADwB,KAA5B,CADJ;AAKH,GAND;;AAQA,MAAMG,MAAM,GAAGV,OAAO,CACjBW,MADU,CACwB,wBADxB,EAEVC,IAFU,CAEL,UAAAC,EAAE;AAAA,WAAIA,EAAE,CAACC,WAAH,KAAmBP,OAAO,CAACQ,IAA/B;AAAA,GAFG,CAAf;;AAIA,MAAI,CAACL,MAAL,EAAa;AACT,WAAO,IAAP;AACH;;AAED,sBAAOd,KAAK,CAACoB,YAAN,CAAmBZ,QAAnB,EAA6B;AAAEI,IAAAA,OAAO,EAAPA;AAAF,GAA7B,CAAP;AACH,CAzBD;;AA0BA,4BAAeZ,KAAK,CAACqB,IAAN,CAAWd,WAAX,CAAf","sourcesContent":["import React from \"react\";\nimport { useEventActionHandler } from \"../../../hooks/useEventActionHandler\";\nimport { activeElementAtom, elementByIdSelector } from \"../../../recoil/modules\";\nimport { plugins } from \"@webiny/plugins\";\nimport { PbEditorPageElementPlugin, PbEditorElement } from \"../../../../types\";\nimport { useRecoilValue } from \"recoil\";\nimport { CloneElementActionEvent } from \"../../../recoil/actions/cloneElement\";\n\ntype CloneActionPropsType = {\n    children: React.ReactElement;\n};\nconst CloneAction: React.FunctionComponent<CloneActionPropsType> = ({ children }) => {\n    const eventActionHandler = useEventActionHandler();\n    const activeElementId = useRecoilValue(activeElementAtom);\n    const element: PbEditorElement = useRecoilValue(elementByIdSelector(activeElementId));\n\n    if (!element) {\n        return null;\n    }\n    const onClick = () => {\n        eventActionHandler.trigger(\n            new CloneElementActionEvent({\n                element\n            })\n        );\n    };\n\n    const plugin = plugins\n        .byType<PbEditorPageElementPlugin>(\"pb-editor-page-element\")\n        .find(pl => pl.elementType === element.type);\n\n    if (!plugin) {\n        return null;\n    }\n\n    return React.cloneElement(children, { onClick });\n};\nexport default React.memo(CloneAction);\n"],"file":"CloneAction.js"}