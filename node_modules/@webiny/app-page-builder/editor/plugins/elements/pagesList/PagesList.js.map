{"version":3,"sources":["../../../../../src/editor/plugins/elements/pagesList/PagesList.tsx"],"names":["React","useState","useQuery","usePageBuilder","LIST_PUBLISHED_PAGES","plugins","useRecoilValue","pageAtom","PagesList","props","data","component","vars","components","byType","pageList","find","cmp","componentName","theme","page","setPage","pageAtomValue","ListComponent","sort","sortBy","sortDirection","variables","where","category","tags","query","rule","tagsRule","limit","parseInt","resultsPerPage","exclude","path","skip","fetchPolicy","loading","totalCount","listPublishedPages","prevPage","meta","previousPage","nextPage","memo"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { usePageBuilder } from \"../../../../hooks/usePageBuilder\";\nimport { LIST_PUBLISHED_PAGES } from \"./graphql\";\nimport { plugins } from \"@webiny/plugins\";\nimport { get } from \"lodash\";\nimport { PbPageElementPagesListComponentPlugin } from \"../../../../types\";\nimport { useRecoilValue } from \"recoil\";\nimport { pageAtom } from \"../../../recoil/modules\";\n\nconst PagesList = props => {\n    const { component, ...vars } = props.data;\n    const components = plugins.byType<PbPageElementPagesListComponentPlugin>(\n        \"pb-page-element-pages-list-component\"\n    );\n    const pageList = components.find(cmp => cmp.componentName === component);\n    const { theme } = usePageBuilder();\n    const [page, setPage] = useState(1);\n    const pageAtomValue = useRecoilValue(pageAtom);\n\n    if (!pageList) {\n        return <div>Selected page list component not found!</div>;\n    }\n\n    const { component: ListComponent } = pageList;\n\n    let sort = null;\n    if (vars.sortBy && vars.sortDirection) {\n        sort = { [vars.sortBy]: vars.sortDirection };\n    }\n\n    const variables = {\n        sort,\n        where: {\n            category: vars.category,\n            tags: {\n                query: vars.tags,\n                rule: vars.tagsRule\n            }\n        },\n        limit: parseInt(vars.resultsPerPage),\n        page,\n        exclude: [pageAtomValue.path]\n    };\n\n    const { data, loading } = useQuery(LIST_PUBLISHED_PAGES, {\n        variables,\n        skip: !ListComponent,\n        fetchPolicy: \"network-only\"\n    });\n\n    if (!ListComponent) {\n        return <div>You must select a component to render your list!</div>;\n    }\n\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    const totalCount = get(data, \"pageBuilder.listPublishedPages.meta.totalCount\");\n    if (!totalCount) {\n        return <div>No pages match the criteria.</div>;\n    }\n\n    const listPublishedPages = get(data, \"pageBuilder.listPublishedPages\");\n\n    let prevPage = null;\n    if (listPublishedPages.meta.previousPage) {\n        prevPage = () => setPage(listPublishedPages.meta.previousPage);\n    }\n\n    let nextPage = null;\n    if (listPublishedPages.meta.nextPage) {\n        nextPage = () => setPage(listPublishedPages.meta.nextPage);\n    }\n\n    return (\n        <ListComponent\n            {...listPublishedPages}\n            nextPage={nextPage}\n            prevPage={prevPage}\n            theme={theme}\n        />\n    );\n};\n\nexport default React.memo(PagesList);\n"],"file":"PagesList.js"}