import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _get from "lodash/get";
var _excluded = ["component"];
import React, { useState } from "react";
import { useQuery } from "@apollo/react-hooks";
import { usePageBuilder } from "../../../../hooks/usePageBuilder";
import { LIST_PUBLISHED_PAGES } from "./graphql";
import { plugins } from "@webiny/plugins";
import { useRecoilValue } from "recoil";
import { pageAtom } from "../../../recoil/modules";

var PagesList = function PagesList(props) {
  var _props$data = props.data,
      component = _props$data.component,
      vars = _objectWithoutProperties(_props$data, _excluded);

  var components = plugins.byType("pb-page-element-pages-list-component");
  var pageList = components.find(function (cmp) {
    return cmp.componentName === component;
  });

  var _usePageBuilder = usePageBuilder(),
      theme = _usePageBuilder.theme;

  var _useState = useState(1),
      _useState2 = _slicedToArray(_useState, 2),
      page = _useState2[0],
      setPage = _useState2[1];

  var pageAtomValue = useRecoilValue(pageAtom);

  if (!pageList) {
    return /*#__PURE__*/React.createElement("div", null, "Selected page list component not found!");
  }

  var ListComponent = pageList.component;
  var sort = null;

  if (vars.sortBy && vars.sortDirection) {
    sort = _defineProperty({}, vars.sortBy, vars.sortDirection);
  }

  var variables = {
    sort: sort,
    where: {
      category: vars.category,
      tags: {
        query: vars.tags,
        rule: vars.tagsRule
      }
    },
    limit: parseInt(vars.resultsPerPage),
    page: page,
    exclude: [pageAtomValue.path]
  };

  var _useQuery = useQuery(LIST_PUBLISHED_PAGES, {
    variables: variables,
    skip: !ListComponent,
    fetchPolicy: "network-only"
  }),
      data = _useQuery.data,
      loading = _useQuery.loading;

  if (!ListComponent) {
    return /*#__PURE__*/React.createElement("div", null, "You must select a component to render your list!");
  }

  if (loading) {
    return /*#__PURE__*/React.createElement("div", null, "Loading...");
  }

  var totalCount = _get(data, "pageBuilder.listPublishedPages.meta.totalCount");

  if (!totalCount) {
    return /*#__PURE__*/React.createElement("div", null, "No pages match the criteria.");
  }

  var listPublishedPages = _get(data, "pageBuilder.listPublishedPages");

  var prevPage = null;

  if (listPublishedPages.meta.previousPage) {
    prevPage = function prevPage() {
      return setPage(listPublishedPages.meta.previousPage);
    };
  }

  var nextPage = null;

  if (listPublishedPages.meta.nextPage) {
    nextPage = function nextPage() {
      return setPage(listPublishedPages.meta.nextPage);
    };
  }

  return /*#__PURE__*/React.createElement(ListComponent, Object.assign({}, listPublishedPages, {
    nextPage: nextPage,
    prevPage: prevPage,
    theme: theme
  }));
};

export default /*#__PURE__*/React.memo(PagesList);
//# sourceMappingURL=PagesList.js.map