{"version":3,"sources":["../../../../../src/editor/plugins/elements/image/ImageContainer.tsx"],"names":["React","useCallback","useRecoilValue","styled","SingleImageUpload","useEventActionHandler","UpdateElementActionEvent","uiAtom","AlignImage","props","img","alignSelf","align","ImageContainer","element","displayMode","handler","id","data","image","settings","horizontalAlignFlex","imgStyle","width","height","onChange","trigger","file","history","style","srcSet","memo"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,SAASC,cAAT,QAA+B,QAA/B;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,iBAAP,MAA8B,gDAA9B;AAEA,SAASC,qBAAT;AACA,SAASC,wBAAT;AACA,SAASC,MAAT;AAEA,IAAMC,UAAU,gBAAGL,MAAH,CAAU,KAAV;AAAA;AAAA;AAAA,GAAiB,UAACM,KAAD;AAAA,SAAiB;AAC9CC,IAAAA,GAAG,EAAE;AACDC,MAAAA,SAAS,EAAEF,KAAK,CAACG;AADhB;AADyC,GAAjB;AAAA,CAAjB,CAAhB;;AASA,IAAMC,cAA2D,GAAG,SAA9DA,cAA8D,OAAiB;AAAA,MAAdC,OAAc,QAAdA,OAAc;;AACjF,wBAAwBZ,cAAc,CAACK,MAAD,CAAtC;AAAA,MAAQQ,WAAR,mBAAQA,WAAR;;AACA,MAAMC,OAAO,GAAGX,qBAAqB,EAArC;;AACA,cAGIS,OAAO,IAAI,EAHf;AAAA,MACIG,EADJ,SACIA,EADJ;AAAA,yBAEIC,IAFJ;AAAA,oCAEYC,KAFZ;AAAA,MAEYA,KAFZ,iCAEoB,EAFpB;AAAA,uCAEwBC,QAFxB;AAAA,MAEwBA,QAFxB,oCAEmC,EAFnC;;AAIA,MAAQC,mBAAR,GAAgCD,QAAhC,CAAQC,mBAAR,CAPiF,CAQjF;;AACA,MAAMT,KAAK,GAAGS,mBAAmB,CAACN,WAAD,CAAnB,IAAoC,QAAlD;AAEA,MAAMO,QAAQ,GAAG;AAAEC,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,MAAM,EAAE;AAAvB,GAAjB;;AACA,MAAIL,KAAK,CAACI,KAAV,EAAiB;AACb,QAAQA,KAAR,GAAkBJ,KAAlB,CAAQI,KAAR;AACAD,IAAAA,QAAQ,CAACC,KAAT,GAAiBA,KAAjB;AACH;;AACD,MAAIJ,KAAK,CAACK,MAAV,EAAkB;AACd,QAAQA,MAAR,GAAmBL,KAAnB,CAAQK,MAAR;AACAF,IAAAA,QAAQ,CAACE,MAAT,GAAkBA,MAAlB;AACH;;AAED,MAAMC,QAAQ,GAAGxB,WAAW;AAAA,yEACxB,iBAAOiB,IAAP;AAAA;AAAA;AAAA;AAAA;AACIF,cAAAA,OAAO,CAACU,OAAR,CACI,IAAIpB,wBAAJ,CAA6B;AACzBQ,gBAAAA,OAAO,kCACAA,OADA;AAEHI,kBAAAA,IAAI,kCACGJ,OAAO,CAACI,IADX;AAEAC,oBAAAA,KAAK,kCACGL,OAAO,CAACI,IAAR,CAAaC,KAAb,IAAsB,EADzB;AAEDQ,sBAAAA,IAAI,EAAET;AAFL;AAFL;AAFD,kBADkB;AAWzBU,gBAAAA,OAAO,EAAE;AAXgB,eAA7B,CADJ;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADwB;;AAAA;AAAA;AAAA;AAAA,OAkBxB,CAACX,EAAD,CAlBwB,CAA5B,CArBiF,CAyCjF;;AACA,MAAI,CAACH,OAAL,EAAc;AACV,WAAO,IAAP;AACH;;AAED,sBACI,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAEF;AAAnB,kBACI,oBAAC,iBAAD;AACI,IAAA,iBAAiB,EAAE;AAAEiB,MAAAA,KAAK,EAAEP,QAAT;AAAmBQ,MAAAA,MAAM,EAAE;AAA3B,KADvB;AAEI,IAAA,QAAQ,EAAEL,QAFd;AAGI,IAAA,KAAK,EAAEN,KAAK,CAACQ;AAHjB,IADJ,CADJ;AASH,CAvDD;;AAyDA,4BAAe3B,KAAK,CAAC+B,IAAN,CAAWlB,cAAX,CAAf","sourcesContent":["import React, { useCallback } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport styled from \"@emotion/styled\";\nimport SingleImageUpload from \"@webiny/app-admin/components/SingleImageUpload\";\nimport { PbEditorElement } from \"../../../../types\";\nimport { useEventActionHandler } from \"../../../hooks/useEventActionHandler\";\nimport { UpdateElementActionEvent } from \"../../../recoil/actions\";\nimport { uiAtom } from \"../../../recoil/modules\";\n\nconst AlignImage = styled(\"div\")((props: any) => ({\n    img: {\n        alignSelf: props.align\n    }\n}));\n\ntype ImageContainerType = {\n    element: PbEditorElement;\n};\nconst ImageContainer: React.FunctionComponent<ImageContainerType> = ({ element }) => {\n    const { displayMode } = useRecoilValue(uiAtom);\n    const handler = useEventActionHandler();\n    const {\n        id,\n        data: { image = {}, settings = {} }\n    } = element || {};\n    const { horizontalAlignFlex } = settings;\n    // Use per-device style\n    const align = horizontalAlignFlex[displayMode] || \"center\";\n\n    const imgStyle = { width: null, height: null };\n    if (image.width) {\n        const { width } = image;\n        imgStyle.width = width;\n    }\n    if (image.height) {\n        const { height } = image;\n        imgStyle.height = height;\n    }\n\n    const onChange = useCallback(\n        async (data: { [key: string]: string }) => {\n            handler.trigger(\n                new UpdateElementActionEvent({\n                    element: {\n                        ...element,\n                        data: {\n                            ...element.data,\n                            image: {\n                                ...(element.data.image || {}),\n                                file: data\n                            }\n                        }\n                    },\n                    history: true\n                })\n            );\n        },\n        [id]\n    );\n    // required due to re-rendering when set content atom and still nothing in elements atom\n    if (!element) {\n        return null;\n    }\n\n    return (\n        <AlignImage align={align}>\n            <SingleImageUpload\n                imagePreviewProps={{ style: imgStyle, srcSet: \"auto\" }}\n                onChange={onChange}\n                value={image.file}\n            />\n        </AlignImage>\n    );\n};\n\nexport default React.memo(ImageContainer);\n"],"file":"ImageContainer.js"}