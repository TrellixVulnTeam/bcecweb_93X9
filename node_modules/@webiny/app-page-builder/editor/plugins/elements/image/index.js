import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import React from "react";
import styled from "@emotion/styled";
import kebabCase from "lodash/kebabCase";
import ImageSettings from "./ImageSettings";
import Image from "./Image";
import { imageCreatedEditorAction } from "./imageCreatedEditorAction";
import { CreateElementActionEvent } from "../../../recoil/actions";
import { ReactComponent as ImageIcon } from "@svgr/webpack!./round-image-24px.svg";
import { DisplayMode } from "../../../../types";
import { createInitialPerDeviceSettingValue } from "../../elementSettings/elementSettingsUtils";
var PreviewBox = /*#__PURE__*/styled("div", {
  target: "ey8f7jk0",
  label: "PreviewBox"
})({
  textAlign: "center",
  height: 50,
  svg: {
    height: 50,
    width: 50
  }
});
export default (function () {
  var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var elementType = kebabCase(args.elementType || "image");
  var defaultToolbar = {
    title: "Image",
    group: "pb-editor-element-group-basic",
    preview: function preview() {
      return /*#__PURE__*/React.createElement(PreviewBox, null, /*#__PURE__*/React.createElement(ImageIcon, null));
    }
  };
  var defaultSettings = ["pb-editor-page-element-style-settings-image", ["pb-editor-page-element-style-settings-background", {
    image: false
  }], "pb-editor-page-element-style-settings-link", "pb-editor-page-element-style-settings-border", "pb-editor-page-element-style-settings-shadow", "pb-editor-page-element-style-settings-horizontal-align-flex", "pb-editor-page-element-style-settings-padding", "pb-editor-page-element-style-settings-margin", "pb-editor-page-element-settings-clone", "pb-editor-page-element-settings-delete"];
  return [{
    name: "pb-editor-page-element-".concat(elementType),
    type: "pb-editor-page-element",
    elementType: elementType,
    toolbar: typeof args.toolbar === "function" ? args.toolbar(defaultToolbar) : defaultToolbar,
    settings: typeof args.settings === "function" ? args.settings(defaultSettings) : defaultSettings,
    target: ["cell", "block"],
    create: function create(options) {
      var defaultValue = _objectSpread({
        type: this.elementType,
        elements: [],
        data: {
          settings: {
            horizontalAlignFlex: createInitialPerDeviceSettingValue("center", DisplayMode.DESKTOP),
            margin: createInitialPerDeviceSettingValue({
              all: "0px"
            }, DisplayMode.DESKTOP),
            padding: createInitialPerDeviceSettingValue({
              all: "0px"
            }, DisplayMode.DESKTOP)
          }
        }
      }, options);

      return typeof args.create === "function" ? args.create(defaultValue) : defaultValue;
    },
    render: function render(_ref) {
      var element = _ref.element;
      return /*#__PURE__*/React.createElement(Image, {
        element: element
      });
    }
  }, {
    name: "pb-editor-page-element-style-settings-image",
    type: "pb-editor-page-element-style-settings",
    render: function render() {
      return /*#__PURE__*/React.createElement(ImageSettings, null);
    }
  }, {
    name: "pb-editor-event-action-image-created",
    type: "pb-editor-event-action-plugin",
    onEditorMount: function onEditorMount(handler) {
      return handler.on(CreateElementActionEvent, imageCreatedEditorAction);
    }
  }];
});
//# sourceMappingURL=index.js.map