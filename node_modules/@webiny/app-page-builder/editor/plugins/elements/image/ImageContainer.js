import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useCallback } from "react";
import { useRecoilValue } from "recoil";
import styled from "@emotion/styled";
import SingleImageUpload from "@webiny/app-admin/components/SingleImageUpload";
import { useEventActionHandler } from "../../../hooks/useEventActionHandler";
import { UpdateElementActionEvent } from "../../../recoil/actions";
import { uiAtom } from "../../../recoil/modules";
var AlignImage = /*#__PURE__*/styled("div", {
  target: "egixx440",
  label: "AlignImage"
})(function (props) {
  return {
    img: {
      alignSelf: props.align
    }
  };
});

var ImageContainer = function ImageContainer(_ref) {
  var element = _ref.element;

  var _useRecoilValue = useRecoilValue(uiAtom),
      displayMode = _useRecoilValue.displayMode;

  var handler = useEventActionHandler();

  var _ref2 = element || {},
      id = _ref2.id,
      _ref2$data = _ref2.data,
      _ref2$data$image = _ref2$data.image,
      image = _ref2$data$image === void 0 ? {} : _ref2$data$image,
      _ref2$data$settings = _ref2$data.settings,
      settings = _ref2$data$settings === void 0 ? {} : _ref2$data$settings;

  var horizontalAlignFlex = settings.horizontalAlignFlex; // Use per-device style

  var align = horizontalAlignFlex[displayMode] || "center";
  var imgStyle = {
    width: null,
    height: null
  };

  if (image.width) {
    var width = image.width;
    imgStyle.width = width;
  }

  if (image.height) {
    var height = image.height;
    imgStyle.height = height;
  }

  var onChange = useCallback( /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              handler.trigger(new UpdateElementActionEvent({
                element: _objectSpread(_objectSpread({}, element), {}, {
                  data: _objectSpread(_objectSpread({}, element.data), {}, {
                    image: _objectSpread(_objectSpread({}, element.data.image || {}), {}, {
                      file: data
                    })
                  })
                }),
                history: true
              }));

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), [id]); // required due to re-rendering when set content atom and still nothing in elements atom

  if (!element) {
    return null;
  }

  return /*#__PURE__*/React.createElement(AlignImage, {
    align: align
  }, /*#__PURE__*/React.createElement(SingleImageUpload, {
    imagePreviewProps: {
      style: imgStyle,
      srcSet: "auto"
    },
    onChange: onChange,
    value: image.file
  }));
};

export default /*#__PURE__*/React.memo(ImageContainer);
//# sourceMappingURL=ImageContainer.js.map