{"version":3,"sources":["../../../../../../src/editor/plugins/elements/utils/oembed/createEmbedPlugin.tsx"],"names":["React","OEmbed","DisplayMode","createInitialPerDeviceSettingValue","createEmbedPlugin","config","defaultSettings","name","type","elementType","toolbar","settings","target","create","content","options","defaultValue","elements","data","margin","all","DESKTOP","padding","render","props","element","oembed","onCreate","renderElementPreview","createEmbedSettingsPlugin"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,MAAP;AACA,SAIIC,WAJJ;AAMA,SAASC,kCAAT;AA6BA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,MAAD,EAA0D;AACvF,MAAMC,eAAe,GAAG,CAAC,wCAAD,CAAxB;AAEA,SAAO;AACHC,IAAAA,IAAI,EAAE,4BAA4BF,MAAM,CAACG,IADtC;AAEHA,IAAAA,IAAI,EAAE,wBAFH;AAGHC,IAAAA,WAAW,EAAEJ,MAAM,CAACG,IAHjB;AAIHE,IAAAA,OAAO,EAAEL,MAAM,CAACK,OAJb;AAKHC,IAAAA,QAAQ,EACJ,OAAON,MAAM,CAACM,QAAd,KAA2B,UAA3B,GACMN,MAAM,CAACM,QAAP,CAAgBL,eAAhB,CADN,GAEMA,eARP;AASHM,IAAAA,MAAM,EAAEP,MAAM,CAACO,MAAP,IAAiB,CAAC,MAAD,EAAS,OAAT,EAAkB,WAAlB,CATtB;AAUH;AACAC,IAAAA,MAXG,wBAWkC;AAAA,8BAA5BC,OAA4B;AAAA,UAA5BA,OAA4B,6BAAlB,EAAkB;AAAA,UAAXC,OAAW;;AACjC,UAAMC,YAAY;AACdR,QAAAA,IAAI,EAAEH,MAAM,CAACG,IADC;AAEdS,QAAAA,QAAQ,EAAE,EAFI;AAGdC,QAAAA,IAAI,EAAE;AACFP,UAAAA,QAAQ,EAAE;AACNQ,YAAAA,MAAM,EAAEhB,kCAAkC,CACtC;AAAEiB,cAAAA,GAAG,EAAE;AAAP,aADsC,EAEtClB,WAAW,CAACmB,OAF0B,CADpC;AAKNC,YAAAA,OAAO,EAAEnB,kCAAkC,CACvC;AAAEiB,cAAAA,GAAG,EAAE;AAAP,aADuC,EAEvClB,WAAW,CAACmB,OAF2B;AALrC;AADR;AAHQ,SAeXN,OAfW,CAAlB;;AAkBA,aAAO,OAAOV,MAAM,CAACQ,MAAd,KAAyB,UAAzB,GAAsCR,MAAM,CAACQ,MAAP,CAAcG,YAAd,CAAtC,GAAoEA,YAA3E;AACH,KA/BE;AAgCHO,IAAAA,MAhCG,kBAgCIC,KAhCJ,EAgCW;AACV,UAAInB,MAAM,CAACkB,MAAX,EAAmB;AACf,eAAOlB,MAAM,CAACkB,MAAP,CAAcC,KAAd,CAAP;AACH;;AAED,0BAAO,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAEA,KAAK,CAACC;AAAvB,SAAqCpB,MAAM,CAACqB,MAAP,IAAiB,EAAtD,EAAP;AACH,KAtCE;AAuCHC,IAAAA,QAAQ,EAAEtB,MAAM,CAACsB,QAAP,IAAmB,eAvC1B;AAwCHC,IAAAA,oBAAoB,EAAEvB,MAAM,CAACuB;AAxC1B,GAAP;AA0CH,CA7CM;AAoDP,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,QAGkC;AAAA,MAFvErB,IAEuE,SAFvEA,IAEuE;AAAA,MADvEe,MACuE,SADvEA,MACuE;AACvE,SAAO;AACHhB,IAAAA,IAAI,EAAE,8CAA8CC,IADjD;AAEHA,IAAAA,IAAI,EAAE,0CAFH;AAGHC,IAAAA,WAAW,EAAED,IAHV;AAIHe,IAAAA,MAAM,EAANA;AAJG,GAAP;AAMH,CAVM","sourcesContent":["import * as React from \"react\";\nimport { BindComponent } from \"@webiny/form\";\nimport OEmbed, { OEmbedProps } from \"../../../../components/OEmbed\";\nimport {\n    PbEditorElement,\n    PbEditorPageElementPlugin,\n    PbEditorPageElementAdvancedSettingsPlugin,\n    DisplayMode\n} from \"../../../../../types\";\nimport { createInitialPerDeviceSettingValue } from \"../../../elementSettings/elementSettingsUtils\";\n\ntype EmbedPluginConfig = {\n    type: string;\n    toolbar?: {\n        title?: string;\n        group?: string;\n        preview?: () => React.ReactNode;\n    };\n    render?: ({ element }) => React.ReactNode;\n    oembed?: {\n        global?: string;\n        sdk?: string;\n        // onData?: Function;\n        onData?: (data: { [key: string]: any }) => { [key: string]: any };\n        renderEmbed?: (props: OEmbedProps) => React.ReactElement;\n        init?: (params: { node: HTMLElement }) => void;\n    };\n    settings?: Array<string | Array<string | any>> | Function;\n    create?: Function;\n    target?: Array<string>;\n    onCreate?: string;\n    renderElementPreview?: (params: {\n        element: PbEditorElement;\n        width: number;\n        height: number;\n    }) => React.ReactElement;\n};\n\nexport const createEmbedPlugin = (config: EmbedPluginConfig): PbEditorPageElementPlugin => {\n    const defaultSettings = [\"pb-editor-page-element-settings-delete\"];\n\n    return {\n        name: \"pb-editor-page-element-\" + config.type,\n        type: \"pb-editor-page-element\",\n        elementType: config.type,\n        toolbar: config.toolbar,\n        settings:\n            typeof config.settings === \"function\"\n                ? config.settings(defaultSettings)\n                : defaultSettings,\n        target: config.target || [\"cell\", \"block\", \"list-item\"],\n        // eslint-disable-next-line\n        create({ content = {}, ...options }) {\n            const defaultValue = {\n                type: config.type,\n                elements: [],\n                data: {\n                    settings: {\n                        margin: createInitialPerDeviceSettingValue(\n                            { all: \"0px\" },\n                            DisplayMode.DESKTOP\n                        ),\n                        padding: createInitialPerDeviceSettingValue(\n                            { all: \"0px\" },\n                            DisplayMode.DESKTOP\n                        )\n                    }\n                },\n                ...options\n            };\n\n            return typeof config.create === \"function\" ? config.create(defaultValue) : defaultValue;\n        },\n        render(props) {\n            if (config.render) {\n                return config.render(props);\n            }\n\n            return <OEmbed element={props.element} {...(config.oembed || {})} />;\n        },\n        onCreate: config.onCreate || \"open-settings\",\n        renderElementPreview: config.renderElementPreview\n    };\n};\n\ntype EmbedPluginSidebarConfig = {\n    type: string;\n    render(params?: { Bind: BindComponent; submit: () => void }): React.ReactElement;\n};\n\nexport const createEmbedSettingsPlugin = ({\n    type,\n    render\n}: EmbedPluginSidebarConfig): PbEditorPageElementAdvancedSettingsPlugin => {\n    return {\n        name: \"pb-editor-page-element-advanced-settings-\" + type,\n        type: \"pb-editor-page-element-advanced-settings\",\n        elementType: type,\n        render\n    };\n};\n"],"file":"createEmbedPlugin.js"}