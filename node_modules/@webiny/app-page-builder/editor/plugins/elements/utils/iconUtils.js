import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import React from "react";
import { renderToStaticMarkup } from "react-dom/server";
import { plugins } from "@webiny/plugins";
import get from "lodash/get";
// TODO: check is it possible to dynamically add icons?
// if yes, this wont work
var icons;

var getIcons = function getIcons() {
  if (!icons) {
    var pluginsByType = plugins.byType("pb-icons");
    icons = pluginsByType.reduce(function (icons, pl) {
      return icons.concat(pl.getIcons());
    }, []);
  }

  return icons;
};

var getSvg = function getSvg(id) {
  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (!props.width) {
    props.width = 50;
  }

  var icon = getIcons().find(function (ic) {
    return ic.id[0] === id[0] && ic.id[1] === id[1];
  });

  if (!icon) {
    return null;
  }

  return renderToStaticMarkup( /*#__PURE__*/React.cloneElement(icon.svg, props));
};

var updateButtonElementIcon = function updateButtonElementIcon(_ref) {
  var name = _ref.name,
      newElement = _ref.newElement,
      element = _ref.element;
  var icon = (element === null || element === void 0 ? void 0 : element.data) || {};
  var isIcon = name.startsWith("icon");

  if (isIcon) {
    var _newElement$data;

    var _ref2 = ((_newElement$data = newElement.data) === null || _newElement$data === void 0 ? void 0 : _newElement$data.icon) || {},
        id = _ref2.id,
        width = _ref2.width,
        color = _ref2.color,
        position = _ref2.position;

    var isSameIconProps = icon.width === width && icon.color === color && icon.position === position;
    var isSelectedIcon = false;

    if (isSameIconProps && id && icon !== null && icon !== void 0 && icon.id) {
      isSelectedIcon = icon.id[0] === id[0] && icon.id[1] === id[1];
    }

    var updatedIcon = isSelectedIcon ? {} : newElement.data.icon || {}; // Modify the element directly.

    newElement.data.icon = _objectSpread(_objectSpread({}, updatedIcon), {}, {
      // By setting "svg" as "null" we can truly reset it;
      // otherwise "undefined" will be overridden during merge.
      svg: id && !isSelectedIcon ? getSvg(id, {
        width: width,
        color: color
      }) : null
    });
  }
};

var updateIconElement = function updateIconElement(_ref3) {
  var newElement = _ref3.newElement;

  var _get = get(newElement, "data.icon"),
      id = _get.id,
      width = _get.width,
      color = _get.color; // Modify the element directly.


  newElement.data.icon.svg = getSvg(id, {
    width: width,
    color: color
  });
};

export { getSvg, updateButtonElementIcon, updateIconElement };
//# sourceMappingURL=iconUtils.js.map