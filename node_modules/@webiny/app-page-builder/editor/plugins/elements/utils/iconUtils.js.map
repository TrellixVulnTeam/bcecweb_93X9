{"version":3,"sources":["../../../../../src/editor/plugins/elements/utils/iconUtils.ts"],"names":["React","renderToStaticMarkup","plugins","get","icons","getIcons","pluginsByType","byType","reduce","pl","concat","getSvg","id","props","width","icon","find","ic","cloneElement","svg","updateButtonElementIcon","name","newElement","element","data","isIcon","startsWith","color","position","isSameIconProps","isSelectedIcon","updatedIcon","updateIconElement"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { renderToStaticMarkup } from \"react-dom/server\";\nimport { plugins } from \"@webiny/plugins\";\nimport get from \"lodash/get\";\nimport { PbIcon, PbIconsPlugin } from \"../../../../types\";\nimport { PostModifyElementArgs } from \"../../elementSettings/useUpdateHandlers\";\n// TODO: check is it possible to dynamically add icons?\n// if yes, this wont work\nlet icons;\nconst getIcons = (): PbIcon[] => {\n    if (!icons) {\n        const pluginsByType = plugins.byType<PbIconsPlugin>(\"pb-icons\");\n        icons = pluginsByType.reduce((icons, pl) => {\n            return icons.concat(pl.getIcons());\n        }, []);\n    }\n    return icons;\n};\n\nconst getSvg = (id: string[], props: any = {}) => {\n    if (!props.width) {\n        props.width = 50;\n    }\n    const icon: PbIcon = getIcons().find(ic => ic.id[0] === id[0] && ic.id[1] === id[1]);\n    if (!icon) {\n        return null;\n    }\n    return renderToStaticMarkup(React.cloneElement(icon.svg, props));\n};\n\nconst updateButtonElementIcon = ({ name, newElement, element }: PostModifyElementArgs) => {\n    const icon = element?.data || {};\n\n    const isIcon = name.startsWith(\"icon\");\n    if (isIcon) {\n        const { id, width, color, position } = newElement.data?.icon || {};\n\n        const isSameIconProps =\n            icon.width === width && icon.color === color && icon.position === position;\n        let isSelectedIcon = false;\n\n        if (isSameIconProps && id && icon?.id) {\n            isSelectedIcon = icon.id[0] === id[0] && icon.id[1] === id[1];\n        }\n\n        const updatedIcon = isSelectedIcon ? {} : newElement.data.icon || {};\n        // Modify the element directly.\n        newElement.data.icon = {\n            ...updatedIcon,\n            // By setting \"svg\" as \"null\" we can truly reset it;\n            // otherwise \"undefined\" will be overridden during merge.\n            svg: id && !isSelectedIcon ? getSvg(id, { width, color }) : null\n        };\n    }\n};\n\nconst updateIconElement = ({ newElement }: PostModifyElementArgs) => {\n    const { id, width, color } = get(newElement, \"data.icon\");\n    // Modify the element directly.\n    newElement.data.icon.svg = getSvg(id, { width, color });\n};\n\nexport { getSvg, updateButtonElementIcon, updateIconElement };\n"],"file":"iconUtils.js"}