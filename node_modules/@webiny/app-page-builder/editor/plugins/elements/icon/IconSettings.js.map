{"version":3,"sources":["../../../../../src/editor/plugins/elements/icon/IconSettings.tsx"],"names":["React","useCallback","css","useRecoilValue","activeElementAtom","elementWithChildrenByIdSelector","IconPicker","Accordion","Wrapper","InputField","BaseColorPicker","useUpdateHandlers","updateIconElement","classes","grid","padding","marginBottom","widthInputStyle","maxWidth","rightCellStyle","justifySelf","IconSettings","defaultAccordionValue","activeElementId","element","data","icon","dataNamespace","postModifyElement","getUpdateValue","getUpdatePreview","updateIcon","value","id","updateColor","updateColorPreview","updateWidth","color","width","memo"],"mappings":"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","sourcesContent":["import React, { useCallback } from \"react\";\nimport { css } from \"emotion\";\nimport { useRecoilValue } from \"recoil\";\nimport { PbEditorPageElementSettingsRenderComponentProps } from \"../../../../types\";\nimport { activeElementAtom, elementWithChildrenByIdSelector } from \"../../../recoil/modules\";\n// Components\nimport IconPicker from \"../../../components/IconPicker\";\nimport Accordion from \"../../elementSettings/components/Accordion\";\nimport Wrapper from \"../../elementSettings/components/Wrapper\";\nimport InputField from \"../../elementSettings/components/InputField\";\nimport { BaseColorPicker } from \"../../elementSettings/components/ColorPicker\";\nimport useUpdateHandlers from \"../../elementSettings/useUpdateHandlers\";\nimport { updateIconElement } from \"../utils/iconUtils\";\n\nconst classes = {\n    grid: css({\n        \"&.mdc-layout-grid\": {\n            padding: 0,\n            marginBottom: 24\n        }\n    }),\n    widthInputStyle: css({\n        maxWidth: 60\n    }),\n    rightCellStyle: css({\n        justifySelf: \"end\"\n    })\n};\n\nconst IconSettings: React.FunctionComponent<PbEditorPageElementSettingsRenderComponentProps> = ({\n    defaultAccordionValue\n}) => {\n    const activeElementId = useRecoilValue(activeElementAtom);\n    const element = useRecoilValue(elementWithChildrenByIdSelector(activeElementId));\n    const { data: { icon = {} } = {} } = element;\n\n    const { getUpdateValue, getUpdatePreview } = useUpdateHandlers({\n        element,\n        dataNamespace: \"data.icon\",\n        postModifyElement: updateIconElement\n    });\n\n    const updateIcon = useCallback(value => getUpdateValue(\"id\")(value?.id), [getUpdateValue]);\n    const updateColor = useCallback(\n        (value: string) => getUpdateValue(\"color\")(value),\n        [getUpdateValue]\n    );\n    const updateColorPreview = useCallback(\n        (value: string) => getUpdatePreview(\"color\")(value),\n        [getUpdatePreview]\n    );\n    const updateWidth = useCallback(\n        (value: string) => getUpdateValue(\"width\")(value),\n        [getUpdateValue]\n    );\n\n    return (\n        <Accordion title={\"Icon\"} defaultValue={defaultAccordionValue}>\n            <>\n                <Wrapper containerClassName={classes.grid} label={\"Icon\"}>\n                    <IconPicker\n                        value={icon.id}\n                        onChange={updateIcon}\n                        removable={false}\n                        useInSidebar={true}\n                    />\n                </Wrapper>\n\n                <Wrapper containerClassName={classes.grid} label={\"Color\"}>\n                    <BaseColorPicker\n                        value={icon.color}\n                        updateValue={updateColor}\n                        updatePreview={updateColorPreview}\n                    />\n                </Wrapper>\n                <Wrapper\n                    containerClassName={classes.grid}\n                    label={\"Width\"}\n                    leftCellSpan={8}\n                    rightCellSpan={4}\n                    rightCellClassName={classes.rightCellStyle}\n                >\n                    <InputField\n                        className={classes.widthInputStyle}\n                        value={icon.width}\n                        onChange={updateWidth}\n                        placeholder=\"50\"\n                    />\n                </Wrapper>\n            </>\n        </Accordion>\n    );\n};\n\nexport default React.memo(IconSettings);\n"],"file":"IconSettings.js"}