import React, { useCallback } from "react";
import { css } from "emotion";
import { useRecoilValue } from "recoil";
import { activeElementAtom, elementWithChildrenByIdSelector } from "../../../recoil/modules"; // Components

import IconPicker from "../../../components/IconPicker";
import Accordion from "../../elementSettings/components/Accordion";
import Wrapper from "../../elementSettings/components/Wrapper";
import InputField from "../../elementSettings/components/InputField";
import { BaseColorPicker } from "../../elementSettings/components/ColorPicker";
import useUpdateHandlers from "../../elementSettings/useUpdateHandlers";
import { updateIconElement } from "../utils/iconUtils";
var classes = {
  grid: /*#__PURE__*/css({
    "&.mdc-layout-grid": {
      padding: 0,
      marginBottom: 24
    }
  }, "label:grid;"),
  widthInputStyle: /*#__PURE__*/css({
    maxWidth: 60
  }, "label:widthInputStyle;"),
  rightCellStyle: /*#__PURE__*/css({
    justifySelf: "end"
  }, "label:rightCellStyle;")
};

var IconSettings = function IconSettings(_ref) {
  var defaultAccordionValue = _ref.defaultAccordionValue;
  var activeElementId = useRecoilValue(activeElementAtom);
  var element = useRecoilValue(elementWithChildrenByIdSelector(activeElementId));
  var _element$data = element.data;
  _element$data = _element$data === void 0 ? {} : _element$data;
  var _element$data$icon = _element$data.icon,
      icon = _element$data$icon === void 0 ? {} : _element$data$icon;

  var _useUpdateHandlers = useUpdateHandlers({
    element: element,
    dataNamespace: "data.icon",
    postModifyElement: updateIconElement
  }),
      getUpdateValue = _useUpdateHandlers.getUpdateValue,
      getUpdatePreview = _useUpdateHandlers.getUpdatePreview;

  var updateIcon = useCallback(function (value) {
    return getUpdateValue("id")(value === null || value === void 0 ? void 0 : value.id);
  }, [getUpdateValue]);
  var updateColor = useCallback(function (value) {
    return getUpdateValue("color")(value);
  }, [getUpdateValue]);
  var updateColorPreview = useCallback(function (value) {
    return getUpdatePreview("color")(value);
  }, [getUpdatePreview]);
  var updateWidth = useCallback(function (value) {
    return getUpdateValue("width")(value);
  }, [getUpdateValue]);
  return /*#__PURE__*/React.createElement(Accordion, {
    title: "Icon",
    defaultValue: defaultAccordionValue
  }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Wrapper, {
    containerClassName: classes.grid,
    label: "Icon"
  }, /*#__PURE__*/React.createElement(IconPicker, {
    value: icon.id,
    onChange: updateIcon,
    removable: false,
    useInSidebar: true
  })), /*#__PURE__*/React.createElement(Wrapper, {
    containerClassName: classes.grid,
    label: "Color"
  }, /*#__PURE__*/React.createElement(BaseColorPicker, {
    value: icon.color,
    updateValue: updateColor,
    updatePreview: updateColorPreview
  })), /*#__PURE__*/React.createElement(Wrapper, {
    containerClassName: classes.grid,
    label: "Width",
    leftCellSpan: 8,
    rightCellSpan: 4,
    rightCellClassName: classes.rightCellStyle
  }, /*#__PURE__*/React.createElement(InputField, {
    className: classes.widthInputStyle,
    value: icon.width,
    onChange: updateWidth,
    placeholder: "50"
  }))));
};

export default /*#__PURE__*/React.memo(IconSettings);
//# sourceMappingURL=IconSettings.js.map