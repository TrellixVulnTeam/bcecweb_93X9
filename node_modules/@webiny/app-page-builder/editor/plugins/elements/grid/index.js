import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import React from "react";
import styled from "@emotion/styled";
import kebabCase from "lodash/kebabCase";
import GridContainer from "./GridContainer";
import { ReactComponent as GridIcon } from "@svgr/webpack!../../../assets/icons/view_quilt.svg";
import { createElement } from "../../../helpers";
import { DisplayMode } from "../../../../types";
import { getDefaultPresetCellsTypePluginType, calculatePresetCells } from "../../gridPresets";
import { createInitialPerDeviceSettingValue } from "../../elementSettings/elementSettingsUtils";
var PreviewBox = /*#__PURE__*/styled("div", {
  target: "e77hysm0",
  label: "PreviewBox"
})({
  textAlign: "center",
  height: 50,
  svg: {
    height: 50,
    width: 50
  }
});

var createDefaultCells = function createDefaultCells(cellsType) {
  var cells = calculatePresetCells(cellsType);
  return cells.map(function (size) {
    return createElement("cell", {
      data: {
        settings: {
          grid: {
            size: size
          }
        }
      }
    });
  });
};

export default (function () {
  var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var defaultSettings = ["pb-editor-page-element-style-settings-grid", "pb-editor-page-element-style-settings-background", "pb-editor-page-element-style-settings-animation", "pb-editor-page-element-style-settings-border", "pb-editor-page-element-style-settings-shadow", "pb-editor-page-element-style-settings-padding", "pb-editor-page-element-style-settings-margin", "pb-editor-page-element-style-settings-width", "pb-editor-page-element-style-settings-height", "pb-editor-page-element-style-settings-horizontal-align-flex", "pb-editor-page-element-style-settings-vertical-align", "pb-editor-page-element-settings-clone", "pb-editor-page-element-settings-delete"];
  var elementType = kebabCase(args.elementType || "grid");
  var defaultToolbar = {
    title: "Grid",
    group: "pb-editor-element-group-layout",
    preview: function preview() {
      return /*#__PURE__*/React.createElement(PreviewBox, null, /*#__PURE__*/React.createElement(GridIcon, null));
    }
  };
  return {
    type: "pb-editor-page-element",
    name: "pb-editor-page-element-".concat(elementType),
    elementType: elementType,
    toolbar: typeof args.toolbar === "function" ? args.toolbar(defaultToolbar) : defaultToolbar,
    settings: typeof args.settings === "function" ? args.settings(defaultSettings) : defaultSettings,
    target: ["cell", "block"],
    canDelete: function canDelete() {
      return true;
    },
    create: function create() {
      var _data$settings;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var elements = options.elements,
          _options$data = options.data,
          data = _options$data === void 0 ? {} : _options$data;
      var defaultCellsType = getDefaultPresetCellsTypePluginType();
      var cellsType = ((_data$settings = data.settings) === null || _data$settings === void 0 ? void 0 : _data$settings.cellsType) || defaultCellsType;

      var defaultValue = _objectSpread({
        type: elementType,
        elements: elements || createDefaultCells(cellsType),
        data: {
          settings: {
            width: createInitialPerDeviceSettingValue({
              value: "1100px"
            }, DisplayMode.DESKTOP),
            margin: _objectSpread({}, createInitialPerDeviceSettingValue({
              top: "0px",
              right: "0px",
              bottom: "0px",
              left: "0px",
              advanced: true
            }, DisplayMode.DESKTOP)),
            padding: createInitialPerDeviceSettingValue({
              all: "10px"
            }, DisplayMode.DESKTOP),
            grid: {
              cellsType: cellsType
            },
            horizontalAlignFlex: createInitialPerDeviceSettingValue("flex-start", DisplayMode.DESKTOP),
            verticalAlign: createInitialPerDeviceSettingValue("flex-start", DisplayMode.DESKTOP)
          }
        }
      }, options);

      return typeof args.create === "function" ? args.create(defaultValue) : defaultValue;
    },
    render: function render(_ref) {
      var element = _ref.element;
      return /*#__PURE__*/React.createElement(GridContainer, {
        element: element
      });
    }
  };
});
//# sourceMappingURL=index.js.map