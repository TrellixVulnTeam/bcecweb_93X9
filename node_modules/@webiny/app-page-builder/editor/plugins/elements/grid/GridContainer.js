import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import React from "react";
import { useRecoilValue } from "recoil";
import kebabCase from "lodash/kebabCase";
import styled from "@emotion/styled";
import { elementWithChildrenByIdSelector, uiAtom } from "../../../recoil/modules";
import ElementAnimation from "../../../../render/components/ElementAnimation";
import { ElementRoot } from "../../../../render/components/ElementRoot";
import Grid from "./Grid";
var GridContainerStyle = /*#__PURE__*/styled("div", {
  target: "e1bldz4o0",
  label: "GridContainerStyle"
})({
  position: "relative",
  color: "#666",
  padding: 5,
  boxSizing: "border-box",
  display: "flex"
});

var GridContainer = function GridContainer(_ref) {
  var id = _ref.element.id;
  var element = useRecoilValue(elementWithChildrenByIdSelector(id));

  var _useRecoilValue = useRecoilValue(uiAtom),
      displayMode = _useRecoilValue.displayMode; // TODO remove when state is fully switched to use content instead of flat elements


  if (!element) {
    return null;
  }

  return /*#__PURE__*/React.createElement(ElementAnimation, null, /*#__PURE__*/React.createElement(ElementRoot, {
    element: element
  }, function (_ref2) {
    var elementStyle = _ref2.elementStyle,
        elementAttributes = _ref2.elementAttributes,
        customClasses = _ref2.customClasses,
        combineClassNames = _ref2.combineClassNames;
    // Use per-device style
    var justifyContent = elementStyle["--".concat(kebabCase(displayMode), "-justify-content")];
    return /*#__PURE__*/React.createElement(GridContainerStyle, {
      id: id,
      style: {
        justifyContent: justifyContent
      }
    }, /*#__PURE__*/React.createElement(Grid, {
      element: element,
      elementStyle: elementStyle,
      elementAttributes: elementAttributes,
      customClasses: ["webiny-pb-layout-grid webiny-pb-base-page-element-style"].concat(_toConsumableArray(customClasses)),
      combineClassNames: combineClassNames,
      displayMode: displayMode
    }));
  }));
};

export default /*#__PURE__*/React.memo(GridContainer, function (current, next) {
  return current.element.id === next.element.id;
});
//# sourceMappingURL=GridContainer.js.map