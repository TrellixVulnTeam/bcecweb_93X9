import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import React from "react";
import kebabCase from "lodash/kebabCase";
import styled from "@emotion/styled";
import { css } from "emotion";
import Element from "../../../components/Element";
var StyledGrid = /*#__PURE__*/styled("div", {
  target: "e1bpkvpo0",
  label: "StyledGrid"
})({
  display: "flex",
  justifyItems: "center",
  alignItems: "center",
  flexDirection: "row"
});
var CELL_CLASSNAME = "webiny-pb-layout-grid-cell";

var Grid = function Grid(_ref) {
  var elementStyle = _ref.elementStyle,
      elementAttributes = _ref.elementAttributes,
      customClasses = _ref.customClasses,
      combineClassNames = _ref.combineClassNames,
      element = _ref.element,
      displayMode = _ref.displayMode;
  var containerStyle = elementStyle || {}; // Use per-device style

  var alignItems = elementStyle["--".concat(kebabCase(displayMode), "-align-items")];
  return /*#__PURE__*/React.createElement(StyledGrid, Object.assign({
    className: combineClassNames.apply(void 0, _toConsumableArray(customClasses).concat(["webiny-pb-layout-grid-container " + /*#__PURE__*/css(containerStyle, "label:Grid;")]))
  }, elementAttributes, {
    style: {
      alignItems: alignItems
    }
  }), element.elements.map(function (child) {
    var _child$data$settings, _child$data$settings$;

    return /*#__PURE__*/React.createElement("div", {
      key: "cell-".concat(child.id),
      className: "".concat(CELL_CLASSNAME, " ").concat(CELL_CLASSNAME, "-").concat((_child$data$settings = child.data.settings) === null || _child$data$settings === void 0 ? void 0 : (_child$data$settings$ = _child$data$settings.grid) === null || _child$data$settings$ === void 0 ? void 0 : _child$data$settings$.size)
    }, /*#__PURE__*/React.createElement(Element, {
      id: child.id
    }));
  }));
};

export default /*#__PURE__*/React.memo(Grid);
//# sourceMappingURL=Grid.js.map