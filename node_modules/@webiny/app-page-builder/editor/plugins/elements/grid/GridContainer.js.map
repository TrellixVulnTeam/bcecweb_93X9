{"version":3,"sources":["../../../../../src/editor/plugins/elements/grid/GridContainer.tsx"],"names":["React","useRecoilValue","kebabCase","styled","elementWithChildrenByIdSelector","uiAtom","ElementAnimation","ElementRoot","Grid","GridContainerStyle","position","color","padding","boxSizing","display","GridContainer","id","element","displayMode","elementStyle","elementAttributes","customClasses","combineClassNames","justifyContent","memo","current","next"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,QAA/B;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,SAASC,+BAAT,EAA0CC,MAA1C;AACA,OAAOC,gBAAP;AACA,SAASC,WAAT;AACA,OAAOC,IAAP;AAEA,IAAMC,kBAAkB,gBAAGN,MAAH,CAAU,KAAV;AAAA;AAAA;AAAA,GAAiB;AACrCO,EAAAA,QAAQ,EAAE,UAD2B;AAErCC,EAAAA,KAAK,EAAE,MAF8B;AAGrCC,EAAAA,OAAO,EAAE,CAH4B;AAIrCC,EAAAA,SAAS,EAAE,YAJ0B;AAKrCC,EAAAA,OAAO,EAAE;AAL4B,CAAjB,CAAxB;;AAWA,IAAMC,aAA8D,GAAG,SAAjEA,aAAiE,OAAyB;AAAA,MAAXC,EAAW,QAAtBC,OAAsB,CAAXD,EAAW;AAC5F,MAAMC,OAAO,GAAGhB,cAAc,CAACG,+BAA+B,CAACY,EAAD,CAAhC,CAA9B;;AACA,wBAAwBf,cAAc,CAACI,MAAD,CAAtC;AAAA,MAAQa,WAAR,mBAAQA,WAAR,CAF4F,CAG5F;;;AACA,MAAI,CAACD,OAAL,EAAc;AACV,WAAO,IAAP;AACH;;AACD,sBACI,oBAAC,gBAAD,qBACI,oBAAC,WAAD;AAAa,IAAA,OAAO,EAAEA;AAAtB,KACK,iBAA2E;AAAA,QAAxEE,YAAwE,SAAxEA,YAAwE;AAAA,QAA1DC,iBAA0D,SAA1DA,iBAA0D;AAAA,QAAvCC,aAAuC,SAAvCA,aAAuC;AAAA,QAAxBC,iBAAwB,SAAxBA,iBAAwB;AACxE;AACA,QAAMC,cAAc,GAChBJ,YAAY,aAAMjB,SAAS,CAACgB,WAAD,CAAf,sBADhB;AAGA,wBACI,oBAAC,kBAAD;AAAoB,MAAA,EAAE,EAAEF,EAAxB;AAA4B,MAAA,KAAK,EAAE;AAAEO,QAAAA,cAAc,EAAdA;AAAF;AAAnC,oBACI,oBAAC,IAAD;AACI,MAAA,OAAO,EAAEN,OADb;AAEI,MAAA,YAAY,EAAEE,YAFlB;AAGI,MAAA,iBAAiB,EAAEC,iBAHvB;AAII,MAAA,aAAa,GACT,yDADS,4BAENC,aAFM,EAJjB;AAQI,MAAA,iBAAiB,EAAEC,iBARvB;AASI,MAAA,WAAW,EAAEJ;AATjB,MADJ,CADJ;AAeH,GArBL,CADJ,CADJ;AA2BH,CAlCD;;AAoCA,4BAAelB,KAAK,CAACwB,IAAN,CAAWT,aAAX,EAA0B,UAACU,OAAD,EAAUC,IAAV,EAAmB;AACxD,SAAOD,OAAO,CAACR,OAAR,CAAgBD,EAAhB,KAAuBU,IAAI,CAACT,OAAL,CAAaD,EAA3C;AACH,CAFc,CAAf","sourcesContent":["import React from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport kebabCase from \"lodash/kebabCase\";\nimport styled from \"@emotion/styled\";\nimport { PbEditorElement } from \"../../../../types\";\nimport { elementWithChildrenByIdSelector, uiAtom } from \"../../../recoil/modules\";\nimport ElementAnimation from \"../../../../render/components/ElementAnimation\";\nimport { ElementRoot } from \"../../../../render/components/ElementRoot\";\nimport Grid from \"./Grid\";\n\nconst GridContainerStyle = styled(\"div\")({\n    position: \"relative\",\n    color: \"#666\",\n    padding: 5,\n    boxSizing: \"border-box\",\n    display: \"flex\"\n});\n\ntype GridContainerPropsType = {\n    element: PbEditorElement;\n};\nconst GridContainer: React.FunctionComponent<GridContainerPropsType> = ({ element: { id } }) => {\n    const element = useRecoilValue(elementWithChildrenByIdSelector(id));\n    const { displayMode } = useRecoilValue(uiAtom);\n    // TODO remove when state is fully switched to use content instead of flat elements\n    if (!element) {\n        return null;\n    }\n    return (\n        <ElementAnimation>\n            <ElementRoot element={element}>\n                {({ elementStyle, elementAttributes, customClasses, combineClassNames }) => {\n                    // Use per-device style\n                    const justifyContent =\n                        elementStyle[`--${kebabCase(displayMode)}-justify-content`];\n\n                    return (\n                        <GridContainerStyle id={id} style={{ justifyContent }}>\n                            <Grid\n                                element={element}\n                                elementStyle={elementStyle}\n                                elementAttributes={elementAttributes}\n                                customClasses={[\n                                    \"webiny-pb-layout-grid webiny-pb-base-page-element-style\",\n                                    ...customClasses\n                                ]}\n                                combineClassNames={combineClassNames}\n                                displayMode={displayMode}\n                            />\n                        </GridContainerStyle>\n                    );\n                }}\n            </ElementRoot>\n        </ElementAnimation>\n    );\n};\n\nexport default React.memo(GridContainer, (current, next) => {\n    return current.element.id === next.element.id;\n});\n"],"file":"GridContainer.js"}