{"version":3,"sources":["../../../../../src/editor/plugins/elements/grid/index.tsx"],"names":["React","styled","kebabCase","GridContainer","createElement","DisplayMode","getDefaultPresetCellsTypePluginType","calculatePresetCells","createInitialPerDeviceSettingValue","PreviewBox","textAlign","height","svg","width","createDefaultCells","cellsType","cells","map","size","data","settings","grid","args","defaultSettings","elementType","defaultToolbar","title","group","preview","type","name","toolbar","target","canDelete","create","options","elements","defaultCellsType","defaultValue","value","DESKTOP","margin","top","right","bottom","left","advanced","padding","all","horizontalAlignFlex","verticalAlign","render","element"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport kebabCase from \"lodash/kebabCase\";\nimport GridContainer from \"./GridContainer\";\nimport { ReactComponent as GridIcon } from \"../../../assets/icons/view_quilt.svg\";\nimport { createElement } from \"../../../helpers\";\nimport {\n    PbEditorPageElementPlugin,\n    DisplayMode,\n    PbEditorElementPluginArgs\n} from \"../../../../types\";\nimport { getDefaultPresetCellsTypePluginType, calculatePresetCells } from \"../../gridPresets\";\nimport { createInitialPerDeviceSettingValue } from \"../../elementSettings/elementSettingsUtils\";\n\nconst PreviewBox = styled(\"div\")({\n    textAlign: \"center\",\n    height: 50,\n    svg: {\n        height: 50,\n        width: 50\n    }\n});\n\nconst createDefaultCells = (cellsType: string) => {\n    const cells = calculatePresetCells(cellsType);\n    return cells.map(size => {\n        return createElement(\"cell\", {\n            data: {\n                settings: {\n                    grid: {\n                        size\n                    }\n                }\n            }\n        });\n    });\n};\n\nexport default (args: PbEditorElementPluginArgs = {}): PbEditorPageElementPlugin => {\n    const defaultSettings = [\n        \"pb-editor-page-element-style-settings-grid\",\n        \"pb-editor-page-element-style-settings-background\",\n        \"pb-editor-page-element-style-settings-animation\",\n        \"pb-editor-page-element-style-settings-border\",\n        \"pb-editor-page-element-style-settings-shadow\",\n        \"pb-editor-page-element-style-settings-padding\",\n        \"pb-editor-page-element-style-settings-margin\",\n        \"pb-editor-page-element-style-settings-width\",\n        \"pb-editor-page-element-style-settings-height\",\n        \"pb-editor-page-element-style-settings-horizontal-align-flex\",\n        \"pb-editor-page-element-style-settings-vertical-align\",\n        \"pb-editor-page-element-settings-clone\",\n        \"pb-editor-page-element-settings-delete\"\n    ];\n\n    const elementType = kebabCase(args.elementType || \"grid\");\n\n    const defaultToolbar = {\n        title: \"Grid\",\n        group: \"pb-editor-element-group-layout\",\n        preview() {\n            return (\n                <PreviewBox>\n                    <GridIcon />\n                </PreviewBox>\n            );\n        }\n    };\n\n    return {\n        type: \"pb-editor-page-element\",\n        name: `pb-editor-page-element-${elementType}`,\n        elementType: elementType,\n        toolbar: typeof args.toolbar === \"function\" ? args.toolbar(defaultToolbar) : defaultToolbar,\n        settings:\n            typeof args.settings === \"function\" ? args.settings(defaultSettings) : defaultSettings,\n\n        target: [\"cell\", \"block\"],\n        canDelete: () => {\n            return true;\n        },\n        create: (options = {}) => {\n            const { elements, data = {} } = options;\n            const defaultCellsType = getDefaultPresetCellsTypePluginType();\n            const cellsType = data.settings?.cellsType || defaultCellsType;\n\n            const defaultValue = {\n                type: elementType,\n                elements: elements || createDefaultCells(cellsType),\n                data: {\n                    settings: {\n                        width: createInitialPerDeviceSettingValue(\n                            { value: \"1100px\" },\n                            DisplayMode.DESKTOP\n                        ),\n                        margin: {\n                            ...createInitialPerDeviceSettingValue(\n                                {\n                                    top: \"0px\",\n                                    right: \"0px\",\n                                    bottom: \"0px\",\n                                    left: \"0px\",\n                                    advanced: true\n                                },\n                                DisplayMode.DESKTOP\n                            )\n                        },\n                        padding: createInitialPerDeviceSettingValue(\n                            { all: \"10px\" },\n                            DisplayMode.DESKTOP\n                        ),\n                        grid: {\n                            cellsType\n                        },\n                        horizontalAlignFlex: createInitialPerDeviceSettingValue(\n                            \"flex-start\",\n                            DisplayMode.DESKTOP\n                        ),\n                        verticalAlign: createInitialPerDeviceSettingValue(\n                            \"flex-start\",\n                            DisplayMode.DESKTOP\n                        )\n                    }\n                },\n                ...options\n            };\n\n            return typeof args.create === \"function\" ? args.create(defaultValue) : defaultValue;\n        },\n        render({ element }) {\n            return <GridContainer element={element} />;\n        }\n    };\n};\n"],"file":"index.js"}