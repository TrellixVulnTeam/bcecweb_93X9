import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import * as React from "react";
import { css } from "emotion";
import { sortable } from "react-sortable";
import { FileManager } from "@webiny/app-admin/components";
import { Grid, Cell } from "@webiny/ui/Grid";
import File from "./File";
import Accordion from "../../elementSettings/components/Accordion";
import { classes, SimpleButton, ButtonContainer } from "../../elementSettings/components/StyledComponents";
var style = {
  addImagesButton: /*#__PURE__*/css({
    clear: "both",
    padding: "20px 10px",
    textAlign: "center"
  }, "label:addImagesButton;"),
  liItem: {
    display: "inline-block"
  }
};

var Item = /*#__PURE__*/function (_React$Component) {
  _inherits(Item, _React$Component);

  var _super = _createSuper(Item);

  function Item() {
    _classCallCheck(this, Item);

    return _super.apply(this, arguments);
  }

  _createClass(Item, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement("li", Object.assign({
        style: style.liItem
      }, this.props), this.props.children);
    }
  }]);

  return Item;
}(React.Component);

var SortableItem = sortable(Item);

var ImagesListImagesSettings = function ImagesListImagesSettings(props) {
  var Bind = props.Bind,
      submit = props.submit;
  return /*#__PURE__*/React.createElement(Accordion, {
    title: "Images",
    defaultValue: true
  }, /*#__PURE__*/React.createElement(Grid, {
    className: classes.simpleGrid
  }, /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(Bind, {
    name: "images",
    afterChange: submit
  }, function (_ref) {
    var _onChange = _ref.onChange,
        images = _ref.value;

    /**
     * We're creating a fresh copy of value here because all of sudden
     * dragging a "SortableItem" started throwing TypeError: "Cannot assign to read only property"
     * which means the state is being mutated by "Sortable" somehow.
     */
    var value = Array.isArray(images) ? _toConsumableArray(images) : [];
    return /*#__PURE__*/React.createElement(FileManager, {
      images: true,
      multiple: true,
      onChange: function onChange(files) {
        Array.isArray(value) ? _onChange([].concat(_toConsumableArray(value), _toConsumableArray(files))) : _onChange(_toConsumableArray(files));
      }
    }, function (_ref2) {
      var showFileManager = _ref2.showFileManager;
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("ul", {
        className: "sortable-list"
      }, Array.isArray(value) && value.map(function (item, i) {
        return /*#__PURE__*/React.createElement(SortableItem, {
          key: i,
          onSortItems: _onChange,
          items: value,
          sortId: i
        }, /*#__PURE__*/React.createElement(File, {
          file: item,
          onRemove: function onRemove() {
            // Remove the image at index i
            var updatedValue = [].concat(_toConsumableArray(value.slice(0, i)), _toConsumableArray(value.slice(i + 1)));

            _onChange(updatedValue);
          }
        }));
      })), /*#__PURE__*/React.createElement(ButtonContainer, null, /*#__PURE__*/React.createElement(SimpleButton, {
        onClick: showFileManager
      }, "Add images...")));
    });
  }))));
};

export default ImagesListImagesSettings;
//# sourceMappingURL=ImagesListImagesSettings.js.map