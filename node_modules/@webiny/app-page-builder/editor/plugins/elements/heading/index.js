import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["content"];
import React from "react";
import kebabCase from "lodash/kebabCase";
import { DisplayMode } from "../../../../types";
import { createInitialPerDeviceSettingValue } from "../../elementSettings/elementSettingsUtils";
import Heading, { headingClassName } from "./Heading";
import { createInitialTextValue } from "../utils/textUtils";
export default (function () {
  var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var defaultText = "Heading";
  var defaultSettings = [["pb-editor-page-element-style-settings-text", {
    useCustomTag: true,
    tags: ["h1", "h2", "h3", "h4", "h5", "h6"]
  }], "pb-editor-page-element-style-settings-background", "pb-editor-page-element-style-settings-border", "pb-editor-page-element-style-settings-shadow", "pb-editor-page-element-style-settings-padding", "pb-editor-page-element-style-settings-margin", "pb-editor-page-element-settings-clone", "pb-editor-page-element-settings-delete"];
  var elementType = kebabCase(args.elementType || "heading");
  var defaultToolbar = {
    title: "Heading",
    group: "pb-editor-element-group-basic",
    preview: function preview() {
      return /*#__PURE__*/React.createElement("h2", {
        className: headingClassName
      }, defaultText);
    }
  };
  return {
    name: "pb-editor-page-element-".concat(elementType),
    type: "pb-editor-page-element",
    elementType: elementType,
    toolbar: typeof args.toolbar === "function" ? args.toolbar(defaultToolbar) : defaultToolbar,
    settings: typeof args.settings === "function" ? args.settings(defaultSettings) : defaultSettings,
    target: ["cell", "block"],
    create: function create(_ref) {
      var _ref$content = _ref.content,
          content = _ref$content === void 0 ? {} : _ref$content,
          options = _objectWithoutProperties(_ref, _excluded);

      var previewText = content.text || defaultText;

      var defaultValue = _objectSpread({
        type: this.elementType,
        elements: [],
        data: {
          text: _objectSpread(_objectSpread({}, createInitialPerDeviceSettingValue(createInitialTextValue({
            type: this.elementType,
            tag: "h1"
          }), DisplayMode.DESKTOP)), {}, {
            data: {
              text: previewText
            }
          }),
          settings: {
            margin: createInitialPerDeviceSettingValue({
              all: "0px"
            }, DisplayMode.DESKTOP),
            padding: createInitialPerDeviceSettingValue({
              all: "0px"
            }, DisplayMode.DESKTOP),
            horizontalAlign: createInitialPerDeviceSettingValue("center", DisplayMode.DESKTOP)
          }
        }
      }, options);

      return typeof args.create === "function" ? args.create(defaultValue) : defaultValue;
    },
    render: function render(_ref2) {
      var element = _ref2.element;
      return /*#__PURE__*/React.createElement(Heading, {
        elementId: element.id
      });
    }
  };
});
//# sourceMappingURL=index.js.map