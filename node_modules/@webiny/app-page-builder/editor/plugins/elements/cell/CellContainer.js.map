{"version":3,"sources":["../../../../../src/editor/plugins/elements/cell/CellContainer.tsx"],"names":["React","Cell","DropZone","styled","ElementRoot","useEventActionHandler","DropElementActionEvent","TogglePluginActionEvent","elementByIdSelector","IconButton","css","useRecoilValue","CellContainerStyle","active","position","color","boxSizing","flexGrow","width","content","zIndex","top","left","height","transition","border","addIcon","transform","display","CellContainer","elementId","isActive","handler","element","isHighlighted","id","path","elements","type","totalElements","length","onAddClick","trigger","name","params","closeOtherInGroup","dropElementAction","source","target","getAllClasses","elementStyle","map","childId","index","memo"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Cell from \"./Cell\";\nimport DropZone from \"../../../components/DropZone\";\nimport styled from \"@emotion/styled\";\nimport { ElementRoot } from \"../../../../render/components/ElementRoot\";\nimport { useEventActionHandler } from \"../../../hooks/useEventActionHandler\";\nimport { ReactComponent as AddCircleOutline } from \"../../../assets/icons/baseline-add_circle-24px.svg\";\nimport { DragObjectWithTypeWithTarget } from \"../../../components/Droppable\";\nimport { DropElementActionEvent, TogglePluginActionEvent } from \"../../../recoil/actions\";\nimport { elementByIdSelector } from \"../../../recoil/modules\";\nimport { IconButton } from \"@webiny/ui/Button\";\nimport { css } from \"emotion\";\nimport { useRecoilValue } from \"recoil\";\n\nconst CellContainerStyle = styled<\"div\", { active }>(\"div\")(({ active }) => ({\n    position: \"relative\",\n    color: \"#666\",\n    boxSizing: \"border-box\",\n    flexGrow: 1,\n    width: `100%`,\n    \" > div\": {\n        width: \"100%\"\n    },\n    \"&::after\": {\n        content: '\"\"',\n        position: \"absolute\",\n        zIndex: -1,\n        top: 0,\n        left: 0,\n        width: \"100%\",\n        height: \"100%\",\n        transition: \"border 250ms ease-in-out\",\n        border: active ? \"none\" : \"1px dashed gray\"\n    }\n}));\nconst addIcon = css({\n    color: \"var(--mdc-theme-secondary)\",\n    transition: \"transform 0.2s\",\n    \"&:hover\": {\n        transform: \"scale(1.3)\"\n    },\n    \"&::before, &::after\": {\n        display: \"none\"\n    }\n});\n\ntype CellPropsType = {\n    elementId: string;\n    isActive: boolean;\n};\nconst CellContainer: React.FunctionComponent<CellPropsType> = ({ elementId, isActive }) => {\n    const handler = useEventActionHandler();\n    const element = useRecoilValue(elementByIdSelector(elementId));\n    const { isHighlighted } = element;\n    // TODO remove when state is fully switched to use content instead of flat elements\n    if (!element) {\n        return null;\n    }\n    const { id, path, elements, type } = element;\n    const totalElements = elements.length;\n\n    const onAddClick = () => {\n        handler.trigger(\n            new TogglePluginActionEvent({\n                name: \"pb-editor-toolbar-add-element\",\n                params: { id, path, type },\n                closeOtherInGroup: true\n            })\n        );\n    };\n\n    const dropElementAction = (source: DragObjectWithTypeWithTarget, position: number) => {\n        handler.trigger(\n            new DropElementActionEvent({\n                source,\n                target: {\n                    id,\n                    type,\n                    position\n                }\n            })\n        );\n    };\n\n    return (\n        <ElementRoot element={element}>\n            {({ getAllClasses, elementStyle }) => (\n                <CellContainerStyle\n                    active={isHighlighted || isActive}\n                    style={elementStyle}\n                    className={getAllClasses(\"webiny-pb-base-page-element-style\")}\n                >\n                    {totalElements === 0 && (\n                        <DropZone.Center\n                            id={id}\n                            type={type}\n                            isHighlighted={isHighlighted}\n                            onDrop={source => dropElementAction(source, 0)}\n                        >\n                            <IconButton\n                                className={addIcon + \" addIcon\"}\n                                icon={<AddCircleOutline />}\n                                onClick={onAddClick}\n                            />\n                        </DropZone.Center>\n                    )}\n                    {elements.map((childId, index) => {\n                        return (\n                            <Cell\n                                key={childId as string}\n                                dropElement={dropElementAction}\n                                index={index}\n                                type={type}\n                                isLast={index === totalElements - 1}\n                                id={childId as string}\n                            />\n                        );\n                    })}\n                </CellContainerStyle>\n            )}\n        </ElementRoot>\n    );\n};\n\nexport default React.memo(CellContainer);\n"],"file":"CellContainer.js"}