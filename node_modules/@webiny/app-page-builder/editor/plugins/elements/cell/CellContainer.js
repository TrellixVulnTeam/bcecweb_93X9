import React from "react";
import Cell from "./Cell";
import DropZone from "../../../components/DropZone";
import styled from "@emotion/styled";
import { ElementRoot } from "../../../../render/components/ElementRoot";
import { useEventActionHandler } from "../../../hooks/useEventActionHandler";
import { ReactComponent as AddCircleOutline } from "@svgr/webpack!../../../assets/icons/baseline-add_circle-24px.svg";
import { DropElementActionEvent, TogglePluginActionEvent } from "../../../recoil/actions";
import { elementByIdSelector } from "../../../recoil/modules";
import { IconButton } from "@webiny/ui/Button";
import { css } from "emotion";
import { useRecoilValue } from "recoil";
var CellContainerStyle = /*#__PURE__*/styled("div", {
  target: "eoxa6ke0",
  label: "CellContainerStyle"
})(function (_ref) {
  var active = _ref.active;
  return {
    position: "relative",
    color: "#666",
    boxSizing: "border-box",
    flexGrow: 1,
    width: "100%",
    " > div": {
      width: "100%"
    },
    "&::after": {
      content: '""',
      position: "absolute",
      zIndex: -1,
      top: 0,
      left: 0,
      width: "100%",
      height: "100%",
      transition: "border 250ms ease-in-out",
      border: active ? "none" : "1px dashed gray"
    }
  };
});
var addIcon = /*#__PURE__*/css({
  color: "var(--mdc-theme-secondary)",
  transition: "transform 0.2s",
  "&:hover": {
    transform: "scale(1.3)"
  },
  "&::before, &::after": {
    display: "none"
  }
}, "label:addIcon;");

var CellContainer = function CellContainer(_ref2) {
  var elementId = _ref2.elementId,
      isActive = _ref2.isActive;
  var handler = useEventActionHandler();
  var element = useRecoilValue(elementByIdSelector(elementId));
  var isHighlighted = element.isHighlighted; // TODO remove when state is fully switched to use content instead of flat elements

  if (!element) {
    return null;
  }

  var id = element.id,
      path = element.path,
      elements = element.elements,
      type = element.type;
  var totalElements = elements.length;

  var onAddClick = function onAddClick() {
    handler.trigger(new TogglePluginActionEvent({
      name: "pb-editor-toolbar-add-element",
      params: {
        id: id,
        path: path,
        type: type
      },
      closeOtherInGroup: true
    }));
  };

  var dropElementAction = function dropElementAction(source, position) {
    handler.trigger(new DropElementActionEvent({
      source: source,
      target: {
        id: id,
        type: type,
        position: position
      }
    }));
  };

  return /*#__PURE__*/React.createElement(ElementRoot, {
    element: element
  }, function (_ref3) {
    var getAllClasses = _ref3.getAllClasses,
        elementStyle = _ref3.elementStyle;
    return /*#__PURE__*/React.createElement(CellContainerStyle, {
      active: isHighlighted || isActive,
      style: elementStyle,
      className: getAllClasses("webiny-pb-base-page-element-style")
    }, totalElements === 0 && /*#__PURE__*/React.createElement(DropZone.Center, {
      id: id,
      type: type,
      isHighlighted: isHighlighted,
      onDrop: function onDrop(source) {
        return dropElementAction(source, 0);
      }
    }, /*#__PURE__*/React.createElement(IconButton, {
      className: addIcon + " addIcon",
      icon: /*#__PURE__*/React.createElement(AddCircleOutline, null),
      onClick: onAddClick
    })), elements.map(function (childId, index) {
      return /*#__PURE__*/React.createElement(Cell, {
        key: childId,
        dropElement: dropElementAction,
        index: index,
        type: type,
        isLast: index === totalElements - 1,
        id: childId
      });
    }));
  });
};

export default /*#__PURE__*/React.memo(CellContainer);
//# sourceMappingURL=CellContainer.js.map