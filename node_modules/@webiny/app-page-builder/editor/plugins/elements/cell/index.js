import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import React from "react";
import kebabCase from "lodash/kebabCase";
import CellContainer from "./CellContainer";
import { executeAction } from "../../../recoil/eventActions";
import { CreateElementActionEvent, DeleteElementActionEvent, updateElementAction } from "../../../recoil/actions";
import { addElementToParent, createDroppedElement, createElement } from "../../../helpers";
import { DisplayMode } from "../../../../types";
import { AfterDropElementActionEvent } from "../../../recoil/actions/afterDropElement";
import { createInitialPerDeviceSettingValue } from "../../elementSettings/elementSettingsUtils";

var cellPlugin = function cellPlugin() {
  var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var defaultSettings = ["pb-editor-page-element-style-settings-background", "pb-editor-page-element-style-settings-animation", "pb-editor-page-element-style-settings-border", "pb-editor-page-element-style-settings-shadow", "pb-editor-page-element-style-settings-padding", "pb-editor-page-element-style-settings-margin"];
  var elementType = kebabCase(args.elementType || "cell");
  return {
    type: "pb-editor-page-element",
    name: "pb-editor-page-element-".concat(elementType),
    elementType: elementType,
    settings: typeof args.settings === "function" ? args.settings(defaultSettings) : defaultSettings,
    canDelete: function canDelete() {
      return false;
    },
    create: function create() {
      var _options$data, _options$data$setting, _options$data$setting2;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var defaultValue = {
        type: elementType,
        elements: [],
        data: {
          settings: {
            margin: _objectSpread({}, createInitialPerDeviceSettingValue({
              top: "0px",
              right: "0px",
              bottom: "0px",
              left: "0px",
              advanced: true
            }, DisplayMode.DESKTOP)),
            padding: createInitialPerDeviceSettingValue({
              all: "0px"
            }, DisplayMode.DESKTOP),
            grid: {
              size: ((_options$data = options.data) === null || _options$data === void 0 ? void 0 : (_options$data$setting = _options$data.settings) === null || _options$data$setting === void 0 ? void 0 : (_options$data$setting2 = _options$data$setting.grid) === null || _options$data$setting2 === void 0 ? void 0 : _options$data$setting2.size) || 1
            }
          }
        }
      };
      return typeof args.create === "function" ? args.create(defaultValue) : defaultValue;
    },
    onReceived: function onReceived(_ref) {
      var source = _ref.source,
          position = _ref.position,
          target = _ref.target,
          state = _ref.state,
          meta = _ref.meta;
      var element = createDroppedElement(source, target);
      var parent = addElementToParent(element, target, position);
      var result = executeAction(state, meta, updateElementAction, {
        element: parent,
        history: true
      });
      result.actions.push(new AfterDropElementActionEvent({
        element: element
      }));

      if (source.id) {
        // Delete source element
        result.actions.push(new DeleteElementActionEvent({
          element: source
        }));
        return result;
      }

      result.actions.push(new CreateElementActionEvent({
        element: element,
        source: source
      }));
      return result;
    },
    render: function render(props) {
      return /*#__PURE__*/React.createElement(CellContainer, Object.assign({}, props, {
        elementId: props.element.id
      }));
    }
  };
}; // this is required because when saving cell element it cannot be without grid element


var saveActionPlugin = {
  type: "pb-editor-page-element-save-action",
  name: "pb-editor-page-element-save-action-cell",
  elementType: "cell",
  onSave: function onSave(element) {
    return createElement("grid", {
      data: {
        settings: {
          grid: {
            cellsType: "12"
          }
        }
      },
      elements: [_objectSpread(_objectSpread({}, element), {}, {
        data: _objectSpread(_objectSpread({}, element.data), {}, {
          settings: _objectSpread(_objectSpread({}, element.data.settings), {}, {
            grid: {
              size: "12"
            }
          })
        })
      })]
    });
  }
};
export default (function (args) {
  return [cellPlugin(args), saveActionPlugin];
});
//# sourceMappingURL=index.js.map