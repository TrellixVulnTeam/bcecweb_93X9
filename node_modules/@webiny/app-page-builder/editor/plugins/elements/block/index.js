import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import React from "react";
import kebabCase from "lodash/kebabCase";
import Block from "./Block";
import { CreateElementActionEvent, DeleteElementActionEvent, updateElementAction } from "../../../recoil/actions";
import { addElementToParent, createDroppedElement } from "../../../helpers";
import { DisplayMode } from "../../../../types";
import { AfterDropElementActionEvent } from "../../../recoil/actions/afterDropElement";
import { createInitialPerDeviceSettingValue } from "../../elementSettings/elementSettingsUtils";
export default (function () {
  var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var elementSettings = ["pb-editor-page-element-style-settings-background", "pb-editor-page-element-style-settings-animation", "pb-editor-page-element-style-settings-border", "pb-editor-page-element-style-settings-shadow", "pb-editor-page-element-style-settings-padding", "pb-editor-page-element-style-settings-margin", "pb-editor-page-element-style-settings-width", "pb-editor-page-element-style-settings-height", "pb-editor-page-element-style-settings-horizontal-align-flex", "pb-editor-page-element-style-settings-vertical-align", "pb-editor-page-element-settings-clone", "pb-editor-page-element-settings-delete"];
  var elementType = kebabCase(args.elementType || "block");
  return {
    name: "pb-editor-page-element-".concat(elementType),
    type: "pb-editor-page-element",
    elementType: elementType,
    settings: typeof args.settings === "function" ? args.settings(elementSettings) : elementSettings,
    create: function create() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var defaultValue = _objectSpread({
        type: this.elementType,
        elements: [],
        data: {
          settings: {
            width: createInitialPerDeviceSettingValue({
              value: "100%"
            }, DisplayMode.DESKTOP),
            margin: _objectSpread({}, createInitialPerDeviceSettingValue({
              top: "0px",
              right: "0px",
              bottom: "0px",
              left: "0px",
              advanced: true
            }, DisplayMode.DESKTOP)),
            padding: createInitialPerDeviceSettingValue({
              all: "10px"
            }, DisplayMode.DESKTOP),
            horizontalAlignFlex: createInitialPerDeviceSettingValue("center", DisplayMode.DESKTOP),
            verticalAlign: createInitialPerDeviceSettingValue("flex-start", DisplayMode.DESKTOP)
          }
        }
      }, options);

      return typeof args.create === "function" ? args.create(defaultValue) : defaultValue;
    },
    render: function render(props) {
      return /*#__PURE__*/React.createElement(Block, props);
    },
    // This callback is executed when another element is dropped on the drop zones with type "block"
    onReceived: function onReceived(_ref) {
      var source = _ref.source,
          target = _ref.target,
          _ref$position = _ref.position,
          position = _ref$position === void 0 ? null : _ref$position,
          state = _ref.state,
          meta = _ref.meta;
      var element = createDroppedElement(source, target);
      var block = addElementToParent(element, target, position);
      var result = updateElementAction(state, meta, {
        element: block,
        history: true
      });
      result.actions.push(new AfterDropElementActionEvent({
        element: element
      }));

      if (source.id) {
        // Delete source element
        result.actions.push(new DeleteElementActionEvent({
          element: source
        }));
        return result;
      }

      result.actions.push(new CreateElementActionEvent({
        element: element,
        source: source
      }));
      return result;
    }
  };
});
//# sourceMappingURL=index.js.map