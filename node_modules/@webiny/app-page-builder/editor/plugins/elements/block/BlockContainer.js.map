{"version":3,"sources":["../../../../../src/editor/plugins/elements/block/BlockContainer.tsx"],"names":["React","useRecoilValue","css","kebabCase","IconButton","DropZone","Element","useEventActionHandler","DropElementActionEvent","TogglePluginActionEvent","elementByIdSelector","uiAtom","highlightElementAtom","BlockContainerInnerWrapper","addIcon","color","transition","transform","display","BlockContainer","elementStyle","elementAttributes","customClasses","combineClassNames","elementId","displayMode","handler","element","highlightedElement","id","path","type","elements","containerStyle","width","alignItems","justifyContent","onAddClick","trigger","name","params","dropElementAction","source","position","target","totalElements","length","map","childId","index","memo"],"mappings":"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","sourcesContent":["import React, { CSSProperties } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { css } from \"emotion\";\nimport kebabCase from \"lodash/kebabCase\";\nimport { IconButton } from \"@webiny/ui/Button\";\nimport DropZone from \"../../../components/DropZone\";\nimport Element from \"../../../components/Element\";\nimport { DragObjectWithTypeWithTarget } from \"../../../components/Droppable\";\nimport { useEventActionHandler } from \"../../../hooks/useEventActionHandler\";\nimport { DropElementActionEvent, TogglePluginActionEvent } from \"../../../recoil/actions\";\nimport { elementByIdSelector, uiAtom, highlightElementAtom } from \"../../../recoil/modules\";\nimport { ReactComponent as AddCircleOutline } from \"../../../assets/icons/baseline-add_circle-24px.svg\";\nimport BlockContainerInnerWrapper from \"./BlockContainerInnerWrapper\";\n\nconst addIcon = css({\n    color: \"var(--mdc-theme-secondary)\",\n    transition: \"transform 0.2s\",\n    \"&:hover\": {\n        transform: \"scale(1.3)\"\n    },\n    \"&::before, &::after\": {\n        display: \"none\"\n    }\n});\n\ntype BlockContainerPropsType = {\n    combineClassNames: (...classes: string[]) => string;\n    elementStyle: CSSProperties;\n    elementAttributes: { [key: string]: string };\n    customClasses: string[];\n    elementId: string;\n};\nconst BlockContainer: React.FunctionComponent<BlockContainerPropsType> = ({\n    elementStyle,\n    elementAttributes,\n    customClasses,\n    combineClassNames,\n    elementId\n}) => {\n    const { displayMode } = useRecoilValue(uiAtom);\n    const handler = useEventActionHandler();\n    const element = useRecoilValue(elementByIdSelector(elementId));\n    const highlightedElement = useRecoilValue(highlightElementAtom);\n    const { id, path, type, elements } = element;\n\n    const containerStyle = elementStyle;\n    // Use per-device style\n    const width = elementStyle[`--${kebabCase(displayMode)}-width`];\n    /**\n     * We're swapping \"justifyContent\" & \"alignItems\" value here because\n     * \".webiny-pb-layout-block\" has \"flex-direction: column\"\n     */\n    const alignItems = elementStyle[`--${kebabCase(displayMode)}-justify-content`];\n    const justifyContent = elementStyle[`--${kebabCase(displayMode)}-align-items`];\n\n    const onAddClick = () => {\n        handler.trigger(\n            new TogglePluginActionEvent({\n                name: \"pb-editor-toolbar-add-element\",\n                params: { id, path, type }\n            })\n        );\n    };\n\n    const dropElementAction = (source: DragObjectWithTypeWithTarget, position: number) => {\n        handler.trigger(\n            new DropElementActionEvent({\n                source,\n                target: {\n                    id,\n                    type,\n                    position\n                }\n            })\n        );\n    };\n\n    const totalElements = elements.length;\n    return (\n        <div\n            style={{ width: \"100%\", display: \"flex\" }}\n            className={\"webiny-pb-layout-block-container \" + css(containerStyle as any)}\n            {...elementAttributes}\n        >\n            <div\n                style={{\n                    width,\n                    justifyContent,\n                    alignItems\n                }}\n                className={combineClassNames(...customClasses)}\n            >\n                {totalElements === 0 && (\n                    <DropZone.Center\n                        id={id}\n                        isHighlighted={highlightedElement === id}\n                        type={type}\n                        onDrop={source => dropElementAction(source, 0)}\n                    >\n                        <IconButton\n                            className={addIcon + \" addIcon\"}\n                            icon={<AddCircleOutline />}\n                            onClick={onAddClick}\n                        />\n                    </DropZone.Center>\n                )}\n                {elements.map((childId: string, index) => (\n                    <BlockContainerInnerWrapper\n                        key={childId}\n                        elementId={childId}\n                        displayMode={displayMode}\n                    >\n                        <DropZone.Above\n                            type={type}\n                            onDrop={source => dropElementAction(source, index)}\n                        />\n                        <Element key={childId} id={childId} />\n                        {index === totalElements - 1 && (\n                            <DropZone.Below\n                                type={type}\n                                onDrop={source => dropElementAction(source, totalElements)}\n                            />\n                        )}\n                    </BlockContainerInnerWrapper>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default React.memo(BlockContainer);\n"],"file":"BlockContainer.js"}