import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import React from "react";
import { useRecoilValue } from "recoil";
import { css } from "emotion";
import kebabCase from "lodash/kebabCase";
import { IconButton } from "@webiny/ui/Button";
import DropZone from "../../../components/DropZone";
import Element from "../../../components/Element";
import { useEventActionHandler } from "../../../hooks/useEventActionHandler";
import { DropElementActionEvent, TogglePluginActionEvent } from "../../../recoil/actions";
import { elementByIdSelector, uiAtom, highlightElementAtom } from "../../../recoil/modules";
import { ReactComponent as AddCircleOutline } from "@svgr/webpack!../../../assets/icons/baseline-add_circle-24px.svg";
import BlockContainerInnerWrapper from "./BlockContainerInnerWrapper";
var addIcon = /*#__PURE__*/css({
  color: "var(--mdc-theme-secondary)",
  transition: "transform 0.2s",
  "&:hover": {
    transform: "scale(1.3)"
  },
  "&::before, &::after": {
    display: "none"
  }
}, "label:addIcon;");

var BlockContainer = function BlockContainer(_ref) {
  var elementStyle = _ref.elementStyle,
      elementAttributes = _ref.elementAttributes,
      customClasses = _ref.customClasses,
      combineClassNames = _ref.combineClassNames,
      elementId = _ref.elementId;

  var _useRecoilValue = useRecoilValue(uiAtom),
      displayMode = _useRecoilValue.displayMode;

  var handler = useEventActionHandler();
  var element = useRecoilValue(elementByIdSelector(elementId));
  var highlightedElement = useRecoilValue(highlightElementAtom);
  var id = element.id,
      path = element.path,
      type = element.type,
      elements = element.elements;
  var containerStyle = elementStyle; // Use per-device style

  var width = elementStyle["--".concat(kebabCase(displayMode), "-width")];
  /**
   * We're swapping "justifyContent" & "alignItems" value here because
   * ".webiny-pb-layout-block" has "flex-direction: column"
   */

  var alignItems = elementStyle["--".concat(kebabCase(displayMode), "-justify-content")];
  var justifyContent = elementStyle["--".concat(kebabCase(displayMode), "-align-items")];

  var onAddClick = function onAddClick() {
    handler.trigger(new TogglePluginActionEvent({
      name: "pb-editor-toolbar-add-element",
      params: {
        id: id,
        path: path,
        type: type
      }
    }));
  };

  var dropElementAction = function dropElementAction(source, position) {
    handler.trigger(new DropElementActionEvent({
      source: source,
      target: {
        id: id,
        type: type,
        position: position
      }
    }));
  };

  var totalElements = elements.length;
  return /*#__PURE__*/React.createElement("div", Object.assign({
    style: {
      width: "100%",
      display: "flex"
    },
    className: "webiny-pb-layout-block-container " + /*#__PURE__*/css(containerStyle, "label:BlockContainer;")
  }, elementAttributes), /*#__PURE__*/React.createElement("div", {
    style: {
      width: width,
      justifyContent: justifyContent,
      alignItems: alignItems
    },
    className: combineClassNames.apply(void 0, _toConsumableArray(customClasses))
  }, totalElements === 0 && /*#__PURE__*/React.createElement(DropZone.Center, {
    id: id,
    isHighlighted: highlightedElement === id,
    type: type,
    onDrop: function onDrop(source) {
      return dropElementAction(source, 0);
    }
  }, /*#__PURE__*/React.createElement(IconButton, {
    className: addIcon + " addIcon",
    icon: /*#__PURE__*/React.createElement(AddCircleOutline, null),
    onClick: onAddClick
  })), elements.map(function (childId, index) {
    return /*#__PURE__*/React.createElement(BlockContainerInnerWrapper, {
      key: childId,
      elementId: childId,
      displayMode: displayMode
    }, /*#__PURE__*/React.createElement(DropZone.Above, {
      type: type,
      onDrop: function onDrop(source) {
        return dropElementAction(source, index);
      }
    }), /*#__PURE__*/React.createElement(Element, {
      key: childId,
      id: childId
    }), index === totalElements - 1 && /*#__PURE__*/React.createElement(DropZone.Below, {
      type: type,
      onDrop: function onDrop(source) {
        return dropElementAction(source, totalElements);
      }
    }));
  })));
};

export default /*#__PURE__*/React.memo(BlockContainer);
//# sourceMappingURL=BlockContainer.js.map