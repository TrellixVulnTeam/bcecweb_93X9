{"version":3,"sources":["../../../../../src/editor/plugins/elements/button/ButtonSettings.tsx"],"names":["React","useCallback","useRecoilValue","css","usePageBuilder","activeElementAtom","elementWithChildrenByIdSelector","IconPickerComponent","Accordion","BaseColorPicker","ContentWrapper","Wrapper","InputField","SelectField","updateButtonElementIcon","useUpdateHandlers","classes","gridClass","padding","margin","marginBottom","row","display","width","background","backgroundColor","height","ButtonSettings","defaultAccordionValue","activeElementId","element","theme","elements","button","types","defaultType","name","data","type","icon","dataNamespace","postModifyElement","getUpdateValue","getUpdatePreview","updateType","value","updateIcon","id","updateIconColor","updateIconColorPreview","updateIconWidth","updateIconPosition","removeIcon","map","className","label","color","position"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,SAASC,cAAT,QAA+B,QAA/B;AACA,SAASC,GAAT,QAAoB,SAApB;AACA,SAASC,cAAT;AACA,SAASC,iBAAT,EAA4BC,+BAA5B;AAEA;AACA,OAAOC,mBAAP;AACA,OAAOC,SAAP;AACA,SAASC,eAAT;AACA,SAASC,cAAT;AACA,OAAOC,OAAP;AACA,OAAOC,UAAP;AACA,OAAOC,WAAP;AACA,SAASC,uBAAT;AACA,OAAOC,iBAAP;AAEA,IAAMC,OAAO,GAAG;AACZC,EAAAA,SAAS,eAAEd,GAAG,CAAC;AACX,yBAAqB;AACjBe,MAAAA,OAAO,EAAE,CADQ;AAEjBC,MAAAA,MAAM,EAAE,CAFS;AAGjBC,MAAAA,YAAY,EAAE;AAHG;AADV,GAAD,qBADF;AAQZC,EAAAA,GAAG,eAAElB,GAAG,CAAC;AACLmB,IAAAA,OAAO,EAAE,MADJ;AAEL,eAAW;AACPC,MAAAA,KAAK,EAAE,KADA;AAEPC,MAAAA,UAAU,EAAE;AAFL,KAFN;AAOL,8BAA0B;AACtBD,MAAAA,KAAK,EAAE,MADe;AAEtBE,MAAAA,eAAe,EAAE,sCAFK;AAGtB,eAAS;AACLF,QAAAA,KAAK,EAAE,EADF;AAELG,QAAAA,MAAM,EAAE;AAFH;AAHa,KAPrB;AAeL,+BAA2B;AACvBH,MAAAA,KAAK,EAAE,MADgB;AAEvBE,MAAAA,eAAe,EAAE,sCAFM;AAGvB,iBAAW;AACPF,QAAAA,KAAK,EAAE;AADA;AAHY;AAftB,GAAD;AARI,CAAhB;;AAiCA,IAAMI,cAAwF,GAAG,SAA3FA,cAA2F,OAE3F;AAAA;;AAAA,MADFC,qBACE,QADFA,qBACE;AACF,MAAMC,eAAe,GAAG3B,cAAc,CAACG,iBAAD,CAAtC;AACA,MAAMyB,OAAO,GAAG5B,cAAc,CAACI,+BAA+B,CAACuB,eAAD,CAAhC,CAA9B;;AACA,wBAAkBzB,cAAc,EAAhC;AAAA,MAAQ2B,KAAR,mBAAQA,KAAR;;AACA,cAAkB,CAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,+BAAAA,KAAK,CAAEC,QAAP,oEAAiBC,MAAjB,KAA2B,EAA7C;AAAA,MAAQC,KAAR,SAAQA,KAAR;;AACA,MAAMC,WAAW,GAAG,CAAAD,KAAK,SAAL,IAAAA,KAAK,WAAL,uBAAAA,KAAK,CAAG,CAAH,CAAL,oDAAYE,IAAZ,KAAoB,EAAxC;;AACA,cAAqDN,OAAO,CAACO,IAAR,IAAgB,EAArE;AAAA,yBAAQC,IAAR;AAAA,MAAQA,IAAR,2BAAeH,WAAf;AAAA,yBAA4BI,IAA5B;AAAA,MAA4BA,IAA5B,2BAAmC;AAAEhB,IAAAA,KAAK,EAAE;AAAT,GAAnC;;AAEA,2BAA6CR,iBAAiB,CAAC;AAC3De,IAAAA,OAAO,EAAPA,OAD2D;AAE3DU,IAAAA,aAAa,EAAE,MAF4C;AAG3DC,IAAAA,iBAAiB,EAAE3B;AAHwC,GAAD,CAA9D;AAAA,MAAQ4B,cAAR,sBAAQA,cAAR;AAAA,MAAwBC,gBAAxB,sBAAwBA,gBAAxB;;AAMA,MAAMC,UAAU,GAAG3C,WAAW,CAAC,UAAA4C,KAAK;AAAA,WAAIH,cAAc,CAAC,MAAD,CAAd,CAAuBG,KAAvB,CAAJ;AAAA,GAAN,EAAyC,CAACH,cAAD,CAAzC,CAA9B;AACA,MAAMI,UAAU,GAAG7C,WAAW,CAAC,UAAA4C,KAAK;AAAA,WAAIH,cAAc,CAAC,SAAD,CAAd,CAA0BG,KAA1B,aAA0BA,KAA1B,uBAA0BA,KAAK,CAAEE,EAAjC,CAAJ;AAAA,GAAN,EAAgD,CAACL,cAAD,CAAhD,CAA9B;AACA,MAAMM,eAAe,GAAG/C,WAAW,CAC/B,UAAC4C,KAAD;AAAA,WAAmBH,cAAc,CAAC,YAAD,CAAd,CAA6BG,KAA7B,CAAnB;AAAA,GAD+B,EAE/B,CAACH,cAAD,CAF+B,CAAnC;AAIA,MAAMO,sBAAsB,GAAGhD,WAAW,CACtC,UAAC4C,KAAD;AAAA,WAAmBF,gBAAgB,CAAC,YAAD,CAAhB,CAA+BE,KAA/B,CAAnB;AAAA,GADsC,EAEtC,CAACF,gBAAD,CAFsC,CAA1C;AAIA,MAAMO,eAAe,GAAGjD,WAAW,CAC/B,UAAC4C,KAAD;AAAA,WAAmBH,cAAc,CAAC,YAAD,CAAd,CAA6BG,KAA7B,CAAnB;AAAA,GAD+B,EAE/B,CAACH,cAAD,CAF+B,CAAnC;AAIA,MAAMS,kBAAkB,GAAGlD,WAAW,CAClC,UAAC4C,KAAD;AAAA,WAAmBH,cAAc,CAAC,eAAD,CAAd,CAAgCG,KAAhC,CAAnB;AAAA,GADkC,EAElC,CAACH,cAAD,CAFkC,CAAtC;AAIA,MAAMU,UAAU,GAAGnD,WAAW,CAAC;AAAA,WAAMyC,cAAc,CAAC,MAAD,CAAd,CAAuB;AAAEK,MAAAA,EAAE,EAAE;AAAN,KAAvB,CAAN;AAAA,GAAD,EAA6C,CAACL,cAAD,CAA7C,CAA9B;AAEA,sBACI,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAE,QAAlB;AAA4B,IAAA,YAAY,EAAEd;AAA1C,kBACI,oBAAC,cAAD;AAAgB,IAAA,SAAS,EAAE;AAA3B,kBACI,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAE,MAAhB;AAAwB,IAAA,kBAAkB,EAAEZ,OAAO,CAACC;AAApD,kBACI,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAEqB,IAApB;AAA0B,IAAA,QAAQ,EAAEM;AAApC,KACKV,KAAK,CAACmB,GAAN,CAAU,UAAAf,IAAI;AAAA,wBACX;AAAQ,MAAA,GAAG,EAAEA,IAAI,CAACgB,SAAlB;AAA6B,MAAA,KAAK,EAAEhB,IAAI,CAACgB;AAAzC,OACKhB,IAAI,CAACiB,KADV,CADW;AAAA,GAAd,CADL,CADJ,CADJ,eAUI,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAE,MAAhB;AAAwB,IAAA,kBAAkB,EAAEvC,OAAO,CAACC;AAApD,kBACI,oBAAC,mBAAD;AACI,IAAA,gBAAgB,EAAE,qBADtB;AAEI,IAAA,KAAK,EAAEsB,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEQ,EAFjB;AAGI,IAAA,QAAQ,EAAED,UAHd;AAII,IAAA,UAAU,EAAEM,UAJhB;AAKI,IAAA,YAAY,EAAE;AALlB,IADJ,CAVJ,eAmBI,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAE,YAAhB;AAA8B,IAAA,kBAAkB,EAAEpC,OAAO,CAACC;AAA1D,kBACI,oBAAC,eAAD;AACI,IAAA,gBAAgB,EAAE,sBADtB;AAEI,IAAA,KAAK,EAAEsB,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEiB,KAFjB;AAGI,IAAA,WAAW,EAAER,eAHjB;AAII,IAAA,aAAa,EAAEC;AAJnB,IADJ,CAnBJ,eA2BI,oBAAC,OAAD;AACI,IAAA,KAAK,EAAE,YADX;AAEI,IAAA,kBAAkB,EAAEjC,OAAO,CAACC,SAFhC;AAGI,IAAA,YAAY,EAAE,CAHlB;AAII,IAAA,aAAa,EAAE;AAJnB,kBAMI,oBAAC,UAAD;AACI,IAAA,WAAW,EAAE,OADjB;AAEI,IAAA,KAAK,EAAEsB,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEhB,KAFjB;AAGI,IAAA,QAAQ,EAAE2B;AAHd,IANJ,CA3BJ,eAuCI,oBAAC,OAAD;AACI,IAAA,KAAK,EAAE,eADX;AAEI,IAAA,kBAAkB,EAAElC,OAAO,CAACC,SAFhC;AAGI,IAAA,YAAY,EAAE,CAHlB;AAII,IAAA,aAAa,EAAE;AAJnB,kBAMI,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAE,CAAAsB,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEkB,QAAN,KAAkB,MAAtC;AAA8C,IAAA,QAAQ,EAAEN;AAAxD,kBACI;AAAQ,IAAA,KAAK,EAAE;AAAf,YADJ,eAEI;AAAQ,IAAA,KAAK,EAAE;AAAf,aAFJ,eAGI;AAAQ,IAAA,KAAK,EAAE;AAAf,WAHJ,eAII;AAAQ,IAAA,KAAK,EAAE;AAAf,cAJJ,CANJ,CAvCJ,CADJ,CADJ;AAyDH,CA7FD;;AA+FA,eAAexB,cAAf","sourcesContent":["import React, { useCallback } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { css } from \"emotion\";\nimport { usePageBuilder } from \"../../../../hooks/usePageBuilder\";\nimport { activeElementAtom, elementWithChildrenByIdSelector } from \"../../../recoil/modules\";\nimport { PbEditorPageElementSettingsRenderComponentProps } from \"../../../../types\";\n// Components\nimport IconPickerComponent from \"../../../components/IconPicker\";\nimport Accordion from \"../../elementSettings/components/Accordion\";\nimport { BaseColorPicker } from \"../../elementSettings/components/ColorPicker\";\nimport { ContentWrapper } from \"../../elementSettings/components/StyledComponents\";\nimport Wrapper from \"../../elementSettings/components/Wrapper\";\nimport InputField from \"../../elementSettings/components/InputField\";\nimport SelectField from \"../../elementSettings/components/SelectField\";\nimport { updateButtonElementIcon } from \"../utils/iconUtils\";\nimport useUpdateHandlers from \"../../elementSettings/useUpdateHandlers\";\n\nconst classes = {\n    gridClass: css({\n        \"&.mdc-layout-grid\": {\n            padding: 0,\n            margin: 0,\n            marginBottom: 24\n        }\n    }),\n    row: css({\n        display: \"flex\",\n        \"& > div\": {\n            width: \"50%\",\n            background: \"beige\"\n        },\n\n        \"& .icon-picker-handler\": {\n            width: \"100%\",\n            backgroundColor: \"var(--webiny-theme-color-background)\",\n            \"& svg\": {\n                width: 24,\n                height: 24\n            }\n        },\n        \"& .color-picker-handler\": {\n            width: \"100%\",\n            backgroundColor: \"var(--webiny-theme-color-background)\",\n            \"& > div\": {\n                width: \"100%\"\n            }\n        }\n    })\n};\n\nconst ButtonSettings: React.FunctionComponent<PbEditorPageElementSettingsRenderComponentProps> = ({\n    defaultAccordionValue\n}) => {\n    const activeElementId = useRecoilValue(activeElementAtom);\n    const element = useRecoilValue(elementWithChildrenByIdSelector(activeElementId));\n    const { theme } = usePageBuilder();\n    const { types } = theme?.elements?.button || [];\n    const defaultType = types?.[0]?.name || \"\";\n    const { type = defaultType, icon = { width: 36 } } = element.data || {};\n\n    const { getUpdateValue, getUpdatePreview } = useUpdateHandlers({\n        element,\n        dataNamespace: \"data\",\n        postModifyElement: updateButtonElementIcon\n    });\n\n    const updateType = useCallback(value => getUpdateValue(\"type\")(value), [getUpdateValue]);\n    const updateIcon = useCallback(value => getUpdateValue(\"icon.id\")(value?.id), [getUpdateValue]);\n    const updateIconColor = useCallback(\n        (value: string) => getUpdateValue(\"icon.color\")(value),\n        [getUpdateValue]\n    );\n    const updateIconColorPreview = useCallback(\n        (value: string) => getUpdatePreview(\"icon.color\")(value),\n        [getUpdatePreview]\n    );\n    const updateIconWidth = useCallback(\n        (value: string) => getUpdateValue(\"icon.width\")(value),\n        [getUpdateValue]\n    );\n    const updateIconPosition = useCallback(\n        (value: string) => getUpdateValue(\"icon.position\")(value),\n        [getUpdateValue]\n    );\n    const removeIcon = useCallback(() => getUpdateValue(\"icon\")({ id: null }), [getUpdateValue]);\n\n    return (\n        <Accordion title={\"Button\"} defaultValue={defaultAccordionValue}>\n            <ContentWrapper direction={\"column\"}>\n                <Wrapper label={\"Type\"} containerClassName={classes.gridClass}>\n                    <SelectField value={type} onChange={updateType}>\n                        {types.map(type => (\n                            <option key={type.className} value={type.className}>\n                                {type.label}\n                            </option>\n                        ))}\n                    </SelectField>\n                </Wrapper>\n                <Wrapper label={\"Icon\"} containerClassName={classes.gridClass}>\n                    <IconPickerComponent\n                        handlerClassName={\"icon-picker-handler\"}\n                        value={icon?.id}\n                        onChange={updateIcon}\n                        removeIcon={removeIcon}\n                        useInSidebar={true}\n                    />\n                </Wrapper>\n                <Wrapper label={\"Icon color\"} containerClassName={classes.gridClass}>\n                    <BaseColorPicker\n                        handlerClassName={\"color-picker-handler\"}\n                        value={icon?.color}\n                        updateValue={updateIconColor}\n                        updatePreview={updateIconColorPreview}\n                    />\n                </Wrapper>\n                <Wrapper\n                    label={\"Icon width\"}\n                    containerClassName={classes.gridClass}\n                    leftCellSpan={8}\n                    rightCellSpan={4}\n                >\n                    <InputField\n                        placeholder={\"Width\"}\n                        value={icon?.width}\n                        onChange={updateIconWidth}\n                    />\n                </Wrapper>\n                <Wrapper\n                    label={\"Icon position\"}\n                    containerClassName={classes.gridClass}\n                    leftCellSpan={8}\n                    rightCellSpan={4}\n                >\n                    <SelectField value={icon?.position || \"left\"} onChange={updateIconPosition}>\n                        <option value={\"left\"}>Left</option>\n                        <option value={\"right\"}>Right</option>\n                        <option value={\"top\"}>Top</option>\n                        <option value={\"bottom\"}>Bottom</option>\n                    </SelectField>\n                </Wrapper>\n            </ContentWrapper>\n        </Accordion>\n    );\n};\n\nexport default ButtonSettings;\n"],"file":"ButtonSettings.js"}