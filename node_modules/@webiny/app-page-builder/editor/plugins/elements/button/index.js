import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import React from "react";
import { css } from "emotion";
import kebabCase from "lodash/kebabCase";
import { DisplayMode } from "../../../../types";
import { createInitialPerDeviceSettingValue } from "../../elementSettings/elementSettingsUtils";
import ButtonSettings from "./ButtonSettings";
import Button from "./Button";
var buttonWrapper = /*#__PURE__*/css({
  display: "flex",
  justifyContent: "center"
}, "label:buttonWrapper;");

var buttonElementPluginsFactory = function buttonElementPluginsFactory() {
  var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var defaultSettings = ["pb-editor-page-element-style-settings-button", "pb-editor-page-element-style-settings-link", "pb-editor-page-element-style-settings-horizontal-align-flex", "pb-editor-page-element-style-settings-margin", "pb-editor-page-element-settings-clone", "pb-editor-page-element-settings-delete"];
  var defaultToolbar = {
    title: "Button",
    group: "pb-editor-element-group-basic",
    preview: function preview() {
      return /*#__PURE__*/React.createElement("div", {
        className: buttonWrapper
      }, /*#__PURE__*/React.createElement("button", {
        className: "webiny-pb-page-element-button"
      }, "Click me"));
    }
  };
  var elementType = kebabCase(args.elementType || "button");
  return [{
    name: "pb-editor-page-element-".concat(elementType),
    type: "pb-editor-page-element",
    elementType: elementType,
    toolbar: typeof args.toolbar === "function" ? args.toolbar(defaultToolbar) : defaultToolbar,
    settings: typeof args.settings === "function" ? args.settings(defaultSettings) : defaultSettings,
    target: ["cell", "block"],
    create: function create(options) {
      var defaultValue = _objectSpread({
        type: this.elementType,
        elements: [],
        data: {
          buttonText: "Click me",
          settings: {
            margin: createInitialPerDeviceSettingValue({
              all: "0px"
            }, DisplayMode.DESKTOP),
            horizontalAlignFlex: createInitialPerDeviceSettingValue("center", DisplayMode.DESKTOP)
          }
        }
      }, options);

      return typeof args.create === "function" ? args.create(defaultValue) : defaultValue;
    },
    render: function render(_ref) {
      var element = _ref.element;
      return /*#__PURE__*/React.createElement(Button, {
        element: element
      });
    }
  }, {
    name: "pb-editor-page-element-style-settings-button",
    type: "pb-editor-page-element-style-settings",
    render: function render() {
      return /*#__PURE__*/React.createElement(ButtonSettings, null);
    }
  }];
};

export default buttonElementPluginsFactory;
//# sourceMappingURL=index.js.map