import React, { useCallback, useRef } from "react";
import { useRecoilValue } from "recoil";
import { css } from "emotion";
import classNames from "classnames";
import kebabCase from "lodash/kebabCase";
import merge from "lodash/merge";
import set from "lodash/set";
import { useEventActionHandler } from "../../../hooks/useEventActionHandler";
import { UpdateElementActionEvent } from "../../../recoil/actions";
import { elementByIdSelector, uiAtom } from "../../../recoil/modules";
import SimpleEditableText from "./SimpleEditableText";
var buttonEditStyle = /*#__PURE__*/css({
  "&.button__content--empty": {
    minWidth: 64,
    lineHeight: "20px",
    marginTop: "-3px",
    marginBottom: "-3px"
  }
}, "label:buttonEditStyle;");
var DATA_NAMESPACE = "data.buttonText";

var ButtonContainer = function ButtonContainer(_ref) {
  var getAllClasses = _ref.getAllClasses,
      elementStyle = _ref.elementStyle,
      elementAttributes = _ref.elementAttributes,
      elementId = _ref.elementId;
  var eventActionHandler = useEventActionHandler();
  var uiAtomValue = useRecoilValue(uiAtom);
  var element = useRecoilValue(elementByIdSelector(elementId));

  var _ref2 = element.data || {},
      _ref2$type = _ref2.type,
      type = _ref2$type === void 0 ? "default" : _ref2$type,
      _ref2$icon = _ref2.icon,
      icon = _ref2$icon === void 0 ? {} : _ref2$icon,
      buttonText = _ref2.buttonText;

  var defaultValue = typeof buttonText === "string" ? buttonText : "Click me";
  var value = useRef(defaultValue);

  var _ref3 = icon || {},
      _ref3$svg = _ref3.svg,
      svg = _ref3$svg === void 0 ? null : _ref3$svg,
      _ref3$position = _ref3.position,
      position = _ref3$position === void 0 ? "left" : _ref3$position; // Use per-device style


  var justifyContent = elementStyle["--".concat(kebabCase(uiAtomValue.displayMode), "-justify-content")];
  var onChange = useCallback(function (received) {
    value.current = received;
  }, [element.id]);
  var onBlur = useCallback(function () {
    if (value.current === defaultValue) {
      return;
    }

    var newElement = merge({}, element, set({
      elements: []
    }, DATA_NAMESPACE, value.current));
    eventActionHandler.trigger(new UpdateElementActionEvent({
      element: newElement,
      history: true
    }));
  }, [elementId, element.data]);
  return /*#__PURE__*/React.createElement("div", {
    style: {
      display: "flex",
      justifyContent: justifyContent
    }
  }, /*#__PURE__*/React.createElement("a", Object.assign({
    href: null,
    style: elementStyle
  }, elementAttributes, {
    className: getAllClasses("webiny-pb-page-element-button", "webiny-pb-page-element-button--" + type, "webiny-pb-page-element-button__icon--" + position)
  }), svg && /*#__PURE__*/React.createElement("span", {
    dangerouslySetInnerHTML: {
      __html: svg
    }
  }), /*#__PURE__*/React.createElement(SimpleEditableText, {
    className: classNames(buttonEditStyle, {
      "button__content--empty": !value.current
    }),
    value: value.current,
    onChange: onChange,
    onBlur: onBlur
  })));
};

export default ButtonContainer;
//# sourceMappingURL=ButtonContainer.js.map