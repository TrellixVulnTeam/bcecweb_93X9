{"version":3,"sources":["../../../../../src/editor/plugins/elements/button/ButtonContainer.tsx"],"names":["React","useCallback","useRef","useRecoilValue","css","classNames","kebabCase","merge","set","useEventActionHandler","UpdateElementActionEvent","elementByIdSelector","uiAtom","SimpleEditableText","buttonEditStyle","minWidth","lineHeight","marginTop","marginBottom","DATA_NAMESPACE","ButtonContainer","getAllClasses","elementStyle","elementAttributes","elementId","eventActionHandler","uiAtomValue","element","data","type","icon","buttonText","defaultValue","value","svg","position","justifyContent","displayMode","onChange","received","current","id","onBlur","newElement","elements","trigger","history","display","__html"],"mappings":"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","sourcesContent":["import React, { CSSProperties, useCallback, useRef } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { css } from \"emotion\";\nimport classNames from \"classnames\";\nimport kebabCase from \"lodash/kebabCase\";\nimport merge from \"lodash/merge\";\nimport set from \"lodash/set\";\nimport { PbEditorElement } from \"../../../../types\";\nimport { useEventActionHandler } from \"../../../hooks/useEventActionHandler\";\nimport { UpdateElementActionEvent } from \"../../../recoil/actions\";\nimport { elementByIdSelector, uiAtom } from \"../../../recoil/modules\";\nimport SimpleEditableText from \"./SimpleEditableText\";\n\nconst buttonEditStyle = css({\n    \"&.button__content--empty\": {\n        minWidth: 64,\n        lineHeight: \"20px\",\n        marginTop: \"-3px\",\n        marginBottom: \"-3px\"\n    }\n});\n\nconst DATA_NAMESPACE = \"data.buttonText\";\ntype ButtonContainerPropsType = {\n    getAllClasses: (...classes: string[]) => string;\n    elementStyle: CSSProperties;\n    elementAttributes: { [key: string]: string };\n    elementId: string;\n};\nconst ButtonContainer: React.FunctionComponent<ButtonContainerPropsType> = ({\n    getAllClasses,\n    elementStyle,\n    elementAttributes,\n    elementId\n}) => {\n    const eventActionHandler = useEventActionHandler();\n    const uiAtomValue = useRecoilValue(uiAtom);\n    const element = useRecoilValue(elementByIdSelector(elementId));\n    const { type = \"default\", icon = {}, buttonText } = element.data || {};\n    const defaultValue = typeof buttonText === \"string\" ? buttonText : \"Click me\";\n    const value = useRef<string>(defaultValue);\n\n    const { svg = null, position = \"left\" } = icon || {};\n    // Use per-device style\n    const justifyContent = elementStyle[`--${kebabCase(uiAtomValue.displayMode)}-justify-content`];\n\n    const onChange = useCallback(\n        (received: string) => {\n            value.current = received;\n        },\n        [element.id]\n    );\n\n    const onBlur = useCallback(() => {\n        if (value.current === defaultValue) {\n            return;\n        }\n\n        const newElement: PbEditorElement = merge(\n            {},\n            element,\n            set({ elements: [] }, DATA_NAMESPACE, value.current)\n        );\n\n        eventActionHandler.trigger(\n            new UpdateElementActionEvent({\n                element: newElement,\n                history: true\n            })\n        );\n    }, [elementId, element.data]);\n\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                justifyContent\n            }}\n        >\n            <a\n                href={null}\n                style={elementStyle}\n                {...elementAttributes}\n                className={getAllClasses(\n                    \"webiny-pb-page-element-button\",\n                    \"webiny-pb-page-element-button--\" + type,\n                    \"webiny-pb-page-element-button__icon--\" + position\n                )}\n            >\n                {svg && <span dangerouslySetInnerHTML={{ __html: svg }} />}\n                <SimpleEditableText\n                    className={classNames(buttonEditStyle, {\n                        \"button__content--empty\": !value.current\n                    })}\n                    value={value.current}\n                    onChange={onChange}\n                    onBlur={onBlur}\n                />\n            </a>\n        </div>\n    );\n};\n\nexport default ButtonContainer;\n"],"file":"ButtonContainer.js"}