import React, { useCallback } from "react";
import { useRecoilValue } from "recoil";
import { css } from "emotion";
import { usePageBuilder } from "../../../../hooks/usePageBuilder";
import { activeElementAtom, elementWithChildrenByIdSelector } from "../../../recoil/modules";
// Components
import IconPickerComponent from "../../../components/IconPicker";
import Accordion from "../../elementSettings/components/Accordion";
import { BaseColorPicker } from "../../elementSettings/components/ColorPicker";
import { ContentWrapper } from "../../elementSettings/components/StyledComponents";
import Wrapper from "../../elementSettings/components/Wrapper";
import InputField from "../../elementSettings/components/InputField";
import SelectField from "../../elementSettings/components/SelectField";
import { updateButtonElementIcon } from "../utils/iconUtils";
import useUpdateHandlers from "../../elementSettings/useUpdateHandlers";
var classes = {
  gridClass: /*#__PURE__*/css({
    "&.mdc-layout-grid": {
      padding: 0,
      margin: 0,
      marginBottom: 24
    }
  }, "label:gridClass;"),
  row: /*#__PURE__*/css({
    display: "flex",
    "& > div": {
      width: "50%",
      background: "beige"
    },
    "& .icon-picker-handler": {
      width: "100%",
      backgroundColor: "var(--webiny-theme-color-background)",
      "& svg": {
        width: 24,
        height: 24
      }
    },
    "& .color-picker-handler": {
      width: "100%",
      backgroundColor: "var(--webiny-theme-color-background)",
      "& > div": {
        width: "100%"
      }
    }
  }, "label:row;")
};

var ButtonSettings = function ButtonSettings(_ref) {
  var _theme$elements, _types$;

  var defaultAccordionValue = _ref.defaultAccordionValue;
  var activeElementId = useRecoilValue(activeElementAtom);
  var element = useRecoilValue(elementWithChildrenByIdSelector(activeElementId));

  var _usePageBuilder = usePageBuilder(),
      theme = _usePageBuilder.theme;

  var _ref2 = (theme === null || theme === void 0 ? void 0 : (_theme$elements = theme.elements) === null || _theme$elements === void 0 ? void 0 : _theme$elements.button) || [],
      types = _ref2.types;

  var defaultType = (types === null || types === void 0 ? void 0 : (_types$ = types[0]) === null || _types$ === void 0 ? void 0 : _types$.name) || "";

  var _ref3 = element.data || {},
      _ref3$type = _ref3.type,
      type = _ref3$type === void 0 ? defaultType : _ref3$type,
      _ref3$icon = _ref3.icon,
      icon = _ref3$icon === void 0 ? {
    width: 36
  } : _ref3$icon;

  var _useUpdateHandlers = useUpdateHandlers({
    element: element,
    dataNamespace: "data",
    postModifyElement: updateButtonElementIcon
  }),
      getUpdateValue = _useUpdateHandlers.getUpdateValue,
      getUpdatePreview = _useUpdateHandlers.getUpdatePreview;

  var updateType = useCallback(function (value) {
    return getUpdateValue("type")(value);
  }, [getUpdateValue]);
  var updateIcon = useCallback(function (value) {
    return getUpdateValue("icon.id")(value === null || value === void 0 ? void 0 : value.id);
  }, [getUpdateValue]);
  var updateIconColor = useCallback(function (value) {
    return getUpdateValue("icon.color")(value);
  }, [getUpdateValue]);
  var updateIconColorPreview = useCallback(function (value) {
    return getUpdatePreview("icon.color")(value);
  }, [getUpdatePreview]);
  var updateIconWidth = useCallback(function (value) {
    return getUpdateValue("icon.width")(value);
  }, [getUpdateValue]);
  var updateIconPosition = useCallback(function (value) {
    return getUpdateValue("icon.position")(value);
  }, [getUpdateValue]);
  var removeIcon = useCallback(function () {
    return getUpdateValue("icon")({
      id: null
    });
  }, [getUpdateValue]);
  return /*#__PURE__*/React.createElement(Accordion, {
    title: "Button",
    defaultValue: defaultAccordionValue
  }, /*#__PURE__*/React.createElement(ContentWrapper, {
    direction: "column"
  }, /*#__PURE__*/React.createElement(Wrapper, {
    label: "Type",
    containerClassName: classes.gridClass
  }, /*#__PURE__*/React.createElement(SelectField, {
    value: type,
    onChange: updateType
  }, types.map(function (type) {
    return /*#__PURE__*/React.createElement("option", {
      key: type.className,
      value: type.className
    }, type.label);
  }))), /*#__PURE__*/React.createElement(Wrapper, {
    label: "Icon",
    containerClassName: classes.gridClass
  }, /*#__PURE__*/React.createElement(IconPickerComponent, {
    handlerClassName: "icon-picker-handler",
    value: icon === null || icon === void 0 ? void 0 : icon.id,
    onChange: updateIcon,
    removeIcon: removeIcon,
    useInSidebar: true
  })), /*#__PURE__*/React.createElement(Wrapper, {
    label: "Icon color",
    containerClassName: classes.gridClass
  }, /*#__PURE__*/React.createElement(BaseColorPicker, {
    handlerClassName: "color-picker-handler",
    value: icon === null || icon === void 0 ? void 0 : icon.color,
    updateValue: updateIconColor,
    updatePreview: updateIconColorPreview
  })), /*#__PURE__*/React.createElement(Wrapper, {
    label: "Icon width",
    containerClassName: classes.gridClass,
    leftCellSpan: 8,
    rightCellSpan: 4
  }, /*#__PURE__*/React.createElement(InputField, {
    placeholder: "Width",
    value: icon === null || icon === void 0 ? void 0 : icon.width,
    onChange: updateIconWidth
  })), /*#__PURE__*/React.createElement(Wrapper, {
    label: "Icon position",
    containerClassName: classes.gridClass,
    leftCellSpan: 8,
    rightCellSpan: 4
  }, /*#__PURE__*/React.createElement(SelectField, {
    value: (icon === null || icon === void 0 ? void 0 : icon.position) || "left",
    onChange: updateIconPosition
  }, /*#__PURE__*/React.createElement("option", {
    value: "left"
  }, "Left"), /*#__PURE__*/React.createElement("option", {
    value: "right"
  }, "Right"), /*#__PURE__*/React.createElement("option", {
    value: "top"
  }, "Top"), /*#__PURE__*/React.createElement("option", {
    value: "bottom"
  }, "Bottom")))));
};

export default ButtonSettings;
//# sourceMappingURL=ButtonSettings.js.map