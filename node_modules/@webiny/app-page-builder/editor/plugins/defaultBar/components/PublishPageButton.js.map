{"version":3,"sources":["../../../../../src/editor/plugins/defaultBar/components/PublishPageButton.tsx"],"names":["React","useRecoilValue","useMutation","set","get","cloneDeep","useRouter","useSnackbar","ConfirmationDialog","ButtonPrimary","GET_PAGE","pageAtom","PUBLISH_PAGE","usePermission","PublishPageButton","page","history","showSnackbar","refetchQueries","update","cache","data","pageBuilder","publishPage","error","pageFromCache","readQuery","query","variables","id","revisions","forEach","r","status","locked","writeQuery","publishRevision","canPublish","showConfirmation","response","message","push","encodeURIComponent","setTimeout","version"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport set from \"lodash/set\";\nimport get from \"lodash/get\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport { useRouter } from \"@webiny/react-router\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nimport { ConfirmationDialog } from \"@webiny/ui/ConfirmationDialog\";\nimport { ButtonPrimary } from \"@webiny/ui/Button\";\nimport { GET_PAGE } from \"../../../../admin/graphql/pages\";\nimport { pageAtom } from \"../../../recoil/modules\";\nimport { PUBLISH_PAGE } from \"./PublishPageButton/graphql\";\nimport usePermission from \"../../../../hooks/usePermission\";\n\nconst PublishPageButton: React.FunctionComponent = () => {\n    const page = useRecoilValue(pageAtom);\n    const { history } = useRouter();\n    const { showSnackbar } = useSnackbar();\n    const [publishRevision] = useMutation(PUBLISH_PAGE, {\n        refetchQueries: [\"PbListPages\"],\n        update: (cache, { data }) => {\n            // Don't do anything if there was an error during publishing!\n            if (data.pageBuilder.publishPage.error) {\n                return;\n            }\n\n            // Update revisions\n            let pageFromCache;\n            try {\n                pageFromCache = cloneDeep(\n                    cache.readQuery({\n                        query: GET_PAGE,\n                        variables: { id: page.id }\n                    })\n                );\n            } catch {\n                // This means page could not be found in the cache. Exiting...\n                return;\n            }\n\n            const revisions = get(pageFromCache, \"pageBuilder.getPage.data.revisions\", []);\n            revisions.forEach(r => {\n                // Update published/locked fields on the revision that was just published.\n                if (r.id === page.id) {\n                    r.status = \"published\";\n                    r.locked = true;\n                    return;\n                }\n\n                // Unpublish other published revisions\n                if (r.status === \"published\") {\n                    r.status = \"unpublished\";\n                }\n            });\n\n            // Write our data back to the cache.\n            cache.writeQuery({\n                query: GET_PAGE,\n                data: set(pageFromCache, \"pageBuilder.getPage.data.revisions\", revisions)\n            });\n        }\n    });\n    const { canPublish } = usePermission();\n\n    if (!canPublish()) {\n        return null;\n    }\n\n    return (\n        <ConfirmationDialog\n            data-testid={\"pb-editor-publish-confirmation-dialog\"}\n            title=\"Publish page\"\n            message=\"You are about to publish this page, are you sure want to continue?\"\n        >\n            {({ showConfirmation }) => (\n                <ButtonPrimary\n                    onClick={async () => {\n                        showConfirmation(async () => {\n                            const response = await publishRevision({\n                                variables: {\n                                    id: page.id\n                                }\n                            });\n\n                            const { error } = response.data.pageBuilder.publishPage;\n                            if (error) {\n                                return showSnackbar(error.message);\n                            }\n\n                            history.push(`/page-builder/pages?id=${encodeURIComponent(page.id)}`);\n\n                            // Let's wait a bit, because we are also redirecting the user.\n                            setTimeout(() => {\n                                showSnackbar(\"Your page was published successfully!\");\n                            }, 500);\n                        });\n                    }}\n                >\n                    {page.version > 1 ? \"Publish changes\" : \"Publish\"}\n                </ButtonPrimary>\n            )}\n        </ConfirmationDialog>\n    );\n};\n\nexport default PublishPageButton;\n"],"file":"PublishPageButton.js"}