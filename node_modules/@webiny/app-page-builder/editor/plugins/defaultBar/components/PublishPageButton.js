import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React from "react";
import { useRecoilValue } from "recoil";
import { useMutation } from "@apollo/react-hooks";
import set from "lodash/set";
import get from "lodash/get";
import cloneDeep from "lodash/cloneDeep";
import { useRouter } from "@webiny/react-router";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { ConfirmationDialog } from "@webiny/ui/ConfirmationDialog";
import { ButtonPrimary } from "@webiny/ui/Button";
import { GET_PAGE } from "../../../../admin/graphql/pages";
import { pageAtom } from "../../../recoil/modules";
import { PUBLISH_PAGE } from "./PublishPageButton/graphql";
import usePermission from "../../../../hooks/usePermission";

var PublishPageButton = function PublishPageButton() {
  var page = useRecoilValue(pageAtom);

  var _useRouter = useRouter(),
      history = _useRouter.history;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var _useMutation = useMutation(PUBLISH_PAGE, {
    refetchQueries: ["PbListPages"],
    update: function update(cache, _ref) {
      var data = _ref.data;

      // Don't do anything if there was an error during publishing!
      if (data.pageBuilder.publishPage.error) {
        return;
      } // Update revisions


      // Update revisions
      var pageFromCache;

      try {
        pageFromCache = cloneDeep(cache.readQuery({
          query: GET_PAGE,
          variables: {
            id: page.id
          }
        }));
      } catch (_unused) {
        // This means page could not be found in the cache. Exiting...
        return;
      }

      var revisions = get(pageFromCache, "pageBuilder.getPage.data.revisions", []);
      revisions.forEach(function (r) {
        // Update published/locked fields on the revision that was just published.
        if (r.id === page.id) {
          r.status = "published";
          r.locked = true;
          return;
        } // Unpublish other published revisions


        // Unpublish other published revisions
        if (r.status === "published") {
          r.status = "unpublished";
        }
      }); // Write our data back to the cache.

      // Write our data back to the cache.
      cache.writeQuery({
        query: GET_PAGE,
        data: set(pageFromCache, "pageBuilder.getPage.data.revisions", revisions)
      });
    }
  }),
      _useMutation2 = _slicedToArray(_useMutation, 1),
      publishRevision = _useMutation2[0];

  var _usePermission = usePermission(),
      canPublish = _usePermission.canPublish;

  if (!canPublish()) {
    return null;
  }

  return /*#__PURE__*/React.createElement(ConfirmationDialog, {
    "data-testid": "pb-editor-publish-confirmation-dialog",
    title: "Publish page",
    message: "You are about to publish this page, are you sure want to continue?"
  }, function (_ref2) {
    var showConfirmation = _ref2.showConfirmation;
    return /*#__PURE__*/React.createElement(ButtonPrimary, {
      onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                showConfirmation( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
                  var response, error;
                  return _regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.next = 2;
                          return publishRevision({
                            variables: {
                              id: page.id
                            }
                          });

                        case 2:
                          response = _context.sent;
                          error = response.data.pageBuilder.publishPage.error;

                          if (!error) {
                            _context.next = 6;
                            break;
                          }

                          return _context.abrupt("return", showSnackbar(error.message));

                        case 6:
                          history.push("/page-builder/pages?id=".concat(encodeURIComponent(page.id))); // Let's wait a bit, because we are also redirecting the user.

                          setTimeout(function () {
                            showSnackbar("Your page was published successfully!");
                          }, 500);

                        case 8:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                })));

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }))
    }, page.version > 1 ? "Publish changes" : "Publish");
  });
};

export default PublishPageButton;
//# sourceMappingURL=PublishPageButton.js.map