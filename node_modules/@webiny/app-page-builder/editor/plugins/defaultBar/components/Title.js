import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useState, useCallback } from "react";
import { useEventActionHandler } from "../../../hooks/useEventActionHandler";
import { UpdatePageRevisionActionEvent } from "../../../recoil/actions";
import { pageAtom } from "../../../recoil/modules";
import { useRecoilValue } from "recoil";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { Input } from "@webiny/ui/Input";
import { Tooltip } from "@webiny/ui/Tooltip";
import { Typography } from "@webiny/ui/Typography";
import { PageMeta, PageTitle, pageTitleWrapper, PageVersion, TitleInputWrapper, TitleWrapper } from "./Styled";

var extractPageInfo = function extractPageInfo(page) {
  var title = page.title,
      version = page.version,
      locked = page.locked,
      category = page.category;
  return {
    pageTitle: title,
    pageVersion: version,
    pageLocked: locked,
    pageCategory: category === null || category === void 0 ? void 0 : category.name,
    pageCategoryUrl: category === null || category === void 0 ? void 0 : category.url
  };
};

var Title = function Title() {
  var handler = useEventActionHandler();
  var page = useRecoilValue(pageAtom);

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var _extractPageInfo = extractPageInfo(page),
      pageTitle = _extractPageInfo.pageTitle,
      pageVersion = _extractPageInfo.pageVersion,
      pageLocked = _extractPageInfo.pageLocked,
      pageCategory = _extractPageInfo.pageCategory;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      editTitle = _useState2[0],
      setEdit = _useState2[1];

  var _useState3 = useState(null),
      _useState4 = _slicedToArray(_useState3, 2),
      stateTitle = _useState4[0],
      setTitle = _useState4[1];

  var title = stateTitle === null ? pageTitle : stateTitle;

  var updatePage = function updatePage(data) {
    handler.trigger(new UpdatePageRevisionActionEvent({
      page: data,
      onFinish: function onFinish() {
        showSnackbar("Page title updated successfully!");
      }
    }));
  };

  var enableEdit = useCallback(function () {
    return setEdit(true);
  }, []);
  var onBlur = useCallback(function () {
    if (title === "") {
      title = "Untitled";
      setTitle(title);
    }

    setEdit(false);
    updatePage({
      title: title
    });
  }, [title]);
  var onKeyDown = useCallback(function (e) {
    // @ts-ignore
    switch (e.key) {
      case "Escape":
        e.preventDefault();
        setEdit(false);
        setTitle(pageTitle);
        break;

      case "Enter":
        if (title === "") {
          title = "Untitled";
          setTitle(title);
        }

        e.preventDefault();
        setEdit(false);
        updatePage({
          title: title
        });
        break;

      default:
        return;
    }
  }, [title, pageTitle]); // Disable autoFocus because for some reason, blur event would automatically be triggered when clicking
  // on the page title when doing Cypress testing. Not sure if this is RMWC or Cypress related issue.

  var autoFocus = !window.Cypress;
  return editTitle ? /*#__PURE__*/React.createElement(TitleInputWrapper, null, /*#__PURE__*/React.createElement(Input, {
    autoFocus: autoFocus,
    fullwidth: true,
    value: title,
    onChange: setTitle,
    onKeyDown: onKeyDown,
    onBlur: onBlur
  })) : /*#__PURE__*/React.createElement(TitleWrapper, null, /*#__PURE__*/React.createElement(PageMeta, null, /*#__PURE__*/React.createElement(Typography, {
    use: "overline"
  }, "".concat(pageCategory, " (status: ").concat(pageLocked ? "published" : "draft", ")"))), /*#__PURE__*/React.createElement("div", {
    style: {
      width: "100%",
      display: "flex"
    }
  }, /*#__PURE__*/React.createElement(Tooltip, {
    className: pageTitleWrapper,
    placement: "bottom",
    content: /*#__PURE__*/React.createElement("span", null, "Rename")
  }, /*#__PURE__*/React.createElement(PageTitle, {
    "data-testid": "pb-editor-page-title",
    onClick: enableEdit
  }, title)), /*#__PURE__*/React.createElement(PageVersion, null, "(v".concat(pageVersion, ")"))));
};

export default /*#__PURE__*/React.memo(Title);
//# sourceMappingURL=Title.js.map