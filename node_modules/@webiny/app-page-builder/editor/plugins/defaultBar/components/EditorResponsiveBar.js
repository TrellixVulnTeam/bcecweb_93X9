import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useCallback, useMemo } from "react";
import { useRecoilState } from "recoil";
import { css } from "emotion";
import classNames from "classnames";
import { plugins } from "@webiny/plugins";
import { IconButton } from "@webiny/ui/Button";
import { Tooltip } from "@webiny/ui/Tooltip";
import { Typography } from "@webiny/ui/Typography";
import { uiAtom, setDisplayModeMutation } from "../../../recoil/modules";
import { usePageBuilder } from "../../../../hooks/usePageBuilder";
var classes = {
  wrapper: /*#__PURE__*/css({
    height: "100%",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    "& .action-wrapper": {
      height: "100%",
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      borderRight: "1px solid var(--mdc-theme-background)",
      "&:first-child": {
        borderLeft: "1px solid var(--mdc-theme-background)"
      },
      "&.active": {
        backgroundColor: "var(--mdc-theme-background)",
        "& .mdc-icon-button": {
          color: "var(--mdc-theme-text-primary-on-background)"
        }
      }
    }
  }, "label:wrapper;"),
  dimensionIndicator: /*#__PURE__*/css({
    height: "100%",
    display: "flex",
    alignItems: "center",
    padding: "0px 16px",
    borderRight: "1px solid var(--mdc-theme-background)",
    "& span": {
      color: "var(--mdc-theme-text-primary-on-background)"
    },
    "& .width": {
      marginRight: 8,
      "& span:last-child": {
        marginLeft: 4
      }
    },
    "& .height": {
      "& span:last-child": {
        marginLeft: 4
      }
    }
  }, "label:dimensionIndicator;"),
  tooltip: /*#__PURE__*/css({
    textAlign: "left",
    textTransform: "initial",
    "& .tooltip__title": {
      "& span": {
        fontWeight: 900
      }
    },
    "& .tooltip__info": {
      display: "flex",
      "& span": {
        fontWeight: 600
      },
      "& svg": {
        fill: "var(--mdc-theme-surface)",
        marginRight: 4
      }
    },
    "& .tooltip__body": {
      marginTop: 4,
      "& span": {
        fontWeight: 600
      }
    }
  }, "label:tooltip;")
};

var EditorResponsiveBar = function EditorResponsiveBar() {
  var _useRecoilState = useRecoilState(uiAtom),
      _useRecoilState2 = _slicedToArray(_useRecoilState, 2),
      _useRecoilState2$ = _useRecoilState2[0],
      displayMode = _useRecoilState2$.displayMode,
      pagePreviewDimension = _useRecoilState2$.pagePreviewDimension,
      setUiAtomValue = _useRecoilState2[1];

  var _usePageBuilder = usePageBuilder(),
      setDisplayMode = _usePageBuilder.responsiveDisplayMode.setDisplayMode;

  var setEditorMode = useCallback(function (displayMode) {
    setUiAtomValue(function (prev) {
      return setDisplayModeMutation(prev, displayMode);
    });
    /**
     * We are updating the "displayMode" in PageBuilder context.
     * Because "ElementRoot" needs its value to apply "visibility" element style setting.
     */

    setDisplayMode(displayMode);
  }, [uiAtom]);
  var responsiveBarContent = useMemo(function () {
    var editorModes = plugins.byType("pb-editor-responsive-mode");
    return editorModes.map(function (_ref) {
      var _ref$config = _ref.config,
          mode = _ref$config.displayMode,
          icon = _ref$config.icon,
          toolTip = _ref$config.toolTip;
      return /*#__PURE__*/React.createElement(Tooltip, {
        key: mode,
        content: /*#__PURE__*/React.createElement("div", {
          className: classes.tooltip
        }, /*#__PURE__*/React.createElement("div", {
          className: "tooltip__title"
        }, /*#__PURE__*/React.createElement(Typography, {
          use: "subtitle1"
        }, toolTip.title)), /*#__PURE__*/React.createElement("div", {
          className: "tooltip__info"
        }, toolTip.subTitleIcon, /*#__PURE__*/React.createElement(Typography, {
          use: "body2"
        }, toolTip.subTitle)), /*#__PURE__*/React.createElement("div", {
          className: "tooltip__body"
        }, /*#__PURE__*/React.createElement(Typography, {
          use: "body2"
        }, toolTip.body))),
        placement: "bottom",
        className: classNames("action-wrapper", {
          active: mode === displayMode
        })
      }, /*#__PURE__*/React.createElement(IconButton, {
        icon: icon,
        onClick: function onClick() {
          return setEditorMode(mode);
        }
      }));
    });
  }, [setEditorMode, displayMode]);
  return /*#__PURE__*/React.createElement("div", {
    className: classes.wrapper
  }, responsiveBarContent, /*#__PURE__*/React.createElement("div", {
    className: classes.dimensionIndicator
  }, /*#__PURE__*/React.createElement("span", {
    className: "width"
  }, /*#__PURE__*/React.createElement(Typography, {
    use: "subtitle2"
  }, pagePreviewDimension.width), /*#__PURE__*/React.createElement(Typography, {
    use: "subtitle2"
  }, "PX")), /*#__PURE__*/React.createElement("span", {
    className: "height"
  }, /*#__PURE__*/React.createElement(Typography, {
    use: "subtitle2"
  }, "100"), /*#__PURE__*/React.createElement(Typography, {
    use: "subtitle2"
  }, "%"))));
};

export default EditorResponsiveBar;
//# sourceMappingURL=EditorResponsiveBar.js.map