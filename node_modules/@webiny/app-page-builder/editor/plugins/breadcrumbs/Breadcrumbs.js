import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useCallback, useEffect, useState } from "react";
import { useRecoilCallback, useRecoilSnapshot, useRecoilState, useRecoilValue } from "recoil";
import { activeElementAtom, elementByIdSelector, elementsAtom, highlightElementAtom } from "../../recoil/modules";
import { breadcrumbs } from "./styles";

var Breadcrumbs = function Breadcrumbs() {
  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      items = _useState2[0],
      setItems = _useState2[1];

  var _useRecoilState = useRecoilState(activeElementAtom),
      _useRecoilState2 = _slicedToArray(_useRecoilState, 2),
      activeElement = _useRecoilState2[0],
      setActiveElementAtomValue = _useRecoilState2[1];

  var element = useRecoilValue(elementByIdSelector(activeElement));

  var _useRecoilState3 = useRecoilState(highlightElementAtom),
      _useRecoilState4 = _slicedToArray(_useRecoilState3, 2),
      highlightElementAtomValue = _useRecoilState4[0],
      setHighlightElementAtomValue = _useRecoilState4[1];

  var snapshot = useRecoilSnapshot();
  var lazyHighlight = useRecoilCallback(function (_ref) {
    var set = _ref.set;
    return /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (highlightElementAtomValue) {
                  // Update the element that is currently highlighted
                  set(elementsAtom(highlightElementAtomValue), function (prevValue) {
                    return _objectSpread(_objectSpread({}, prevValue), {}, {
                      isHighlighted: false
                    });
                  });
                } // Set the new highlighted element


                setHighlightElementAtomValue(id); // Update the element that is about to be highlighted

                set(elementsAtom(id), function (prevValue) {
                  return _objectSpread(_objectSpread({}, prevValue), {}, {
                    isHighlighted: true
                  });
                });

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }();
  }, [highlightElementAtomValue]);
  var highlightElement = useCallback(function (id) {
    lazyHighlight(id);
  }, [lazyHighlight]);
  var activateElement = useCallback(function (id) {
    setActiveElementAtomValue(id);
  }, []);

  var createBreadCrumbs = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(activeElement) {
      var list, element;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              list = [];
              element = activeElement;

            case 2:
              if (!element.parent) {
                _context2.next = 11;
                break;
              }

              list.push({
                id: element.id,
                type: element.type
              });

              if (element.parent) {
                _context2.next = 6;
                break;
              }

              return _context2.abrupt("break", 11);

            case 6:
              _context2.next = 8;
              return snapshot.getPromise(elementByIdSelector(element.parent));

            case 8:
              element = _context2.sent;
              _context2.next = 2;
              break;

            case 11:
              setItems(list.reverse());

            case 12:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function createBreadCrumbs(_x2) {
      return _ref3.apply(this, arguments);
    };
  }();

  useEffect(function () {
    if (element) {
      createBreadCrumbs(element);
    }
  }, [element]);

  if (!element) {
    return null;
  }

  return /*#__PURE__*/React.createElement("ul", {
    className: breadcrumbs
  }, items.map(function (_ref4, index) {
    var id = _ref4.id,
        type = _ref4.type;
    return /*#__PURE__*/React.createElement("li", {
      key: id,
      onMouseOver: function onMouseOver() {
        return highlightElement(id);
      },
      onClick: function onClick() {
        return activateElement(id);
      }
    }, /*#__PURE__*/React.createElement("span", {
      className: "element",
      style: {
        "--element-count": index
      }
    }, type));
  }));
};

export default /*#__PURE__*/React.memo(Breadcrumbs);
//# sourceMappingURL=Breadcrumbs.js.map