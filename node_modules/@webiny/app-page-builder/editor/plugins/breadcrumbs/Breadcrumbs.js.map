{"version":3,"sources":["../../../../src/editor/plugins/breadcrumbs/Breadcrumbs.tsx"],"names":["React","useCallback","useEffect","useState","useRecoilCallback","useRecoilSnapshot","useRecoilState","useRecoilValue","activeElementAtom","elementByIdSelector","elementsAtom","highlightElementAtom","breadcrumbs","Breadcrumbs","items","setItems","activeElement","setActiveElementAtomValue","element","highlightElementAtomValue","setHighlightElementAtomValue","snapshot","lazyHighlight","set","id","prevValue","isHighlighted","highlightElement","activateElement","createBreadCrumbs","list","parent","push","type","getPromise","reverse","map","index","memo"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { useRecoilCallback, useRecoilSnapshot, useRecoilState, useRecoilValue } from \"recoil\";\nimport { PbEditorElement } from \"../../../types\";\nimport {\n    activeElementAtom,\n    elementByIdSelector,\n    elementsAtom,\n    highlightElementAtom\n} from \"../../recoil/modules\";\nimport { breadcrumbs } from \"./styles\";\n\nconst Breadcrumbs: React.FunctionComponent = () => {\n    const [items, setItems] = useState([]);\n    const [activeElement, setActiveElementAtomValue] = useRecoilState(activeElementAtom);\n    const element = useRecoilValue(elementByIdSelector(activeElement));\n    const [highlightElementAtomValue, setHighlightElementAtomValue] =\n        useRecoilState(highlightElementAtom);\n    const snapshot = useRecoilSnapshot();\n    const lazyHighlight = useRecoilCallback(\n        ({ set }) =>\n            async (id: string) => {\n                if (highlightElementAtomValue) {\n                    // Update the element that is currently highlighted\n                    set(elementsAtom(highlightElementAtomValue), prevValue => {\n                        return {\n                            ...prevValue,\n                            isHighlighted: false\n                        };\n                    });\n                }\n\n                // Set the new highlighted element\n                setHighlightElementAtomValue(id);\n\n                // Update the element that is about to be highlighted\n                set(elementsAtom(id), prevValue => {\n                    return {\n                        ...prevValue,\n                        isHighlighted: true\n                    };\n                });\n            },\n        [highlightElementAtomValue]\n    );\n\n    const highlightElement = useCallback(\n        (id: string) => {\n            lazyHighlight(id);\n        },\n        [lazyHighlight]\n    );\n\n    const activateElement = useCallback((id: string) => {\n        setActiveElementAtomValue(id);\n    }, []);\n\n    const createBreadCrumbs = async (activeElement: PbEditorElement) => {\n        const list = [];\n        let element = activeElement;\n        while (element.parent) {\n            list.push({\n                id: element.id,\n                type: element.type\n            });\n\n            if (!element.parent) {\n                break;\n            }\n\n            element = await snapshot.getPromise(elementByIdSelector(element.parent));\n        }\n        setItems(list.reverse());\n    };\n\n    useEffect(() => {\n        if (element) {\n            createBreadCrumbs(element);\n        }\n    }, [element]);\n\n    if (!element) {\n        return null;\n    }\n\n    return (\n        <ul className={breadcrumbs}>\n            {items.map(({ id, type }, index) => (\n                <li\n                    key={id}\n                    onMouseOver={() => highlightElement(id)}\n                    onClick={() => activateElement(id)}\n                >\n                    <span\n                        className={\"element\"}\n                        style={{ \"--element-count\": index } as React.CSSProperties}\n                    >\n                        {type}\n                    </span>\n                </li>\n            ))}\n        </ul>\n    );\n};\nexport default React.memo(Breadcrumbs);\n"],"file":"Breadcrumbs.js"}