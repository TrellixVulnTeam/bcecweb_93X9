import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import trim from "lodash/trim";
import { InputElement } from "@webiny/app-admin/ui/elements/form/InputElement";
import { PageSettingsFormView } from "./PageSettingsView/PageSettingsFormView";
import { FileManagerElement } from "@webiny/app-admin/ui/elements/form/FileManagerElement";
import { validation } from "@webiny/validation";
import { SmallButtonElement } from "@webiny/app-admin/ui/elements/SmallButtonElement";
import { TypographyElement } from "@webiny/app-admin/ui/elements/TypographyElement";
import { LabelElement } from "@webiny/app-admin/ui/elements/LabelElement";
import { ButtonElement } from "@webiny/app-admin/ui/elements/ButtonElement";
import { DynamicFieldsetElement } from "@webiny/app-admin/ui/elements/form/DynamicFieldsetElement";
import { ButtonGroupElement } from "@webiny/app-admin/ui/elements/ButtonGroupElement";
export var SocialSettingsView = /*#__PURE__*/function (_PageSettingsFormView) {
  _inherits(SocialSettingsView, _PageSettingsFormView);

  var _super = _createSuper(SocialSettingsView);

  function SocialSettingsView() {
    var _this;

    _classCallCheck(this, SocialSettingsView);

    _this = _super.call(this, "SocialSettingsView");

    _this.setTitle("Social Media");

    _this.addField(new InputElement("title", {
      name: "settings.social.title",
      label: "Title (leave blank to use your page title)",
      description: "Social media title (og:title)."
    }));

    _this.addField(new InputElement("description", {
      name: "settings.social.description",
      label: "Description (leave blank to use your page snippet)",
      description: "Social media description (og:description)."
    }));

    _this.addField(new FileManagerElement("image", {
      name: "settings.social.image",
      label: "Social Image",
      description: "Linked via \"og:image\" tag. Recommended resolution 1596x545.",
      onChangePickAttributes: ["id", "src"]
    }));

    var metaTags = new DynamicFieldsetElement("metaTags", {
      name: "settings.social.meta"
    });
    var header = new TypographyElement("metaTags.header", {
      typography: "button"
    });
    header.addElement(new LabelElement("metaTags.header.label", {
      text: "Meta tags"
    }));
    metaTags.setHeaderElement(header);
    metaTags.setCreateEmptyElement(function (_ref) {
      var actions = _ref.actions;
      var emptyElement = new TypographyElement("metaTags.empty", {
        typography: "button"
      });
      emptyElement.addElement(new LabelElement("metaTags.empty.label", {
        text: "To add other meta tags, click "
      }));
      emptyElement.addElement(new ButtonElement("metaTags.empty.buttonCreate", {
        label: "Add meta tag",
        type: "primary",
        onClick: actions.add()
      }));
      return emptyElement;
    });
    metaTags.setCreateRowElement(function (_ref2) {
      var row = _ref2.row,
          actions = _ref2.actions,
          index = _ref2.index;
      var nameElement = row.addElement(new InputElement("metaTags.".concat(index, ".property"), {
        name: "settings.social.meta.".concat(index, ".property"),
        label: "Property",
        validators: function validators() {
          return validation.create("required");
        },
        beforeChange: function beforeChange(tag, cb) {
          return cb(trim(tag));
        }
      }));
      var contentElement = new InputElement("metaTags.".concat(index, ".content"), {
        name: "settings.social.meta.".concat(index, ".content"),
        label: "Content",
        validators: function validators() {
          return validation.create("required");
        },
        beforeChange: function beforeChange(tag, cb) {
          return cb(trim(tag));
        }
      });
      contentElement.moveAfter(nameElement);
      var buttons = new ButtonGroupElement("metaTags.".concat(index, ".buttons"));
      buttons.addElement(new SmallButtonElement("metaTags.".concat(index, ".buttonAdd"), {
        type: "primary",
        label: "+",
        onClick: actions.add(index)
      }));
      buttons.addElement(new SmallButtonElement("metaTags.".concat(index, ".buttonRemove"), {
        type: "secondary",
        label: "-",
        onClick: actions.remove(index)
      }));
      buttons.moveAfter(contentElement);
      return row;
    });

    _this.addField(metaTags);

    _this.applyPlugins(SocialSettingsView);

    return _this;
  }

  return SocialSettingsView;
}(PageSettingsFormView);
//# sourceMappingURL=SocialSettingsView.js.map