import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import { useEffect, useRef, useState } from "react";

var addEventListeners = function addEventListeners(onMouseMove, onMouseUp) {
  document.addEventListener("mousemove", onMouseMove);
  document.addEventListener("mouseup", onMouseUp);
};

var removeEventListeners = function removeEventListeners(onMouseMove, onMouseUp) {
  document.removeEventListener("mousemove", onMouseMove);
  document.removeEventListener("mouseup", onMouseUp);
};

var Resizer = function Resizer(_ref) {
  var axis = _ref.axis,
      _ref$onResizeStart = _ref.onResizeStart,
      onResizeStart = _ref$onResizeStart === void 0 ? function () {
    return;
  } : _ref$onResizeStart,
      _ref$onResizeStop = _ref.onResizeStop,
      onResizeStop = _ref$onResizeStop === void 0 ? function () {
    return;
  } : _ref$onResizeStop,
      onResize = _ref.onResize,
      children = _ref.children;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isDragging = _useState2[0],
      setIsDragging = _useState2[1];

  var startPosition = useRef(0); // attaching events on drag start
  // detaching on drag end
  // on the first run event listeners can be removed, nothing wrong about it

  useEffect(function () {
    if (isDragging) {
      addEventListeners(onMouseMove, onMouseUp);
    } else {
      removeEventListeners(onMouseMove, onMouseUp);
    }

    return function () {
      removeEventListeners(onMouseMove, onMouseUp);
    };
  }, [isDragging]);

  var getMousePosition = function getMousePosition(ev) {
    return axis === "x" ? ev.pageX : ev.pageY;
  };

  var onMouseMove = function onMouseMove(ev) {
    if (!isDragging) {
      return;
    }

    var mousePosition = getMousePosition(ev);
    onResize(startPosition.current - mousePosition);
    startPosition.current = mousePosition;
  };

  var onMouseUp = function onMouseUp() {
    if (!isDragging) {
      return;
    }

    setIsDragging(false);
    onResizeStop();
  };

  var onMouseDown = function onMouseDown(ev) {
    var _ev$nativeEvent;

    ev.preventDefault();
    ev.stopPropagation();
    var targetEvent = ((_ev$nativeEvent = ev.nativeEvent) === null || _ev$nativeEvent === void 0 ? void 0 : _ev$nativeEvent.pageX) !== undefined ? ev.nativeEvent : ev;
    startPosition.current = getMousePosition(targetEvent);
    setIsDragging(true);
    onResizeStart();
  };

  return children({
    isResizing: isDragging,
    onMouseDown: onMouseDown
  });
};

export default Resizer;
//# sourceMappingURL=Resizer.js.map