{"version":3,"sources":["../../../src/editor/components/Text.tsx"],"names":["React","useCallback","useMemo","useRecoilState","useRecoilValue","get","classNames","elementWithChildrenByIdSelector","activeElementAtom","uiAtom","ElementRoot","useUpdateHandlers","ReactMediumEditor","applyFallbackDisplayMode","textClassName","DATA_NAMESPACE","Text","elementId","editorOptions","rootClassName","element","displayMode","activeElementId","setActiveElementAtomValue","dataNamespace","getUpdateValue","fallbackValue","mode","value","onChange","onSelect","textContent","tag","typography","memo"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,QAA4C,OAA5C;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,QAA/C;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,+BAAT,EAA0CC,iBAA1C,EAA6DC,MAA7D;AACA,SAASC,WAAT;AACA,OAAOC,iBAAP;AACA,OAAOC,iBAAP;AACA,SAASC,wBAAT;AAEA,OAAO,IAAMC,aAAa,GAAG,+DAAtB;AACP,IAAMC,cAAc,GAAG,WAAvB;;AAOA,IAAMC,IAA+C,GAAG,SAAlDA,IAAkD,OAIlD;AAAA,MAHFC,SAGE,QAHFA,SAGE;AAAA,MAFFC,aAEE,QAFFA,aAEE;AAAA,MADFC,aACE,QADFA,aACE;AACF,MAAMC,OAAwB,GAAGhB,cAAc,CAACG,+BAA+B,CAACU,SAAD,CAAhC,CAA/C;;AACA,wBAA0Bd,cAAc,CAACM,MAAD,CAAxC;AAAA;AAAA,MAASY,WAAT,uBAASA,WAAT;;AACA,yBAAqDlB,cAAc,CAACK,iBAAD,CAAnE;AAAA;AAAA,MAAOc,eAAP;AAAA,MAAwBC,yBAAxB;;AACA,2BAA2BZ,iBAAiB,CAAC;AACzCS,IAAAA,OAAO,EAAPA,OADyC;AAEzCI,IAAAA,aAAa,EAAET;AAF0B,GAAD,CAA5C;AAAA,MAAQU,cAAR,sBAAQA,cAAR;;AAKA,MAAMC,aAAa,GAAGxB,OAAO,CACzB;AAAA,WACIW,wBAAwB,CAACQ,WAAD,EAAc,UAAAM,IAAI;AAAA,aACtCtB,GAAG,CAACe,OAAD,YAAaL,cAAb,cAA+BY,IAA/B,EADmC;AAAA,KAAlB,CAD5B;AAAA,GADyB,EAKzB,CAACN,WAAD,CALyB,CAA7B;AAQA,MAAMO,KAAK,GAAGvB,GAAG,CAACe,OAAD,YAAaL,cAAb,cAA+BM,WAA/B,GAA8CK,aAA9C,CAAjB;AAEA,MAAMG,QAAQ,GAAG5B,WAAW,CACxB,UAAA2B,KAAK,EAAI;AACLH,IAAAA,cAAc,CAACV,cAAD,CAAd,CAA+Ba,KAA/B;AACH,GAHuB,EAIxB,CAACH,cAAD,CAJwB,CAA5B;AAOA,MAAMK,QAAQ,GAAG7B,WAAW,CAAC,YAAM;AAC/B;AACA,QAAIgB,SAAS,IAAIK,eAAe,KAAKL,SAArC,EAAgD;AAC5CM,MAAAA,yBAAyB,CAACN,SAAD,CAAzB;AACH;AACJ,GAL2B,EAKzB,CAACK,eAAD,EAAkBL,SAAlB,CALyB,CAA5B,CA1BE,CAiCF;;AACA,MAAI,CAACG,OAAL,EAAc;AACV,WAAO,IAAP;AACH;;AAED,MAAMW,WAAW,GAAG1B,GAAG,CAACe,OAAD,YAAaL,cAAb,gBAAvB;AACA,MAAMiB,GAAG,GAAG3B,GAAG,CAACuB,KAAD,EAAQ,KAAR,CAAf;AACA,MAAMK,UAAU,GAAG5B,GAAG,CAACuB,KAAD,EAAQ,YAAR,CAAtB;AAEA,sBACI,oBAAC,WAAD;AACI,IAAA,OAAO,EAAER,OADb;AAEI,IAAA,SAAS,EAAEd,UAAU,CAACQ,aAAD,EAAgBK,aAAhB,EAA+Bc,UAA/B;AAFzB,kBAII,oBAAC,iBAAD;AACI,IAAA,SAAS,EAAEhB,SADf;AAEI,IAAA,GAAG,EAAEe,GAFT;AAGI,IAAA,KAAK,EAAED,WAHX;AAII,IAAA,QAAQ,EAAEF,QAJd;AAKI,IAAA,OAAO,EAAEX,aALb;AAMI,IAAA,QAAQ,EAAEY;AANd,IAJJ,CADJ;AAeH,CA7DD;;AA8DA,4BAAe9B,KAAK,CAACkC,IAAN,CAAWlB,IAAX,CAAf","sourcesContent":["import React, { useCallback, useMemo } from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport get from \"lodash/get\";\nimport classNames from \"classnames\";\nimport { PbEditorElement } from \"../../types\";\nimport { elementWithChildrenByIdSelector, activeElementAtom, uiAtom } from \"../recoil/modules\";\nimport { ElementRoot } from \"../../render/components/ElementRoot\";\nimport useUpdateHandlers from \"../plugins/elementSettings/useUpdateHandlers\";\nimport ReactMediumEditor from \"../components/MediumEditor\";\nimport { applyFallbackDisplayMode } from \"../plugins/elementSettings/elementSettingsUtils\";\n\nexport const textClassName = \"webiny-pb-base-page-element-style webiny-pb-page-element-text\";\nconst DATA_NAMESPACE = \"data.text\";\n\ntype TextElementProps = {\n    elementId: string;\n    editorOptions: any;\n    rootClassName?: string;\n};\nconst Text: React.FunctionComponent<TextElementProps> = ({\n    elementId,\n    editorOptions,\n    rootClassName\n}) => {\n    const element: PbEditorElement = useRecoilValue(elementWithChildrenByIdSelector(elementId));\n    const [{ displayMode }] = useRecoilState(uiAtom);\n    const [activeElementId, setActiveElementAtomValue] = useRecoilState(activeElementAtom);\n    const { getUpdateValue } = useUpdateHandlers({\n        element,\n        dataNamespace: DATA_NAMESPACE\n    });\n\n    const fallbackValue = useMemo(\n        () =>\n            applyFallbackDisplayMode(displayMode, mode =>\n                get(element, `${DATA_NAMESPACE}.${mode}`)\n            ),\n        [displayMode]\n    );\n\n    const value = get(element, `${DATA_NAMESPACE}.${displayMode}`, fallbackValue);\n\n    const onChange = useCallback(\n        value => {\n            getUpdateValue(DATA_NAMESPACE)(value);\n        },\n        [getUpdateValue]\n    );\n\n    const onSelect = useCallback(() => {\n        // Mark element active on editor element selection\n        if (elementId && activeElementId !== elementId) {\n            setActiveElementAtomValue(elementId);\n        }\n    }, [activeElementId, elementId]);\n\n    // required due to re-rendering when set content atom and still nothing in elements atom\n    if (!element) {\n        return null;\n    }\n\n    const textContent = get(element, `${DATA_NAMESPACE}.data.text`);\n    const tag = get(value, \"tag\");\n    const typography = get(value, \"typography\");\n\n    return (\n        <ElementRoot\n            element={element}\n            className={classNames(textClassName, rootClassName, typography)}\n        >\n            <ReactMediumEditor\n                elementId={elementId}\n                tag={tag}\n                value={textContent}\n                onChange={onChange}\n                options={editorOptions}\n                onSelect={onSelect}\n            />\n        </ElementRoot>\n    );\n};\nexport default React.memo(Text);\n"],"file":"Text.js"}