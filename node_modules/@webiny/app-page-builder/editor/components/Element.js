import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useCallback } from "react";
import { useRecoilState, useRecoilValue, useSetRecoilState } from "recoil";
import { Transition } from "react-transition-group";
import { plugins } from "@webiny/plugins";
import { renderPlugins } from "@webiny/app/plugins";
import Draggable from "./Draggable";
import tryRenderingPlugin from "../../utils/tryRenderingPlugin";
import { disableDraggingMutation, elementByIdSelector, enableDraggingMutation, uiAtom, activeElementAtom } from "../recoil/modules";
import { defaultStyle, ElementContainer, transitionStyles, typeStyle } from "./Element/ElementStyled";

var getElementPlugin = function getElementPlugin(element) {
  if (!element) {
    return null;
  }

  var pluginsByType = plugins.byType("pb-editor-page-element");
  return pluginsByType.find(function (pl) {
    return pl.elementType === element.type;
  });
};

var ElementComponent = function ElementComponent(_ref) {
  var elementId = _ref.id,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? "" : _ref$className,
      isActive = _ref.isActive;

  var _useRecoilState = useRecoilState(elementByIdSelector(elementId)),
      _useRecoilState2 = _slicedToArray(_useRecoilState, 2),
      element = _useRecoilState2[0],
      setElementAtomValue = _useRecoilState2[1];

  var setUiAtomValue = useSetRecoilState(uiAtom);
  var setActiveElementAtomValue = useSetRecoilState(activeElementAtom);
  var isHighlighted = element.isHighlighted;
  var plugin = getElementPlugin(element);
  var beginDrag = useCallback(function () {
    var data = {
      id: element.id,
      type: element.type
    };
    setTimeout(function () {
      setUiAtomValue(enableDraggingMutation);
    });
    return _objectSpread(_objectSpread({}, data), {}, {
      target: plugin.target
    });
  }, [elementId]);
  var endDrag = useCallback(function () {
    setUiAtomValue(disableDraggingMutation);
  }, [elementId]);
  var onClick = useCallback(function () {
    if (!element || element.type === "document" || isActive) {
      return;
    }

    setActiveElementAtomValue(elementId);
  }, [elementId, isActive]);
  var onMouseOver = useCallback(function (ev) {
    if (!element || element.type === "document") {
      return;
    }

    ev.stopPropagation();

    if (isHighlighted) {
      return;
    }

    setElementAtomValue({
      isHighlighted: true
    });
  }, [elementId]);
  var onMouseOut = useCallback(function () {
    if (!element || element.type === "document") {
      return;
    }

    setElementAtomValue({
      isHighlighted: false
    });
  }, [elementId]);

  var renderDraggable = function renderDraggable(_ref2) {
    var drag = _ref2.drag;
    return /*#__PURE__*/React.createElement("div", {
      ref: drag,
      className: "type " + typeStyle
    }, /*#__PURE__*/React.createElement("div", {
      className: "background",
      onClick: onClick
    }), /*#__PURE__*/React.createElement("div", {
      className: "element-holder",
      onClick: onClick
    }, renderPlugins("pb-editor-page-element-action", {
      element: element,
      plugin: plugin
    }), /*#__PURE__*/React.createElement("span", null, plugin.elementType)));
  };

  if (!plugin) {
    return null;
  }

  var renderedPlugin = tryRenderingPlugin(function () {
    return plugin.render({
      element: element,
      isActive: isActive
    });
  });
  var isDraggable = Array.isArray(plugin.target) && plugin.target.length > 0;
  return /*#__PURE__*/React.createElement(Transition, {
    in: true,
    timeout: 250,
    appear: true
  }, function (state) {
    return /*#__PURE__*/React.createElement(ElementContainer, {
      id: element.id,
      onMouseOver: onMouseOver,
      onMouseOut: onMouseOut,
      highlight: isActive ? true : isHighlighted,
      active: isActive,
      style: _objectSpread(_objectSpread({}, defaultStyle), transitionStyles[state]),
      className: "webiny-pb-page-element-container"
    }, /*#__PURE__*/React.createElement("div", {
      className: ["innerWrapper", className].filter(function (c) {
        return c;
      }).join(" ")
    }, /*#__PURE__*/React.createElement(Draggable, {
      enabled: isDraggable,
      target: plugin.target,
      beginDrag: beginDrag,
      endDrag: endDrag
    }, renderDraggable), renderedPlugin));
  });
};

var withHighlightElement = function withHighlightElement(Component) {
  return function withHighlightElementComponent(props) {
    var activeElementAtomValue = useRecoilValue(activeElementAtom);
    return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {
      isActive: activeElementAtomValue === props.id
    }));
  };
};

export default withHighlightElement( /*#__PURE__*/React.memo(ElementComponent));
//# sourceMappingURL=Element.js.map