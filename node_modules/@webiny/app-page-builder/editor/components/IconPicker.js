import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useCallback, useMemo, useState } from "react";
import { css } from "emotion";
import { plugins } from "@webiny/plugins";
import { Typography } from "@webiny/ui/Typography";
import { Grid } from "react-virtualized";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { DelayedOnChange } from "./DelayedOnChange";
import { Menu } from "@webiny/ui/Menu";
import { Input } from "@webiny/ui/Input";
import classNames from "classnames";
import { COLORS } from "../plugins/elementSettings/components/StyledComponents"; // Icons

import { ReactComponent as IconPickerIcon } from "@svgr/webpack!../assets/icons/icon-picker.svg";

var noop = function noop() {
  return null;
};

var gridItem = /*#__PURE__*/css({
  position: "relative",
  display: "flex",
  flexDirection: "column",
  justifyContent: "flex-start",
  boxSizing: "border-box",
  paddingTop: 15,
  alignItems: "center",
  textAlign: "center",
  cursor: "pointer",
  transform: "translateZ(0)",
  borderRadius: 2,
  color: "var(--mdc-theme-text-secondary-on-background)",
  transition: "all 0.5s cubic-bezier(0.165, 0.84, 0.44, 1)",
  "&::after": {
    boxShadow: "0 0.25rem 0.125rem 0 rgba(0,0,0,0.05)",
    transition: "opacity 0.5s cubic-bezier(0.165, 0.84, 0.44, 1)",
    content: '""',
    position: "absolute",
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    zIndex: -1,
    opacity: 0
  },
  "&:hover": {
    backgroundColor: "var(--mdc-theme-background)",
    color: "var(--mdc-theme-text-primary-on-background)",
    "&::after": {
      opacity: 1
    }
  },
  ">svg": {
    width: 42,
    marginBottom: 5
  }
}, "label:gridItem;");
var gridItemSelected = /*#__PURE__*/css({
  backgroundColor: "var(--mdc-theme-text-secondary-on-background)",
  color: "#FFFFFF",
  ">svg": {
    fill: "#FFFFFF"
  },
  "> .remove": {
    position: "absolute",
    width: "auto",
    marginBottom: "0",
    top: "2px",
    right: "5px"
  }
}, "label:gridItemSelected;");
var grid = /*#__PURE__*/css({
  padding: 20
}, "label:grid;");
var pickIcon = /*#__PURE__*/css({
  width: 50,
  textAlign: "center",
  cursor: "pointer"
}, "label:pickIcon;");
var searchInput = /*#__PURE__*/css({
  input: {
    padding: "20px 12px 20px",
    "&::placeholder": {
      opacity: "1 !important"
    }
  }
}, "label:searchInput;");
var iconPickerWrapper = /*#__PURE__*/css({
  display: "flex",
  justifyContent: "flex-end",
  height: 30,
  "& .mdc-menu-surface--anchor": {
    position: "static"
  },
  "& .button": {
    boxSizing: "border-box",
    width: 30,
    height: "100%",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: COLORS.lightGray,
    borderRadius: 1,
    border: "1px solid ".concat(COLORS.gray),
    cursor: "pointer",
    "&:hover:not(:disabled)": {
      borderColor: COLORS.darkGray,
      backgroundColor: COLORS.gray
    },
    "&:focus:not(:disabled)": {
      borderColor: COLORS.darkGray,
      outline: "none",
      backgroundColor: COLORS.gray
    },
    "&:disabled": {
      opacity: 0.5,
      cursor: "not-allowed",
      borderColor: COLORS.lightGray
    }
  },
  "& .iconContainer": {
    boxSizing: "border-box",
    width: 30,
    height: "100%",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: COLORS.lightGray,
    borderRadius: 1,
    border: "1px solid ".concat(COLORS.gray),
    "& svg": {
      width: 16,
      height: 16
    },
    "&.disabled": {
      pointerEvents: "none",
      opacity: 0.5
    }
  }
}, "label:iconPickerWrapper;");

var IconPicker = function IconPicker(_ref) {
  var value = _ref.value,
      onChange = _ref.onChange,
      _ref$removable = _ref.removable,
      removable = _ref$removable === void 0 ? true : _ref$removable,
      handlerClassName = _ref.handlerClassName,
      useInSidebar = _ref.useInSidebar,
      _ref$removeIcon = _ref.removeIcon,
      removeIcon = _ref$removeIcon === void 0 ? noop : _ref$removeIcon;

  var _useState = useState(""),
      _useState2 = _slicedToArray(_useState, 2),
      filter = _useState2[0],
      setFilter = _useState2[1]; // Icon "Grid" props


  var columnCount = useInSidebar ? 3 : 6;
  var columnWidth = useInSidebar ? 85 : 100;
  var gridWidth = useInSidebar ? 300 : 640;
  var onFilterChange = useCallback(function (value, cb) {
    setFilter(value.trim());
    cb();
  }, [filter]);

  var _useMemo = useMemo(function () {
    if (!value || Array.isArray(value) === false || !removable) {
      return {
        prefix: undefined,
        name: undefined
      };
    }

    return {
      prefix: value[0],
      name: value[1]
    };
  }, [value]),
      selectedIconPrefix = _useMemo.prefix,
      selectedIconName = _useMemo.name;

  var allIcons = useMemo(function () {
    var iconPlugins = plugins.byType("pb-icons");
    var selectedIconItem = null;
    var allIconItems = iconPlugins.reduce(function (icons, pl) {
      var pluginIcons = pl.getIcons().filter(function (_ref2) {
        var id = _ref2.id;

        var _id = _slicedToArray(id, 2),
            prefix = _id[0],
            name = _id[1];

        if (!selectedIconPrefix || !selectedIconName || prefix !== selectedIconPrefix) {
          return true;
        }

        return name !== selectedIconName;
      });
      var selectedIcon = pl.getIcons().find(function (_ref3) {
        var name = _ref3.name;
        return name === selectedIconName;
      });

      if (selectedIcon) {
        selectedIconItem = selectedIcon;
      }

      return icons.concat(pluginIcons);
    }, []);

    if (selectedIconItem) {
      allIconItems.unshift(selectedIconItem);
    }

    return allIconItems;
  }, [selectedIconPrefix, selectedIconName]);
  var icons = useMemo(function () {
    return filter ? allIcons.filter(function (ic) {
      return ic.name.includes(filter);
    }) : allIcons;
  }, [filter, selectedIconPrefix, selectedIconName]);
  var renderCell = useCallback(function (_ref4) {
    var closeMenu = _ref4.closeMenu;
    return function renderCell(_ref5) {
      var columnIndex = _ref5.columnIndex,
          key = _ref5.key,
          rowIndex = _ref5.rowIndex,
          style = _ref5.style;
      var item = icons[rowIndex * columnCount + columnIndex];

      if (!item) {
        return null;
      }

      var isSelectedIcon = item.id[0] === selectedIconPrefix && item.id[1] === selectedIconName;
      var gridItemClassName = classNames(gridItem, _defineProperty({}, gridItemSelected, isSelectedIcon));
      return /*#__PURE__*/React.createElement("div", {
        key: key,
        style: style,
        className: gridItemClassName,
        onClick: function onClick() {
          onChange(item);
          closeMenu();
        }
      }, isSelectedIcon && /*#__PURE__*/React.createElement("span", {
        className: "remove"
      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {
        icon: ["fas", "times"]
      })), /*#__PURE__*/React.createElement(FontAwesomeIcon, {
        icon: item.id,
        size: "2x"
      }), /*#__PURE__*/React.createElement(Typography, {
        use: "body2"
      }, item.name));
    };
  }, [icons]);
  var renderGrid = useCallback(function (_ref6) {
    var closeMenu = _ref6.closeMenu;
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DelayedOnChange, {
      value: filter,
      onChange: onFilterChange
    }, function (_ref7) {
      var value = _ref7.value,
          onChange = _ref7.onChange;
      return /*#__PURE__*/React.createElement(Input, {
        autoFocus: true,
        className: searchInput,
        value: value,
        onChange: onChange,
        placeholder: "Search icons..."
      });
    }), /*#__PURE__*/React.createElement(Grid, {
      className: grid,
      cellRenderer: renderCell({
        closeMenu: closeMenu
      }),
      columnCount: columnCount,
      columnWidth: columnWidth,
      height: 440,
      rowCount: Math.ceil(icons.length / columnCount),
      rowHeight: 100,
      width: gridWidth
    }));
  }, [icons]);

  if (useInSidebar) {
    var disableRemoveIcon = !value || !removable;
    return /*#__PURE__*/React.createElement("div", {
      className: iconPickerWrapper
    }, /*#__PURE__*/React.createElement(Menu, {
      handle: /*#__PURE__*/React.createElement("div", {
        className: classNames("button", "menuHandler", handlerClassName)
      }, /*#__PURE__*/React.createElement(IconPickerIcon, null))
    }, renderGrid), /*#__PURE__*/React.createElement("div", {
      className: classNames("button", "iconContainer", {
        disabled: disableRemoveIcon
      }),
      onClick: removeIcon
    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {
      icon: value || ["far", "star"],
      size: "2x"
    })));
  }

  return /*#__PURE__*/React.createElement(Menu, {
    handle: /*#__PURE__*/React.createElement("div", {
      className: classNames(pickIcon, handlerClassName)
    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {
      icon: value || ["far", "star"],
      size: "2x"
    }))
  }, renderGrid);
};

export default IconPicker;
//# sourceMappingURL=IconPicker.js.map