import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject;

import React, { useCallback, useEffect, useState } from "react";
import gql from "graphql-tag";
import { css } from "emotion";
import { useQuery } from "@apollo/react-hooks";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { Typography } from "@webiny/ui/Typography";
import { useEventActionHandler } from "../hooks/useEventActionHandler";
import { UpdateElementActionEvent } from "../recoil/actions";
import useRenderEmptyEmbed from "../plugins/elements/utils/oembed/useRenderEmptyEmbed";

function appendSDK(props) {
  var _element$data;

  var sdk = props.sdk,
      global = props.global,
      element = props.element;

  var _ref = (element === null || element === void 0 ? void 0 : (_element$data = element.data) === null || _element$data === void 0 ? void 0 : _element$data.source) || {},
      url = _ref.url;

  if (!sdk || !url || window[global]) {
    return Promise.resolve();
  }

  return new Promise(function (resolve) {
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.src = encodeURI(sdk);
    script.setAttribute("async", "");
    script.setAttribute("charset", "utf-8");
    script.onload = resolve;
    document.body.appendChild(script);
  });
}

function initEmbed(props) {
  var _element$data2, _element$data2$source;

  var sdk = props.sdk,
      init = props.init,
      element = props.element;

  if (sdk && element !== null && element !== void 0 && (_element$data2 = element.data) !== null && _element$data2 !== void 0 && (_element$data2$source = _element$data2.source) !== null && _element$data2$source !== void 0 && _element$data2$source.url) {
    var node = document.getElementById(element.id);

    if (typeof init === "function" && node) {
      init({
        props: props,
        node: node
      });
    }
  }
}

var oembedQuery = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    query GetOEmbedData($url: String!, $width: String, $height: String) {\n        pageBuilder {\n            oembedData(url: $url, width: $width, height: $height) {\n                data\n                error {\n                    code\n                    message\n                }\n            }\n        }\n    }\n"])));
var centerAlign = /*#__PURE__*/css({
  "*:first-of-type": {
    marginLeft: "auto !important",
    marginRight: "auto !important"
  }
}, "label:centerAlign;");
var errorElementStyle = /*#__PURE__*/css({
  color: "var(--mdc-theme-text-primary-on-background)",
  "& .component-name": {
    fontWeight: "bold"
  }
}, "label:errorElementStyle;");

var OEmbedComponent = function OEmbedComponent(props) {
  var _oembed$source;

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      errorMessage = _useState2[0],
      setErrorMessage = _useState2[1];

  var eventActionHandler = useEventActionHandler();

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var element = props.element,
      _props$onData = props.onData,
      onData = _props$onData === void 0 ? function (d) {
    return d;
  } : _props$onData;
  useEffect(function () {
    appendSDK(props).then(function () {
      return initEmbed(props);
    });
  });
  var source = element.data.source || {};
  var oembed = element.data.oembed || {};
  var sourceUrl = source.url;
  var oembedSourceUrl = (_oembed$source = oembed.source) === null || _oembed$source === void 0 ? void 0 : _oembed$source.url;
  var skip = !sourceUrl || sourceUrl === oembedSourceUrl;

  var _useQuery = useQuery(oembedQuery, {
    skip: skip,
    variables: source,
    onCompleted: function onCompleted(data) {
      if (skip) {
        return;
      }

      var _ref2 = data.pageBuilder.oembedData || {},
          oembed = _ref2.data,
          error = _ref2.error;

      if (oembed) {
        var newElement = _objectSpread(_objectSpread({}, element), {}, {
          data: _objectSpread(_objectSpread({}, element.data), {}, {
            oembed: onData(oembed)
          })
        });

        eventActionHandler.trigger(new UpdateElementActionEvent({
          element: newElement,
          history: true
        }));
      }

      if (error) {
        setErrorMessage(error.message);
        showSnackbar(error.message);
      }
    }
  }),
      loading = _useQuery.loading;

  var renderEmpty = useRenderEmptyEmbed(element);
  var renderEmbed = useCallback(function (targetElement, isLoading) {
    var _targetElement$data, _targetElement$data$o;

    if (typeof props.renderEmbed === "function") {
      return props.renderEmbed(props);
    }

    if (isLoading) {
      return /*#__PURE__*/React.createElement("div", null, "Loading embed data...");
    }

    if (errorMessage) {
      return /*#__PURE__*/React.createElement("details", {
        className: errorElementStyle
      }, /*#__PURE__*/React.createElement("summary", null, /*#__PURE__*/React.createElement(Typography, {
        use: "overline"
      }, "We couldn't embed your", " ", /*#__PURE__*/React.createElement("span", {
        className: "component-name"
      }, element.type), " URL! See the detailed error below.")), /*#__PURE__*/React.createElement(Typography, {
        use: "body2"
      }, errorMessage));
    }

    return /*#__PURE__*/React.createElement("div", {
      id: targetElement.id,
      className: centerAlign + " pb-editor-dragging--disabled pb-editor-resizing--disabled",
      dangerouslySetInnerHTML: {
        __html: ((_targetElement$data = targetElement.data) === null || _targetElement$data === void 0 ? void 0 : (_targetElement$data$o = _targetElement$data.oembed) === null || _targetElement$data$o === void 0 ? void 0 : _targetElement$data$o.html) || ""
      }
    });
  }, [element, loading, errorMessage]);
  return sourceUrl ? renderEmbed(element, loading) : renderEmpty();
};

export default /*#__PURE__*/React.memo(OEmbedComponent);
//# sourceMappingURL=OEmbed.js.map