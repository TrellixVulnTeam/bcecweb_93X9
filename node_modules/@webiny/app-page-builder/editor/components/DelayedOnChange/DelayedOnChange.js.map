{"version":3,"sources":["../../../../src/editor/components/DelayedOnChange/DelayedOnChange.ts"],"names":["React","useEffect","useState","emptyFunction","undefined","DelayedOnChange","children","other","onChange","delay","initialValue","value","setValue","localTimeout","useRef","applyValue","callback","current","clearTimeout","onChangeLocal","useCallback","onValueStateChanged","nextValue","setTimeout","newProps","renderProp","child","cloneElement","props","realOnKeyDown","onKeyDown","realOnBlur","onBlur","e","persist","target","key"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst emptyFunction = () => {\n    return undefined;\n};\n/**\n * This component is used to wrap Input and Textarea components to optimize form re-render.\n * These 2 are the only components that trigger form model change on each character input.\n * This means, whenever you type a letter an entire form re-renders.\n * On complex forms you will feel and see a significant delay if this component is not used.\n *\n * The logic behind this component is to serve as a middleware between Form and Input/Textarea, and only notify form of a change when\n * a user stops typing for given period of time (400ms by default).\n */\ntype Props = {\n    value?: string;\n    delay?: number;\n    onChange?: Function;\n    onBlur?: Function;\n    onKeyDown?: Function;\n};\nexport const DelayedOnChange: React.FunctionComponent<Props> = ({ children, ...other }) => {\n    const { onChange, delay = 400, value: initialValue } = other;\n    const [value, setValue] = useState<string>(initialValue);\n    // Sync state and props\n    useEffect(() => {\n        if (initialValue !== value) {\n            setValue(initialValue);\n        }\n    }, [initialValue]);\n\n    const localTimeout = React.useRef<number>(undefined);\n\n    const applyValue = (value: any, callback: Function = emptyFunction) => {\n        localTimeout.current && clearTimeout(localTimeout.current);\n        localTimeout.current = null;\n        onChange(value, callback);\n    };\n\n    const onChangeLocal = React.useCallback((value: string) => {\n        setValue(value);\n    }, []);\n\n    // this is fired upon change value state\n    const onValueStateChanged = (nextValue: string) => {\n        localTimeout.current && clearTimeout(localTimeout.current);\n        localTimeout.current = null;\n        localTimeout.current = setTimeout(() => applyValue(nextValue), delay) as unknown as number;\n    };\n\n    // need to clear the timeout when unmounting the component\n    useEffect(() => {\n        return () => {\n            if (!localTimeout.current) {\n                return;\n            }\n            clearTimeout(localTimeout.current);\n            localTimeout.current = null;\n        };\n    }, []);\n\n    useEffect(() => {\n        onValueStateChanged(value);\n    }, [value]);\n\n    const newProps = {\n        ...other,\n        value: value,\n        onChange: onChangeLocal\n    };\n\n    const renderProp = typeof children === \"function\" ? children : false;\n    const child = renderProp\n        ? renderProp(newProps)\n        : React.cloneElement(children as React.ReactElement, newProps);\n\n    const props = { ...child.props };\n    const realOnKeyDown = props.onKeyDown || emptyFunction;\n    const realOnBlur = props.onBlur || emptyFunction;\n\n    // Need to apply value if input lost focus\n    const onBlur = e => {\n        e.persist();\n        applyValue(e.target.value, () => realOnBlur(e));\n    };\n\n    // Need to listen for TAB key to apply new value immediately, without delay. Otherwise validation will be triggered with old value.\n    const onKeyDown = e => {\n        e.persist();\n        if (e.key === \"Tab\") {\n            applyValue(e.target.value, () => realOnKeyDown(e));\n        } else if (e.key === \"Enter\" && props[\"data-on-enter\"]) {\n            applyValue(e.target.value, () => realOnKeyDown(e));\n        } else {\n            realOnKeyDown(e);\n        }\n    };\n\n    return React.cloneElement(child, { ...props, onBlur, onKeyDown });\n};\n\nexport default DelayedOnChange;\n"],"file":"DelayedOnChange.js"}