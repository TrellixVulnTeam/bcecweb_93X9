import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import React, { useEffect, createElement } from "react";
import MediumEditor from "medium-editor";
import { css } from "emotion";
var editorClass = /*#__PURE__*/css({
  width: "100%",
  "&:focus": {
    outline: "none"
  }
}, "label:editorClass;");

var ReactMediumEditor = function ReactMediumEditor(_ref) {
  var _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? "div" : _ref$tag,
      value = _ref.value,
      onChange = _ref.onChange,
      options = _ref.options,
      onSelect = _ref.onSelect;
  var elementRef = React.useRef();
  var editorRef = React.useRef();

  var handleChange = function handleChange(data, editable) {
    if (typeof onChange === "function") {
      onChange(editable.innerHTML);
    }
  };

  var handleSelect = function handleSelect() {
    if (typeof onSelect === "function") {
      onSelect();
    }
  };
  /**
   * Here we're recreating the "Medium editor" whenever the "tag" changes because that's the element editor is mounted on.
   */


  useEffect(function () {
    if (!elementRef && !elementRef.current) {
      return;
    } // Create "MediumEditor" instance


    editorRef.current = new MediumEditor(elementRef.current, _objectSpread(_objectSpread({
      extensions: {
        // https://github.com/yabwe/medium-editor#disable-file-dragging
        // Disable file dragging by providing a dummy ImageDragging extension.
        imageDragging: {}
      }
    }, options), {}, {
      toolbar: _objectSpread(_objectSpread({}, options.toolbar), {}, {
        buttons: [].concat(_toConsumableArray(options.toolbar.buttons), ["removeFormat"])
      })
    }));
    editorRef.current.subscribe("blur", handleChange);
    editorRef.current.subscribe("editableInput", handleSelect);
    return function () {
      editorRef.current.destroy();
    };
  }, [options, tag]);
  return /*#__PURE__*/createElement(tag, {
    dangerouslySetInnerHTML: {
      __html: value
    },
    ref: elementRef,
    className: editorClass
  });
};

export default /*#__PURE__*/React.memo(ReactMediumEditor);
//# sourceMappingURL=index.js.map