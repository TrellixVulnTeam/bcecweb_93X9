import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useCallback, useMemo } from "react";
import { useRecoilState, useRecoilValue } from "recoil";
import get from "lodash/get";
import classNames from "classnames";
import { elementWithChildrenByIdSelector, activeElementAtom, uiAtom } from "../recoil/modules";
import { ElementRoot } from "../../render/components/ElementRoot";
import useUpdateHandlers from "../plugins/elementSettings/useUpdateHandlers";
import ReactMediumEditor from "../components/MediumEditor";
import { applyFallbackDisplayMode } from "../plugins/elementSettings/elementSettingsUtils";
export var textClassName = "webiny-pb-base-page-element-style webiny-pb-page-element-text";
var DATA_NAMESPACE = "data.text";

var Text = function Text(_ref) {
  var elementId = _ref.elementId,
      editorOptions = _ref.editorOptions,
      rootClassName = _ref.rootClassName;
  var element = useRecoilValue(elementWithChildrenByIdSelector(elementId));

  var _useRecoilState = useRecoilState(uiAtom),
      _useRecoilState2 = _slicedToArray(_useRecoilState, 1),
      displayMode = _useRecoilState2[0].displayMode;

  var _useRecoilState3 = useRecoilState(activeElementAtom),
      _useRecoilState4 = _slicedToArray(_useRecoilState3, 2),
      activeElementId = _useRecoilState4[0],
      setActiveElementAtomValue = _useRecoilState4[1];

  var _useUpdateHandlers = useUpdateHandlers({
    element: element,
    dataNamespace: DATA_NAMESPACE
  }),
      getUpdateValue = _useUpdateHandlers.getUpdateValue;

  var fallbackValue = useMemo(function () {
    return applyFallbackDisplayMode(displayMode, function (mode) {
      return get(element, "".concat(DATA_NAMESPACE, ".").concat(mode));
    });
  }, [displayMode]);
  var value = get(element, "".concat(DATA_NAMESPACE, ".").concat(displayMode), fallbackValue);
  var onChange = useCallback(function (value) {
    getUpdateValue(DATA_NAMESPACE)(value);
  }, [getUpdateValue]);
  var onSelect = useCallback(function () {
    // Mark element active on editor element selection
    if (elementId && activeElementId !== elementId) {
      setActiveElementAtomValue(elementId);
    }
  }, [activeElementId, elementId]); // required due to re-rendering when set content atom and still nothing in elements atom

  if (!element) {
    return null;
  }

  var textContent = get(element, "".concat(DATA_NAMESPACE, ".data.text"));
  var tag = get(value, "tag");
  var typography = get(value, "typography");
  return /*#__PURE__*/React.createElement(ElementRoot, {
    element: element,
    className: classNames(textClassName, rootClassName, typography)
  }, /*#__PURE__*/React.createElement(ReactMediumEditor, {
    elementId: elementId,
    tag: tag,
    value: textContent,
    onChange: onChange,
    options: editorOptions,
    onSelect: onSelect
  }));
};

export default /*#__PURE__*/React.memo(Text);
//# sourceMappingURL=Text.js.map