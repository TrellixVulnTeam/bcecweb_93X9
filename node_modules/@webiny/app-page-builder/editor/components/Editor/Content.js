import _createForOfIteratorHelper from "@babel/runtime/helpers/createForOfIteratorHelper";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useEffect, useRef, useMemo, useCallback } from "react";
import { useRecoilState, useRecoilValue } from "recoil";
import styled from "@emotion/styled";
import { css } from "emotion";
import kebabCase from "lodash/kebabCase";
import { plugins } from "@webiny/plugins";
import { Elevation } from "@webiny/ui/Elevation";
import { isPluginActiveSelector, layoutSelector, uiAtom, setPagePreviewDimensionMutation, rootElementAtom, elementsAtom } from "../../recoil/modules";
import { usePageBuilder } from "../../../hooks/usePageBuilder";
import Element from "../Element";
var BREADCRUMB_HEIGHT = 33;
var ContentContainer = /*#__PURE__*/styled("div", {
  target: "e1q1altr0",
  label: "ContentContainer"
})(function (_ref) {
  var _colors;

  var theme = _ref.theme;
  return {
    backgroundColor: theme === null || theme === void 0 ? void 0 : (_colors = theme.colors) === null || _colors === void 0 ? void 0 : _colors.background,
    position: "relative",
    margin: "0 auto",
    ".webiny-pb-page-document": {
      overflowY: "visible",
      // cuts off the block selector tooltip
      overflowX: "visible",
      // We need this extra spacing so that editor content won't get cutoff
      paddingBottom: BREADCRUMB_HEIGHT
    }
  };
});
var contentContainerWrapper = /*#__PURE__*/css({
  margin: "95px 65px 50px 85px",
  padding: 0,
  position: "absolute",
  width: "calc(100vw - 115px - 300px)",
  //overflow: "hidden", // cuts off the block selector tooltip
  top: 0,
  boxSizing: "border-box",
  zIndex: 1
}, "label:contentContainerWrapper;");
var BaseContainer = /*#__PURE__*/styled("div", {
  target: "e1q1altr1",
  label: "BaseContainer"
})({
  width: "100%",
  left: 52,
  margin: "0 auto"
});

var renderContent = function renderContent(layout, rootElement, render) {
  var content = /*#__PURE__*/React.createElement(Element, {
    id: rootElement.id
  });

  if (!render) {
    return content;
  }

  return /*#__PURE__*/React.createElement(layout.component, null, content);
};

var Content = function Content() {
  var rootElementId = useRecoilValue(rootElementAtom);
  var rootElement = useRecoilValue(elementsAtom(rootElementId));
  var renderLayout = useRecoilValue(isPluginActiveSelector("pb-editor-toolbar-preview"));
  var layout = useRecoilValue(layoutSelector);

  var _useRecoilState = useRecoilState(uiAtom),
      _useRecoilState2 = _slicedToArray(_useRecoilState, 2),
      displayMode = _useRecoilState2[0].displayMode,
      setUiAtomValue = _useRecoilState2[1];

  var pagePreviewRef = useRef();
  var setPagePreviewDimension = useCallback(function (pagePreviewDimension) {
    setUiAtomValue(function (prev) {
      return setPagePreviewDimensionMutation(prev, pagePreviewDimension);
    });
  }, [uiAtom]);
  var resizeObserver = useMemo(function () {
    return new ResizeObserver(function (entries) {
      var _iterator = _createForOfIteratorHelper(entries),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var entry = _step.value;
          var _entry$contentRect = entry.contentRect,
              width = _entry$contentRect.width,
              height = _entry$contentRect.height;
          setPagePreviewDimension({
            width: width,
            height: height
          });
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    });
  }, []); // Set resize observer

  useEffect(function () {
    if (pagePreviewRef.current) {
      // Add resize observer
      resizeObserver.observe(pagePreviewRef.current);
    } // Cleanup


    return function () {
      resizeObserver.disconnect();
    };
  }, []);

  var _usePageBuilder = usePageBuilder(),
      theme = _usePageBuilder.theme;

  var pluginsByType = plugins.byType("pb-editor-content");
  var layouts = React.useMemo(function () {
    var layoutPlugins = plugins.byType("pb-page-layout");
    return layoutPlugins.map(function (pl) {
      return pl.layout;
    });
  }, []);
  var themeLayout = layouts.find(function (l) {
    return l.name === layout;
  });

  if (renderLayout && !themeLayout) {
    return /*#__PURE__*/React.createElement("div", null, "Layout \"", layout, "\" was not found in your theme!");
  }

  return /*#__PURE__*/React.createElement(Elevation, {
    className: contentContainerWrapper,
    z: 0
  }, /*#__PURE__*/React.createElement(ContentContainer, {
    theme: theme,
    className: "mdc-elevation--z1 webiny-pb-editor-device--".concat(kebabCase(displayMode), " webiny-pb-media-query--").concat(kebabCase(displayMode))
  }, pluginsByType.map(function (plugin) {
    return /*#__PURE__*/React.cloneElement(plugin.render(), {
      key: plugin.name
    });
  }), /*#__PURE__*/React.createElement(BaseContainer, {
    ref: pagePreviewRef,
    className: "webiny-pb-editor-content-preview"
  }, renderContent(themeLayout, rootElement, renderLayout))));
};

export default Content;
//# sourceMappingURL=Content.js.map