import _createForOfIteratorHelper from "@babel/runtime/helpers/createForOfIteratorHelper";
import React, { useEffect } from "react";
import HTML5Backend from "react-dnd-html5-backend";
import classSet from "classnames";
import { useEventActionHandler } from "../../hooks/useEventActionHandler";
import { rootElementAtom, revisionsAtom, uiAtom } from "../../recoil/modules";
import { useRecoilValue, useSetRecoilState } from "recoil";
import { DndProvider } from "react-dnd";
import { useKeyHandler } from "../../hooks/useKeyHandler";
import { plugins } from "@webiny/plugins";
import "./Editor.scss"; // Components

import EditorBar from "./Bar";
import EditorToolbar from "./Toolbar";
import EditorContent from "./Content";
import DragPreview from "./DragPreview";
import Dialogs from "./Dialogs";
import EditorSideBar from "./EditorSideBar";

var registerPlugins = function registerPlugins(handler) {
  var registry = new Map();
  var editorEventActionPlugins = plugins.byType("pb-editor-event-action-plugin");

  var _iterator = _createForOfIteratorHelper(editorEventActionPlugins),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var pl = _step.value;

      if (!pl.name) {
        throw new Error("All plugins with type \"pb-editor-event-action-plugin\" must have a name.");
      }

      registry.set(pl.name, pl.onEditorMount(handler));
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return registry;
};

var unregisterPlugins = function unregisterPlugins(handler, registered) {
  var _iterator2 = _createForOfIteratorHelper(registered.keys()),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var name = _step2.value;
      var cb = registered.get(name);
      var pl = plugins.byName(name);

      if (typeof pl.onEditorUnmount === "function") {
        pl.onEditorUnmount(handler, cb);
        continue;
      }

      cb();
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
};

var triggerActionButtonClick = function triggerActionButtonClick(name) {
  var id = "#action-".concat(name);
  var element = document.querySelector(id);

  if (!element) {
    console.warn("There is no html element \"".concat(id, "\""));
    return;
  }

  element.click();
};

export var Editor = function Editor(_ref) {
  var revisions = _ref.revisions;
  var eventActionHandler = useEventActionHandler();

  var _useKeyHandler = useKeyHandler(),
      addKeyHandler = _useKeyHandler.addKeyHandler,
      removeKeyHandler = _useKeyHandler.removeKeyHandler;

  var _useRecoilValue = useRecoilValue(uiAtom),
      isDragging = _useRecoilValue.isDragging,
      isResizing = _useRecoilValue.isResizing;

  var setRevisionsAtomValue = useSetRecoilState(revisionsAtom);
  var rootElementId = useRecoilValue(rootElementAtom);
  var firstRender = React.useRef(true);
  var registeredPlugins = React.useRef();
  useEffect(function () {
    addKeyHandler("mod+z", function (e) {
      e.preventDefault();
      triggerActionButtonClick("undo");
    });
    addKeyHandler("mod+shift+z", function (e) {
      e.preventDefault();
      triggerActionButtonClick("redo");
    });
    registeredPlugins.current = registerPlugins(eventActionHandler);
    setRevisionsAtomValue(revisions);
    return function () {
      removeKeyHandler("mod+z");
      removeKeyHandler("mod+shift+z");
      unregisterPlugins(eventActionHandler, registeredPlugins.current);
    };
  }, []);
  useEffect(function () {
    if (!rootElementId || firstRender.current === true) {
      firstRender.current = false;
      return;
    }
  }, [rootElementId]);
  var classes = {
    "pb-editor": true,
    "pb-editor-dragging": isDragging,
    "pb-editor-resizing": isResizing
  };
  return /*#__PURE__*/React.createElement(DndProvider, {
    backend: HTML5Backend
  }, /*#__PURE__*/React.createElement("div", {
    className: classSet(classes)
  }, /*#__PURE__*/React.createElement(EditorBar, null), /*#__PURE__*/React.createElement(EditorToolbar, null), /*#__PURE__*/React.createElement(EditorContent, null), /*#__PURE__*/React.createElement(EditorSideBar, null), /*#__PURE__*/React.createElement(Dialogs, null), /*#__PURE__*/React.createElement(DragPreview, null)));
};
//# sourceMappingURL=Editor.js.map