{"version":3,"sources":["../../../../../src/editor/components/Editor/Sidebar/StyleSettingsTabContent.tsx"],"names":["React","styled","useElementStyleSettings","NoActiveElement","RootElement","height","overflowY","width","boxShadow","backgroundColor","outline","StyleSettingsTabContent","element","elementStyleSettings","length","map","index","plugin","options","cloneElement","render","key","defaultAccordionValue","memo"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,OAAOC,uBAAP;AACA,OAAOC,eAAP;;;AAIA,IAAMC,WAAW,gBAAGH,MAAH,CAAU,KAAV;AAAA;AAAA;AAAA,GAAiB;AAC9BI,EAAAA,MAAM,EAAE,2BADsB;AACO;AACrCC,EAAAA,SAAS,EAAE,MAFmB;AAG9B;AACA,0BAAwB;AACpBC,IAAAA,KAAK,EAAE;AADa,GAJM;AAO9B,gCAA8B;AAC1BC,IAAAA,SAAS,EAAE;AADe,GAPA;AAU9B,gCAA8B;AAC1BC,IAAAA,eAAe,EAAE,UADS;AAE1BC,IAAAA,OAAO,EAAE;AAFiB;AAVA,CAAjB,CAAjB;;AAkBA,IAAMC,uBAA8E,GAAG,SAAjFA,uBAAiF,OAEjF;AAAA,MADFC,OACE,QADFA,OACE;AACF,MAAMC,oBAAoB,GAAGX,uBAAuB,EAApD;;AAEA,MAAI,CAACU,OAAL,EAAc;AACV,wBACI,oBAAC,eAAD;AACI,MAAA,IAAI,eAAE,oBAAC,SAAD,OADV;AAEI,MAAA,OAAO,EAAE;AAFb,MADJ;AAMH;;AAED,sBACI,oBAAC,WAAD,QACKC,oBAAoB,CAACC,MAArB,GACGD,oBAAoB,CAACE,GAArB,CAAyB,iBAAsBC,KAAtB,EAAgC;AAAA,QAA7BC,MAA6B,SAA7BA,MAA6B;AAAA,QAArBC,OAAqB,SAArBA,OAAqB;AACrD,wBAAOlB,KAAK,CAACmB,YAAN,CAAmBF,MAAM,CAACG,MAAP,CAAc;AAAEF,MAAAA,OAAO,EAAPA;AAAF,KAAd,CAAnB,EAA+C;AAClDG,MAAAA,GAAG,EAAEL,KAD6C;AAElDM,MAAAA,qBAAqB,EAAEN,KAAK,KAAK;AAFiB,KAA/C,CAAP;AAIH,GALD,CADH,gBAQG,oBAAC,eAAD;AACI,IAAA,IAAI,eAAE,oBAAC,WAAD,OADV;AAEI,IAAA,OAAO,EAAE;AAFb,IATR,CADJ;AAiBH,CA/BD;;AAiCA,4BAAehB,KAAK,CAACuB,IAAN,CAAWZ,uBAAX,CAAf","sourcesContent":["import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { PbEditorElement } from \"../../../../types\";\nimport useElementStyleSettings from \"../../../plugins/elementSettings/hooks/useElementStyleSettings\";\nimport NoActiveElement from \"./NoActiveElement\";\nimport { ReactComponent as TouchIcon } from \"./icons/touch_app.svg\";\nimport { ReactComponent as WarningIcon } from \"./icons/warning-black.svg\";\n\nconst RootElement = styled(\"div\")({\n    height: \"calc(100vh - 65px - 48px)\", // Subtract top-bar and tab-header height\n    overflowY: \"auto\",\n    // Style scrollbar\n    \"&::-webkit-scrollbar\": {\n        width: 1\n    },\n    \"&::-webkit-scrollbar-track\": {\n        boxShadow: \"inset 0 0 6px rgba(0, 0, 0, 0.3)\"\n    },\n    \"&::-webkit-scrollbar-thumb\": {\n        backgroundColor: \"darkgrey\",\n        outline: \"1px solid slategrey\"\n    }\n});\n\ntype StyleSettingsTabContentProps = { element: PbEditorElement };\n\nconst StyleSettingsTabContent: React.FunctionComponent<StyleSettingsTabContentProps> = ({\n    element\n}) => {\n    const elementStyleSettings = useElementStyleSettings();\n\n    if (!element) {\n        return (\n            <NoActiveElement\n                icon={<TouchIcon />}\n                message={\"Select an element on the canvas to activate this panel.\"}\n            />\n        );\n    }\n\n    return (\n        <RootElement>\n            {elementStyleSettings.length ? (\n                elementStyleSettings.map(({ plugin, options }, index) => {\n                    return React.cloneElement(plugin.render({ options }), {\n                        key: index,\n                        defaultAccordionValue: index === 0\n                    });\n                })\n            ) : (\n                <NoActiveElement\n                    icon={<WarningIcon />}\n                    message={\"No style settings found for selected element.\"}\n                />\n            )}\n        </RootElement>\n    );\n};\n\nexport default React.memo(StyleSettingsTabContent);\n"],"file":"StyleSettingsTabContent.js"}