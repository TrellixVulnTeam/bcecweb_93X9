import React, { useEffect, useRef } from "react";
import { useRecoilValue } from "recoil";
import classNames from "classnames";
import styled from "@emotion/styled";
import { css } from "emotion";
import { Drawer, DrawerContent } from "@webiny/ui/Drawer";
import { plugins } from "@webiny/plugins";
import { useKeyHandler } from "../../hooks/useKeyHandler";
import { useEventActionHandler } from "../../hooks/useEventActionHandler";
import { DeactivatePluginActionEvent } from "../../recoil/actions";
import { activePluginsByTypeNamesSelector } from "../../recoil/modules";
var ToolbarDrawerContainer = /*#__PURE__*/styled("div", {
  target: "ekys0pl0",
  label: "ToolbarDrawerContainer"
})({
  top: 64,
  left: 0,
  position: "fixed",
  backgroundColor: "var(--mdc-theme-surface)",
  zIndex: 2
});
var ToolbarContainer = /*#__PURE__*/styled("div", {
  target: "ekys0pl1",
  label: "ToolbarContainer"
})({
  position: "fixed",
  display: "inline-block",
  padding: "2px 1px 2px 3px",
  width: 50,
  top: 64,
  height: "calc(100vh - 68px)",
  backgroundColor: "var(--mdc-theme-surface)",
  boxShadow: "1px 0px 5px 0px var(--mdc-theme-on-background)",
  zIndex: 3
});
var DrawerContainer = /*#__PURE__*/styled("div", {
  target: "ekys0pl2",
  label: "DrawerContainer"
})(function (_ref) {
  var open = _ref.open;
  return {
    pointerEvents: open ? "all" : "none",
    ".mdc-drawer__drawer": {
      "> .mdc-list": {
        padding: 0
      }
    }
  };
});
var ToolbarActions = /*#__PURE__*/styled("div", {
  target: "ekys0pl3",
  label: "ToolbarActions"
})({
  position: "relative",
  display: "flex",
  flexDirection: "column",
  justifyContent: "space-between",
  height: "100%"
});
var drawerStyle = /*#__PURE__*/css({
  zIndex: 10,
  "&.mdc-drawer--dismissible": {
    marginLeft: 54,
    position: "fixed",
    top: 64,
    width: "490px !important",
    maxWidth: "490px !important",
    ".mdc-drawer__content": {
      width: "100%"
    }
  }
}, "label:drawerStyle;");

var ToolbarDrawer = function ToolbarDrawer(_ref2) {
  var name = _ref2.name,
      active = _ref2.active,
      children = _ref2.children,
      drawerClassName = _ref2.drawerClassName;
  var eventActionHandler = useEventActionHandler();

  var _useKeyHandler = useKeyHandler(),
      removeKeyHandler = _useKeyHandler.removeKeyHandler,
      addKeyHandler = _useKeyHandler.addKeyHandler;

  var last = useRef({
    active: null
  });
  useEffect(function () {
    if (active && !last.current.active) {
      addKeyHandler("escape", function (e) {
        e.preventDefault();
        eventActionHandler.trigger(new DeactivatePluginActionEvent({
          name: name
        }));
      });
    }

    if (!active && last.current.active) {
      removeKeyHandler("escape");
    }
  });
  useEffect(function () {
    last.current = {
      active: active
    };
  });
  return /*#__PURE__*/React.createElement(DrawerContainer, {
    open: active
  }, /*#__PURE__*/React.createElement(Drawer, {
    dismissible: true,
    open: active,
    className: classNames(drawerStyle, drawerClassName)
  }, /*#__PURE__*/React.createElement(DrawerContent, null, children)));
};

var renderPlugin = function renderPlugin(plugin) {
  return /*#__PURE__*/React.cloneElement(plugin.renderAction(), {
    key: plugin.name
  });
};

var Toolbar = function Toolbar() {
  var activePluginsTop = useRecoilValue(activePluginsByTypeNamesSelector("pb-editor-toolbar-top"));
  var actionsTop = plugins.byType("pb-editor-toolbar-top");
  var actionsBottom = plugins.byType("pb-editor-toolbar-bottom");
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ToolbarDrawerContainer, null, actionsTop.filter(function (plugin) {
    return typeof plugin.renderDrawer === "function";
  }).map(function (plugin) {
    return /*#__PURE__*/React.createElement(ToolbarDrawer, {
      key: plugin.name,
      name: plugin.name,
      active: Boolean(activePluginsTop.includes(plugin.name)),
      drawerClassName: plugin.toolbar && plugin.toolbar.drawerClassName
    }, plugin.renderDrawer());
  })), /*#__PURE__*/React.createElement(ToolbarContainer, null, /*#__PURE__*/React.createElement(ToolbarActions, null, /*#__PURE__*/React.createElement("div", null, actionsTop.map(renderPlugin)), /*#__PURE__*/React.createElement("div", null, actionsBottom.map(renderPlugin)))));
};

export default /*#__PURE__*/React.memo(Toolbar);
//# sourceMappingURL=Toolbar.js.map