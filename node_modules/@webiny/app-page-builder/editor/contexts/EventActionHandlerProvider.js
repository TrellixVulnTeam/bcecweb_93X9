import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _createForOfIteratorHelper from "@babel/runtime/helpers/createForOfIteratorHelper";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { useApolloClient } from "@apollo/react-hooks";
import React, { createContext, useEffect, useMemo, useRef } from "react";
import merge from "lodash/merge";
import { plugins } from "@webiny/plugins";
import { rootElementAtom, elementsAtom, pageAtom, pluginsAtom, revisionsAtom, sidebarAtom, uiAtom, elementByIdSelector, activeElementAtom, highlightElementAtom } from "../recoil/modules";
import { useGotoRecoilSnapshot, useRecoilCallback, useRecoilSnapshot, useRecoilState, useRecoilValue, useSetRecoilState } from "recoil";
export var EventActionHandlerContext = /*#__PURE__*/createContext(null);

var createConfiguration = function createConfiguration(plugins) {
  return plugins.reduce(function (acc, pl) {
    return merge(acc, pl.config());
  }, {
    maxEventActionsNesting: 5
  });
};

var getEventActionClassName = function getEventActionClassName(target) {
  var cls = new target();
  var name = cls.getName();

  if (!name) {
    throw new Error("Could not find class name.");
  }

  return name;
};

var trackedAtoms = ["elements"];

var isTrackedAtomChanged = function isTrackedAtomChanged(state) {
  var _iterator = _createForOfIteratorHelper(trackedAtoms),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var atom = _step.value;

      if (!state[atom]) {
        continue;
      }

      return true;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return false;
};

export var EventActionHandlerProvider = function EventActionHandlerProvider(_ref) {
  var children = _ref.children;
  var apolloClient = useApolloClient();
  var setActiveElementAtomValue = useSetRecoilState(activeElementAtom);
  var setHighlightElementAtomValue = useSetRecoilState(highlightElementAtom);

  var _useRecoilState = useRecoilState(sidebarAtom),
      _useRecoilState2 = _slicedToArray(_useRecoilState, 2),
      sidebarAtomValue = _useRecoilState2[0],
      setSidebarAtomValue = _useRecoilState2[1];

  var rootElementAtomValue = useRecoilValue(rootElementAtom);

  var _useRecoilState3 = useRecoilState(pageAtom),
      _useRecoilState4 = _slicedToArray(_useRecoilState3, 2),
      pageAtomValue = _useRecoilState4[0],
      setPageAtomValue = _useRecoilState4[1];

  var _useRecoilState5 = useRecoilState(pluginsAtom),
      _useRecoilState6 = _slicedToArray(_useRecoilState5, 2),
      pluginsAtomValue = _useRecoilState6[0],
      setPluginsAtomValue = _useRecoilState6[1];

  var _useRecoilState7 = useRecoilState(uiAtom),
      _useRecoilState8 = _slicedToArray(_useRecoilState7, 2),
      uiAtomValue = _useRecoilState8[0],
      setUiAtomValue = _useRecoilState8[1];

  var revisionsAtomValue = useRecoilValue(revisionsAtom);
  var snapshot = useRecoilSnapshot();
  var eventActionHandlerRef = useRef(null);
  var sidebarAtomValueRef = useRef(null);
  var rootElementAtomValueRef = useRef(null);
  var pageAtomValueRef = useRef(null);
  var pluginsAtomValueRef = useRef(null);
  var uiAtomValueRef = useRef(null);
  var revisionsAtomValueRef = useRef(null);
  var snapshotRef = useRef(null);
  var eventElements = useRef({});
  var snapshotsHistory = useRef({
    past: [],
    future: [],
    present: null,
    busy: false,
    isBatching: false,
    isDisabled: false
  });
  var goToSnapshot = useGotoRecoilSnapshot();
  useEffect(function () {
    sidebarAtomValueRef.current = sidebarAtomValue;
    rootElementAtomValueRef.current = rootElementAtomValue;
    pageAtomValueRef.current = pageAtomValue;
    pluginsAtomValueRef.current = pluginsAtomValue;
    uiAtomValueRef.current = uiAtomValue;
    revisionsAtomValueRef.current = revisionsAtomValue;
    snapshotRef.current = snapshot;
  }, [sidebarAtomValue, rootElementAtomValue, pageAtomValue, pluginsAtomValue, uiAtomValue, revisionsAtomValue]);
  var registry = useRef(new Map());
  var config = useRef(createConfiguration(plugins.byType("pb-config")));
  var updateElements = useRecoilCallback(function (_ref2) {
    var set = _ref2.set;
    return function () {
      var elements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      elements.forEach(function (item) {
        set(elementsAtom(item.id), function (prevValue) {
          return _objectSpread(_objectSpread(_objectSpread({}, prevValue), item), {}, {
            parent: item.parent !== undefined ? item.parent : prevValue.parent
          });
        });
        return item.id;
      });
    };
  });
  var takeSnapshot = useRecoilCallback(function (_ref3) {
    var snapshot = _ref3.snapshot;
    return function () {
      return snapshot;
    };
  });

  var getElementTree = /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(element) {
      var path,
          _args2 = arguments;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              path = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : [];

              if (element) {
                _context2.next = 5;
                break;
              }

              _context2.next = 4;
              return getElementById(rootElementAtomValue);

            case 4:
              element = _context2.sent;

            case 5:
              if (element.parent) {
                path.push(element.parent);
              }

              _context2.t0 = element.id;
              _context2.t1 = element.type;
              _context2.t2 = element.data;
              _context2.next = 11;
              return Promise.all(element.elements.map( /*#__PURE__*/function () {
                var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(child) {
                  return _regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.t0 = getElementTree;
                          _context.next = 3;
                          return getElementById(child);

                        case 3:
                          _context.t1 = _context.sent;
                          _context.t2 = _toConsumableArray(path);
                          return _context.abrupt("return", (0, _context.t0)(_context.t1, _context.t2));

                        case 6:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }));

                return function (_x2) {
                  return _ref5.apply(this, arguments);
                };
              }()));

            case 11:
              _context2.t3 = _context2.sent;
              _context2.t4 = path;
              return _context2.abrupt("return", {
                id: _context2.t0,
                type: _context2.t1,
                data: _context2.t2,
                elements: _context2.t3,
                path: _context2.t4
              });

            case 14:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function getElementTree(_x) {
      return _ref4.apply(this, arguments);
    };
  }();

  var get = function get(name) {
    var list = registry.current.get(name);

    if (!list) {
      throw new Error("There is no event action group \"".concat(name, "\" defined."));
    }

    return list;
  };

  var set = function set(name, list) {
    registry.current.set(name, list);
  };

  var has = function has(name) {
    return registry.current.has(name);
  };

  var hasCb = function hasCb(list, callable) {
    var values = Array.from(list.values());
    return values.some(function (cb) {
      return cb === callable;
    });
  };

  var off = function off(id) {
    var registryItems = Array.from(registry.current.values());

    for (var _i = 0, _registryItems = registryItems; _i < _registryItems.length; _i++) {
      var list = _registryItems[_i];

      if (!list.has(id)) {
        continue;
      }

      return list.delete(id);
    }

    return false;
  };

  var getElementById = /*#__PURE__*/function () {
    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (!eventElements.current.hasOwnProperty(id)) {
                _context3.next = 2;
                break;
              }

              return _context3.abrupt("return", eventElements.current[id]);

            case 2:
              return _context3.abrupt("return", snapshotRef.current.getPromise(elementByIdSelector(id)));

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function getElementById(_x3) {
      return _ref6.apply(this, arguments);
    };
  }();

  var getCallableState = function getCallableState(state) {
    return _objectSpread({
      sidebar: sidebarAtomValueRef.current,
      rootElement: rootElementAtomValueRef.current,
      page: pageAtomValueRef.current,
      plugins: pluginsAtomValueRef.current,
      ui: uiAtomValueRef.current,
      revisions: revisionsAtomValueRef.current,
      getElementById: getElementById,
      getElementTree: getElementTree
    }, state);
  };

  var createStateHistorySnapshot = function createStateHistorySnapshot() {
    if (snapshotsHistory.current.busy === true) {
      return;
    }

    snapshotsHistory.current.busy = true; // when saving new state history we must remove everything after the current one
    // since this is the new starting point of the state history

    snapshotsHistory.current.future = [];
    snapshotsHistory.current.past.push(takeSnapshot());
    snapshotsHistory.current.present = null;
    snapshotsHistory.current.busy = false;
  };

  var saveCallablesResults = function saveCallablesResults(state) {
    var history = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    if (Object.values(state).length === 0) {
      return;
    } else if (history && snapshotsHistory.current.isBatching === false && snapshotsHistory.current.isDisabled === false && isTrackedAtomChanged(state)) {
      createStateHistorySnapshot();
    }

    if (state.ui) {
      setUiAtomValue(state.ui);
    }

    if (state.plugins) {
      setPluginsAtomValue(state.plugins);
    }

    if (state.page) {
      setPageAtomValue(state.page);
    }

    if (state.hasOwnProperty("activeElement")) {
      setActiveElementAtomValue(state.activeElement);
    }

    if (state.hasOwnProperty("highlightElement")) {
      setHighlightElementAtomValue(state.highlightElement);
    }

    if (state.elements) {
      updateElements(Object.values(state.elements));
    }

    if (state.sidebar) {
      setSidebarAtomValue(state.sidebar);
    }
  };

  eventActionHandlerRef.current = useMemo(function () {
    return {
      getElementTree: getElementTree,
      on: function on(target, callable) {
        var name = getEventActionClassName(target);

        if (!has(name)) {
          set(name, new Map());
        }

        var events = get(name);

        if (hasCb(events, callable)) {
          throw new Error("You cannot register event action \"".concat(name, "\" with identical function that already is registered."));
        }

        var id = Symbol("eventActionCb:".concat(name));
        events.set(id, callable);
        return function () {
          return off(id);
        };
      },
      trigger: function () {
        var _trigger = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(ev) {
          var results;
          return _regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return triggerEventAction(ev, {}, []);

                case 2:
                  results = _context4.sent;
                  saveCallablesResults(results.state);
                  return _context4.abrupt("return", results.state);

                case 5:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4);
        }));

        function trigger(_x4) {
          return _trigger.apply(this, arguments);
        }

        return trigger;
      }(),
      undo: function undo() {
        if (snapshotsHistory.current.busy === true) {
          return;
        }

        snapshotsHistory.current.busy = true;
        var previousSnapshot = snapshotsHistory.current.past.pop();

        if (!previousSnapshot) {
          snapshotsHistory.current.busy = false;
          return;
        }

        var futureSnapshot = snapshotsHistory.current.present || takeSnapshot();
        snapshotsHistory.current.future.unshift(futureSnapshot);
        snapshotsHistory.current.present = previousSnapshot;
        goToSnapshot(previousSnapshot);
        snapshotsHistory.current.busy = false;
      },
      redo: function redo() {
        if (snapshotsHistory.current.busy === true) {
          return;
        }

        snapshotsHistory.current.busy = true;
        var nextSnapshot = snapshotsHistory.current.future.shift();

        if (!nextSnapshot) {
          snapshotsHistory.current.present = null;
          snapshotsHistory.current.busy = false;
          return;
        } else if (snapshotsHistory.current.present) {
          snapshotsHistory.current.past.push(snapshotsHistory.current.present);
        }

        snapshotsHistory.current.present = nextSnapshot;
        goToSnapshot(nextSnapshot);
        snapshotsHistory.current.busy = false;
      },
      startBatch: function startBatch() {
        snapshotsHistory.current.isBatching = true;
      },
      endBatch: function endBatch() {
        snapshotsHistory.current.isBatching = false;
      },
      disableHistory: function disableHistory() {
        snapshotsHistory.current.isDisabled = true;
      },
      enableHistory: function enableHistory() {
        snapshotsHistory.current.isDisabled = false;
      }
    };
  }, []);

  var triggerEventAction = /*#__PURE__*/function () {
    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(ev, initialState, initiator) {
      var name, targetCallables, results, args, callables, _i2, _callables, _results$actions, cb, r, _iterator2, _step2, action, _r;

      return _regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (!(initiator.length >= config.current.maxEventActionsNesting)) {
                _context5.next = 2;
                break;
              }

              throw new Error("Max (".concat(config.current.maxEventActionsNesting, ") allowed levels of nesting actions reached: ").concat(initiator.join(" -> ")));

            case 2:
              if (initiator.length === 0) {
                // Reset elements taking part in the event processing at the beginning of the cycle
                eventElements.current = {};
              }

              name = ev.getName();

              if (has(name)) {
                _context5.next = 6;
                break;
              }

              throw new Error("There is no event action that is registered with name \"".concat(name, "\"."));

            case 6:
              targetCallables = get(name);
              results = {
                state: {},
                actions: []
              };

              if (targetCallables) {
                _context5.next = 10;
                break;
              }

              return _context5.abrupt("return", results);

            case 10:
              args = ev.getArgs();
              callables = Array.from(targetCallables.values());
              _i2 = 0, _callables = callables;

            case 13:
              if (!(_i2 < _callables.length)) {
                _context5.next = 26;
                break;
              }

              cb = _callables[_i2];
              _context5.next = 17;
              return cb(getCallableState(_objectSpread(_objectSpread({}, initialState), results.state)), {
                client: apolloClient,
                eventActionHandler: eventActionHandlerRef.current
              }, args);

            case 17:
              _context5.t0 = _context5.sent;

              if (_context5.t0) {
                _context5.next = 20;
                break;
              }

              _context5.t0 = {};

            case 20:
              r = _context5.t0;
              results.state = _objectSpread(_objectSpread({}, results.state), r.state || {});

              (_results$actions = results.actions).push.apply(_results$actions, _toConsumableArray(r.actions || []));

            case 23:
              _i2++;
              _context5.next = 13;
              break;

            case 26:
              eventElements.current = _objectSpread(_objectSpread({}, eventElements.current), results.state.elements);
              _iterator2 = _createForOfIteratorHelper(results.actions);
              _context5.prev = 28;

              _iterator2.s();

            case 30:
              if ((_step2 = _iterator2.n()).done) {
                _context5.next = 38;
                break;
              }

              action = _step2.value;
              _context5.next = 34;
              return triggerEventAction(action, getCallableState(_objectSpread(_objectSpread({}, initialState), results.state)), initiator.concat([name]));

            case 34:
              _r = _context5.sent;
              results.state = _objectSpread(_objectSpread({}, results.state || {}), _r.state || {});

            case 36:
              _context5.next = 30;
              break;

            case 38:
              _context5.next = 43;
              break;

            case 40:
              _context5.prev = 40;
              _context5.t1 = _context5["catch"](28);

              _iterator2.e(_context5.t1);

            case 43:
              _context5.prev = 43;

              _iterator2.f();

              return _context5.finish(43);

            case 46:
              return _context5.abrupt("return", results);

            case 47:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, null, [[28, 40, 43, 46]]);
    }));

    return function triggerEventAction(_x5, _x6, _x7) {
      return _ref7.apply(this, arguments);
    };
  }();

  return /*#__PURE__*/React.createElement(EventActionHandlerContext.Provider, {
    value: eventActionHandlerRef.current
  }, children);
};
//# sourceMappingURL=EventActionHandlerProvider.js.map