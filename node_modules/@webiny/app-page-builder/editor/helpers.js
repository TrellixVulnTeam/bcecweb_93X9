import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import invariant from "invariant";
import { customAlphabet } from "nanoid";
import { set } from "dot-prop-immutable";
import omit from "lodash/omit";
import { plugins } from "@webiny/plugins";
var ALPHANUMERIC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
export var getNanoid = customAlphabet(ALPHANUMERIC, 10);
export var flattenElements = function flattenElements(el) {
  var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
  var els = {};
  els[el.id] = set(el, "elements", (el.elements || []).map(function (child) {
    if (typeof child === "string") {
      return child;
    }

    var children = flattenElements(child, el.id);
    Object.keys(children).forEach(function (id) {
      els[id] = omit(children[id], ["path"]);
    });
    return child.id;
  }));
  els[el.id].parent = parent;
  return els;
};
export var createElement = function createElement(type) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var parent = arguments.length > 2 ? arguments[2] : undefined;
  var plugin = plugins.byType("pb-editor-page-element").find(function (pl) {
    return pl.elementType === type;
  });
  invariant(plugin, "Missing element plugin for type \"".concat(type, "\"!"));
  return _objectSpread({
    id: getNanoid(),
    data: {
      settings: {}
    },
    elements: [],
    parent: parent ? parent.id : undefined,
    type: type
  }, addElementId(plugin.create(options, parent)));
};
export var addElementToParent = function addElementToParent(element, parent, position) {
  if (position === undefined || position === null) {
    return _objectSpread(_objectSpread({}, parent), {}, {
      elements: [].concat(_toConsumableArray(parent.elements), [_objectSpread(_objectSpread({}, element), {}, {
        parent: parent.id
      })])
    });
  }

  return _objectSpread(_objectSpread({}, parent), {}, {
    elements: [].concat(_toConsumableArray(parent.elements.slice(0, position)), [_objectSpread(_objectSpread({}, element), {}, {
      parent: parent.id
    })], _toConsumableArray(parent.elements.slice(position)))
  });
};
export var createDroppedElement = function createDroppedElement(source, target) {
  if (source.id) {
    return {
      id: getNanoid(),
      type: source.type,
      elements: source.elements || [],
      data: source.data || {},
      parent: target.id
    };
  }

  return createElement(source.type, {}, target);
}; // Add unique id to elements recur

var addElementId = function addElementId(element) {
  element.id = getNanoid();

  if (Array.isArray(element.elements)) {
    element.elements = element.elements.map(function (el) {
      return addElementId(el);
    });
  }

  return element;
};

export var createBlockElements = function createBlockElements(name) {
  var plugin = plugins.byName(name);
  invariant(plugin, "Missing block plugin \"".concat(name, "\"!"));
  return _objectSpread({
    id: getNanoid(),
    data: {},
    elements: []
  }, addElementId(plugin.create()));
};
export var userElementSettingsPlugins = function userElementSettingsPlugins(elementType) {
  return plugins.byType("pb-editor-page-element-settings").filter(function (pl) {
    if (typeof pl.elements === "boolean") {
      return pl.elements === true;
    }

    if (Array.isArray(pl.elements)) {
      return pl.elements.includes(elementType);
    }

    return false;
  }).map(function (pl) {
    return pl.name;
  });
};
export var userElementStyleSettingsPlugins = function userElementStyleSettingsPlugins(elementType) {
  return plugins.byType("pb-editor-page-element-style-settings").filter(function (pl) {
    if (typeof pl.elements === "boolean") {
      return pl.elements === true;
    }

    if (Array.isArray(pl.elements)) {
      return pl.elements.includes(elementType);
    }

    return false;
  }).map(function (pl) {
    return pl.name;
  });
};
export var createEmptyElement = function createEmptyElement(_ref) {
  var id = _ref.id,
      type = _ref.type;
  return {
    id: id,
    type: type,
    data: {
      settings: {}
    },
    elements: []
  };
};
export var updateBlockPosition = function updateBlockPosition(_ref2) {
  var parent = _ref2.parent,
      sourcePosition = _ref2.sourcePosition,
      targetPosition = _ref2.targetPosition;

  if (sourcePosition === targetPosition) {
    return parent;
  }

  return _objectSpread(_objectSpread({}, parent), {}, {
    elements: moveInPlace(parent.elements, sourcePosition, targetPosition)
  });
};
export var moveInPlace = function moveInPlace(arr, from, to) {
  var newArray = _toConsumableArray(arr);

  var _newArray$splice = newArray.splice(from, 1),
      _newArray$splice2 = _slicedToArray(_newArray$splice, 1),
      item = _newArray$splice2[0];

  newArray.splice(to, 0, item);
  return newArray;
};
//# sourceMappingURL=helpers.js.map