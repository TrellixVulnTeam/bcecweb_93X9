import { DragObjectWithTypeWithTarget } from "./components/Droppable";
import { PbEditorElement } from "../types";
export declare const getNanoid: () => string;
declare type FlattenElementsType = {
    [id: string]: PbEditorElement;
};
export declare const flattenElements: (el: any, parent?: any) => FlattenElementsType;
interface CreateElement {
    (type: string, options?: {
        [key: string]: any;
    }, parent?: PbEditorElement): PbEditorElement;
}
export declare const createElement: CreateElement;
export declare const addElementToParent: (element: PbEditorElement, parent: PbEditorElement, position?: number) => PbEditorElement;
export declare const createDroppedElement: (source: DragObjectWithTypeWithTarget, target: PbEditorElement) => PbEditorElement;
export declare const createBlockElements: (name: string) => {
    id: string;
    data: {};
    elements: any[];
};
export declare const userElementSettingsPlugins: (elementType: string) => string[];
export declare const userElementStyleSettingsPlugins: (elementType: string) => string[];
declare type CreateEmptyElementCallableType = (args: Pick<PbEditorElement, "id" | "type">) => PbEditorElement;
export declare const createEmptyElement: CreateEmptyElementCallableType;
export declare const updateBlockPosition: ({ parent, sourcePosition, targetPosition }: {
    parent: any;
    sourcePosition: any;
    targetPosition: any;
}) => any;
export declare const moveInPlace: (arr: any[], from: number, to: number) => any[];
export {};
