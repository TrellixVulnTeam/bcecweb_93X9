import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { UpdateElementActionEvent } from "..";
import { getNanoid } from "../../../helpers";
export var cloneElement = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(state, element) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.t0 = _objectSpread;
            _context2.t1 = _objectSpread({}, element);
            _context2.t2 = {};
            _context2.t3 = getNanoid();
            _context2.next = 6;
            return Promise.all(element.elements.map( /*#__PURE__*/function () {
              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(el) {
                return _regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.t0 = cloneElement;
                        _context.t1 = state;
                        _context.next = 4;
                        return state.getElementById(el);

                      case 4:
                        _context.t2 = _context.sent;
                        return _context.abrupt("return", (0, _context.t0)(_context.t1, _context.t2));

                      case 6:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              return function (_x3) {
                return _ref2.apply(this, arguments);
              };
            }()));

          case 6:
            _context2.t4 = _context2.sent;
            _context2.t5 = {
              id: _context2.t3,
              elements: _context2.t4
            };
            return _context2.abrupt("return", (0, _context2.t0)(_context2.t1, _context2.t2, _context2.t5));

          case 9:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function cloneElement(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
export var cloneElementAction = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(state, meta, _ref3) {
    var element, parent, position, newElement;
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            element = _ref3.element;
            _context3.next = 3;
            return state.getElementById(element.parent);

          case 3:
            parent = _context3.sent;
            position = parent.elements.findIndex(function (el) {
              return el === element.id;
            }) + 1;
            _context3.t0 = _objectSpread;
            _context3.t1 = _objectSpread({}, parent);
            _context3.t2 = {};
            _context3.t3 = [];
            _context3.t4 = _toConsumableArray(parent.elements.slice(0, position));
            _context3.next = 12;
            return cloneElement(state, element);

          case 12:
            _context3.t5 = _context3.sent;
            _context3.t6 = [_context3.t5];
            _context3.t7 = _toConsumableArray(position < parent.elements.length ? parent.elements.slice(position) : []);
            _context3.t8 = _context3.t3.concat.call(_context3.t3, _context3.t4, _context3.t6, _context3.t7);
            _context3.t9 = {
              elements: _context3.t8
            };
            newElement = (0, _context3.t0)(_context3.t1, _context3.t2, _context3.t9);
            return _context3.abrupt("return", {
              state: {},
              actions: [new UpdateElementActionEvent({
                element: newElement,
                history: true,
                triggerUpdateElementTree: true
              })]
            });

          case 19:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function cloneElementAction(_x4, _x5, _x6) {
    return _ref4.apply(this, arguments);
  };
}();
//# sourceMappingURL=action.js.map