{"version":3,"sources":["../../../../../src/editor/recoil/actions/cloneElement/action.ts"],"names":["UpdateElementActionEvent","getNanoid","cloneElement","state","element","Promise","all","elements","map","el","getElementById","id","cloneElementAction","meta","parent","position","findIndex","slice","length","newElement","actions","history","triggerUpdateElementTree"],"mappings":";;;;AAAA,SAASA,wBAAT,QAAyC,IAAzC;AAGA,SAASC,SAAT;AAEA,OAAO,IAAMC,YAAY;AAAA,sEAAG,kBAAOC,KAAP,EAAcC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEhBA,OAFgB;AAAA;AAAA,2BAGhBH,SAAS,EAHO;AAAA;AAAA,mBAIJI,OAAO,CAACC,GAAR,CACZF,OAAO,CAACG,QAAR,CAAiBC,GAAjB;AAAA,mFAAqB,iBAAMC,EAAN;AAAA;AAAA;AAAA;AAAA;AAAA,sCACVP,YADU;AAAA,sCACGC,KADH;AAAA;AAAA,+BACgBA,KAAK,CAACO,cAAN,CAAqBD,EAArB,CADhB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAArB;;AAAA;AAAA;AAAA;AAAA,gBADY,CAJI;;AAAA;AAAA;AAAA;AAGpBE,cAAAA,EAHoB;AAIpBJ,cAAAA,QAJoB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZL,YAAY;AAAA;AAAA;AAAA,GAAlB;AAYP,OAAO,IAAMU,kBAAmE;AAAA,uEAAG,kBAC/ET,KAD+E,EAE/EU,IAF+E;AAAA;AAAA;AAAA;AAAA;AAAA;AAG7ET,YAAAA,OAH6E,SAG7EA,OAH6E;AAAA;AAAA,mBAK1DD,KAAK,CAACO,cAAN,CAAqBN,OAAO,CAACU,MAA7B,CAL0D;;AAAA;AAKzEA,YAAAA,MALyE;AAMzEC,YAAAA,QANyE,GAM9DD,MAAM,CAACP,QAAP,CAAgBS,SAAhB,CAA0B,UAAAP,EAAE;AAAA,qBAAIA,EAAE,KAAKL,OAAO,CAACO,EAAnB;AAAA,aAA5B,IAAqD,CANS;AAAA;AAAA,6CASxEG,MATwE;AAAA;AAAA;AAAA,8CAWpEA,MAAM,CAACP,QAAP,CAAgBU,KAAhB,CAAsB,CAAtB,EAAyBF,QAAzB,CAXoE;AAAA;AAAA,mBAYjEb,YAAY,CAACC,KAAD,EAAQC,OAAR,CAZqD;;AAAA;AAAA;AAAA;AAAA,8CAanEW,QAAQ,GAAGD,MAAM,CAACP,QAAP,CAAgBW,MAA3B,GAAoCJ,MAAM,CAACP,QAAP,CAAgBU,KAAhB,CAAsBF,QAAtB,CAApC,GAAsE,EAbH;AAAA;AAAA;AAU3ER,cAAAA,QAV2E;AAAA;AAQzEY,YAAAA,UARyE;AAAA,8CAiBxE;AACHhB,cAAAA,KAAK,EAAE,EADJ;AAEHiB,cAAAA,OAAO,EAAE,CACL,IAAIpB,wBAAJ,CAA6B;AACzBI,gBAAAA,OAAO,EAAEe,UADgB;AAEzBE,gBAAAA,OAAO,EAAE,IAFgB;AAGzBC,gBAAAA,wBAAwB,EAAE;AAHD,eAA7B,CADK;AAFN,aAjBwE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAnEV,kBAAmE;AAAA;AAAA;AAAA,GAAzE","sourcesContent":["import { UpdateElementActionEvent } from \"..\";\nimport { EventActionCallable, PbEditorElement } from \"../../../../types\";\nimport { CloneElementActionArgsType } from \"../cloneElement/types\";\nimport { getNanoid } from \"../../../helpers\";\n\nexport const cloneElement = async (state, element: PbEditorElement): Promise<PbEditorElement> => {\n    return {\n        ...(element as PbEditorElement),\n        id: getNanoid(),\n        elements: await Promise.all(\n            element.elements.map(async el => {\n                return cloneElement(state, await state.getElementById(el));\n            })\n        )\n    };\n};\n\nexport const cloneElementAction: EventActionCallable<CloneElementActionArgsType> = async (\n    state,\n    meta,\n    { element }\n) => {\n    const parent = await state.getElementById(element.parent);\n    const position = parent.elements.findIndex(el => el === element.id) + 1;\n\n    const newElement: any = {\n        ...parent,\n        elements: [\n            ...parent.elements.slice(0, position),\n            await cloneElement(state, element),\n            ...(position < parent.elements.length ? parent.elements.slice(position) : [])\n        ]\n    };\n\n    return {\n        state: {},\n        actions: [\n            new UpdateElementActionEvent({\n                element: newElement,\n                history: true,\n                triggerUpdateElementTree: true\n            })\n        ]\n    };\n};\n"],"file":"action.js"}