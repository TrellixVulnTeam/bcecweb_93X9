import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import { plugins } from "@webiny/plugins";
export var togglePluginAction = function togglePluginAction(state, meta, args) {
  var name = args.name,
      _args$params = args.params,
      params = _args$params === void 0 ? {} : _args$params,
      _args$closeOtherInGro = args.closeOtherInGroup,
      closeOtherInGroup = _args$closeOtherInGro === void 0 ? false : _args$closeOtherInGro;
  var plugin = plugins.byName(name);

  if (!plugin) {
    throw new Error("There is no plugin with name \"".concat(name, "\"."));
  }

  var pluginsAtomValue = state.plugins;
  var activePluginsByType = pluginsAtomValue[plugin.type] || [];
  var isAlreadyActive = activePluginsByType.some(function (pl) {
    return pl.name === name;
  });
  var newPluginsList;

  if (isAlreadyActive) {
    newPluginsList = activePluginsByType.filter(function (pl) {
      return pl.name !== name;
    });
  } else if (closeOtherInGroup) {
    newPluginsList = [{
      name: name,
      params: params
    }];
  } else {
    newPluginsList = activePluginsByType.concat([{
      name: name,
      params: params
    }]);
  }

  return {
    state: {
      plugins: _objectSpread(_objectSpread({}, pluginsAtomValue), {}, _defineProperty({}, plugin.type, newPluginsList))
    }
  };
};
//# sourceMappingURL=action.js.map