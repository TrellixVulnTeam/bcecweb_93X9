{"version":3,"sources":["../../../../../src/editor/recoil/actions/togglePlugin/action.ts"],"names":["plugins","togglePluginAction","state","meta","args","name","params","closeOtherInGroup","plugin","byName","Error","pluginsAtomValue","activePluginsByType","type","isAlreadyActive","some","pl","newPluginsList","filter","concat"],"mappings":";;AACA,SAASA,OAAT,QAAwB,iBAAxB;AAGA,OAAO,IAAMC,kBAAmE,GAAG,SAAtEA,kBAAsE,CAC/EC,KAD+E,EAE/EC,IAF+E,EAG/EC,IAH+E,EAI9E;AACD,MAAQC,IAAR,GAAyDD,IAAzD,CAAQC,IAAR;AAAA,qBAAyDD,IAAzD,CAAcE,MAAd;AAAA,MAAcA,MAAd,6BAAuB,EAAvB;AAAA,8BAAyDF,IAAzD,CAA2BG,iBAA3B;AAAA,MAA2BA,iBAA3B,sCAA+C,KAA/C;AACA,MAAMC,MAAM,GAAGR,OAAO,CAACS,MAAR,CAAeJ,IAAf,CAAf;;AACA,MAAI,CAACG,MAAL,EAAa;AACT,UAAM,IAAIE,KAAJ,0CAA2CL,IAA3C,SAAN;AACH;;AACD,MAAiBM,gBAAjB,GAAsCT,KAAtC,CAAQF,OAAR;AACA,MAAMY,mBAAmB,GAAGD,gBAAgB,CAACH,MAAM,CAACK,IAAR,CAAhB,IAAiC,EAA7D;AACA,MAAMC,eAAe,GAAGF,mBAAmB,CAACG,IAApB,CAAyB,UAAAC,EAAE;AAAA,WAAIA,EAAE,CAACX,IAAH,KAAYA,IAAhB;AAAA,GAA3B,CAAxB;AAEA,MAAIY,cAAJ;;AACA,MAAIH,eAAJ,EAAqB;AACjBG,IAAAA,cAAc,GAAGL,mBAAmB,CAACM,MAApB,CAA2B,UAAAF,EAAE;AAAA,aAAIA,EAAE,CAACX,IAAH,KAAYA,IAAhB;AAAA,KAA7B,CAAjB;AACH,GAFD,MAEO,IAAIE,iBAAJ,EAAuB;AAC1BU,IAAAA,cAAc,GAAG,CAAC;AAAEZ,MAAAA,IAAI,EAAJA,IAAF;AAAQC,MAAAA,MAAM,EAANA;AAAR,KAAD,CAAjB;AACH,GAFM,MAEA;AACHW,IAAAA,cAAc,GAAGL,mBAAmB,CAACO,MAApB,CAA2B,CAAC;AAAEd,MAAAA,IAAI,EAAJA,IAAF;AAAQC,MAAAA,MAAM,EAANA;AAAR,KAAD,CAA3B,CAAjB;AACH;;AAED,SAAO;AACHJ,IAAAA,KAAK,EAAE;AACHF,MAAAA,OAAO,kCACAW,gBADA,2BAEFH,MAAM,CAACK,IAFL,EAEYI,cAFZ;AADJ;AADJ,GAAP;AAQH,CA/BM","sourcesContent":["import { TogglePluginActionArgsType } from \"./types\";\nimport { plugins } from \"@webiny/plugins\";\nimport { EventActionCallable } from \"../../../../types\";\n\nexport const togglePluginAction: EventActionCallable<TogglePluginActionArgsType> = (\n    state,\n    meta,\n    args\n) => {\n    const { name, params = {}, closeOtherInGroup = false } = args;\n    const plugin = plugins.byName(name);\n    if (!plugin) {\n        throw new Error(`There is no plugin with name \"${name}\".`);\n    }\n    const { plugins: pluginsAtomValue } = state;\n    const activePluginsByType = pluginsAtomValue[plugin.type] || [];\n    const isAlreadyActive = activePluginsByType.some(pl => pl.name === name);\n\n    let newPluginsList;\n    if (isAlreadyActive) {\n        newPluginsList = activePluginsByType.filter(pl => pl.name !== name);\n    } else if (closeOtherInGroup) {\n        newPluginsList = [{ name, params }];\n    } else {\n        newPluginsList = activePluginsByType.concat([{ name, params }]);\n    }\n\n    return {\n        state: {\n            plugins: {\n                ...pluginsAtomValue,\n                [plugin.type]: newPluginsList\n            }\n        }\n    };\n};\n"],"file":"action.js"}