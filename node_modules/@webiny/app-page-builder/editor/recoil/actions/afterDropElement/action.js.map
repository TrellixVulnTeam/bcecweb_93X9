{"version":3,"sources":["../../../../../src/editor/recoil/actions/afterDropElement/action.ts"],"names":["plugins","elementPluginType","getElementTypePlugin","type","pluginsByType","byType","plugin","find","pl","elementType","Error","afterDropElementAction","state","meta","args","element","onCreate","activeElement","id","sidebar","activeTabIndex","highlightTab"],"mappings":";AAAA,SAASA,OAAT,QAAwB,iBAAxB;AAIA,IAAMC,iBAAiB,GAAG,wBAA1B;;AAEA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,IAAD,EAA6C;AACtE,MAAMC,aAAa,GAAGJ,OAAO,CAACK,MAAR,CAA0CJ,iBAA1C,CAAtB;AACA,MAAMK,MAAM,GAAGF,aAAa,CAACG,IAAd,CAAmB,UAAAC,EAAE;AAAA,WAAIA,EAAE,CAACC,WAAH,KAAmBN,IAAvB;AAAA,GAArB,CAAf;;AACA,MAAI,CAACG,MAAL,EAAa;AACT,UAAM,IAAII,KAAJ,mCAAoCT,iBAApC,iCAA2EE,IAA3E,EAAN;AACH;;AACD,SAAOG,MAAP;AACH,CAPD;;AASA,OAAO,IAAMK,sBAA2E,GAAG,SAA9EA,sBAA8E,CACvFC,KADuF,EAEvFC,IAFuF,EAGvFC,IAHuF,EAItF;AACD,MAAQC,OAAR,GAAoBD,IAApB,CAAQC,OAAR;AAEA,MAAMT,MAAM,GAAGJ,oBAAoB,CAACa,OAAO,CAACZ,IAAT,CAAnC;;AACA,MAAIG,MAAM,CAACU,QAAP,IAAmBV,MAAM,CAACU,QAAP,KAAoB,eAA3C,EAA4D;AACxD,WAAO,EAAP;AACH;;AACD,MAAIV,MAAM,CAACU,QAAP,IAAmBV,MAAM,CAACU,QAAP,KAAoB,sBAA3C,EAAmE;AAC/D,WAAO,EAAP;AACH;;AAED,SAAO;AACHJ,IAAAA,KAAK,kCACEA,KADF;AAEDK,MAAAA,aAAa,EAAEF,OAAO,CAACG,EAFtB;AAGDC,MAAAA,OAAO,EAAE;AACLC,QAAAA,cAAc,EAAE,CADX;AAELC,QAAAA,YAAY,EAAE;AAFT;AAHR;AADF,GAAP;AAUH,CAzBM","sourcesContent":["import { plugins } from \"@webiny/plugins\";\nimport { EventActionCallable, PbEditorPageElementPlugin } from \"../../../../types\";\nimport { AfterDropElementActionArgsType } from \"./types\";\n\nconst elementPluginType = \"pb-editor-page-element\";\n\nconst getElementTypePlugin = (type: string): PbEditorPageElementPlugin => {\n    const pluginsByType = plugins.byType<PbEditorPageElementPlugin>(elementPluginType);\n    const plugin = pluginsByType.find(pl => pl.elementType === type);\n    if (!plugin) {\n        throw new Error(`There is no plugin in \"${elementPluginType}\" for element type ${type}`);\n    }\n    return plugin;\n};\n\nexport const afterDropElementAction: EventActionCallable<AfterDropElementActionArgsType> = (\n    state,\n    meta,\n    args\n) => {\n    const { element } = args;\n\n    const plugin = getElementTypePlugin(element.type);\n    if (plugin.onCreate && plugin.onCreate === \"open-settings\") {\n        return {};\n    }\n    if (plugin.onCreate && plugin.onCreate === \"skipElementHighlight\") {\n        return {};\n    }\n\n    return {\n        state: {\n            ...state,\n            activeElement: element.id,\n            sidebar: {\n                activeTabIndex: 0,\n                highlightTab: true\n            }\n        }\n    };\n};\n"],"file":"action.js"}