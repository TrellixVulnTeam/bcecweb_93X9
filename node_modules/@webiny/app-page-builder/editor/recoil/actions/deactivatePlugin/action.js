import _createForOfIteratorHelper from "@babel/runtime/helpers/createForOfIteratorHelper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import { plugins } from "@webiny/plugins";

var removePlugin = function removePlugin(state, name) {
  var plugin = plugins.byName(name);

  if (!plugin) {
    throw new Error("There is no plugin with name \"".concat(name, "\"."));
  }

  var activePluginsByType = state[plugin.type] || [];
  return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, plugin.type, activePluginsByType.filter(function (activePlugin) {
    return activePlugin.name !== plugin.name;
  })));
};

var deactivatePluginByName = function deactivatePluginByName(state, name) {
  var newState = removePlugin(state, name);
  return {
    state: {
      plugins: newState
    }
  };
};

var deactivatePluginByType = function deactivatePluginByType(state, type) {
  return {
    state: {
      plugins: _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, type, []))
    }
  };
};

var deactivatePluginsByName = function deactivatePluginsByName(state, names) {
  var newState = _objectSpread({}, state);

  var _iterator = _createForOfIteratorHelper(names),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var name = _step.value;
      newState = removePlugin(newState, name);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return {
    state: {
      plugins: newState
    }
  };
};

export var deactivatePluginAction = function deactivatePluginAction(_ref, meta, _ref2) {
  var pluginsState = _ref.plugins;
  var name = _ref2.name,
      names = _ref2.names,
      type = _ref2.type;

  if (name) {
    return deactivatePluginByName(pluginsState, name);
  } else if (type) {
    return deactivatePluginByType(pluginsState, type);
  } else if (names) {
    return deactivatePluginsByName(pluginsState, names);
  }

  throw new Error("You are trying to deactivate a plugin but did not pass info on which one.");
};
//# sourceMappingURL=action.js.map