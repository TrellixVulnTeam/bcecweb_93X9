import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import invariant from "invariant";
import { plugins } from "@webiny/plugins";
var elementPluginType = "pb-editor-page-element";

var getElementTypePlugin = function getElementTypePlugin(type) {
  var pluginsByType = plugins.byType(elementPluginType);
  var plugin = pluginsByType.find(function (pl) {
    return pl.elementType === type;
  });

  if (!plugin) {
    throw new Error("There is no plugin in \"".concat(elementPluginType, "\" for element type ").concat(type));
  }

  return plugin;
};

var getSourceElement = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(state, source) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!source.id) {
              _context.next = 4;
              break;
            }

            _context.next = 3;
            return state.getElementById(source.id);

          case 3:
            return _context.abrupt("return", _context.sent);

          case 4:
            return _context.abrupt("return", source);

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getSourceElement(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

export var dropElementAction = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(state, meta, args) {
    var source, target, id, type, position, targetElement, plugin, sourceElement;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            source = args.source, target = args.target;
            id = target.id, type = target.type, position = target.position;
            _context2.next = 4;
            return state.getElementById(id);

          case 4:
            targetElement = _context2.sent;

            if (targetElement) {
              _context2.next = 7;
              break;
            }

            throw new Error("There is no element with id \"".concat(id, "\""));

          case 7:
            plugin = getElementTypePlugin(type);
            invariant(plugin.onReceived, "To accept drops, element plugin must implement `onReceived` function");
            _context2.next = 11;
            return getSourceElement(state, source);

          case 11:
            sourceElement = _context2.sent;
            return _context2.abrupt("return", plugin.onReceived({
              state: state,
              meta: meta,
              source: sourceElement,
              target: targetElement,
              position: position
            }));

          case 13:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function dropElementAction(_x3, _x4, _x5) {
    return _ref2.apply(this, arguments);
  };
}();
//# sourceMappingURL=action.js.map