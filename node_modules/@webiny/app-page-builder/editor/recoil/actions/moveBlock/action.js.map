{"version":3,"sources":["../../../../../src/editor/recoil/actions/moveBlock/action.ts"],"names":["updateElementAction","updateBlockPosition","moveBlockAction","state","meta","args","source","target","rootElementId","getElementById","id","targetElement","Error","sourceElement","rootElement","root","parent","sourcePosition","position","targetPosition","element","history"],"mappings":";;AAEA,SAASA,mBAAT;AACA,SAASC,mBAAT;AAEA,OAAO,IAAMC,eAA6D;AAAA,sEAAG,iBACzEC,KADyE,EAEzEC,IAFyE,EAGzEC,IAHyE;AAAA;AAAA;AAAA;AAAA;AAAA;AAKjEC,YAAAA,MALiE,GAK/BD,IAL+B,CAKjEC,MALiE,EAKzDC,MALyD,GAK/BF,IAL+B,CAKzDE,MALyD,EAKjDC,aALiD,GAK/BH,IAL+B,CAKjDG,aALiD;AAAA;AAAA,mBAM7CL,KAAK,CAACM,cAAN,CAAqBF,MAAM,CAACG,EAA5B,CAN6C;;AAAA;AAMnEC,YAAAA,aANmE;;AAAA,gBAOpEA,aAPoE;AAAA;AAAA;AAAA;;AAAA,kBAQ/D,IAAIC,KAAJ,yCAA0CL,MAAM,CAACG,EAAjD,QAR+D;;AAAA;AAAA;AAAA,mBAW7CP,KAAK,CAACM,cAAN,CAAqBH,MAAM,CAACI,EAA5B,CAX6C;;AAAA;AAWnEG,YAAAA,aAXmE;;AAAA,gBAYpEA,aAZoE;AAAA;AAAA;AAAA;;AAAA,kBAa/D,IAAID,KAAJ,yCAA0CN,MAAM,CAACI,EAAjD,QAb+D;;AAAA;AAAA;AAAA,mBAiB/CP,KAAK,CAACM,cAAN,CAAqBD,aAArB,CAjB+C;;AAAA;AAiBnEM,YAAAA,WAjBmE;AAmBzE;AACMC,YAAAA,IApBmE,GAoB5Dd,mBAAmB,CAAC;AAC7Be,cAAAA,MAAM,EAAEF,WADqB;AAE7BG,cAAAA,cAAc,EAAEX,MAAM,CAACY,QAFM;AAG7BC,cAAAA,cAAc,EAAEZ,MAAM,CAACW;AAHM,aAAD,CApByC;AAAA,6CA0BlElB,mBAAmB,CAACG,KAAD,EAAQC,IAAR,EAAc;AACpCgB,cAAAA,OAAO,EAAEL,IAD2B;AAEpCM,cAAAA,OAAO,EAAE;AAF2B,aAAd,CA1B+C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAA7DnB,eAA6D;AAAA;AAAA;AAAA,GAAnE","sourcesContent":["import { EventActionCallable, EventActionHandlerActionCallableResponse } from \"~/types\";\nimport { MoveBlockActionArgsType } from \"./types\";\nimport { updateElementAction } from \"~/editor/recoil/actions\";\nimport { updateBlockPosition } from \"~/editor/helpers\";\n\nexport const moveBlockAction: EventActionCallable<MoveBlockActionArgsType> = async (\n    state,\n    meta,\n    args\n) => {\n    const { source, target, rootElementId } = args;\n    const targetElement = await state.getElementById(target.id);\n    if (!targetElement) {\n        throw new Error(`There is no element with id \"${target.id}\"`);\n    }\n\n    const sourceElement = await state.getElementById(source.id);\n    if (!sourceElement) {\n        throw new Error(`There is no element with id \"${source.id}\"`);\n    }\n\n    // Get root element\n    const rootElement = await state.getElementById(rootElementId);\n\n    // Update block position.\n    const root = updateBlockPosition({\n        parent: rootElement,\n        sourcePosition: source.position,\n        targetPosition: target.position\n    });\n\n    return updateElementAction(state, meta, {\n        element: root,\n        history: true\n    }) as EventActionHandlerActionCallableResponse;\n};\n"],"file":"action.js"}