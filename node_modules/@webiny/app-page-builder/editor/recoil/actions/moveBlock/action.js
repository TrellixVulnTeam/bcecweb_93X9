import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { updateElementAction } from "./..";
import { updateBlockPosition } from "../../../helpers";
export var moveBlockAction = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(state, meta, args) {
    var source, target, rootElementId, targetElement, sourceElement, rootElement, root;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            source = args.source, target = args.target, rootElementId = args.rootElementId;
            _context.next = 3;
            return state.getElementById(target.id);

          case 3:
            targetElement = _context.sent;

            if (targetElement) {
              _context.next = 6;
              break;
            }

            throw new Error("There is no element with id \"".concat(target.id, "\""));

          case 6:
            _context.next = 8;
            return state.getElementById(source.id);

          case 8:
            sourceElement = _context.sent;

            if (sourceElement) {
              _context.next = 11;
              break;
            }

            throw new Error("There is no element with id \"".concat(source.id, "\""));

          case 11:
            _context.next = 13;
            return state.getElementById(rootElementId);

          case 13:
            rootElement = _context.sent;
            // Update block position.
            root = updateBlockPosition({
              parent: rootElement,
              sourcePosition: source.position,
              targetPosition: target.position
            });
            return _context.abrupt("return", updateElementAction(state, meta, {
              element: root,
              history: true
            }));

          case 16:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function moveBlockAction(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
//# sourceMappingURL=action.js.map