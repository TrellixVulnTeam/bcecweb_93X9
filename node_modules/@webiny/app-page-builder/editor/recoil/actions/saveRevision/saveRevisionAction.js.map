{"version":3,"sources":["../../../../../src/editor/recoil/actions/saveRevision/saveRevisionAction.ts"],"names":["gql","lodashIsEqual","lodashDebounce","ToggleSaveRevisionStateActionEvent","lastSavedRevisionData","isDataEqualToLastSavedData","data","triggerOnFinish","args","onFinish","debouncedSave","saveRevisionAction","state","meta","page","locked","title","snippet","path","settings","getElementTree","category","slug","content","updatePage","cancel","runSave","eventActionHandler","trigger","saving","client","mutate","mutation","variables","id","debounce"],"mappings":"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","sourcesContent":["import gql from \"graphql-tag\";\nimport lodashIsEqual from \"lodash/isEqual\";\nimport lodashDebounce from \"lodash/debounce\";\nimport { SaveRevisionActionArgsType } from \"./types\";\nimport { ToggleSaveRevisionStateActionEvent } from \"./event\";\nimport { EventActionCallable } from \"~/types\";\nimport { PageAtomType } from \"../../modules\";\n\ntype PageRevisionType = Pick<PageAtomType, \"title\" | \"snippet\" | \"path\" | \"settings\"> & {\n    category: string;\n    content: any;\n};\n\nlet lastSavedRevisionData: any = {};\n\nconst isDataEqualToLastSavedData = (data: PageRevisionType) => {\n    return lodashIsEqual(data, lastSavedRevisionData);\n};\n\nconst triggerOnFinish = (args?: SaveRevisionActionArgsType): void => {\n    if (!args || !args.onFinish || typeof args.onFinish !== \"function\") {\n        return;\n    }\n    args.onFinish();\n};\n\nlet debouncedSave = null;\n\nexport const saveRevisionAction: EventActionCallable<SaveRevisionActionArgsType> = async (\n    state,\n    meta,\n    args = {}\n) => {\n    if (state.page.locked) {\n        return {};\n    }\n\n    const data: PageRevisionType = {\n        title: state.page.title,\n        snippet: state.page.snippet,\n        path: state.page.path,\n        settings: state.page.settings,\n        content: await state.getElementTree(),\n        category: state.page.category.slug\n    };\n\n    if (isDataEqualToLastSavedData(data)) {\n        triggerOnFinish(args);\n        return {};\n    }\n\n    lastSavedRevisionData = data;\n\n    const updatePage = gql`\n        mutation updatePage($id: ID!, $data: PbUpdatePageInput!) {\n            pageBuilder {\n                updatePage(id: $id, data: $data) {\n                    data {\n                        id\n                        content\n                        title\n                        status\n                        savedOn\n                    }\n                    error {\n                        code\n                        message\n                        data\n                    }\n                }\n            }\n        }\n    `;\n\n    if (debouncedSave) {\n        debouncedSave.cancel();\n    }\n\n    const runSave = async () => {\n        meta.eventActionHandler.trigger(new ToggleSaveRevisionStateActionEvent({ saving: true }));\n\n        await meta.client.mutate({\n            mutation: updatePage,\n            variables: {\n                id: state.page.id,\n                data\n            }\n        });\n\n        meta.eventActionHandler.trigger(new ToggleSaveRevisionStateActionEvent({ saving: false }));\n        triggerOnFinish(args);\n    };\n\n    if (args && args.debounce === false) {\n        runSave();\n    } else {\n        debouncedSave = lodashDebounce(runSave, 2000);\n        debouncedSave();\n    }\n\n    return {};\n};\n"],"file":"saveRevisionAction.js"}