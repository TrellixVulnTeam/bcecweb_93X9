import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";

var _templateObject;

import _regeneratorRuntime from "@babel/runtime/regenerator";
import gql from "graphql-tag";
import lodashIsEqual from "lodash/isEqual";
import lodashDebounce from "lodash/debounce";
import { ToggleSaveRevisionStateActionEvent } from "./event";
var lastSavedRevisionData = {};

var isDataEqualToLastSavedData = function isDataEqualToLastSavedData(data) {
  return lodashIsEqual(data, lastSavedRevisionData);
};

var triggerOnFinish = function triggerOnFinish(args) {
  if (!args || !args.onFinish || typeof args.onFinish !== "function") {
    return;
  }

  args.onFinish();
};

var debouncedSave = null;
export var saveRevisionAction = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(state, meta) {
    var args,
        data,
        updatePage,
        runSave,
        _args2 = arguments;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            args = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};

            if (!state.page.locked) {
              _context2.next = 3;
              break;
            }

            return _context2.abrupt("return", {});

          case 3:
            _context2.t0 = state.page.title;
            _context2.t1 = state.page.snippet;
            _context2.t2 = state.page.path;
            _context2.t3 = state.page.settings;
            _context2.next = 9;
            return state.getElementTree();

          case 9:
            _context2.t4 = _context2.sent;
            _context2.t5 = state.page.category.slug;
            data = {
              title: _context2.t0,
              snippet: _context2.t1,
              path: _context2.t2,
              settings: _context2.t3,
              content: _context2.t4,
              category: _context2.t5
            };

            if (!isDataEqualToLastSavedData(data)) {
              _context2.next = 15;
              break;
            }

            triggerOnFinish(args);
            return _context2.abrupt("return", {});

          case 15:
            lastSavedRevisionData = data;
            updatePage = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n        mutation updatePage($id: ID!, $data: PbUpdatePageInput!) {\n            pageBuilder {\n                updatePage(id: $id, data: $data) {\n                    data {\n                        id\n                        content\n                        title\n                        status\n                        savedOn\n                    }\n                    error {\n                        code\n                        message\n                        data\n                    }\n                }\n            }\n        }\n    "])));

            if (debouncedSave) {
              debouncedSave.cancel();
            }

            runSave = /*#__PURE__*/function () {
              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
                return _regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        meta.eventActionHandler.trigger(new ToggleSaveRevisionStateActionEvent({
                          saving: true
                        }));
                        _context.next = 3;
                        return meta.client.mutate({
                          mutation: updatePage,
                          variables: {
                            id: state.page.id,
                            data: data
                          }
                        });

                      case 3:
                        meta.eventActionHandler.trigger(new ToggleSaveRevisionStateActionEvent({
                          saving: false
                        }));
                        triggerOnFinish(args);

                      case 5:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              return function runSave() {
                return _ref2.apply(this, arguments);
              };
            }();

            if (args && args.debounce === false) {
              runSave();
            } else {
              debouncedSave = lodashDebounce(runSave, 2000);
              debouncedSave();
            }

            return _context2.abrupt("return", {});

          case 21:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function saveRevisionAction(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
//# sourceMappingURL=saveRevisionAction.js.map