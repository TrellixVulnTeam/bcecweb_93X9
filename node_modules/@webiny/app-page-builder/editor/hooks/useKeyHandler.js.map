{"version":3,"sources":["../../../src/editor/hooks/useKeyHandler.ts"],"names":["React","isHotkey","getNanoid","keyStack","listener","filter","isContentEditable","value","includes","setupListener","document","body","addEventListener","ev","target","nodeName","contentEditable","matchedKey","Object","keys","find","key","length","item","handler","stopPropagation","addKeyHandler","id","unshift","removeKeyHandler","index","findIndex","splice","useKeyHandler","useState","useMemo"],"mappings":"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","sourcesContent":["import React, { SyntheticEvent } from \"react\";\nimport isHotkey from \"is-hotkey\";\nimport { getNanoid } from \"../helpers\";\nconst keyStack = {};\n\nlet listener = false;\nconst filter = [\"TEXTAREA\", \"INPUT\"];\n\nconst isContentEditable = (value: any) => {\n    return [\"true\", true].includes(value);\n};\n\ntype KeyboardTargetEventType = KeyboardEvent & {\n    target: HTMLElement;\n};\nconst setupListener = () => {\n    if (!listener && document.body) {\n        document.body.addEventListener(\"keydown\", (ev: KeyboardTargetEventType) => {\n            const target = ev.target;\n            // We ignore all keyboard events coming from within contentEditable element and inputs.\n            if (filter.includes(target.nodeName) || isContentEditable(target.contentEditable)) {\n                return;\n            }\n\n            const matchedKey = Object.keys(keyStack).find(key => isHotkey(key, ev));\n\n            if (matchedKey && keyStack[matchedKey].length > 0) {\n                const item = keyStack[matchedKey][0];\n                item.handler(ev);\n                ev.stopPropagation();\n            }\n        });\n\n        listener = true;\n    }\n};\n\nconst addKeyHandler = (\n    id: string,\n    key: string,\n    handler: (e: SyntheticEvent<HTMLElement>) => void\n) => {\n    setupListener();\n    keyStack[key] = keyStack[key] || [];\n    if (!keyStack[key].find(item => item.id === id)) {\n        keyStack[key].unshift({ id, handler });\n    }\n};\n\nconst removeKeyHandler = (id, key) => {\n    if (!keyStack[key]) {\n        return;\n    }\n\n    const index = keyStack[key].findIndex(item => item.id === id);\n    if (index >= 0) {\n        keyStack[key].splice(index, 1);\n    }\n};\n\ntype AddKeyHandlerType = (key: string, handler: (e: SyntheticEvent<HTMLElement>) => void) => void;\n\ntype RemoveKeyHandlerType = (key: string) => void;\n\nexport function useKeyHandler(): {\n    addKeyHandler: AddKeyHandlerType;\n    removeKeyHandler: RemoveKeyHandlerType;\n} {\n    const [id] = React.useState(getNanoid());\n\n    return React.useMemo(\n        () => ({\n            addKeyHandler(key, handler) {\n                addKeyHandler(id, key, handler);\n            },\n            removeKeyHandler(key) {\n                removeKeyHandler(id, key);\n            }\n        }),\n        []\n    );\n}\n"],"file":"useKeyHandler.js"}