import React from "react";
import { Plugin } from "@webiny/plugins";
import { UIElement, UIElementConfig } from "./UIElement";
export interface UIElementWrapperProps {
    children: React.ReactNode;
    [key: string]: any;
}
export interface UIElementWrapper {
    (props: UIElementWrapperProps): React.ReactElement;
}
export declare class UIView<TConfig = UIElementConfig> extends UIElement<TConfig> {
    private _events;
    private _hookDefinitions;
    private _hookValues;
    private _props;
    private _isRendered;
    private _wrappers;
    constructor(id: any, config?: TConfig);
    get props(): {
        [key: string]: any;
        render: Function;
    };
    set props(value: {
        [key: string]: any;
        render: Function;
    });
    addHookDefinition(key: string, hook: Function): void;
    applyPlugins(viewClass: Class<UIView>): void;
    awaitElement<TElement extends UIElement = UIElement<any>>(id: string): Promise<TElement>;
    getHookDefinitions(): Record<string, Function>;
    setHookValues(values: Record<string, any>): void;
    getHook<THook = any>(key: string): THook;
    getWrappers(): UIElementWrapper[];
    wrapWith(wrapper: UIElementWrapper): void;
    dispatchEvent(name: string, params?: {}): void;
    addEventListener(event: string, cb: CallableFunction): void;
    isRendered(): Promise<void>;
    render(props?: any): React.ReactNode;
    refresh(): void;
}
export interface ApplyFunction<TView> {
    (view: TView): void;
}
declare type Class<T> = new (...args: any[]) => T;
export declare class UIViewPlugin<TView extends any> extends Plugin {
    static readonly type: string;
    private _apply;
    private _viewClass;
    constructor(viewClass: Class<TView>, apply: ApplyFunction<TView>);
    get type(): string;
    canHandle(viewClass: Class<UIView>): boolean;
    apply(view: TView): void;
}
interface UIViewComponentProps {
    view: UIView;
    [key: string]: any;
}
export declare const UIViewComponent: ({ view, ...props }: UIViewComponentProps) => React.ReactElement;
export {};
