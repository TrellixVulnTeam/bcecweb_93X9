import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _createForOfIteratorHelper from "@babel/runtime/helpers/createForOfIteratorHelper";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import pWaitFor from "p-wait-for";
import { Plugin, plugins } from "@webiny/plugins";
import { UILayout } from "./UILayout";
import { UIView } from "./UIView";

function defaultShouldRender() {
  return true;
}

export var UIElement = /*#__PURE__*/function () {
  function UIElement(id, config) {
    var _this = this;

    _classCallCheck(this, UIElement);

    _defineProperty(this, "_elements", new Map());

    _defineProperty(this, "_layout", void 0);

    _defineProperty(this, "_config", void 0);

    _defineProperty(this, "_tags", new Set());

    _defineProperty(this, "_id", void 0);

    _defineProperty(this, "_parent", void 0);

    _defineProperty(this, "_renderers", []);

    _defineProperty(this, "_shouldRender", [defaultShouldRender]);

    this._id = id;
    this._config = config || {};
    this._layout = new UILayout(function (elementId) {
      return _this.getElement(elementId);
    });

    if (!config) {
      return;
    }

    if (config.tags) {
      this._tags = new Set(config.tags);
    }

    if (config.shouldRender) {
      this._shouldRender.push(config.shouldRender);
    }

    this.applyPlugins(UIElement);
  }

  _createClass(UIElement, [{
    key: "id",
    get: function get() {
      return this._id;
    }
  }, {
    key: "isGridEnabled",
    value: function isGridEnabled() {
      return this._layout.getGrid();
    }
  }, {
    key: "config",
    get: function get() {
      return this._config;
    }
  }, {
    key: "depth",
    get: function get() {
      var depth = 0;
      var parent = this.getParent();

      while (parent && !(parent instanceof UIView)) {
        depth++;
        parent = parent.getParent();
      }

      return depth;
    }
  }, {
    key: "hasParentGrid",
    get: function get() {
      var parent = this.getParent();

      while (parent && !(parent instanceof UIView)) {
        if (parent.isGridEnabled()) {
          return true;
        }

        parent = parent.getParent();
      }

      return false;
    }
  }, {
    key: "applyPlugins",
    value: function applyPlugins(elementClass) {
      var _this2 = this;

      var type = "UIElementPlugin.".concat(elementClass.prototype.constructor.name);
      var elPlugins = plugins.byType(type);
      elPlugins.filter(function (plugin) {
        return plugin.canHandle(elementClass);
      }).forEach(function (plugin) {
        return plugin.apply(_this2);
      });
    }
  }, {
    key: "addRenderer",
    value: function addRenderer(renderer) {
      this._renderers.push(renderer);
    }
  }, {
    key: "addShouldRender",
    value: function addShouldRender(cb) {
      this._shouldRender.push(cb);
    }
  }, {
    key: "setLayout",
    value: function setLayout(layout) {
      this._layout = layout;
    }
  }, {
    key: "getLayout",
    value: function getLayout() {
      return this._layout;
    }
  }, {
    key: "setParent",
    value: function setParent(parent) {
      this._parent = parent;
    }
  }, {
    key: "getParent",
    value: function getParent() {
      return this._parent;
    }
  }, {
    key: "getParentByType",
    value: function getParentByType(type) {
      var parent = this.getParent();

      while (parent) {
        if (parent instanceof type) {
          break;
        }

        parent = parent.getParent();
      }

      return parent;
    }
  }, {
    key: "getDescendentsByTag",
    value: function getDescendentsByTag(tag) {
      var elements = Array.from(this._elements.values()); // Search child elements recursively

      for (var _i = 0, _elements = elements; _i < _elements.length; _i++) {
        var _element = _elements[_i];

        if (_element instanceof UIElement) {
          var children = _element.getChildren();

          var _iterator = _createForOfIteratorHelper(children),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var child = _step.value;
              child.getDescendentsByTag(tag).forEach(function (el) {
                return elements.push(el);
              });
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      }

      return elements.filter(function (el) {
        return el.hasTag(tag);
      });
    }
  }, {
    key: "getDescendentsByType",
    value: function getDescendentsByType(type) {
      var elements = Array.from(this._elements.values()); // Search child elements recursively

      for (var _i2 = 0, _elements2 = elements; _i2 < _elements2.length; _i2++) {
        var _element2 = _elements2[_i2];

        var children = _element2.getChildren();

        var _iterator2 = _createForOfIteratorHelper(children),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var child = _step2.value;
            child.getDescendentsByType(type).forEach(function (el) {
              elements.push(el);
            });
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }

      return elements.filter(function (el) {
        return el instanceof type;
      });
    }
  }, {
    key: "addTag",
    value: function addTag(tag) {
      this._tags.add(tag);
    }
  }, {
    key: "hasTag",
    value: function hasTag(tag) {
      return this._tags.has(tag);
    }
  }, {
    key: "removeTag",
    value: function removeTag(tag) {
      this._tags.delete(tag);
    }
  }, {
    key: "getView",
    value: function getView() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : UIView;
      var parent = this.getParent();

      while (parent && !(parent instanceof type)) {
        parent = parent.getParent();
      }

      return parent;
    }
  }, {
    key: "addElement",
    value: function addElement(element) {
      element.setParent(this); // We only need to modify layout if we're adding a new element

      if (!this._elements.has(element.id)) {
        this._layout.insertElementAtTheEnd(element);
      }

      this._elements.set(element.id, element);

      return element;
    }
  }, {
    key: "useGrid",
    value: function useGrid(flag) {
      this._layout.setGrid(flag);
    }
  }, {
    key: "getElement",
    value: function getElement(id) {
      var ownElement = this._elements.get(id);

      if (ownElement) {
        return ownElement;
      } // Search child elements recursively until an element is found


      var elements = this._elements.values();

      var _iterator3 = _createForOfIteratorHelper(elements),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _element3 = _step3.value;

          if (_element3 instanceof UIElement) {
            var descendant = _element3.getElement(id);

            if (descendant) {
              return descendant;
            }
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return null;
    }
  }, {
    key: "getChildren",
    value: function getChildren() {
      return Array.from(this._elements.values());
    }
  }, {
    key: "moveInto",
    value: function moveInto(targetElement) {
      var parent = this.getParent();

      if (parent) {
        parent.remove(this);
      }

      targetElement.addElement(this);
    }
  }, {
    key: "moveAfter",
    value: function moveAfter(targetElement) {
      var parent = this.getParent();

      if (parent) {
        parent.remove(this);
      }

      targetElement.getParent().insertElementAfter(targetElement, this);
    }
  }, {
    key: "moveBefore",
    value: function moveBefore(targetElement) {
      var parent = this.getParent();

      if (parent) {
        parent.remove(this);
      }

      targetElement.getParent().insertElementBefore(targetElement, this);
    }
  }, {
    key: "moveAbove",
    value: function moveAbove(targetElement) {
      var parent = this.getParent();

      if (parent) {
        parent.remove(this);
      }

      targetElement.getParent().insertElementAbove(targetElement, this);
    }
  }, {
    key: "moveBelow",
    value: function moveBelow(targetElement) {
      var parent = this.getParent();

      if (parent) {
        parent.remove(this);
      }

      targetElement.getParent().insertElementBelow(targetElement, this);
    }
  }, {
    key: "moveToTheBeginningOf",
    value: function moveToTheBeginningOf(targetElement) {
      var parent = this.getParent();

      if (parent) {
        parent.remove(this);
      }

      targetElement.insertElementAtTheBeginning(this);
    }
  }, {
    key: "moveToTheEndOf",
    value: function moveToTheEndOf(targetElement) {
      var parent = this.getParent();

      if (parent) {
        parent.remove(this);
      }

      targetElement.insertElementAtTheEnd(this);
    }
  }, {
    key: "remove",
    value: function remove(element) {
      if (!element) {
        // Delete self
        this.addTag("removed");
        this.getParent().remove(this);
        return;
      }

      element.addTag("removed");

      this._elements.delete(element.id);

      this._layout.removeElement(element);
    }
  }, {
    key: "isRendered",
    value: function () {
      var _isRendered = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _this3 = this;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", pWaitFor(function () {
                  return _this3.getView() !== undefined;
                }, {
                  interval: 50
                }));

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function isRendered() {
        return _isRendered.apply(this, arguments);
      }

      return isRendered;
    }()
  }, {
    key: "render",
    value: function render(props) {
      var _this4 = this;

      var layoutRenderer = function layoutRenderer(props) {
        return _this4._layout.render(props, _this4.hasParentGrid);
      };

      var renderers = _toConsumableArray(this._renderers).filter(function (pl) {
        return pl.canRender(_this4, props);
      });

      var _next = function _next(props) {
        if (renderers.length > 0) {
          return renderers.pop().render({
            element: _this4,
            props: props,
            next: function next() {
              return _next(props);
            },
            children: function children() {
              return layoutRenderer(props);
            }
          });
        }

        return layoutRenderer(props);
      };

      return _next(props);
    }
  }, {
    key: "replaceWith",
    value: function replaceWith(element) {
      if (element.id === this.id) {
        this.getParent().addElement(element);
        return;
      }

      element.moveAfter(this);
      this.remove();
    }
  }, {
    key: "shouldRender",
    value: function shouldRender(props) {
      var shouldRender = _toConsumableArray(this._shouldRender);

      var _next2 = function _next2(props) {
        return shouldRender.pop()({
          props: props,
          next: function next() {
            return _next2(props);
          }
        });
      };

      return _next2(props);
    }
  }, {
    key: "insertElementAbove",
    value: function insertElementAbove(lookFor, element) {
      element.setParent(this);

      this._elements.set(element.id, element);

      this._layout.insertElementAbove(lookFor, element);

      return this;
    }
  }, {
    key: "insertElementBelow",
    value: function insertElementBelow(lookFor, element) {
      element.setParent(this);

      this._elements.set(element.id, element);

      this._layout.insertElementBelow(lookFor, element);

      return this;
    }
  }, {
    key: "insertElementAfter",
    value: function insertElementAfter(lookFor, element) {
      element.setParent(this);

      this._elements.set(element.id, element);

      this._layout.insertElementAfter(lookFor, element);

      return this;
    }
  }, {
    key: "insertElementBefore",
    value: function insertElementBefore(lookFor, element) {
      element.setParent(this);

      this._elements.set(element.id, element);

      this._layout.insertElementBefore(lookFor, element);

      return this;
    }
  }, {
    key: "insertElementAtTheBeginning",
    value: function insertElementAtTheBeginning(element) {
      element.setParent(this);

      this._elements.set(element.id, element);

      this._layout.insertElementAtTheBeginning(element);

      return this;
    }
  }, {
    key: "insertElementAtTheEnd",
    value: function insertElementAtTheEnd(element) {
      element.setParent(this);

      this._elements.set(element.id, element);

      this._layout.insertElementAtTheEnd(element);

      return this;
    }
  }]);

  return UIElement;
}();
export var UIElementPlugin = /*#__PURE__*/function (_Plugin) {
  _inherits(UIElementPlugin, _Plugin);

  var _super = _createSuper(UIElementPlugin);

  function UIElementPlugin(elementClass, apply) {
    var _this5;

    _classCallCheck(this, UIElementPlugin);

    _this5 = _super.call(this);

    _defineProperty(_assertThisInitialized(_this5), "_apply", void 0);

    _defineProperty(_assertThisInitialized(_this5), "_elementClass", void 0);

    _this5._elementClass = elementClass;
    _this5._apply = apply;
    return _this5;
  }

  _createClass(UIElementPlugin, [{
    key: "type",
    get: function get() {
      return "UIElementPlugin.".concat(this._elementClass.prototype.constructor.name);
    }
  }, {
    key: "canHandle",
    value: function canHandle(elementClass) {
      /**
       * We need to compare exact classes because we only want to run plugins for an exact class
       * and not the entire inheritance tree.
       */
      return elementClass === this._elementClass;
    }
  }, {
    key: "apply",
    value: function apply(element) {
      this._apply(element);
    }
  }]);

  return UIElementPlugin;
}(Plugin);

_defineProperty(UIElementPlugin, "type", "UIElementPlugin");
//# sourceMappingURL=UIElement.js.map