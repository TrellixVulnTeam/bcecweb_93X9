import React from "react";
import { Plugin } from "@webiny/plugins";
import { UILayout } from "./UILayout";
import { UIView } from "./UIView";
import { UIRenderer } from "./UIRenderer";
declare type Class<T> = new (...args: any[]) => T;
export interface ShouldRender<TProps = any> {
    (params: {
        props: TProps;
        next: Function;
    }): boolean;
}
export interface UIElementConfig<TProps = any> {
    shouldRender?: ShouldRender<TProps>;
    tags?: string[];
}
export declare class UIElement<TConfig extends UIElementConfig = UIElementConfig> {
    protected _elements: Map<string, UIElement<UIElementConfig<any>>>;
    protected _layout: UILayout;
    private _config;
    private _tags;
    private _id;
    private _parent;
    private _renderers;
    private _shouldRender;
    constructor(id: string, config?: TConfig);
    get id(): string;
    isGridEnabled(): boolean;
    get config(): TConfig;
    get depth(): number;
    get hasParentGrid(): boolean;
    applyPlugins(elementClass: Class<UIElement>): void;
    addRenderer(renderer: UIRenderer<any>): void;
    addShouldRender<TProps>(cb: ShouldRender<TProps>): void;
    setLayout(layout: UILayout): void;
    getLayout(): UILayout;
    setParent(parent: UIElement): void;
    getParent(): UIElement;
    getParentByType<TParent extends UIElement = UIElement>(type: Class<TParent>): TParent;
    getDescendentsByTag(tag: string): UIElement[];
    getDescendentsByType<TElement extends UIElement = UIElement>(type: Class<TElement>): TElement[];
    addTag(tag: string): void;
    hasTag(tag: string): boolean;
    removeTag(tag: string): void;
    getView<TView extends UIView = UIView>(type?: Class<UIView>): TView;
    addElement<TElement extends UIElement = UIElement>(element: TElement): TElement;
    useGrid(flag: boolean): void;
    getElement<T extends UIElement = UIElement>(id: string): T;
    getChildren(): UIElement[];
    moveInto(targetElement: UIElement): void;
    moveAfter(targetElement: UIElement): void;
    moveBefore(targetElement: UIElement): void;
    moveAbove(targetElement: UIElement): void;
    moveBelow(targetElement: UIElement): void;
    moveToTheBeginningOf(targetElement: UIElement): void;
    moveToTheEndOf(targetElement: UIElement): void;
    remove(element?: UIElement<any>): void;
    isRendered(): Promise<void>;
    render(props?: any): React.ReactNode;
    replaceWith(element: UIElement): void;
    shouldRender(props: any): boolean;
    protected insertElementAbove(lookFor: UIElement<any>, element: UIElement<any>): this;
    protected insertElementBelow(lookFor: UIElement<any>, element: UIElement<any>): this;
    protected insertElementAfter(lookFor: UIElement<any>, element: UIElement<any>): this;
    protected insertElementBefore(lookFor: UIElement<any>, element: UIElement<any>): this;
    protected insertElementAtTheBeginning(element: UIElement<any>): this;
    protected insertElementAtTheEnd(element: UIElement<any>): this;
}
export interface ApplyFunction<TElement> {
    (element: TElement): void;
}
export declare class UIElementPlugin<TElement extends UIElement> extends Plugin {
    static readonly type: string;
    private _apply;
    private _elementClass;
    constructor(elementClass: Class<TElement>, apply: ApplyFunction<TElement>);
    get type(): string;
    canHandle(elementClass: Class<UIElement>): boolean;
    apply(element: TElement): void;
}
export {};
