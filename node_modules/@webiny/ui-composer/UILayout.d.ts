import React from "react";
import { UIElement } from "./UIElement";
import { Plugin } from "@webiny/plugins";
interface LayoutItem {
    element: string;
    width: number;
}
interface ElementGetter {
    (elementId: string): UIElement<any>;
}
interface Sorter {
    (elementA: UIElement, elementB: UIElement): number;
}
interface UILayoutRenderer {
    (params: {
        layout: UILayout;
        props: any;
        hasParentGrid: boolean;
    }): React.ReactElement;
}
export declare class UILayout {
    private _renderer;
    private _grid;
    private _layout;
    private _getElement;
    constructor(elementGetter: ElementGetter);
    setGrid(flag: boolean): void;
    getGrid(): boolean;
    getLayout(): LayoutItem[][];
    setRenderer(renderer: UILayoutRenderer): void;
    getElement(id: any): UIElement<any>;
    sort(sorter: Sorter): void;
    removeElement(element: UIElement<any>): void;
    insertElementAbove(lookFor: UIElement<any>, element: UIElement<any>): this;
    insertElementBelow(lookFor: UIElement<any>, element: UIElement<any>): this;
    insertElementAfter(lookFor: UIElement<any>, element: UIElement<any>): this;
    insertElementBefore(lookFor: UIElement<any>, element: UIElement<any>): this;
    insertElementAtTheBeginning(element: UIElement<any>): this;
    insertElementAtTheEnd(element: UIElement<any>): this;
    render(props: any, hasParentGrid?: boolean): React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
}
interface ApplyFunction<TElement> {
    (element: TElement): void;
}
export declare class UILayoutPlugin<TLayout extends UILayout = UILayout> extends Plugin {
    static readonly type: string;
    private _apply;
    constructor(apply: ApplyFunction<TLayout>);
    apply(element: TLayout): void;
}
export {};
