import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { Plugin, plugins } from "@webiny/plugins";
export var UILayout = /*#__PURE__*/function () {
  function UILayout(elementGetter) {
    var _this = this;

    _classCallCheck(this, UILayout);

    _defineProperty(this, "_renderer", void 0);

    _defineProperty(this, "_grid", true);

    _defineProperty(this, "_layout", []);

    _defineProperty(this, "_getElement", void 0);

    this._getElement = elementGetter;
    var layoutPlugins = plugins.byType(UILayoutPlugin.type);
    layoutPlugins.forEach(function (plugin) {
      return plugin.apply(_this);
    });
  }

  _createClass(UILayout, [{
    key: "setGrid",
    value: function setGrid(flag) {
      this._grid = flag;
    }
  }, {
    key: "getGrid",
    value: function getGrid() {
      return this._grid;
    }
  }, {
    key: "getLayout",
    value: function getLayout() {
      return this._layout;
    }
  }, {
    key: "setRenderer",
    value: function setRenderer(renderer) {
      this._renderer = renderer;
    }
  }, {
    key: "getElement",
    value: function getElement(id) {
      return this._getElement(id);
    }
  }, {
    key: "sort",
    value: function sort(sorter) {
      var _this2 = this;

      if (this._grid) {
        return;
      }

      this._layout = this._layout.sort(function (a, b) {
        var elementA = _this2._getElement(a[0].element);

        var elementB = _this2._getElement(b[0].element);

        return sorter(elementA, elementB);
      });
    }
  }, {
    key: "removeElement",
    value: function removeElement(element) {
      var _this3 = this;

      var _loop = function _loop(i) {
        var row = _this3._layout[i];

        for (var j = 0; j < row.length; j++) {
          if (row[j].element === element.id) {
            row.splice(j, 1); // Update spans on all items

            row.forEach(function (item) {
              return item.width = 12 / row.length;
            });
            return {
              v: void 0
            };
          }
        }
      };

      for (var i = 0; i < this._layout.length; i++) {
        var _ret = _loop(i);

        if (typeof _ret === "object") return _ret.v;
      }
    }
  }, {
    key: "insertElementAbove",
    value: function insertElementAbove(lookFor, element) {
      for (var i = 0; i < this._layout.length; i++) {
        var row = this._layout[i];

        for (var j = 0; j < row.length; j++) {
          if (row[j].element === lookFor.id) {
            this._layout.splice(i, 0, [{
              element: element.id,
              width: 12
            }]);

            return this;
          }
        }
      }

      return this;
    }
  }, {
    key: "insertElementBelow",
    value: function insertElementBelow(lookFor, element) {
      for (var i = 0; i < this._layout.length; i++) {
        var row = this._layout[i];

        for (var j = 0; j < row.length; j++) {
          if (row[j].element === lookFor.id) {
            this._layout.splice(i + 1, 0, [{
              element: element.id,
              width: 12
            }]);

            return this;
          }
        }
      }

      return this;
    }
  }, {
    key: "insertElementAfter",
    value: function insertElementAfter(lookFor, element) {
      var _this4 = this;

      for (var i = 0; i < this._layout.length; i++) {
        var row = this._layout[i];

        for (var j = 0; j < row.length; j++) {
          if (row[j].element === lookFor.id) {
            var _ret2 = function () {
              var width = 12 / (row.length + 1);
              row.splice(j + 1, 0, {
                element: element.id,
                width: width
              }); // Update spans on all items

              row.forEach(function (item) {
                return item.width = width;
              });
              return {
                v: _this4
              };
            }();

            if (typeof _ret2 === "object") return _ret2.v;
          }
        }
      }

      console.log("[WARNING] Could not locate element \"".concat(lookFor.id, "\" in the layout!"));
      return this;
    }
  }, {
    key: "insertElementBefore",
    value: function insertElementBefore(lookFor, element) {
      var _this5 = this;

      for (var i = 0; i < this._layout.length; i++) {
        var row = this._layout[i];

        for (var j = 0; j < row.length; j++) {
          if (row[j].element === lookFor.id) {
            var _ret3 = function () {
              var width = 12 / (row.length + 1); // Insert new element to the left

              row.splice(j, 0, {
                element: element.id,
                width: width
              }); // Update spans on all items

              row.forEach(function (item) {
                return item.width = width;
              });
              return {
                v: _this5
              };
            }();

            if (typeof _ret3 === "object") return _ret3.v;
          }
        }
      }

      return this;
    }
  }, {
    key: "insertElementAtTheBeginning",
    value: function insertElementAtTheBeginning(element) {
      this._layout.unshift([{
        element: element.id,
        width: 12
      }]);

      return this;
    }
  }, {
    key: "insertElementAtTheEnd",
    value: function insertElementAtTheEnd(element) {
      this._layout.push([{
        element: element.id,
        width: 12
      }]);

      return this;
    }
  }, {
    key: "render",
    value: function render(props) {
      var hasParentGrid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (!this._renderer) {
        throw Error("UILayout needs a renderer! Register a UILayoutPlugin to configure a renderer.");
      }

      return this._renderer({
        layout: this,
        props: props,
        hasParentGrid: hasParentGrid
      });
    }
  }]);

  return UILayout;
}();
export var UILayoutPlugin = /*#__PURE__*/function (_Plugin) {
  _inherits(UILayoutPlugin, _Plugin);

  var _super = _createSuper(UILayoutPlugin);

  function UILayoutPlugin(apply) {
    var _this6;

    _classCallCheck(this, UILayoutPlugin);

    _this6 = _super.call(this);

    _defineProperty(_assertThisInitialized(_this6), "_apply", void 0);

    _this6._apply = apply;
    return _this6;
  }

  _createClass(UILayoutPlugin, [{
    key: "apply",
    value: function apply(element) {
      this._apply(element);
    }
  }]);

  return UILayoutPlugin;
}(Plugin);

_defineProperty(UILayoutPlugin, "type", "UILayoutPlugin");
//# sourceMappingURL=UILayout.js.map