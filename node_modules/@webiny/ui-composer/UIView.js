import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _get from "@babel/runtime/helpers/get";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
var _excluded = ["view"];
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useCallback, useState } from "react";
import pWaitFor from "p-wait-for";
import { Plugin, plugins } from "@webiny/plugins";
import { UIElement } from "./UIElement";

var UIViewID = function UIViewID(_ref) {
  var children = _ref.children;
  return children;
};

export var UIView = /*#__PURE__*/function (_UIElement) {
  _inherits(UIView, _UIElement);

  var _super = _createSuper(UIView);

  function UIView(id, config) {
    var _this;

    _classCallCheck(this, UIView);

    _this = _super.call(this, id, config);

    _defineProperty(_assertThisInitialized(_this), "_events", new Map());

    _defineProperty(_assertThisInitialized(_this), "_hookDefinitions", {});

    _defineProperty(_assertThisInitialized(_this), "_hookValues", {});

    _defineProperty(_assertThisInitialized(_this), "_props", void 0);

    _defineProperty(_assertThisInitialized(_this), "_isRendered", false);

    _defineProperty(_assertThisInitialized(_this), "_wrappers", []);

    _this.useGrid(false);

    return _this;
  }

  _createClass(UIView, [{
    key: "props",
    get: function get() {
      return this._props;
    },
    set: function set(value) {
      this._props = value;
    }
  }, {
    key: "addHookDefinition",
    value: function addHookDefinition(key, hook) {
      this._hookDefinitions[key] = hook;
    }
  }, {
    key: "applyPlugins",
    value: function applyPlugins(viewClass) {
      var _this2 = this;

      var type = "UIViewPlugin.".concat(viewClass.prototype.constructor.name);
      var elPlugins = plugins.byType(type);
      elPlugins.filter(function (plugin) {
        return plugin.canHandle(viewClass);
      }).forEach(function (plugin) {
        return plugin.apply(_this2);
      });
    }
  }, {
    key: "awaitElement",
    value: function () {
      var _awaitElement = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {
        var _this3 = this;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return pWaitFor(function () {
                  return _this3.getElement(id) !== undefined;
                });

              case 2:
                return _context.abrupt("return", this.getElement(id));

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function awaitElement(_x) {
        return _awaitElement.apply(this, arguments);
      }

      return awaitElement;
    }()
  }, {
    key: "getHookDefinitions",
    value: function getHookDefinitions() {
      return this._hookDefinitions;
    }
  }, {
    key: "setHookValues",
    value: function setHookValues(values) {
      this._hookValues = values;
    }
  }, {
    key: "getHook",
    value: function getHook(key) {
      return this._hookValues[key];
    }
  }, {
    key: "getWrappers",
    value: function getWrappers() {
      return this._wrappers;
    }
  }, {
    key: "wrapWith",
    value: function wrapWith(wrapper) {
      // TODO: see if we want to wrap with an instance of an Element, or is a React component enough.
      this._wrappers.push(wrapper);
    }
  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(name) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var callbacks = Array.from(this._events.get(name) || new Set());
      callbacks.reverse().reduce(function (data, cb) {
        return cb(data);
      }, params);
    }
  }, {
    key: "addEventListener",
    value: function addEventListener(event, cb) {
      var callbacks = this._events.get(event) || new Set();
      callbacks.add(cb);

      this._events.set(event, callbacks);
    }
  }, {
    key: "isRendered",
    value: function () {
      var _isRendered = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var _this4 = this;

        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", pWaitFor(function () {
                  return _this4._isRendered;
                }, {
                  interval: 50
                }));

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function isRendered() {
        return _isRendered.apply(this, arguments);
      }

      return isRendered;
    }()
  }, {
    key: "render",
    value: function render(props) {
      // We want to keep track of props that triggered the render cycle.
      this._props = props; // Mark view as rendered

      this._isRendered = true;
      return /*#__PURE__*/React.createElement(UIViewID, {
        key: this.id
      }, _get(_getPrototypeOf(UIView.prototype), "render", this).call(this, props));
    }
  }, {
    key: "refresh",
    value: function refresh() {
      if (this._props && typeof this._props.render === "function") {
        this._props.render();
      }
    }
  }]);

  return UIView;
}(UIElement);
export var UIViewPlugin = /*#__PURE__*/function (_Plugin) {
  _inherits(UIViewPlugin, _Plugin);

  var _super2 = _createSuper(UIViewPlugin);

  function UIViewPlugin(viewClass, apply) {
    var _this5;

    _classCallCheck(this, UIViewPlugin);

    _this5 = _super2.call(this);

    _defineProperty(_assertThisInitialized(_this5), "_apply", void 0);

    _defineProperty(_assertThisInitialized(_this5), "_viewClass", void 0);

    _this5._apply = apply;
    _this5._viewClass = viewClass;
    return _this5;
  }

  _createClass(UIViewPlugin, [{
    key: "type",
    get: function get() {
      return "UIViewPlugin.".concat(this._viewClass.prototype.constructor.name);
    }
  }, {
    key: "canHandle",
    value: function canHandle(viewClass) {
      return viewClass === this._viewClass;
    }
  }, {
    key: "apply",
    value: function apply(view) {
      this._apply(view);
    }
  }]);

  return UIViewPlugin;
}(Plugin);

_defineProperty(UIViewPlugin, "type", "UIViewPlugin");

var UIViewHooks = function UIViewHooks(_ref2) {
  var view = _ref2.view,
      props = _ref2.props,
      render = _ref2.render;
  var hooks = view.getHookDefinitions();

  if (hooks) {
    view.setHookValues(Object.keys(hooks).reduce(function (acc, key) {
      return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, hooks[key]()));
    }, {}));
  }

  return view.render(_objectSpread(_objectSpread({}, props), {}, {
    render: render
  }));
};

export var UIViewComponent = function UIViewComponent(_ref3) {
  var view = _ref3.view,
      props = _objectWithoutProperties(_ref3, _excluded);

  var _useState = useState(0),
      _useState2 = _slicedToArray(_useState, 2),
      setCount = _useState2[1];

  var wrappers = view.getWrappers();
  var render = useCallback(function () {
    setCount(function (count) {
      return count + 1;
    });
  }, []);
  return wrappers.reduce(function (el, wrapper) {
    return wrapper(_objectSpread(_objectSpread({}, props), {}, {
      children: el
    }));
  }, /*#__PURE__*/React.createElement(UIViewHooks, {
    view: view,
    render: render,
    props: props
  }));
};
//# sourceMappingURL=UIView.js.map