"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.deployGraphQLAPI = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _utils = require("@webiny/cli-plugin-deploy-pulumi/utils");

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _util = _interopRequireDefault(require("util"));

var _ncp = _interopRequireDefault(require("ncp"));

var _case = _interopRequireDefault(require("case"));

var _loadJsonFile = _interopRequireDefault(require("load-json-file"));

var _writeJsonFile = _interopRequireDefault(require("write-json-file"));

var _replaceInPath = require("replace-in-path");

var _chalk = _interopRequireDefault(require("chalk"));

var _terminalLink = _interopRequireDefault(require("terminal-link"));

var _utils2 = require("@webiny/cli-plugin-scaffold/utils");

var _execa = _interopRequireDefault(require("execa"));

var _error = _interopRequireDefault(require("@webiny/error"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const deployGraphQLAPI = (stack, env, inputs) => (0, _execa.default)("yarn", ["webiny", "deploy", stack, "--env", env, "--debug", Boolean(inputs.debug)], {
  stdio: "inherit"
});

exports.deployGraphQLAPI = deployGraphQLAPI;

const ncp = _util.default.promisify(_ncp.default.ncp);

const SCAFFOLD_DOCS_LINK = "https://www.webiny.com/docs/how-to-guides/scaffolding/graphql-api";

var _default = () => ({
  name: "cli-plugin-scaffold-template-graphql-api",
  type: "cli-plugin-scaffold-template",
  scaffold: {
    name: "GraphQL API",
    description: "Creates a GraphQL API powered by AWS Lambda and Amazon DynamoDB." + (_terminalLink.default.isSupported ? " " + (0, _terminalLink.default)("Learn more.", SCAFFOLD_DOCS_LINK) : ""),
    questions: () => {
      return [{
        name: "name",
        message: "Enter GraphQL API name:",
        default: `My New GraphQL API`,
        validate: name => {
          if (name.length < 2) {
            return `Please enter a name for your new GraphQL API.`;
          }

          return true;
        }
      }, {
        name: "description",
        message: "Enter description:",
        default: input => {
          return `This is the ${input.name} GraphQL API.`;
        },
        validate: description => {
          if (description.length < 2) {
            return `Please enter a short description for your new GraphQL API.`;
          }

          return true;
        }
      }, {
        name: "path",
        message: "Enter GraphQL API path:",
        default: input => {
          return `${_case.default.kebab(input.name)}`;
        },
        validate: appPath => {
          if (!appPath || appPath.length < 2) {
            return `Please enter a valid path in which the new GraphQL API will be created.`;
          }

          const locationPath = _path.default.resolve(appPath);

          if (_fs.default.existsSync(locationPath)) {
            return `Cannot continue - the ${_chalk.default.red(appPath)} folder already exists.`;
          }

          return true;
        }
      }];
    },
    generate: async options => {
      const {
        input,
        context,
        inquirer,
        wait,
        ora
      } = options;

      const templateFolderPath = _path.default.join(__dirname, "template");

      if (input.showConfirmation !== false) {
        console.log();
        console.log(`${_chalk.default.bold("The following operations will be performed on your behalf:")}`);
        console.log(`- a new GraphQL API will be created in ${_chalk.default.green(input.path)}`);
        console.log(`- the list of workspaces will be updated in the root ${_chalk.default.green("package.json")} file`);
        const prompt = inquirer.createPromptModule();
        const {
          proceed
        } = await prompt({
          name: "proceed",
          message: `Are you sure you want to continue?`,
          type: "confirm",
          default: false
        });

        if (!proceed) {
          process.exit(0);
        }
      }

      console.log();
      ora.start(`Creating a new GraphQL API in ${_chalk.default.green(input.path)}...`);
      await wait(1000);

      _fs.default.mkdirSync(input.path, {
        recursive: true
      });

      await ncp(templateFolderPath, input.path);
      const replacements = [{
        find: "Project application name",
        replaceWith: input.name
      }, {
        find: "Project application description",
        replaceWith: input.description
      }, {
        find: "projectApplicationName",
        replaceWith: _case.default.camel(input.name)
      }, {
        find: "project-application-name",
        replaceWith: _case.default.kebab(input.name)
      }, {
        find: "project/application/path",
        replaceWith: input.path
      }, {
        find: "project-application-path",
        replaceWith: _case.default.kebab(input.path)
      }];
      (0, _replaceInPath.replaceInPath)(_path.default.join(input.path, "/**/*.*"), replacements); // Update path to the root tsconfig.json file.

      const tsConfigJsonPath = _path.default.join(input.path, "code", "graphql", "tsconfig.json");

      const tsConfigJson = await (0, _loadJsonFile.default)(tsConfigJsonPath);
      tsConfigJson.extends = _path.default.join(_path.default.relative(_path.default.join(input.path, "code", "graphql"), context.project.root), "tsconfig.json");
      await (0, _writeJsonFile.default)(tsConfigJsonPath, tsConfigJson); // Multiple replacements follow...

      {
        // Update path to the root .babel.node file.
        const p = _path.default.join(input.path, "code", "graphql", ".babelrc.js");

        const replacements = [{
          find: "PATH",
          replaceWith: _path.default.relative(_path.default.join(context.project.root, input.path, "code", "graphql"), context.project.root)
        }];
        (0, _replaceInPath.replaceInPath)(p, replacements);
      }
      {
        // Update path to the root jest.config.base file.
        const p = _path.default.join(input.path, "code", "graphql", "jest.config.js");

        const replacements = [{
          find: "PATH",
          replaceWith: _path.default.relative(_path.default.join(context.project.root, input.path, "code", "graphql"), context.project.root)
        }];
        (0, _replaceInPath.replaceInPath)(p, replacements);
      }
      {
        // Set correct `@webiny/*` package versions in the package.json file.
        const p = _path.default.join(input.path, "code", "graphql", "package.json");

        const replacements = [{
          find: "WEBINY_VERSION",
          replaceWith: context.version
        }];
        (0, _replaceInPath.replaceInPath)(p, replacements);
      }
      ora.stopAndPersist({
        symbol: _chalk.default.green("✔"),
        text: `New GraphQL API created in ${_chalk.default.green(input.path)}.`
      });
      ora.start(`Updating the list of workspaces in the root ${_chalk.default.green("package.json")} file...`);
      await wait(1000); // Add package to workspaces.

      const rootPackageJsonPath = _path.default.join(context.project.root, "package.json");

      const pathToAdd = `${input.path}/code/graphql`;
      await (0, _utils2.addWorkspaceToRootPackageJson)(rootPackageJsonPath, pathToAdd);
      ora.stopAndPersist({
        symbol: _chalk.default.green("✔"),
        text: `The list of workspaces in the root ${_chalk.default.green("package.json")} file updated.`
      });
      ora.start(`Finalizing...`); // Once everything is done, run `yarn` so the new packages are automatically installed.

      try {
        await (0, _execa.default)("yarn");
        await (0, _execa.default)("yarn", ["postinstall"]);
      } catch (err) {
        throw new _error.default(`Unable to install dependencies. Try running "yarn" in project root manually.`, err.message);
      }

      await (0, _utils2.formatCode)(["**/*.ts", "**/*.tsx"], {
        cwd: input.path
      });
      ora.stopAndPersist({
        symbol: _chalk.default.green("✔"),
        text: `Finalized.`
      }); // Used in the Extend GraphQL API scaffold (auto filling the plugins folder path).

      context.localStorage.set(_utils2.LAST_USED_GQL_API_PLUGINS_PATH, _path.default.join(input.path, "code", "graphql", "src", "plugins"));
      await wait(500);
    },
    onSuccess: async options => {
      const {
        input,
        context,
        inquirer
      } = options;
      const prompt = inquirer.createPromptModule();
      console.log();
      console.log(_chalk.default.bold("Extend GraphQL API"));
      console.log(`At the moment, the new GraphQL API is empty. It does not contain any GraphQL types or resolvers.`);
      const {
        extendGraphQLAPI
      } = await prompt({
        name: "extendGraphQLAPI",
        message: `Do you want to create initial GraphQL types and resolvers now?`,
        type: "confirm",
        default: true
      });

      if (extendGraphQLAPI) {
        const {
          dataModelName
        } = await prompt({
          name: "dataModelName",
          message: `Enter initial entity name:`,
          default: "Todo"
        });
        const cliPluginScaffoldGraphQl = context.plugins.byName("cli-plugin-scaffold-graphql");
        await cliPluginScaffoldGraphQl.scaffold.generate(_objectSpread(_objectSpread({}, options), {}, {
          input: {
            showConfirmation: false,
            dataModelName,
            pluginsFolderPath: _path.default.join(input.path, "code", "graphql", "src", "plugins")
          }
        }));
      }

      console.log();
      console.log(_chalk.default.bold("Initial GraphQL API Deployment"));
      console.log(`To begin developing, the new GraphQL API needs to be deployed.`);
      const {
        deploy
      } = await prompt({
        name: "deploy",
        message: `Do you want to deploy it now?`,
        type: "confirm",
        default: true
      });
      console.log();

      if (deploy) {
        console.log(`Running ${_chalk.default.green(`yarn webiny deploy ${input.path}`)} command...`);
        console.log();
        await deployGraphQLAPI(input.path, "dev", input);
      }

      console.log(`${_chalk.default.green("✔")} New GraphQL API created successfully.`);
      console.log();

      if (!deploy) {
        console.log(_chalk.default.bold("Next Steps"));
        console.log(`‣ deploy the new GraphQL API by running ${_chalk.default.green(`yarn webiny deploy ${input.path} --env dev`)}`);
      } else {
        const stackOutput = (0, _utils.getStackOutput)({
          folder: input.path,
          env: "dev"
        });
        console.log(_chalk.default.bold("Next Steps"));
        console.log(`‣ open your GraphQL API with a GraphQL client, via the following URL:\n  ${_chalk.default.green(`[POST] ${stackOutput.graphqlApiUrl}`)}`);
      }

      console.log(`‣ continue GraphQL API development by running ${_chalk.default.green(`yarn webiny watch ${input.path} --env dev`)}`);
      console.log(`‣ to speed up your GraphQL API development, use the ${_chalk.default.green(`Extend GraphQL API`)} scaffold`);
      console.log();
      console.log(_chalk.default.bold("Useful Links"));
      const links = [["GraphQL API Scaffold", SCAFFOLD_DOCS_LINK], ["Create Custom Application Tutorial", "https://www.webiny.com/docs/tutorials/create-custom-application/introduction"], ["Extend GraphQL API Scaffold", "https://www.webiny.com/docs/how-to-guides/scaffolding/extend-graphql-api"], ["Need a GraphQL Client? Check Out GraphQL Playground", "https://github.com/graphql/graphql-playground"], ["Use the Watch Command", "https://www.webiny.com/docs/how-to-guides/use-watch-command"]];
      links.forEach(([text, url]) => console.log((0, _terminalLink.default)("‣ " + text, url, {
        fallback: (text, link) => text + " - " + link
      })));
    }
  }
});

exports.default = _default;
//# sourceMappingURL=index.js.map