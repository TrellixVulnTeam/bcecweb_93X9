{"version":3,"sources":["../src/index.ts"],"names":["deployGraphQLAPI","stack","env","inputs","Boolean","debug","stdio","ncp","util","promisify","ncpBase","SCAFFOLD_DOCS_LINK","name","type","scaffold","description","link","isSupported","questions","message","default","validate","length","input","Case","kebab","appPath","locationPath","path","resolve","fs","existsSync","chalk","red","generate","options","context","inquirer","wait","ora","templateFolderPath","join","__dirname","showConfirmation","console","log","bold","green","prompt","createPromptModule","proceed","process","exit","start","mkdirSync","recursive","replacements","find","replaceWith","camel","tsConfigJsonPath","tsConfigJson","extends","relative","project","root","p","version","stopAndPersist","symbol","text","rootPackageJsonPath","pathToAdd","err","Error","cwd","localStorage","set","LAST_USED_GQL_API_PLUGINS_PATH","onSuccess","extendGraphQLAPI","dataModelName","cliPluginScaffoldGraphQl","plugins","byName","pluginsFolderPath","deploy","stackOutput","folder","graphqlApiUrl","links","forEach","url","fallback"],"mappings":";;;;;;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAKA;;AACA;;;;;;AAUO,MAAMA,gBAAgB,GAAG,CAACC,KAAD,EAAQC,GAAR,EAAaC,MAAb,KAC5B,oBAAM,MAAN,EAAc,CAAC,QAAD,EAAW,QAAX,EAAqBF,KAArB,EAA4B,OAA5B,EAAqCC,GAArC,EAA0C,SAA1C,EAAqDE,OAAO,CAACD,MAAM,CAACE,KAAR,CAA5D,CAAd,EAA2F;AACvFC,EAAAA,KAAK,EAAE;AADgF,CAA3F,CADG;;;;AAKP,MAAMC,GAAG,GAAGC,cAAKC,SAAL,CAAeC,aAAQH,GAAvB,CAAZ;;AAEA,MAAMI,kBAAkB,GAAG,mEAA3B;;eAEe,OAA0C;AACrDC,EAAAA,IAAI,EAAE,0CAD+C;AAErDC,EAAAA,IAAI,EAAE,8BAF+C;AAGrDC,EAAAA,QAAQ,EAAE;AACNF,IAAAA,IAAI,EAAE,aADA;AAENG,IAAAA,WAAW,EACP,sEACCC,sBAAKC,WAAL,GAAmB,MAAM,2BAAK,aAAL,EAAoBN,kBAApB,CAAzB,GAAmE,EADpE,CAHE;AAKNO,IAAAA,SAAS,EAAE,MAAM;AACb,aAAO,CACH;AACIN,QAAAA,IAAI,EAAE,MADV;AAEIO,QAAAA,OAAO,EAAE,yBAFb;AAGIC,QAAAA,OAAO,EAAG,oBAHd;AAIIC,QAAAA,QAAQ,EAAET,IAAI,IAAI;AACd,cAAIA,IAAI,CAACU,MAAL,GAAc,CAAlB,EAAqB;AACjB,mBAAQ,+CAAR;AACH;;AAED,iBAAO,IAAP;AACH;AAVL,OADG,EAaH;AACIV,QAAAA,IAAI,EAAE,aADV;AAEIO,QAAAA,OAAO,EAAE,oBAFb;AAGIC,QAAAA,OAAO,EAAEG,KAAK,IAAI;AACd,iBAAQ,eAAcA,KAAK,CAACX,IAAK,eAAjC;AACH,SALL;AAMIS,QAAAA,QAAQ,EAAEN,WAAW,IAAI;AACrB,cAAIA,WAAW,CAACO,MAAZ,GAAqB,CAAzB,EAA4B;AACxB,mBAAQ,4DAAR;AACH;;AAED,iBAAO,IAAP;AACH;AAZL,OAbG,EA2BH;AACIV,QAAAA,IAAI,EAAE,MADV;AAEIO,QAAAA,OAAO,EAAE,yBAFb;AAGIC,QAAAA,OAAO,EAAEG,KAAK,IAAI;AACd,iBAAQ,GAAEC,cAAKC,KAAL,CAAWF,KAAK,CAACX,IAAjB,CAAuB,EAAjC;AACH,SALL;AAMIS,QAAAA,QAAQ,EAAEK,OAAO,IAAI;AACjB,cAAI,CAACA,OAAD,IAAYA,OAAO,CAACJ,MAAR,GAAiB,CAAjC,EAAoC;AAChC,mBAAQ,yEAAR;AACH;;AAED,gBAAMK,YAAY,GAAGC,cAAKC,OAAL,CAAaH,OAAb,CAArB;;AACA,cAAII,YAAGC,UAAH,CAAcJ,YAAd,CAAJ,EAAiC;AAC7B,mBAAQ,yBAAwBK,eAAMC,GAAN,CAC5BP,OAD4B,CAE9B,yBAFF;AAGH;;AAED,iBAAO,IAAP;AACH;AAnBL,OA3BG,CAAP;AAiDH,KAvDK;AAwDNQ,IAAAA,QAAQ,EAAE,MAAMC,OAAN,IAAiB;AACvB,YAAM;AAAEZ,QAAAA,KAAF;AAASa,QAAAA,OAAT;AAAkBC,QAAAA,QAAlB;AAA4BC,QAAAA,IAA5B;AAAkCC,QAAAA;AAAlC,UAA0CJ,OAAhD;;AAEA,YAAMK,kBAAkB,GAAGZ,cAAKa,IAAL,CAAUC,SAAV,EAAqB,UAArB,CAA3B;;AAEA,UAAInB,KAAK,CAACoB,gBAAN,KAA2B,KAA/B,EAAsC;AAClCC,QAAAA,OAAO,CAACC,GAAR;AACAD,QAAAA,OAAO,CAACC,GAAR,CACK,GAAEb,eAAMc,IAAN,CAAW,4DAAX,CAAyE,EADhF;AAIAF,QAAAA,OAAO,CAACC,GAAR,CAAa,0CAAyCb,eAAMe,KAAN,CAAYxB,KAAK,CAACK,IAAlB,CAAwB,EAA9E;AACAgB,QAAAA,OAAO,CAACC,GAAR,CACK,wDAAuDb,eAAMe,KAAN,CACpD,cADoD,CAEtD,OAHN;AAMA,cAAMC,MAAM,GAAGX,QAAQ,CAACY,kBAAT,EAAf;AAEA,cAAM;AAAEC,UAAAA;AAAF,YAAc,MAAMF,MAAM,CAAC;AAC7BpC,UAAAA,IAAI,EAAE,SADuB;AAE7BO,UAAAA,OAAO,EAAG,oCAFmB;AAG7BN,UAAAA,IAAI,EAAE,SAHuB;AAI7BO,UAAAA,OAAO,EAAE;AAJoB,SAAD,CAAhC;;AAOA,YAAI,CAAC8B,OAAL,EAAc;AACVC,UAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACH;AACJ;;AAEDR,MAAAA,OAAO,CAACC,GAAR;AAEAN,MAAAA,GAAG,CAACc,KAAJ,CAAW,iCAAgCrB,eAAMe,KAAN,CAAYxB,KAAK,CAACK,IAAlB,CAAwB,KAAnE;AACA,YAAMU,IAAI,CAAC,IAAD,CAAV;;AAEAR,kBAAGwB,SAAH,CAAa/B,KAAK,CAACK,IAAnB,EAAyB;AAAE2B,QAAAA,SAAS,EAAE;AAAb,OAAzB;;AAEA,YAAMhD,GAAG,CAACiC,kBAAD,EAAqBjB,KAAK,CAACK,IAA3B,CAAT;AAEA,YAAM4B,YAAY,GAAG,CACjB;AAAEC,QAAAA,IAAI,EAAE,0BAAR;AAAoCC,QAAAA,WAAW,EAAEnC,KAAK,CAACX;AAAvD,OADiB,EAEjB;AAAE6C,QAAAA,IAAI,EAAE,iCAAR;AAA2CC,QAAAA,WAAW,EAAEnC,KAAK,CAACR;AAA9D,OAFiB,EAGjB;AAAE0C,QAAAA,IAAI,EAAE,wBAAR;AAAkCC,QAAAA,WAAW,EAAElC,cAAKmC,KAAL,CAAWpC,KAAK,CAACX,IAAjB;AAA/C,OAHiB,EAIjB;AAAE6C,QAAAA,IAAI,EAAE,0BAAR;AAAoCC,QAAAA,WAAW,EAAElC,cAAKC,KAAL,CAAWF,KAAK,CAACX,IAAjB;AAAjD,OAJiB,EAKjB;AACI6C,QAAAA,IAAI,EAAE,0BADV;AAEIC,QAAAA,WAAW,EAAEnC,KAAK,CAACK;AAFvB,OALiB,EASjB;AACI6B,QAAAA,IAAI,EAAE,0BADV;AAEIC,QAAAA,WAAW,EAAElC,cAAKC,KAAL,CAAWF,KAAK,CAACK,IAAjB;AAFjB,OATiB,CAArB;AAeA,wCAAcA,cAAKa,IAAL,CAAUlB,KAAK,CAACK,IAAhB,EAAsB,SAAtB,CAAd,EAAgD4B,YAAhD,EAxDuB,CA0DvB;;AACA,YAAMI,gBAAgB,GAAGhC,cAAKa,IAAL,CAAUlB,KAAK,CAACK,IAAhB,EAAsB,MAAtB,EAA8B,SAA9B,EAAyC,eAAzC,CAAzB;;AACA,YAAMiC,YAAY,GAAG,MAAM,2BAAuBD,gBAAvB,CAA3B;AACAC,MAAAA,YAAY,CAACC,OAAb,GAAuBlC,cAAKa,IAAL,CACnBb,cAAKmC,QAAL,CAAcnC,cAAKa,IAAL,CAAUlB,KAAK,CAACK,IAAhB,EAAsB,MAAtB,EAA8B,SAA9B,CAAd,EAAwDQ,OAAO,CAAC4B,OAAR,CAAgBC,IAAxE,CADmB,EAEnB,eAFmB,CAAvB;AAIA,YAAM,4BAAUL,gBAAV,EAA4BC,YAA5B,CAAN,CAjEuB,CAmEvB;;AAEA;AACI;AACA,cAAMK,CAAC,GAAGtC,cAAKa,IAAL,CAAUlB,KAAK,CAACK,IAAhB,EAAsB,MAAtB,EAA8B,SAA9B,EAAyC,aAAzC,CAAV;;AACA,cAAM4B,YAAY,GAAG,CACjB;AACIC,UAAAA,IAAI,EAAE,MADV;AAEIC,UAAAA,WAAW,EAAE9B,cAAKmC,QAAL,CACTnC,cAAKa,IAAL,CAAUL,OAAO,CAAC4B,OAAR,CAAgBC,IAA1B,EAAgC1C,KAAK,CAACK,IAAtC,EAA4C,MAA5C,EAAoD,SAApD,CADS,EAETQ,OAAO,CAAC4B,OAAR,CAAgBC,IAFP;AAFjB,SADiB,CAArB;AASA,0CAAcC,CAAd,EAAiBV,YAAjB;AACH;AAED;AACI;AACA,cAAMU,CAAC,GAAGtC,cAAKa,IAAL,CAAUlB,KAAK,CAACK,IAAhB,EAAsB,MAAtB,EAA8B,SAA9B,EAAyC,gBAAzC,CAAV;;AACA,cAAM4B,YAAY,GAAG,CACjB;AACIC,UAAAA,IAAI,EAAE,MADV;AAEIC,UAAAA,WAAW,EAAE9B,cAAKmC,QAAL,CACTnC,cAAKa,IAAL,CAAUL,OAAO,CAAC4B,OAAR,CAAgBC,IAA1B,EAAgC1C,KAAK,CAACK,IAAtC,EAA4C,MAA5C,EAAoD,SAApD,CADS,EAETQ,OAAO,CAAC4B,OAAR,CAAgBC,IAFP;AAFjB,SADiB,CAArB;AASA,0CAAcC,CAAd,EAAiBV,YAAjB;AACH;AAED;AACI;AACA,cAAMU,CAAC,GAAGtC,cAAKa,IAAL,CAAUlB,KAAK,CAACK,IAAhB,EAAsB,MAAtB,EAA8B,SAA9B,EAAyC,cAAzC,CAAV;;AACA,cAAM4B,YAAY,GAAG,CACjB;AACIC,UAAAA,IAAI,EAAE,gBADV;AAEIC,UAAAA,WAAW,EAAEtB,OAAO,CAAC+B;AAFzB,SADiB,CAArB;AAMA,0CAAcD,CAAd,EAAiBV,YAAjB;AACH;AAEDjB,MAAAA,GAAG,CAAC6B,cAAJ,CAAmB;AACfC,QAAAA,MAAM,EAAErC,eAAMe,KAAN,CAAY,GAAZ,CADO;AAEfuB,QAAAA,IAAI,EAAG,8BAA6BtC,eAAMe,KAAN,CAAYxB,KAAK,CAACK,IAAlB,CAAwB;AAF7C,OAAnB;AAKAW,MAAAA,GAAG,CAACc,KAAJ,CACK,+CAA8CrB,eAAMe,KAAN,CAAY,cAAZ,CAA4B,UAD/E;AAGA,YAAMT,IAAI,CAAC,IAAD,CAAV,CAvHuB,CAyHvB;;AACA,YAAMiC,mBAAmB,GAAG3C,cAAKa,IAAL,CAAUL,OAAO,CAAC4B,OAAR,CAAgBC,IAA1B,EAAgC,cAAhC,CAA5B;;AACA,YAAMO,SAAS,GAAI,GAAEjD,KAAK,CAACK,IAAK,eAAhC;AACA,YAAM,2CAA8B2C,mBAA9B,EAAmDC,SAAnD,CAAN;AAEAjC,MAAAA,GAAG,CAAC6B,cAAJ,CAAmB;AACfC,QAAAA,MAAM,EAAErC,eAAMe,KAAN,CAAY,GAAZ,CADO;AAEfuB,QAAAA,IAAI,EAAG,sCAAqCtC,eAAMe,KAAN,CACxC,cADwC,CAE1C;AAJa,OAAnB;AAOAR,MAAAA,GAAG,CAACc,KAAJ,CAAW,eAAX,EArIuB,CAuIvB;;AACA,UAAI;AACA,cAAM,oBAAM,MAAN,CAAN;AACA,cAAM,oBAAM,MAAN,EAAc,CAAC,aAAD,CAAd,CAAN;AACH,OAHD,CAGE,OAAOoB,GAAP,EAAY;AACV,cAAM,IAAIC,cAAJ,CACD,8EADC,EAEFD,GAAG,CAACtD,OAFF,CAAN;AAIH;;AAED,YAAM,wBAAW,CAAC,SAAD,EAAY,UAAZ,CAAX,EAAoC;AAAEwD,QAAAA,GAAG,EAAEpD,KAAK,CAACK;AAAb,OAApC,CAAN;AAEAW,MAAAA,GAAG,CAAC6B,cAAJ,CAAmB;AACfC,QAAAA,MAAM,EAAErC,eAAMe,KAAN,CAAY,GAAZ,CADO;AAEfuB,QAAAA,IAAI,EAAG;AAFQ,OAAnB,EApJuB,CAyJvB;;AACAlC,MAAAA,OAAO,CAACwC,YAAR,CAAqBC,GAArB,CACIC,sCADJ,EAEIlD,cAAKa,IAAL,CAAUlB,KAAK,CAACK,IAAhB,EAAsB,MAAtB,EAA8B,SAA9B,EAAyC,KAAzC,EAAgD,SAAhD,CAFJ;AAKA,YAAMU,IAAI,CAAC,GAAD,CAAV;AACH,KAxNK;AAyNNyC,IAAAA,SAAS,EAAE,MAAM5C,OAAN,IAAiB;AACxB,YAAM;AAAEZ,QAAAA,KAAF;AAASa,QAAAA,OAAT;AAAkBC,QAAAA;AAAlB,UAA+BF,OAArC;AACA,YAAMa,MAAM,GAAGX,QAAQ,CAACY,kBAAT,EAAf;AAEAL,MAAAA,OAAO,CAACC,GAAR;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYb,eAAMc,IAAN,CAAW,oBAAX,CAAZ;AACAF,MAAAA,OAAO,CAACC,GAAR,CACK,kGADL;AAIA,YAAM;AAAEmC,QAAAA;AAAF,UAAuB,MAAMhC,MAAM,CAAC;AACtCpC,QAAAA,IAAI,EAAE,kBADgC;AAEtCO,QAAAA,OAAO,EAAG,gEAF4B;AAGtCN,QAAAA,IAAI,EAAE,SAHgC;AAItCO,QAAAA,OAAO,EAAE;AAJ6B,OAAD,CAAzC;;AAOA,UAAI4D,gBAAJ,EAAsB;AAClB,cAAM;AAAEC,UAAAA;AAAF,YAAoB,MAAMjC,MAAM,CAAC;AACnCpC,UAAAA,IAAI,EAAE,eAD6B;AAEnCO,UAAAA,OAAO,EAAG,4BAFyB;AAGnCC,UAAAA,OAAO,EAAE;AAH0B,SAAD,CAAtC;AAMA,cAAM8D,wBAAwB,GAAG9C,OAAO,CAAC+C,OAAR,CAAgBC,MAAhB,CAC7B,6BAD6B,CAAjC;AAIA,cAAMF,wBAAwB,CAACpE,QAAzB,CAAkCoB,QAAlC,iCACCC,OADD;AAEFZ,UAAAA,KAAK,EAAE;AACHoB,YAAAA,gBAAgB,EAAE,KADf;AAEHsC,YAAAA,aAFG;AAGHI,YAAAA,iBAAiB,EAAEzD,cAAKa,IAAL,CACflB,KAAK,CAACK,IADS,EAEf,MAFe,EAGf,SAHe,EAIf,KAJe,EAKf,SALe;AAHhB;AAFL,WAAN;AAcH;;AAEDgB,MAAAA,OAAO,CAACC,GAAR;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYb,eAAMc,IAAN,CAAW,gCAAX,CAAZ;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAa,gEAAb;AAEA,YAAM;AAAEyC,QAAAA;AAAF,UAAa,MAAMtC,MAAM,CAAC;AAC5BpC,QAAAA,IAAI,EAAE,QADsB;AAE5BO,QAAAA,OAAO,EAAG,+BAFkB;AAG5BN,QAAAA,IAAI,EAAE,SAHsB;AAI5BO,QAAAA,OAAO,EAAE;AAJmB,OAAD,CAA/B;AAOAwB,MAAAA,OAAO,CAACC,GAAR;;AAEA,UAAIyC,MAAJ,EAAY;AACR1C,QAAAA,OAAO,CAACC,GAAR,CACK,WAAUb,eAAMe,KAAN,CAAa,sBAAqBxB,KAAK,CAACK,IAAK,EAA7C,CAAgD,aAD/D;AAGAgB,QAAAA,OAAO,CAACC,GAAR;AACA,cAAM7C,gBAAgB,CAACuB,KAAK,CAACK,IAAP,EAAa,KAAb,EAAoBL,KAApB,CAAtB;AACH;;AAEDqB,MAAAA,OAAO,CAACC,GAAR,CAAa,GAAEb,eAAMe,KAAN,CAAY,GAAZ,CAAiB,wCAAhC;AACAH,MAAAA,OAAO,CAACC,GAAR;;AAEA,UAAI,CAACyC,MAAL,EAAa;AACT1C,QAAAA,OAAO,CAACC,GAAR,CAAYb,eAAMc,IAAN,CAAW,YAAX,CAAZ;AACAF,QAAAA,OAAO,CAACC,GAAR,CACK,2CAA0Cb,eAAMe,KAAN,CACtC,sBAAqBxB,KAAK,CAACK,IAAK,YADM,CAEzC,EAHN;AAKH,OAPD,MAOO;AACH,cAAM2D,WAAW,GAAG,2BAAe;AAC/BC,UAAAA,MAAM,EAAEjE,KAAK,CAACK,IADiB;AAE/B1B,UAAAA,GAAG,EAAE;AAF0B,SAAf,CAApB;AAKA0C,QAAAA,OAAO,CAACC,GAAR,CAAYb,eAAMc,IAAN,CAAW,YAAX,CAAZ;AACAF,QAAAA,OAAO,CAACC,GAAR,CACK,4EAA2Eb,eAAMe,KAAN,CACvE,UAASwC,WAAW,CAACE,aAAc,EADoC,CAE1E,EAHN;AAKH;;AAED7C,MAAAA,OAAO,CAACC,GAAR,CACK,iDAAgDb,eAAMe,KAAN,CAC5C,qBAAoBxB,KAAK,CAACK,IAAK,YADa,CAE/C,EAHN;AAMAgB,MAAAA,OAAO,CAACC,GAAR,CACK,uDAAsDb,eAAMe,KAAN,CAClD,oBADkD,CAErD,WAHN;AAMAH,MAAAA,OAAO,CAACC,GAAR;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYb,eAAMc,IAAN,CAAW,cAAX,CAAZ;AAEA,YAAM4C,KAAK,GAAG,CACV,CAAC,sBAAD,EAAyB/E,kBAAzB,CADU,EAEV,CACI,oCADJ,EAEI,8EAFJ,CAFU,EAMV,CACI,6BADJ,EAEI,0EAFJ,CANU,EAUV,CACI,qDADJ,EAEI,+CAFJ,CAVU,EAcV,CACI,uBADJ,EAEI,6DAFJ,CAdU,CAAd;AAoBA+E,MAAAA,KAAK,CAACC,OAAN,CAAc,CAAC,CAACrB,IAAD,EAAOsB,GAAP,CAAD,KACVhD,OAAO,CAACC,GAAR,CACI,2BAAK,OAAOyB,IAAZ,EAAkBsB,GAAlB,EAAuB;AAAEC,QAAAA,QAAQ,EAAE,CAACvB,IAAD,EAAOtD,IAAP,KAAgBsD,IAAI,GAAG,KAAP,GAAetD;AAA3C,OAAvB,CADJ,CADJ;AAKH;AA1VK;AAH2C,CAA1C,C","sourcesContent":["import { CliCommandScaffoldTemplate } from \"@webiny/cli-plugin-scaffold/types\";\nimport { getStackOutput } from \"@webiny/cli-plugin-deploy-pulumi/utils\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport util from \"util\";\nimport ncpBase from \"ncp\";\nimport Case from \"case\";\nimport readJson from \"load-json-file\";\nimport writeJson from \"write-json-file\";\nimport { replaceInPath } from \"replace-in-path\";\nimport chalk from \"chalk\";\nimport link from \"terminal-link\";\nimport {\n    formatCode,\n    addWorkspaceToRootPackageJson,\n    LAST_USED_GQL_API_PLUGINS_PATH\n} from \"@webiny/cli-plugin-scaffold/utils\";\nimport execa from \"execa\";\nimport Error from \"@webiny/error\";\nimport { TsConfigJson } from \"@webiny/cli-plugin-scaffold/types\";\n\ninterface Input {\n    showConfirmation?: boolean;\n    name: string;\n    description: string;\n    path: string;\n}\n\nexport const deployGraphQLAPI = (stack, env, inputs) =>\n    execa(\"yarn\", [\"webiny\", \"deploy\", stack, \"--env\", env, \"--debug\", Boolean(inputs.debug)], {\n        stdio: \"inherit\"\n    });\n\nconst ncp = util.promisify(ncpBase.ncp);\n\nconst SCAFFOLD_DOCS_LINK = \"https://www.webiny.com/docs/how-to-guides/scaffolding/graphql-api\";\n\nexport default (): CliCommandScaffoldTemplate<Input> => ({\n    name: \"cli-plugin-scaffold-template-graphql-api\",\n    type: \"cli-plugin-scaffold-template\",\n    scaffold: {\n        name: \"GraphQL API\",\n        description:\n            \"Creates a GraphQL API powered by AWS Lambda and Amazon DynamoDB.\" +\n            (link.isSupported ? \" \" + link(\"Learn more.\", SCAFFOLD_DOCS_LINK) : \"\"),\n        questions: () => {\n            return [\n                {\n                    name: \"name\",\n                    message: \"Enter GraphQL API name:\",\n                    default: `My New GraphQL API`,\n                    validate: name => {\n                        if (name.length < 2) {\n                            return `Please enter a name for your new GraphQL API.`;\n                        }\n\n                        return true;\n                    }\n                },\n                {\n                    name: \"description\",\n                    message: \"Enter description:\",\n                    default: input => {\n                        return `This is the ${input.name} GraphQL API.`;\n                    },\n                    validate: description => {\n                        if (description.length < 2) {\n                            return `Please enter a short description for your new GraphQL API.`;\n                        }\n\n                        return true;\n                    }\n                },\n                {\n                    name: \"path\",\n                    message: \"Enter GraphQL API path:\",\n                    default: input => {\n                        return `${Case.kebab(input.name)}`;\n                    },\n                    validate: appPath => {\n                        if (!appPath || appPath.length < 2) {\n                            return `Please enter a valid path in which the new GraphQL API will be created.`;\n                        }\n\n                        const locationPath = path.resolve(appPath);\n                        if (fs.existsSync(locationPath)) {\n                            return `Cannot continue - the ${chalk.red(\n                                appPath\n                            )} folder already exists.`;\n                        }\n\n                        return true;\n                    }\n                }\n            ];\n        },\n        generate: async options => {\n            const { input, context, inquirer, wait, ora } = options;\n\n            const templateFolderPath = path.join(__dirname, \"template\");\n\n            if (input.showConfirmation !== false) {\n                console.log();\n                console.log(\n                    `${chalk.bold(\"The following operations will be performed on your behalf:\")}`\n                );\n\n                console.log(`- a new GraphQL API will be created in ${chalk.green(input.path)}`);\n                console.log(\n                    `- the list of workspaces will be updated in the root ${chalk.green(\n                        \"package.json\"\n                    )} file`\n                );\n\n                const prompt = inquirer.createPromptModule();\n\n                const { proceed } = await prompt({\n                    name: \"proceed\",\n                    message: `Are you sure you want to continue?`,\n                    type: \"confirm\",\n                    default: false\n                });\n\n                if (!proceed) {\n                    process.exit(0);\n                }\n            }\n\n            console.log();\n\n            ora.start(`Creating a new GraphQL API in ${chalk.green(input.path)}...`);\n            await wait(1000);\n\n            fs.mkdirSync(input.path, { recursive: true });\n\n            await ncp(templateFolderPath, input.path);\n\n            const replacements = [\n                { find: \"Project application name\", replaceWith: input.name },\n                { find: \"Project application description\", replaceWith: input.description },\n                { find: \"projectApplicationName\", replaceWith: Case.camel(input.name) },\n                { find: \"project-application-name\", replaceWith: Case.kebab(input.name) },\n                {\n                    find: \"project/application/path\",\n                    replaceWith: input.path\n                },\n                {\n                    find: \"project-application-path\",\n                    replaceWith: Case.kebab(input.path)\n                }\n            ];\n\n            replaceInPath(path.join(input.path, \"/**/*.*\"), replacements);\n\n            // Update path to the root tsconfig.json file.\n            const tsConfigJsonPath = path.join(input.path, \"code\", \"graphql\", \"tsconfig.json\");\n            const tsConfigJson = await readJson<TsConfigJson>(tsConfigJsonPath);\n            tsConfigJson.extends = path.join(\n                path.relative(path.join(input.path, \"code\", \"graphql\"), context.project.root),\n                \"tsconfig.json\"\n            );\n            await writeJson(tsConfigJsonPath, tsConfigJson);\n\n            // Multiple replacements follow...\n\n            {\n                // Update path to the root .babel.node file.\n                const p = path.join(input.path, \"code\", \"graphql\", \".babelrc.js\");\n                const replacements = [\n                    {\n                        find: \"PATH\",\n                        replaceWith: path.relative(\n                            path.join(context.project.root, input.path, \"code\", \"graphql\"),\n                            context.project.root\n                        )\n                    }\n                ];\n                replaceInPath(p, replacements);\n            }\n\n            {\n                // Update path to the root jest.config.base file.\n                const p = path.join(input.path, \"code\", \"graphql\", \"jest.config.js\");\n                const replacements = [\n                    {\n                        find: \"PATH\",\n                        replaceWith: path.relative(\n                            path.join(context.project.root, input.path, \"code\", \"graphql\"),\n                            context.project.root\n                        )\n                    }\n                ];\n                replaceInPath(p, replacements);\n            }\n\n            {\n                // Set correct `@webiny/*` package versions in the package.json file.\n                const p = path.join(input.path, \"code\", \"graphql\", \"package.json\");\n                const replacements = [\n                    {\n                        find: \"WEBINY_VERSION\",\n                        replaceWith: context.version\n                    }\n                ];\n                replaceInPath(p, replacements);\n            }\n\n            ora.stopAndPersist({\n                symbol: chalk.green(\"✔\"),\n                text: `New GraphQL API created in ${chalk.green(input.path)}.`\n            });\n\n            ora.start(\n                `Updating the list of workspaces in the root ${chalk.green(\"package.json\")} file...`\n            );\n            await wait(1000);\n\n            // Add package to workspaces.\n            const rootPackageJsonPath = path.join(context.project.root, \"package.json\");\n            const pathToAdd = `${input.path}/code/graphql`;\n            await addWorkspaceToRootPackageJson(rootPackageJsonPath, pathToAdd);\n\n            ora.stopAndPersist({\n                symbol: chalk.green(\"✔\"),\n                text: `The list of workspaces in the root ${chalk.green(\n                    \"package.json\"\n                )} file updated.`\n            });\n\n            ora.start(`Finalizing...`);\n\n            // Once everything is done, run `yarn` so the new packages are automatically installed.\n            try {\n                await execa(\"yarn\");\n                await execa(\"yarn\", [\"postinstall\"]);\n            } catch (err) {\n                throw new Error(\n                    `Unable to install dependencies. Try running \"yarn\" in project root manually.`,\n                    err.message\n                );\n            }\n\n            await formatCode([\"**/*.ts\", \"**/*.tsx\"], { cwd: input.path });\n\n            ora.stopAndPersist({\n                symbol: chalk.green(\"✔\"),\n                text: `Finalized.`\n            });\n\n            // Used in the Extend GraphQL API scaffold (auto filling the plugins folder path).\n            context.localStorage.set(\n                LAST_USED_GQL_API_PLUGINS_PATH,\n                path.join(input.path, \"code\", \"graphql\", \"src\", \"plugins\")\n            );\n\n            await wait(500);\n        },\n        onSuccess: async options => {\n            const { input, context, inquirer } = options;\n            const prompt = inquirer.createPromptModule();\n\n            console.log();\n            console.log(chalk.bold(\"Extend GraphQL API\"));\n            console.log(\n                `At the moment, the new GraphQL API is empty. It does not contain any GraphQL types or resolvers.`\n            );\n\n            const { extendGraphQLAPI } = await prompt({\n                name: \"extendGraphQLAPI\",\n                message: `Do you want to create initial GraphQL types and resolvers now?`,\n                type: \"confirm\",\n                default: true\n            });\n\n            if (extendGraphQLAPI) {\n                const { dataModelName } = await prompt({\n                    name: \"dataModelName\",\n                    message: `Enter initial entity name:`,\n                    default: \"Todo\"\n                });\n\n                const cliPluginScaffoldGraphQl = context.plugins.byName<CliCommandScaffoldTemplate>(\n                    \"cli-plugin-scaffold-graphql\"\n                );\n\n                await cliPluginScaffoldGraphQl.scaffold.generate({\n                    ...options,\n                    input: {\n                        showConfirmation: false,\n                        dataModelName,\n                        pluginsFolderPath: path.join(\n                            input.path,\n                            \"code\",\n                            \"graphql\",\n                            \"src\",\n                            \"plugins\"\n                        )\n                    }\n                });\n            }\n\n            console.log();\n            console.log(chalk.bold(\"Initial GraphQL API Deployment\"));\n            console.log(`To begin developing, the new GraphQL API needs to be deployed.`);\n\n            const { deploy } = await prompt({\n                name: \"deploy\",\n                message: `Do you want to deploy it now?`,\n                type: \"confirm\",\n                default: true\n            });\n\n            console.log();\n\n            if (deploy) {\n                console.log(\n                    `Running ${chalk.green(`yarn webiny deploy ${input.path}`)} command...`\n                );\n                console.log();\n                await deployGraphQLAPI(input.path, \"dev\", input);\n            }\n\n            console.log(`${chalk.green(\"✔\")} New GraphQL API created successfully.`);\n            console.log();\n\n            if (!deploy) {\n                console.log(chalk.bold(\"Next Steps\"));\n                console.log(\n                    `‣ deploy the new GraphQL API by running ${chalk.green(\n                        `yarn webiny deploy ${input.path} --env dev`\n                    )}`\n                );\n            } else {\n                const stackOutput = getStackOutput({\n                    folder: input.path,\n                    env: \"dev\"\n                });\n\n                console.log(chalk.bold(\"Next Steps\"));\n                console.log(\n                    `‣ open your GraphQL API with a GraphQL client, via the following URL:\\n  ${chalk.green(\n                        `[POST] ${stackOutput.graphqlApiUrl}`\n                    )}`\n                );\n            }\n\n            console.log(\n                `‣ continue GraphQL API development by running ${chalk.green(\n                    `yarn webiny watch ${input.path} --env dev`\n                )}`\n            );\n\n            console.log(\n                `‣ to speed up your GraphQL API development, use the ${chalk.green(\n                    `Extend GraphQL API`\n                )} scaffold`\n            );\n\n            console.log();\n            console.log(chalk.bold(\"Useful Links\"));\n\n            const links = [\n                [\"GraphQL API Scaffold\", SCAFFOLD_DOCS_LINK],\n                [\n                    \"Create Custom Application Tutorial\",\n                    \"https://www.webiny.com/docs/tutorials/create-custom-application/introduction\"\n                ],\n                [\n                    \"Extend GraphQL API Scaffold\",\n                    \"https://www.webiny.com/docs/how-to-guides/scaffolding/extend-graphql-api\"\n                ],\n                [\n                    \"Need a GraphQL Client? Check Out GraphQL Playground\",\n                    \"https://github.com/graphql/graphql-playground\"\n                ],\n                [\n                    \"Use the Watch Command\",\n                    \"https://www.webiny.com/docs/how-to-guides/use-watch-command\"\n                ]\n            ];\n\n            links.forEach(([text, url]) =>\n                console.log(\n                    link(\"‣ \" + text, url, { fallback: (text, link) => text + \" - \" + link })\n                )\n            );\n        }\n    }\n});\n"],"file":"index.js"}