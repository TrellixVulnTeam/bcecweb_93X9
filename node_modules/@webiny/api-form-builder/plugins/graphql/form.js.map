{"version":3,"sources":["../../../src/plugins/graphql/form.ts"],"names":["plugin","type","schema","typeDefs","resolvers","FbForm","overallStats","form","args","formBuilder","forms","getFormStats","id","settings","getSettings","auth","reCaptcha","FbQuery","getForm","_","revision","Response","e","ErrorResponse","getFormRevisions","revisions","listForms","ListResponse","getPublishedForm","root","parent","NotFoundResponse","getPublishedFormRevisionById","getLatestPublishedFormRevision","listFormSubmissions","options","submissions","meta","err","FbMutation","createForm","data","deleteForm","createRevisionFrom","createFormRevision","updateRevision","updateForm","publishRevision","publishForm","unpublishRevision","unpublishForm","deleteRevision","saveFormView","incrementFormViews","createFormSubmission","reCaptchaResponseToken","formSubmission","exportFormSubmissions","fileManager","limit","length","publishedRevisions","filter","r","published","rows","fields","i","j","field","fieldId","label","submissionData","row","Object","keys","map","push","csv","values","buffer","Buffer","from","key","storage","upload","size","name","keyPrefix","hideInFileManager","result","src","srcPrefix"],"mappings":"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","sourcesContent":["import { parseAsync } from \"json2csv\";\nimport {\n    ErrorResponse,\n    ListResponse,\n    NotFoundResponse,\n    Response\n} from \"@webiny/handler-graphql/responses\";\nimport { GraphQLSchemaPlugin } from \"@webiny/handler-graphql/types\";\nimport { FormBuilderContext } from \"../../types\";\n\nconst plugin: GraphQLSchemaPlugin<FormBuilderContext> = {\n    type: \"graphql-schema\",\n    schema: {\n        typeDefs: /* GraphQL */ `\n            enum FbFormStatusEnum {\n                published\n                draft\n                locked\n            }\n\n            type FbFormUser {\n                id: String\n                displayName: String\n                type: String\n            }\n\n            type FbForm {\n                id: ID\n                createdBy: FbFormUser\n                ownedBy: FbFormUser\n                createdOn: DateTime\n                savedOn: DateTime\n                publishedOn: DateTime\n                version: Int\n                name: String\n                slug: String\n                fields: [FbFormFieldType]\n                layout: [[String]]\n                settings: FbFormSettingsType\n                triggers: JSON\n                published: Boolean\n                locked: Boolean\n                status: FbFormStatusEnum\n                stats: FbFormStatsType\n                overallStats: FbFormStatsType\n            }\n\n            type FbFieldOptionsType {\n                label: String\n                value: String\n            }\n\n            input FbFieldOptionsInput {\n                label: String\n                value: String\n            }\n\n            input FbFieldValidationInput {\n                name: String!\n                message: String\n                settings: JSON\n            }\n\n            type FbFieldValidationType {\n                name: String!\n                message: String\n                settings: JSON\n            }\n\n            type FbFormFieldType {\n                _id: ID!\n                fieldId: String!\n                type: String!\n                name: String!\n                label: String\n                placeholderText: String\n                helpText: String\n                options: [FbFieldOptionsType]\n                validation: [FbFieldValidationType]\n                settings: JSON\n            }\n\n            input FbFormFieldInput {\n                _id: ID!\n                fieldId: String!\n                type: String!\n                name: String!\n                label: String\n                placeholderText: String\n                helpText: String\n                options: [FbFieldOptionsInput]\n                validation: [FbFieldValidationInput]\n                settings: JSON\n            }\n\n            type FbFormSettingsLayoutType {\n                renderer: String\n            }\n\n            type FbTermsOfServiceMessage {\n                enabled: Boolean\n                message: JSON\n                errorMessage: String\n            }\n\n            type FbFormReCaptchaSettings {\n                enabled: Boolean\n                siteKey: String\n                secretKey: String\n            }\n\n            type FbReCaptcha {\n                enabled: Boolean\n                errorMessage: JSON\n                settings: FbFormReCaptchaSettings\n            }\n\n            type FbFormSettingsType {\n                layout: FbFormSettingsLayoutType\n                submitButtonLabel: String\n                successMessage: JSON\n                termsOfServiceMessage: FbTermsOfServiceMessage\n                reCaptcha: FbReCaptcha\n            }\n\n            type FbFormStatsType {\n                views: Int\n                submissions: Int\n                conversionRate: Float\n            }\n\n            input FbFormReCaptchaSettingsInput {\n                enabled: Boolean\n                siteKey: String\n                secretKey: String\n            }\n\n            input FbReCaptchaInput {\n                enabled: Boolean\n                errorMessage: JSON\n                settings: FbFormReCaptchaSettingsInput\n            }\n\n            input FbTermsOfServiceMessageInput {\n                enabled: Boolean\n                message: JSON\n                errorMessage: String\n            }\n\n            input FbFormSettingsLayoutInput {\n                renderer: String\n            }\n\n            input FbFormSettingsInput {\n                layout: FbFormSettingsLayoutInput\n                submitButtonLabel: String\n                successMessage: JSON\n                termsOfServiceMessage: FbTermsOfServiceMessageInput\n                reCaptcha: FbReCaptchaInput\n            }\n\n            input FbUpdateFormInput {\n                name: String\n                fields: [FbFormFieldInput]\n                layout: [[String]]\n                settings: FbFormSettingsInput\n                triggers: JSON\n            }\n\n            input FbFormSortInput {\n                name: Int\n                publishedOn: Int\n            }\n\n            input FbCreateFormInput {\n                name: String!\n            }\n\n            type FbFormResponse {\n                data: FbForm\n                error: FbError\n            }\n\n            type FbFormListResponse {\n                data: [FbForm]\n                error: FbError\n            }\n\n            type FbSaveFormViewResponse {\n                error: FbError\n            }\n\n            type FbSubmissionFormData {\n                id: ID\n                parent: ID\n                name: String\n                version: Int\n                layout: [[String]]\n                fields: [FbFormFieldType]\n            }\n\n            type FbFormSubmission {\n                id: ID\n                data: JSON\n                meta: FbSubmissionMeta\n                form: FbSubmissionFormData\n            }\n\n            type FbSubmissionMeta {\n                ip: String\n                submittedOn: DateTime\n            }\n\n            type FbListSubmissionsMeta {\n                cursor: String\n                hasMoreItems: Boolean\n                totalCount: Int\n            }\n\n            type FbFormSubmissionsListResponse {\n                data: [FbFormSubmission]\n                meta: FbListSubmissionsMeta\n                error: FbError\n            }\n\n            type FbFormSubmissionResponse {\n                data: FbFormSubmission\n                error: FbError\n            }\n\n            type FbFormRevisionsResponse {\n                data: [FbForm]\n                error: FbError\n            }\n\n            type FbExportFormSubmissionsFile {\n                src: String\n                key: String\n            }\n\n            type FbExportFormSubmissionsResponse {\n                data: FbExportFormSubmissionsFile\n                error: FbError\n            }\n\n            input FbSubmissionSortInput {\n                createdOn: Int\n            }\n\n            extend type FbQuery {\n                # Get form (can be published or not, requires authorization )\n                getForm(revision: ID!): FbFormResponse\n\n                # Get form revisions\n                getFormRevisions(id: ID!): FbFormRevisionsResponse\n\n                # Get published form by exact revision ID, or parent form ID (public access)\n                getPublishedForm(revision: ID, parent: ID): FbFormResponse\n\n                # List forms (returns a list of latest revision)\n                listForms: FbFormListResponse\n\n                # List form submissions for specific Form\n                listFormSubmissions(\n                    form: ID!\n                    sort: FbSubmissionSortInput\n                    limit: Int\n                    after: String\n                ): FbFormSubmissionsListResponse\n            }\n\n            extend type FbMutation {\n                createForm(data: FbCreateFormInput!): FbFormResponse\n\n                # Create a new revision from an existing revision\n                createRevisionFrom(revision: ID!): FbFormResponse\n\n                # Update revision\n                updateRevision(revision: ID!, data: FbUpdateFormInput!): FbFormResponse\n\n                # Publish revision\n                publishRevision(revision: ID!): FbFormResponse\n\n                # Unpublish revision\n                unpublishRevision(revision: ID!): FbFormResponse\n\n                # Delete form and all of its revisions\n                deleteForm(id: ID!): FbDeleteResponse\n\n                # Delete a single revision\n                deleteRevision(revision: ID!): FbDeleteResponse\n\n                # Logs a view of a form\n                saveFormView(revision: ID!): FbSaveFormViewResponse\n\n                # Submits a form\n                createFormSubmission(\n                    revision: ID!\n                    data: JSON!\n                    reCaptchaResponseToken: String\n                    meta: JSON\n                ): FbFormSubmissionResponse\n\n                # Export submissions as a CSV file\n                exportFormSubmissions(form: ID!): FbExportFormSubmissionsResponse\n            }\n        `,\n        resolvers: {\n            FbForm: {\n                overallStats: (form, args, { formBuilder }) => {\n                    return formBuilder.forms.getFormStats(form.id);\n                },\n                settings: async (form, args, { formBuilder }) => {\n                    const settings = await formBuilder.settings.getSettings({ auth: false });\n\n                    return {\n                        ...form.settings,\n                        reCaptcha: {\n                            ...form.settings.reCaptcha,\n                            settings: settings ? settings.reCaptcha : null\n                        }\n                    };\n                }\n            },\n            FbQuery: {\n                getForm: async (_, args, { formBuilder }) => {\n                    try {\n                        const form = await formBuilder.forms.getForm(args.revision);\n\n                        return new Response(form);\n                    } catch (e) {\n                        return new ErrorResponse(e);\n                    }\n                },\n                getFormRevisions: async (_, args, { formBuilder }) => {\n                    try {\n                        const revisions = await formBuilder.forms.getFormRevisions(args.id);\n\n                        return new Response(revisions);\n                    } catch (e) {\n                        return new ErrorResponse(e);\n                    }\n                },\n                listForms: async (_, args, { formBuilder }) => {\n                    try {\n                        const forms = await formBuilder.forms.listForms();\n\n                        return new ListResponse(forms);\n                    } catch (e) {\n                        return new ErrorResponse(e);\n                    }\n                },\n                getPublishedForm: async (\n                    root,\n                    args: { revision: string; parent: string },\n                    { formBuilder }\n                ) => {\n                    if (!args.revision && !args.parent) {\n                        return new NotFoundResponse(\"Revision ID or Form ID missing.\");\n                    }\n\n                    let form;\n\n                    if (args.revision) {\n                        // This fetches the exact revision specified by revision ID\n                        form = await formBuilder.forms.getPublishedFormRevisionById(args.revision);\n                    } else if (args.parent) {\n                        // This fetches the latest published revision for given parent form\n                        form = await formBuilder.forms.getLatestPublishedFormRevision(args.parent);\n                    }\n\n                    if (!form) {\n                        return new NotFoundResponse(\"The requested form was not found.\");\n                    }\n\n                    return new Response(form);\n                },\n                listFormSubmissions: async (\n                    _,\n                    args: {\n                        form: string;\n                        sort?: Record<string, 1 | -1>;\n                        limit?: number;\n                        after?: string;\n                    },\n                    { formBuilder }\n                ) => {\n                    try {\n                        const { form, ...options } = args;\n                        const [submissions, meta] = await formBuilder.forms.listFormSubmissions(\n                            form,\n                            options\n                        );\n                        return new ListResponse(submissions, meta);\n                    } catch (err) {\n                        return new ErrorResponse(err);\n                    }\n                }\n            },\n            FbMutation: {\n                // Creates a new form\n                createForm: async (_, args, { formBuilder }) => {\n                    try {\n                        const form = await formBuilder.forms.createForm(args.data);\n\n                        return new Response(form);\n                    } catch (e) {\n                        return new ErrorResponse(e);\n                    }\n                },\n                // Deletes the entire form with all of its revisions\n                deleteForm: async (_, args, { formBuilder }) => {\n                    try {\n                        await formBuilder.forms.deleteForm(args.id);\n\n                        return new Response(true);\n                    } catch (e) {\n                        return new ErrorResponse(e);\n                    }\n                },\n                // Creates a revision from the given revision\n                createRevisionFrom: async (_, args, { formBuilder }) => {\n                    try {\n                        const form = await formBuilder.forms.createFormRevision(args.revision);\n\n                        return new Response(form);\n                    } catch (e) {\n                        return new ErrorResponse(e);\n                    }\n                },\n                // Updates revision\n                updateRevision: async (_, args, { formBuilder }) => {\n                    try {\n                        const form = await formBuilder.forms.updateForm(args.revision, args.data);\n\n                        return new Response(form);\n                    } catch (e) {\n                        return new ErrorResponse(e);\n                    }\n                },\n                // Publish revision (must be given an exact revision ID to publish)\n                publishRevision: async (_, { revision }, { formBuilder }) => {\n                    try {\n                        const form = await formBuilder.forms.publishForm(revision);\n\n                        return new Response(form);\n                    } catch (e) {\n                        return new ErrorResponse(e);\n                    }\n                },\n                unpublishRevision: async (_, args, { formBuilder }) => {\n                    try {\n                        const form = await formBuilder.forms.unpublishForm(args.revision);\n\n                        return new Response(form);\n                    } catch (e) {\n                        return new ErrorResponse(e);\n                    }\n                },\n                // Delete a revision\n                deleteRevision: async (_, args, { formBuilder }) => {\n                    try {\n                        await formBuilder.forms.deleteRevision(args.revision);\n\n                        return new Response(true);\n                    } catch (e) {\n                        return new ErrorResponse(e);\n                    }\n                },\n                saveFormView: async (_, args, { formBuilder }) => {\n                    try {\n                        const form = await formBuilder.forms.incrementFormViews(args.revision);\n\n                        return new Response(form);\n                    } catch (e) {\n                        return new ErrorResponse(e);\n                    }\n                },\n                createFormSubmission: async (root: any, args, { formBuilder }) => {\n                    const { revision, data, reCaptchaResponseToken, meta = {} } = args;\n\n                    try {\n                        const formSubmission = await formBuilder.forms.createFormSubmission(\n                            revision,\n                            reCaptchaResponseToken,\n                            data,\n                            meta\n                        );\n\n                        return new Response(formSubmission);\n                    } catch (e) {\n                        return new ErrorResponse(e);\n                    }\n                },\n                exportFormSubmissions: async (root: any, args, { formBuilder, fileManager }) => {\n                    const { form } = args;\n\n                    try {\n                        const [submissions] = await formBuilder.forms.listFormSubmissions(form, {\n                            limit: 10000\n                        });\n\n                        if (submissions.length === 0) {\n                            return new NotFoundResponse(\"No form submissions found.\");\n                        }\n\n                        // Get all revisions of the form.\n                        const revisions = await formBuilder.forms.getFormRevisions(form);\n                        const publishedRevisions = revisions.filter(r => r.published);\n\n                        const rows = [];\n                        const fields = {};\n\n                        // First extract all distinct fields across all form submissions.\n                        for (let i = 0; i < publishedRevisions.length; i++) {\n                            const revision = publishedRevisions[i];\n                            for (let j = 0; j < revision.fields.length; j++) {\n                                const field = revision.fields[j];\n                                if (!fields[field.fieldId]) {\n                                    fields[field.fieldId] = field.label;\n                                }\n                            }\n                        }\n\n                        // Build rows.\n                        for (let i = 0; i < submissions.length; i++) {\n                            const submissionData = submissions[i].data;\n                            const row = {};\n                            Object.keys(fields).map(fieldId => {\n                                if (fieldId in submissionData) {\n                                    row[fields[fieldId]] = submissionData[fieldId];\n                                } else {\n                                    row[fields[fieldId]] = \"N/A\";\n                                }\n                            });\n                            rows.push(row);\n                        }\n\n                        // Save CSV file and return its URL to the client.\n                        const csv = await parseAsync(rows, { fields: Object.values(fields) });\n                        const buffer = Buffer.from(csv);\n                        const { key } = await fileManager.storage.upload({\n                            buffer,\n                            size: buffer.length,\n                            name: \"form_submissions_export.csv\",\n                            type: \"text/csv\",\n                            keyPrefix: \"form-submissions\",\n                            hideInFileManager: true\n                        });\n\n                        const settings = await fileManager.settings.getSettings();\n\n                        const result = {\n                            key,\n                            src: settings.srcPrefix + key\n                        };\n\n                        return new Response(result);\n                    } catch (e) {\n                        return new ErrorResponse(e);\n                    }\n                }\n            }\n        }\n    }\n};\n\nexport default plugin;\n"],"file":"form.js"}