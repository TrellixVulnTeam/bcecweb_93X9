{"version":3,"sources":["../../../src/plugins/triggers/triggerHandlers.ts"],"names":["plugin","type","name","trigger","handle","data","addLog","urls","Array","isArray","i","length","url","response","method","json","body","message","e"],"mappings":";;;;;;;;;AAAA;;AAGA,MAAMA,MAAkC,GAAG;AACvCC,EAAAA,IAAI,EAAE,sBADiC;AAEvCC,EAAAA,IAAI,EAAE,8BAFiC;AAGvCC,EAAAA,OAAO,EAAE,SAH8B;;AAIvC,QAAMC,MAAN,CAAa;AAAED,IAAAA,OAAF;AAAWE,IAAAA,IAAX;AAAiBC,IAAAA;AAAjB,GAAb,EAAwC;AACpC,UAAMC,IAAI,GAAGJ,OAAO,IAAIA,OAAO,CAACI,IAAhC;;AACA,QAAIC,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAJ,EAAyB;AACrB,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,cAAME,GAAG,GAAGL,IAAI,CAACG,CAAD,CAAhB,CADkC,CAElC;AACA;AACA;;AACA,YAAI;AACA,gBAAMG,QAAQ,GAAG,MAAM,kBAAID,GAAJ,EAAS;AAC5BE,YAAAA,MAAM,EAAE,MADoB;AAE5BC,YAAAA,IAAI,EAAE,IAFsB;AAG5BC,YAAAA,IAAI,EAAEX;AAHsB,WAAT,CAAvB;AAMAC,UAAAA,MAAM,CAAC;AACHL,YAAAA,IAAI,EAAE,SADH;AAEHgB,YAAAA,OAAO,EAAG,uCAAsCL,GAAI,EAFjD;AAGHP,YAAAA,IAAI,EAAE;AACFQ,cAAAA,QAAQ,EAAEA,QAAQ,CAACG;AADjB;AAHH,WAAD,CAAN;AAOH,SAdD,CAcE,OAAOE,CAAP,EAAU;AACRZ,UAAAA,MAAM,CAAC;AACHL,YAAAA,IAAI,EAAE,SADH;AAEHgB,YAAAA,OAAO,EAAG,mBAAkBL,GAAI,YAAWM,CAAC,CAACD,OAAQ;AAFlD,WAAD,CAAN;AAIH;AACJ;AACJ;AACJ;;AAlCsC,CAA3C;eAqCejB,M","sourcesContent":["import got from \"got\";\nimport { FbFormTriggerHandlerPlugin } from \"../../types\";\n\nconst plugin: FbFormTriggerHandlerPlugin = {\n    type: \"form-trigger-handler\",\n    name: \"form-trigger-handler-webhook\",\n    trigger: \"webhook\",\n    async handle({ trigger, data, addLog }) {\n        const urls = trigger && trigger.urls;\n        if (Array.isArray(urls)) {\n            for (let i = 0; i < urls.length; i++) {\n                const url = urls[i];\n                // Could be executed without awaiting the end result of the trigger? Not sure how it would\n                // work in Lambda, so for now, let's await the result of the request, and update form submission\n                // logs accordingly.\n                try {\n                    const response = await got(url, {\n                        method: \"post\",\n                        json: true,\n                        body: data\n                    });\n\n                    addLog({\n                        type: \"success\",\n                        message: `Successfully sent a POST request to ${url}`,\n                        data: {\n                            response: response.body\n                        }\n                    });\n                } catch (e) {\n                    addLog({\n                        type: \"warning\",\n                        message: `POST request to ${url} failed: ${e.message}`\n                    });\n                }\n            }\n        }\n    }\n};\n\nexport default plugin;\n"],"file":"triggerHandlers.js"}