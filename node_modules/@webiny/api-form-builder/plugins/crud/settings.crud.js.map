{"version":3,"sources":["../../../src/plugins/crud/settings.crud.ts"],"names":["FB_SETTINGS_KEY","type","apply","context","db","PK_SETTINGS","utils","getPKPrefix","formBuilder","settings","getSettings","options","auth","checkBaseSettingsPermissions","read","defaults","query","PK","SK","createSettings","data","formBuilderSettings","models","CreateDataModel","populate","validate","dataJSON","toJSON","create","TYPE","updateSettings","updatedData","UpdateDataModel","newSettings","onlyDirty","update"],"mappings":";;;;;;;;;;;AACA;;AACA;;AACA;;;;;;;;;;AAGO,MAAMA,eAAe,GAAG,SAAxB;;eAEQ;AACXC,EAAAA,IAAI,EAAE,SADK;;AAEXC,EAAAA,KAAK,CAACC,OAAD,EAAU;AACX,UAAM;AAAEC,MAAAA;AAAF,QAASD,OAAf;;AAEA,UAAME,WAAW,GAAG,MAAO,GAAEC,KAAK,CAACC,WAAN,CAAkBJ,OAAlB,CAA2B,UAAxD;;AAEAA,IAAAA,OAAO,CAACK,WAAR,mCACOL,OAAO,CAACK,WADf;AAEIC,MAAAA,QAAQ,EAAE;AACN,cAAMC,WAAN,CAAkBC,OAAO,GAAG;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAA5B,EAA4C;AACxC,cAAID,OAAO,CAACC,IAAZ,EAAkB;AACd,kBAAMN,KAAK,CAACO,4BAAN,CAAmCV,OAAnC,CAAN;AACH;;AAED,gBAAM,CAAC,CAACM,QAAD,CAAD,IAAe,MAAML,EAAE,CAACU,IAAH,iCACpBC,kBAASX,EADW;AAEvBY,YAAAA,KAAK,EAAE;AAAEC,cAAAA,EAAE,EAAEZ,WAAW,EAAjB;AAAqBa,cAAAA,EAAE,EAAElB;AAAzB;AAFgB,aAA3B;AAKA,iBAAOS,QAAP;AACH,SAZK;;AAaN,cAAMU,cAAN,CAAqBC,IAArB,EAA2B;AACvB,gBAAMC,mBAAmB,GAAG,IAAIC,MAAM,CAACC,eAAX,GAA6BC,QAA7B,CAAsCJ,IAAtC,CAA5B;AACA,gBAAMC,mBAAmB,CAACI,QAApB,EAAN;AAEA,gBAAMC,QAAQ,GAAG,MAAML,mBAAmB,CAACM,MAApB,EAAvB;AAEA,gBAAMvB,EAAE,CAACwB,MAAH,CAAU;AACZR,YAAAA,IAAI;AACAH,cAAAA,EAAE,EAAEZ,WAAW,EADf;AAEAa,cAAAA,EAAE,EAAElB,eAFJ;AAGA6B,cAAAA,IAAI,EAAE;AAHN,eAIGH,QAJH;AADQ,WAAV,CAAN;AASA,iBAAOA,QAAP;AACH,SA7BK;;AA8BN,cAAMI,cAAN,CAAqBV,IAArB,EAA2B;AACvB,gBAAMd,KAAK,CAACO,4BAAN,CAAmCV,OAAnC,CAAN;AACA,gBAAM4B,WAAW,GAAG,IAAIT,MAAM,CAACU,eAAX,GAA6BR,QAA7B,CAAsCJ,IAAtC,CAApB;AACA,gBAAMW,WAAW,CAACN,QAAZ,EAAN;AAEA,gBAAMQ,WAAW,GAAG,MAAMF,WAAW,CAACJ,MAAZ,CAAmB;AAAEO,YAAAA,SAAS,EAAE;AAAb,WAAnB,CAA1B;AAEA,gBAAMzB,QAAQ,GAAG,MAAM,KAAKC,WAAL,EAAvB;AAEA,gBAAMN,EAAE,CAAC+B,MAAH,iCACCpB,kBAASX,EADV;AAEFY,YAAAA,KAAK,EAAE;AAAEC,cAAAA,EAAE,EAAEZ,WAAW,EAAjB;AAAqBa,cAAAA,EAAE,EAAElB;AAAzB,aAFL;AAGFoB,YAAAA,IAAI,EAAEa;AAHJ,aAAN;AAMA,iDAAYxB,QAAZ,GAAyBwB,WAAzB;AACH;;AA9CK;AAFd;AAmDH;;AA1DU,C","sourcesContent":["import { ContextPlugin } from \"@webiny/handler/types\";\nimport * as utils from \"./utils\";\nimport * as models from \"./settings.models\";\nimport defaults from \"./defaults\";\nimport { Settings, FormBuilderContext } from \"../../types\";\n\nexport const FB_SETTINGS_KEY = \"default\";\n\nexport default {\n    type: \"context\",\n    apply(context) {\n        const { db } = context;\n\n        const PK_SETTINGS = () => `${utils.getPKPrefix(context)}SETTINGS`;\n\n        context.formBuilder = {\n            ...context.formBuilder,\n            settings: {\n                async getSettings(options = { auth: true }) {\n                    if (options.auth) {\n                        await utils.checkBaseSettingsPermissions(context);\n                    }\n\n                    const [[settings]] = await db.read<Settings>({\n                        ...defaults.db,\n                        query: { PK: PK_SETTINGS(), SK: FB_SETTINGS_KEY }\n                    });\n\n                    return settings;\n                },\n                async createSettings(data) {\n                    const formBuilderSettings = new models.CreateDataModel().populate(data);\n                    await formBuilderSettings.validate();\n\n                    const dataJSON = await formBuilderSettings.toJSON();\n\n                    await db.create({\n                        data: {\n                            PK: PK_SETTINGS(),\n                            SK: FB_SETTINGS_KEY,\n                            TYPE: \"fb.settings\",\n                            ...dataJSON\n                        }\n                    });\n\n                    return dataJSON;\n                },\n                async updateSettings(data) {\n                    await utils.checkBaseSettingsPermissions(context);\n                    const updatedData = new models.UpdateDataModel().populate(data);\n                    await updatedData.validate();\n\n                    const newSettings = await updatedData.toJSON({ onlyDirty: true });\n\n                    const settings = await this.getSettings();\n\n                    await db.update({\n                        ...defaults.db,\n                        query: { PK: PK_SETTINGS(), SK: FB_SETTINGS_KEY },\n                        data: newSettings\n                    });\n\n                    return { ...settings, ...newSettings };\n                }\n            }\n        };\n    }\n} as ContextPlugin<FormBuilderContext>;\n"],"file":"settings.crud.js"}