import { FbForm, FbFormPermission, FbFormSettingsPermission, FormBuilderContext } from "../../types";
export declare const checkBaseFormPermissions: (context: FormBuilderContext, check?: {
    rwd?: string;
    pw?: string;
}) => Promise<FbFormPermission>;
export declare const checkBaseSettingsPermissions: (context: FormBuilderContext) => Promise<FbFormSettingsPermission>;
export declare const getFormId: (form: FbForm) => string;
export declare const getStatus: (params: {
    published: boolean;
    locked: boolean;
}) => "published" | "locked" | "draft";
export declare const hasRwd: (permission: FbFormPermission, rwd: string) => boolean;
export declare const hasPW: (permission: FbFormPermission, pw: string) => boolean;
export declare const normalizeSortInput: (sort: Record<string, number>) => {
    [x: string]: {
        order: string;
    };
};
export declare const getPKPrefix: (context: FormBuilderContext) => string;
export declare const checkOwnership: (form: FbForm, permission: FbFormPermission, context: FormBuilderContext) => void;
export declare const encodeCursor: (cursor: any) => string;
export declare const decodeCursor: (cursor: any) => any;
export declare const paginateBatch: <T = Record<string, any>>(items: T[], perPage: number, execute: (items: T[]) => Promise<any>) => Promise<void>;
