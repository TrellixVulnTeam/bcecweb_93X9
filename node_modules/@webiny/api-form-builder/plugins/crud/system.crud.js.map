{"version":3,"sources":["../../../src/plugins/crud/system.crud.ts"],"names":["type","apply","context","tenancy","keys","PK","getCurrentTenant","id","SK","formBuilder","system","getVersion","db","read","defaults","query","version","setVersion","update","data","create","install","domain","i18n","elasticsearch","Error","settings","createSettings","esIndex","es","body","exists","indices","analysis","analyzer","lowercase_analyzer","filter","tokenizer","mappings","properties","property","fields","keyword","ignore_above","err","delete","getDefaultLocale","code","reason","message","WEBINY_VERSION","upgrade","identity","security","getIdentity","NotAuthorizedError","upgradePlugins","plugins","byType","pl","app","plugin","deployedVersion","installedAppVersion","upgradeToVersion"],"mappings":"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","sourcesContent":["import Error from \"@webiny/error\";\nimport { NotAuthorizedError } from \"@webiny/api-security\";\nimport { UpgradePlugin } from \"@webiny/api-upgrade/types\";\nimport { getApplicablePlugin } from \"@webiny/api-upgrade\";\nimport defaults from \"./defaults\";\nimport { FormBuilderContext, Settings } from \"../../types\";\n\nexport default {\n    type: \"context\",\n    apply(context: FormBuilderContext) {\n        const { tenancy } = context;\n        const keys = () => ({ PK: `T#${tenancy.getCurrentTenant().id}#SYSTEM`, SK: \"FB\" });\n\n        context.formBuilder = {\n            ...context.formBuilder,\n            system: {\n                async getVersion() {\n                    const { db } = context;\n\n                    const [[system]] = await db.read({\n                        ...defaults.db,\n                        query: keys()\n                    });\n\n                    return system ? system.version : null;\n                },\n                async setVersion(version: string) {\n                    const { db } = context;\n\n                    const [[system]] = await db.read({\n                        ...defaults.db,\n                        query: keys()\n                    });\n\n                    if (system) {\n                        await db.update({\n                            ...defaults.db,\n                            query: keys(),\n                            data: {\n                                version\n                            }\n                        });\n                    } else {\n                        await db.create({\n                            ...defaults.db,\n                            data: {\n                                ...keys(),\n                                version\n                            }\n                        });\n                    }\n                },\n                async install({ domain }) {\n                    const { db, i18n, formBuilder, elasticsearch } = context;\n\n                    const version = await this.getVersion();\n                    if (version) {\n                        throw new Error(\n                            \"Form builder is already installed.\",\n                            \"FORM_BUILDER_INSTALL_ABORTED\"\n                        );\n                    }\n\n                    // Prepare \"settings\" data\n                    const data: Partial<Settings> = {};\n\n                    if (domain) {\n                        data.domain = domain;\n                    }\n\n                    await formBuilder.settings.createSettings(data);\n\n                    // Create ES index if it doesn't already exist.\n                    try {\n                        const esIndex = defaults.es(context);\n                        const { body: exists } = await elasticsearch.indices.exists(esIndex);\n                        if (!exists) {\n                            await elasticsearch.indices.create({\n                                ...esIndex,\n                                body: {\n                                    // need this part for sorting to work on text fields\n                                    settings: {\n                                        analysis: {\n                                            analyzer: {\n                                                lowercase_analyzer: {\n                                                    type: \"custom\",\n                                                    filter: [\"lowercase\", \"trim\"],\n                                                    tokenizer: \"keyword\"\n                                                }\n                                            }\n                                        }\n                                    },\n                                    mappings: {\n                                        properties: {\n                                            property: {\n                                                type: \"text\",\n                                                fields: {\n                                                    keyword: {\n                                                        type: \"keyword\",\n                                                        ignore_above: 256\n                                                    }\n                                                },\n                                                analyzer: \"lowercase_analyzer\"\n                                            }\n                                        }\n                                    }\n                                }\n                            });\n                        }\n                    } catch (err) {\n                        await db.delete({\n                            ...defaults.db,\n                            query: {\n                                PK: `T#root#L#${i18n.getDefaultLocale().code}#FB#SETTINGS`,\n                                SK: \"default\"\n                            }\n                        });\n\n                        throw new Error(\n                            \"Form builder failed to install!\",\n                            \"FORM_BUILDER_INSTALL_ABORTED\",\n                            {\n                                reason: err.message\n                            }\n                        );\n                    }\n\n                    await formBuilder.system.setVersion(context.WEBINY_VERSION);\n                },\n                async upgrade(version) {\n                    const identity = context.security.getIdentity();\n                    if (!identity) {\n                        throw new NotAuthorizedError();\n                    }\n\n                    const upgradePlugins = context.plugins\n                        .byType<UpgradePlugin>(\"api-upgrade\")\n                        .filter(pl => pl.app === \"form-builder\");\n\n                    const plugin = getApplicablePlugin({\n                        deployedVersion: context.WEBINY_VERSION,\n                        installedAppVersion: await this.getVersion(),\n                        upgradePlugins,\n                        upgradeToVersion: version\n                    });\n\n                    await plugin.apply(context);\n\n                    // Store new app version\n                    await this.setVersion(version);\n\n                    return true;\n                }\n            }\n        };\n    }\n};\n"],"file":"system.crud.js"}