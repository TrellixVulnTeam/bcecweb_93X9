{"version":3,"sources":["../../../src/plugins/crud/forms.models.ts"],"names":["FormFieldsModel","_id","validation","create","type","name","fieldId","label","helpText","placeholderText","options","list","value","instanceOf","message","settings","FormSettingsModel","layout","renderer","submitButtonLabel","successMessage","termsOfServiceMessage","errorMessage","enabled","reCaptcha","FormCreateDataModel","FormUpdateDataModel","fields","triggers","FormSubmissionCreateDataModel","data","meta","ip","submittedOn","Date","toISOString","form","id","parent","version","FormSubmissionUpdateDataModel","logs","createdOn"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AAHA;AAKO,MAAMA,eAAe,GAAG,wBAAW;AACtCC,EAAAA,GAAG,EAAE,oBAAO;AAAEC,IAAAA,UAAU,EAAEA,uBAAWC,MAAX,CAAkB,UAAlB;AAAd,GAAP,CADiC;AAEtCC,EAAAA,IAAI,EAAE,oBAAO;AAAEF,IAAAA,UAAU,EAAEA,uBAAWC,MAAX,CAAkB,UAAlB;AAAd,GAAP,CAFgC;AAGtCE,EAAAA,IAAI,EAAE,oBAAO;AAAEH,IAAAA,UAAU,EAAEA,uBAAWC,MAAX,CAAkB,UAAlB;AAAd,GAAP,CAHgC;AAItCG,EAAAA,OAAO,EAAE,oBAAO;AAAEJ,IAAAA,UAAU,EAAEA,uBAAWC,MAAX,CAAkB,UAAlB;AAAd,GAAP,CAJ6B;AAKtC;AACAI,EAAAA,KAAK,EAAE,oBAAO;AAAEL,IAAAA,UAAU,EAAEA,uBAAWC,MAAX,CAAkB,eAAlB;AAAd,GAAP,CAN+B;AAOtCK,EAAAA,QAAQ,EAAE,oBAAO;AAAEN,IAAAA,UAAU,EAAEA,uBAAWC,MAAX,CAAkB,eAAlB;AAAd,GAAP,CAP4B;AAQtCM,EAAAA,eAAe,EAAE,oBAAO;AAAEP,IAAAA,UAAU,EAAEA,uBAAWC,MAAX,CAAkB,eAAlB;AAAd,GAAP,CARqB;AAStCO,EAAAA,OAAO,EAAE,oBAAO;AACZC,IAAAA,IAAI,EAAE,IADM;AAEZC,IAAAA,KAAK,EAAE,EAFK;AAGZC,IAAAA,UAAU,EAAE,wBAAW;AACnBN,MAAAA,KAAK,EAAE,oBAAO;AAAEL,QAAAA,UAAU,EAAEA,uBAAWC,MAAX,CAAkB,eAAlB;AAAd,OAAP,CADY;AAEnBS,MAAAA,KAAK,EAAE,oBAAO;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAAP;AAFY,KAAX;AAHA,GAAP,CAT6B;AAiBtCV,EAAAA,UAAU,EAAE,oBAAO;AACfS,IAAAA,IAAI,EAAE,IADS;AAEfC,IAAAA,KAAK,EAAE,EAFQ;AAGfC,IAAAA,UAAU,EAAE,wBAAW;AACnBR,MAAAA,IAAI,EAAE,oBAAO;AAAEH,QAAAA,UAAU,EAAEA,uBAAWC,MAAX,CAAkB,UAAlB;AAAd,OAAP,CADa;AAEnBW,MAAAA,OAAO,EAAE,oBAAO;AAAEZ,QAAAA,UAAU,EAAEA,uBAAWC,MAAX,CAAkB,eAAlB;AAAd,OAAP,CAFU;AAGnBY,MAAAA,QAAQ,EAAE,iCAAO;AAAEH,QAAAA,KAAK,EAAE;AAAT,OAAP;AAHS,KAAX;AAHG,GAAP,CAjB0B;AA0BtCG,EAAAA,QAAQ,EAAE,iCAAO;AAAEH,IAAAA,KAAK,EAAE;AAAT,GAAP;AA1B4B,CAAX,GAAxB,C,CA6BP;;;AACO,MAAMI,iBAAiB,GAAG,wBAAW;AACxCC,EAAAA,MAAM,EAAE,oBAAO;AACXL,IAAAA,KAAK,EAAE,EADI;AAEXC,IAAAA,UAAU,EAAE,wBAAW;AACnBK,MAAAA,QAAQ,EAAE,oBAAO;AAAEN,QAAAA,KAAK,EAAE;AAAT,OAAP;AADS,KAAX;AAFD,GAAP,CADgC;AAOxC;AACAO,EAAAA,iBAAiB,EAAE,oBAAO;AAAEjB,IAAAA,UAAU,EAAEA,uBAAWC,MAAX,CAAkB,eAAlB;AAAd,GAAP,CARqB;AASxC;AACAiB,EAAAA,cAAc,EAAE,kCAVwB;AAWxCC,EAAAA,qBAAqB,EAAE,oBAAO;AAC1BR,IAAAA,UAAU,EAAE,wBAAW;AACnBC,MAAAA,OAAO,EAAE,kCADU;AAEnBQ,MAAAA,YAAY,EAAE,oBAAO;AAAEpB,QAAAA,UAAU,EAAEA,uBAAWC,MAAX,CAAkB,eAAlB;AAAd,OAAP,CAFK;AAGnBoB,MAAAA,OAAO,EAAE;AAHU,KAAX;AADc,GAAP,CAXiB;AAkBxCC,EAAAA,SAAS,EAAE,oBAAO;AACdZ,IAAAA,KAAK,EAAE,EADO;AAEdC,IAAAA,UAAU,EAAE,wBAAW;AACnBU,MAAAA,OAAO,EAAE,sBADU;AAEnB;AACAD,MAAAA,YAAY,EAAE,oBAAO;AACjBV,QAAAA,KAAK,EAAE,yCADU;AAEjBV,QAAAA,UAAU,EAAEA,uBAAWC,MAAX,CAAkB,eAAlB;AAFK,OAAP;AAHK,KAAX;AAFE,GAAP;AAlB6B,CAAX,GAA1B;;AA+BA,MAAMsB,mBAAmB,GAAG,wBAAW;AAC1CpB,EAAAA,IAAI,EAAE,oBAAO;AAAEH,IAAAA,UAAU,EAAEA,uBAAWC,MAAX,CAAkB,wBAAlB;AAAd,GAAP;AADoC,CAAX,GAA5B;;AAIA,MAAMuB,mBAAmB,GAAG,wBAAW;AAC1CrB,EAAAA,IAAI,EAAE,oBAAO;AAAEH,IAAAA,UAAU,EAAEA,uBAAWC,MAAX,CAAkB,eAAlB;AAAd,GAAP,CADoC;AAE1CwB,EAAAA,MAAM,EAAE,oBAAO;AACXhB,IAAAA,IAAI,EAAE,IADK;AAEXC,IAAAA,KAAK,EAAE,EAFI;AAGXC,IAAAA,UAAU,EAAEb;AAHD,GAAP,CAFkC;AAO1CiB,EAAAA,MAAM,EAAE,iCAAO;AAAEL,IAAAA,KAAK,EAAE;AAAT,GAAP,CAPkC;AAQ1CG,EAAAA,QAAQ,EAAE,oBAAO;AAAEF,IAAAA,UAAU,EAAEG,iBAAd;AAAiCJ,IAAAA,KAAK,EAAE;AAAxC,GAAP,CARgC;AAS1CgB,EAAAA,QAAQ,EAAE;AATgC,CAAX,GAA5B;;AAYA,MAAMC,6BAA6B,GAAG,wBAAW;AACpDC,EAAAA,IAAI,EAAE,iCAAO;AAAE5B,IAAAA,UAAU,EAAEA,uBAAWC,MAAX,CAAkB,UAAlB;AAAd,GAAP,CAD8C;AAEpD4B,EAAAA,IAAI,EAAE,oBAAO;AACTnB,IAAAA,KAAK,EAAE,EADE;AAETC,IAAAA,UAAU,EAAE,wBAAW;AACnBmB,MAAAA,EAAE,EAAE,oBAAO;AAAE9B,QAAAA,UAAU,EAAEA,uBAAWC,MAAX,CAAkB,wBAAlB;AAAd,OAAP,CADe;AAEnB8B,MAAAA,WAAW,EAAE,oBAAO;AAChBrB,QAAAA,KAAK,EAAE,IAAIsB,IAAJ,GAAWC,WAAX,EADS;AAEhBjC,QAAAA,UAAU,EAAEA,uBAAWC,MAAX,CAAkB,eAAlB;AAFI,OAAP;AAFM,KAAX;AAFH,GAAP,CAF8C;AAYpDiC,EAAAA,IAAI,EAAE,oBAAO;AACTvB,IAAAA,UAAU,EAAE,wBAAW;AACnBwB,MAAAA,EAAE,EAAE,oBAAO;AAAEnC,QAAAA,UAAU,EAAEA,uBAAWC,MAAX,CAAkB,UAAlB;AAAd,OAAP,CADe;AAEnBmC,MAAAA,MAAM,EAAE,oBAAO;AAAEpC,QAAAA,UAAU,EAAEA,uBAAWC,MAAX,CAAkB,UAAlB;AAAd,OAAP,CAFW;AAGnBE,MAAAA,IAAI,EAAE,oBAAO;AAAEH,QAAAA,UAAU,EAAEA,uBAAWC,MAAX,CAAkB,UAAlB;AAAd,OAAP,CAHa;AAInBoC,MAAAA,OAAO,EAAE,oBAAO;AAAErC,QAAAA,UAAU,EAAEA,uBAAWC,MAAX,CAAkB,UAAlB;AAAd,OAAP,CAJU;AAKnBc,MAAAA,MAAM,EAAE,iCAAO;AAAEL,QAAAA,KAAK,EAAE;AAAT,OAAP,CALW;AAMnBe,MAAAA,MAAM,EAAE,oBAAO;AACXhB,QAAAA,IAAI,EAAE,IADK;AAEXC,QAAAA,KAAK,EAAE,EAFI;AAGXC,QAAAA,UAAU,EAAEb;AAHD,OAAP;AANW,KAAX;AADH,GAAP;AAZ8C,CAAX,GAAtC;;AA4BA,MAAMwC,6BAA6B,GAAG,wBAAW;AACpDC,EAAAA,IAAI,EAAE,oBAAO;AACT9B,IAAAA,IAAI,EAAE,IADG;AAETC,IAAAA,KAAK,EAAE,EAFE;AAGTC,IAAAA,UAAU,EAAE,wBAAW;AACnBT,MAAAA,IAAI,EAAE,oBAAO;AACTF,QAAAA,UAAU,EAAEA,uBAAWC,MAAX,CAAkB,wCAAlB;AADH,OAAP,CADa;AAInBW,MAAAA,OAAO,EAAE,qBAJU;AAKnBgB,MAAAA,IAAI,EAAE,kCALa;AAMnBY,MAAAA,SAAS,EAAE,oBAAO;AAAE9B,QAAAA,KAAK,EAAE,IAAIsB,IAAJ,GAAWC,WAAX;AAAT,OAAP;AANQ,KAAX;AAHH,GAAP;AAD8C,CAAX,GAAtC","sourcesContent":["// \"Form Fields\" data model.\nimport { validation } from \"@webiny/validation\";\nimport { boolean, fields, string, withFields, number } from \"@commodo/fields\";\nimport { object } from \"commodo-fields-object\";\n\nexport const FormFieldsModel = withFields({\n    _id: string({ validation: validation.create(\"required\") }),\n    type: string({ validation: validation.create(\"required\") }),\n    name: string({ validation: validation.create(\"required\") }),\n    fieldId: string({ validation: validation.create(\"required\") }),\n    // Note: We've replaced \"i18nString()\" with \"string()\"\n    label: string({ validation: validation.create(\"maxLength:100\") }),\n    helpText: string({ validation: validation.create(\"maxLength:100\") }),\n    placeholderText: string({ validation: validation.create(\"maxLength:100\") }),\n    options: fields({\n        list: true,\n        value: [],\n        instanceOf: withFields({\n            label: string({ validation: validation.create(\"maxLength:100\") }),\n            value: string({ value: \"\" })\n        })()\n    }),\n    validation: fields({\n        list: true,\n        value: [],\n        instanceOf: withFields({\n            name: string({ validation: validation.create(\"required\") }),\n            message: string({ validation: validation.create(\"maxLength:100\") }),\n            settings: object({ value: {} })\n        })()\n    }),\n    settings: object({ value: {} })\n})();\n\n// \"Form Settings\" data model.\nexport const FormSettingsModel = withFields({\n    layout: fields({\n        value: {},\n        instanceOf: withFields({\n            renderer: string({ value: \"default\" })\n        })()\n    }),\n    // Note: We've replaced \"i18nString()\" with \"string()\"\n    submitButtonLabel: string({ validation: validation.create(\"maxLength:100\") }),\n    // Note: We've replaced \"i18nObject()\" with \"object()\"\n    successMessage: object(),\n    termsOfServiceMessage: fields({\n        instanceOf: withFields({\n            message: object(),\n            errorMessage: string({ validation: validation.create(\"maxLength:100\") }),\n            enabled: boolean()\n        })()\n    }),\n    reCaptcha: fields({\n        value: {},\n        instanceOf: withFields({\n            enabled: boolean(),\n            // Note: We've replaced \"i18nString()\" with \"string()\"\n            errorMessage: string({\n                value: \"Please verify that you are not a robot.\",\n                validation: validation.create(\"maxLength:100\")\n            })\n        })()\n    })\n})();\n\nexport const FormCreateDataModel = withFields({\n    name: string({ validation: validation.create(\"required,maxLength:100\") })\n})();\n\nexport const FormUpdateDataModel = withFields({\n    name: string({ validation: validation.create(\"maxLength:100\") }),\n    fields: fields({\n        list: true,\n        value: [],\n        instanceOf: FormFieldsModel\n    }),\n    layout: object({ value: [] }),\n    settings: fields({ instanceOf: FormSettingsModel, value: {} }),\n    triggers: object()\n})();\n\nexport const FormSubmissionCreateDataModel = withFields({\n    data: object({ validation: validation.create(\"required\") }),\n    meta: fields({\n        value: {},\n        instanceOf: withFields({\n            ip: string({ validation: validation.create(\"required,maxLength:100\") }),\n            submittedOn: string({\n                value: new Date().toISOString(),\n                validation: validation.create(\"maxLength:100\")\n            })\n        })()\n    }),\n    form: fields({\n        instanceOf: withFields({\n            id: string({ validation: validation.create(\"required\") }),\n            parent: string({ validation: validation.create(\"required\") }),\n            name: string({ validation: validation.create(\"required\") }),\n            version: number({ validation: validation.create(\"required\") }),\n            layout: object({ value: [] }),\n            fields: fields({\n                list: true,\n                value: [],\n                instanceOf: FormFieldsModel\n            })\n        })()\n    })\n})();\n\nexport const FormSubmissionUpdateDataModel = withFields({\n    logs: fields({\n        list: true,\n        value: [],\n        instanceOf: withFields({\n            type: string({\n                validation: validation.create(\"required,in:error:warning:info:success\")\n            }),\n            message: string(),\n            data: object(),\n            createdOn: string({ value: new Date().toISOString() })\n        })()\n    })\n})();\n"],"file":"forms.models.js"}