"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FB_SETTINGS_KEY = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var utils = _interopRequireWildcard(require("./utils"));

var models = _interopRequireWildcard(require("./settings.models"));

var _defaults = _interopRequireDefault(require("./defaults"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const FB_SETTINGS_KEY = "default";
exports.FB_SETTINGS_KEY = FB_SETTINGS_KEY;
var _default = {
  type: "context",

  apply(context) {
    const {
      db
    } = context;

    const PK_SETTINGS = () => `${utils.getPKPrefix(context)}SETTINGS`;

    context.formBuilder = _objectSpread(_objectSpread({}, context.formBuilder), {}, {
      settings: {
        async getSettings(options = {
          auth: true
        }) {
          if (options.auth) {
            await utils.checkBaseSettingsPermissions(context);
          }

          const [[settings]] = await db.read(_objectSpread(_objectSpread({}, _defaults.default.db), {}, {
            query: {
              PK: PK_SETTINGS(),
              SK: FB_SETTINGS_KEY
            }
          }));
          return settings;
        },

        async createSettings(data) {
          const formBuilderSettings = new models.CreateDataModel().populate(data);
          await formBuilderSettings.validate();
          const dataJSON = await formBuilderSettings.toJSON();
          await db.create({
            data: _objectSpread({
              PK: PK_SETTINGS(),
              SK: FB_SETTINGS_KEY,
              TYPE: "fb.settings"
            }, dataJSON)
          });
          return dataJSON;
        },

        async updateSettings(data) {
          await utils.checkBaseSettingsPermissions(context);
          const updatedData = new models.UpdateDataModel().populate(data);
          await updatedData.validate();
          const newSettings = await updatedData.toJSON({
            onlyDirty: true
          });
          const settings = await this.getSettings();
          await db.update(_objectSpread(_objectSpread({}, _defaults.default.db), {}, {
            query: {
              PK: PK_SETTINGS(),
              SK: FB_SETTINGS_KEY
            },
            data: newSettings
          }));
          return _objectSpread(_objectSpread({}, settings), newSettings);
        }

      }
    });
  }

};
exports.default = _default;
//# sourceMappingURL=settings.crud.js.map