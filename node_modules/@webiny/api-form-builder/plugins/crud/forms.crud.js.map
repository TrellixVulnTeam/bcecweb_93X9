{"version":3,"sources":["../../../src/plugins/crud/forms.crud.ts"],"names":["TYPE_FORM","TYPE_FORM_LATEST","TYPE_FORM_LATEST_PUBLISHED","TYPE_FORM_SUBMISSION","getESDataForLatestRevision","form","context","__type","tenant","tenancy","getCurrentTenant","id","webinyVersion","WEBINY_VERSION","createdOn","savedOn","name","slug","published","publishedOn","version","locked","status","createdBy","ownedBy","locale","i18nContent","code","zeroPad","padStart","type","apply","db","elasticsearch","PK_FORM","formId","utils","getPKPrefix","SK_FORM_REVISION","SK_FORM_LATEST","SK_FORM_LATEST_PUBLISHED","SK_SUBMISSION","submissionId","formBuilder","forms","getForm","permission","checkBaseFormPermissions","rwd","uniqueId","split","read","defaults","query","PK","SK","checkOwnership","getFormStats","allRevisions","getFormRevisions","stats","submissions","views","conversionRate","i","length","revision","parseFloat","toFixed","listForms","must","term","own","identity","security","getIdentity","push","sharedIndex","process","env","ELASTICSEARCH_SHARED_INDEXES","body","bool","sort","order","unmapped_type","size","response","search","es","hits","map","item","_source","ex","WebinyError","message","$beginsWith","a","b","getPublishedFormRevisionById","revisionId","NotFoundError","getLatestPublishedFormRevision","latestPublishedItem","createForm","data","models","FormCreateDataModel","populate","validate","Date","toISOString","displayName","join","toLowerCase","getStatus","fields","layout","settings","FormSettingsModel","toJSON","triggers","FORM_PK","batch","create","TYPE","esDb","index","execute","updateForm","updateData","FormUpdateDataModel","latestForm","newData","Object","assign","onlyDirty","update","deleteForm","items","$gt","find","paginateBatch","delete","deleteRevision","lForm","lpForm","revisions","publishedRevision","filter","rev","getTime","shift","prevRevision","publishForm","pw","unpublishForm","latestPublishedForm","createFormRevision","sourceRevisionId","newVersion","newRevision","incrementFormViews","FORM_SK","incrementFormSubmissions","getSubmissionsByIds","submissionIds","formSubmission","Boolean","listFormSubmissions","options","NotAuthorizedError","after","limit","decodeCursor","total","hasMoreItems","pop","meta","totalCount","value","cursor","createFormSubmission","reCaptchaResponseToken","rawData","getSettings","auth","reCaptcha","enabled","Error","secretKey","recaptchaResponse","method","JSON","stringify","secret","responseIsValid","validationResponse","json","success","e","validatorPlugins","plugins","byType","field","fieldId","keys","invalidFields","Array","isArray","validation","j","validator","validatorPlugin","isInvalid","result","submissionModel","FormSubmissionCreateDataModel","parent","submission","logs","plugin","trigger","handle","addLog","log","updateSubmission","FormSubmissionUpdateDataModel","deleteSubmission"],"mappings":"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","sourcesContent":["import { ContextPlugin } from \"@webiny/handler/types\";\nimport mdbid from \"mdbid\";\nimport slugify from \"slugify\";\nimport pick from \"lodash/pick\";\nimport fetch from \"node-fetch\";\nimport { NotFoundError } from \"@webiny/handler-graphql\";\nimport { NotAuthorizedError } from \"@webiny/api-security\";\nimport * as utils from \"./utils\";\nimport { checkOwnership, encodeCursor } from \"./utils\";\nimport defaults from \"./defaults\";\nimport * as models from \"./forms.models\";\nimport { FbForm, FbSubmission, FormBuilderContext } from \"../../types\";\nimport WebinyError from \"@webiny/error\";\n\nconst TYPE_FORM = \"fb.form\";\nconst TYPE_FORM_LATEST = \"fb.form.latest\";\nconst TYPE_FORM_LATEST_PUBLISHED = \"fb.form.latestPublished\";\nconst TYPE_FORM_SUBMISSION = \"fb.formSubmission\";\n\nconst getESDataForLatestRevision = (form: FbForm, context: FormBuilderContext) => ({\n    __type: \"fb.form\",\n    tenant: context.tenancy.getCurrentTenant().id,\n    webinyVersion: context.WEBINY_VERSION,\n    id: form.id,\n    createdOn: form.createdOn,\n    savedOn: form.savedOn,\n    name: form.name,\n    slug: form.slug,\n    published: form.published,\n    publishedOn: form.publishedOn,\n    version: form.version,\n    locked: form.locked,\n    status: form.status,\n    createdBy: form.createdBy,\n    ownedBy: form.ownedBy,\n    locale: context.i18nContent.locale.code\n});\n\nconst zeroPad = version => `${version}`.padStart(4, \"0\");\n\ntype DbItem<T = unknown> = T & {\n    PK: string;\n    SK: string;\n    TYPE: string;\n};\n\nexport default {\n    type: \"context\",\n    apply(context: FormBuilderContext) {\n        const { db, i18nContent, elasticsearch, tenancy } = context;\n\n        const PK_FORM = formId => `${utils.getPKPrefix(context)}F#${formId}`;\n        const SK_FORM_REVISION = version => {\n            return typeof version === \"string\" ? `REV#${version}` : `REV#${zeroPad(version)}`;\n        };\n        const SK_FORM_LATEST = () => \"L\";\n        const SK_FORM_LATEST_PUBLISHED = () => \"LP\";\n        const SK_SUBMISSION = submissionId => `FS#${submissionId}`;\n\n        context.formBuilder = {\n            ...context.formBuilder,\n            forms: {\n                async getForm(id) {\n                    const permission = await utils.checkBaseFormPermissions(context, { rwd: \"r\" });\n\n                    const [uniqueId, version] = id.split(\"#\");\n\n                    const [[form]] = await db.read<FbForm>({\n                        ...defaults.db,\n                        query: {\n                            PK: PK_FORM(uniqueId),\n                            SK: SK_FORM_REVISION(version)\n                        }\n                    });\n\n                    utils.checkOwnership(form, permission, context);\n\n                    return form;\n                },\n                async getFormStats(id) {\n                    // We don't need to check permissions here, as this method is only called\n                    // as a resolver to an `FbForm` GraphQL type, and we already check permissions\n                    // and ownership when resolving the form in `getForm`.\n                    const allRevisions = await this.getFormRevisions(id);\n\n                    // Then calculate the stats\n                    const stats = {\n                        submissions: 0,\n                        views: 0,\n                        conversionRate: 0\n                    };\n\n                    for (let i = 0; i < allRevisions.length; i++) {\n                        const revision = allRevisions[i];\n                        stats.views += revision.stats.views;\n                        stats.submissions += revision.stats.submissions;\n                    }\n\n                    let conversionRate = 0;\n                    if (stats.views > 0) {\n                        conversionRate = parseFloat(\n                            ((stats.submissions / stats.views) * 100).toFixed(2)\n                        );\n                    }\n\n                    return {\n                        ...stats,\n                        conversionRate\n                    };\n                },\n                async listForms() {\n                    const permission = await utils.checkBaseFormPermissions(context, { rwd: \"r\" });\n\n                    const must: any = [\n                        { term: { \"__type.keyword\": \"fb.form\" } },\n                        { term: { \"locale.keyword\": i18nContent.locale.code } }\n                    ];\n\n                    // Only get records which are owned by current user.\n                    if (permission.own === true) {\n                        const identity = context.security.getIdentity();\n                        must.push({\n                            term: { \"ownedBy.id.keyword\": identity.id }\n                        });\n                    }\n\n                    // When ES index is shared between tenants, we need to filter records by tenant ID\n                    const sharedIndex = process.env.ELASTICSEARCH_SHARED_INDEXES === \"true\";\n                    if (sharedIndex) {\n                        const tenant = tenancy.getCurrentTenant();\n                        must.push({ term: { \"tenant.keyword\": tenant.id } });\n                    }\n\n                    const body = {\n                        query: {\n                            bool: {\n                                must\n                            }\n                        },\n                        sort: [\n                            {\n                                savedOn: {\n                                    order: \"desc\",\n\n                                    unmapped_type: \"date\"\n                                }\n                            }\n                        ],\n                        size: 1000\n                    };\n\n                    // Get \"latest\" form revisions from Elasticsearch.\n                    try {\n                        const response = await elasticsearch.search({\n                            ...defaults.es(context),\n                            body\n                        });\n\n                        return response.body.hits.hits.map(item => item._source);\n                    } catch (ex) {\n                        throw new WebinyError(\n                            ex.message || \"Could not perform search.\",\n                            ex.code || \"ELASTICSEARCH_ERROR\",\n                            {\n                                body\n                            }\n                        );\n                    }\n                },\n                async getFormRevisions(id) {\n                    const permission = await utils.checkBaseFormPermissions(context, { rwd: \"r\" });\n                    const [uniqueId] = id.split(\"#\");\n\n                    const [forms] = await db.read<FbForm>({\n                        ...defaults.db,\n                        query: {\n                            PK: PK_FORM(uniqueId),\n                            SK: { $beginsWith: \"REV#\" },\n                            sort: { SK: -1 }\n                        }\n                    });\n\n                    utils.checkOwnership(forms[0], permission, context);\n\n                    return forms.sort((a, b) => b.version - a.version);\n                },\n                async getPublishedFormRevisionById(revisionId) {\n                    const [uniqueId, version] = revisionId.split(\"#\");\n\n                    const [[form]] = await db.read<FbForm>({\n                        ...defaults.db,\n                        query: {\n                            PK: PK_FORM(uniqueId),\n                            SK: SK_FORM_REVISION(version)\n                        }\n                    });\n\n                    if (!form || !form.published) {\n                        throw new NotFoundError(`Form \"${revisionId}\" was not found!`);\n                    }\n\n                    return form;\n                },\n                async getLatestPublishedFormRevision(formId) {\n                    // Make sure we have a unique form ID, and not a revision ID\n                    const [uniqueId] = formId.split(\"#\");\n\n                    const [[latestPublishedItem]] = await db.read({\n                        ...defaults.db,\n                        query: {\n                            PK: PK_FORM(uniqueId),\n                            SK: SK_FORM_LATEST_PUBLISHED()\n                        }\n                    });\n\n                    if (!latestPublishedItem) {\n                        throw new NotFoundError(`Form \"${formId}\" was not found!`);\n                    }\n\n                    const [[form]] = await db.read<FbForm>({\n                        ...defaults.db,\n                        query: {\n                            PK: PK_FORM(uniqueId),\n                            SK: SK_FORM_REVISION(latestPublishedItem.version)\n                        }\n                    });\n\n                    return form;\n                },\n                async createForm(data) {\n                    await utils.checkBaseFormPermissions(context, { rwd: \"w\" });\n\n                    const identity = context.security.getIdentity();\n                    await new models.FormCreateDataModel().populate(data).validate();\n\n                    // Forms are identified by a common parent ID + Revision number\n                    const [uniqueId, version] = [mdbid(), 1];\n                    const id = `${uniqueId}#${zeroPad(version)}`;\n\n                    const form: FbForm = {\n                        id,\n                        locale: i18nContent.locale.code,\n                        tenant: tenancy.getCurrentTenant().id,\n                        savedOn: new Date().toISOString(),\n                        createdOn: new Date().toISOString(),\n                        createdBy: {\n                            id: identity.id,\n                            displayName: identity.displayName,\n                            type: identity.type\n                        },\n                        ownedBy: {\n                            id: identity.id,\n                            displayName: identity.displayName,\n                            type: identity.type\n                        },\n                        name: data.name,\n                        slug: [slugify(data.name), uniqueId].join(\"-\").toLowerCase(),\n                        version,\n                        locked: false,\n                        published: false,\n                        publishedOn: null,\n                        status: utils.getStatus({ published: false, locked: false }),\n                        stats: {\n                            views: 0,\n                            submissions: 0\n                        },\n                        // Will be added via a \"update\"\n                        fields: [],\n                        layout: [],\n                        settings: await new models.FormSettingsModel().toJSON(),\n                        triggers: null\n                    };\n\n                    const FORM_PK = PK_FORM(uniqueId);\n\n                    await db\n                        .batch()\n                        .create({\n                            ...defaults.db,\n                            data: {\n                                PK: FORM_PK,\n                                SK: SK_FORM_REVISION(version),\n                                TYPE: TYPE_FORM,\n                                ...form\n                            }\n                        })\n                        .create({\n                            ...defaults.db,\n                            data: {\n                                PK: FORM_PK,\n                                SK: SK_FORM_LATEST(),\n                                TYPE: TYPE_FORM_LATEST,\n                                id,\n                                version\n                            }\n                        })\n                        .create({\n                            ...defaults.esDb,\n                            data: {\n                                PK: FORM_PK,\n                                SK: SK_FORM_LATEST(),\n                                index: defaults.es(context).index,\n                                data: getESDataForLatestRevision(form, context)\n                            }\n                        })\n                        .execute();\n\n                    return form;\n                },\n                async updateForm(id, data) {\n                    const permission = await utils.checkBaseFormPermissions(context, { rwd: \"w\" });\n                    const updateData = new models.FormUpdateDataModel().populate(data);\n                    await updateData.validate();\n\n                    const [uniqueId, version] = id.split(\"#\");\n                    const FORM_PK = PK_FORM(uniqueId);\n\n                    const [[[form]], [[latestForm]]] = await db\n                        .batch()\n                        .read({\n                            ...defaults.db,\n                            query: {\n                                PK: FORM_PK,\n                                SK: SK_FORM_REVISION(version)\n                            }\n                        })\n                        .read({\n                            ...defaults.db,\n                            query: {\n                                PK: FORM_PK,\n                                SK: SK_FORM_LATEST()\n                            }\n                        })\n                        .execute();\n\n                    if (!form) {\n                        throw new NotFoundError(`Form \"${id}\" was not found!`);\n                    }\n\n                    checkOwnership(form, permission, context);\n\n                    const newData = Object.assign(await updateData.toJSON({ onlyDirty: true }), {\n                        savedOn: new Date().toISOString()\n                    });\n                    Object.assign(form, newData);\n\n                    // Finally save it to DB\n                    const batch = db.batch().update({\n                        ...defaults.db,\n                        query: {\n                            PK: FORM_PK,\n                            SK: SK_FORM_REVISION(version)\n                        },\n                        data: form\n                    });\n\n                    // Update form in \"Elastic Search\"\n                    if (latestForm.id === id) {\n                        batch.update({\n                            ...defaults.esDb,\n                            query: {\n                                PK: FORM_PK,\n                                SK: SK_FORM_LATEST()\n                            },\n                            data: {\n                                PK: FORM_PK,\n                                SK: SK_FORM_LATEST(),\n                                index: defaults.es(context).index,\n                                data: getESDataForLatestRevision(form, context)\n                            }\n                        });\n                    }\n\n                    await batch.execute();\n\n                    return form;\n                },\n                async deleteForm(id) {\n                    const permission = await utils.checkBaseFormPermissions(context, { rwd: \"d\" });\n\n                    const [uniqueId] = id.split(\"#\");\n\n                    const [items] = await db.read<DbItem<FbForm>>({\n                        ...defaults.db,\n                        query: {\n                            PK: PK_FORM(uniqueId),\n                            SK: { $gt: \" \" }\n                        }\n                    });\n\n                    if (!items.length) {\n                        throw new NotFoundError(`Form ${id} was not found!`);\n                    }\n\n                    const form = items.find(item => item.TYPE === TYPE_FORM);\n                    checkOwnership(form, permission, context);\n\n                    // Delete all items in batches of 25\n                    await utils.paginateBatch<DbItem>(items, 25, async items => {\n                        await db\n                            .batch()\n                            .delete(\n                                ...items.map(item => ({\n                                    ...defaults.db,\n                                    query: { PK: item.PK, SK: item.SK }\n                                }))\n                            )\n                            .execute();\n                    });\n\n                    // Delete items from \"Elastic Search\"\n                    await db.delete({\n                        ...defaults.esDb,\n                        query: {\n                            PK: PK_FORM(uniqueId),\n                            SK: SK_FORM_LATEST()\n                        }\n                    });\n\n                    return true;\n                },\n                async deleteRevision(id) {\n                    const permission = await utils.checkBaseFormPermissions(context, { rwd: \"d\" });\n\n                    const [uniqueId, version] = id.split(\"#\");\n                    const FORM_PK = PK_FORM(uniqueId);\n\n                    // Load form, latest form and latest published form records\n                    const [[[form]], [[lForm]], [[lpForm]]] = await db\n                        .batch()\n                        .read({\n                            ...defaults.db,\n                            query: {\n                                PK: FORM_PK,\n                                SK: SK_FORM_REVISION(version)\n                            }\n                        })\n                        .read({\n                            ...defaults.db,\n                            query: {\n                                PK: FORM_PK,\n                                SK: SK_FORM_LATEST()\n                            }\n                        })\n                        .read({\n                            ...defaults.db,\n                            query: {\n                                PK: FORM_PK,\n                                SK: SK_FORM_LATEST_PUBLISHED()\n                            }\n                        })\n                        .execute();\n\n                    if (!form) {\n                        throw new NotFoundError(`Form \"${id}\" was not found!`);\n                    }\n\n                    checkOwnership(form, permission, context);\n\n                    const batch = db.batch().delete({\n                        ...defaults.db,\n                        query: {\n                            PK: FORM_PK,\n                            SK: SK_FORM_REVISION(version)\n                        }\n                    });\n\n                    if (lForm.id === id || (lpForm && lpForm.id === id)) {\n                        // Get all form revisions\n                        const [revisions] = await db.read<FbForm>({\n                            ...defaults.db,\n                            query: { PK: FORM_PK, SK: { $beginsWith: \"REV#\" } },\n                            sort: { SK: -1 }\n                        });\n\n                        // Update or delete the \"latest published\" record\n                        if (lpForm && lpForm.id === id) {\n                            const publishedRevision = revisions\n                                .filter(rev => rev.id !== id && rev.publishedOn !== null)\n                                .sort(\n                                    (a, b) =>\n                                        new Date(b.publishedOn).getTime() -\n                                        new Date(a.publishedOn).getTime()\n                                )\n                                .shift();\n\n                            if (publishedRevision) {\n                                batch.update({\n                                    ...defaults.db,\n                                    query: {\n                                        PK: FORM_PK,\n                                        SK: SK_FORM_LATEST_PUBLISHED()\n                                    },\n                                    data: {\n                                        PK: FORM_PK,\n                                        SK: SK_FORM_LATEST_PUBLISHED(),\n                                        TYPE: TYPE_FORM_LATEST_PUBLISHED,\n                                        id: publishedRevision.id,\n                                        version: publishedRevision.version\n                                    }\n                                });\n                            } else {\n                                batch.delete({\n                                    ...defaults.db,\n                                    query: {\n                                        PK: FORM_PK,\n                                        SK: SK_FORM_LATEST_PUBLISHED()\n                                    }\n                                });\n                            }\n                        }\n\n                        if (lForm.id === id) {\n                            // Find revision right before the one being deleted\n                            const prevRevision = revisions\n                                .filter(rev => rev.version < form.version)\n                                .sort((a, b) => b.version - a.version)\n                                .shift();\n\n                            if (!prevRevision && revisions.length === 1) {\n                                // Means we're deleting the last revision, so we need to delete the whole form.\n                                return this.deleteForm(uniqueId);\n                            }\n\n                            batch\n                                .update({\n                                    ...defaults.db,\n                                    query: {\n                                        PK: FORM_PK,\n                                        SK: SK_FORM_LATEST()\n                                    },\n                                    data: {\n                                        PK: FORM_PK,\n                                        SK: SK_FORM_LATEST(),\n                                        TYPE: TYPE_FORM_LATEST,\n                                        id: prevRevision.id,\n                                        version: prevRevision.version\n                                    }\n                                })\n                                .update({\n                                    ...defaults.esDb,\n                                    query: {\n                                        PK: FORM_PK,\n                                        SK: SK_FORM_LATEST()\n                                    },\n                                    data: {\n                                        PK: FORM_PK,\n                                        SK: SK_FORM_LATEST(),\n                                        index: defaults.es(context).index,\n                                        data: getESDataForLatestRevision(prevRevision, context)\n                                    }\n                                });\n                        }\n                    }\n\n                    await batch.execute();\n\n                    return true;\n                },\n                async publishForm(id) {\n                    const permission = await utils.checkBaseFormPermissions(context, {\n                        rwd: \"r\",\n                        pw: \"p\"\n                    });\n\n                    const [uniqueId, version] = id.split(\"#\");\n\n                    const [[[form]], [[latestForm]]] = await db\n                        .batch()\n                        .read({\n                            ...defaults.db,\n                            query: {\n                                PK: PK_FORM(uniqueId),\n                                SK: SK_FORM_REVISION(version)\n                            }\n                        })\n                        .read({\n                            ...defaults.db,\n                            query: {\n                                PK: PK_FORM(uniqueId),\n                                SK: SK_FORM_LATEST()\n                            }\n                        })\n                        .execute();\n\n                    if (!form) {\n                        throw new NotFoundError(`Form \"${id}\" was not found!`);\n                    }\n\n                    checkOwnership(form, permission, context);\n\n                    const savedOn = new Date().toISOString();\n                    const status = utils.getStatus({ published: true, locked: true });\n\n                    Object.assign(form, {\n                        published: true,\n                        publishedOn: savedOn,\n                        locked: true,\n                        savedOn,\n                        status\n                    });\n\n                    // Finally save it to DB\n                    const batch = db\n                        .batch()\n                        .update({\n                            ...defaults.db,\n                            query: {\n                                PK: PK_FORM(uniqueId),\n                                SK: SK_FORM_REVISION(version)\n                            },\n                            data: form\n                        })\n                        .update({\n                            ...defaults.db,\n                            query: {\n                                PK: PK_FORM(uniqueId),\n                                SK: SK_FORM_LATEST_PUBLISHED()\n                            },\n                            data: {\n                                PK: PK_FORM(uniqueId),\n                                SK: SK_FORM_LATEST_PUBLISHED(),\n                                TYPE: TYPE_FORM_LATEST_PUBLISHED,\n                                id,\n                                version: form.version\n                            }\n                        });\n\n                    // Update form in \"Elastic Search\"\n                    if (latestForm.id === id) {\n                        batch.update({\n                            ...defaults.esDb,\n                            query: {\n                                PK: PK_FORM(uniqueId),\n                                SK: SK_FORM_LATEST()\n                            },\n                            data: {\n                                PK: PK_FORM(uniqueId),\n                                SK: SK_FORM_LATEST(),\n                                index: defaults.es(context).index,\n                                data: getESDataForLatestRevision(form, context)\n                            }\n                        });\n                    }\n\n                    await batch.execute();\n\n                    return form;\n                },\n                async unpublishForm(id) {\n                    const permission = await utils.checkBaseFormPermissions(context, {\n                        rwd: \"r\",\n                        pw: \"u\"\n                    });\n\n                    const [uniqueId, version] = id.split(\"#\");\n                    const FORM_PK = PK_FORM(uniqueId);\n\n                    const [[[form]], [[latestForm]], [[latestPublishedForm]]] = await db\n                        .batch()\n                        .read({\n                            ...defaults.db,\n                            query: {\n                                PK: FORM_PK,\n                                SK: SK_FORM_REVISION(version)\n                            }\n                        })\n                        .read({\n                            ...defaults.db,\n                            query: {\n                                PK: FORM_PK,\n                                SK: SK_FORM_LATEST()\n                            }\n                        })\n                        .read({\n                            ...defaults.db,\n                            query: {\n                                PK: FORM_PK,\n                                SK: SK_FORM_LATEST_PUBLISHED()\n                            }\n                        })\n                        .execute();\n\n                    if (!form) {\n                        throw new NotFoundError(`Form \"${id}\" was not found!`);\n                    }\n\n                    checkOwnership(form, permission, context);\n\n                    const savedOn = new Date().toISOString();\n                    const status = utils.getStatus({ published: false, locked: true });\n\n                    Object.assign(form, {\n                        published: false,\n                        savedOn,\n                        status\n                    });\n\n                    // Update DB item\n                    const batch = db.batch().update({\n                        ...defaults.db,\n                        query: {\n                            PK: FORM_PK,\n                            SK: SK_FORM_REVISION(version)\n                        },\n                        data: form\n                    });\n\n                    // Update or delete \"latest published\" item from DB\n                    if (latestPublishedForm.id === id) {\n                        const [revisions] = await db.read<FbForm>({\n                            ...defaults.db,\n                            query: {\n                                PK: FORM_PK,\n                                SK: { $beginsWith: \"REV#\" }\n                            },\n                            sort: { SK: -1 }\n                        });\n\n                        // Find published revision with highest publishedOn data\n                        const publishedRevision = revisions\n                            .filter(rev => rev.id !== id && rev.publishedOn !== null)\n                            .sort(\n                                (a, b) =>\n                                    new Date(b.publishedOn).getTime() -\n                                    new Date(a.publishedOn).getTime()\n                            )\n                            .shift();\n\n                        if (publishedRevision) {\n                            batch.update({\n                                ...defaults.db,\n                                query: {\n                                    PK: FORM_PK,\n                                    SK: SK_FORM_LATEST_PUBLISHED()\n                                },\n                                data: {\n                                    PK: FORM_PK,\n                                    SK: SK_FORM_LATEST_PUBLISHED(),\n                                    TYPE: TYPE_FORM_LATEST_PUBLISHED,\n                                    id: publishedRevision.id,\n                                    version: publishedRevision.version\n                                }\n                            });\n                        } else {\n                            batch.delete({\n                                ...defaults.db,\n                                query: {\n                                    PK: FORM_PK,\n                                    SK: SK_FORM_LATEST_PUBLISHED()\n                                }\n                            });\n                        }\n                    }\n\n                    // Update form in \"Elastic Search\"\n                    if (latestForm.id === id) {\n                        batch.update({\n                            ...defaults.esDb,\n                            query: {\n                                PK: PK_FORM(uniqueId),\n                                SK: SK_FORM_LATEST()\n                            },\n                            data: {\n                                PK: PK_FORM(uniqueId),\n                                SK: SK_FORM_LATEST(),\n                                index: defaults.es(context).index,\n                                data: getESDataForLatestRevision(form, context)\n                            }\n                        });\n                    }\n\n                    await batch.execute();\n\n                    return form;\n                },\n                async createFormRevision(sourceRevisionId) {\n                    await utils.checkBaseFormPermissions(context, { rwd: \"w\" });\n\n                    const batch = db.batch();\n\n                    const [uniqueId, version] = sourceRevisionId.split(\"#\");\n                    const FORM_PK = PK_FORM(uniqueId);\n\n                    const [[[form]], [[latestForm]]] = await batch\n                        .read({\n                            ...defaults.db,\n                            query: {\n                                PK: FORM_PK,\n                                SK: SK_FORM_REVISION(version)\n                            }\n                        })\n                        .read({\n                            ...defaults.db,\n                            query: {\n                                PK: FORM_PK,\n                                SK: SK_FORM_LATEST()\n                            }\n                        })\n                        .execute();\n\n                    if (!form) {\n                        throw new NotFoundError(`Form \"${sourceRevisionId}\" was not found!`);\n                    }\n\n                    const identity = context.security.getIdentity();\n                    const newVersion = latestForm.version + 1;\n                    const id = `${uniqueId}#${zeroPad(newVersion)}`;\n\n                    const newRevision: FbForm = {\n                        id,\n                        locale: form.locale,\n                        savedOn: new Date().toISOString(),\n                        createdOn: new Date().toISOString(),\n                        createdBy: {\n                            id: identity.id,\n                            displayName: identity.displayName,\n                            type: identity.type\n                        },\n                        ownedBy: form.ownedBy,\n                        name: form.name,\n                        slug: form.slug,\n                        version: newVersion,\n                        locked: false,\n                        published: false,\n                        publishedOn: null,\n                        status: utils.getStatus({ published: false, locked: false }),\n                        fields: form.fields,\n                        layout: form.layout,\n                        stats: {\n                            submissions: 0,\n                            views: 0\n                        },\n                        settings: form.settings,\n                        triggers: form.triggers,\n                        tenant: form.tenant\n                    };\n\n                    // Store form to DB and update `latest revision` item\n                    await db\n                        .batch()\n                        .create({\n                            ...defaults.db,\n                            data: {\n                                PK: FORM_PK,\n                                SK: SK_FORM_REVISION(newVersion),\n                                TYPE: \"fb.form\",\n                                ...newRevision\n                            }\n                        })\n                        .update({\n                            ...defaults.db,\n                            query: {\n                                PK: FORM_PK,\n                                SK: SK_FORM_LATEST()\n                            },\n                            data: {\n                                PK: FORM_PK,\n                                SK: SK_FORM_LATEST(),\n                                TYPE: TYPE_FORM_LATEST,\n                                id: newRevision.id,\n                                version: newRevision.version\n                            }\n                        })\n                        .update({\n                            ...defaults.esDb,\n                            query: {\n                                PK: FORM_PK,\n                                SK: SK_FORM_LATEST()\n                            },\n                            data: {\n                                PK: FORM_PK,\n                                SK: SK_FORM_LATEST(),\n                                index: defaults.es(context).index,\n                                data: getESDataForLatestRevision(newRevision, context)\n                            }\n                        })\n                        .execute();\n\n                    return newRevision;\n                },\n                async incrementFormViews(id) {\n                    const [uniqueId, version] = id.split(\"#\");\n                    const FORM_PK = PK_FORM(uniqueId);\n                    const FORM_SK = SK_FORM_REVISION(version);\n\n                    const [[form]] = await db.read<FbForm>({\n                        ...defaults.db,\n                        query: {\n                            PK: FORM_PK,\n                            SK: FORM_SK\n                        }\n                    });\n\n                    if (!form) {\n                        throw new NotFoundError(`Form \"${id}\" was not found!`);\n                    }\n\n                    // Increment views\n                    form.stats.views = form.stats.views + 1;\n\n                    // Update \"form stats\" in DB.\n                    await db.update({\n                        ...defaults.db,\n                        query: {\n                            PK: FORM_PK,\n                            SK: FORM_SK\n                        },\n                        data: {\n                            stats: form.stats\n                        }\n                    });\n\n                    return true;\n                },\n                async incrementFormSubmissions(id) {\n                    const [uniqueId, version] = id.split(\"#\");\n                    const FORM_PK = PK_FORM(uniqueId);\n                    const FORM_SK = SK_FORM_REVISION(version);\n\n                    const [[form]] = await db.read<FbForm>({\n                        ...defaults.db,\n                        query: {\n                            PK: FORM_PK,\n                            SK: FORM_SK\n                        }\n                    });\n\n                    if (!form) {\n                        throw new NotFoundError(`Form \"${id}\" was not found!`);\n                    }\n\n                    // Increment submissions\n                    form.stats.submissions++;\n\n                    // Update \"form stats\" in DB.\n                    await db.update({\n                        ...defaults.db,\n                        query: {\n                            PK: FORM_PK,\n                            SK: FORM_SK\n                        },\n                        data: {\n                            stats: form.stats\n                        }\n                    });\n\n                    return true;\n                },\n                async getSubmissionsByIds(formId, submissionIds) {\n                    const [uniqueId] = formId.split(\"#\");\n                    const FORM_PK = PK_FORM(uniqueId);\n\n                    const batch = db.batch();\n\n                    batch.read(\n                        ...submissionIds.map(submissionId => ({\n                            ...defaults.db,\n                            query: {\n                                PK: FORM_PK,\n                                SK: `FS#${submissionId}`\n                            }\n                        }))\n                    );\n\n                    const response = await batch.execute();\n\n                    return response\n                        .map(item => {\n                            const [[formSubmission]] = item;\n                            return formSubmission;\n                        })\n                        .filter(Boolean);\n                },\n                async listFormSubmissions(formId, options = {}) {\n                    const { submissions } = await utils.checkBaseFormPermissions(context);\n\n                    if (typeof submissions !== \"undefined\" && submissions !== true) {\n                        throw new NotAuthorizedError();\n                    }\n\n                    /**\n                     * Check if current identity is allowed to access this form.\n                     */\n                    await this.getForm(formId);\n\n                    const { sort = { createdOn: -1 }, after = null } = options;\n                    let { limit = 10 } = options;\n\n                    // 10000 is a hard limit of ElasticSearch for `size` parameter.\n                    if (limit >= 10000) {\n                        limit = 9999;\n                    }\n\n                    const [uniqueId] = formId.split(\"#\");\n\n                    const filter: Record<string, any>[] = [\n                        { term: { \"__type.keyword\": \"fb.submission\" } },\n                        { term: { \"locale.keyword\": i18nContent.locale.code } },\n                        // Load all form submissions no matter the revision\n                        { term: { \"form.parent.keyword\": uniqueId } }\n                    ];\n\n                    // When ES index is shared between tenants, we need to filter records by tenant ID\n                    const sharedIndex = process.env.ELASTICSEARCH_SHARED_INDEXES === \"true\";\n                    if (sharedIndex) {\n                        const tenant = tenancy.getCurrentTenant();\n                        filter.push({ term: { \"tenant.keyword\": tenant.id } });\n                    }\n\n                    const body: Record<string, any> = {\n                        query: {\n                            bool: { filter }\n                        },\n                        size: limit + 1,\n                        sort: [{ createdOn: { order: sort.createdOn > 0 ? \"asc\" : \"desc\" } }]\n                    };\n\n                    if (after) {\n                        body[\"search_after\"] = utils.decodeCursor(after);\n                    }\n\n                    const response = await elasticsearch.search({\n                        ...defaults.es(context),\n                        body\n                    });\n\n                    const { hits, total } = response.body.hits;\n                    const items = hits.map(item => item._source);\n\n                    const hasMoreItems = items.length > limit;\n                    if (hasMoreItems) {\n                        // Remove the last item from results, we don't want to include it.\n                        items.pop();\n                    }\n\n                    // Cursor is the `sort` value of the last item in the array.\n                    // https://www.elastic.co/guide/en/elasticsearch/reference/current/paginate-search-results.html#search-after\n\n                    const meta = {\n                        hasMoreItems,\n                        totalCount: total.value,\n                        cursor: items.length > 0 ? encodeCursor(hits[items.length - 1].sort) : null\n                    };\n\n                    return [items, meta];\n                },\n                async createFormSubmission(formId, reCaptchaResponseToken, rawData, meta) {\n                    const { formBuilder } = context;\n\n                    const [uniqueId, version] = formId.split(\"#\");\n\n                    const [[form]] = await db.read<FbForm>({\n                        ...defaults.db,\n                        query: {\n                            PK: PK_FORM(uniqueId),\n                            SK: SK_FORM_REVISION(version)\n                        }\n                    });\n\n                    if (!form) {\n                        throw new NotFoundError(`Form \"${formId}\" was not found!`);\n                    }\n\n                    const settings = await formBuilder.settings.getSettings({ auth: false });\n\n                    if (settings.reCaptcha && settings.reCaptcha.enabled) {\n                        if (!reCaptchaResponseToken) {\n                            throw new Error(\"Missing reCAPTCHA response token - cannot verify.\");\n                        }\n\n                        const { secretKey } = settings.reCaptcha;\n\n                        const recaptchaResponse = await fetch(\n                            \"https://www.google.com/recaptcha/api/siteverify\",\n                            {\n                                method: \"POST\",\n                                body: JSON.stringify({\n                                    secret: secretKey,\n                                    response: reCaptchaResponseToken\n                                })\n                            }\n                        );\n\n                        let responseIsValid = false;\n                        try {\n                            const validationResponse = await recaptchaResponse.json();\n                            if (validationResponse.success) {\n                                responseIsValid = true;\n                            }\n                        } catch (e) {}\n\n                        if (!responseIsValid) {\n                            throw new Error(\"reCAPTCHA verification failed.\");\n                        }\n                    }\n\n                    // Validate data\n                    const validatorPlugins = context.plugins.byType(\"fb-form-field-validator\");\n                    const { fields } = form;\n\n                    const data = pick(\n                        rawData,\n                        fields.map(field => field.fieldId)\n                    );\n\n                    if (Object.keys(data).length === 0) {\n                        throw new Error(\"Form data cannot be empty.\");\n                    }\n\n                    const invalidFields = {};\n                    for (let i = 0; i < fields.length; i++) {\n                        const field = fields[i];\n                        if (Array.isArray(field.validation)) {\n                            for (let j = 0; j < field.validation.length; j++) {\n                                const validator = field.validation[j];\n                                const validatorPlugin = validatorPlugins.find(\n                                    item => item.validator.name === validator.name\n                                );\n\n                                if (!validatorPlugin) {\n                                    continue;\n                                }\n\n                                let isInvalid = true;\n                                try {\n                                    const result = await validatorPlugin.validator.validate(\n                                        data[field.fieldId],\n                                        validator\n                                    );\n                                    isInvalid = result === false;\n                                } catch (e) {\n                                    isInvalid = true;\n                                }\n\n                                if (isInvalid) {\n                                    invalidFields[field.fieldId] =\n                                        validator.message || \"Invalid value\";\n                                }\n                            }\n                        }\n                    }\n\n                    if (Object.keys(invalidFields).length > 0) {\n                        throw {\n                            message: \"Form submission contains invalid fields.\",\n                            data: { invalidFields }\n                        };\n                    }\n\n                    // Use model for data validation and default values.\n                    const submissionModel = new models.FormSubmissionCreateDataModel().populate({\n                        data,\n                        meta,\n                        form: {\n                            id: form.id,\n                            parent: uniqueId,\n                            name: form.name,\n                            version: form.version,\n                            fields: form.fields,\n                            layout: form.layout\n                        }\n                    });\n\n                    await submissionModel.validate();\n\n                    const submission: FbSubmission = {\n                        id: mdbid(),\n                        locale: form.locale,\n                        ownedBy: form.ownedBy,\n                        ...(await submissionModel.toJSON())\n                    };\n\n                    // Store submission to DB\n                    await db\n                        .batch()\n                        .create({\n                            ...defaults.db,\n                            data: {\n                                PK: PK_FORM(uniqueId),\n                                SK: SK_SUBMISSION(submission.id),\n                                TYPE: TYPE_FORM_SUBMISSION,\n                                tenant: form.tenant,\n                                ...submission\n                            }\n                        })\n                        .create({\n                            ...defaults.esDb,\n                            data: {\n                                PK: PK_FORM(uniqueId),\n                                SK: SK_SUBMISSION(submission.id),\n                                index: defaults.es(context).index,\n                                data: {\n                                    __type: \"fb.submission\",\n                                    webinyVersion: context.WEBINY_VERSION,\n                                    createdOn: new Date().toISOString(),\n                                    tenant: context.tenancy.getCurrentTenant().id,\n                                    ...submission\n                                }\n                            }\n                        })\n                        .execute();\n\n                    submission.logs = [\n                        ...(submission.logs || []),\n                        {\n                            type: \"info\",\n                            message: \"Form submission created.\"\n                        }\n                    ];\n\n                    try {\n                        // Execute triggers\n                        if (form.triggers) {\n                            const plugins = context.plugins.byType(\"form-trigger-handler\");\n                            for (let i = 0; i < plugins.length; i++) {\n                                const plugin = plugins[i];\n                                if (form.triggers[plugin.trigger]) {\n                                    await plugin.handle({\n                                        form: form,\n                                        addLog: log => {\n                                            submission.logs = [...submission.logs, log];\n                                        },\n                                        data,\n                                        meta,\n                                        trigger: form.triggers[plugin.trigger]\n                                    });\n                                }\n                            }\n                        }\n\n                        submission.logs = [\n                            ...submission.logs,\n                            {\n                                type: \"success\",\n                                message: \"Form submitted successfully.\"\n                            }\n                        ];\n\n                        await formBuilder.forms.incrementFormSubmissions(form.id);\n                    } catch (e) {\n                        submission.logs = [\n                            ...submission.logs,\n                            {\n                                type: \"error\",\n                                message: e.message\n                            }\n                        ];\n                    } finally {\n                        // Save submission to include the logs that were added during trigger processing.\n                        await formBuilder.forms.updateSubmission(form.id, submission);\n                    }\n\n                    return submission;\n                },\n                async updateSubmission(formId, data) {\n                    await new models.FormSubmissionUpdateDataModel().populate(data).validate();\n\n                    const [uniqueId] = formId.split(\"#\");\n\n                    // Finally save it to DB\n                    await db.update({\n                        ...defaults.db,\n                        query: {\n                            PK: PK_FORM(uniqueId),\n                            SK: SK_SUBMISSION(data.id)\n                        },\n                        data: {\n                            logs: data.logs\n                        }\n                    });\n\n                    return true;\n                },\n                async deleteSubmission(formId, submissionId) {\n                    const [uniqueId] = formId.split(\"#\");\n                    await db\n                        .batch()\n                        .delete({\n                            ...defaults.db,\n                            query: {\n                                PK: PK_FORM(uniqueId),\n                                SK: SK_SUBMISSION(submissionId)\n                            }\n                        })\n                        .delete({\n                            ...defaults.esDb,\n                            query: {\n                                PK: PK_FORM(uniqueId),\n                                SK: SK_SUBMISSION(submissionId)\n                            }\n                        })\n                        .execute();\n\n                    return true;\n                }\n            }\n        };\n    }\n} as ContextPlugin<FormBuilderContext>;\n"],"file":"forms.crud.js"}