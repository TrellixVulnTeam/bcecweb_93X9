{"version":3,"sources":["../../src/graphql/service.ts"],"names":["localesCache","options","localesFunction","Error","name","type","resolve","context","Array","isArray","handlerClient","invoke"],"mappings":";;;;;;;;;AAAA;;AAGA,IAAIA,YAAJ;;eAIgBC,OAAD,IAAoC;AAC/C,MAAI,CAACA,OAAO,CAACC,eAAb,EAA8B;AAC1B,UAAM,IAAIC,KAAJ,CAAW,+DAAX,CAAN;AACH;;AAED,SAAO,CACH,uBADG,EAEH;AACIC,IAAAA,IAAI,EAAE,0BADV;AAEIC,IAAAA,IAAI,EAAE,0BAFV;;AAGI,UAAMC,OAAN,CAAc;AAAEC,MAAAA;AAAF,KAAd,EAA2B;AACvB,UAAIC,KAAK,CAACC,OAAN,CAAcT,YAAd,CAAJ,EAAiC;AAC7B,eAAOA,YAAP;AACH;;AAEDA,MAAAA,YAAY,GAAG,MAAMO,OAAO,CAACG,aAAR,CAAsBC,MAAtB,CAA6B;AAC9CP,QAAAA,IAAI,EAAEH,OAAO,CAACC;AADgC,OAA7B,CAArB;AAIA,aAAOF,YAAP;AACH;;AAbL,GAFG,CAAP;AAkBH,C","sourcesContent":["import i18nContext from \"./context\";\nimport { ContextI18NGetLocales } from \"~/types\";\n\nlet localesCache;\n\ntype ServicePluginsOptions = { localesFunction: string };\n\nexport default (options: ServicePluginsOptions) => {\n    if (!options.localesFunction) {\n        throw new Error(`I18N service plugins error - \"localesFunction\" not specified.`);\n    }\n\n    return [\n        i18nContext(),\n        {\n            name: \"context-i18n-get-locales\",\n            type: \"context-i18n-get-locales\",\n            async resolve({ context }) {\n                if (Array.isArray(localesCache)) {\n                    return localesCache;\n                }\n\n                localesCache = await context.handlerClient.invoke({\n                    name: options.localesFunction\n                });\n\n                return localesCache;\n            }\n        } as ContextI18NGetLocales\n    ];\n};\n"],"file":"service.js"}