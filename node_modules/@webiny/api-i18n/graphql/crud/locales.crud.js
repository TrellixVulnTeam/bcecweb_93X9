"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _ContextPlugin = require("@webiny/handler/plugins/ContextPlugin");

var _error = _interopRequireDefault(require("@webiny/error"));

var _handlerGraphql = require("@webiny/handler-graphql");

var _apiSecurity = require("@webiny/api-security");

var _LocalesStorageOperationsProviderPlugin = require("../../plugins/LocalesStorageOperationsProviderPlugin");

var _LocalePlugin = require("../../plugins/LocalePlugin");

var _lifecycleEvent = require("./locales/lifecycleEvent");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var _default = new _ContextPlugin.ContextPlugin(async context => {
  if (!context.i18n) {
    context.i18n = {};
  }

  const pluginType = _LocalesStorageOperationsProviderPlugin.LocalesStorageOperationsProviderPlugin.type;
  const providerPlugin = context.plugins.byType(pluginType).find(() => true);

  if (!providerPlugin) {
    throw new _error.default(`Missing "${pluginType}" plugin.`, "PLUGIN_NOT_FOUND", {
      type: pluginType
    });
  }

  const storageOperations = await providerPlugin.provide({
    context
  });
  const localePlugins = context.plugins.byType(_LocalePlugin.LocalePlugin.type);
  context.i18n.locales = {
    getDefault: async () => {
      try {
        const locale = await storageOperations.getDefault();

        if (!locale) {
          throw new _handlerGraphql.NotFoundError(`Default locale  not found.`);
        }

        return _objectSpread(_objectSpread({}, locale), {}, {
          createdOn: locale.createdOn ? locale.createdOn : new Date().toISOString()
        });
      } catch (ex) {
        throw new _error.default(ex.message || "Could not load the default locale.", ex.code || "LOCALE_DEFAULT_ERROR");
      }
    },
    get: async code => {
      try {
        const locale = await storageOperations.get(code);

        if (!locale) {
          throw new _handlerGraphql.NotFoundError(`Locale "${code}" not found.`);
        }

        return _objectSpread(_objectSpread({}, locale), {}, {
          createdOn: locale.createdOn ? locale.createdOn : new Date().toISOString()
        });
      } catch (ex) {
        throw new _error.default(ex.message || "Could not load the requested locale.", ex.code || "LOCALE_GET_ERROR", {
          code
        });
      }
    },
    list: async params => {
      const {
        where,
        sort,
        after,
        limit = 1000
      } = params || {};

      try {
        return await storageOperations.list({
          where,
          sort: sort && sort.length ? sort : ["createdOn_DESC"],
          after,
          limit
        });
      } catch (ex) {
        throw new _error.default(ex.message || "Could not load the all the locales.", ex.code || "LOCALE_LIST_ERROR");
      }
    },
    create: async input => {
      const {
        security,
        tenancy
      } = context;
      const permission = await security.getPermission("i18n.locale");

      if (!permission) {
        throw new _apiSecurity.NotAuthorizedError();
      }

      const original = await storageOperations.get(input.code);

      if (original) {
        throw new _error.default(`Locale with key "${original.code}" already exists.`);
      }

      const identity = security.getIdentity();
      const defaultLocale = await storageOperations.getDefault();

      const locale = _objectSpread(_objectSpread({}, input), {}, {
        default: input.default === true,
        createdOn: new Date().toISOString(),
        createdBy: {
          id: identity.id,
          displayName: identity.displayName,
          type: identity.type
        },
        tenant: tenancy.getCurrentTenant().id,
        webinyVersion: context.WEBINY_VERSION
      });

      try {
        await (0, _lifecycleEvent.runLifecycleEvent)("beforeCreate", {
          context,
          plugins: localePlugins,
          data: locale
        });
        const result = await storageOperations.create({
          locale
        });

        if (locale.default) {
          await storageOperations.updateDefault({
            previous: defaultLocale,
            locale: result
          });
        }

        await (0, _lifecycleEvent.runLifecycleEvent)("afterCreate", {
          context,
          plugins: localePlugins,
          data: locale,
          locale: result
        });
        return locale;
      } catch (ex) {
        throw new _error.default(ex.message || "Could not create new locale.", ex.code || "LOCALE_CREATE_ERROR", {
          input,
          locale,
          defaultLocale
        });
      }
    },
    update: async (code, input) => {
      const {
        i18n,
        security
      } = context;
      const permission = await security.getPermission("i18n.locale");

      if (!permission) {
        throw new _apiSecurity.NotAuthorizedError();
      }

      const original = await i18n.locales.get(code);

      if (!original) {
        throw new _handlerGraphql.NotFoundError(`Locale "${code}" not found.`);
      }

      if (original.default && !input.default) {
        throw new _error.default("Cannot unset default locale, please set another locale as default first.", "CANNOT_CHANGE_DEFAULT_LOCALE", {
          original,
          input
        });
      }

      const defaultLocale = original.default ? original : await storageOperations.getDefault();

      if (!defaultLocale) {
        throw new _handlerGraphql.NotFoundError(`Missing default locale.`);
      }

      const locale = _objectSpread(_objectSpread(_objectSpread({}, original), input), {}, {
        createdOn: original.createdOn ? original.createdOn : new Date().toISOString(),
        webinyVersion: context.WEBINY_VERSION
      });

      try {
        await (0, _lifecycleEvent.runLifecycleEvent)("beforeUpdate", {
          context,
          plugins: localePlugins,
          original,
          data: locale
        });
        const result = await storageOperations.update({
          original,
          locale
        });

        if (locale.default && original.default !== locale.default) {
          await storageOperations.updateDefault({
            previous: defaultLocale,
            locale
          });
        }

        await (0, _lifecycleEvent.runLifecycleEvent)("afterUpdate", {
          context,
          plugins: localePlugins,
          data: locale,
          original,
          locale: result
        });
        return locale;
      } catch (ex) {
        throw new _error.default(ex.message || "Could not update existing locale.", ex.code || "LOCALE_UPDATE_ERROR", {
          original,
          input
        });
      }
    },
    delete: async code => {
      const {
        i18n,
        security
      } = context;
      const permission = await security.getPermission("i18n.locale");

      if (!permission) {
        throw new _apiSecurity.NotAuthorizedError();
      }

      const locale = await i18n.locales.get(code);

      if (!locale) {
        throw new _handlerGraphql.NotFoundError(`Locale "${code}" not found.`);
      }

      if (locale.default) {
        throw new _error.default("Cannot delete default locale, please set another locale as default first.");
      }

      const [allLocales] = await i18n.locales.list();

      if (allLocales.length === 1) {
        throw new _error.default("Cannot delete the last locale.");
      }

      try {
        await (0, _lifecycleEvent.runLifecycleEvent)("beforeDelete", {
          context,
          plugins: localePlugins,
          locale
        });
        await storageOperations.delete({
          locale
        });
        await (0, _lifecycleEvent.runLifecycleEvent)("afterDelete", {
          context,
          plugins: localePlugins,
          locale
        });
        return locale;
      } catch (ex) {
        throw new _error.default(ex.message || "Could not delete existing locale.", ex.code || "LOCALE_DELETE_ERROR", {
          locale
        });
      }
    }
  };
});

exports.default = _default;
//# sourceMappingURL=locales.crud.js.map