"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _ContextPlugin = require("@webiny/handler/plugins/ContextPlugin");

var _error = _interopRequireDefault(require("@webiny/error"));

var _SystemStorageOperationsProviderPlugin = require("../../plugins/SystemStorageOperationsProviderPlugin");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var _default = new _ContextPlugin.ContextPlugin(async context => {
  if (!context.i18n) {
    context.i18n = {};
  }

  const pluginType = _SystemStorageOperationsProviderPlugin.SystemStorageOperationsProviderPlugin.type;
  const providerPlugin = context.plugins.byType(pluginType).find(() => true);

  if (!providerPlugin) {
    throw new _error.default(`Missing "${pluginType}" plugin.`, "PLUGIN_NOT_FOUND", {
      type: pluginType
    });
  }

  const storageOperations = await providerPlugin.provide({
    context
  });
  context.i18n.system = {
    getVersion: async () => {
      const system = await storageOperations.get();
      return system ? system.version : null;
    },
    setVersion: async version => {
      const original = await storageOperations.get();

      const system = _objectSpread(_objectSpread({}, original || {}), {}, {
        version
      });

      if (original) {
        try {
          await storageOperations.update({
            original,
            system
          });
        } catch (ex) {
          throw new _error.default(ex.message || "Could not update the system.", ex.code || "SYSTEM_UPDATE_ERROR", {
            original,
            system
          });
        }

        return;
      }

      try {
        await storageOperations.create({
          system
        });
      } catch (ex) {
        throw new _error.default(ex.message || "Could not create the system.", ex.code || "SYSTEM_CREATE_ERROR", {
          version
        });
      }
    },
    install: async ({
      code
    }) => {
      const {
        i18n
      } = context;
      const version = await i18n.system.getVersion();

      if (version) {
        throw new _error.default("I18N is already installed.", "INSTALL_ERROR", {
          version
        });
      }

      await i18n.locales.create({
        code,
        default: true
      });
      await i18n.system.setVersion(context.WEBINY_VERSION);
    }
  };
});

exports.default = _default;
//# sourceMappingURL=system.crud.js.map