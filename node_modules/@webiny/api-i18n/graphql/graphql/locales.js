"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _responses = require("@webiny/handler-graphql/responses");

var _searchLocaleCodes = _interopRequireDefault(require("./resolvers/searchLocaleCodes"));

var _getI18NInformation = _interopRequireDefault(require("./resolvers/getI18NInformation"));

var _NotAuthorizedResponse = _interopRequireDefault(require("@webiny/api-security/NotAuthorizedResponse"));

var _handlerGraphql = require("@webiny/handler-graphql");

var _apiSecurity = require("@webiny/api-security");

const resolve = async fn => {
  try {
    return new _responses.Response(await fn());
  } catch (ex) {
    if (ex instanceof _handlerGraphql.NotFoundError) {
      return new _responses.NotFoundResponse(ex.message);
    } else if (ex instanceof _apiSecurity.NotAuthorizedError) {
      return new _NotAuthorizedResponse.default(ex);
    }

    return new _responses.ErrorResponse(ex);
  }
};

const plugin = {
  type: "graphql-schema",
  name: "graphql-schema-i18n-locales",
  schema: {
    typeDefs:
    /* GraphQL */
    `
            type I18NCreatedBy {
                id: ID
                displayName: String
                type: String
            }

            type I18NLocale {
                code: String
                default: Boolean
                createdOn: DateTime
                createdBy: I18NCreatedBy
            }

            input I18NLocaleInput {
                code: String
                default: Boolean
            }

            input I18NLocaleUpdateInput {
                default: Boolean!
            }

            type I18NLocaleResponse {
                data: I18NLocale
                error: I18NError
            }

            type I18NLocaleListResponse {
                data: [I18NLocale]
                meta: I18NListMeta
                error: I18NError
            }

            type SearchLocaleCodesResponse {
                data: [String]
            }

            type I18NInformationLocale {
                code: String
                default: Boolean
            }

            type I18NInformationCurrentLocale {
                context: String
                locale: String
            }

            type I18NInformationResponse {
                locales: [I18NInformationLocale]
                currentLocales: [I18NInformationCurrentLocale]
                defaultLocale: I18NInformationLocale
            }

            input I18NListLocalesWhere {
                code: String
                code_in: [String!]
                code_not_in: [String!]
                code_not: String
                default: Boolean
                createdBy: String
                createdOn: String
                createdOn_not: String
                createdOn_not_in: [String!]
                createdOn_lt: String
                createdOn_lte: String
                createdOn_gt: String
                createdOn_gte: String
            }

            enum I18NListLocalesSorter {
                code_ASC
                code_DESC
                createdOn_ASC
                createdOn_DESC
                createdBy_ASC
                createdBy_DESC
            }

            extend type I18NQuery {
                getI18NLocale(code: String!): I18NLocaleResponse
                listI18NLocales(
                    where: I18NListLocalesWhere
                    sort: I18NListLocalesSorter
                    limit: Int
                ): I18NLocaleListResponse
                getI18NInformation: I18NInformationResponse
                searchLocaleCodes(search: String): SearchLocaleCodesResponse
            }

            extend type I18NMutation {
                createI18NLocale(data: I18NLocaleInput!): I18NLocaleResponse
                updateI18NLocale(code: String!, data: I18NLocaleUpdateInput!): I18NLocaleResponse
                deleteI18NLocale(code: String!): I18NLocaleResponse
            }
        `,
    resolvers: {
      I18NQuery: {
        getI18NLocale: async (_, args, context) => {
          return resolve(() => context.i18n.locales.get(args.code));
        },
        listI18NLocales: async (_, args, context) => {
          try {
            const [items, meta] = await context.i18n.locales.list(args);
            return new _responses.ListResponse(items, meta);
          } catch (ex) {
            return new _responses.ErrorResponse(ex);
          }
        },
        searchLocaleCodes: _searchLocaleCodes.default,
        getI18NInformation: _getI18NInformation.default
      },
      I18NMutation: {
        createI18NLocale: async (_, args, context) => {
          return resolve(() => context.i18n.locales.create(args.data));
        },
        updateI18NLocale: async (_, args, context) => {
          return resolve(() => context.i18n.locales.update(args.code, args.data));
        },
        deleteI18NLocale: async (_, args, context) => {
          return resolve(() => context.i18n.locales.delete(args.code));
        }
      }
    }
  }
};
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=locales.js.map