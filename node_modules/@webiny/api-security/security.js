"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _minimatch = _interopRequireDefault(require("minimatch"));

var _SecurityIdentity = require("./SecurityIdentity");

var _AuthorizationPlugin = require("./plugins/AuthorizationPlugin");

var _AuthenticationPlugin = require("./plugins/AuthenticationPlugin");

var _default = () => [{
  type: "before-handler",

  async apply(context) {
    const authenticationPlugins = context.plugins.byType(_AuthenticationPlugin.AuthenticationPlugin.type);

    for (let i = 0; i < authenticationPlugins.length; i++) {
      const identity = await authenticationPlugins[i].authenticate(context);

      if (identity instanceof _SecurityIdentity.SecurityIdentity) {
        context.security.identity = identity;
        return;
      }
    }
  }

}, {
  type: "context",

  apply(context) {
    if (!context.security) {
      context.security = {};
    }

    Object.assign(context.security, {
      identity: null,

      getIdentity() {
        return context.security.identity;
      },

      async getPermission(permission) {
        const perms = await context.security.getPermissions();
        const exactMatch = perms.find(p => p.name === permission);

        if (exactMatch) {
          return exactMatch;
        } // Try matching using patterns


        const matchedPermission = perms.find(p => (0, _minimatch.default)(permission, p.name));

        if (matchedPermission) {
          return matchedPermission;
        }

        return null;
      },

      async getPermissions() {
        const authorizationPlugins = context.plugins.byType(_AuthorizationPlugin.AuthorizationPlugin.type);

        for (let i = 0; i < authorizationPlugins.length; i++) {
          const result = await authorizationPlugins[i].getPermissions(context);

          if (Array.isArray(result)) {
            return result;
          }
        } // Returning an empty array since not a single plugin returned any permissions.


        return [];
      },

      async hasFullAccess() {
        const permissions = await context.security.getPermissions();
        return permissions.some(permission => {
          return permission.name === "*";
        });
      }

    });
  }

}];

exports.default = _default;
//# sourceMappingURL=security.js.map