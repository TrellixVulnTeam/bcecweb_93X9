{"version":3,"sources":["../src/security.ts"],"names":["type","apply","context","authenticationPlugins","plugins","byType","AuthenticationPlugin","i","length","identity","authenticate","SecurityIdentity","security","Object","assign","getIdentity","getPermission","permission","perms","getPermissions","exactMatch","find","p","name","matchedPermission","authorizationPlugins","AuthorizationPlugin","result","Array","isArray","hasFullAccess","permissions","some"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAGA;;AACA;;eAEe,MAAwB,CACnC;AACIA,EAAAA,IAAI,EAAE,gBADV;;AAEI,QAAMC,KAAN,CAAYC,OAAZ,EAAqB;AACjB,UAAMC,qBAAqB,GAAGD,OAAO,CAACE,OAAR,CAAgBC,MAAhB,CAC1BC,2CAAqBN,IADK,CAA9B;;AAIA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,qBAAqB,CAACK,MAA1C,EAAkDD,CAAC,EAAnD,EAAuD;AACnD,YAAME,QAAQ,GAAG,MAAMN,qBAAqB,CAACI,CAAD,CAArB,CAAyBG,YAAzB,CAAsCR,OAAtC,CAAvB;;AACA,UAAIO,QAAQ,YAAYE,kCAAxB,EAA0C;AACrCT,QAAAA,OAAO,CAACU,QAAT,CAA0BH,QAA1B,GAAqCA,QAArC;AACA;AACH;AACJ;AACJ;;AAdL,CADmC,EAiBnC;AACIT,EAAAA,IAAI,EAAE,SADV;;AAEIC,EAAAA,KAAK,CAACC,OAAD,EAAU;AACX,QAAI,CAACA,OAAO,CAACU,QAAb,EAAuB;AACnBV,MAAAA,OAAO,CAACU,QAAR,GAAmB,EAAnB;AACH;;AAEDC,IAAAA,MAAM,CAACC,MAAP,CAAcZ,OAAO,CAACU,QAAtB,EAAgC;AAC5BH,MAAAA,QAAQ,EAAE,IADkB;;AAE5BM,MAAAA,WAAW,GAAG;AACV,eAAQb,OAAO,CAACU,QAAT,CAA0BH,QAAjC;AACH,OAJ2B;;AAK5B,YAAMO,aAAN,CAAoBC,UAApB,EAAoE;AAChE,cAAMC,KAAK,GAAG,MAAMhB,OAAO,CAACU,QAAR,CAAiBO,cAAjB,EAApB;AACA,cAAMC,UAAU,GAAGF,KAAK,CAACG,IAAN,CAAWC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAWN,UAA3B,CAAnB;;AACA,YAAIG,UAAJ,EAAgB;AACZ,iBAAOA,UAAP;AACH,SAL+D,CAOhE;;;AACA,cAAMI,iBAAiB,GAAGN,KAAK,CAACG,IAAN,CAAWC,CAAC,IAAI,wBAAUL,UAAV,EAAsBK,CAAC,CAACC,IAAxB,CAAhB,CAA1B;;AACA,YAAIC,iBAAJ,EAAuB;AACnB,iBAAOA,iBAAP;AACH;;AAED,eAAO,IAAP;AACH,OAnB2B;;AAoB5B,YAAML,cAAN,GAAsD;AAClD,cAAMM,oBAAoB,GAAGvB,OAAO,CAACE,OAAR,CAAgBC,MAAhB,CACzBqB,yCAAoB1B,IADK,CAA7B;;AAIA,aAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkB,oBAAoB,CAACjB,MAAzC,EAAiDD,CAAC,EAAlD,EAAsD;AAClD,gBAAMoB,MAAM,GAAG,MAAMF,oBAAoB,CAAClB,CAAD,CAApB,CAAwBY,cAAxB,CAAuCjB,OAAvC,CAArB;;AACA,cAAI0B,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAJ,EAA2B;AACvB,mBAAOA,MAAP;AACH;AACJ,SAViD,CAYlD;;;AACA,eAAO,EAAP;AACH,OAlC2B;;AAmC5B,YAAMG,aAAN,GAAwC;AACpC,cAAMC,WAAW,GACZ,MAAM7B,OAAO,CAACU,QAAR,CAAiBO,cAAjB,EADX;AAGA,eAAOY,WAAW,CAACC,IAAZ,CAAiBf,UAAU,IAAI;AAClC,iBAAOA,UAAU,CAACM,IAAX,KAAoB,GAA3B;AACH,SAFM,CAAP;AAGH;;AA1C2B,KAAhC;AA4CH;;AAnDL,CAjBmC,C","sourcesContent":["import minimatch from \"minimatch\";\nimport { BeforeHandlerPlugin, ContextPlugin } from \"@webiny/handler/types\";\nimport { SecurityIdentity } from \"./SecurityIdentity\";\nimport { SecurityContext, SecurityPermission } from \"./types\";\nimport { PluginCollection } from \"@webiny/plugins/types\";\nimport { AuthorizationPlugin } from \"./plugins/AuthorizationPlugin\";\nimport { AuthenticationPlugin } from \"./plugins/AuthenticationPlugin\";\n\nexport default (): PluginCollection => [\n    {\n        type: \"before-handler\",\n        async apply(context) {\n            const authenticationPlugins = context.plugins.byType<AuthenticationPlugin>(\n                AuthenticationPlugin.type\n            );\n\n            for (let i = 0; i < authenticationPlugins.length; i++) {\n                const identity = await authenticationPlugins[i].authenticate(context);\n                if (identity instanceof SecurityIdentity) {\n                    (context.security as any).identity = identity;\n                    return;\n                }\n            }\n        }\n    } as BeforeHandlerPlugin<SecurityContext>,\n    {\n        type: \"context\",\n        apply(context) {\n            if (!context.security) {\n                context.security = {} as any;\n            }\n\n            Object.assign(context.security, {\n                identity: null,\n                getIdentity() {\n                    return (context.security as any).identity;\n                },\n                async getPermission(permission): Promise<SecurityPermission | null> {\n                    const perms = await context.security.getPermissions();\n                    const exactMatch = perms.find(p => p.name === permission);\n                    if (exactMatch) {\n                        return exactMatch;\n                    }\n\n                    // Try matching using patterns\n                    const matchedPermission = perms.find(p => minimatch(permission, p.name));\n                    if (matchedPermission) {\n                        return matchedPermission;\n                    }\n\n                    return null;\n                },\n                async getPermissions(): Promise<SecurityPermission[]> {\n                    const authorizationPlugins = context.plugins.byType<AuthorizationPlugin>(\n                        AuthorizationPlugin.type\n                    );\n\n                    for (let i = 0; i < authorizationPlugins.length; i++) {\n                        const result = await authorizationPlugins[i].getPermissions(context);\n                        if (Array.isArray(result)) {\n                            return result;\n                        }\n                    }\n\n                    // Returning an empty array since not a single plugin returned any permissions.\n                    return [];\n                },\n                async hasFullAccess(): Promise<boolean> {\n                    const permissions =\n                        (await context.security.getPermissions()) as SecurityPermission[];\n\n                    return permissions.some(permission => {\n                        return permission.name === \"*\";\n                    });\n                }\n            });\n        }\n    } as ContextPlugin<SecurityContext>\n];\n"],"file":"security.js"}