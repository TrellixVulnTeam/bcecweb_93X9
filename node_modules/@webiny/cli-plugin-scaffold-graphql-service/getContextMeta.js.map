{"version":3,"sources":["../src/getContextMeta.ts"],"names":["typesTsPath","meta","i18n","security","project","Project","addSourceFileAtPath","source","getSourceFileOrThrow","contextInterface","getFirstDescendant","node","Node","isInterfaceDeclaration","getName","i18NContextImportDeclaration","isImportDeclaration","getModuleSpecifier","getText","Boolean","getImportClause","getNamedImports","find","item","i18nContextImportSpecifier","i18nContextIdentifier","getAliasNode","getExtends","securityContextImportDeclaration","securityContextImportSpecifier","securityContextIdentifier"],"mappings":";;;;;;;AAAA;;AAOA;AACA;AACe,kBAAUA,WAAV,EAAoC;AAC/C,QAAMC,IAAI,GAAG;AACTC,IAAAA,IAAI,EAAE,KADG;AAETC,IAAAA,QAAQ,EAAE;AAFD,GAAb;;AAKA,MAAIH,WAAJ,EAAiB;AACb,UAAMI,OAAO,GAAG,IAAIC,gBAAJ,EAAhB;AACAD,IAAAA,OAAO,CAACE,mBAAR,CAA4BN,WAA5B;AACA,UAAMO,MAAM,GAAGH,OAAO,CAACI,oBAAR,CAA6BR,WAA7B,CAAf,CAHa,CAKb;;AACA,UAAMS,gBAAgB,GAAGF,MAAM,CAACG,kBAAP,CACrBC,IAAI,IAAIC,cAAKC,sBAAL,CAA4BF,IAA5B,KAAqCA,IAAI,CAACG,OAAL,OAAmB,SAD3C,CAAzB;;AAIA,QAAIL,gBAAJ,EAAsB;AAClB;AACA,YAAMM,4BAA4B,GAAGR,MAAM,CAACG,kBAAP,CAA0BC,IAAI,IAAI;AACnE,eACIC,cAAKI,mBAAL,CAAyBL,IAAzB,KACAA,IAAI,CAACM,kBAAL,GAA0BC,OAA1B,OAAyC,0BADzC,IAEAC,OAAO,CACHR,IAAI,CACCS,eADL,GAEKC,eAFL,GAGKC,IAHL,CAGUC,IAAI,IAAIA,IAAI,CAACT,OAAL,OAAmB,aAHrC,CADG,CAHX;AAUH,OAXoC,CAArC;;AAaA,UAAIC,4BAAJ,EAAkC;AAC9B,cAAMS,0BAA0B,GAAGT,4BAA4B,CAC1DK,eAD8B,GAE9BC,eAF8B,GAG9BC,IAH8B,CAGzBC,IAAI,IAAIA,IAAI,CAACT,OAAL,OAAmB,aAHF,CAAnC;AAKA,YAAIW,qBAAqB,GAAGD,0BAA0B,CAACV,OAA3B,EAA5B;;AACA,YAAIU,0BAA0B,CAACE,YAA3B,EAAJ,EAA+C;AAC3CD,UAAAA,qBAAqB,GAAGD,0BAA0B,CAACE,YAA3B,GAA0CR,OAA1C,EAAxB;AACH;;AAEDjB,QAAAA,IAAI,CAACC,IAAL,GAAYiB,OAAO,CACfV,gBAAgB,CACXkB,UADL,GAEKL,IAFL,CAEUC,IAAI,IAAIA,IAAI,CAACL,OAAL,OAAmBO,qBAFrC,CADe,CAAnB;AAKH,OA/BiB,CAiClB;;;AACA,YAAMG,gCAAgC,GAAGrB,MAAM,CAACG,kBAAP,CAA0BC,IAAI,IAAI;AACvE,eACIC,cAAKI,mBAAL,CAAyBL,IAAzB,KACAA,IAAI,CAACM,kBAAL,GAA0BC,OAA1B,OAAyC,8BADzC,IAEAC,OAAO,CACHR,IAAI,CACCS,eADL,GAEKC,eAFL,GAGKC,IAHL,CAGUC,IAAI,IAAIA,IAAI,CAACT,OAAL,OAAmB,iBAHrC,CADG,CAHX;AAUH,OAXwC,CAAzC;;AAaA,UAAIc,gCAAJ,EAAsC;AAClC,cAAMC,8BAA8B,GAAGD,gCAAgC,CAClER,eADkC,GAElCC,eAFkC,GAGlCC,IAHkC,CAG7BC,IAAI,IAAIA,IAAI,CAACT,OAAL,OAAmB,iBAHE,CAAvC;AAKA,YAAIgB,yBAAyB,GAAGD,8BAA8B,CAACf,OAA/B,EAAhC;;AACA,YAAIe,8BAA8B,CAACH,YAA/B,EAAJ,EAAmD;AAC/CI,UAAAA,yBAAyB,GAAGD,8BAA8B,CACrDH,YADuB,GAEvBR,OAFuB,EAA5B;AAGH;;AAEDjB,QAAAA,IAAI,CAACE,QAAL,GAAgBgB,OAAO,CACnBV,gBAAgB,CACXkB,UADL,GAEKL,IAFL,CAEUC,IAAI,IAAIA,IAAI,CAACL,OAAL,OAAmBY,yBAFrC,CADmB,CAAvB;AAKH;AACJ;AACJ;;AAED,SAAO7B,IAAP;AACH","sourcesContent":["import { Project, InterfaceDeclaration, ImportDeclaration, Node } from \"ts-morph\";\n\ninterface ContextMeta {\n    i18n: boolean;\n    security: boolean;\n}\n\n// TODO: If needed, this could be improved by having this function simply return a list of everything\n// TODO: that's included. At the moment, it only tells us if Security and I18N contexts have been used.\nexport default function (typesTsPath): ContextMeta {\n    const meta = {\n        i18n: false,\n        security: false\n    };\n\n    if (typesTsPath) {\n        const project = new Project();\n        project.addSourceFileAtPath(typesTsPath);\n        const source = project.getSourceFileOrThrow(typesTsPath);\n\n        // 1. Get Context interface.\n        const contextInterface = source.getFirstDescendant(\n            node => Node.isInterfaceDeclaration(node) && node.getName() === \"Context\"\n        ) as InterfaceDeclaration;\n\n        if (contextInterface) {\n            // 1. Check for I18NContext usage.\n            const i18NContextImportDeclaration = source.getFirstDescendant(node => {\n                return (\n                    Node.isImportDeclaration(node) &&\n                    node.getModuleSpecifier().getText() === `\"@webiny/api-i18n/types\"` &&\n                    Boolean(\n                        node\n                            .getImportClause()\n                            .getNamedImports()\n                            .find(item => item.getName() === \"I18NContext\")\n                    )\n                );\n            }) as ImportDeclaration;\n\n            if (i18NContextImportDeclaration) {\n                const i18nContextImportSpecifier = i18NContextImportDeclaration\n                    .getImportClause()\n                    .getNamedImports()\n                    .find(item => item.getName() === \"I18NContext\");\n\n                let i18nContextIdentifier = i18nContextImportSpecifier.getName();\n                if (i18nContextImportSpecifier.getAliasNode()) {\n                    i18nContextIdentifier = i18nContextImportSpecifier.getAliasNode().getText();\n                }\n\n                meta.i18n = Boolean(\n                    contextInterface\n                        .getExtends()\n                        .find(item => item.getText() === i18nContextIdentifier)\n                );\n            }\n\n            // 2. Check for SecurityContext usage.\n            const securityContextImportDeclaration = source.getFirstDescendant(node => {\n                return (\n                    Node.isImportDeclaration(node) &&\n                    node.getModuleSpecifier().getText() === `\"@webiny/api-security/types\"` &&\n                    Boolean(\n                        node\n                            .getImportClause()\n                            .getNamedImports()\n                            .find(item => item.getName() === \"SecurityContext\")\n                    )\n                );\n            }) as ImportDeclaration;\n\n            if (securityContextImportDeclaration) {\n                const securityContextImportSpecifier = securityContextImportDeclaration\n                    .getImportClause()\n                    .getNamedImports()\n                    .find(item => item.getName() === \"SecurityContext\");\n\n                let securityContextIdentifier = securityContextImportSpecifier.getName();\n                if (securityContextImportSpecifier.getAliasNode()) {\n                    securityContextIdentifier = securityContextImportSpecifier\n                        .getAliasNode()\n                        .getText();\n                }\n\n                meta.security = Boolean(\n                    contextInterface\n                        .getExtends()\n                        .find(item => item.getText() === securityContextIdentifier)\n                );\n            }\n        }\n    }\n\n    return meta;\n}\n"],"file":"getContextMeta.js"}