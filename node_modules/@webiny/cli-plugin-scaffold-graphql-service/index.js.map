{"version":3,"sources":["../src/index.ts"],"names":["ncp","util","promisify","ncpBase","SCAFFOLD_DOCS_LINK","name","type","scaffold","description","link","isSupported","questions","context","message","default","localStorage","get","LAST_USED_GQL_API_PLUGINS_PATH","validate","pluginsFolderPath","length","chalk","cyan","dataModelName","answers","match","pluralizedCamelCasedDataModelName","Case","camel","newCodePath","path","resolve","join","fs","existsSync","relativePath","relative","project","root","red","generate","input","ora","inquirer","wait","set","plural","singular","pluralize","scaffoldsPath","scaffoldsIndexPath","packageJsonPath","findUp","sync","cwd","templateFolderPath","__dirname","dependenciesUpdates","packageJson","devDependencies","push","showConfirmation","console","log","bold","green","prompt","createPromptModule","proceed","process","exit","start","mkdirSync","recursive","typesTsPath","meta","i18n","codeReplacements","find","replaceWith","security","RegExp","pascal","constant","fileNameReplacements","fileNameReplacement","renameSync","stopAndPersist","symbol","text","importName","importPath","forEach","version","dirname","onSuccess","links","url","fallback"],"mappings":"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","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport util from \"util\";\nimport ncpBase from \"ncp\";\nimport pluralize from \"pluralize\";\nimport Case from \"case\";\nimport { replaceInPath } from \"replace-in-path\";\nimport loadJsonFile from \"load-json-file\";\nimport writeJsonFile from \"write-json-file\";\nimport chalk from \"chalk\";\nimport { CliCommandScaffoldTemplate } from \"@webiny/cli-plugin-scaffold/types\";\nimport findUp from \"find-up\";\nimport execa from \"execa\";\nimport link from \"terminal-link\";\nimport {\n    createScaffoldsIndexFile,\n    updateScaffoldsIndexFile,\n    formatCode,\n    LAST_USED_GQL_API_PLUGINS_PATH\n} from \"@webiny/cli-plugin-scaffold/utils\";\nimport getContextMeta from \"./getContextMeta\";\n\nconst ncp = util.promisify(ncpBase.ncp);\n\ninterface Input {\n    pluginsFolderPath: string;\n    dataModelName: string;\n    showConfirmation?: boolean;\n}\n\nconst SCAFFOLD_DOCS_LINK =\n    \"https://www.webiny.com/docs/how-to-guides/scaffolding/extend-graphql-api\";\n\nexport default (): CliCommandScaffoldTemplate<Input> => ({\n    name: \"cli-plugin-scaffold-graphql\",\n    type: \"cli-plugin-scaffold-template\",\n    scaffold: {\n        name: \"Extend GraphQL API\",\n        description:\n            \"Extends your GraphQL API with new CRUD query and mutation operations.\" +\n            (link.isSupported ? \"\\n  \" + link(\"Learn more.\", SCAFFOLD_DOCS_LINK) : \"\"),\n        questions: ({ context }) => {\n            return [\n                {\n                    name: \"pluginsFolderPath\",\n                    message: \"Enter plugins folder path:\",\n                    default: () => {\n                        return (\n                            context.localStorage.get(LAST_USED_GQL_API_PLUGINS_PATH) ||\n                            `api/code/graphql/src/plugins`\n                        );\n                    },\n                    validate: pluginsFolderPath => {\n                        if (pluginsFolderPath.length < 2) {\n                            return `Please enter GraphQL API ${chalk.cyan(\"plugins\")} folder path.`;\n                        }\n\n                        return true;\n                    }\n                },\n                {\n                    name: \"dataModelName\",\n                    message: \"Enter initial entity name:\",\n                    default: \"Todo\",\n                    validate: (dataModelName, answers) => {\n                        if (!dataModelName.match(/^([a-zA-Z]+)$/)) {\n                            return \"A valid name must consist of letters only.\";\n                        }\n\n                        const pluralizedCamelCasedDataModelName = pluralize(\n                            Case.camel(dataModelName)\n                        );\n\n                        const newCodePath = path.resolve(\n                            path.join(\n                                answers.pluginsFolderPath,\n                                \"scaffolds\",\n                                pluralizedCamelCasedDataModelName\n                            )\n                        );\n\n                        if (fs.existsSync(newCodePath)) {\n                            const relativePath = path.relative(context.project.root, newCodePath);\n                            return `Cannot continue - the ${chalk.red(\n                                relativePath\n                            )} folder already exists.`;\n                        }\n\n                        return true;\n                    }\n                }\n            ];\n        },\n        generate: async ({ input, ora, inquirer, wait, context }) => {\n            context.localStorage.set(LAST_USED_GQL_API_PLUGINS_PATH, input.pluginsFolderPath);\n\n            // Store used input, so that maybe some of\n            const dataModelName = {\n                plural: pluralize(Case.camel(input.dataModelName)),\n                singular: pluralize.singular(Case.camel(input.dataModelName))\n            };\n\n            const scaffoldsPath = path.join(input.pluginsFolderPath, \"scaffolds\");\n            const scaffoldsIndexPath = path.join(scaffoldsPath, \"index.ts\");\n            const newCodePath = path.join(scaffoldsPath, Case.camel(dataModelName.plural));\n            const packageJsonPath = path.relative(\n                context.project.root,\n                findUp.sync(\"package.json\", { cwd: input.pluginsFolderPath })\n            );\n            const templateFolderPath = path.join(__dirname, \"template\");\n\n            // Get needed dependencies updates.\n            const dependenciesUpdates = [];\n            const packageJson = await loadJsonFile<Record<string, any>>(packageJsonPath);\n            if (!packageJson?.devDependencies?.[\"graphql-request\"]) {\n                dependenciesUpdates.push([\"devDependencies\", \"graphql-request\", \"^3.4.0\"]);\n            }\n\n            if (input.showConfirmation !== false) {\n                console.log();\n                console.log(\n                    `${chalk.bold(\"The following operations will be performed on your behalf:\")}`\n                );\n\n                console.log(`- new plugins will be created in ${chalk.green(newCodePath)}`);\n                console.log(\n                    `- created plugins will be imported in ${chalk.green(scaffoldsIndexPath)}`\n                );\n\n                if (dependenciesUpdates.length) {\n                    console.log(\n                        `- dependencies in ${chalk.green(packageJsonPath)} will be updated `\n                    );\n                }\n\n                const prompt = inquirer.createPromptModule();\n\n                const { proceed } = await prompt({\n                    name: \"proceed\",\n                    message: `Are you sure you want to continue?`,\n                    type: \"confirm\",\n                    default: false\n                });\n\n                if (!proceed) {\n                    process.exit(0);\n                }\n                console.log();\n            }\n\n            ora.start(`Creating new plugins in ${chalk.green(newCodePath)}...`);\n            await wait(1000);\n\n            fs.mkdirSync(newCodePath, { recursive: true });\n            await ncp(templateFolderPath, newCodePath);\n\n            // Remove I18N and Security-related code if the GraphQL API doesn't support those.\n            // Support is being detected via `Context` type, defined withing the root types.ts file.\n            const typesTsPath = findUp.sync(\"types.ts\", { cwd: input.pluginsFolderPath });\n            if (typesTsPath) {\n                const meta = getContextMeta(typesTsPath);\n                if (!meta.i18n) {\n                    // If I18NContext was not detected, comment out relevant I18N code.\n                    const codeReplacements = [\n                        {\n                            find: `const locale = this\\\\.context\\\\.i18nContent`,\n                            replaceWith: `// const locale = this.context.i18nContent`\n                        },\n                        {\n                            find: \"base = `L#\",\n                            replaceWith: \"// base = `L#;\"\n                        }\n                    ];\n\n                    replaceInPath(\n                        path.join(newCodePath, \"/resolvers/TargetDataModelsResolver.ts\"),\n                        codeReplacements\n                    );\n                }\n\n                if (!meta.security) {\n                    {\n                        // If I18NContext was not detected, comment out relevant I18N code.\n                        const codeReplacements = [\n                            {\n                                find: `import { SecurityIdentity } from`,\n                                replaceWith: `// import { SecurityIdentity } from`\n                            },\n                            {\n                                find: \"createdBy: Pick<SecurityIdentity\",\n                                replaceWith: \"// createdBy: Pick<SecurityIdentity\"\n                            }\n                        ];\n                        replaceInPath(path.join(newCodePath, \"/types.ts\"), codeReplacements);\n                    }\n\n                    {\n                        // If I18NContext was not detected, comment out relevant I18N code.\n                        const codeReplacements = [\n                            {\n                                find: `const { security } = this.context;`,\n                                replaceWith: `// const { security } = this.context;`\n                            },\n                            {\n                                find: \"const identity = await security.getIdentity\",\n                                replaceWith: \"// const identity = await security.getIdentity\"\n                            },\n                            {\n                                find: new RegExp(\"createdBy: identity.*},\", \"gms\"),\n                                replaceWith: \"/* $& */\"\n                            }\n                        ];\n\n                        replaceInPath(\n                            path.join(newCodePath, \"/resolvers/TargetDataModelsMutation.ts\"),\n                            codeReplacements\n                        );\n                    }\n                }\n            }\n\n            // Replace generic \"TargetDataModel\" with received \"dataModelName\" argument.\n            const codeReplacements = [\n                { find: \"targetDataModels\", replaceWith: Case.camel(dataModelName.plural) },\n                { find: \"TargetDataModels\", replaceWith: Case.pascal(dataModelName.plural) },\n                { find: \"TARGET_DATA_MODELS\", replaceWith: Case.constant(dataModelName.plural) },\n\n                { find: \"targetDataModel\", replaceWith: Case.camel(dataModelName.singular) },\n                { find: \"TargetDataModel\", replaceWith: Case.pascal(dataModelName.singular) },\n                { find: \"TARGET_DATA_MODEL\", replaceWith: Case.constant(dataModelName.singular) }\n            ];\n\n            replaceInPath(path.join(newCodePath, \"/**/*.ts\"), codeReplacements);\n\n            const fileNameReplacements = [\n                {\n                    find: \"__tests__/graphql/targetDataModels.ts\",\n                    replaceWith: `__tests__/graphql/${dataModelName.plural}.ts`\n                },\n                {\n                    find: \"/entities/TargetDataModel.ts\",\n                    replaceWith: `/entities/${Case.pascal(dataModelName.singular)}.ts`\n                },\n                {\n                    find: \"/resolvers/TargetDataModelsMutation.ts\",\n                    replaceWith: `/resolvers/${Case.pascal(dataModelName.plural)}Mutation.ts`\n                },\n                {\n                    find: \"/resolvers/TargetDataModelsQuery.ts\",\n                    replaceWith: `/resolvers/${Case.pascal(dataModelName.plural)}Query.ts`\n                },\n                {\n                    find: \"/resolvers/TargetDataModelsResolver.ts\",\n                    replaceWith: `/resolvers/${Case.pascal(dataModelName.plural)}Resolver.ts`\n                }\n            ];\n\n            for (const fileNameReplacement of fileNameReplacements) {\n                fs.renameSync(\n                    path.join(newCodePath, fileNameReplacement.find),\n                    path.join(newCodePath, fileNameReplacement.replaceWith)\n                );\n            }\n\n            ora.stopAndPersist({\n                symbol: chalk.green(\"✔\"),\n                text: `New plugins created in ${chalk.green(newCodePath)}.`\n            });\n\n            ora.start(`Importing created plugins in ${chalk.green(scaffoldsIndexPath)}.`);\n            await wait(1000);\n\n            createScaffoldsIndexFile(scaffoldsPath);\n            await updateScaffoldsIndexFile({\n                scaffoldsIndexPath,\n                importName: dataModelName.plural,\n                importPath: `./${dataModelName.plural}`\n            });\n\n            ora.stopAndPersist({\n                symbol: chalk.green(\"✔\"),\n                text: `Imported created plugins in ${chalk.green(scaffoldsIndexPath)}.`\n            });\n\n            if (dependenciesUpdates.length) {\n                ora.start(`Updating dependencies...`);\n                dependenciesUpdates.forEach(([type, name, version]) => {\n                    if (!packageJson[type]) {\n                        packageJson[type] = {};\n                    }\n\n                    packageJson[type][name] = version;\n                });\n\n                await writeJsonFile(packageJsonPath, packageJson);\n                await execa(\"yarn\", [], { cwd: path.dirname(packageJsonPath) });\n                ora.stopAndPersist({\n                    symbol: chalk.green(\"✔\"),\n                    text: `Dependencies updated.`\n                });\n            }\n\n            await formatCode(\"**/*.ts\", { cwd: newCodePath });\n            await formatCode(\"package.json\", { cwd: path.dirname(packageJsonPath) });\n        },\n        onSuccess: async () => {\n            console.log();\n            console.log(\n                `${chalk.green(\"✔\")} New GraphQL API plugins created and imported successfully.`\n            );\n            console.log();\n            console.log(chalk.bold(\"Next Steps\"));\n\n            console.log(\n                `‣ deploy the extended GraphQL API and continue developing by running the ${chalk.green(\n                    \"yarn webiny watch api/code/graphql --env {dev}\"\n                )} command`\n            );\n\n            console.log();\n            console.log(chalk.bold(\"Useful Links\"));\n\n            const links = [\n                [\"Extend GraphQL API\", SCAFFOLD_DOCS_LINK],\n                [\n                    \"Use the Watch Command\",\n                    \"https://www.webiny.com/docs/how-to-guides/use-watch-command\"\n                ]\n            ];\n\n            links.forEach(([text, url]) =>\n                console.log(\n                    link(\"‣ \" + text, url, { fallback: (text, link) => text + \" - \" + link })\n                )\n            );\n        }\n    }\n});\n"],"file":"index.js"}