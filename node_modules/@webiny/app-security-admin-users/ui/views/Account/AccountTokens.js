import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7;

import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useState, useCallback } from "react";
import { useApolloClient } from "@apollo/react-hooks";
import { set } from "dot-prop-immutable";
import { ButtonDefault, IconButton } from "@webiny/ui/Button";
import { Typography } from "@webiny/ui/Typography";
import styled from "@emotion/styled";
import { i18n } from "@webiny/app/i18n";
import { ListItemMeta, SimpleListItem } from "@webiny/ui/List";
import { ReactComponent as EditIcon } from "@svgr/webpack!../../../assets/icons/edit-24px.svg";
import { UpdateTokenDialog } from "./UpdateTokenDialog";
import { ReactComponent as DeleteIcon } from "@svgr/webpack!../../../assets/icons/delete-24px.svg";
import { DELETE_PAT, GET_CURRENT_USER } from "./graphql";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { CreateTokenDialog } from "./CreateTokenDialog";
import { useConfirmationDialog } from "@webiny/app-admin/hooks/useConfirmationDialog";
var t = i18n.ns("app-security/admin/personal-access-tokens");
var Header = /*#__PURE__*/styled("div", {
  target: "e1behhm20",
  label: "Header"
})({
  display: "flex",
  justifyContent: "space-between",
  marginBottom: 15
});

var TokensElement = function TokensElement(_ref) {
  var tokens = _ref.tokens;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      createToken = _useState2[0],
      setCreateToken = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      updateToken = _useState4[0],
      setUpdateToken = _useState4[1];

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var client = useApolloClient();

  var _useConfirmationDialo = useConfirmationDialog({
    title: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Delete token confirmation"]))),
    message: t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Are you sure you want to delete this token?"])))
  }),
      showConfirmation = _useConfirmationDialo.showConfirmation;

  var onClose = useCallback(function () {
    setCreateToken(false);
  }, []);

  var deleteToken = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(token) {
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              showConfirmation( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
                var queryResponse, error;
                return _regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return client.mutate({
                          mutation: DELETE_PAT,
                          variables: {
                            id: token.id
                          },
                          update: function update(cache) {
                            var data = cache.readQuery({
                              query: GET_CURRENT_USER
                            });
                            var tokens = data.security.user.data.personalAccessTokens.filter(function (item) {
                              return item.id !== token.id;
                            });
                            cache.writeQuery({
                              query: GET_CURRENT_USER,
                              data: set(data, "security.user.data.personalAccessTokens", tokens)
                            });
                          }
                        });

                      case 2:
                        queryResponse = _context.sent;
                        error = queryResponse.data.security.deletePAT.error;

                        if (!error) {
                          _context.next = 6;
                          break;
                        }

                        return _context.abrupt("return", showSnackbar(error.message, {
                          action: t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["Close"])))
                        }));

                      case 6:
                        showSnackbar(t(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Token deleted successfully!"]))));

                      case 7:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              })));

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function deleteToken(_x) {
      return _ref2.apply(this, arguments);
    };
  }();

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Typography, {
    style: {
      lineHeight: "2.4rem"
    },
    use: "overline"
  }, t(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["Tokens"])))), /*#__PURE__*/React.createElement(ButtonDefault, {
    onClick: function onClick() {
      return setCreateToken(true);
    }
  }, t(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["Create Token"]))))), /*#__PURE__*/React.createElement("div", {
    "data-testid": "pat-tokens-list"
  }, /*#__PURE__*/React.createElement(CreateTokenDialog, {
    open: createToken,
    onClose: onClose
  }), /*#__PURE__*/React.createElement(UpdateTokenDialog, {
    open: Boolean(updateToken),
    token: updateToken,
    onClose: function onClose() {
      return setUpdateToken(false);
    }
  }), Array.isArray(tokens) ? tokens.map(function (token) {
    return /*#__PURE__*/React.createElement(SimpleListItem, {
      "data-testid": "pat-tokens-list-item",
      key: token.id,
      text: /*#__PURE__*/React.createElement("div", {
        style: {
          paddingLeft: "16px"
        }
      }, token.name, " (********", token.token, ")")
    }, /*#__PURE__*/React.createElement(ListItemMeta, null, /*#__PURE__*/React.createElement(IconButton, {
      "data-testid": "update-personal-access-token",
      onClick: function onClick() {
        return setUpdateToken(token);
      },
      icon: /*#__PURE__*/React.createElement(EditIcon, null)
    }), /*#__PURE__*/React.createElement(IconButton, {
      "data-testid": "delete-personal-access-token",
      onClick: function onClick() {
        return deleteToken(token);
      },
      icon: /*#__PURE__*/React.createElement(DeleteIcon, null)
    })));
  }) : null, !Array.isArray(tokens) || tokens.length === 0 ? /*#__PURE__*/React.createElement(SimpleListItem, {
    text: t(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["You don't have any tokens yet."])))
  }) : null));
};

export default TokensElement;
//# sourceMappingURL=AccountTokens.js.map