import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import React from "react";
import styled from "@emotion/styled";
import { UIView } from "@webiny/app-admin/ui/UIView";
import { validation } from "@webiny/validation";
import { GenericElement } from "@webiny/app-admin/ui/elements/GenericElement";
import { AccordionElement } from "@webiny/app-admin/ui/elements/AccordionElement";
import { InputElement } from "@webiny/app-admin/ui/elements/form/InputElement";
import { ReactComponent as SecurityIcon } from "@svgr/webpack!../../../assets/icons/security-24px.svg";
import { ReactComponent as SettingsIcon } from "@svgr/webpack!../../../assets/icons/settings-24px.svg";
import AvatarImage from "../Components/AvatarImage";
import { GroupAutocompleteElement } from "../../elements/GroupAutocompleteElement";
import { useUserForm } from "./hooks/useUserForm";
import { FormView } from "@webiny/app-admin/ui/views/FormView";
var FormWrapper = /*#__PURE__*/styled("div", {
  target: "e42upss0",
  label: "FormWrapper"
})({
  margin: "0 100px"
});
var AvatarWrapper = /*#__PURE__*/styled("div", {
  target: "e42upss1",
  label: "AvatarWrapper"
})({
  margin: "24px 100px 32px"
});
export var UsersFormView = /*#__PURE__*/function (_UIView) {
  _inherits(UsersFormView, _UIView);

  var _super = _createSuper(UsersFormView);

  function UsersFormView() {
    var _this;

    _classCallCheck(this, UsersFormView);

    _this = _super.call(this, "UsersFormView");

    _this.useGrid(false);

    _this.addHookDefinition("userForm", useUserForm); // Setup default view


    _this.addElements(); // Apply plugins


    _this.applyPlugins(UsersFormView);

    return _this;
  }

  _createClass(UsersFormView, [{
    key: "getUserFormHook",
    value: function getUserFormHook() {
      return this.getHook("userForm");
    }
  }, {
    key: "submit",
    value: function submit(data, form) {
      this.dispatchEvent("onSubmit", {
        data: data,
        form: form
      });
      this.getUserFormHook().onSubmit(data);
    }
  }, {
    key: "onSubmit",
    value: function onSubmit(cb) {
      this.addEventListener("onSubmit", cb);
    }
  }, {
    key: "addElements",
    value: function addElements() {
      var _this2 = this;

      var simpleForm = this.addElement(new FormView("UsersForm", {
        isLoading: function isLoading() {
          return _this2.getUserFormHook().loading;
        },
        onSubmit: function onSubmit(data, form) {
          _this2.submit(data, form);
        },
        getTitle: function getTitle() {
          return _this2.getUserFormHook().fullName || "New User";
        },
        getFormData: function getFormData() {
          return _this2.getUserFormHook().user;
        },
        onCancel: function onCancel() {
          _this2.getUserFormHook().cancelEditing();
        }
      }));
      simpleForm.getSubmitButtonElement().setLabel("Save user");
      var avatar = new GenericElement("avatar", function (props) {
        var Bind = props.formProps.Bind;
        return /*#__PURE__*/React.createElement(AvatarWrapper, null, /*#__PURE__*/React.createElement(Bind, {
          name: "avatar"
        }, /*#__PURE__*/React.createElement(AvatarImage, {
          round: true
        })));
      });
      avatar.moveAbove(simpleForm.getFormContainer());
      var accordion = new AccordionElement("accordion", {
        items: [{
          id: "bio",
          title: "Bio",
          description: "Account information",
          icon: /*#__PURE__*/React.createElement(SettingsIcon, null),
          open: true
        }, {
          id: "groups",
          title: "Groups",
          description: "Assign to security group",
          icon: /*#__PURE__*/React.createElement(SecurityIcon, null),
          open: true
        }]
      });
      simpleForm.getFormContentElement().useGrid(false);
      simpleForm.getFormContentElement().addElement(accordion);
      var bioAccordion = accordion.getAccordionItemElement("bio");
      bioAccordion.addElement(new InputElement("firstName", {
        name: "firstName",
        label: "First Name",
        validators: function validators() {
          return validation.create("required");
        }
      }));
      bioAccordion.addElement(new InputElement("lastName", {
        name: "lastName",
        label: "Last Name",
        validators: function validators() {
          return validation.create("required");
        }
      }));
      bioAccordion.addElement(new InputElement("login", {
        name: "login",
        label: "Email",
        validators: function validators() {
          return validation.create("required,email");
        },
        beforeChange: function beforeChange(value, cb) {
          return cb(value.toLowerCase());
        }
      }));
      bioAccordion.getElement("login").setIsDisabled(function () {
        return _this2.getUserFormHook().user.login !== undefined;
      });
      var groupAccordion = accordion.getElement("groups");
      groupAccordion.addElement(new GroupAutocompleteElement("group", {
        name: "group",
        label: "Group",
        validators: function validators() {
          return validation.create("required");
        }
      }));
      this.wrapWith(function (_ref) {
        var children = _ref.children;
        return /*#__PURE__*/React.createElement(FormWrapper, null, children);
      });
    }
  }]);

  return UsersFormView;
}(UIView);
//# sourceMappingURL=UsersFormView.js.map