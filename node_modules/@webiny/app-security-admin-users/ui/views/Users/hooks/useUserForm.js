import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { useCallback } from "react";
import { useMutation, useQuery } from "@apollo/react-hooks";
import pick from "lodash/pick";
import isEmpty from "lodash/isEmpty";
import { useRouter } from "@webiny/react-router";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { CREATE_USER, LIST_USERS, READ_USER, UPDATE_USER } from "../graphql";

var pickDataForCreateOperation = function pickDataForCreateOperation(data) {
  return pick(data, ["login", "password", "firstName", "lastName", "avatar", "group"]);
};

var pickDataForUpdateOperation = function pickDataForUpdateOperation(data) {
  return pick(data, ["password", "firstName", "lastName", "avatar", "group"]);
};

export function useUserForm() {
  var _useRouter = useRouter(),
      location = _useRouter.location,
      history = _useRouter.history;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var query = new URLSearchParams(location.search);
  var newUser = query.get("new") === "true";
  var login = query.get("login");

  var _useQuery = useQuery(READ_USER, {
    variables: {
      login: login
    },
    skip: !login,
    onCompleted: function onCompleted(data) {
      if (!data) {
        return;
      }

      var error = data.security.user.error;

      if (error) {
        history.push("/security/users");
        showSnackbar(error.message);
      }
    }
  }),
      data = _useQuery.data,
      userLoading = _useQuery.loading;

  var _useMutation = useMutation(CREATE_USER, {
    refetchQueries: [{
      query: LIST_USERS
    }]
  }),
      _useMutation2 = _slicedToArray(_useMutation, 2),
      create = _useMutation2[0],
      createLoading = _useMutation2[1].loading;

  var _useMutation3 = useMutation(UPDATE_USER, {
    refetchQueries: [{
      query: LIST_USERS
    }]
  }),
      _useMutation4 = _slicedToArray(_useMutation3, 2),
      update = _useMutation4[0],
      updateLoading = _useMutation4[1].loading;

  var loading = userLoading || createLoading || updateLoading;
  var onSubmit = useCallback( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {
      var isUpdate, _ref2, _ref3, operation, args, result, _result$data$security, user, error;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              isUpdate = data.createdOn;
              _ref2 = isUpdate ? [update, {
                variables: {
                  login: data.login,
                  data: pickDataForUpdateOperation(data)
                }
              }] : [create, {
                variables: {
                  data: pickDataForCreateOperation(data)
                }
              }], _ref3 = _slicedToArray(_ref2, 2), operation = _ref3[0], args = _ref3[1];
              _context.next = 4;
              return operation(args);

            case 4:
              result = _context.sent;
              _result$data$security = result.data.security.user, user = _result$data$security.data, error = _result$data$security.error;

              if (!error) {
                _context.next = 8;
                break;
              }

              return _context.abrupt("return", showSnackbar(error.message));

            case 8:
              !isUpdate && history.push("/security/users?login=".concat(encodeURIComponent(user.login)));
              showSnackbar("User saved successfully.");

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }(), [login]);
  var user = userLoading ? {} : data ? data.security.user.data : {};
  var showEmptyView = !newUser && !userLoading && isEmpty(user);
  return {
    login: login,
    loading: loading,
    user: user,
    onSubmit: onSubmit,
    fullName: "".concat(user.firstName || "", " ").concat(user.lastName || "").trim(),
    showEmptyView: showEmptyView,
    createUser: function createUser() {
      history.push("/security/users?new=true");
    },
    cancelEditing: function cancelEditing() {
      history.push("/security/users");
    }
  };
}
//# sourceMappingURL=useUserForm.js.map