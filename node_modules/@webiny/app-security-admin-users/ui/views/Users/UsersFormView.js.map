{"version":3,"sources":["../../../../src/ui/views/Users/UsersFormView.tsx"],"names":["React","styled","UIView","validation","GenericElement","AccordionElement","InputElement","AvatarImage","GroupAutocompleteElement","useUserForm","FormView","FormWrapper","margin","AvatarWrapper","UsersFormView","useGrid","addHookDefinition","addElements","applyPlugins","getHook","data","form","dispatchEvent","getUserFormHook","onSubmit","cb","addEventListener","simpleForm","addElement","isLoading","loading","submit","getTitle","fullName","getFormData","user","onCancel","cancelEditing","getSubmitButtonElement","setLabel","avatar","props","Bind","formProps","moveAbove","getFormContainer","accordion","items","id","title","description","icon","open","getFormContentElement","bioAccordion","getAccordionItemElement","name","label","validators","create","beforeChange","value","toLowerCase","getElement","setIsDisabled","login","undefined","groupAccordion","wrapWith","children"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { UIView } from \"@webiny/app-admin/ui/UIView\";\nimport { Form } from \"@webiny/form\";\nimport { validation } from \"@webiny/validation\";\nimport { GenericElement } from \"@webiny/app-admin/ui/elements/GenericElement\";\nimport {\n    AccordionElement,\n    AccordionItemElement\n} from \"@webiny/app-admin/ui/elements/AccordionElement\";\nimport { InputElement } from \"@webiny/app-admin/ui/elements/form/InputElement\";\nimport { ReactComponent as SecurityIcon } from \"../../../assets/icons/security-24px.svg\";\nimport { ReactComponent as SettingsIcon } from \"~/assets/icons/settings-24px.svg\";\nimport AvatarImage from \"../Components/AvatarImage\";\nimport { GroupAutocompleteElement } from \"~/ui/elements/GroupAutocompleteElement\";\nimport { UseUserForm, useUserForm } from \"~/ui/views/Users/hooks/useUserForm\";\nimport { FormView } from \"@webiny/app-admin/ui/views/FormView\";\nimport { FormElementRenderProps } from \"@webiny/app-admin/ui/elements/form/FormElement\";\n\nconst FormWrapper = styled(\"div\")({\n    margin: \"0 100px\"\n});\n\nconst AvatarWrapper = styled(\"div\")({\n    margin: \"24px 100px 32px\"\n});\n\nexport class UsersFormView extends UIView {\n    constructor() {\n        super(\"UsersFormView\");\n\n        this.useGrid(false);\n        this.addHookDefinition(\"userForm\", useUserForm);\n\n        // Setup default view\n        this.addElements();\n\n        // Apply plugins\n        this.applyPlugins(UsersFormView);\n    }\n\n    getUserFormHook(): UseUserForm {\n        return this.getHook(\"userForm\");\n    }\n\n    submit(data: FormData, form?: Form) {\n        this.dispatchEvent(\"onSubmit\", { data, form });\n        this.getUserFormHook().onSubmit(data);\n    }\n\n    onSubmit(cb: (data: any, form: Form) => void) {\n        this.addEventListener(\"onSubmit\", cb);\n    }\n\n    private addElements() {\n        const simpleForm = this.addElement<FormView>(\n            new FormView(\"UsersForm\", {\n                isLoading: () => {\n                    return this.getUserFormHook().loading;\n                },\n                onSubmit: (data: FormData, form: Form) => {\n                    this.submit(data, form);\n                },\n                getTitle: () => {\n                    return this.getUserFormHook().fullName || \"New User\";\n                },\n                getFormData: () => {\n                    return this.getUserFormHook().user;\n                },\n                onCancel: () => {\n                    this.getUserFormHook().cancelEditing();\n                }\n            })\n        );\n\n        simpleForm.getSubmitButtonElement().setLabel(\"Save user\");\n\n        const avatar = new GenericElement<FormElementRenderProps>(\"avatar\", props => {\n            const { Bind } = props.formProps;\n\n            return (\n                <AvatarWrapper>\n                    <Bind name=\"avatar\">\n                        <AvatarImage round />\n                    </Bind>\n                </AvatarWrapper>\n            );\n        });\n\n        avatar.moveAbove(simpleForm.getFormContainer());\n\n        const accordion = new AccordionElement(\"accordion\", {\n            items: [\n                {\n                    id: \"bio\",\n                    title: \"Bio\",\n                    description: \"Account information\",\n                    icon: <SettingsIcon />,\n                    open: true\n                },\n                {\n                    id: \"groups\",\n                    title: \"Groups\",\n                    description: \"Assign to security group\",\n                    icon: <SecurityIcon />,\n                    open: true\n                }\n            ]\n        });\n\n        simpleForm.getFormContentElement().useGrid(false);\n        simpleForm.getFormContentElement().addElement(accordion);\n\n        const bioAccordion = accordion.getAccordionItemElement(\"bio\");\n        bioAccordion.addElement(\n            new InputElement(\"firstName\", {\n                name: \"firstName\",\n                label: \"First Name\",\n                validators: () => validation.create(\"required\")\n            })\n        );\n        bioAccordion.addElement(\n            new InputElement(\"lastName\", {\n                name: \"lastName\",\n                label: \"Last Name\",\n                validators: () => validation.create(\"required\")\n            })\n        );\n\n        bioAccordion.addElement(\n            new InputElement(\"login\", {\n                name: \"login\",\n                label: \"Email\",\n                validators: () => validation.create(\"required,email\"),\n                beforeChange: (value: string, cb) => cb(value.toLowerCase())\n            })\n        );\n\n        bioAccordion.getElement<InputElement>(\"login\").setIsDisabled(() => {\n            return this.getUserFormHook().user.login !== undefined;\n        });\n\n        const groupAccordion = accordion.getElement<AccordionItemElement>(\"groups\");\n        groupAccordion.addElement(\n            new GroupAutocompleteElement(\"group\", {\n                name: \"group\",\n                label: \"Group\",\n                validators: () => validation.create(\"required\")\n            })\n        );\n\n        this.wrapWith(({ children }) => <FormWrapper>{children}</FormWrapper>);\n    }\n}\n"],"file":"UsersFormView.js"}