import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
var _excluded = ["value"];

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17;

import React, { Fragment, useCallback, useMemo } from "react";
import { Grid, Cell } from "@webiny/ui/Grid";
import { Select } from "@webiny/ui/Select";
import { i18n } from "@webiny/app/i18n";
import { PermissionInfo, gridNoPaddingClass } from "@webiny/app-admin/components/Permissions";
import { Form } from "@webiny/form";
import { Elevation } from "@webiny/ui/Elevation";
import { Typography } from "@webiny/ui/Typography";
var t = i18n.ns("app-security-admin-users/plugins/permissionRenderer");
var SECURITY = "security";
var SECURITY_FULL_ACCESS = "".concat(SECURITY, ".*");
var SECURITY_GROUP_ACCESS = "".concat(SECURITY, ".group");
var SECURITY_USER_ACCESS = "".concat(SECURITY, ".user");
var SECURITY_API_KEY_ACCESS = "".concat(SECURITY, ".apiKey");
var FULL_ACCESS = "full";
var NO_ACCESS = "no";
var CUSTOM_ACCESS = "custom";
export var SecurityPermissions = function SecurityPermissions(_ref) {
  var value = _ref.value,
      onChange = _ref.onChange;
  var onFormChange = useCallback(function (data) {
    var newValue = [];

    if (Array.isArray(value)) {
      // Let's just filter out the `security*` permission objects, it's easier to build new ones from scratch.
      newValue = value.filter(function (item) {
        return !item.name.startsWith(SECURITY);
      });
    }

    var permissions = [];

    if (data.accessLevel === FULL_ACCESS) {
      permissions.push({
        name: SECURITY_FULL_ACCESS
      });
    } else if (data.accessLevel === CUSTOM_ACCESS) {
      if (data.userAccessScope === FULL_ACCESS) {
        permissions.push({
          name: SECURITY_USER_ACCESS
        });
      }

      if (data.groupAccessScope === FULL_ACCESS) {
        permissions.push({
          name: SECURITY_GROUP_ACCESS
        });
      }

      if (data.apiKeyAccessScope === FULL_ACCESS) {
        permissions.push({
          name: SECURITY_API_KEY_ACCESS
        });
      }
      /**
       * You can't create a user without a group assigned.
       * So in case "security.group" is "NO_ACCESS", we need to remove "security.user" from permission list.
       */


      if (data.groupAccessScope === NO_ACCESS && data.userAccessScope === FULL_ACCESS) {
        var index = permissions.findIndex(function (perm) {
          return perm.name === SECURITY_USER_ACCESS;
        });
        permissions.splice(index, 1);
      }
    }

    if (permissions && permissions.length) {
      var _newValue;

      (_newValue = newValue).push.apply(_newValue, permissions);
    }

    onChange(newValue);
  }, [value]);
  var formData = useMemo(function () {
    if (!Array.isArray(value)) {
      return {
        accessLevel: NO_ACCESS
      };
    }

    var hasFullAccess = value.find(function (item) {
      return item.name === SECURITY_FULL_ACCESS || item.name === "*";
    });

    if (hasFullAccess) {
      return {
        accessLevel: FULL_ACCESS
      };
    }

    var permissions = value.filter(function (item) {
      return item.name.startsWith(SECURITY);
    });

    if (permissions.length === 0) {
      return {
        accessLevel: NO_ACCESS
      };
    }

    var data = {
      accessLevel: CUSTOM_ACCESS,
      groupAccessScope: NO_ACCESS,
      userAccessScope: NO_ACCESS,
      apiKeyAccessScope: NO_ACCESS
    };
    var hasGroupAccess = permissions.find(function (item) {
      return item.name === SECURITY_GROUP_ACCESS;
    });

    if (hasGroupAccess) {
      data.groupAccessScope = FULL_ACCESS;
    }

    var hasUserAccess = permissions.find(function (item) {
      return item.name === SECURITY_USER_ACCESS;
    }); // "security.group" is required for "security.user".

    if (hasUserAccess && hasGroupAccess) {
      data.userAccessScope = FULL_ACCESS;
    }

    var hasApiKeyAccess = permissions.find(function (item) {
      return item.name === SECURITY_API_KEY_ACCESS;
    });

    if (hasApiKeyAccess) {
      data.apiKeyAccessScope = FULL_ACCESS;
    }

    return data;
  }, []);
  return /*#__PURE__*/React.createElement(Form, {
    data: formData,
    onChange: onFormChange
  }, function (_ref2) {
    var data = _ref2.data,
        Bind = _ref2.Bind;
    var disableUserAccessScope = data.groupAccessScope === NO_ACCESS;
    return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(Grid, {
      className: gridNoPaddingClass
    }, /*#__PURE__*/React.createElement(Cell, {
      span: 6
    }, /*#__PURE__*/React.createElement(PermissionInfo, {
      title: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Access Level"])))
    })), /*#__PURE__*/React.createElement(Cell, {
      span: 6
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "accessLevel"
    }, /*#__PURE__*/React.createElement(Select, {
      label: t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Access Level"])))
    }, /*#__PURE__*/React.createElement("option", {
      value: NO_ACCESS
    }, t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["No access"])))), /*#__PURE__*/React.createElement("option", {
      value: FULL_ACCESS
    }, t(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Full access"])))), /*#__PURE__*/React.createElement("option", {
      value: CUSTOM_ACCESS
    }, t(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["Custom access"])))))))), data.accessLevel === CUSTOM_ACCESS && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Elevation, {
      z: 1,
      style: {
        marginTop: 10
      }
    }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Typography, {
      use: "overline"
    }, t(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["API Keys"]))))), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "apiKeyAccessScope"
    }, /*#__PURE__*/React.createElement(Select, {
      label: t(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["Access Scope"])))
    }, /*#__PURE__*/React.createElement("option", {
      value: NO_ACCESS
    }, t(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["No access"])))), /*#__PURE__*/React.createElement("option", {
      value: FULL_ACCESS
    }, t(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["Full access"]))))))))), /*#__PURE__*/React.createElement(Elevation, {
      z: 1,
      style: {
        marginTop: 10
      }
    }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Typography, {
      use: "overline"
    }, t(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["Groups"]))))), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "groupAccessScope"
    }, /*#__PURE__*/React.createElement(Select, {
      label: t(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["Access Scope"])))
    }, /*#__PURE__*/React.createElement("option", {
      value: NO_ACCESS
    }, t(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["No access"])))), /*#__PURE__*/React.createElement("option", {
      value: FULL_ACCESS
    }, t(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["Full access"]))))))))), /*#__PURE__*/React.createElement(Elevation, {
      z: 1,
      style: {
        marginTop: 10
      }
    }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Typography, {
      use: "overline"
    }, t(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["Users"]))))), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "userAccessScope"
    }, function (_ref3) {
      var value = _ref3.value,
          props = _objectWithoutProperties(_ref3, _excluded);

      return /*#__PURE__*/React.createElement(Select, Object.assign({}, props, {
        label: t(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["Access Scope"]))),
        disabled: disableUserAccessScope,
        value: disableUserAccessScope ? NO_ACCESS : value
      }), /*#__PURE__*/React.createElement("option", {
        value: NO_ACCESS
      }, t(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["No access"])))), /*#__PURE__*/React.createElement("option", {
        value: FULL_ACCESS
      }, t(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["Full access"])))));
    }))))));
  });
};
//# sourceMappingURL=SecurityPermissions.js.map