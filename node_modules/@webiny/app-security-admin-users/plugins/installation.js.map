{"version":3,"sources":["../../src/plugins/installation.tsx"],"names":["gql","React","useState","useCallback","useApolloClient","Form","i18n","Alert","ButtonPrimary","Input","Checkbox","Grid","Cell","CircularProgress","validation","SimpleForm","SimpleFormHeader","SimpleFormFooter","SimpleFormContent","View","t","ns","IS_INSTALLED","INSTALL","Install","onInstalled","client","loading","setLoading","error","setError","onSubmit","subscribed","form","mutate","mutation","variables","data","res","security","install","fetch","encodeURIComponent","email","method","headers","privacyPolicyLink","Bind","submit","message","create","value","cb","toLowerCase","name","type","secure","title","getInstalledVersion","query","version","render"],"mappings":"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","sourcesContent":["import gql from \"graphql-tag\";\nimport React, { useState, useCallback } from \"react\";\nimport { useApolloClient } from \"@apollo/react-hooks\";\nimport { Form } from \"@webiny/form\";\nimport { i18n } from \"@webiny/app/i18n\";\nimport { Alert } from \"@webiny/ui/Alert\";\nimport { ButtonPrimary } from \"@webiny/ui/Button\";\nimport { Input } from \"@webiny/ui/Input\";\nimport { Checkbox } from \"@webiny/ui/Checkbox\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { CircularProgress } from \"@webiny/ui/Progress\";\nimport { validation } from \"@webiny/validation\";\nimport {\n    SimpleForm,\n    SimpleFormHeader,\n    SimpleFormFooter,\n    SimpleFormContent\n} from \"@webiny/app-admin/components/SimpleForm\";\nimport { View } from \"@webiny/app/components/View\";\n\nconst t = i18n.ns(\"app-security/admin/installation\");\n\nconst IS_INSTALLED = gql`\n    query IsSecurityInstalled {\n        security {\n            version\n        }\n    }\n`;\n\nconst INSTALL = gql`\n    mutation InstallSecurity($data: SecurityInstallInput!) {\n        security {\n            install(data: $data) {\n                data\n                error {\n                    code\n                    message\n                }\n            }\n        }\n    }\n`;\n\nconst Install = ({ onInstalled }) => {\n    const client = useApolloClient();\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const onSubmit = useCallback(async ({ subscribed, ...form }) => {\n        setLoading(true);\n        setError(null);\n\n        const { data: res } = await client.mutate({ mutation: INSTALL, variables: { data: form } });\n        setLoading(false);\n        const { error } = res.security.install;\n        if (error) {\n            setError(error);\n            return;\n        }\n\n        if (subscribed) {\n            try {\n                await fetch(\n                    \"https://app.mailerlite.com/webforms/submit/g9f1i1?fields%5Bemail%5D=\" +\n                        encodeURIComponent(form.email) +\n                        \"&ml-submit=1&ajax=1\",\n                    {\n                        method: \"GET\",\n                        headers: {\n                            \"Content-Type\": \"application/x-www-form-urlencoded\"\n                        }\n                    }\n                );\n            } catch (err) {\n                setError(\"Unable to subscribe you to the newsletter \" + err);\n            }\n        }\n\n        onInstalled();\n    }, []);\n\n    const privacyPolicyLink = <a href=\"https://www.webiny.com/privacy-policy\">privacy policy</a>;\n\n    return (\n        <Form onSubmit={onSubmit} submitOnEnter>\n            {({ data, Bind, submit }) => (\n                <SimpleForm>\n                    {loading && <CircularProgress />}\n                    <SimpleFormHeader title={\"Install Security\"} />\n                    <SimpleFormContent>\n                        <Grid>\n                            {error && (\n                                <Cell span={12}>\n                                    <Alert title={\"Something went wrong\"} type={\"danger\"}>\n                                        {error.message}\n                                    </Alert>\n                                </Cell>\n                            )}\n                            <Cell span={12}>Let&apos;s create your admin user:</Cell>\n                            <Cell span={12}>\n                                <Bind\n                                    name=\"firstName\"\n                                    validators={validation.create(\"required,minLength:2\")}\n                                >\n                                    <Input label={t`First Name`} />\n                                </Bind>\n                            </Cell>\n                            <Cell span={12}>\n                                <Bind\n                                    name=\"lastName\"\n                                    validators={validation.create(\"required,minLength:2\")}\n                                >\n                                    <Input label={t`Last Name`} />\n                                </Bind>\n                            </Cell>\n                            <Cell span={12}>\n                                <Bind\n                                    name=\"login\"\n                                    validators={validation.create(\"required,email\")}\n                                    beforeChange={(value: string, cb) => cb(value.toLowerCase())}\n                                >\n                                    <Input label={t`Email`} />\n                                </Bind>\n                            </Cell>\n                            <View name={\"security.installation.fields\"} props={{ Bind, data }} />\n                        </Grid>\n\n                        <Grid>\n                            <Cell span={12}>\n                                <Bind name=\"subscribed\">\n                                    <Checkbox\n                                        label={\n                                            <span>\n                                                I want to receive updates on product improvements\n                                                and new features. Doing so I accept Webiny&apos;s{\" \"}\n                                                {privacyPolicyLink}.\n                                            </span>\n                                        }\n                                    />\n                                </Bind>\n                            </Cell>\n                        </Grid>\n                    </SimpleFormContent>\n                    <SimpleFormFooter>\n                        <ButtonPrimary data-testid=\"install-security-button\" onClick={submit}>\n                            Install security\n                        </ButtonPrimary>\n                    </SimpleFormFooter>\n                </SimpleForm>\n            )}\n        </Form>\n    );\n};\n\nexport default [\n    {\n        name: \"admin-installation-security\",\n        type: \"admin-installation\",\n        secure: false,\n        title: \"Security\",\n        async getInstalledVersion({ client }) {\n            const { data } = await client.query({ query: IS_INSTALLED });\n            return data.security.version;\n        },\n        render({ onInstalled }) {\n            return <Install onInstalled={onInstalled} />;\n        }\n    }\n];\n"],"file":"installation.js"}