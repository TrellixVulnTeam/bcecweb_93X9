{"version":3,"sources":["../../src/plugins/TenantPlugin.ts"],"names":["TenantPlugin","Plugin","constructor","config","_config","beforeCreate","params","_execute","afterCreate","afterDelete","afterUpdate","beforeDelete","beforeUpdate","callback"],"mappings":";;;;;;;;;;;AAAA;;AAwCO,MAAMA,YAAN,SAGGC,eAHH,CAGU;AAIbC,EAAAA,WAAW,CAACC,MAAD,EAAmC;AAC1C;AAD0C;AAE1C,SAAKC,OAAL,GAAeD,MAAM,IAAI,EAAzB;AACH;;AAEDE,EAAAA,YAAY,CAACC,MAAD,EAAqD;AAC7D,WAAO,KAAKC,QAAL,CAAc,cAAd,EAA8BD,MAA9B,CAAP;AACH;;AAEDE,EAAAA,WAAW,CAACF,MAAD,EAAqD;AAC5D,WAAO,KAAKC,QAAL,CAAc,aAAd,EAA6BD,MAA7B,CAAP;AACH;;AAEDG,EAAAA,WAAW,CAACH,MAAD,EAAqD;AAC5D,WAAO,KAAKC,QAAL,CAAc,aAAd,EAA6BD,MAA7B,CAAP;AACH;;AAEDI,EAAAA,WAAW,CAACJ,MAAD,EAA0D;AACjE,WAAO,KAAKC,QAAL,CAAc,aAAd,EAA6BD,MAA7B,CAAP;AACH;;AAEDK,EAAAA,YAAY,CAACL,MAAD,EAAqD;AAC7D,WAAO,KAAKC,QAAL,CAAc,cAAd,EAA8BD,MAA9B,CAAP;AACH;;AAEDM,EAAAA,YAAY,CAACN,MAAD,EAA2D;AACnE,WAAO,KAAKC,QAAL,CAAc,cAAd,EAA8BD,MAA9B,CAAP;AACH;;AAEOC,EAAAA,QAAQ,CAACM,QAAD,EAAWP,MAAX,EAAmB;AAC/B,QAAI,OAAO,KAAKF,OAAL,CAAaS,QAAb,CAAP,KAAkC,UAAtC,EAAkD;AAC9C,aAAO,KAAKT,OAAL,CAAaS,QAAb,EAAuBP,MAAvB,CAAP;AACH;AACJ;;AArCY;;;8BAHJN,Y,UAIqB,gB","sourcesContent":["import { Plugin } from \"@webiny/plugins\";\nimport { TenancyContext, Tenant as BaseTenant } from \"../types\";\n\ntype PromiseVoid = void | Promise<void>;\n\nexport interface CreateParams<Tenant, Context> {\n    context: Context;\n    tenant: Tenant;\n}\n\nexport interface BeforeUpdateParams<Tenant, Context> {\n    context: Context;\n    tenant: Tenant;\n    inputData: Record<string, any>;\n    updateData: Partial<Tenant>;\n}\n\nexport interface AfterUpdateParams<Tenant, Context> {\n    context: Context;\n    tenant: Tenant;\n    inputData: Record<string, any>;\n}\n\nexport interface DeleteParams<Tenant, Context> {\n    context: Context;\n    tenant: Tenant;\n}\n\ninterface Config<\n    Tenant extends BaseTenant = BaseTenant,\n    Context extends TenancyContext = TenancyContext\n> {\n    beforeCreate?: (params: CreateParams<Tenant, Context>) => PromiseVoid;\n    afterCreate?: (params: CreateParams<Tenant, Context>) => PromiseVoid;\n    beforeUpdate?: (params: BeforeUpdateParams<Tenant, Context>) => PromiseVoid;\n    afterUpdate?: (params: AfterUpdateParams<Tenant, Context>) => PromiseVoid;\n    beforeDelete?: (params: DeleteParams<Tenant, Context>) => PromiseVoid;\n    afterDelete?: (params: DeleteParams<Tenant, Context>) => PromiseVoid;\n}\n\nexport class TenantPlugin<\n    Tenant extends BaseTenant = BaseTenant,\n    Context extends TenancyContext = TenancyContext\n> extends Plugin {\n    public static readonly type = \"tenancy.tenant\";\n    private readonly _config: Config<Tenant, Context>;\n\n    constructor(config?: Config<Tenant, Context>) {\n        super();\n        this._config = config || {};\n    }\n\n    beforeCreate(params: CreateParams<Tenant, Context>): PromiseVoid {\n        return this._execute(\"beforeCreate\", params);\n    }\n\n    afterCreate(params: CreateParams<Tenant, Context>): PromiseVoid {\n        return this._execute(\"afterCreate\", params);\n    }\n\n    afterDelete(params: DeleteParams<Tenant, Context>): PromiseVoid {\n        return this._execute(\"afterDelete\", params);\n    }\n\n    afterUpdate(params: AfterUpdateParams<Tenant, Context>): PromiseVoid {\n        return this._execute(\"afterUpdate\", params);\n    }\n\n    beforeDelete(params: DeleteParams<Tenant, Context>): PromiseVoid {\n        return this._execute(\"beforeDelete\", params);\n    }\n\n    beforeUpdate(params: BeforeUpdateParams<Tenant, Context>): PromiseVoid {\n        return this._execute(\"beforeUpdate\", params);\n    }\n\n    private _execute(callback, params) {\n        if (typeof this._config[callback] === \"function\") {\n            return this._config[callback](params);\n        }\n    }\n}\n"],"file":"TenantPlugin.js"}