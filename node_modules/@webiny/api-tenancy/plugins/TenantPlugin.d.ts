import { Plugin } from "@webiny/plugins";
import { TenancyContext, Tenant as BaseTenant } from "../types";
declare type PromiseVoid = void | Promise<void>;
export interface CreateParams<Tenant, Context> {
    context: Context;
    tenant: Tenant;
}
export interface BeforeUpdateParams<Tenant, Context> {
    context: Context;
    tenant: Tenant;
    inputData: Record<string, any>;
    updateData: Partial<Tenant>;
}
export interface AfterUpdateParams<Tenant, Context> {
    context: Context;
    tenant: Tenant;
    inputData: Record<string, any>;
}
export interface DeleteParams<Tenant, Context> {
    context: Context;
    tenant: Tenant;
}
interface Config<Tenant extends BaseTenant = BaseTenant, Context extends TenancyContext = TenancyContext> {
    beforeCreate?: (params: CreateParams<Tenant, Context>) => PromiseVoid;
    afterCreate?: (params: CreateParams<Tenant, Context>) => PromiseVoid;
    beforeUpdate?: (params: BeforeUpdateParams<Tenant, Context>) => PromiseVoid;
    afterUpdate?: (params: AfterUpdateParams<Tenant, Context>) => PromiseVoid;
    beforeDelete?: (params: DeleteParams<Tenant, Context>) => PromiseVoid;
    afterDelete?: (params: DeleteParams<Tenant, Context>) => PromiseVoid;
}
export declare class TenantPlugin<Tenant extends BaseTenant = BaseTenant, Context extends TenancyContext = TenancyContext> extends Plugin {
    static readonly type = "tenancy.tenant";
    private readonly _config;
    constructor(config?: Config<Tenant, Context>);
    beforeCreate(params: CreateParams<Tenant, Context>): PromiseVoid;
    afterCreate(params: CreateParams<Tenant, Context>): PromiseVoid;
    afterDelete(params: DeleteParams<Tenant, Context>): PromiseVoid;
    afterUpdate(params: AfterUpdateParams<Tenant, Context>): PromiseVoid;
    beforeDelete(params: DeleteParams<Tenant, Context>): PromiseVoid;
    beforeUpdate(params: BeforeUpdateParams<Tenant, Context>): PromiseVoid;
    private _execute;
}
export {};
