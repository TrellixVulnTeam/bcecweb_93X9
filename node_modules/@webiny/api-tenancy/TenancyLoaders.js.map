{"version":3,"sources":["../src/TenancyLoaders.ts"],"names":["TenancyLoaders","constructor","context","Map","_context","getTenant","_loaders","get","set","DataLoader","_getTenant","bind","ids","length","batch","db","i","read","dbArgs","query","PK","SK","results","execute","map","response"],"mappings":";;;;;;;;;;;AAAA;;AAGA;;;;;;AAEO,MAAMA,cAAN,CAAqB;AAIxBC,EAAAA,WAAW,CAACC,OAAD,EAAqB;AAAA,oDAHJ,IAAIC,GAAJ,EAGI;AAAA;AAC5B,SAAKC,QAAL,GAAgBF,OAAhB;AACH;;AAEY,MAATG,SAAS,GAAG;AACZ,QAAI,CAAC,KAAKC,QAAL,CAAcC,GAAd,CAAkB,WAAlB,CAAL,EAAqC;AACjC,WAAKD,QAAL,CAAcE,GAAd,CACI,WADJ,EAEI,IAAIC,mBAAJ,CAA+B,KAAKC,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAA/B,CAFJ;AAIH;;AACD,WAAO,KAAKL,QAAL,CAAcC,GAAd,CAAkB,WAAlB,CAAP;AACH;;AAEuB,QAAVG,UAAU,CAACE,GAAD,EAAM;AAC1B,QAAIA,GAAG,CAACC,MAAJ,KAAe,CAAnB,EAAsB;AAClB,aAAO,EAAP;AACH;;AAED,UAAMC,KAAK,GAAG,KAAKV,QAAL,CAAcW,EAAd,CAAiBD,KAAjB,EAAd;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAAG,CAACC,MAAxB,EAAgCG,CAAC,EAAjC,EAAqC;AACjCF,MAAAA,KAAK,CAACG,IAAN,iCACOC,cADP;AAEIC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,EAAE,EAAG,KAAIR,GAAG,CAACI,CAAD,CAAI,EAAlB;AAAqBK,UAAAA,EAAE,EAAE;AAAzB;AAFX;AAIH;;AAED,UAAMC,OAAO,GAAG,MAAMR,KAAK,CAACS,OAAN,EAAtB;AACA,WAAOD,OAAO,CAACE,GAAR,CAAY,CAAC,CAACC,QAAD,CAAD,KAAgBA,QAAQ,CAAC,CAAD,CAApC,CAAP;AACH;;AAjCuB","sourcesContent":["import DataLoader from \"dataloader\";\nimport { Tenant } from \"./types\";\nimport { DbContext } from \"@webiny/handler-db/types\";\nimport { dbArgs } from \"./dbArgs\";\n\nexport class TenancyLoaders {\n    private readonly _loaders = new Map<string, DataLoader<any, any>>();\n    private _context: DbContext;\n\n    constructor(context: DbContext) {\n        this._context = context;\n    }\n\n    get getTenant() {\n        if (!this._loaders.get(\"getTenant\")) {\n            this._loaders.set(\n                \"getTenant\",\n                new DataLoader<string, Tenant>(this._getTenant.bind(this))\n            );\n        }\n        return this._loaders.get(\"getTenant\");\n    }\n\n    private async _getTenant(ids) {\n        if (ids.length === 0) {\n            return [];\n        }\n\n        const batch = this._context.db.batch();\n        for (let i = 0; i < ids.length; i++) {\n            batch.read({\n                ...dbArgs,\n                query: { PK: `T#${ids[i]}`, SK: \"A\" }\n            });\n        }\n\n        const results = await batch.execute();\n        return results.map(([response]) => response[0]);\n    }\n}\n"],"file":"TenancyLoaders.js"}