"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TenancyLoaders = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _dataloader = _interopRequireDefault(require("dataloader"));

var _dbArgs = require("./dbArgs");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

class TenancyLoaders {
  constructor(context) {
    (0, _defineProperty2.default)(this, "_loaders", new Map());
    (0, _defineProperty2.default)(this, "_context", void 0);
    this._context = context;
  }

  get getTenant() {
    if (!this._loaders.get("getTenant")) {
      this._loaders.set("getTenant", new _dataloader.default(this._getTenant.bind(this)));
    }

    return this._loaders.get("getTenant");
  }

  async _getTenant(ids) {
    if (ids.length === 0) {
      return [];
    }

    const batch = this._context.db.batch();

    for (let i = 0; i < ids.length; i++) {
      batch.read(_objectSpread(_objectSpread({}, _dbArgs.dbArgs), {}, {
        query: {
          PK: `T#${ids[i]}`,
          SK: "A"
        }
      }));
    }

    const results = await batch.execute();
    return results.map(([response]) => response[0]);
  }

}

exports.TenancyLoaders = TenancyLoaders;
//# sourceMappingURL=TenancyLoaders.js.map