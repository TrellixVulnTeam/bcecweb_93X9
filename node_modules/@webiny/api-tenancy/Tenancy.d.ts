import { TenancyContext, Tenant } from "./types";
import { TenantPlugin } from "./plugins/TenantPlugin";
interface CreateTenantInput {
    id?: string;
    name: string;
    parent?: string | null;
}
interface UpdateTenantInput {
    name: string;
}
interface ITenancy {
    init(): Promise<void>;
    getRootTenant(): Promise<Tenant>;
    getCurrentTenant<TTenant extends Tenant = Tenant>(): TTenant;
    getTenantById<TTenant extends Tenant = Tenant>(id: string): Promise<TTenant>;
    setCurrentTenant(tenant: Tenant): void;
    listTenants<TTenant extends Tenant = Tenant>(params: {
        parent: string;
    }): Promise<TTenant[]>;
    createTenant<TTenant extends Tenant = Tenant>(data: CreateTenantInput): Promise<TTenant>;
    updateTenant(id: string, data: UpdateTenantInput): Promise<boolean>;
    deleteTenant(id: string): Promise<boolean>;
}
export declare class Tenancy implements ITenancy {
    private _context;
    private _currentTenant;
    private _loaders;
    constructor(context: TenancyContext);
    get plugins(): TenantPlugin<Tenant, TenancyContext>[];
    init(): Promise<void>;
    getRootTenant(): Promise<any>;
    getCurrentTenant<TTenant extends Tenant = Tenant>(): TTenant;
    /**
     * Get tenant by ID
     * @param id
     */
    getTenantById<TTenant extends Tenant = Tenant>(id: string): Promise<TTenant>;
    setCurrentTenant(tenant: Tenant): void;
    listTenants<TTenant extends Tenant = Tenant>({ parent }: {
        parent: any;
    }): Promise<TTenant[]>;
    createTenant(data: any): Promise<any>;
    updateTenant(id: any, data: any): Promise<boolean>;
    deleteTenant(id: string): Promise<boolean>;
    private determineCurrentTenant;
    private executeCallback;
}
export {};
