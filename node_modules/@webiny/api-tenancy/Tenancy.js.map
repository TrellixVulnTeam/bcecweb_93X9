{"version":3,"sources":["../src/Tenancy.ts"],"names":["tenantCache","Tenancy","constructor","context","_context","_loaders","TenancyLoaders","plugins","byType","TenantPlugin","type","init","determineCurrentTenant","getRootTenant","getTenant","load","getCurrentTenant","_currentTenant","getTenantById","id","setCurrentTenant","tenant","listTenants","parent","tenants","db","read","dbArgs","query","GSI1_PK","GSI1_SK","$beginsWith","sort","SK","createTenant","data","executeCallback","create","PK","TYPE","undefined","updateTenant","inputData","updateData","update","deleteTenant","delete","headers","http","request","tenantId","callback","params","plugin"],"mappings":"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","sourcesContent":["import mdbid from \"mdbid\";\nimport { TenancyContext, Tenant } from \"./types\";\nimport { TenantPlugin } from \"./plugins/TenantPlugin\";\nimport { TenancyLoaders } from \"./TenancyLoaders\";\nimport { dbArgs } from \"./dbArgs\";\n\nconst tenantCache = {};\n\ninterface CreateTenantInput {\n    id?: string;\n    name: string;\n    parent?: string | null;\n}\n\ninterface UpdateTenantInput {\n    name: string;\n}\n\ninterface ITenancy {\n    init(): Promise<void>;\n    getRootTenant(): Promise<Tenant>;\n    getCurrentTenant<TTenant extends Tenant = Tenant>(): TTenant;\n    getTenantById<TTenant extends Tenant = Tenant>(id: string): Promise<TTenant>;\n    setCurrentTenant(tenant: Tenant): void;\n    listTenants<TTenant extends Tenant = Tenant>(params: { parent: string }): Promise<TTenant[]>;\n    createTenant<TTenant extends Tenant = Tenant>(data: CreateTenantInput): Promise<TTenant>;\n    updateTenant(id: string, data: UpdateTenantInput): Promise<boolean>;\n    deleteTenant(id: string): Promise<boolean>;\n}\n\nexport class Tenancy implements ITenancy {\n    private _context: TenancyContext;\n    private _currentTenant: Tenant;\n    private _loaders: TenancyLoaders;\n\n    constructor(context: TenancyContext) {\n        this._context = context;\n        this._loaders = new TenancyLoaders(context);\n    }\n\n    get plugins() {\n        return this._context.plugins.byType<TenantPlugin>(TenantPlugin.type);\n    }\n\n    async init() {\n        await this.determineCurrentTenant();\n    }\n\n    async getRootTenant() {\n        return this._loaders.getTenant.load(\"root\");\n    }\n\n    getCurrentTenant<TTenant extends Tenant = Tenant>(): TTenant {\n        return this._currentTenant as TTenant;\n    }\n\n    /**\n     * Get tenant by ID\n     * @param id\n     */\n    getTenantById<TTenant extends Tenant = Tenant>(id: string): Promise<TTenant> {\n        return this._loaders.getTenant.load(id);\n    }\n    setCurrentTenant(tenant: Tenant) {\n        this._currentTenant = tenant;\n    }\n\n    async listTenants<TTenant extends Tenant = Tenant>({ parent }): Promise<TTenant[]> {\n        const [tenants] = await this._context.db.read<TTenant>({\n            ...dbArgs,\n            query: { GSI1_PK: `T#${parent}`, GSI1_SK: { $beginsWith: \"T#\" } },\n            sort: { SK: -1 }\n        });\n\n        return tenants;\n    }\n\n    async createTenant(data) {\n        const tenant = {\n            ...data,\n            id: data.id ?? mdbid()\n        };\n\n        await this.executeCallback<TenantPlugin[\"beforeCreate\"]>(\"beforeCreate\", {\n            tenant,\n            context: this._context\n        });\n\n        await this._context.db.create({\n            ...dbArgs,\n            data: {\n                PK: `T#${tenant.id}`,\n                SK: \"A\",\n                TYPE: \"security.tenant\",\n                GSI1_PK: data.parent ? `T#${data.parent}` : undefined,\n                GSI1_SK: data.parent ? `T#${tenant.id}` : undefined,\n                ...tenant\n            }\n        });\n\n        await this.executeCallback<TenantPlugin[\"afterCreate\"]>(\"afterCreate\", {\n            tenant,\n            context: this._context\n        });\n\n        return tenant;\n    }\n    async updateTenant(id, data) {\n        const [[tenant]] = await this._context.db.read<Tenant>({\n            ...dbArgs,\n            query: { PK: `T#${id}`, SK: \"A\" }\n        });\n\n        await this.executeCallback<TenantPlugin[\"beforeUpdate\"]>(\"beforeUpdate\", {\n            inputData: data,\n            updateData: { ...data },\n            tenant,\n            context: this._context\n        });\n\n        await this._context.db.update({\n            ...dbArgs,\n            query: { PK: `T#${id}`, SK: \"A\" },\n            data\n        });\n\n        await this.executeCallback<TenantPlugin[\"afterUpdate\"]>(\"afterUpdate\", {\n            inputData: data,\n            tenant,\n            context: this._context\n        });\n\n        return true;\n    }\n    async deleteTenant(id: string) {\n        const [[tenant]] = await this._context.db.read<Tenant>({\n            ...dbArgs,\n            query: { PK: `T#${id}`, SK: \"A\" }\n        });\n\n        await this.executeCallback<TenantPlugin[\"beforeDelete\"]>(\"beforeDelete\", {\n            tenant,\n            context: this._context\n        });\n\n        await this._context.db.delete({\n            ...dbArgs,\n            query: { PK: `T#${id}`, SK: \"A\" }\n        });\n\n        await this.executeCallback<TenantPlugin[\"afterDelete\"]>(\"afterDelete\", {\n            tenant,\n            context: this._context\n        });\n\n        return true;\n    }\n\n    private async determineCurrentTenant() {\n        const { headers = {} } = this._context.http.request;\n\n        let tenantId = headers[\"X-Tenant\"] || headers[\"x-tenant\"];\n        if (!tenantId) {\n            tenantId = \"root\";\n        }\n\n        if (!tenantCache[tenantId]) {\n            const tenant = await this.getTenantById(tenantId);\n            if (tenant) {\n                tenantCache[tenantId] = tenant;\n            }\n        }\n\n        this.setCurrentTenant(tenantCache[tenantId]);\n    }\n\n    private async executeCallback<TCallbackFunction extends (params: any) => void | Promise<void>>(\n        callback: string,\n        params: Parameters<TCallbackFunction>[0]\n    ) {\n        for (const plugin of this.plugins) {\n            if (typeof plugin[callback] === \"function\") {\n                await plugin[callback](params);\n            }\n        }\n    }\n}\n"],"file":"Tenancy.js"}