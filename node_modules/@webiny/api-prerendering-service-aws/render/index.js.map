{"version":3,"sources":["../../src/render/index.ts"],"names":["type","afterRender","configuration","args","console","log","distributionId","meta","cloudfront","path","url","parse","pathname","CloudFront","createInvalidation","DistributionId","InvalidationBatch","CallerReference","Date","getTime","Paths","Quantity","Items","promise","e","stack"],"mappings":";;;;;;;;;AACA;;AACA;;AAEA;AACA;eACe,MAAM;AACjB,SAAO;AACHA,IAAAA,IAAI,EAAE,gBADH;AAEHC,IAAAA,WAAW,EAAE,OAAO;AAAEC,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,KAAP,KAAmC;AAAA;;AAC5C;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,2DAAZ;AAEA,UAAIC,cAAc,GAAGH,IAAH,aAAGA,IAAH,8CAAGA,IAAI,CAAED,aAAT,iFAAG,oBAAqBK,IAAxB,oFAAG,sBAA2BC,UAA9B,2DAAG,uBAAuCF,cAA5D;;AACA,UAAI,CAACA,cAAL,EAAqB;AAAA;;AACjBA,QAAAA,cAAc,GAAGJ,aAAH,aAAGA,aAAH,8CAAGA,aAAa,CAAEK,IAAlB,iFAAG,oBAAqBC,UAAxB,0DAAG,sBAAiCF,cAAlD;AACH;;AAED,UAAI,CAACA,cAAL,EAAqB;AACjBF,QAAAA,OAAO,CAACC,GAAR,CAAa,sDAAb;AACA;AACH;;AAEDD,MAAAA,OAAO,CAACC,GAAR,CAAY,wDAAZ;AACA,UAAII,IAAI,GAAGN,IAAI,CAACM,IAAhB;;AACA,UAAI,CAACA,IAAL,EAAW;AACPL,QAAAA,OAAO,CAACC,GAAR,CACK,6EADL;AAGAI,QAAAA,IAAI,GAAGC,aAAIC,KAAJ,CAAUR,IAAI,CAACO,GAAf,EAAoBE,QAA3B;AACH;;AAED,UAAI,CAACH,IAAL,EAAW;AACPL,QAAAA,OAAO,CAACC,GAAR,CAAa,iEAAb;AACA;AACH;;AAEDI,MAAAA,IAAI,IAAI,GAAR;AAEAL,MAAAA,OAAO,CAACC,GAAR,CACK,oFAAmFC,cAAe,YAAWG,IAAK,IADvH;AAIA,YAAMD,UAAU,GAAG,IAAIK,mBAAJ,EAAnB;;AACA,UAAI;AACA,cAAML,UAAU,CACXM,kBADC,CACkB;AAChBC,UAAAA,cAAc,EAAET,cADA;AAEhBU,UAAAA,iBAAiB,EAAE;AACfC,YAAAA,eAAe,EAAG,GAAE,IAAIC,IAAJ,GAAWC,OAAX,EAAqB,yCAD1B;AAEfC,YAAAA,KAAK,EAAE;AACHC,cAAAA,QAAQ,EAAE,CADP;AAEHC,cAAAA,KAAK,EAAE,CAACb,IAAD;AAFJ;AAFQ;AAFH,SADlB,EAWDc,OAXC,EAAN;AAYH,OAbD,CAaE,OAAOC,CAAP,EAAU;AACR;AACApB,QAAAA,OAAO,CAACC,GAAR,CACK,4EAA2EC,cAAe,IAD/F,EAEIkB,CAAC,CAACC,KAFN;AAIH;;AAEDrB,MAAAA,OAAO,CAACC,GAAR,CAAa,qCAAoCI,IAAK,yBAAtD;AACH;AA3DE,GAAP;AA6DH,C","sourcesContent":["import { RenderHookPlugin } from \"@webiny/api-prerendering-service/render/types\";\nimport CloudFront from \"aws-sdk/clients/cloudfront\";\nimport url from \"url\";\n\n// This plugin will issue a cache invalidation request to CloudFront, every time a page has been rendered. This is\n// mostly important when a user publishes a new page, and we want to make the page immediately publicly available.\nexport default () => {\n    return {\n        type: \"ps-render-hook\",\n        afterRender: async ({ configuration, args }) => {\n            // Let's create a cache invalidation request.\n            console.log(\"Trying to send a CloudFront cache invalidation request...\");\n\n            let distributionId = args?.configuration?.meta?.cloudfront?.distributionId;\n            if (!distributionId) {\n                distributionId = configuration?.meta?.cloudfront?.distributionId;\n            }\n\n            if (!distributionId) {\n                console.log(`Exiting... CloudFront \"distributionId\" not provided.`);\n                return;\n            }\n\n            console.log(\"Trying to get the path that needs to be invalidated...\");\n            let path = args.path;\n            if (!path) {\n                console.log(\n                    `Path wasn't passed via \"args.path\", trying to extract it from \"args.url\"...`\n                );\n                path = url.parse(args.url).pathname;\n            }\n\n            if (!path) {\n                console.log(`Aborting the cache invalidation attempt... \"path\" not detected.`);\n                return;\n            }\n\n            path += \"*\";\n\n            console.log(\n                `Proceeding with issuing a cache invalidation request to CloudFront distribution \"${distributionId}\", path \"${path}\".`\n            );\n\n            const cloudfront = new CloudFront();\n            try {\n                await cloudfront\n                    .createInvalidation({\n                        DistributionId: distributionId,\n                        InvalidationBatch: {\n                            CallerReference: `${new Date().getTime()}-api-prerender-service-aws-after-render`,\n                            Paths: {\n                                Quantity: 1,\n                                Items: [path]\n                            }\n                        }\n                    })\n                    .promise();\n            } catch (e) {\n                // eslint-disable-next-line\n                console.log(\n                    `Failed to issue a cache invalidation request to CloudFront distribution \"${distributionId}\".`,\n                    e.stack\n                );\n            }\n\n            console.log(`Cache invalidation request (path \"${path}\") successfully issued.`);\n        }\n    } as RenderHookPlugin;\n};\n"],"file":"index.js"}