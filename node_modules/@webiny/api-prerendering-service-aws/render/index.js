"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _cloudfront = _interopRequireDefault(require("aws-sdk/clients/cloudfront"));

var _url = _interopRequireDefault(require("url"));

// This plugin will issue a cache invalidation request to CloudFront, every time a page has been rendered. This is
// mostly important when a user publishes a new page, and we want to make the page immediately publicly available.
var _default = () => {
  return {
    type: "ps-render-hook",
    afterRender: async ({
      configuration,
      args
    }) => {
      var _args$configuration, _args$configuration$m, _args$configuration$m2;

      // Let's create a cache invalidation request.
      console.log("Trying to send a CloudFront cache invalidation request...");
      let distributionId = args === null || args === void 0 ? void 0 : (_args$configuration = args.configuration) === null || _args$configuration === void 0 ? void 0 : (_args$configuration$m = _args$configuration.meta) === null || _args$configuration$m === void 0 ? void 0 : (_args$configuration$m2 = _args$configuration$m.cloudfront) === null || _args$configuration$m2 === void 0 ? void 0 : _args$configuration$m2.distributionId;

      if (!distributionId) {
        var _configuration$meta, _configuration$meta$c;

        distributionId = configuration === null || configuration === void 0 ? void 0 : (_configuration$meta = configuration.meta) === null || _configuration$meta === void 0 ? void 0 : (_configuration$meta$c = _configuration$meta.cloudfront) === null || _configuration$meta$c === void 0 ? void 0 : _configuration$meta$c.distributionId;
      }

      if (!distributionId) {
        console.log(`Exiting... CloudFront "distributionId" not provided.`);
        return;
      }

      console.log("Trying to get the path that needs to be invalidated...");
      let path = args.path;

      if (!path) {
        console.log(`Path wasn't passed via "args.path", trying to extract it from "args.url"...`);
        path = _url.default.parse(args.url).pathname;
      }

      if (!path) {
        console.log(`Aborting the cache invalidation attempt... "path" not detected.`);
        return;
      }

      path += "*";
      console.log(`Proceeding with issuing a cache invalidation request to CloudFront distribution "${distributionId}", path "${path}".`);
      const cloudfront = new _cloudfront.default();

      try {
        await cloudfront.createInvalidation({
          DistributionId: distributionId,
          InvalidationBatch: {
            CallerReference: `${new Date().getTime()}-api-prerender-service-aws-after-render`,
            Paths: {
              Quantity: 1,
              Items: [path]
            }
          }
        }).promise();
      } catch (e) {
        // eslint-disable-next-line
        console.log(`Failed to issue a cache invalidation request to CloudFront distribution "${distributionId}".`, e.stack);
      }

      console.log(`Cache invalidation request (path "${path}") successfully issued.`);
    }
  };
};

exports.default = _default;
//# sourceMappingURL=index.js.map