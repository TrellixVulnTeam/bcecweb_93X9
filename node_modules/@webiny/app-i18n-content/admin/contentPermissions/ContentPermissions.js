import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;

import React, { Fragment, useCallback, useMemo } from "react";
import { Grid, Cell } from "@webiny/ui/Grid";
import { i18n } from "@webiny/app/i18n";
import { Form } from "@webiny/form";
import { useI18N } from "@webiny/app-i18n/hooks/useI18N";
import { CheckboxGroup, Checkbox } from "@webiny/ui/Checkbox";
import { Radio, RadioGroup } from "@webiny/ui/Radio";
var t = i18n.ns("app-i18n/admin/plugins/permissionRenderer");
export var ContentPermissions = function ContentPermissions(_ref) {
  var value = _ref.value,
      onChange = _ref.onChange;

  var _useI18N = useI18N(),
      getLocales = _useI18N.getLocales;

  var onFormChange = useCallback(function (formData) {
    var newValue = [];

    if (Array.isArray(value)) {
      // Let's just filter out the `content*` permission objects, it's easier to build new ones from scratch.
      newValue = value.filter(function (item) {
        return !item.name.startsWith("content");
      });
    }

    var permission = {
      name: "content.i18n",
      locales: undefined
    };

    if (formData.level === "locales") {
      permission.locales = Array.isArray(formData.locales) ? formData.locales : [];
    }

    newValue.push(permission);
    onChange(newValue);
  }, []);
  var formData = useMemo(function () {
    var defaultData = {
      level: undefined,
      locales: []
    };

    if (!Array.isArray(value)) {
      return defaultData;
    }

    var permission = value.find(function (item) {
      return item.name === "content.i18n";
    });

    if (!permission) {
      return defaultData;
    }

    if (Array.isArray(permission.locales)) {
      return {
        level: "locales",
        locales: permission.locales
      };
    }

    return {
      level: "all"
    };
  }, []);
  return /*#__PURE__*/React.createElement(Form, {
    data: formData,
    onChange: onFormChange
  }, function (_ref2) {
    var data = _ref2.data,
        Bind = _ref2.Bind;
    return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(Grid, {
      style: {
        padding: "0px !important"
      }
    }, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "level"
    }, /*#__PURE__*/React.createElement(RadioGroup, {
      label: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Content can be accessed on:"])))
    }, function (_ref3) {
      var getValue = _ref3.getValue,
          onChange = _ref3.onChange;
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Radio, {
        label: t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["All locales"]))),
        value: getValue("all"),
        onChange: onChange("all")
      }), /*#__PURE__*/React.createElement(Radio, {
        label: t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["Specific locales"]))),
        value: getValue("locales"),
        onChange: onChange("locales")
      }));
    }))), data.level === "locales" && /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "locales"
    }, /*#__PURE__*/React.createElement(CheckboxGroup, {
      label: t(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Available Locales"]))),
      description: t(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["The user will be able to access content in the selected locales."])))
    }, function (_ref4) {
      var onChange = _ref4.onChange,
          getValue = _ref4.getValue;
      return getLocales().map(function (_ref5) {
        var code = _ref5.code;
        return /*#__PURE__*/React.createElement(Checkbox, {
          key: code + data.level,
          label: code,
          value: getValue(code),
          onChange: onChange(code)
        });
      });
    })))));
  });
};
//# sourceMappingURL=ContentPermissions.js.map