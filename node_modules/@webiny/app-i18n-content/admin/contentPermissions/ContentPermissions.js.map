{"version":3,"sources":["../../../src/admin/contentPermissions/ContentPermissions.tsx"],"names":["React","Fragment","useCallback","useMemo","Grid","Cell","i18n","Form","useI18N","CheckboxGroup","Checkbox","Radio","RadioGroup","t","ns","ContentPermissions","value","onChange","getLocales","onFormChange","formData","newValue","Array","isArray","filter","item","name","startsWith","permission","locales","undefined","level","push","defaultData","find","data","Bind","padding","getValue","map","code"],"mappings":"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","sourcesContent":["import React, { Fragment, useCallback, useMemo } from \"react\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { i18n } from \"@webiny/app/i18n\";\nimport { Form } from \"@webiny/form\";\nimport { useI18N } from \"@webiny/app-i18n/hooks/useI18N\";\nimport { CheckboxGroup, Checkbox } from \"@webiny/ui/Checkbox\";\nimport { Radio, RadioGroup } from \"@webiny/ui/Radio\";\n\nconst t = i18n.ns(\"app-i18n/admin/plugins/permissionRenderer\");\n\nexport const ContentPermissions = ({ value, onChange }) => {\n    const { getLocales } = useI18N();\n\n    const onFormChange = useCallback(formData => {\n        let newValue = [];\n        if (Array.isArray(value)) {\n            // Let's just filter out the `content*` permission objects, it's easier to build new ones from scratch.\n            newValue = value.filter(item => !item.name.startsWith(\"content\"));\n        }\n\n        const permission = { name: \"content.i18n\", locales: undefined };\n        if (formData.level === \"locales\") {\n            permission.locales = Array.isArray(formData.locales) ? formData.locales : [];\n        }\n        newValue.push(permission);\n        onChange(newValue);\n    }, []);\n\n    const formData = useMemo(() => {\n        const defaultData = { level: undefined, locales: [] };\n        if (!Array.isArray(value)) {\n            return defaultData;\n        }\n\n        const permission = value.find(item => item.name === \"content.i18n\");\n        if (!permission) {\n            return defaultData;\n        }\n\n        if (Array.isArray(permission.locales)) {\n            return { level: \"locales\", locales: permission.locales };\n        }\n\n        return { level: \"all\" };\n    }, []);\n\n    return (\n        <Form data={formData} onChange={onFormChange}>\n            {({ data, Bind }) => (\n                <Fragment>\n                    <Grid style={{ padding: \"0px !important\" }}>\n                        <Cell span={12}>\n                            <Bind name={\"level\"}>\n                                <RadioGroup label={t`Content can be accessed on:`}>\n                                    {({ getValue, onChange }) => (\n                                        <React.Fragment>\n                                            <Radio\n                                                label={t`All locales`}\n                                                value={getValue(\"all\")}\n                                                onChange={onChange(\"all\")}\n                                            />\n                                            <Radio\n                                                label={t`Specific locales`}\n                                                value={getValue(\"locales\")}\n                                                onChange={onChange(\"locales\")}\n                                            />\n                                        </React.Fragment>\n                                    )}\n                                </RadioGroup>\n                            </Bind>\n                        </Cell>\n                        {data.level === \"locales\" && (\n                            <Cell span={12}>\n                                <Bind name={\"locales\"}>\n                                    <CheckboxGroup\n                                        label={t`Available Locales`}\n                                        description={t`The user will be able to access content in the selected locales.`}\n                                    >\n                                        {({ onChange, getValue }) =>\n                                            getLocales().map(({ code }) => (\n                                                <Checkbox\n                                                    key={code + data.level}\n                                                    label={code}\n                                                    value={getValue(code)}\n                                                    onChange={onChange(code)}\n                                                />\n                                            ))\n                                        }\n                                    </CheckboxGroup>\n                                </Bind>\n                            </Cell>\n                        )}\n                    </Grid>\n                </Fragment>\n            )}\n        </Form>\n    );\n};\n"],"file":"ContentPermissions.js"}