import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useMemo } from "react";
import { useLazyQuery, useQuery } from "@apollo/react-hooks";
import get from "lodash/get";
import { Grid, Cell } from "@webiny/ui/Grid";
import { Alert } from "@webiny/ui/Alert";
import { AutoComplete } from "@webiny/ui/AutoComplete";
import styled from "@emotion/styled";
import { validation } from "@webiny/validation";
import Accordion from "@webiny/app-page-builder/editor/plugins/elementSettings/components/Accordion";
import { ButtonContainer, SimpleButton, classes } from "@webiny/app-page-builder/editor/plugins/elementSettings/components/StyledComponents";
import { LIST_FORMS, GET_FORM_REVISIONS } from "./graphql";
var FormOptionsWrapper = /*#__PURE__*/styled("div", {
  target: "e105qjdh0",
  label: "FormOptionsWrapper"
})({
  minHeight: 250
});

var FormElementAdvancedSettings = function FormElementAdvancedSettings(_ref) {
  var Bind = _ref.Bind,
      submit = _ref.submit,
      data = _ref.data;
  var listQuery = useQuery(LIST_FORMS, {
    fetchPolicy: "network-only"
  });
  var selectedForm = useMemo(function () {
    return {
      parent: get(data, "settings.form.parent"),
      revision: get(data, "settings.form.revision")
    };
  }, [data]);

  var _useLazyQuery = useLazyQuery(GET_FORM_REVISIONS, {
    variables: {
      id: selectedForm.parent
    }
  }),
      _useLazyQuery2 = _slicedToArray(_useLazyQuery, 2),
      getFormRevisions = _useLazyQuery2[0],
      getQuery = _useLazyQuery2[1];

  var latestRevisions = useMemo(function () {
    var output = {
      options: [],
      value: null
    };

    if (listQuery.data) {
      var latestFormRevisionsList = get(listQuery, "data.formBuilder.listForms.data") || [];
      output.options = latestFormRevisionsList.map(function (_ref2) {
        var id = _ref2.id,
            name = _ref2.name;
        return {
          id: id,
          name: name
        };
      });
      output.value = output.options.find(function (item) {
        if (typeof item.id !== "string" || typeof selectedForm.parent !== "string") {
          return;
        } // Get selected form's "baseId", i.e without the revision number suffix.


        var _selectedForm$parent$ = selectedForm.parent.split("#"),
            _selectedForm$parent$2 = _slicedToArray(_selectedForm$parent$, 1),
            baseId = _selectedForm$parent$2[0];

        return item.id.includes(baseId);
      }) || null;
    }

    return output;
  }, [listQuery, selectedForm]);
  var publishedRevisions = useMemo(function () {
    var output = {
      options: [],
      value: null
    };

    if (getQuery.data) {
      var _publishedRevisions = get(getQuery, "data.formBuilder.getFormRevisions.data").filter(function (revision) {
        return revision.published;
      });

      output.options = _publishedRevisions.map(function (item) {
        return {
          id: item.id,
          name: "".concat(item.name, " (version ").concat(item.version, ")")
        };
      });

      if (output.options.length > 0) {
        output.options.unshift({
          id: "latest",
          name: "Latest published revision"
        });
      }

      output.value = output.options.find(function (item) {
        return item.id === selectedForm.revision;
      }) || null;
    }

    return output;
  }, [getQuery, selectedForm]); // required so ts build does not break

  var buttonProps = {};
  return /*#__PURE__*/React.createElement(Accordion, {
    title: "Form",
    defaultValue: true
  }, /*#__PURE__*/React.createElement(FormOptionsWrapper, null, /*#__PURE__*/React.createElement(Grid, {
    className: classes.simpleGrid
  }, /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(Bind, {
    name: "settings.form.parent",
    validators: validation.create("required")
  }, function (_ref3) {
    var _onChange = _ref3.onChange;
    return /*#__PURE__*/React.createElement(AutoComplete, {
      options: latestRevisions.options,
      value: latestRevisions.value,
      onChange: function onChange(value) {
        _onChange(value);

        getFormRevisions();
      },
      label: "Form"
    });
  })), /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(Bind, {
    name: "settings.form.revision",
    validators: validation.create("required")
  }, function (_ref4) {
    var onChange = _ref4.onChange;
    var parentSelected = !!latestRevisions.value;
    var noPublished = publishedRevisions.options.length === 0;

    if (getQuery.loading) {
      return /*#__PURE__*/React.createElement("span", null, "Loading revisions...");
    }

    var description = "Choose a published revision.";

    if (parentSelected && noPublished) {
      return /*#__PURE__*/React.createElement(Alert, {
        type: "danger",
        title: "Form not published"
      }, "Please publish the form and then you can insert it into your page.");
    } else {
      return /*#__PURE__*/React.createElement(AutoComplete, {
        label: "Revision",
        description: description,
        disabled: !parentSelected || noPublished,
        options: publishedRevisions.options,
        value: publishedRevisions.value,
        onChange: onChange
      });
    }
  })), /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(ButtonContainer, buttonProps, /*#__PURE__*/React.createElement(SimpleButton, Object.assign({
    onClick: submit
  }, buttonProps), "Save"))))));
};

export default FormElementAdvancedSettings;
//# sourceMappingURL=FormElementAdvancedSettings.js.map