{"version":3,"sources":["../../../../../src/page-builder/admin/plugins/components/FormElementAdvancedSettings.tsx"],"names":["React","useMemo","useLazyQuery","useQuery","get","Grid","Cell","Alert","AutoComplete","styled","validation","Accordion","ButtonContainer","SimpleButton","classes","LIST_FORMS","GET_FORM_REVISIONS","FormOptionsWrapper","minHeight","FormElementAdvancedSettings","Bind","submit","data","listQuery","fetchPolicy","selectedForm","parent","revision","variables","id","getFormRevisions","getQuery","latestRevisions","output","options","value","latestFormRevisionsList","map","name","find","item","split","baseId","includes","publishedRevisions","filter","published","version","length","unshift","buttonProps","simpleGrid","create","onChange","parentSelected","noPublished","loading","description"],"mappings":"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","sourcesContent":["import React, { useMemo } from \"react\";\nimport { useLazyQuery, useQuery } from \"@apollo/react-hooks\";\nimport get from \"lodash/get\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { Alert } from \"@webiny/ui/Alert\";\nimport { AutoComplete } from \"@webiny/ui/AutoComplete\";\nimport styled from \"@emotion/styled\";\nimport { validation } from \"@webiny/validation\";\nimport Accordion from \"@webiny/app-page-builder/editor/plugins/elementSettings/components/Accordion\";\nimport {\n    ButtonContainer,\n    SimpleButton,\n    classes\n} from \"@webiny/app-page-builder/editor/plugins/elementSettings/components/StyledComponents\";\nimport { LIST_FORMS, GET_FORM_REVISIONS } from \"./graphql\";\n\nconst FormOptionsWrapper = styled(\"div\")({\n    minHeight: 250\n});\n\nconst FormElementAdvancedSettings = ({ Bind, submit, data }) => {\n    const listQuery = useQuery(LIST_FORMS, { fetchPolicy: \"network-only\" });\n\n    const selectedForm = useMemo(() => {\n        return {\n            parent: get(data, \"settings.form.parent\"),\n            revision: get(data, \"settings.form.revision\")\n        };\n    }, [data]);\n\n    const [getFormRevisions, getQuery] = useLazyQuery(GET_FORM_REVISIONS, {\n        variables: {\n            id: selectedForm.parent\n        }\n    });\n\n    const latestRevisions = useMemo(() => {\n        const output = {\n            options: [],\n            value: null\n        };\n        if (listQuery.data) {\n            const latestFormRevisionsList = get(listQuery, \"data.formBuilder.listForms.data\") || [];\n\n            output.options = latestFormRevisionsList.map(({ id, name }) => ({ id, name }));\n            output.value =\n                output.options.find(item => {\n                    if (typeof item.id !== \"string\" || typeof selectedForm.parent !== \"string\") {\n                        return;\n                    }\n                    // Get selected form's \"baseId\", i.e without the revision number suffix.\n                    const [baseId] = selectedForm.parent.split(\"#\");\n                    return item.id.includes(baseId);\n                }) || null;\n        }\n\n        return output;\n    }, [listQuery, selectedForm]);\n\n    const publishedRevisions = useMemo(() => {\n        const output = {\n            options: [],\n            value: null\n        };\n\n        if (getQuery.data) {\n            const publishedRevisions = get(\n                getQuery,\n                \"data.formBuilder.getFormRevisions.data\"\n            ).filter(revision => revision.published);\n            output.options = publishedRevisions.map(item => ({\n                id: item.id,\n                name: `${item.name} (version ${item.version})`\n            }));\n\n            if (output.options.length > 0) {\n                output.options.unshift({\n                    id: \"latest\",\n                    name: \"Latest published revision\"\n                });\n            }\n\n            output.value = output.options.find(item => item.id === selectedForm.revision) || null;\n        }\n\n        return output;\n    }, [getQuery, selectedForm]);\n    // required so ts build does not break\n    const buttonProps: any = {};\n\n    return (\n        <Accordion title={\"Form\"} defaultValue={true}>\n            <FormOptionsWrapper>\n                <Grid className={classes.simpleGrid}>\n                    <Cell span={12}>\n                        <Bind\n                            name={\"settings.form.parent\"}\n                            validators={validation.create(\"required\")}\n                        >\n                            {({ onChange }) => (\n                                <AutoComplete\n                                    options={latestRevisions.options}\n                                    value={latestRevisions.value}\n                                    onChange={value => {\n                                        onChange(value);\n                                        getFormRevisions();\n                                    }}\n                                    label={\"Form\"}\n                                />\n                            )}\n                        </Bind>\n                    </Cell>\n                    <Cell span={12}>\n                        <Bind\n                            name={\"settings.form.revision\"}\n                            validators={validation.create(\"required\")}\n                        >\n                            {({ onChange }) => {\n                                const parentSelected = !!latestRevisions.value;\n                                const noPublished = publishedRevisions.options.length === 0;\n                                if (getQuery.loading) {\n                                    return <span>Loading revisions...</span>;\n                                }\n\n                                const description = \"Choose a published revision.\";\n                                if (parentSelected && noPublished) {\n                                    return (\n                                        <Alert type=\"danger\" title=\"Form not published\">\n                                            Please publish the form and then you can insert it into\n                                            your page.\n                                        </Alert>\n                                    );\n                                } else {\n                                    return (\n                                        <AutoComplete\n                                            label={\"Revision\"}\n                                            description={description}\n                                            disabled={!parentSelected || noPublished}\n                                            options={publishedRevisions.options}\n                                            value={publishedRevisions.value}\n                                            onChange={onChange}\n                                        />\n                                    );\n                                }\n                            }}\n                        </Bind>\n                    </Cell>\n                    <Cell span={12}>\n                        <ButtonContainer {...buttonProps}>\n                            <SimpleButton onClick={submit} {...buttonProps}>\n                                Save\n                            </SimpleButton>\n                        </ButtonContainer>\n                    </Cell>\n                </Grid>\n            </FormOptionsWrapper>\n        </Accordion>\n    );\n};\n\nexport default FormElementAdvancedSettings;\n"],"file":"FormElementAdvancedSettings.js"}