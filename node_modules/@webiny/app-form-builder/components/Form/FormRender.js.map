{"version":3,"sources":["../../../src/components/Form/FormRender.tsx"],"names":["plugins","React","useEffect","useRef","useMemo","useApolloClient","createReCaptchaComponent","createTermsOfServiceComponent","createFormSubmission","handleFormTriggers","onFormMounted","reCaptchaEnabled","termsOfServiceEnabled","FormRender","props","theme","Object","assign","byType","map","pl","client","data","id","reCaptchaResponseToken","termsOfServiceAccepted","formData","layout","fields","settings","getFieldById","find","field","_id","getFieldByFieldId","fieldId","getFields","validatorPlugins","forEach","row","idIndex","validators","validation","item","validatorPlugin","plugin","validator","name","validate","value","result","isInvalid","Error","message","filter","Boolean","getDefaultValues","overrides","values","defaultValue","submit","current","preview","error","code","reCaptcha","errorMessage","termsOfServiceMessage","formSubmission","layouts","reduce","acc","l","push","LayoutRenderComponent","renderer","component","ReCaptcha","setResponseToken","TermsOfService","setTermsOfServiceAccepted","layoutProps","parent"],"mappings":"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","sourcesContent":["import { plugins } from \"@webiny/plugins\";\nimport { cloneDeep, get } from \"lodash\";\nimport React, { useEffect, useRef, useMemo } from \"react\";\nimport { useApolloClient } from \"@apollo/react-hooks\";\nimport { createReCaptchaComponent, createTermsOfServiceComponent } from \"./components\";\nimport {\n    createFormSubmission,\n    handleFormTriggers,\n    onFormMounted,\n    reCaptchaEnabled,\n    termsOfServiceEnabled\n} from \"./functions\";\n\nimport {\n    FormRenderPropsType,\n    FbFormRenderComponentProps,\n    FormSubmitResponseType,\n    FbFormModel,\n    FbFormSubmissionData,\n    FbFormFieldValidatorPlugin,\n    FbFormLayoutPlugin\n} from \"../../types\";\nimport { PbThemePlugin } from \"@webiny/app-page-builder/types\";\n\ndeclare global {\n    // eslint-disable-next-line\n    namespace JSX {\n        interface IntrinsicElements {\n            // @ts-ignore\n            \"ps-tag\": {\n                class?: string;\n                id?: string;\n            };\n        }\n    }\n}\n\nconst FormRender = (props: FbFormRenderComponentProps) => {\n    const theme = useMemo(\n        () => Object.assign({}, ...plugins.byType(\"pb-theme\").map((pl: PbThemePlugin) => pl.theme)),\n        []\n    );\n\n    const client = useApolloClient();\n    const data = props.data || ({} as FbFormModel);\n\n    useEffect(() => {\n        if (data.id) {\n            onFormMounted({ ...props, client });\n        }\n    }, [data.id]);\n\n    const reCaptchaResponseToken = useRef(\"\");\n    const termsOfServiceAccepted = useRef(false);\n\n    if (!data.id) {\n        return null;\n    }\n\n    const formData: FbFormModel = cloneDeep(data);\n    const { layout, fields, settings } = formData;\n\n    const getFieldById = id => {\n        return fields.find(field => field._id === id);\n    };\n\n    const getFieldByFieldId = id => {\n        return fields.find(field => field.fieldId === id);\n    };\n\n    const getFields = () => {\n        const fields: any = cloneDeep(layout);\n        const validatorPlugins =\n            plugins.byType<FbFormFieldValidatorPlugin>(\"fb-form-field-validator\");\n\n        fields.forEach(row => {\n            row.forEach((id, idIndex) => {\n                row[idIndex] = getFieldById(id);\n                row[idIndex].validators = row[idIndex].validation\n                    .map(item => {\n                        const validatorPlugin = validatorPlugins.find(\n                            plugin => plugin.validator.name === item.name\n                        );\n\n                        if (\n                            !validatorPlugin ||\n                            typeof validatorPlugin.validator.validate !== \"function\"\n                        ) {\n                            return;\n                        }\n\n                        return async value => {\n                            let isInvalid;\n                            try {\n                                const result = await validatorPlugin.validator.validate(\n                                    value,\n                                    item\n                                );\n                                isInvalid = result === false;\n                            } catch (e) {\n                                isInvalid = true;\n                            }\n\n                            if (isInvalid) {\n                                throw new Error(item.message || \"Invalid value.\");\n                            }\n                        };\n                    })\n                    .filter(Boolean);\n            });\n        });\n        return fields;\n    };\n\n    const getDefaultValues = (overrides = {}) => {\n        const values = {};\n        fields.forEach(field => {\n            const fieldId = field.fieldId;\n\n            if (\n                fieldId &&\n                \"defaultValue\" in field.settings &&\n                typeof field.settings.defaultValue !== \"undefined\"\n            ) {\n                values[fieldId] = field.settings.defaultValue;\n            }\n        });\n        return { ...values, ...overrides };\n    };\n\n    const submit = async (data: FbFormSubmissionData): Promise<FormSubmitResponseType> => {\n        if (reCaptchaEnabled(formData) && !reCaptchaResponseToken.current) {\n            return {\n                data: null,\n                preview: Boolean(props.preview),\n                error: {\n                    code: \"RECAPTCHA_NOT_PASSED\",\n                    message: settings.reCaptcha.errorMessage\n                }\n            };\n        }\n\n        if (termsOfServiceEnabled(formData) && !termsOfServiceAccepted.current) {\n            return {\n                data: null,\n                preview: Boolean(props.preview),\n                error: {\n                    code: \"TOS_NOT_ACCEPTED\",\n                    message: settings.termsOfServiceMessage.errorMessage\n                }\n            };\n        }\n\n        const formSubmission = await createFormSubmission({\n            client,\n            props,\n            data,\n            reCaptchaResponseToken: reCaptchaResponseToken.current\n        });\n\n        await handleFormTriggers({ props, data, formSubmission });\n        return formSubmission;\n    };\n\n    const layouts = React.useMemo(\n        () =>\n            [\n                ...(get(theme, \"formBuilder.layouts\") || []),\n                ...plugins.byType<FbFormLayoutPlugin>(\"form-layout\").map(pl => pl.layout)\n            ].reduce((acc, item) => {\n                if (!acc.find(l => l.name === item.name)) {\n                    acc.push(item);\n                }\n                return acc;\n            }, []),\n        []\n    );\n\n    // Get form layout, defined in theme.\n    let LayoutRenderComponent = layouts.find(item => item.name === settings.layout.renderer);\n\n    if (!LayoutRenderComponent) {\n        return <span>Cannot render form, layout missing.</span>;\n    }\n\n    LayoutRenderComponent = LayoutRenderComponent.component;\n\n    const ReCaptcha = createReCaptchaComponent({\n        props,\n        formData,\n        setResponseToken: value => (reCaptchaResponseToken.current = value)\n    });\n\n    const TermsOfService = createTermsOfServiceComponent({\n        props,\n        formData,\n        setTermsOfServiceAccepted: value => (termsOfServiceAccepted.current = value)\n    });\n\n    const layoutProps: FormRenderPropsType = {\n        getFieldById,\n        getFieldByFieldId,\n        getDefaultValues,\n        getFields,\n        submit,\n        formData,\n        ReCaptcha,\n        TermsOfService\n    };\n\n    return (\n        <>\n            <ps-tag data-key=\"fb-form\" data-value={data.parent} />\n            <LayoutRenderComponent {...layoutProps} />\n        </>\n    );\n};\n\nexport default FormRender;\n"],"file":"FormRender.js"}