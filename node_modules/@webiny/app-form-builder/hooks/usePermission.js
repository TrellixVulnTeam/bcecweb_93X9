import { useCallback, useMemo } from "react";
import { useSecurity } from "@webiny/app-security";
import get from "lodash/get";

var usePermission = function usePermission() {
  var _useSecurity = useSecurity(),
      identity = _useSecurity.identity;

  var fbFormPermission = useMemo(function () {
    return identity.getPermission("fb.form");
  }, []);
  var hasFullAccess = useMemo(function () {
    return identity.getPermission("fb.*");
  }, []);
  var canEdit = useCallback(function (item) {
    var creatorId = get(item, "createdBy.id");

    if (!fbFormPermission) {
      return false;
    }

    if (fbFormPermission.own && creatorId) {
      return creatorId === identity.login;
    }

    if (typeof fbFormPermission.rwd === "string") {
      return fbFormPermission.rwd.includes("w");
    }

    return true;
  }, [fbFormPermission]);
  var canDelete = useCallback(function (item) {
    if (!fbFormPermission) {
      return false;
    }

    if (fbFormPermission.own) {
      return item.createdBy.id === identity.login;
    }

    if (typeof fbFormPermission.rwd === "string") {
      return fbFormPermission.rwd.includes("d");
    }

    return true;
  }, [fbFormPermission]);
  var canPublish = useCallback(function () {
    if (hasFullAccess) {
      return true;
    }

    if (!fbFormPermission) {
      return false;
    }

    if (typeof fbFormPermission.pw === "string") {
      return fbFormPermission.pw.includes("p");
    }

    return fbFormPermission.pw;
  }, [fbFormPermission, hasFullAccess]);
  var canUnpublish = useCallback(function () {
    if (hasFullAccess) {
      return true;
    }

    if (!fbFormPermission) {
      return false;
    }

    if (typeof fbFormPermission.pw === "string") {
      return fbFormPermission.pw.includes("u");
    }

    return fbFormPermission.pw;
  }, [fbFormPermission, hasFullAccess]);
  return {
    canEdit: canEdit,
    canDelete: canDelete,
    canPublish: canPublish,
    canUnpublish: canUnpublish
  };
};

export default usePermission;
//# sourceMappingURL=usePermission.js.map