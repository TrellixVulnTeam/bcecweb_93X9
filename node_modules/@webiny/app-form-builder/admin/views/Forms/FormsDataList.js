import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12;

import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useRef, useCallback, useState, useMemo } from "react";
import TimeAgo from "timeago-react";
import { css } from "emotion";
import orderBy from "lodash/orderBy";
import upperFirst from "lodash/upperFirst";
import { useRouter } from "@webiny/react-router";
import { Typography } from "@webiny/ui/Typography";
import { ConfirmationDialog } from "@webiny/ui/ConfirmationDialog";
import { DeleteIcon, EditIcon } from "@webiny/ui/List/DataList/icons";
import { DELETE_FORM, CREATE_REVISION_FROM } from "../../graphql";
import { useApolloClient } from "@apollo/react-hooks";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { DataList, List, ListItem, ListItemText, ListItemTextSecondary, ListItemMeta, ListActions, DataListModalOverlayAction, DataListModalOverlay } from "@webiny/ui/List";
import { i18n } from "@webiny/app/i18n";
import { removeFormFromListCache, updateLatestRevisionInListCache } from "../cache";
import { ButtonIcon, ButtonSecondary } from "@webiny/ui/Button";
import { ReactComponent as AddIcon } from "@svgr/webpack!@webiny/app-admin/assets/icons/add-18px.svg";
import { ReactComponent as FilterIcon } from "@svgr/webpack!@webiny/app-admin/assets/icons/filter-24px.svg";
import SearchUI from "@webiny/app-admin/components/SearchUI";
import { deserializeSorters, serializeSorters } from "@webiny/app-page-builder/admin/views/utils";
import { Cell, Grid } from "@webiny/ui/Grid";
import { Select } from "@webiny/ui/Select";
import usePermission from "../../../hooks/usePermission";
import { useForms } from "./useForms";
var t = i18n.namespace("FormsApp.FormsDataList");
var rightAlign = /*#__PURE__*/css({
  alignItems: "flex-end !important"
}, "label:rightAlign;");
var listItemMinHeight = /*#__PURE__*/css({
  minHeight: "66px !important"
}, "label:listItemMinHeight;");
var SORTERS = [{
  label: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Newest to oldest"]))),
  sorters: {
    savedOn: "desc"
  }
}, {
  label: t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Oldest to newest"]))),
  sorters: {
    savedOn: "asc"
  }
}, {
  label: t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["Name A-Z"]))),
  sorters: {
    name: "asc"
  }
}, {
  label: t(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Name Z-A"]))),
  sorters: {
    name: "desc"
  }
}];

var FormsDataList = function FormsDataList(props) {
  var editHandlers = useRef({});

  var _useState = useState(""),
      _useState2 = _slicedToArray(_useState, 2),
      filter = _useState2[0],
      setFilter = _useState2[1];

  var _useState3 = useState(serializeSorters({
    savedOn: "desc"
  })),
      _useState4 = _slicedToArray(_useState3, 2),
      sort = _useState4[0],
      setSort = _useState4[1];

  var _useForms = useForms(),
      listQuery = _useForms.listQuery,
      canCreate = _useForms.canCreate;

  var _useRouter = useRouter(),
      location = _useRouter.location,
      history = _useRouter.history;

  var client = useApolloClient();

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var _usePermission = usePermission(),
      canEdit = _usePermission.canEdit,
      canDelete = _usePermission.canDelete;

  var deleteRecord = useCallback( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(item) {
      var res, _ref2, data, error;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return client.mutate({
                mutation: DELETE_FORM,
                variables: {
                  id: item.id
                },
                update: function update(cache) {
                  removeFormFromListCache(cache, item);
                  var query = new URLSearchParams(location.search);

                  if (item.id === query.get("id")) {
                    return history.push("/form-builder/forms");
                  }
                }
              });

            case 2:
              res = _context.sent;
              _ref2 = res.data.formBuilder.deleteForm || {}, data = _ref2.data, error = _ref2.error;

              if (data) {
                showSnackbar(t(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["Form {name} deleted."])))({
                  name: item.name
                }));
              } else {
                showSnackbar(error.message, {
                  title: t(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["Something unexpected happened."])))
                });
              }

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }(), [location]);
  var editRecord = useCallback(function (form) {
    // Note: form id is remains the same after publish.
    var handlerKey = form.id + form.status;

    if (!editHandlers.current[handlerKey]) {
      editHandlers.current[handlerKey] = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var _yield$client$mutate, res, _res$formBuilder$revi, data, error;

        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!form.published) {
                  _context2.next = 11;
                  break;
                }

                _context2.next = 3;
                return client.mutate({
                  mutation: CREATE_REVISION_FROM,
                  variables: {
                    revision: form.id
                  },
                  update: function update(cache, _ref4) {
                    var data = _ref4.data;
                    updateLatestRevisionInListCache(cache, data.formBuilder.revision.data);
                  }
                });

              case 3:
                _yield$client$mutate = _context2.sent;
                res = _yield$client$mutate.data;
                _res$formBuilder$revi = res.formBuilder.revision, data = _res$formBuilder$revi.data, error = _res$formBuilder$revi.error;

                if (!error) {
                  _context2.next = 8;
                  break;
                }

                return _context2.abrupt("return", showSnackbar(error.message));

              case 8:
                history.push("/form-builder/forms/".concat(encodeURIComponent(data.id)));
                _context2.next = 12;
                break;

              case 11:
                history.push("/form-builder/forms/".concat(encodeURIComponent(form.id)));

              case 12:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
    }

    return editHandlers.current[handlerKey];
  }, []);
  var filterData = useCallback(function (_ref5) {
    var name = _ref5.name;
    return name.toLowerCase().includes(filter);
  }, [filter]);
  var sortData = useCallback(function (list) {
    if (!sort) {
      return list;
    }

    var _Object$entries = Object.entries(deserializeSorters(sort)),
        _Object$entries2 = _slicedToArray(_Object$entries, 1),
        _Object$entries2$ = _slicedToArray(_Object$entries2[0], 2),
        key = _Object$entries2$[0],
        value = _Object$entries2$[1];

    return orderBy(list, [key], [value]);
  }, [sort]);
  var formsDataListModalOverlay = useMemo(function () {
    return /*#__PURE__*/React.createElement(DataListModalOverlay, null, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Select, {
      value: sort,
      onChange: setSort,
      label: t(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["Sort by"]))),
      description: "Sort pages by"
    }, SORTERS.map(function (_ref6) {
      var label = _ref6.label,
          sorters = _ref6.sorters;
      return /*#__PURE__*/React.createElement("option", {
        key: label,
        value: serializeSorters(sorters)
      }, label);
    })))));
  }, [sort]);
  var query = new URLSearchParams(location.search);
  var listFormsData = listQuery.loading ? [] : listQuery.data.formBuilder.listForms.data;
  var filteredData = filter === "" ? listFormsData : listFormsData.filter(filterData);
  var forms = sortData(filteredData);
  return /*#__PURE__*/React.createElement(DataList, {
    title: t(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["Forms"]))),
    data: forms,
    loading: listQuery.loading,
    actions: canCreate ? /*#__PURE__*/React.createElement(ButtonSecondary, {
      "data-testid": "new-record-button",
      onClick: props.onCreateForm
    }, /*#__PURE__*/React.createElement(ButtonIcon, {
      icon: /*#__PURE__*/React.createElement(AddIcon, null)
    }), " ", t(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["New Form"])))) : null,
    search: /*#__PURE__*/React.createElement(SearchUI, {
      value: filter,
      onChange: setFilter,
      inputPlaceholder: t(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["Search forms"])))
    }),
    modalOverlay: formsDataListModalOverlay,
    modalOverlayAction: /*#__PURE__*/React.createElement(DataListModalOverlayAction, {
      icon: /*#__PURE__*/React.createElement(FilterIcon, null)
    })
  }, function (_ref7) {
    var _ref7$data = _ref7.data,
        data = _ref7$data === void 0 ? [] : _ref7$data;
    return /*#__PURE__*/React.createElement(List, {
      "data-testid": "default-data-list"
    }, data.map(function (form) {
      return /*#__PURE__*/React.createElement(ListItem, {
        key: form.id,
        className: listItemMinHeight
      }, /*#__PURE__*/React.createElement(ListItemText, {
        onClick: function onClick() {
          query.set("id", form.id);
          history.push({
            search: query.toString()
          });
        }
      }, form.name, form.createdBy && /*#__PURE__*/React.createElement(ListItemTextSecondary, null, form.createdBy.firstName && /*#__PURE__*/React.createElement(React.Fragment, null, t(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["Created by: {user}."])))({
        user: form.createdBy.firstName
      }), " "), t(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["Last modified: {time}."])))({
        time: /*#__PURE__*/React.createElement(TimeAgo, {
          datetime: form.savedOn
        })
      }))), /*#__PURE__*/React.createElement(ListItemMeta, {
        className: rightAlign
      }, /*#__PURE__*/React.createElement(Typography, {
        use: "subtitle2"
      }, upperFirst(form.status), " (v", form.version, ")"), /*#__PURE__*/React.createElement(ListActions, null, canEdit(form) && /*#__PURE__*/React.createElement(EditIcon, {
        onClick: editRecord(form)
      }), canDelete(form) && /*#__PURE__*/React.createElement(ConfirmationDialog, {
        title: "Confirmation required!",
        message: "This will delete the form and all of its revisions. Are you sure you want to continue?"
      }, function (_ref8) {
        var showConfirmation = _ref8.showConfirmation;
        return /*#__PURE__*/React.createElement(DeleteIcon, {
          onClick: function onClick() {
            return showConfirmation( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
              return _regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                  switch (_context3.prev = _context3.next) {
                    case 0:
                      return _context3.abrupt("return", deleteRecord(form));

                    case 1:
                    case "end":
                      return _context3.stop();
                  }
                }
              }, _callee3);
            })));
          }
        });
      }))));
    }));
  });
};

export default FormsDataList;
//# sourceMappingURL=FormsDataList.js.map