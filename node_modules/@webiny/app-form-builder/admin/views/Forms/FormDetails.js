import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2, _templateObject3;

import React from "react";
import { useQuery } from "@apollo/react-hooks";
import { renderPlugins } from "@webiny/app/plugins";
import { useRouter } from "@webiny/react-router";
import styled from "@emotion/styled";
import { GET_FORM, GET_FORM_REVISIONS } from "../../graphql";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { Tabs } from "@webiny/ui/Tabs";
import { CircularProgress } from "@webiny/ui/Progress";
import { ButtonDefault, ButtonIcon } from "@webiny/ui/Button";
import { useSecurity } from "@webiny/app-security";
import EmptyView from "@webiny/app-admin/components/EmptyView";
import { ReactComponent as AddIcon } from "@svgr/webpack!@webiny/app-admin/assets/icons/add-18px.svg";
import { i18n } from "@webiny/app/i18n";
import { useForms } from "./useForms";
var t = i18n.ns("app-form-builder/admin/views/forms/form-details");
var DetailsContainer = /*#__PURE__*/styled("div", {
  target: "e1edn85r0",
  label: "DetailsContainer"
})({
  height: "100%",
  overflow: "hidden",
  position: "relative",
  nav: {
    backgroundColor: "var(--mdc-theme-surface)"
  }
});

var EmptyFormDetails = function EmptyFormDetails(_ref) {
  var canCreate = _ref.canCreate,
      onCreateForm = _ref.onCreateForm;
  return /*#__PURE__*/React.createElement(EmptyView, {
    title: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Click on the left side list to display form details {message}"])))({
      message: canCreate ? " or create a..." : ""
    }),
    action: canCreate ? /*#__PURE__*/React.createElement(ButtonDefault, {
      "data-testid": "new-record-button",
      onClick: onCreateForm
    }, /*#__PURE__*/React.createElement(ButtonIcon, {
      icon: /*#__PURE__*/React.createElement(AddIcon, null)
    }), " ", t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["New Form"])))) : null
  });
};

var FormDetails = function FormDetails(_ref2) {
  var onCreateForm = _ref2.onCreateForm;

  var _useRouter = useRouter(),
      location = _useRouter.location,
      history = _useRouter.history;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var security = useSecurity();
  var query = new URLSearchParams(location.search + location.hash);
  var formId = query.get("id");

  var _useForms = useForms(),
      listQuery = _useForms.listQuery,
      canCreate = _useForms.canCreate;

  var refreshForms = listQuery.refetch;
  var getForm = useQuery(GET_FORM, {
    variables: {
      revision: formId
    },
    skip: !formId,
    onCompleted: function onCompleted(data) {
      if (!data) {
        return;
      }

      var _data$formBuilder$for = data.formBuilder.form,
          error = _data$formBuilder$for.error,
          formData = _data$formBuilder$for.data;

      if (error) {
        query.delete("id");
        history.push({
          search: query.toString()
        });
        showSnackbar(error.message);
      }

      if (!formData) {
        query.delete("id");
        history.push({
          search: query.toString()
        });
        showSnackbar(t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["Could not load form with given ID."]))));
      }
    }
  });
  var getRevisions = useQuery(GET_FORM_REVISIONS, {
    variables: {
      id: formId ? formId.split("#")[0] : null
    },
    skip: !formId
  });

  if (!formId) {
    return /*#__PURE__*/React.createElement(EmptyFormDetails, {
      canCreate: canCreate,
      onCreateForm: onCreateForm
    });
  }

  var form = getForm.loading ? null : getForm.data.formBuilder.form.data;
  var revisions = getRevisions.loading ? [] : getRevisions.data.formBuilder.revisions.data;
  return /*#__PURE__*/React.createElement(DetailsContainer, null, getForm.loading && /*#__PURE__*/React.createElement(CircularProgress, {
    label: "Loading details..."
  }), form && /*#__PURE__*/React.createElement(Tabs, null, renderPlugins("forms-form-details-revision-content", {
    security: security,
    refreshForms: refreshForms,
    form: form,
    revisions: revisions,
    loading: getForm.loading
  }, {
    wrapper: false
  })));
};

export default FormDetails;
//# sourceMappingURL=FormDetails.js.map