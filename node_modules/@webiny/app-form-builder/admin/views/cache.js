import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import dotProp from "dot-prop-immutable";
import { GET_FORM_REVISIONS, LIST_FORMS } from "../graphql"; // Replace existing "latest" revision with the new revision

export var updateLatestRevisionInListCache = function updateLatestRevisionInListCache(cache, revision) {
  var gqlParams = {
    query: LIST_FORMS
  };

  var _revision$id$split = revision.id.split("#"),
      _revision$id$split2 = _slicedToArray(_revision$id$split, 1),
      uniqueId = _revision$id$split2[0];

  var _cache$readQuery = cache.readQuery(gqlParams),
      formBuilder = _cache$readQuery.formBuilder;

  var index = formBuilder.listForms.data.findIndex(function (item) {
    return item.id.startsWith(uniqueId);
  });
  cache.writeQuery(_objectSpread(_objectSpread({}, gqlParams), {}, {
    data: {
      formBuilder: dotProp.set(formBuilder, "listForms.data.".concat(index), revision)
    }
  }));
};
export var addFormToListCache = function addFormToListCache(cache, revision) {
  var gqlParams = {
    query: LIST_FORMS
  };

  var _cache$readQuery2 = cache.readQuery(gqlParams),
      formBuilder = _cache$readQuery2.formBuilder;

  cache.writeQuery(_objectSpread(_objectSpread({}, gqlParams), {}, {
    data: {
      formBuilder: dotProp.set(formBuilder, "listForms.data", [revision].concat(_toConsumableArray(formBuilder.listForms.data)))
    }
  }));
};
export var addRevisionToRevisionsCache = function addRevisionToRevisionsCache(cache, newRevision) {
  var gqlParams = {
    query: GET_FORM_REVISIONS,
    variables: {
      id: newRevision.id.split("#")[0]
    }
  };

  var _cache$readQuery3 = cache.readQuery(gqlParams),
      formBuilder = _cache$readQuery3.formBuilder;

  cache.writeQuery(_objectSpread(_objectSpread({}, gqlParams), {}, {
    data: {
      formBuilder: dotProp.set(formBuilder, "revisions.data", [newRevision].concat(_toConsumableArray(formBuilder.revisions.data)))
    }
  }));
};
export var removeFormFromListCache = function removeFormFromListCache(cache, form) {
  // Delete the form from list cache
  var gqlParams = {
    query: LIST_FORMS
  };

  var _cache$readQuery4 = cache.readQuery(gqlParams),
      formBuilder = _cache$readQuery4.formBuilder;

  var index = formBuilder.listForms.data.findIndex(function (item) {
    return item.id === form.id;
  });
  cache.writeQuery(_objectSpread(_objectSpread({}, gqlParams), {}, {
    data: {
      formBuilder: dotProp.delete(formBuilder, "listForms.data.".concat(index))
    }
  }));
};
export var removeRevisionFromFormCache = function removeRevisionFromFormCache(cache, form, revision) {
  var gqlParams = {
    query: GET_FORM_REVISIONS,
    variables: {
      id: form.id.split("#")[0]
    }
  };

  var _cache$readQuery5 = cache.readQuery(gqlParams),
      formBuilder = _cache$readQuery5.formBuilder;

  var index = formBuilder.revisions.data.findIndex(function (item) {
    return item.id === revision.id;
  });
  formBuilder = dotProp.delete(formBuilder, "revisions.data.".concat(index));
  cache.writeQuery(_objectSpread(_objectSpread({}, gqlParams), {}, {
    data: {
      formBuilder: formBuilder
    }
  })); // Return new revisions

  return formBuilder.revisions.data;
};
//# sourceMappingURL=cache.js.map