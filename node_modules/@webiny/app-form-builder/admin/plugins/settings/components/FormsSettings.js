import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React from "react";
import { useQuery, useMutation } from "@apollo/react-hooks";
import { Form } from "@webiny/form";
import { Grid, Cell } from "@webiny/ui/Grid";
import { ButtonPrimary } from "@webiny/ui/Button";
import { Input } from "@webiny/ui/Input";
import { Switch } from "@webiny/ui/Switch";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { CircularProgress } from "@webiny/ui/Progress";
import graphql from "./graphql";
import { SimpleForm, SimpleFormFooter, SimpleFormContent, SimpleFormHeader } from "@webiny/app-admin/components/SimpleForm";

var FormsSettings = function FormsSettings() {
  var _getSettingsQuery$dat, _getSettingsQuery$dat2, _getSettingsQuery$dat3;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var getSettingsQuery = useQuery(graphql.query);
  var settings = (getSettingsQuery === null || getSettingsQuery === void 0 ? void 0 : (_getSettingsQuery$dat = getSettingsQuery.data) === null || _getSettingsQuery$dat === void 0 ? void 0 : (_getSettingsQuery$dat2 = _getSettingsQuery$dat.formBuilder) === null || _getSettingsQuery$dat2 === void 0 ? void 0 : (_getSettingsQuery$dat3 = _getSettingsQuery$dat2.getSettings) === null || _getSettingsQuery$dat3 === void 0 ? void 0 : _getSettingsQuery$dat3.data) || {};
  var queryInProgress = getSettingsQuery === null || getSettingsQuery === void 0 ? void 0 : getSettingsQuery.loading;

  var _useMutation = useMutation(graphql.mutation),
      _useMutation2 = _slicedToArray(_useMutation, 2),
      updateSettings = _useMutation2[0],
      updateSettingsMutation = _useMutation2[1];

  var mutationInProgress = updateSettingsMutation === null || updateSettingsMutation === void 0 ? void 0 : updateSettingsMutation.loading;
  return /*#__PURE__*/React.createElement(Form, {
    data: settings,
    onSubmit: /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return updateSettings({
                  variables: {
                    data: data
                  }
                });

              case 2:
                showSnackbar("Settings updated successfully.");

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }()
  }, function (_ref2) {
    var _formData$reCaptcha;

    var Bind = _ref2.Bind,
        form = _ref2.form,
        formData = _ref2.data;
    var reCaptchaEnabled = formData === null || formData === void 0 ? void 0 : (_formData$reCaptcha = formData.reCaptcha) === null || _formData$reCaptcha === void 0 ? void 0 : _formData$reCaptcha.enabled;
    return /*#__PURE__*/React.createElement(SimpleForm, null, (queryInProgress || mutationInProgress) && /*#__PURE__*/React.createElement(CircularProgress, null), /*#__PURE__*/React.createElement(SimpleFormHeader, {
      title: "reCAPTCHA settings"
    }), /*#__PURE__*/React.createElement(SimpleFormContent, null, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "domain"
    }, /*#__PURE__*/React.createElement(Input, {
      label: "Domain",
      description: "E.g. https://www.mywebsite.com"
    }))), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "reCaptcha.enabled"
    }, /*#__PURE__*/React.createElement(Switch, {
      label: "Enable Google reCAPTCHA"
    }))), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "reCaptcha.siteKey"
    }, /*#__PURE__*/React.createElement(Input, {
      disabled: !reCaptchaEnabled,
      label: "Google reCAPTCHA site key",
      description: /*#__PURE__*/React.createElement(React.Fragment, null, "A v2 Tickbox site key.", " ", /*#__PURE__*/React.createElement("a", {
        href: "https://www.google.com/recaptcha/admin",
        target: "_blank",
        rel: "noopener noreferrer"
      }, "Don't have a site key?"))
    }))), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "reCaptcha.secretKey"
    }, /*#__PURE__*/React.createElement(Input, {
      disabled: !reCaptchaEnabled,
      label: "Google reCAPTCHA secret key",
      description: /*#__PURE__*/React.createElement(React.Fragment, null, "A v2 Tickbox secret key.", " ", /*#__PURE__*/React.createElement("a", {
        href: "https://www.google.com/recaptcha/admin",
        target: "_blank",
        rel: "noopener noreferrer"
      }, "Don't have a site key?"))
    }))))), /*#__PURE__*/React.createElement(SimpleFormFooter, null, /*#__PURE__*/React.createElement(ButtonPrimary, {
      onClick: form.submit
    }, "Save")));
  });
};

export default FormsSettings;
//# sourceMappingURL=FormsSettings.js.map