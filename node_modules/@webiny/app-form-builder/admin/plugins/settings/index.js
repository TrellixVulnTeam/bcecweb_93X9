import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import * as React from "react";
import { Route } from "@webiny/react-router";
import { AdminLayout } from "@webiny/app-admin/components/AdminLayout";
import FormsSettings from "./components/FormsSettings";
import { SecureRoute } from "@webiny/app-security/components";
import { RoutePlugin } from "@webiny/app/plugins/RoutePlugin";
import { NavigationMenuElement } from "@webiny/app-admin/ui/elements/NavigationMenuElement";
import { UIViewPlugin } from "@webiny/app-admin/ui/UIView";
import { NavigationView } from "@webiny/app-admin/ui/views/NavigationView";
var plugins = [new RoutePlugin({
  route: /*#__PURE__*/React.createElement(Route, {
    path: "/settings/form-builder/recaptcha",
    render: function render() {
      return /*#__PURE__*/React.createElement(AdminLayout, {
        title: "Form Builder - reCAPTCHA Settings"
      }, /*#__PURE__*/React.createElement(SecureRoute, {
        permission: "fb.settings"
      }, /*#__PURE__*/React.createElement(FormsSettings, null)));
    }
  })
}), new UIViewPlugin(NavigationView, /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(view) {
    var _view$getSecurityHook, identity, formBuilder;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return view.isRendered();

          case 2:
            _view$getSecurityHook = view.getSecurityHook(), identity = _view$getSecurityHook.identity;

            if (identity.getPermission("fb.settings")) {
              _context.next = 5;
              break;
            }

            return _context.abrupt("return");

          case 5:
            formBuilder = view.addSettingsMenuElement(new NavigationMenuElement("menu.settings.formBuilder", {
              label: "Form Builder"
            }));
            formBuilder.addElement(new NavigationMenuElement("menu.settings.formBuilder.recaptcha", {
              label: "reCAPTCHA",
              path: "/settings/form-builder/recaptcha"
            }));

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}())];
export default plugins;
//# sourceMappingURL=index.js.map