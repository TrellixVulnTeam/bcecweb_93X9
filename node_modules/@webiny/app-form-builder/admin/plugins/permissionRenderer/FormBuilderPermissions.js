import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24;

import React, { Fragment, useCallback, useMemo } from "react";
import { Grid, Cell } from "@webiny/ui/Grid";
import { Select } from "@webiny/ui/Select";
import { i18n } from "@webiny/app/i18n";
import { PermissionInfo, gridNoPaddingClass } from "@webiny/app-admin/components/Permissions";
import { Form } from "@webiny/form";
import { Elevation } from "@webiny/ui/Elevation";
import { Typography } from "@webiny/ui/Typography";
import { Checkbox, CheckboxGroup } from "@webiny/ui/Checkbox";
var t = i18n.ns("app-form-builder/admin/plugins/permissionRenderer");
var FB = "fb";
var FB_FULL_ACCESS = "".concat(FB, ".*");
var FB_ACCESS_FORM = "".concat(FB, ".form");
var FB_SETTINGS = "".concat(FB, ".settings");
var FULL_ACCESS = "full";
var NO_ACCESS = "no";
var CUSTOM_ACCESS = "custom";
var pwOptions = [{
  id: "p",
  name: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Publish"])))
}, {
  id: "u",
  name: t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Unpublish"])))
} // { id: "r", name: t`Request review` },
// { id: "c", name: t`Request changes` }
];
export var FormBuilderPermissions = function FormBuilderPermissions(_ref) {
  var value = _ref.value,
      onChange = _ref.onChange;
  var onFormChange = useCallback(function (data) {
    var newValue = [];

    if (Array.isArray(value)) {
      // Let's just filter out the `fb` permission objects, it's easier to build new ones from scratch.
      newValue = value.filter(function (item) {
        return !item.name.startsWith(FB);
      });
    }

    if (data.accessLevel === NO_ACCESS) {
      onChange(newValue);
      return;
    }

    if (data.accessLevel === FULL_ACCESS) {
      newValue.push({
        name: FB_FULL_ACCESS
      });
      onChange(newValue);
      return;
    } // Handling custom access level.


    if (data.formAccessLevel && data.formAccessLevel !== NO_ACCESS) {
      var permission = {
        name: FB_ACCESS_FORM,
        own: false,
        rwd: undefined,
        pw: "",
        submissions: false
      };

      if (data.formAccessLevel === "own") {
        permission.own = true;
        permission.rwd = "rwd";
      } else {
        permission.rwd = data.formRWD || "r";
      }

      if (Array.isArray(data.formPW)) {
        permission.pw = data.formPW.join("");
      }

      if (data.submissionPermissions && data.submissionPermissions !== NO_ACCESS) {
        permission.submissions = true;
      }

      newValue.push(permission);
    } // Settings permission


    if (data.settingsAccessLevel === FULL_ACCESS) {
      newValue.push({
        name: FB_SETTINGS
      });
    }

    onChange(newValue);
  }, [value]);
  var formData = useMemo(function () {
    if (!Array.isArray(value)) {
      return {
        accessLevel: NO_ACCESS
      };
    }

    var hasFullAccess = value.find(function (item) {
      return item.name === FB_FULL_ACCESS || item.name === "*";
    });

    if (hasFullAccess) {
      return {
        accessLevel: FULL_ACCESS
      };
    }

    var permissions = value.filter(function (item) {
      return item.name.startsWith(FB);
    });

    if (!permissions.length) {
      return {
        accessLevel: NO_ACCESS
      };
    } // We're dealing with custom permissions. Let's first prepare data for "forms" and "submissions".


    var data = {
      accessLevel: CUSTOM_ACCESS,
      formAccessLevel: NO_ACCESS,
      formRWD: undefined,
      formPW: undefined,
      submissionPermissions: NO_ACCESS,
      settingsAccessLevel: NO_ACCESS
    };
    var formPermission = permissions.find(function (item) {
      return item.name === FB_ACCESS_FORM;
    });

    if (formPermission) {
      data.formAccessLevel = formPermission.own ? "own" : FULL_ACCESS;

      if (data.formAccessLevel === "own") {
        data.formRWD = "rwd";
      } else {
        data.formRWD = formPermission.rwd;
      }

      data.formPW = (formPermission.pw || "").split("");

      if (formPermission.submissions === true) {
        data.submissionPermissions = FULL_ACCESS;
      }
    }

    var hasSettingsAccess = permissions.find(function (item) {
      return item.name === FB_SETTINGS;
    });

    if (hasSettingsAccess) {
      data.settingsAccessLevel = FULL_ACCESS;
    }

    return data;
  }, []);
  return /*#__PURE__*/React.createElement(Form, {
    data: formData,
    onChange: onFormChange
  }, function (_ref2) {
    var data = _ref2.data,
        Bind = _ref2.Bind,
        setValue = _ref2.setValue;
    return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(Grid, {
      className: gridNoPaddingClass
    }, /*#__PURE__*/React.createElement(Cell, {
      span: 6
    }, /*#__PURE__*/React.createElement(PermissionInfo, {
      title: t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["Access Level"])))
    })), /*#__PURE__*/React.createElement(Cell, {
      span: 6
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "accessLevel"
    }, /*#__PURE__*/React.createElement(Select, {
      label: t(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Access Level"])))
    }, /*#__PURE__*/React.createElement("option", {
      value: NO_ACCESS
    }, t(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["No access"])))), /*#__PURE__*/React.createElement("option", {
      value: FULL_ACCESS
    }, t(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["Full access"])))), /*#__PURE__*/React.createElement("option", {
      value: CUSTOM_ACCESS
    }, t(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["Custom access"])))))))), data.accessLevel === CUSTOM_ACCESS && /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(Elevation, {
      z: 1,
      style: {
        marginTop: 10
      }
    }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Typography, {
      use: "overline"
    }, "Forms")), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Grid, {
      style: {
        padding: 0,
        paddingBottom: 24
      }
    }, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "formAccessLevel",
      beforeChange: function beforeChange(value, cb) {
        if (value === "own") {
          setValue("formRWD", "rwd");
        }

        cb(value);
      }
    }, /*#__PURE__*/React.createElement(Select, {
      label: t(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["Access Scope"]))),
      description: "The scope of forms a user can access."
    }, /*#__PURE__*/React.createElement("option", {
      value: NO_ACCESS
    }, t(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["No access"])))), /*#__PURE__*/React.createElement("option", {
      value: FULL_ACCESS
    }, t(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["All forms"])))), /*#__PURE__*/React.createElement("option", {
      value: "own"
    }, t(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["Only forms created by the user"]))))))), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "formRWD"
    }, /*#__PURE__*/React.createElement(Select, {
      label: t(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["Primary Actions"]))),
      description: "Primary actions a user can perform on the forms.",
      disabled: data.formAccessLevel !== FULL_ACCESS
    }, /*#__PURE__*/React.createElement("option", {
      value: "r"
    }, t(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["Read"])))), /*#__PURE__*/React.createElement("option", {
      value: "rw"
    }, t(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["Read, write"])))), /*#__PURE__*/React.createElement("option", {
      value: "rwd"
    }, t(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["Read, write, delete"]))))))), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "formPW"
    }, /*#__PURE__*/React.createElement(CheckboxGroup, {
      label: t(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["Publishing actions"]))),
      description: t(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["Publishing-related actions that can be performed on the forms."])))
    }, function (_ref3) {
      var getValue = _ref3.getValue,
          onChange = _ref3.onChange;
      return pwOptions.map(function (_ref4) {
        var id = _ref4.id,
            name = _ref4.name;
        return /*#__PURE__*/React.createElement(Checkbox, {
          disabled: !["full", "own"].includes(data.formAccessLevel),
          key: id,
          label: name,
          value: getValue(id),
          onChange: onChange(id)
        });
      });
    }))), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "submissionPermissions"
    }, /*#__PURE__*/React.createElement(Select, {
      label: t(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral(["Form Submissions"]))),
      description: "The scope of form submissions a user can access.",
      disabled: !data.formAccessLevel || data.formAccessLevel === NO_ACCESS
    }, /*#__PURE__*/React.createElement("option", {
      value: NO_ACCESS
    }, t(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral(["None"])))), /*#__PURE__*/React.createElement("option", {
      value: FULL_ACCESS
    }, t(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral(["All form submissions"]))))))))))), /*#__PURE__*/React.createElement(Elevation, {
      z: 1,
      style: {
        marginTop: 10
      }
    }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Typography, {
      use: "overline"
    }, t(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral(["Settings"]))))), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Grid, {
      style: {
        padding: 0,
        paddingBottom: 24
      }
    }, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "settingsAccessLevel"
    }, /*#__PURE__*/React.createElement(Select, {
      label: t(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral(["Access Scope"]))),
      description: "The scope of app settings a user can access."
    }, /*#__PURE__*/React.createElement("option", {
      value: NO_ACCESS
    }, t(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral(["None"])))), /*#__PURE__*/React.createElement("option", {
      value: FULL_ACCESS
    }, t(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral(["All settings"])))))))))))));
  });
};
//# sourceMappingURL=FormBuilderPermissions.js.map