import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { useApolloClient, useMutation } from "@apollo/react-hooks";
import { useCallback, useEffect, useReducer } from "react";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import * as GQL from "../../../../graphql";
export default (function (form) {
  var _useReducer = useReducer(function (prev, next) {
    return _objectSpread(_objectSpread({}, prev), next);
  }, {
    loading: false,
    page: 0,
    cursors: {
      0: null
    },
    exportInProgress: false,
    submissions: [],
    sort: {
      createdOn: -1
    }
  }),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      state = _useReducer2[0],
      setState = _useReducer2[1];

  var client = useApolloClient();

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var loadSubmissions = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var fetchPolicy,
          _yield$client$query,
          res,
          _res$formBuilder$list,
          data,
          meta,
          _args = arguments;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              fetchPolicy = _args.length > 0 && _args[0] !== undefined ? _args[0] : "cache-first";
              setState({
                loading: true
              });
              _context.next = 4;
              return client.query({
                query: GQL.LIST_FORM_SUBMISSIONS,
                variables: {
                  form: form.id,
                  sort: state.sort,
                  after: state.cursors[state.page]
                },
                fetchPolicy: fetchPolicy
              });

            case 4:
              _yield$client$query = _context.sent;
              res = _yield$client$query.data;
              _res$formBuilder$list = res.formBuilder.listFormSubmissions, data = _res$formBuilder$list.data, meta = _res$formBuilder$list.meta;
              setState({
                loading: false,
                submissions: data,
                cursors: _objectSpread(_objectSpread({}, state.cursors), {}, _defineProperty({}, state.page + 1, meta.hasMoreItems ? meta.cursor : undefined))
              });

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function loadSubmissions() {
      return _ref.apply(this, arguments);
    };
  }();

  useEffect(function () {
    loadSubmissions();
  }, [form.id, state.page, state.sort]);

  var _useMutation = useMutation(GQL.EXPORT_FORM_SUBMISSIONS),
      _useMutation2 = _slicedToArray(_useMutation, 1),
      exportFormSubmission = _useMutation2[0];

  var exportSubmissions = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    var _yield$exportFormSubm, data, _data$formBuilder$exp, csvFile, error;

    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            setState({
              exportInProgress: true
            });
            _context2.next = 3;
            return exportFormSubmission({
              variables: {
                form: form.id
              }
            });

          case 3:
            _yield$exportFormSubm = _context2.sent;
            data = _yield$exportFormSubm.data;
            setState({
              exportInProgress: false
            });
            _data$formBuilder$exp = data.formBuilder.exportFormSubmissions, csvFile = _data$formBuilder$exp.data, error = _data$formBuilder$exp.error;

            if (!error) {
              _context2.next = 10;
              break;
            }

            showSnackbar(error.message);
            return _context2.abrupt("return");

          case 10:
            window.open(csvFile.src, "_blank");

          case 11:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })), [form]);
  var hasPreviousPage = state.page > 0;
  var hasNextPage = typeof state.cursors[state.page + 1] === "string";
  return {
    loading: state.loading,
    refresh: function refresh() {
      return loadSubmissions("network-only");
    },
    submissions: state.submissions,
    setSorter: function setSorter(sort) {
      setState({
        sort: sort
      });
    },
    hasPreviousPage: hasPreviousPage,
    hasNextPage: hasNextPage,
    nextPage: function nextPage() {
      if (!hasNextPage) {
        return;
      }

      setState({
        page: state.page + 1
      });
    },
    previousPage: function previousPage() {
      if (!hasPreviousPage) {
        return;
      }

      setState({
        page: state.page - 1
      });
    },
    exportSubmissions: exportSubmissions,
    exportInProgress: state.exportInProgress
  };
});
//# sourceMappingURL=useSubmissions.js.map