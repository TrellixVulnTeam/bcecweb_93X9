import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React from "react";
import { useApolloClient } from "@apollo/react-hooks";
import { useRouter } from "@webiny/react-router";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { IconButton } from "@webiny/ui/Button";
import { Tooltip } from "@webiny/ui/Tooltip";
import { ConfirmationDialog } from "@webiny/ui/ConfirmationDialog";
import { ReactComponent as DeleteIcon } from "@svgr/webpack!../../../../icons/delete.svg";
import * as queries from "../../../../graphql";
import { removeFormFromListCache, removeRevisionFromFormCache, updateLatestRevisionInListCache } from "../../../../views/cache";
import usePermission from "../../../../../hooks/usePermission";

var DeleteRevision = function DeleteRevision(_ref) {
  var revisions = _ref.revisions,
      form = _ref.form,
      revision = _ref.revision,
      selectRevision = _ref.selectRevision;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var client = useApolloClient();

  var _useRouter = useRouter(),
      history = _useRouter.history;

  var _usePermission = usePermission(),
      canDelete = _usePermission.canDelete; // Render nothing is user doesn't have required permission.


  if (!canDelete(form)) {
    return null;
  }

  var message = "You are about to delete this form revision, are you sure want to continue?";
  var lastRevision = revisions.length === 1;

  if (lastRevision) {
    message = "You are about to delete this form. Are you sure want to continue?";
  }

  return /*#__PURE__*/React.createElement(Tooltip, {
    content: "Delete",
    placement: "top"
  }, /*#__PURE__*/React.createElement(ConfirmationDialog, {
    title: "Confirmation required!",
    message: message,
    "data-testid": "fb.form-preview.header.delete-dialog"
  }, function (_ref2) {
    var showConfirmation = _ref2.showConfirmation;
    return /*#__PURE__*/React.createElement(IconButton, {
      "data-testid": "fb.form-preview.header.delete",
      icon: /*#__PURE__*/React.createElement(DeleteIcon, null),
      onClick: function onClick() {
        return showConfirmation( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return client.mutate({
                    mutation: lastRevision ? queries.DELETE_FORM : queries.DELETE_REVISION,
                    variables: lastRevision ? {
                      id: revision.id
                    } : {
                      revision: revision.id
                    },
                    update: function update(cache, _ref4) {
                      var data = _ref4.data;
                      var error = data.formBuilder.deleteForm.error;

                      if (error) {
                        return showSnackbar(error.message);
                      }

                      showSnackbar("".concat(lastRevision ? "Form" : "Revision", " was deleted successfully!"));

                      if (lastRevision) {
                        removeFormFromListCache(cache, form); // Redirect

                        // Redirect
                        return history.push("/form-builder/forms");
                      } // We have other revisions, update form's cache


                      // We have other revisions, update form's cache
                      var revisions = removeRevisionFromFormCache(cache, form, revision);
                      updateLatestRevisionInListCache(cache, revisions[0]); // Redirect to the first revision in the list of all form revisions.

                      // Redirect to the first revision in the list of all form revisions.
                      var firstRevision = revisions[0];
                      selectRevision(firstRevision);

                      if (revision.id === form.id) {
                        return history.push("/form-builder/forms?id=".concat(encodeURIComponent(firstRevision.id)));
                      }
                    }
                  });

                case 2:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        })));
      }
    });
  }));
};

export default DeleteRevision;
//# sourceMappingURL=DeleteRevision.js.map