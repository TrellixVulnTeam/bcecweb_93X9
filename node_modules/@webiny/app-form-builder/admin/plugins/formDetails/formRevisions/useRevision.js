import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React from "react";
import { useRouter } from "@webiny/react-router";
import { useApolloClient } from "@apollo/react-hooks";
import { useHandlers } from "@webiny/app/hooks/useHandlers";
import { CREATE_REVISION_FROM, DELETE_REVISION, PUBLISH_REVISION, UNPUBLISH_REVISION } from "../../../graphql";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { removeRevisionFromFormCache, updateLatestRevisionInListCache, addRevisionToRevisionsCache } from "../../../views/cache";
export var useRevision = function useRevision(_ref) {
  var revision = _ref.revision,
      form = _ref.form;

  var _useRouter = useRouter(),
      history = _useRouter.history;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var client = useApolloClient();

  var _useHandlers = useHandlers(null, {
    createRevision: function createRevision() {
      return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _yield$client$mutate, res, _res$formBuilder$revi, data, error;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return client.mutate({
                  mutation: CREATE_REVISION_FROM,
                  variables: {
                    revision: revision.id
                  },
                  update: function update(cache, _ref3) {
                    var data = _ref3.data;
                    var newRevision = data.formBuilder.revision.data;
                    updateLatestRevisionInListCache(cache, newRevision);
                    addRevisionToRevisionsCache(cache, newRevision);
                  }
                });

              case 2:
                _yield$client$mutate = _context.sent;
                res = _yield$client$mutate.data;
                _res$formBuilder$revi = res.formBuilder.revision, data = _res$formBuilder$revi.data, error = _res$formBuilder$revi.error;

                if (!error) {
                  _context.next = 7;
                  break;
                }

                return _context.abrupt("return", showSnackbar(error.message));

              case 7:
                history.push("/form-builder/forms/".concat(encodeURIComponent(data.id)));

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
    },
    editRevision: function editRevision() {
      return function () {
        history.push("/form-builder/forms/".concat(encodeURIComponent(revision.id)));
      };
    },
    deleteRevision: function deleteRevision() {
      return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return client.mutate({
                  mutation: DELETE_REVISION,
                  variables: {
                    revision: revision.id
                  },
                  update: function update(cache, updated) {
                    var error = updated.data.formBuilder.deleteForm.error; // `deleteForm` because we assigned an alias

                    // `deleteForm` because we assigned an alias
                    if (error) {
                      return showSnackbar(error.message);
                    } // We have other revisions, update form's cache


                    // We have other revisions, update form's cache
                    var revisions = removeRevisionFromFormCache(cache, form, revision);

                    if (revision.id === form.id) {
                      updateLatestRevisionInListCache(cache, revisions[0]); // Redirect to the first revision in the list of all form revisions.

                      // Redirect to the first revision in the list of all form revisions.
                      return history.push("/form-builder/forms?id=".concat(encodeURIComponent(revisions[0].id)));
                    }
                  }
                });

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
    },
    publishRevision: function publishRevision() {
      return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var _yield$client$mutate2, res, error;

        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return client.mutate({
                  mutation: PUBLISH_REVISION,
                  variables: {
                    revision: revision.id
                  }
                });

              case 2:
                _yield$client$mutate2 = _context3.sent;
                res = _yield$client$mutate2.data;
                error = res.formBuilder.publishRevision.error;

                if (!error) {
                  _context3.next = 7;
                  break;
                }

                return _context3.abrupt("return", showSnackbar(error.message));

              case 7:
                showSnackbar( /*#__PURE__*/React.createElement("span", null, "Successfully published revision ", /*#__PURE__*/React.createElement("strong", null, "#", revision.version), "!"));

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));
    },
    unpublishRevision: function unpublishRevision() {
      return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return client.mutate({
                  mutation: UNPUBLISH_REVISION,
                  variables: {
                    revision: revision.id
                  }
                });

              case 2:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));
    }
  }),
      createRevision = _useHandlers.createRevision,
      editRevision = _useHandlers.editRevision,
      deleteRevision = _useHandlers.deleteRevision,
      publishRevision = _useHandlers.publishRevision,
      unpublishRevision = _useHandlers.unpublishRevision;

  return {
    createRevision: createRevision,
    editRevision: editRevision,
    deleteRevision: deleteRevision,
    publishRevision: publishRevision,
    unpublishRevision: unpublishRevision
  };
};
//# sourceMappingURL=useRevision.js.map