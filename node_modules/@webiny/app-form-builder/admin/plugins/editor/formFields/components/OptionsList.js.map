{"version":3,"sources":["../../../../../../src/admin/plugins/editor/formFields/components/OptionsList.tsx"],"names":["React","useState","css","styled","OptionsListItem","AddOptionInput","EditFieldOptionDialog","sortableContainer","sortableElement","sortableHandle","Icon","validation","OptionList","padding","border","OptionListItem","zIndex","display","justifyContent","borderBottom","background","sortableList","DragHandle","cursor","SortableContainer","children","SortableItem","setOptionsValue","setEditOption","option","options","optionsValue","Bind","multiple","optionIndex","value","newValue","splice","index","data","OptionsList","form","editOption","clearEditOption","create","optionsValidation","onChange","label","Array","isArray","push","position","length","oldIndex","newIndex","movedItem","map","item","textAlign"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,GAAT,QAAoB,SAApB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,SAASC,eAAT,EAA0BC,cAA1B,EAA0CC,qBAA1C,kC,CACA;;AACA,SAASC,iBAAT,EAA4BC,eAA5B,EAA6CC,cAA7C,QAAmE,oBAAnE;AACA,SAASC,IAAT,QAAqB,iBAArB;;AAEA,SAASC,UAAT,QAA2B,oBAA3B;AAGA,IAAMC,UAAU,gBAAGT,MAAH,CAAU,IAAV;AAAA;AAAA;AAAA,GAAgB;AAC5BU,EAAAA,OAAO,EAAE,EADmB;AAE5BC,EAAAA,MAAM,EAAE;AAFoB,CAAhB,CAAhB;AAKA,IAAMC,cAAc,gBAAGZ,MAAH,CAAU,IAAV;AAAA;AAAA;AAAA,GAAgB;AAChCa,EAAAA,MAAM,EAAE,EADwB;AAEhCC,EAAAA,OAAO,EAAE,MAFuB;AAGhCC,EAAAA,cAAc,EAAE,eAHgB;AAIhCC,EAAAA,YAAY,EAAE,uCAJkB;AAKhCC,EAAAA,UAAU,EAAE,0BALoB;AAMhC,aAAW;AACPA,IAAAA,UAAU,EAAE;AADL,GANqB;AAShC,kBAAgB;AACZN,IAAAA,MAAM,EAAE;AADI;AATgB,CAAhB,CAApB;AAcA,IAAMO,YAAY,gBAAGnB,GAAG,CAAC;AACrBc,EAAAA,MAAM,EAAE;AADa,CAAD,wBAAxB;AAIA,IAAMM,UAAU,GAAGb,cAAc,CAAC;AAAA,sBAC9B,oBAAC,IAAD;AAAM,IAAA,IAAI,eAAE,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAE;AAAEc,QAAAA,MAAM,EAAE;AAAV;AAAnB;AAAZ,IAD8B;AAAA,CAAD,CAAjC;AAIA,IAAMC,iBAAiB,GAAGjB,iBAAiB,CAAC,gBAAkB;AAAA,MAAfkB,QAAe,QAAfA,QAAe;AAC1D,sBAAO,oBAAC,UAAD,QAAaA,QAAb,CAAP;AACH,CAF0C,CAA3C;AAIA,IAAMC,YAAY,GAAGlB,eAAe,CAChC;AAAA,MACImB,eADJ,SACIA,eADJ;AAAA,MAEIC,aAFJ,SAEIA,aAFJ;AAAA,MAGIC,MAHJ,SAGIA,MAHJ;AAAA,MAIkBC,OAJlB,SAIIC,YAJJ;AAAA,MAKIC,IALJ,SAKIA,IALJ;AAAA,MAMIC,QANJ,SAMIA,QANJ;AAAA,MAOIC,WAPJ,SAOIA,WAPJ;AAAA,sBASI,oBAAC,cAAD,qBACI,oBAAC,eAAD;AACI,IAAA,UAAU,eAAE,oBAAC,UAAD,OADhB;AAEI,IAAA,GAAG,EAAEL,MAAM,CAACM,KAFhB;AAGI,IAAA,IAAI,EAAEH,IAHV;AAII,IAAA,QAAQ,EAAEC,QAJd;AAKI,IAAA,MAAM,EAAEJ,MALZ;AAMI,IAAA,YAAY,EAAE,wBAAM;AAChB,UAAMO,QAAQ,sBAAON,OAAP,CAAd;;AACAM,MAAAA,QAAQ,CAACC,MAAT,CAAgBH,WAAhB,EAA6B,CAA7B;AACAP,MAAAA,eAAe,CAACS,QAAD,CAAf;AACH,KAVL;AAWI,IAAA,UAAU,EAAE;AAAA,aAAMR,aAAa,CAAC;AAAEU,QAAAA,KAAK,EAAEJ,WAAT;AAAsBK,QAAAA,IAAI,EAAE,WAAUV,MAAV;AAA5B,OAAD,CAAnB;AAAA;AAXhB,IADJ,CATJ;AAAA,CADgC,CAApC;;AAiCA,IAAMW,WAAW,GAAG,SAAdA,WAAc,QAA0C;AAAA,MAAvCC,IAAuC,SAAvCA,IAAuC;AAAA,MAAjCR,QAAiC,SAAjCA,QAAiC;AAC1D,MAAQD,IAAR,GAAiBS,IAAjB,CAAQT,IAAR;;AAEA,kBAAoC/B,QAAQ,CAAC;AACzCsC,IAAAA,IAAI,EAAE,IADmC;AAEzCD,IAAAA,KAAK,EAAE;AAFkC,GAAD,CAA5C;AAAA;AAAA,MAAOI,UAAP;AAAA,MAAmBd,aAAnB;;AAIA,MAAMe,eAAe,GAAG,SAAlBA,eAAkB;AAAA,WACpBf,aAAa,CAAC;AACVW,MAAAA,IAAI,EAAE,IADI;AAEVD,MAAAA,KAAK,EAAE;AAFG,KAAD,CADO;AAAA,GAAxB;;AAMA,sBACI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE,SAAZ;AAAuB,IAAA,UAAU,EAAE3B,UAAU,CAACiC,MAAX,CAAkB,sBAAlB;AAAnC,KACK;AAAA,QACeC,iBADf,SACGlC,UADH;AAAA,QAEUoB,YAFV,SAEGI,KAFH;AAAA,QAGaR,eAHb,SAGGmB,QAHH;AAAA,wBAKG,uDACI,2CADJ,eAEI,8CACI,oBAAC,cAAD;AACI,MAAA,OAAO,EAAEf,YADb;AAEI,MAAA,UAAU,EAAEc,iBAFhB;AAGI,MAAA,KAAK,EAAE,eAAAE,KAAK,EAAI;AACZ,YAAMX,QAAQ,GAAGY,KAAK,CAACC,OAAN,CAAclB,YAAd,uBACPA,YADO,IAEX,EAFN;AAGAK,QAAAA,QAAQ,CAACc,IAAT,CAAc;AACVf,UAAAA,KAAK,EAAE,WAAUY,KAAV,CADG;AAEVA,UAAAA,KAAK,EAALA;AAFU,SAAd;AAIApB,QAAAA,eAAe,CAACS,QAAD,CAAf;AACH;AAZL,MADJ,CAFJ,eAmBI;AAAK,MAAA,KAAK,EAAE;AAAEe,QAAAA,QAAQ,EAAE;AAAZ;AAAZ,OACKH,KAAK,CAACC,OAAN,CAAclB,YAAd,KAA+BA,YAAY,CAACqB,MAAb,GAAsB,CAArD,gBACG,oBAAC,iBAAD;AACI,MAAA,WAAW,EAAE/B,YADjB;AAEI,MAAA,aAAa,MAFjB;AAGI,MAAA,kBAAkB,EAAE,CAHxB;AAII,MAAA,SAAS,EAAE,0BAA4B;AAAA,YAAzBgC,QAAyB,SAAzBA,QAAyB;AAAA,YAAfC,QAAe,SAAfA,QAAe;;AACnC,YAAMlB,QAAQ,sBAAOL,YAAP,CAAd;;AACA,+BAAoBK,QAAQ,CAACC,MAAT,CAAgBgB,QAAhB,EAA0B,CAA1B,CAApB;AAAA;AAAA,YAAOE,SAAP;;AACAnB,QAAAA,QAAQ,CAACC,MAAT,CAAgBiB,QAAhB,EAA0B,CAA1B,EAA6BC,SAA7B;AACA5B,QAAAA,eAAe,CAACS,QAAD,CAAf;AACH;AATL,OAWKL,YAAY,CAACyB,GAAb,CAAiB,UAACC,IAAD,EAAOnB,KAAP;AAAA,0BACd,oBAAC,YAAD;AACI,QAAA,GAAG,iBAAUA,KAAV,CADP;AAEI,QAAA,IAAI,EAAEN,IAFV;AAGI,QAAA,QAAQ,EAAEC,QAHd;AAII,QAAA,aAAa,EAAEL,aAJnB;AAKI,QAAA,eAAe,EAAED,eALrB;AAMI,QAAA,MAAM,EAAE8B,IANZ;AAOI,QAAA,YAAY,EAAE1B,YAPlB;AAQI,QAAA,WAAW,EAAEO,KARjB;AASI,QAAA,KAAK,EAAEA;AATX,QADc;AAAA,KAAjB,CAXL,CADH,gBA2BG;AAAK,MAAA,KAAK,EAAE;AAAEzB,QAAAA,OAAO,EAAE,EAAX;AAAe6C,QAAAA,SAAS,EAAE;AAA1B;AAAZ,2BA5BR,CAnBJ,eAqDI,oBAAC,qBAAD;AACI,MAAA,OAAO,EAAEf,eADb;AAEI,MAAA,IAAI,EAAED,UAAU,CAACH,IAFrB;AAGI,MAAA,OAAO,EAAER,YAHb;AAII,MAAA,MAAM,EAAEW,UAAU,CAACH,IAJvB;AAKI,MAAA,WAAW,EAAEG,UAAU,CAACJ,KAL5B;AAMI,MAAA,QAAQ,EAAE,kBAAAC,IAAI,EAAI;AACd,YAAMH,QAAQ,sBAAOL,YAAP,CAAd;;AACAK,QAAAA,QAAQ,CAACC,MAAT,CAAgBK,UAAU,CAACJ,KAA3B,EAAkC,CAAlC,EAAqCC,IAArC;AACAZ,QAAAA,eAAe,CAACS,QAAD,CAAf;AACAO,QAAAA,eAAe;AAClB;AAXL,MArDJ,CALH;AAAA,GADL,CADJ;AA6EH,CA1FD;;AA4FA,eAAeH,WAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { css } from \"emotion\";\nimport styled from \"@emotion/styled\";\nimport { camelCase, cloneDeep } from \"lodash\";\nimport { OptionsListItem, AddOptionInput, EditFieldOptionDialog } from \"./OptionsListComponents\";\n// @ts-ignore\nimport { sortableContainer, sortableElement, sortableHandle } from \"react-sortable-hoc\";\nimport { Icon } from \"@webiny/ui/Icon\";\nimport { ReactComponent as HandleIcon } from \"../../../../icons/round-drag_indicator-24px.svg\";\nimport { validation } from \"@webiny/validation\";\nimport { FormRenderPropParams } from \"@webiny/form/Form\";\n\nconst OptionList = styled(\"ul\")({\n    padding: 25,\n    border: \"1px solid var(--mdc-theme-on-background)\"\n});\n\nconst OptionListItem = styled(\"li\")({\n    zIndex: 10,\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    borderBottom: \"1px solid var(--mdc-theme-background)\",\n    background: \"var(--mdc-theme-surface)\",\n    \"&:hover\": {\n        background: \"var(--mdc-theme-background)\"\n    },\n    \"&:last-child\": {\n        border: \"none\"\n    }\n});\n\nconst sortableList = css({\n    zIndex: 20\n});\n\nconst DragHandle = sortableHandle(() => (\n    <Icon icon={<HandleIcon style={{ cursor: \"pointer\" }} />} />\n));\n\nconst SortableContainer = sortableContainer(({ children }) => {\n    return <OptionList>{children}</OptionList>;\n});\n\nconst SortableItem = sortableElement(\n    ({\n        setOptionsValue,\n        setEditOption,\n        option,\n        optionsValue: options,\n        Bind,\n        multiple,\n        optionIndex\n    }) => (\n        <OptionListItem>\n            <OptionsListItem\n                dragHandle={<DragHandle />}\n                key={option.value}\n                Bind={Bind}\n                multiple={multiple}\n                option={option}\n                deleteOption={() => {\n                    const newValue = [...options];\n                    newValue.splice(optionIndex, 1);\n                    setOptionsValue(newValue);\n                }}\n                editOption={() => setEditOption({ index: optionIndex, data: cloneDeep(option) })}\n            />\n        </OptionListItem>\n    )\n);\n\ntype OptionsListProps = {\n    form: FormRenderPropParams;\n    multiple?: boolean;\n};\n\nconst OptionsList = ({ form, multiple }: OptionsListProps) => {\n    const { Bind } = form;\n\n    const [editOption, setEditOption] = useState({\n        data: null,\n        index: null\n    });\n    const clearEditOption = () =>\n        setEditOption({\n            data: null,\n            index: null\n        });\n\n    return (\n        <Bind name={\"options\"} validators={validation.create(\"required,minLength:1\")}>\n            {({\n                validation: optionsValidation,\n                value: optionsValue,\n                onChange: setOptionsValue\n            }) => (\n                <>\n                    <div>Options</div>\n                    <div>\n                        <AddOptionInput\n                            options={optionsValue}\n                            validation={optionsValidation}\n                            onAdd={label => {\n                                const newValue = Array.isArray(optionsValue)\n                                    ? [...optionsValue]\n                                    : [];\n                                newValue.push({\n                                    value: camelCase(label),\n                                    label\n                                });\n                                setOptionsValue(newValue);\n                            }}\n                        />\n                    </div>\n\n                    <div style={{ position: \"relative\" }}>\n                        {Array.isArray(optionsValue) && optionsValue.length > 0 ? (\n                            <SortableContainer\n                                helperClass={sortableList}\n                                useDragHandle\n                                transitionDuration={0}\n                                onSortEnd={({ oldIndex, newIndex }) => {\n                                    const newValue = [...optionsValue];\n                                    const [movedItem] = newValue.splice(oldIndex, 1);\n                                    newValue.splice(newIndex, 0, movedItem);\n                                    setOptionsValue(newValue);\n                                }}\n                            >\n                                {optionsValue.map((item, index) => (\n                                    <SortableItem\n                                        key={`item-${index}`}\n                                        Bind={Bind}\n                                        multiple={multiple}\n                                        setEditOption={setEditOption}\n                                        setOptionsValue={setOptionsValue}\n                                        option={item}\n                                        optionsValue={optionsValue}\n                                        optionIndex={index}\n                                        index={index}\n                                    />\n                                ))}\n                            </SortableContainer>\n                        ) : (\n                            <div style={{ padding: 40, textAlign: \"center\" }}>\n                                No options added.\n                            </div>\n                        )}\n                    </div>\n\n                    <EditFieldOptionDialog\n                        onClose={clearEditOption}\n                        open={editOption.data}\n                        options={optionsValue}\n                        option={editOption.data}\n                        optionIndex={editOption.index}\n                        onSubmit={data => {\n                            const newValue = [...optionsValue];\n                            newValue.splice(editOption.index, 1, data);\n                            setOptionsValue(newValue);\n                            clearEditOption();\n                        }}\n                    />\n                </>\n            )}\n        </Bind>\n    );\n};\n\nexport default OptionsList;\n"],"file":"OptionsList.js"}