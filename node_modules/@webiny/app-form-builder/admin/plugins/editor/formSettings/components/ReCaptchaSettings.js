import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
var _excluded = ["onChange"];
import React, { useState, useCallback } from "react";
import { Grid, Cell } from "@webiny/ui/Grid";
import { Switch } from "@webiny/ui/Switch";
import { useQuery } from "@apollo/react-hooks";
import { GET_RECAPTCHA_SETTINGS } from "./graphql";
import ReCaptchaSettingsDialog from "./ReCaptchaSettingsDialog";
import { Alert } from "@webiny/ui/Alert";
import { Input } from "@webiny/ui/Input";

var ReCaptchaSettings = function ReCaptchaSettings(_ref) {
  var _data$formBuilder, _data$formBuilder$get, _data$formBuilder$get2, _formData$reCaptcha;

  var Bind = _ref.Bind,
      formData = _ref.formData;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      dialogOpened = _useState2[0],
      setDialogOpened = _useState2[1];

  var openDialog = useCallback(function () {
    return setDialogOpened(true);
  }, []);
  var closeDialog = useCallback(function () {
    return setDialogOpened(false);
  }, []);

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      settingsLoaded = _useState4[0],
      setSettingsLoaded = _useState4[1];

  var _useQuery = useQuery(GET_RECAPTCHA_SETTINGS, {
    onCompleted: function onCompleted() {
      return setSettingsLoaded(true);
    }
  }),
      data = _useQuery.data,
      refetch = _useQuery.refetch;

  var settings = (data === null || data === void 0 ? void 0 : (_data$formBuilder = data.formBuilder) === null || _data$formBuilder === void 0 ? void 0 : (_data$formBuilder$get = _data$formBuilder.getSettings) === null || _data$formBuilder$get === void 0 ? void 0 : (_data$formBuilder$get2 = _data$formBuilder$get.data) === null || _data$formBuilder$get2 === void 0 ? void 0 : _data$formBuilder$get2.reCaptcha) || {};
  var reCaptchaEnabledInSettings = settings.enabled && settings.siteKey && settings.secretKey;
  var reCaptchaEnabled = formData === null || formData === void 0 ? void 0 : (_formData$reCaptcha = formData.reCaptcha) === null || _formData$reCaptcha === void 0 ? void 0 : _formData$reCaptcha.enabled;
  return /*#__PURE__*/React.createElement(Bind, {
    name: "reCaptcha.enabled"
  }, function (_ref2) {
    var _onChange = _ref2.onChange,
        rest = _objectWithoutProperties(_ref2, _excluded);

    return /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Switch, Object.assign({
      onChange: function onChange(value) {
        if (value && !reCaptchaEnabledInSettings) {
          openDialog();
          return;
        }

        _onChange(value);
      }
    }, rest, {
      label: "Enabled",
      description: "Will require users to \"confirm they are human\" by clicking on a special checkbox."
    }))), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "reCaptcha.errorMessage"
    }, /*#__PURE__*/React.createElement(Input, {
      disabled: !reCaptchaEnabled,
      label: "Error message"
    }))), settingsLoaded && !reCaptchaEnabledInSettings && /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Alert, {
      type: "danger",
      title: "Google reCAPTCHA not enabled."
    }, "Click", " ", /*#__PURE__*/React.createElement("a", {
      href: "#",
      onClick: openDialog
    }, "here"), " ", "to update your Google reCAPTCHA settings.")), /*#__PURE__*/React.createElement(ReCaptchaSettingsDialog, {
      reCaptchaSettings: settings,
      open: dialogOpened,
      onClose: closeDialog,
      onSubmit: function onSubmit() {
        refetch();

        _onChange(true);

        closeDialog();
      }
    }));
  });
};

export default ReCaptchaSettings;
//# sourceMappingURL=ReCaptchaSettings.js.map