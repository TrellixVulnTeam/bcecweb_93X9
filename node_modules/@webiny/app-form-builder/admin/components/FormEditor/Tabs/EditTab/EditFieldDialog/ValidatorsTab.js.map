{"version":3,"sources":["../../../../../../../src/admin/components/FormEditor/Tabs/EditTab/EditFieldDialog/ValidatorsTab.tsx"],"names":["React","useMemo","plugins","Switch","SimpleForm","SimpleFormContent","SimpleFormHeader","useFormEditor","Form","Grid","Cell","Input","validation","onEnabledChange","data","validationValue","onChangeValidation","validator","index","findIndex","item","name","slice","settings","defaultSettings","message","defaultMessage","onFormChange","validatorIndex","newValidationValue","ValidatorsTab","props","getFieldPlugin","field","Bind","form","fieldPlugin","validators","byType","map","plugin","includes","optional","filter","Boolean","sort","a","b","value","onChange","label","setValue","create","renderSettings","setMessage"],"mappings":"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","sourcesContent":["import React, { useMemo } from \"react\";\nimport { plugins } from \"@webiny/plugins\";\nimport { Switch } from \"@webiny/ui/Switch\";\nimport {\n    SimpleForm,\n    SimpleFormContent,\n    SimpleFormHeader\n} from \"@webiny/app-admin/components/SimpleForm\";\nimport { useFormEditor } from \"../../../Context\";\nimport { Form } from \"@webiny/form\";\nimport { cloneDeep, debounce } from \"lodash\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { Input } from \"@webiny/ui/Input\";\nimport { validation } from \"@webiny/validation\";\nimport { FbBuilderFormFieldValidatorPlugin } from \"../../../../../../types\";\n\nconst onEnabledChange = ({ data, validationValue, onChangeValidation, validator }) => {\n    if (data) {\n        const index = validationValue.findIndex(item => item.name === validator.name);\n        onChangeValidation([\n            ...validationValue.slice(0, index),\n            ...validationValue.slice(index + 1)\n        ]);\n    } else {\n        onChangeValidation([\n            ...validationValue,\n            {\n                name: validator.name,\n                settings: validator.defaultSettings,\n                message: validator.defaultMessage\n            }\n        ]);\n    }\n};\n\nconst onFormChange = debounce(({ data, validationValue, onChangeValidation, validatorIndex }) => {\n    const newValidationValue = cloneDeep(validationValue);\n    newValidationValue[validatorIndex] = {\n        ...newValidationValue[validatorIndex],\n        ...cloneDeep(data)\n    };\n    onChangeValidation(newValidationValue);\n}, 200);\n\nconst ValidatorsTab = props => {\n    const { getFieldPlugin } = useFormEditor();\n    const {\n        field,\n        form: { Bind }\n    } = props;\n\n    const fieldPlugin = getFieldPlugin({ name: field.name });\n\n    const validators = useMemo(() => {\n        return plugins\n            .byType<FbBuilderFormFieldValidatorPlugin>(\"form-editor-field-validator\")\n            .map(plugin => plugin.validator)\n            .map(validator => {\n                if (fieldPlugin.field.validators.includes(validator.name)) {\n                    return { optional: true, validator };\n                } else if (fieldPlugin.field.validators.includes(`!${validator.name}`)) {\n                    return { optional: false, validator };\n                }\n                return null;\n            })\n            .filter(Boolean)\n            .sort((a, b) => {\n                if (!a.optional && b.optional) {\n                    return -1;\n                }\n\n                if (a.optional && !b.optional) {\n                    return 1;\n                }\n\n                return 0;\n            });\n    }, []);\n\n    return (\n        <Bind name={\"validation\"}>\n            {({ value: validationValue, onChange: onChangeValidation }) =>\n                validators.map(({ optional, validator }) => {\n                    const validatorIndex = validationValue.findIndex(\n                        item => item.name === validator.name\n                    );\n                    const data = validationValue[validatorIndex];\n\n                    return (\n                        <SimpleForm key={validator.name}>\n                            {/*TODO: @ts-adrian nema descriptiona?*/}\n                            <SimpleFormHeader title={validator.label}>\n                                {optional && (\n                                    <Switch\n                                        label=\"Enabled\"\n                                        value={validatorIndex >= 0}\n                                        onChange={() =>\n                                            onEnabledChange({\n                                                data,\n                                                validationValue,\n                                                onChangeValidation,\n                                                validator\n                                            })\n                                        }\n                                    />\n                                )}\n                            </SimpleFormHeader>\n                            {data && (\n                                <Form\n                                    data={data}\n                                    onChange={data =>\n                                        onFormChange({\n                                            data,\n                                            validationValue,\n                                            onChangeValidation,\n                                            validatorIndex\n                                        })\n                                    }\n                                >\n                                    {({ Bind, setValue }) => (\n                                        <SimpleFormContent>\n                                            <Grid>\n                                                <Cell span={12}>\n                                                    {/*TODO: @ts-adrian kako ovo?*/}\n                                                    <Bind\n                                                        name={\"message\"}\n                                                        validators={validation.create(\"required\")}\n                                                    >\n                                                        <Input\n                                                            label={\"Message\"}\n                                                            description={\n                                                                \"This message will be displayed to the user\"\n                                                            }\n                                                        />\n                                                    </Bind>\n                                                </Cell>\n                                            </Grid>\n\n                                            {typeof validator.renderSettings === \"function\" &&\n                                                validator.renderSettings({\n                                                    setValue,\n                                                    setMessage: message => {\n                                                        setValue(\"message\", message);\n                                                    },\n                                                    data,\n                                                    Bind\n                                                })}\n                                        </SimpleFormContent>\n                                    )}\n                                </Form>\n                            )}\n                        </SimpleForm>\n                    );\n                })\n            }\n        </Bind>\n    );\n};\n\nexport default ValidatorsTab;\n"],"file":"ValidatorsTab.js"}