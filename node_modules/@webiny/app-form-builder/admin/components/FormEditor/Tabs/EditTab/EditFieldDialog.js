import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _cloneDeep from "lodash/cloneDeep";

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7;

var _excluded = ["field", "onSubmit"];
import React, { useState, useEffect, useCallback } from "react";
import { css } from "emotion";
import styled from "@emotion/styled";
import { Dialog, DialogContent, DialogTitle, DialogCancel, DialogActions, DialogButton } from "@webiny/ui/Dialog";
import { Form } from "@webiny/form";
import { plugins } from "@webiny/plugins";
import { Tabs, Tab } from "@webiny/ui/Tabs";
import GeneralTab from "./EditFieldDialog/GeneralTab";
import ValidatorsTab from "./EditFieldDialog/ValidatorsTab";
import FieldTypeSelector from "./EditFieldDialog/FieldTypeSelector";
import { i18n } from "@webiny/app/i18n";
var t = i18n.namespace("FormEditor.EditFieldDialog");
import { useFormEditor } from "../../Context";
var dialogBody = /*#__PURE__*/css({
  "&.webiny-ui-dialog__content": {
    width: 875,
    height: 450
  }
}, "label:dialogBody;");
var FbFormModelFieldList = /*#__PURE__*/styled("div", {
  target: "e1e7jrn10",
  label: "FbFormModelFieldList"
})({
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  flexWrap: "wrap",
  paddingTop: 25,
  backgroundColor: "var(--mdc-theme-background) !important"
});

var EditFieldDialog = function EditFieldDialog(_ref) {
  var field = _ref.field,
      onSubmit = _ref.onSubmit,
      props = _objectWithoutProperties(_ref, _excluded);

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      current = _useState2[0],
      setCurrent = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isNewField = _useState4[0],
      setIsNewField = _useState4[1];

  var _useState5 = useState(),
      _useState6 = _slicedToArray(_useState5, 2),
      screen = _useState6[0],
      setScreen = _useState6[1];

  var _useFormEditor = useFormEditor(),
      getFieldPlugin = _useFormEditor.getFieldPlugin;

  useEffect(function () {
    setCurrent(_cloneDeep(field));

    if (field) {
      setIsNewField(!field._id);
      setScreen(field.type ? "fieldOptions" : "fieldType");
    }
  }, [field]);
  var onClose = useCallback(function () {
    setCurrent(null);
    props.onClose();
  }, undefined);
  var render = null;
  var headerTitle = t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Field Settings"])));

  if (current) {
    var fieldPlugin = getFieldPlugin({
      name: current.name
    });

    if (fieldPlugin) {
      headerTitle = t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Field Settings - {fieldTypeLabel}"])))({
        fieldTypeLabel: fieldPlugin.field.label
      });
    }

    switch (screen) {
      case "fieldOptions":
        {
          render = /*#__PURE__*/React.createElement(Form, {
            data: current,
            onSubmit: onSubmit
          }, function (form) {
            return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DialogContent, {
              className: dialogBody
            }, /*#__PURE__*/React.createElement(Tabs, null, /*#__PURE__*/React.createElement(Tab, {
              label: t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["General"])))
            }, /*#__PURE__*/React.createElement(GeneralTab, {
              form: form,
              field: current
            })), Array.isArray(fieldPlugin.field.validators) && fieldPlugin.field.validators.length > 0 && /*#__PURE__*/React.createElement(Tab, {
              label: "Validators"
            }, /*#__PURE__*/React.createElement(ValidatorsTab, {
              form: form,
              field: current
            })))), /*#__PURE__*/React.createElement(DialogActions, {
              style: {
                justifyContent: isNewField ? "space-between" : "flex-end"
              }
            }, isNewField && /*#__PURE__*/React.createElement(DialogButton, {
              onClick: function onClick() {
                return setScreen("fieldType");
              }
            }, t(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Go back"])))), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(DialogButton, {
              onClick: onClose
            }, t(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["Cancel"])))), /*#__PURE__*/React.createElement(DialogButton, {
              onClick: form.submit
            }, t(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["Save"])))))));
          });
          break;
        }

      default:
        render = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DialogContent, {
          className: dialogBody
        }, /*#__PURE__*/React.createElement(FbFormModelFieldList, null, plugins.byType("form-editor-field-type").filter(function (pl) {
          return !pl.field.group;
        }).map(function (pl) {
          return /*#__PURE__*/React.createElement(FieldTypeSelector, {
            key: pl.name,
            fieldType: pl.field,
            onClick: function onClick() {
              var newCurrent = pl.field.createField();

              if (current) {
                // User edited existing field, that's why we still want to
                // keep a couple of previous values.
                var _id = current._id,
                    label = current.label,
                    fieldId = current.fieldId,
                    helpText = current.helpText;
                newCurrent._id = _id;
                newCurrent.label = label;
                newCurrent.fieldId = fieldId;
                newCurrent.helpText = helpText;
              }

              setCurrent(newCurrent);
              setScreen("fieldOptions");
            }
          });
        }))), /*#__PURE__*/React.createElement(DialogActions, null, /*#__PURE__*/React.createElement(DialogCancel, {
          onClick: onClose
        }, t(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["Cancel"]))))));
    }
  }

  return /*#__PURE__*/React.createElement(Dialog, {
    preventOutsideDismiss: true,
    open: !!current,
    onClose: onClose
  }, /*#__PURE__*/React.createElement(DialogTitle, null, headerTitle), render);
};

export default EditFieldDialog;
//# sourceMappingURL=EditFieldDialog.js.map