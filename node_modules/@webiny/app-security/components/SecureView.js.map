{"version":3,"sources":["../../src/components/SecureView.tsx"],"names":["useSecurity","SecureView","children","permission","identity","matchedPermission","getPermission","hasPermission","Boolean"],"mappings":"AACA,SAASA,WAAT,QAA4B,IAA5B;;AAaA,SAASC,UAAT,OAGiC;AAAA,MAF7BC,QAE6B,QAF7BA,QAE6B;AAAA,MAD7BC,UAC6B,QAD7BA,UAC6B;;AAC7B,qBAAqBH,WAAW,EAAhC;AAAA,MAAQI,QAAR,gBAAQA,QAAR;;AACA,MAAMC,iBAAiB,GAAGD,QAAQ,CAACE,aAAT,CAA0BH,UAA1B,CAA1B;AAEA,MAAMI,aAAa,GAAGC,OAAO,CAACH,iBAAD,CAA7B;;AAEA,MAAI,OAAOH,QAAP,KAAoB,UAAxB,EAAoC;AAChC,WAAOA,QAAQ,CAAC;AAAEK,MAAAA,aAAa,EAAbA,aAAF;AAAiBJ,MAAAA,UAAU,EAAEE;AAA7B,KAAD,CAAf;AACH;;AAED,SAAOE,aAAa,GAAGL,QAAH,GAAc,IAAlC;AACH;;AAED,eAAeD,UAAf","sourcesContent":["import * as React from \"react\";\nimport { useSecurity } from \"..\";\nimport { SecurityPermission } from \"../types\";\n\ninterface ChildrenRenderFunctionArgs<T extends SecurityPermission> {\n    hasPermission: boolean;\n    permission: T;\n}\n\ninterface Props<T extends SecurityPermission> {\n    children: ((args: ChildrenRenderFunctionArgs<T>) => React.ReactElement) | React.ReactElement;\n    permission?: string;\n}\n\nfunction SecureView<T extends SecurityPermission>({\n    children,\n    permission\n}: Props<T>): React.ReactElement {\n    const { identity } = useSecurity();\n    const matchedPermission = identity.getPermission<T>(permission);\n\n    const hasPermission = Boolean(matchedPermission);\n\n    if (typeof children === \"function\") {\n        return children({ hasPermission, permission: matchedPermission });\n    }\n\n    return hasPermission ? children : null;\n}\n\nexport default SecureView;\n"],"file":"SecureView.js"}