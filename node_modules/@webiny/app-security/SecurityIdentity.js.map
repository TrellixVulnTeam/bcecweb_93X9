{"version":3,"sources":["../src/SecurityIdentity.ts"],"names":["minimatch","SecurityIdentity","data","Object","assign","permissions","name","perms","exactMatch","find","p","console","warn","identity","currentData","keys","reduce","acc","key"],"mappings":";;;;AAAA,OAAOA,SAAP,MAAsB,WAAtB;AAWA,WAAaC,gBAAb;AAKI,4BAAYC,IAAZ,EAAwC;AAAA;;AAAA;;AAAA;;AACpCC,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBF,IAApB;AACH;AAED;AACJ;AACA;;;AAXA;AAAA;AAAA,WAqBI,wBAAeG,WAAf,EAAkD;AAC9C,WAAKA,WAAL,GAAmBA,WAAnB;AACH;AAvBL;AAAA;AAAA,WAyBI,uBAAiEC,IAAjE,EAAkF;AAC9E,UAAMC,KAAK,GAAG,KAAKF,WAAL,IAAoB,EAAlC;AACA,UAAMG,UAAU,GAAGD,KAAK,CAACE,IAAN,CAAW,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACJ,IAAF,KAAWA,IAAf;AAAA,OAAZ,CAAnB;;AACA,UAAIE,UAAJ,EAAgB;AACZ,eAAOA,UAAP;AACH,OAL6E,CAO9E;;;AACA,aAAOD,KAAK,CAACE,IAAN,CAAW,UAAAC,CAAC;AAAA,eAAIV,SAAS,CAACM,IAAD,EAAOI,CAAC,CAACJ,IAAT,CAAb;AAAA,OAAZ,CAAP;AACH;AAlCL;AAAA;AAAA,WAoCI,kBAAS;AACLK,MAAAA,OAAO,CAACC,IAAR;AACH;AAtCL;AAAA;AAAA,WAYI,cAAYC,QAAZ,EAAwCX,IAAxC,EAA6E;AACzE,UAAMY,WAAW,GAAGX,MAAM,CAACY,IAAP,CAAYF,QAAZ,EAAsBG,MAAtB,CAA6B,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC3DD,QAAAA,GAAG,CAACC,GAAD,CAAH,GAAWL,QAAQ,CAACK,GAAD,CAAnB;AACA,eAAOD,GAAP;AACH,OAHmB,EAGjB,EAHiB,CAApB;AAKA,aAAO,IAAIhB,gBAAJ,iCAA0Ba,WAA1B,GAA0CZ,IAA1C,EAAP;AACH;AAnBL;;AAAA;AAAA","sourcesContent":["import minimatch from \"minimatch\";\nimport { SecurityPermission } from \"./types\";\n\nexport type SecurityIdentityData = {\n    login: string;\n    permissions?: SecurityPermission[];\n    logout(): void;\n    [key: string]: any;\n    getPermission?(permission: string): SecurityPermission;\n};\n\nexport class SecurityIdentity {\n    login: string;\n    permissions: SecurityPermission[];\n    [key: string]: any;\n\n    constructor(data: SecurityIdentityData) {\n        Object.assign(this, data);\n    }\n\n    /**\n     * Create a new instance of SecurityIdentity from the existing instance.\n     */\n    static from(identity: SecurityIdentity, data: Partial<SecurityIdentityData>) {\n        const currentData = Object.keys(identity).reduce((acc, key) => {\n            acc[key] = identity[key];\n            return acc;\n        }, {}) as SecurityIdentityData;\n\n        return new SecurityIdentity({ ...currentData, ...data });\n    }\n\n    setPermissions(permissions: SecurityPermission[]) {\n        this.permissions = permissions;\n    }\n\n    getPermission<T extends SecurityPermission = SecurityPermission>(name: string): T {\n        const perms = this.permissions || [];\n        const exactMatch = perms.find(p => p.name === name) as T;\n        if (exactMatch) {\n            return exactMatch;\n        }\n\n        // Try matching using patterns\n        return perms.find(p => minimatch(name, p.name)) as T;\n    }\n\n    logout() {\n        console.warn(`You must implement a \"logout\" method when setting SecurityIdentity!`);\n    }\n}\n"],"file":"SecurityIdentity.js"}