{"version":3,"sources":["../src/createHandler.ts"],"names":["plugins","args","context","PluginsContainer","WEBINY_VERSION","process","env","result","handle","handlerPlugins","byType","i","length","apply","contextPlugins","beforeHandlerPlugins","handlers","handler","map","pl","Error","error","console","log"],"mappings":";;;;;;;;;AAAA;;AASA;;eAEe,CAAC,GAAGA,OAAJ,KACX,OAAO,GAAGC,IAAV,KAAmB;AACf,QAAMC,OAAgB,GAAG;AACrBF,IAAAA,OAAO,EAAE,IAAIG,yBAAJ,CAAqBH,OAArB,CADY;AAErBC,IAAAA,IAFqB;AAGrB;AACA;AACAG,IAAAA,cAAc,EAAEC,OAAO,CAACC,GAAR,CAAYF;AALP,GAAzB;AAQA,QAAMG,MAAM,GAAG,MAAMC,MAAM,CAACP,IAAD,EAAOC,OAAP,CAA3B;AAEA,QAAMO,cAAc,GAAGP,OAAO,CAACF,OAAR,CAAgBU,MAAhB,CAA4C,gBAA5C,CAAvB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,cAAc,CAACG,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC5C,QAAIF,cAAc,CAACE,CAAD,CAAd,CAAkBE,KAAtB,EAA6B;AACzB,YAAMJ,cAAc,CAACE,CAAD,CAAd,CAAkBE,KAAlB,CAAwBN,MAAxB,EAAgCL,OAAhC,CAAN;AACH;AACJ;;AAED,SAAOK,MAAP;AACH,C;;;;AAEL,eAAeC,MAAf,CAAsBP,IAAtB,EAA4BC,OAA5B,EAA8C;AAC1C,MAAI;AACA,UAAMY,cAAc,GAAGZ,OAAO,CAACF,OAAR,CAAgBU,MAAhB,CAAsC,SAAtC,CAAvB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGG,cAAc,CAACF,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC5C,UAAIG,cAAc,CAACH,CAAD,CAAd,CAAkBE,KAAtB,EAA6B;AACzB,cAAMC,cAAc,CAACH,CAAD,CAAd,CAAkBE,KAAlB,CAAwBX,OAAxB,CAAN;AACH;AACJ;;AAED,UAAMa,oBAAoB,GAAGb,OAAO,CAACF,OAAR,CAAgBU,MAAhB,CAA4C,gBAA5C,CAA7B;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,oBAAoB,CAACH,MAAzC,EAAiDD,CAAC,EAAlD,EAAsD;AAClD,UAAII,oBAAoB,CAACJ,CAAD,CAApB,CAAwBE,KAA5B,EAAmC;AAC/B,cAAME,oBAAoB,CAACJ,CAAD,CAApB,CAAwBE,KAAxB,CAA8BX,OAA9B,CAAN;AACH;AACJ;;AAED,UAAMc,QAAQ,GAAGd,OAAO,CAACF,OAAR,CAAgBU,MAAhB,CAAsC,SAAtC,CAAjB;AACA,UAAMO,OAAO,GAAG,yBAAWD,QAAQ,CAACE,GAAT,CAAaC,EAAE,IAAIA,EAAE,CAACX,MAAtB,CAAX,CAAhB;AACA,UAAMD,MAAM,GAAG,MAAMU,OAAO,CAACf,OAAD,CAA5B;;AACA,QAAI,CAACK,MAAL,EAAa;AACT,YAAMa,KAAK,CAAE,kDAAF,CAAX;AACH;;AAED,WAAOb,MAAP;AACH,GAvBD,CAuBE,OAAOc,KAAP,EAAc;AACZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,UAAML,QAAQ,GAAGd,OAAO,CAACF,OAAR,CAAgBU,MAAhB,CAA2C,eAA3C,CAAjB;AACA,UAAMO,OAAO,GAAG,yBAAWD,QAAQ,CAACE,GAAT,CAAaC,EAAE,IAAIA,EAAE,CAACX,MAAtB,CAAX,CAAhB;AACA,WAAOS,OAAO,CAACf,OAAD,EAAUmB,KAAV,CAAd;AACH;AACJ","sourcesContent":["import { PluginsContainer } from \"@webiny/plugins\";\nimport {\n    Context,\n    HandlerResultPlugin,\n    ContextPlugin,\n    HandlerPlugin,\n    HandlerErrorPlugin,\n    BeforeHandlerPlugin\n} from \"./types\";\nimport middleware from \"./middleware\";\n\nexport default (...plugins) =>\n    async (...args) => {\n        const context: Context = {\n            plugins: new PluginsContainer(plugins),\n            args,\n            // @ts-ignore\n            // this is injected using webpack.DefinePlugin at build time\n            WEBINY_VERSION: process.env.WEBINY_VERSION\n        };\n\n        const result = await handle(args, context);\n\n        const handlerPlugins = context.plugins.byType<HandlerResultPlugin>(\"handler-result\");\n        for (let i = 0; i < handlerPlugins.length; i++) {\n            if (handlerPlugins[i].apply) {\n                await handlerPlugins[i].apply(result, context);\n            }\n        }\n\n        return result;\n    };\n\nasync function handle(args, context: Context) {\n    try {\n        const contextPlugins = context.plugins.byType<ContextPlugin>(\"context\");\n        for (let i = 0; i < contextPlugins.length; i++) {\n            if (contextPlugins[i].apply) {\n                await contextPlugins[i].apply(context);\n            }\n        }\n\n        const beforeHandlerPlugins = context.plugins.byType<BeforeHandlerPlugin>(\"before-handler\");\n        for (let i = 0; i < beforeHandlerPlugins.length; i++) {\n            if (beforeHandlerPlugins[i].apply) {\n                await beforeHandlerPlugins[i].apply(context);\n            }\n        }\n\n        const handlers = context.plugins.byType<HandlerPlugin>(\"handler\");\n        const handler = middleware(handlers.map(pl => pl.handle));\n        const result = await handler(context);\n        if (!result) {\n            throw Error(`No result was returned from registered handlers.`);\n        }\n\n        return result;\n    } catch (error) {\n        // Log error to cloud, as these can be extremely annoying to debug!\n        console.log(error);\n        const handlers = context.plugins.byType<HandlerErrorPlugin>(\"handler-error\");\n        const handler = middleware(handlers.map(pl => pl.handle));\n        return handler(context, error);\n    }\n}\n"],"file":"createHandler.js"}