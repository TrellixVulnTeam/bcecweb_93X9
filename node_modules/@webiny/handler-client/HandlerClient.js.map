{"version":3,"sources":["../src/HandlerClient.ts"],"names":["HandlerClient","constructor","context","plugin","plugins","byName","type","name","invoke","payload","await","useAwait","Error","promise","params","e","JSON","stringify"],"mappings":";;;;;;;;;;;AAEA;;AAEA,MAAMA,aAAN,CAAoB;AAEhBC,EAAAA,WAAW,CAACC,OAAD,EAAmB;AAAA;AAC1B,SAAKC,MAAL,GAAcD,OAAO,CAACE,OAAR,CAAgBC,MAAhB,CAA4C,gBAA5C,CAAd;;AACA,QAAI,CAAC,KAAKF,MAAV,EAAkB;AACd;AACA;AACA,WAAKA,MAAL,GAAc;AACVG,QAAAA,IAAI,EAAE,gBADI;AAEVC,QAAAA,IAAI,EAAE,gBAFI;;AAGV,cAAMC,MAAN,CAAa;AAAED,UAAAA,IAAF;AAAQE,UAAAA,OAAR;AAAiBC,UAAAA,KAAK,EAAEC;AAAxB,SAAb,EAAiD;AAC7C,gBAAMR,MAAM,GAAGD,OAAO,CAACE,OAAR,CAAgBC,MAAhB,CAAmDE,IAAnD,CAAf;;AACA,cAAI,CAACJ,MAAL,EAAa;AACT,kBAAM,IAAIS,cAAJ,CAAW,mBAAkBL,IAAK,mBAAlC,CAAN;AACH;;AAED,gBAAMM,OAAO,GAAGV,MAAM,CAACK,MAAP,CAAcC,OAAd,CAAhB;;AACA,cAAIE,QAAQ,KAAK,KAAjB,EAAwB;AACpB,mBAAO,IAAP;AACH;;AAED,iBAAOE,OAAP;AACH;;AAfS,OAAd;AAiBH;AACJ;;AAEDL,EAAAA,MAAM,CACFM,MADE,EAEgB;AAClB,QAAI;AACA,aAAO,KAAKX,MAAL,CAAYK,MAAZ,CAAmBM,MAAnB,CAAP;AACH,KAFD,CAEE,OAAOC,CAAP,EAAU;AACR,YAAM,IAAIH,cAAJ,CACD,uFAAsFI,IAAI,CAACC,SAAL,CACnFH,MADmF,EAEnF,IAFmF,EAGnF,CAHmF,CAIrF,EALA,CAAN;AAOH;AACJ;;AAzCe;;eA4CLd,a","sourcesContent":["import { Context } from \"@webiny/handler/types\";\nimport { HandlerClientPlugin, HandlerClientHandlerPlugin, InvokeArgs } from \"./types\";\nimport Error from \"@webiny/error\";\n\nclass HandlerClient {\n    plugin: HandlerClientPlugin;\n    constructor(context: Context) {\n        this.plugin = context.plugins.byName<HandlerClientPlugin>(\"handler-client\");\n        if (!this.plugin) {\n            // If not specified, use a fallback plugin that fetches different handlers via plugins.\n            // This might also be useful for testing purposes.\n            this.plugin = {\n                type: \"handler-client\",\n                name: \"handler-client\",\n                async invoke({ name, payload, await: useAwait }) {\n                    const plugin = context.plugins.byName<HandlerClientHandlerPlugin>(name);\n                    if (!plugin) {\n                        throw new Error(`Could not find \"${name}\" handler plugin.`);\n                    }\n\n                    const promise = plugin.invoke(payload);\n                    if (useAwait === false) {\n                        return null;\n                    }\n\n                    return promise;\n                }\n            };\n        }\n    }\n\n    invoke<TInvokeArgsPayload = any, TResponse = any>(\n        params: InvokeArgs<TInvokeArgsPayload>\n    ): Promise<TResponse> {\n        try {\n            return this.plugin.invoke(params);\n        } catch (e) {\n            throw new Error(\n                `An error occurred while trying to invoke another handler with the following params: ${JSON.stringify(\n                    params,\n                    null,\n                    2\n                )}`\n            );\n        }\n    }\n}\n\nexport default HandlerClient;\n"],"file":"HandlerClient.js"}