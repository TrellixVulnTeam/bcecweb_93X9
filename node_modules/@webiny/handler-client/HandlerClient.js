"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _error = _interopRequireDefault(require("@webiny/error"));

class HandlerClient {
  constructor(context) {
    (0, _defineProperty2.default)(this, "plugin", void 0);
    this.plugin = context.plugins.byName("handler-client");

    if (!this.plugin) {
      // If not specified, use a fallback plugin that fetches different handlers via plugins.
      // This might also be useful for testing purposes.
      this.plugin = {
        type: "handler-client",
        name: "handler-client",

        async invoke({
          name,
          payload,
          await: useAwait
        }) {
          const plugin = context.plugins.byName(name);

          if (!plugin) {
            throw new _error.default(`Could not find "${name}" handler plugin.`);
          }

          const promise = plugin.invoke(payload);

          if (useAwait === false) {
            return null;
          }

          return promise;
        }

      };
    }
  }

  invoke(params) {
    try {
      return this.plugin.invoke(params);
    } catch (e) {
      throw new _error.default(`An error occurred while trying to invoke another handler with the following params: ${JSON.stringify(params, null, 2)}`);
    }
  }

}

var _default = HandlerClient;
exports.default = _default;
//# sourceMappingURL=HandlerClient.js.map