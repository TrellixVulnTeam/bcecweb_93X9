{"version":3,"sources":["../src/index.ts"],"names":["gql","GET_PRE_SIGNED_POST_PAYLOAD","type","name","upload","file","apolloClient","query","fetchPolicy","variables","data","size","response","getPreSignedPostPayload","fileManager","error","console","log","Promise","resolve","reject","formData","window","FormData","Object","keys","fields","forEach","key","append","xhr","XMLHttpRequest","open","url","send","onload","status","responseText"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAGA,IAAMC,2BAA2B,GAAGD,GAAH,mjBAAjC;AAqBA,gBAAe;AAAA,SACV;AACGE,IAAAA,IAAI,EAAE,0BADT;AAEGC,IAAAA,IAAI,EAAE,0BAFT;AAGGC,IAAAA,MAAM;AAAA,6EAAE,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqBC,gBAAAA,YAArB,QAAqBA,YAArB;AAAA;AAAA,uBAEmBA,YAAY,CAACC,KAAb,CAAmB;AACtCA,kBAAAA,KAAK,EAAEN,2BAD+B;AAEtCO,kBAAAA,WAAW,EAAE,UAFyB;AAGtCC,kBAAAA,SAAS,EAAE;AACPC,oBAAAA,IAAI,EAAE;AAAEC,sBAAAA,IAAI,EAAEN,IAAI,CAACM,IAAb;AAAmBR,sBAAAA,IAAI,EAAEE,IAAI,CAACF,IAA9B;AAAoCD,sBAAAA,IAAI,EAAEG,IAAI,CAACH;AAA/C;AADC;AAH2B,iBAAnB,CAFnB;;AAAA;AAEEU,gBAAAA,QAFF;AAUIC,gBAAAA,uBAVJ,GAUgCD,QAAQ,CAACF,IAAT,CAAcI,WAV9C,CAUID,uBAVJ;;AAAA,qBAWAA,uBAAuB,CAACE,KAXxB;AAAA;AAAA;AAAA;;AAYAC,gBAAAA,OAAO,CAACC,GAAR,CAAYJ,uBAAZ,EAZA,CAYsC;;AAZtC;;AAAA;AAAA;AAAA,uBAgBS,IAAIK,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC1C,sBAAMC,QAAQ,GAAG,IAAIC,MAAM,CAACC,QAAX,EAAjB;AACAC,kBAAAA,MAAM,CAACC,IAAP,CAAYZ,uBAAuB,CAACH,IAAxB,CAA6BA,IAA7B,CAAkCgB,MAA9C,EAAsDC,OAAtD,CAA8D,UAAAC,GAAG,EAAI;AACjEP,oBAAAA,QAAQ,CAACQ,MAAT,CAAgBD,GAAhB,EAAqBf,uBAAuB,CAACH,IAAxB,CAA6BA,IAA7B,CAAkCgB,MAAlC,CAAyCE,GAAzC,CAArB;AACH,mBAFD;AAIAP,kBAAAA,QAAQ,CAACQ,MAAT,CAAgB,MAAhB,EAAwBxB,IAAxB;AAEA,sBAAMyB,GAAG,GAAG,IAAIR,MAAM,CAACS,cAAX,EAAZ,CAR0C,CAQD;;AAAA;AACzCD,kBAAAA,GAAG,CAACE,IAAJ,CAAS,MAAT,EAAiBnB,uBAAuB,CAACH,IAAxB,CAA6BA,IAA7B,CAAkCuB,GAAnD,EAAwD,IAAxD;AACAH,kBAAAA,GAAG,CAACI,IAAJ,CAASb,QAAT;;AACAS,kBAAAA,GAAG,CAACK,MAAJ,GAAa,YAAY;AACrB,wBAAI,KAAKC,MAAL,KAAgB,GAApB,EAAyB;AACrBjB,sBAAAA,OAAO,CAACN,uBAAuB,CAACH,IAAxB,CAA6BL,IAA9B,CAAP;AACA;AACH;;AAEDe,oBAAAA,MAAM,CAAC,KAAKiB,YAAN,CAAN;AACH,mBAPD;AAQH,iBAnBY,CAhBT;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAHT,GADU;AAAA,CAAf","sourcesContent":["import gql from \"graphql-tag\";\nimport { AppFileManagerStorageS3 } from \"./types\";\n\nconst GET_PRE_SIGNED_POST_PAYLOAD = gql`\n    query getPreSignedPostPayload($data: PreSignedPostPayloadInput!) {\n        fileManager {\n            getPreSignedPostPayload(data: $data) {\n                data {\n                    data\n                    file {\n                        type\n                        name\n                        size\n                        key\n                    }\n                }\n                error {\n                    message\n                }\n            }\n        }\n    }\n`;\n\nexport default () =>\n    ({\n        type: \"app-file-manager-storage\",\n        name: \"app-file-manager-storage\",\n        upload: async (file: File, { apolloClient }) => {\n            // 1. GET PreSignedPostPayload\n            const response = await apolloClient.query({\n                query: GET_PRE_SIGNED_POST_PAYLOAD,\n                fetchPolicy: \"no-cache\",\n                variables: {\n                    data: { size: file.size, name: file.name, type: file.type }\n                }\n            });\n\n            const { getPreSignedPostPayload } = response.data.fileManager;\n            if (getPreSignedPostPayload.error) {\n                console.log(getPreSignedPostPayload); // eslint-disable-line\n                return;\n            }\n            // 2. upload file to S3\n            return await new Promise((resolve, reject) => {\n                const formData = new window.FormData();\n                Object.keys(getPreSignedPostPayload.data.data.fields).forEach(key => {\n                    formData.append(key, getPreSignedPostPayload.data.data.fields[key]);\n                });\n\n                formData.append(\"file\", file);\n\n                const xhr = new window.XMLHttpRequest(); // eslint-disable-line\n                xhr.open(\"POST\", getPreSignedPostPayload.data.data.url, true);\n                xhr.send(formData);\n                xhr.onload = function () {\n                    if (this.status === 204) {\n                        resolve(getPreSignedPostPayload.data.file);\n                        return;\n                    }\n\n                    reject(this.responseText);\n                };\n            });\n        }\n    } as AppFileManagerStorageS3);\n"],"file":"index.js"}