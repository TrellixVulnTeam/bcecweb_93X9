{"version":3,"sources":["../src/index.ts"],"names":["updateAttributes","family_name","given_name","region","userPoolId","cognito","CognitoIdentityServiceProvider","GraphQLSchemaPlugin","typeDefs","UserPlugin","beforeUpdate","updateData","beforeCreate","inputData","user","context","adminGetUser","Username","login","toLowerCase","UserPoolId","promise","params","DesiredDeliveryMediums","ForceAliasCreation","MessageAction","TemporaryPassword","password","UserAttributes","Name","Value","firstName","lastName","adminCreateUser","verify","adminUpdateUserAttributes","users","security","listUsers","auth","length","adminSetUserPassword","Permanent","Password","afterUpdate","Object","keys","map","attr","pass","afterDelete","adminDeleteUser"],"mappings":"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","sourcesContent":["import CognitoIdentityServiceProvider from \"aws-sdk/clients/cognitoidentityserviceprovider\";\nimport { GraphQLSchemaPlugin } from \"@webiny/handler-graphql/plugins/GraphQLSchemaPlugin\";\nimport { UserPlugin } from \"@webiny/api-security-admin-users/plugins/UserPlugin\";\n\nconst updateAttributes = { family_name: \"lastName\", given_name: \"firstName\" };\n\nexport default ({ region, userPoolId }) => {\n    const cognito = new CognitoIdentityServiceProvider({ region });\n\n    return [\n        new GraphQLSchemaPlugin({\n            typeDefs: /* GraphQL */ `\n                extend input SecurityInstallInput {\n                    password: String\n                }\n\n                extend input SecurityUserCreateInput {\n                    password: String\n                }\n\n                extend input SecurityUserUpdateInput {\n                    password: String\n                }\n\n                # This input type is used by the user who is updating his own account\n                extend input SecurityCurrentUserInput {\n                    password: String\n                }\n            `\n        }),\n        new UserPlugin({\n            async beforeUpdate({ updateData }) {\n                // Immediately delete password from `updateData`, as that object will be merged with the `user` data.\n                delete updateData[\"password\"];\n            },\n            async beforeCreate({ inputData, user, context }) {\n                // Immediately delete password from `user`, as that object will be stored to the database.\n                // Password field is attached by Cognito plugin, so we only want this plugin to handle it.\n                delete user[\"password\"];\n\n                try {\n                    await cognito\n                        .adminGetUser({\n                            Username: inputData.login.toLowerCase(),\n                            UserPoolId: userPoolId\n                        })\n                        .promise();\n\n                    // User exists\n                    return;\n                } catch {\n                    // User does not exist\n                }\n\n                const params = {\n                    UserPoolId: userPoolId,\n                    Username: inputData.login.toLowerCase(),\n                    DesiredDeliveryMediums: [],\n                    ForceAliasCreation: false,\n                    MessageAction: \"SUPPRESS\",\n                    TemporaryPassword: inputData.password,\n                    UserAttributes: [\n                        {\n                            Name: \"given_name\",\n                            Value: inputData.firstName\n                        },\n                        {\n                            Name: \"family_name\",\n                            Value: inputData.lastName\n                        }\n                    ]\n                };\n\n                await cognito.adminCreateUser(params).promise();\n                // user.id = User.Attributes.find(attr => attr.Name === \"sub\").Value;\n\n                const verify = {\n                    UserPoolId: userPoolId,\n                    Username: inputData.login.toLowerCase(),\n                    UserAttributes: [\n                        {\n                            Name: \"email_verified\",\n                            Value: \"true\"\n                        }\n                    ]\n                };\n\n                await cognito.adminUpdateUserAttributes(verify).promise();\n\n                // Check if this is the first user in the system, and if so, set permanent password.\n                const users = await context.security.users.listUsers({}, { auth: false });\n\n                if (!users.length) {\n                    await cognito\n                        .adminSetUserPassword({\n                            Permanent: true,\n                            Password: inputData.password,\n                            Username: inputData.login.toLowerCase(),\n                            UserPoolId: userPoolId\n                        })\n                        .promise();\n                }\n            },\n            async afterUpdate({ inputData, user }) {\n                const params = {\n                    UserAttributes: Object.keys(updateAttributes).map(attr => {\n                        return { Name: attr, Value: user[updateAttributes[attr]] };\n                    }),\n                    UserPoolId: userPoolId,\n                    Username: user.login.toLowerCase()\n                };\n\n                await cognito.adminUpdateUserAttributes(params).promise();\n\n                if (inputData.password) {\n                    const pass = {\n                        Permanent: true,\n                        Password: inputData.password,\n                        Username: user.login.toLowerCase(),\n                        UserPoolId: userPoolId\n                    };\n\n                    await cognito.adminSetUserPassword(pass).promise();\n                }\n            },\n            async afterDelete({ user }) {\n                await cognito\n                    .adminDeleteUser({ UserPoolId: userPoolId, Username: user.login.toLowerCase() })\n                    .promise();\n            }\n        })\n    ];\n};\n"],"file":"index.js"}