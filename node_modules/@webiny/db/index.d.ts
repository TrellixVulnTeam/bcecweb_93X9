export declare type Key = {
    primary?: boolean;
    unique?: boolean;
    name: string;
    fields: {
        name: string;
    }[];
};
export declare type Args = {
    __batch?: {
        instance: Batch;
        operation: Operation;
    };
    table?: string;
    meta?: boolean;
    limit?: number;
    sort?: Record<string, 1 | -1>;
    data?: Record<string, any>;
    query?: Record<string, any>;
    keys?: Key[];
};
export declare type Result<T = any> = [T, Record<string, any>];
export interface DbDriver {
    create: (args: Args) => Promise<Result<true>>;
    read: <T = Record<string, any>>(args: Args) => Promise<Result<T[]>>;
    update: (args: Args) => Promise<Result<true>>;
    delete: (args: Args) => Promise<Result<true>>;
    createLog: (args: {
        operation: string;
        data: Args;
        table: string;
        id: string;
    }) => Promise<Result<true>>;
    readLogs: <T = Record<string, any>>(args: {
        table: string;
    }) => Promise<Result<T[]>>;
}
export declare type OperationType = "create" | "read" | "update" | "delete";
export declare type Operation = [OperationType, Args];
export declare type ConstructorArgs = {
    driver: DbDriver;
    table?: string;
    logTable?: string;
};
declare class Db {
    driver: DbDriver;
    table: string;
    logTable?: string;
    constructor({ driver, table, logTable }: ConstructorArgs);
    create(args: Args): Promise<Result<true>>;
    read<T = Record<string, any>>(args: Args): Promise<Result<T[]>>;
    update(args: Args): Promise<Result<true>>;
    delete(args: Args): Promise<Result<true>>;
    createLog(operation: any, args: Args): Promise<Result<true>>;
    readLogs<T = Record<string, any>>(): Promise<Result<T[]>>;
    batch<T0 = any, T1 = any, T2 = any, T3 = any, T4 = any, T5 = any, T6 = any, T7 = any, T8 = any, T9 = any>(): Batch<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>;
}
declare class Batch<T0 = any, T1 = any, T2 = any, T3 = any, T4 = any, T5 = any, T6 = any, T7 = any, T8 = any, T9 = any> {
    db: Db;
    type: "batch" | "transaction";
    id: string;
    meta: Record<string, any>;
    operations: Operation[];
    constructor(db: any);
    push(...operations: Operation[]): this;
    create(...args: Args[]): this;
    read(...args: Args[]): this;
    update(...args: Args[]): this;
    delete(...args: Args[]): this;
    execute(): Promise<[T0?, T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?]>;
}
export { Batch, Db };
