{"version":3,"sources":["../../../src/operations/system/SystemStorageOperations.ts"],"names":["SystemStorageOperationsDdb","constructor","context","table","entity","get","keys","PK","createPartitionKey","SK","createSortKey","result","Item","ex","WebinyError","message","code","create","params","system","put","update","original","tenancy","getCurrentTenant","id"],"mappings":";;;;;;;;;;;AAOA;;AAEA;;AACA;;AACA;;;;;;AAMO,MAAMA,0BAAN,CAAoE;AAKhEC,EAAAA,WAAW,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAsB;AAAA;AAAA;AAAA;AACpC,SAAKA,OAAL,GAAeA,OAAf;AAEA,SAAKC,KAAL,GAAa,wBAAY;AACrBD,MAAAA;AADqB,KAAZ,CAAb;AAIA,SAAKE,MAAL,GAAc,sCAAmB;AAC7BF,MAAAA,OAD6B;AAE7BC,MAAAA,KAAK,EAAE,KAAKA;AAFiB,KAAnB,CAAd;AAIH;;AAEe,QAAHE,GAAG,GAAoB;AAChC,UAAMC,IAAI,GAAG;AACTC,MAAAA,EAAE,EAAE,KAAKC,kBAAL,EADK;AAETC,MAAAA,EAAE,EAAE,KAAKC,aAAL;AAFK,KAAb;;AAIA,QAAI;AACA,YAAMC,MAAM,GAAG,MAAM,KAAKP,MAAL,CAAYC,GAAZ,CAAgBC,IAAhB,CAArB;;AACA,UAAI,CAACK,MAAD,IAAW,CAACA,MAAM,CAACC,IAAvB,EAA6B;AACzB,eAAO,IAAP;AACH;;AACD,aAAO,0BAAY,KAAKR,MAAjB,EAAyBO,MAAM,CAACC,IAAhC,CAAP;AACH,KAND,CAME,OAAOC,EAAP,EAAW;AACT,YAAM,IAAIC,cAAJ,CACFD,EAAE,CAACE,OAAH,IAAc,wBADZ,EAEFF,EAAE,CAACG,IAAH,IAAW,kBAFT,EAGF;AACIV,QAAAA;AADJ,OAHE,CAAN;AAOH;AACJ;;AAEkB,QAANW,MAAM,CAACC,MAAD,EAA+D;AAC9E,UAAM;AAAEC,MAAAA;AAAF,QAAaD,MAAnB;AACA,UAAMZ,IAAI,GAAG;AACTC,MAAAA,EAAE,EAAE,KAAKC,kBAAL,EADK;AAETC,MAAAA,EAAE,EAAE,KAAKC,aAAL;AAFK,KAAb;;AAIA,QAAI;AACA,YAAM,KAAKN,MAAL,CAAYgB,GAAZ,iCACCd,IADD,GAECa,MAFD,EAAN;AAIA,aAAOA,MAAP;AACH,KAND,CAME,OAAON,EAAP,EAAW;AACT,YAAM,IAAIC,cAAJ,CACFD,EAAE,CAACE,OAAH,IAAc,0BADZ,EAEFF,EAAE,CAACG,IAAH,IAAW,qBAFT,EAGF;AACIV,QAAAA,IADJ;AAEIa,QAAAA;AAFJ,OAHE,CAAN;AAQH;AACJ;;AAEkB,QAANE,MAAM,CAACH,MAAD,EAA+D;AAC9E,UAAM;AAAEI,MAAAA,QAAF;AAAYH,MAAAA;AAAZ,QAAuBD,MAA7B;AACA,UAAMZ,IAAI,GAAG;AACTC,MAAAA,EAAE,EAAE,KAAKC,kBAAL,EADK;AAETC,MAAAA,EAAE,EAAE,KAAKC,aAAL;AAFK,KAAb;;AAIA,QAAI;AACA,YAAM,KAAKN,MAAL,CAAYgB,GAAZ,iCACCd,IADD,GAECa,MAFD,EAAN;AAIA,aAAOA,MAAP;AACH,KAND,CAME,OAAON,EAAP,EAAW;AACT,YAAM,IAAIC,cAAJ,CACFD,EAAE,CAACE,OAAH,IAAc,0BADZ,EAEFF,EAAE,CAACG,IAAH,IAAW,qBAFT,EAGF;AACIV,QAAAA,IADJ;AAEIa,QAAAA,MAFJ;AAGIG,QAAAA;AAHJ,OAHE,CAAN;AASH;AACJ;;AAEOd,EAAAA,kBAAkB,GAAG;AACzB,WAAQ,KAAI,KAAKN,OAAL,CAAaqB,OAAb,CAAqBC,gBAArB,GAAwCC,EAAG,SAAvD;AACH;;AAEOf,EAAAA,aAAa,GAAW;AAC5B,WAAO,UAAP;AACH;;AA/FsE","sourcesContent":["import {\n    AdminUsersContext,\n    System,\n    SystemStorageOperations,\n    SystemStorageOperationsCreateParams,\n    SystemStorageOperationsUpdateParams\n} from \"@webiny/api-security-admin-users/types\";\nimport { createTable } from \"~/definitions/table\";\nimport { Entity, Table } from \"dynamodb-toolbox\";\nimport { createSystemEntity } from \"~/definitions/systemEntity\";\nimport { cleanupItem } from \"@webiny/db-dynamodb/utils/cleanup\";\nimport WebinyError from \"@webiny/error\";\n\ninterface Params {\n    context: AdminUsersContext;\n}\n\nexport class SystemStorageOperationsDdb implements SystemStorageOperations {\n    private readonly context: AdminUsersContext;\n    private readonly table: Table;\n    private readonly entity: Entity<any>;\n\n    public constructor({ context }: Params) {\n        this.context = context;\n\n        this.table = createTable({\n            context\n        });\n\n        this.entity = createSystemEntity({\n            context,\n            table: this.table\n        });\n    }\n\n    public async get(): Promise<System> {\n        const keys = {\n            PK: this.createPartitionKey(),\n            SK: this.createSortKey()\n        };\n        try {\n            const result = await this.entity.get(keys);\n            if (!result || !result.Item) {\n                return null;\n            }\n            return cleanupItem(this.entity, result.Item);\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not load system.\",\n                ex.code || \"GET_SYSTEM_ERROR\",\n                {\n                    keys\n                }\n            );\n        }\n    }\n\n    public async create(params: SystemStorageOperationsCreateParams): Promise<System> {\n        const { system } = params;\n        const keys = {\n            PK: this.createPartitionKey(),\n            SK: this.createSortKey()\n        };\n        try {\n            await this.entity.put({\n                ...keys,\n                ...system\n            });\n            return system;\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not create system.\",\n                ex.code || \"CREATE_SYSTEM_ERROR\",\n                {\n                    keys,\n                    system\n                }\n            );\n        }\n    }\n\n    public async update(params: SystemStorageOperationsUpdateParams): Promise<System> {\n        const { original, system } = params;\n        const keys = {\n            PK: this.createPartitionKey(),\n            SK: this.createSortKey()\n        };\n        try {\n            await this.entity.put({\n                ...keys,\n                ...system\n            });\n            return system;\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not update system.\",\n                ex.code || \"UPDATE_SYSTEM_ERROR\",\n                {\n                    keys,\n                    system,\n                    original\n                }\n            );\n        }\n    }\n\n    private createPartitionKey() {\n        return `T#${this.context.tenancy.getCurrentTenant().id}#SYSTEM`;\n    }\n\n    private createSortKey(): string {\n        return \"SECURITY\";\n    }\n}\n"],"file":"SystemStorageOperations.js"}