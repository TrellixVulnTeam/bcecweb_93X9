"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SystemStorageOperationsDdb = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _table = require("../../definitions/table");

var _systemEntity = require("../../definitions/systemEntity");

var _cleanup = require("@webiny/db-dynamodb/utils/cleanup");

var _error = _interopRequireDefault(require("@webiny/error"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

class SystemStorageOperationsDdb {
  constructor({
    context
  }) {
    (0, _defineProperty2.default)(this, "context", void 0);
    (0, _defineProperty2.default)(this, "table", void 0);
    (0, _defineProperty2.default)(this, "entity", void 0);
    this.context = context;
    this.table = (0, _table.createTable)({
      context
    });
    this.entity = (0, _systemEntity.createSystemEntity)({
      context,
      table: this.table
    });
  }

  async get() {
    const keys = {
      PK: this.createPartitionKey(),
      SK: this.createSortKey()
    };

    try {
      const result = await this.entity.get(keys);

      if (!result || !result.Item) {
        return null;
      }

      return (0, _cleanup.cleanupItem)(this.entity, result.Item);
    } catch (ex) {
      throw new _error.default(ex.message || "Could not load system.", ex.code || "GET_SYSTEM_ERROR", {
        keys
      });
    }
  }

  async create(params) {
    const {
      system
    } = params;
    const keys = {
      PK: this.createPartitionKey(),
      SK: this.createSortKey()
    };

    try {
      await this.entity.put(_objectSpread(_objectSpread({}, keys), system));
      return system;
    } catch (ex) {
      throw new _error.default(ex.message || "Could not create system.", ex.code || "CREATE_SYSTEM_ERROR", {
        keys,
        system
      });
    }
  }

  async update(params) {
    const {
      original,
      system
    } = params;
    const keys = {
      PK: this.createPartitionKey(),
      SK: this.createSortKey()
    };

    try {
      await this.entity.put(_objectSpread(_objectSpread({}, keys), system));
      return system;
    } catch (ex) {
      throw new _error.default(ex.message || "Could not update system.", ex.code || "UPDATE_SYSTEM_ERROR", {
        keys,
        system,
        original
      });
    }
  }

  createPartitionKey() {
    return `T#${this.context.tenancy.getCurrentTenant().id}#SYSTEM`;
  }

  createSortKey() {
    return "SECURITY";
  }

}

exports.SystemStorageOperationsDdb = SystemStorageOperationsDdb;
//# sourceMappingURL=SystemStorageOperations.js.map