{"version":3,"sources":["../../../src/operations/groups/GroupsStorageOperations.ts"],"names":["GroupsStorageOperationsDdb","constructor","context","table","entity","linksEntity","get","tenant","slug","keys","PK","createPartitionKey","SK","createSortKey","result","Item","cleanupItem","ex","WebinyError","message","code","list","sort","items","partitionKey","options","beginsWith","sortedItems","fields","map","item","create","group","put","TYPE","update","delete","updateUserLinks","links","index","link","putBatch","name","permissions","id"],"mappings":";;;;;;;;;;;AAaA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAQO,MAAMA,0BAAN,CAAoE;AAMhEC,EAAAA,WAAW,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAsB;AAAA;AAAA;AAAA;AAAA;AACpC,SAAKA,OAAL,GAAeA,OAAf;AAEA,SAAKC,KAAL,GAAa,wBAAY;AACrBD,MAAAA,OAAO,EAAE,KAAKA;AADO,KAAZ,CAAb;AAIA,SAAKE,MAAL,GAAc,oCAAkB;AAC5BF,MAAAA,OAD4B;AAE5BC,MAAAA,KAAK,EAAE,KAAKA;AAFgB,KAAlB,CAAd;AAKA,SAAKE,WAAL,GAAmB,oCAAkB;AACjCH,MAAAA,OADiC;AAEjCC,MAAAA,KAAK,EAAE,KAAKA;AAFqB,KAAlB,CAAnB;AAIH;;AAEe,QAAHG,GAAG,CACZC,MADY,EAEZ;AAAEC,IAAAA;AAAF,GAFY,EAGS;AACrB,UAAMC,IAAI,GAAG;AACTC,MAAAA,EAAE,EAAE,KAAKC,kBAAL,CAAwBJ,MAAxB,CADK;AAETK,MAAAA,EAAE,EAAE,KAAKC,aAAL,CAAmBL,IAAnB;AAFK,KAAb;;AAIA,QAAI;AACA,YAAMM,MAAM,GAAG,MAAM,KAAKV,MAAL,CAAYE,GAAZ,CAAgBG,IAAhB,CAArB;;AACA,UAAI,CAACK,MAAD,IAAW,CAACA,MAAM,CAACC,IAAvB,EAA6B;AACzB,eAAO,IAAP;AACH;;AACD,aAAO,KAAKC,WAAL,CAAiBF,MAAM,CAACC,IAAxB,CAAP;AACH,KAND,CAME,OAAOE,EAAP,EAAW;AACT,YAAM,IAAIC,cAAJ,CACFD,EAAE,CAACE,OAAH,IAAc,uBADZ,EAEFF,EAAE,CAACG,IAAH,IAAW,iBAFT,EAGF;AACIX,QAAAA,IADJ;AAEID,QAAAA;AAFJ,OAHE,CAAN;AAQH;AACJ;;AAEgB,QAAJa,IAAI,CACbd,MADa,EAEb;AAAEe,IAAAA;AAAF,GAFa,EAGG;AAChB,QAAIC,KAAc,GAAG,EAArB;;AACA,QAAI;AACAA,MAAAA,KAAK,GAAG,MAAM,qBAAgB;AAC1BnB,QAAAA,MAAM,EAAE,KAAKA,MADa;AAE1BoB,QAAAA,YAAY,EAAE,KAAKb,kBAAL,CAAwBJ,MAAxB,CAFY;AAG1BkB,QAAAA,OAAO,EAAE;AACLC,UAAAA,UAAU,EAAE;AADP;AAHiB,OAAhB,CAAd;AAOH,KARD,CAQE,OAAOT,EAAP,EAAW;AACT,YAAM,IAAIC,cAAJ,CACFD,EAAE,CAACE,OAAH,IAAc,wBADZ,EAEFF,EAAE,CAACG,IAAH,IAAW,kBAFT,CAAN;AAIH;;AAED,UAAMO,WAAW,GAAG,qBAAU;AAC1BJ,MAAAA,KAD0B;AAE1BD,MAAAA,IAF0B;AAG1BpB,MAAAA,OAAO,EAAE,KAAKA,OAHY;AAI1B0B,MAAAA,MAAM,EAAE,CAAC,WAAD;AAJkB,KAAV,CAApB;AAMA,WAAOD,WAAW,CAACE,GAAZ,CAAgBC,IAAI,IAAI,KAAKd,WAAL,CAAiBc,IAAjB,CAAxB,CAAP;AACH;;AAEkB,QAANC,MAAM,CACfxB,MADe,EAEf;AAAEyB,IAAAA;AAAF,GAFe,EAGD;AACd,UAAMvB,IAAI,GAAG;AACTC,MAAAA,EAAE,EAAE,KAAKC,kBAAL,CAAwBJ,MAAxB,CADK;AAETK,MAAAA,EAAE,EAAE,KAAKC,aAAL,CAAmBmB,KAAK,CAACxB,IAAzB;AAFK,KAAb;;AAKA,QAAI;AACA,YAAM,KAAKJ,MAAL,CAAY6B,GAAZ,iCACCD,KADD;AAEFE,QAAAA,IAAI,EAAE;AAFJ,SAGCzB,IAHD,EAAN;AAKA,aAAOuB,KAAP;AACH,KAPD,CAOE,OAAOf,EAAP,EAAW;AACT,YAAM,IAAIC,cAAJ,CACFD,EAAE,CAACE,OAAH,IAAc,yBADZ,EAEFF,EAAE,CAACG,IAAH,IAAW,oBAFT,EAGF;AACIX,QAAAA;AADJ,OAHE,CAAN;AAOH;AACJ;;AAEkB,QAAN0B,MAAM,CACf5B,MADe,EAEf;AAAEyB,IAAAA;AAAF,GAFe,EAGD;AACd,UAAMvB,IAAI,GAAG;AACTC,MAAAA,EAAE,EAAE,KAAKC,kBAAL,CAAwBJ,MAAxB,CADK;AAETK,MAAAA,EAAE,EAAE,KAAKC,aAAL,CAAmBmB,KAAK,CAACxB,IAAzB;AAFK,KAAb;;AAKA,QAAI;AACA,YAAM,KAAKJ,MAAL,CAAY6B,GAAZ,iCACCD,KADD,GAECvB,IAFD,EAAN;AAIA,aAAOuB,KAAP;AACH,KAND,CAME,OAAOf,EAAP,EAAW;AACT,YAAM,IAAIC,cAAJ,CACFD,EAAE,CAACE,OAAH,IAAc,yBADZ,EAEFF,EAAE,CAACG,IAAH,IAAW,qBAFT,EAGF;AACIX,QAAAA,IADJ;AAEIuB,QAAAA;AAFJ,OAHE,CAAN;AAQH;AACJ;;AAEkB,QAANI,MAAM,CACf7B,MADe,EAEf;AAAEyB,IAAAA;AAAF,GAFe,EAGD;AACd,UAAMvB,IAAI,GAAG;AACTC,MAAAA,EAAE,EAAE,KAAKC,kBAAL,CAAwBJ,MAAxB,CADK;AAETK,MAAAA,EAAE,EAAE,KAAKC,aAAL,CAAmBmB,KAAK,CAACxB,IAAzB;AAFK,KAAb;;AAKA,QAAI;AACA,YAAM,KAAKJ,MAAL,CAAYgC,MAAZ,mBACC3B,IADD,EAAN;AAGA,aAAOuB,KAAP;AACH,KALD,CAKE,OAAOf,EAAP,EAAW;AACT,YAAM,IAAIC,cAAJ,CACFD,EAAE,CAACE,OAAH,IAAc,yBADZ,EAEFF,EAAE,CAACG,IAAH,IAAW,qBAFT,EAGF;AACIX,QAAAA,IADJ;AAEIuB,QAAAA;AAFJ,OAHE,CAAN;AAQH;AACJ;;AAE2B,QAAfK,eAAe,CACxB9B,MADwB,EAExB;AAAEyB,IAAAA;AAAF,GAFwB,EAGX;AACb,QAAIM,KAA6B,GAAG,EAApC;;AACA,QAAI;AACAA,MAAAA,KAAK,GAAG,MAAM,qBAA+B;AACzClC,QAAAA,MAAM,EAAE,KAAKA,MAD4B;AAEzCoB,QAAAA,YAAY,EAAE,KAAKb,kBAAL,CAAwBJ,MAAxB,CAF2B;AAGzCkB,QAAAA,OAAO,EAAE;AACLc,UAAAA,KAAK,EAAE,MADF;AAELb,UAAAA,UAAU,EAAG,GAAE,KAAKb,aAAL,CAAmBmB,KAAK,CAACxB,IAAzB,CAA+B;AAFzC;AAHgC,OAA/B,CAAd;AAQH,KATD,CASE,OAAOS,EAAP,EAAW;AACT,YAAM,IAAIC,cAAJ,CACFD,EAAE,CAACE,OAAH,IAAc,6CADZ,EAEFF,EAAE,CAACG,IAAH,IAAW,6BAFT,CAAN;AAIH;;AACD,UAAMG,KAAK,GAAGe,KAAK,CAACT,GAAN,CAAUW,IAAI,IAAI;AAC5B,aAAO,KAAKnC,WAAL,CAAiBoC,QAAjB,iCACAD,IADA;AAEHR,QAAAA,KAAK,EAAE;AACHxB,UAAAA,IAAI,EAAEwB,KAAK,CAACxB,IADT;AAEHkC,UAAAA,IAAI,EAAEV,KAAK,CAACU,IAFT;AAGHC,UAAAA,WAAW,EAAEX,KAAK,CAACW;AAHhB;AAFJ,SAAP;AAQH,KATa,CAAd;;AAUA,QAAI;AACA,YAAM,+BAAc;AAChBxC,QAAAA,KAAK,EAAE,KAAKA,KADI;AAEhBoB,QAAAA;AAFgB,OAAd,CAAN;AAIH,KALD,CAKE,OAAON,EAAP,EAAW;AACT,YAAM,IAAIC,cAAJ,CACFD,EAAE,CAACE,OAAH,IAAc,wCADZ,EAEFF,EAAE,CAACG,IAAH,IAAW,yBAFT,EAGF;AACIY,QAAAA;AADJ,OAHE,CAAN;AAOH;AACJ;;AAEOhB,EAAAA,WAAW,CAACc,IAAD,EAA2C;AAC1D,WAAO,0BAAY,KAAK1B,MAAjB,EAAyB0B,IAAzB,EAA+B,CAAC,MAAD,CAA/B,CAAP;AACH;;AAEOnB,EAAAA,kBAAkB,CAACJ,MAAD,EAAiB;AACvC,WAAQ,KAAIA,MAAM,CAACqC,EAAG,EAAtB;AACH;;AAEO/B,EAAAA,aAAa,CAACL,IAAD,EAAuB;AACxC,WAAQ,KAAIA,IAAK,EAAjB;AACH;;AAvNsE","sourcesContent":["import {\n    AdminUsersContext,\n    Group,\n    GroupsStorageOperations,\n    GroupsStorageOperationsCreateParams,\n    GroupsStorageOperationsDeleteParams,\n    GroupsStorageOperationsGetParams,\n    GroupsStorageOperationsListParams,\n    GroupsStorageOperationsUpdateParams,\n    GroupsStorageOperationsUpdateUserLinksParams,\n    TenantAccess\n} from \"@webiny/api-security-admin-users/types\";\nimport { Entity, Table } from \"dynamodb-toolbox\";\nimport { createTable } from \"~/definitions/table\";\nimport { createGroupEntity } from \"~/definitions/groupEntity\";\nimport { createLinksEntity } from \"~/definitions/linksEntity\";\nimport WebinyError from \"@webiny/error\";\nimport { cleanupItem } from \"@webiny/db-dynamodb/utils/cleanup\";\nimport { queryAll } from \"@webiny/db-dynamodb/utils/query\";\nimport { sortItems } from \"@webiny/db-dynamodb/utils/sort\";\nimport { batchWriteAll } from \"@webiny/db-dynamodb/utils/batchWrite\";\nimport { Tenant } from \"@webiny/api-tenancy/types\";\nimport { DbItem } from \"~/types\";\n\ninterface Params {\n    context: AdminUsersContext;\n}\n\nexport class GroupsStorageOperationsDdb implements GroupsStorageOperations {\n    private readonly context: AdminUsersContext;\n    private readonly table: Table;\n    private readonly entity: Entity<any>;\n    private readonly linksEntity: Entity<any>;\n\n    public constructor({ context }: Params) {\n        this.context = context;\n\n        this.table = createTable({\n            context: this.context\n        });\n\n        this.entity = createGroupEntity({\n            context,\n            table: this.table\n        });\n\n        this.linksEntity = createLinksEntity({\n            context,\n            table: this.table\n        });\n    }\n\n    public async get(\n        tenant: Tenant,\n        { slug }: GroupsStorageOperationsGetParams\n    ): Promise<Group | null> {\n        const keys = {\n            PK: this.createPartitionKey(tenant),\n            SK: this.createSortKey(slug)\n        };\n        try {\n            const result = await this.entity.get(keys);\n            if (!result || !result.Item) {\n                return null;\n            }\n            return this.cleanupItem(result.Item);\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not load group.\",\n                ex.code || \"GET_GROUP_ERROR\",\n                {\n                    keys,\n                    slug\n                }\n            );\n        }\n    }\n\n    public async list(\n        tenant: Tenant,\n        { sort }: GroupsStorageOperationsListParams\n    ): Promise<Group[]> {\n        let items: Group[] = [];\n        try {\n            items = await queryAll<Group>({\n                entity: this.entity,\n                partitionKey: this.createPartitionKey(tenant),\n                options: {\n                    beginsWith: \"G#\"\n                }\n            });\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not list groups.\",\n                ex.code || \"LIST_GROUP_ERROR\"\n            );\n        }\n\n        const sortedItems = sortItems({\n            items,\n            sort,\n            context: this.context,\n            fields: [\"createdOn\"]\n        });\n        return sortedItems.map(item => this.cleanupItem(item));\n    }\n\n    public async create(\n        tenant: Tenant,\n        { group }: GroupsStorageOperationsCreateParams\n    ): Promise<Group> {\n        const keys = {\n            PK: this.createPartitionKey(tenant),\n            SK: this.createSortKey(group.slug)\n        };\n\n        try {\n            await this.entity.put({\n                ...group,\n                TYPE: \"security.group\",\n                ...keys\n            });\n            return group;\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not create group.\",\n                ex.code || \"CREATE_GROUP_ERROR\",\n                {\n                    keys\n                }\n            );\n        }\n    }\n\n    public async update(\n        tenant: Tenant,\n        { group }: GroupsStorageOperationsUpdateParams\n    ): Promise<Group> {\n        const keys = {\n            PK: this.createPartitionKey(tenant),\n            SK: this.createSortKey(group.slug)\n        };\n\n        try {\n            await this.entity.put({\n                ...group,\n                ...keys\n            });\n            return group;\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not update group.\",\n                ex.code || \"CREATE_UPDATE_ERROR\",\n                {\n                    keys,\n                    group\n                }\n            );\n        }\n    }\n\n    public async delete(\n        tenant: Tenant,\n        { group }: GroupsStorageOperationsDeleteParams\n    ): Promise<Group> {\n        const keys = {\n            PK: this.createPartitionKey(tenant),\n            SK: this.createSortKey(group.slug)\n        };\n\n        try {\n            await this.entity.delete({\n                ...keys\n            });\n            return group;\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not delete group.\",\n                ex.code || \"CREATE_DELETE_ERROR\",\n                {\n                    keys,\n                    group\n                }\n            );\n        }\n    }\n\n    public async updateUserLinks(\n        tenant: Tenant,\n        { group }: GroupsStorageOperationsUpdateUserLinksParams\n    ): Promise<void> {\n        let links: DbItem<TenantAccess>[] = [];\n        try {\n            links = await queryAll<DbItem<TenantAccess>>({\n                entity: this.entity,\n                partitionKey: this.createPartitionKey(tenant),\n                options: {\n                    index: \"GSI1\",\n                    beginsWith: `${this.createSortKey(group.slug)}#`\n                }\n            });\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not get all the user <-> group links.\",\n                ex.code || \"USER_GROUP_LINKS_LIST_ERROR\"\n            );\n        }\n        const items = links.map(link => {\n            return this.linksEntity.putBatch({\n                ...link,\n                group: {\n                    slug: group.slug,\n                    name: group.name,\n                    permissions: group.permissions\n                }\n            });\n        });\n        try {\n            await batchWriteAll({\n                table: this.table,\n                items\n            });\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not update user <-> group links.\",\n                ex.code || \"UPDATE_USER_LINKS_ERROR\",\n                {\n                    group\n                }\n            );\n        }\n    }\n\n    private cleanupItem(item: Group & Record<string, any>): Group {\n        return cleanupItem(this.entity, item, [\"TYPE\"]);\n    }\n\n    private createPartitionKey(tenant: Tenant) {\n        return `T#${tenant.id}`;\n    }\n\n    private createSortKey(slug: string): string {\n        return `G#${slug}`;\n    }\n}\n"],"file":"GroupsStorageOperations.js"}