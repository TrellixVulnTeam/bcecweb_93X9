{"version":3,"sources":["../../../src/operations/apiKey/ApiKeyStorageOperations.ts"],"names":["ApiKeyStorageOperationsDdb","constructor","context","table","entity","get","id","keys","PK","createPartitionKey","SK","createSortKey","result","Item","cleanupItem","ex","WebinyError","message","code","getByToken","token","queryParams","partitionKey","createGsiPartitionKey","options","eq","createGsiSortKey","index","list","sort","items","beginsWith","sortedItems","fields","map","item","create","apiKey","GSI1_PK","GSI1_SK","put","TYPE","update","delete","tenancy","getCurrentTenant"],"mappings":"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","sourcesContent":["import {\n    AdminUsersContext,\n    ApiKey,\n    ApiKeyStorageOperations,\n    ApiKeyStorageOperationsCreateParams,\n    ApiKeyStorageOperationsDeleteParams,\n    ApiKeyStorageOperationsGetByTokenParams,\n    ApiKeyStorageOperationsGetParams,\n    ApiKeyStorageOperationsListParams,\n    ApiKeyStorageOperationsUpdateParams\n} from \"@webiny/api-security-admin-users/types\";\nimport WebinyError from \"@webiny/error\";\nimport { Entity, Table } from \"dynamodb-toolbox\";\nimport { createTable } from \"~/definitions/table\";\nimport { createApiKeyEntity } from \"~/definitions/apiKeyEntity\";\nimport { cleanupItem } from \"@webiny/db-dynamodb/utils/cleanup\";\nimport { queryAll, queryOne, QueryOneParams } from \"@webiny/db-dynamodb/utils/query\";\nimport { sortItems } from \"@webiny/db-dynamodb/utils/sort\";\n\ninterface Params {\n    context: AdminUsersContext;\n}\n\nexport class ApiKeyStorageOperationsDdb implements ApiKeyStorageOperations {\n    private readonly context: AdminUsersContext;\n    private readonly table: Table;\n    private readonly entity: Entity<any>;\n\n    public constructor({ context }: Params) {\n        this.context = context;\n\n        this.table = createTable({\n            context\n        });\n\n        this.entity = createApiKeyEntity({\n            context,\n            table: this.table\n        });\n    }\n\n    public async get({ id }: ApiKeyStorageOperationsGetParams): Promise<ApiKey> {\n        const keys = {\n            PK: this.createPartitionKey(),\n            SK: this.createSortKey(id)\n        };\n\n        try {\n            const result = await this.entity.get(keys);\n            if (!result || !result.Item) {\n                return null;\n            }\n            return this.cleanupItem(result.Item);\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not load api key.\",\n                ex.code || \"GET_API_KEY_ERROR\",\n                {\n                    keys,\n                    id\n                }\n            );\n        }\n    }\n\n    public async getByToken({ token }: ApiKeyStorageOperationsGetByTokenParams): Promise<ApiKey> {\n        const queryParams: QueryOneParams = {\n            entity: this.entity,\n            partitionKey: this.createGsiPartitionKey(),\n            options: {\n                eq: this.createGsiSortKey(token),\n                index: \"GSI1\"\n            }\n        };\n\n        try {\n            const result = await queryOne<ApiKey>(queryParams);\n            return this.cleanupItem(result);\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not load api key by token.\",\n                ex.code || \"GET_BY_TOKEN_API_KEY_ERROR\",\n                {\n                    partitionKey: queryParams.partitionKey,\n                    options: queryParams.options\n                }\n            );\n        }\n    }\n\n    public async list({ sort }: ApiKeyStorageOperationsListParams): Promise<ApiKey[]> {\n        let items: ApiKey[] = [];\n        try {\n            items = await queryAll<ApiKey>({\n                entity: this.entity,\n                partitionKey: this.createPartitionKey(),\n                options: {\n                    beginsWith: \"API_KEY#\"\n                }\n            });\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not list api keys.\",\n                ex.code || \"LIST_API_KEY_ERROR\"\n            );\n        }\n\n        const sortedItems = sortItems({\n            items,\n            sort,\n            context: this.context,\n            fields: [\"createdOn\"]\n        });\n        return sortedItems.map(item => this.cleanupItem(item));\n    }\n\n    public async create({ apiKey }: ApiKeyStorageOperationsCreateParams): Promise<ApiKey> {\n        const keys = {\n            PK: this.createPartitionKey(),\n            SK: this.createSortKey(apiKey.id),\n            GSI1_PK: this.createGsiPartitionKey(),\n            GSI1_SK: this.createGsiSortKey(apiKey.token)\n        };\n\n        try {\n            await this.entity.put({\n                ...apiKey,\n                TYPE: \"security.apiKey\",\n                ...keys\n            });\n            return apiKey;\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not create api key.\",\n                ex.code || \"CREATE_API_KEY_ERROR\",\n                {\n                    keys\n                }\n            );\n        }\n    }\n\n    public async update({ apiKey }: ApiKeyStorageOperationsUpdateParams): Promise<ApiKey> {\n        const keys = {\n            PK: this.createPartitionKey(),\n            SK: this.createSortKey(apiKey.id)\n        };\n\n        try {\n            await this.entity.put({\n                ...apiKey,\n                TYPE: \"security.apiKey\",\n                ...keys\n            });\n            return apiKey;\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not update api key.\",\n                ex.code || \"UPDATE_API_KEY_ERROR\",\n                {\n                    keys\n                }\n            );\n        }\n    }\n\n    public async delete({ apiKey }: ApiKeyStorageOperationsDeleteParams): Promise<ApiKey> {\n        const keys = {\n            PK: this.createPartitionKey(),\n            SK: this.createSortKey(apiKey.id)\n        };\n\n        try {\n            await this.entity.delete(keys);\n            return apiKey;\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not update api key.\",\n                ex.code || \"UPDATE_API_KEY_ERROR\",\n                {\n                    keys\n                }\n            );\n        }\n    }\n\n    private cleanupItem(item: ApiKey & Record<string, any>): ApiKey {\n        return cleanupItem(this.entity, item, [\"TYPE\"]);\n    }\n\n    private createPartitionKey(): string {\n        return `T#${this.context.tenancy.getCurrentTenant().id}`;\n    }\n\n    private createSortKey(id: string): string {\n        return `API_KEY#${id}`;\n    }\n\n    private createGsiPartitionKey(): string {\n        return `T#${this.context.tenancy.getCurrentTenant().id}`;\n    }\n\n    private createGsiSortKey(token: string): string {\n        return `API_KEY#${token}`;\n    }\n}\n"],"file":"ApiKeyStorageOperations.js"}