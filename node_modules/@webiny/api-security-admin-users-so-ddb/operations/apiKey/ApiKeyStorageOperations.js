"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ApiKeyStorageOperationsDdb = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _error = _interopRequireDefault(require("@webiny/error"));

var _table = require("../../definitions/table");

var _apiKeyEntity = require("../../definitions/apiKeyEntity");

var _cleanup = require("@webiny/db-dynamodb/utils/cleanup");

var _query = require("@webiny/db-dynamodb/utils/query");

var _sort = require("@webiny/db-dynamodb/utils/sort");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

class ApiKeyStorageOperationsDdb {
  constructor({
    context
  }) {
    (0, _defineProperty2.default)(this, "context", void 0);
    (0, _defineProperty2.default)(this, "table", void 0);
    (0, _defineProperty2.default)(this, "entity", void 0);
    this.context = context;
    this.table = (0, _table.createTable)({
      context
    });
    this.entity = (0, _apiKeyEntity.createApiKeyEntity)({
      context,
      table: this.table
    });
  }

  async get({
    id
  }) {
    const keys = {
      PK: this.createPartitionKey(),
      SK: this.createSortKey(id)
    };

    try {
      const result = await this.entity.get(keys);

      if (!result || !result.Item) {
        return null;
      }

      return this.cleanupItem(result.Item);
    } catch (ex) {
      throw new _error.default(ex.message || "Could not load api key.", ex.code || "GET_API_KEY_ERROR", {
        keys,
        id
      });
    }
  }

  async getByToken({
    token
  }) {
    const queryParams = {
      entity: this.entity,
      partitionKey: this.createGsiPartitionKey(),
      options: {
        eq: this.createGsiSortKey(token),
        index: "GSI1"
      }
    };

    try {
      const result = await (0, _query.queryOne)(queryParams);
      return this.cleanupItem(result);
    } catch (ex) {
      throw new _error.default(ex.message || "Could not load api key by token.", ex.code || "GET_BY_TOKEN_API_KEY_ERROR", {
        partitionKey: queryParams.partitionKey,
        options: queryParams.options
      });
    }
  }

  async list({
    sort
  }) {
    let items = [];

    try {
      items = await (0, _query.queryAll)({
        entity: this.entity,
        partitionKey: this.createPartitionKey(),
        options: {
          beginsWith: "API_KEY#"
        }
      });
    } catch (ex) {
      throw new _error.default(ex.message || "Could not list api keys.", ex.code || "LIST_API_KEY_ERROR");
    }

    const sortedItems = (0, _sort.sortItems)({
      items,
      sort,
      context: this.context,
      fields: ["createdOn"]
    });
    return sortedItems.map(item => this.cleanupItem(item));
  }

  async create({
    apiKey
  }) {
    const keys = {
      PK: this.createPartitionKey(),
      SK: this.createSortKey(apiKey.id),
      GSI1_PK: this.createGsiPartitionKey(),
      GSI1_SK: this.createGsiSortKey(apiKey.token)
    };

    try {
      await this.entity.put(_objectSpread(_objectSpread({}, apiKey), {}, {
        TYPE: "security.apiKey"
      }, keys));
      return apiKey;
    } catch (ex) {
      throw new _error.default(ex.message || "Could not create api key.", ex.code || "CREATE_API_KEY_ERROR", {
        keys
      });
    }
  }

  async update({
    apiKey
  }) {
    const keys = {
      PK: this.createPartitionKey(),
      SK: this.createSortKey(apiKey.id)
    };

    try {
      await this.entity.put(_objectSpread(_objectSpread({}, apiKey), {}, {
        TYPE: "security.apiKey"
      }, keys));
      return apiKey;
    } catch (ex) {
      throw new _error.default(ex.message || "Could not update api key.", ex.code || "UPDATE_API_KEY_ERROR", {
        keys
      });
    }
  }

  async delete({
    apiKey
  }) {
    const keys = {
      PK: this.createPartitionKey(),
      SK: this.createSortKey(apiKey.id)
    };

    try {
      await this.entity.delete(keys);
      return apiKey;
    } catch (ex) {
      throw new _error.default(ex.message || "Could not update api key.", ex.code || "UPDATE_API_KEY_ERROR", {
        keys
      });
    }
  }

  cleanupItem(item) {
    return (0, _cleanup.cleanupItem)(this.entity, item, ["TYPE"]);
  }

  createPartitionKey() {
    return `T#${this.context.tenancy.getCurrentTenant().id}`;
  }

  createSortKey(id) {
    return `API_KEY#${id}`;
  }

  createGsiPartitionKey() {
    return `T#${this.context.tenancy.getCurrentTenant().id}`;
  }

  createGsiSortKey(token) {
    return `API_KEY#${token}`;
  }

}

exports.ApiKeyStorageOperationsDdb = ApiKeyStorageOperationsDdb;
//# sourceMappingURL=ApiKeyStorageOperations.js.map