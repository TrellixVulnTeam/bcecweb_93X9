import { AdminUsersContext, User, UserStorageOperations, UserStorageOperationsCreateParams, UserStorageOperationsUpdateParams, UserStorageOperationsDeleteParams, UserStorageOperationsGetParams, UserStorageOperationsListParams, UserStorageOperationsLinkUserToTenantParams, UserStorageOperationsUnlinkUserFromTenantParams, UserPersonalAccessToken, UserStorageOperationsCreateTokenParams, UserStorageOperationsDeleteTokenParams, UserStorageOperationsGetTokenParams, UserStorageOperationsGetUserByPatParams, UserStorageOperationsListTokensParams, UserStorageOperationsUpdateTokenParams, UserStorageOperationsListUsersLinksParams, TenantAccess } from "@webiny/api-security-admin-users/types";
interface Params {
    context: AdminUsersContext;
}
export declare class UserStorageOperationsDdb implements UserStorageOperations {
    private readonly context;
    private readonly table;
    private readonly entity;
    private readonly tokenEntity;
    private readonly linksEntity;
    constructor({ context }: Params);
    getUser(params: UserStorageOperationsGetParams): Promise<User | null>;
    getUserByPersonalAccessToken(params: UserStorageOperationsGetUserByPatParams): Promise<User>;
    listUsers(params: UserStorageOperationsListParams): Promise<User[]>;
    createUser(params: UserStorageOperationsCreateParams): Promise<User>;
    updateUser(params: UserStorageOperationsUpdateParams): Promise<User>;
    deleteUser(params: UserStorageOperationsDeleteParams): Promise<User>;
    linkUserToTenant(params: UserStorageOperationsLinkUserToTenantParams): Promise<void>;
    unlinkUserFromTenant(params: UserStorageOperationsUnlinkUserFromTenantParams): Promise<void>;
    createToken(params: UserStorageOperationsCreateTokenParams): Promise<UserPersonalAccessToken>;
    updateToken(params: UserStorageOperationsUpdateTokenParams): Promise<UserPersonalAccessToken>;
    deleteToken(params: UserStorageOperationsDeleteTokenParams): Promise<UserPersonalAccessToken>;
    getPersonalAccessToken(params: UserStorageOperationsGetTokenParams): Promise<UserPersonalAccessToken>;
    listTokens(params: UserStorageOperationsListTokensParams): Promise<UserPersonalAccessToken[]>;
    listUsersLinks(params: UserStorageOperationsListUsersLinksParams): Promise<TenantAccess[]>;
    private listUsersByIds;
    private cleanupItem;
    private cleanupTokenItem;
    private cleanupLinksItem;
    /**
     * There is a need for this method because of the old way of saving the user data.
     */
    private createUserPartitionKey;
    private createPartitionKey;
    private createUserSortKey;
    private createLinkSortKey;
    private createGsiPartitionKey;
    private createGsiSortKey;
}
export {};
