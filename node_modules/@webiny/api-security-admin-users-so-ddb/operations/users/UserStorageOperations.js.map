{"version":3,"sources":["../../../src/operations/users/UserStorageOperations.ts"],"names":["UserStorageOperationsDdb","constructor","context","table","entity","tokenEntity","linksEntity","getUser","params","id","keys","PK","createPartitionKey","SK","createUserSortKey","result","get","Item","cleanupItem","ex","WebinyError","message","code","getUserByPersonalAccessToken","token","queryParams","partitionKey","options","index","eq","limit","login","undefined","listUsers","where","sort","tenant","id_in","listUsersByIds","userTenantAccessList","queryAllParams","beginsWith","length","batch","map","item","getBatch","users","results","items","user","fields","createUser","createUserPartitionKey","put","TYPE","updateUser","original","deleteUser","gt","deleteBatch","linkUserToTenant","group","link","createLinkSortKey","GSI1_PK","createGsiPartitionKey","GSI1_SK","createGsiSortKey","unlinkUserFromTenant","usersPartitionKey","usersOptions","delete","createToken","identity","updateToken","deleteToken","getPersonalAccessToken","tokenId","cleanupTokenItem","listTokens","messsage","listUsersLinks","ids","queries","Promise","all","push","cleanupLinksItem","slug"],"mappings":"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","sourcesContent":["import {\n    AdminUsersContext,\n    User,\n    UserStorageOperations,\n    UserStorageOperationsCreateParams,\n    UserStorageOperationsUpdateParams,\n    UserStorageOperationsDeleteParams,\n    UserStorageOperationsGetParams,\n    UserStorageOperationsListParams,\n    UserStorageOperationsLinkUserToTenantParams,\n    Group,\n    UserStorageOperationsUnlinkUserFromTenantParams,\n    UserPersonalAccessToken,\n    UserStorageOperationsCreateTokenParams,\n    UserStorageOperationsDeleteTokenParams,\n    UserStorageOperationsGetTokenParams,\n    UserStorageOperationsGetUserByPatParams,\n    UserStorageOperationsListTokensParams,\n    UserStorageOperationsUpdateTokenParams,\n    UserStorageOperationsListUsersLinksParams,\n    TenantAccess\n} from \"@webiny/api-security-admin-users/types\";\nimport { createTable } from \"~/definitions/table\";\nimport { createUserEntity } from \"~/definitions/userEntity\";\nimport { Entity, Table } from \"dynamodb-toolbox\";\nimport WebinyError from \"@webiny/error\";\nimport { cleanupItem } from \"@webiny/db-dynamodb/utils/cleanup\";\nimport { queryAll, QueryAllParams, queryOne, QueryParams } from \"@webiny/db-dynamodb/utils/query\";\nimport { createLinksEntity } from \"~/definitions/linksEntity\";\nimport { batchReadAll } from \"@webiny/db-dynamodb/utils/batchRead\";\nimport { batchWriteAll } from \"@webiny/db-dynamodb/utils/batchWrite\";\nimport { Tenant } from \"@webiny/api-tenancy/types\";\nimport { createTokenEntity } from \"~/definitions/tokenEntity\";\nimport { DbItem } from \"~/types\";\nimport { sortItems } from \"@webiny/db-dynamodb/utils/sort\";\n\ninterface Params {\n    context: AdminUsersContext;\n}\n\nexport class UserStorageOperationsDdb implements UserStorageOperations {\n    private readonly context: AdminUsersContext;\n    private readonly table: Table;\n    private readonly entity: Entity<any>;\n    private readonly tokenEntity: Entity<any>;\n    private readonly linksEntity: Entity<any>;\n\n    public constructor({ context }: Params) {\n        this.context = context;\n\n        this.table = createTable({\n            context\n        });\n\n        this.entity = createUserEntity({\n            context,\n            table: this.table\n        });\n\n        this.tokenEntity = createTokenEntity({\n            context,\n            table: this.table\n        });\n\n        this.linksEntity = createLinksEntity({\n            context,\n            table: this.table\n        });\n    }\n\n    public async getUser(params: UserStorageOperationsGetParams): Promise<User | null> {\n        const { id } = params;\n        const keys = {\n            PK: this.createPartitionKey(id),\n            SK: this.createUserSortKey()\n        };\n\n        try {\n            const result = await this.entity.get(keys);\n            if (!result || !result.Item) {\n                return null;\n            }\n            return this.cleanupItem(result.Item);\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not load user.\",\n                ex.code || \"GET_USER_ERROR\",\n                {\n                    keys,\n                    id\n                }\n            );\n        }\n    }\n\n    public async getUserByPersonalAccessToken(\n        params: UserStorageOperationsGetUserByPatParams\n    ): Promise<User> {\n        const { token } = params;\n        const queryParams: QueryParams = {\n            partitionKey: \"PAT\",\n            entity: this.tokenEntity,\n            options: {\n                index: \"GSI1\",\n                eq: token,\n                limit: 1\n            }\n        };\n        let login = undefined;\n        try {\n            const result = await queryOne<UserPersonalAccessToken>(queryParams);\n            if (!result) {\n                throw new WebinyError(\"Could not find token info.\", \"TOKEN_NOT_FOUND\");\n            }\n            login = result.login;\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not find token info.\",\n                ex.code || \"GET_USER_ERROR\",\n                {\n                    queryParams\n                }\n            );\n        }\n\n        return this.getUser({\n            id: login\n        });\n    }\n\n    public async listUsers(params: UserStorageOperationsListParams): Promise<User[]> {\n        const { where, sort } = params;\n        if (!where.tenant && !where.id_in) {\n            throw new WebinyError(\n                `There must be either a tenant or id_in sent when querying for list of users.`,\n                \"MALFORMED_WHERE_LIST_USERS_ERROR\",\n                { where }\n            );\n        }\n        if (where.id_in) {\n            return this.listUsersByIds(where.id_in);\n        }\n\n        let userTenantAccessList: DbItem<TenantAccess>[] = [];\n        const queryAllParams = {\n            entity: this.linksEntity,\n            partitionKey: `T#${where.tenant}`,\n            options: {\n                index: \"GSI1\",\n                beginsWith: \"G#\"\n            }\n        };\n        try {\n            userTenantAccessList = await queryAll(queryAllParams);\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Cannot load users via secondary index.\",\n                ex.code || \"LIST_USERS_VIA_SECONDARY_INDEX_ERROR\",\n                {\n                    partitionKey: queryAllParams.partitionKey,\n                    options: queryAllParams.options\n                }\n            );\n        }\n\n        if (userTenantAccessList.length === 0) {\n            return [];\n        }\n\n        const batch = userTenantAccessList.map(item => {\n            return this.entity.getBatch({\n                PK: item.PK,\n                SK: \"A\"\n            });\n        });\n\n        let users: User[];\n        try {\n            const results = await batchReadAll<User>({\n                table: this.table,\n                items: batch\n            });\n            users = results.map(user => this.cleanupItem(user));\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Cannot load users.\",\n                ex.code || \"LIST_USERS_ERROR\"\n            );\n        }\n\n        return sortItems({\n            context: this.context,\n            items: users,\n            sort,\n            fields: [\"createdOn\"]\n        });\n    }\n\n    public async createUser(params: UserStorageOperationsCreateParams): Promise<User> {\n        const { user } = params;\n        const keys = {\n            PK: this.createUserPartitionKey(user),\n            SK: this.createUserSortKey()\n        };\n        try {\n            await this.entity.put({\n                ...user,\n                TYPE: \"security.user\",\n                ...keys\n            });\n            return user;\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not store user to the DDB.\",\n                ex.code || \"CREATE_USER_DDB_ERROR\",\n                {\n                    keys,\n                    user\n                }\n            );\n        }\n    }\n\n    public async updateUser(params: UserStorageOperationsUpdateParams): Promise<User> {\n        const { user, original } = params;\n        const keys = {\n            PK: this.createUserPartitionKey(user),\n            SK: this.createUserSortKey()\n        };\n        try {\n            await this.entity.put({\n                ...user,\n                ...keys\n            });\n            return user;\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not save user to the DDB.\",\n                ex.code || \"UPDATE_USER_DDB_ERROR\",\n                {\n                    keys,\n                    user,\n                    original\n                }\n            );\n        }\n    }\n\n    public async deleteUser(params: UserStorageOperationsDeleteParams): Promise<User> {\n        const { user } = params;\n\n        let items = [];\n        try {\n            items = await queryAll({\n                entity: this.entity,\n                partitionKey: this.createUserPartitionKey(user),\n                options: {\n                    gt: \" \"\n                }\n            });\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not load users data.\",\n                ex.code || \"LIST_USER_DATA_ERROR\",\n                {\n                    user\n                }\n            );\n        }\n\n        try {\n            await batchWriteAll({\n                table: this.table,\n                items: items.map(item => {\n                    return this.entity.deleteBatch({\n                        PK: item.PK,\n                        SK: item.SK\n                    });\n                })\n            });\n            return user;\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not delete user data.\",\n                ex.code || \"DELETE_USER_DATA_ERROR\",\n                {\n                    user\n                }\n            );\n        }\n    }\n\n    public async linkUserToTenant(\n        params: UserStorageOperationsLinkUserToTenantParams\n    ): Promise<void> {\n        const { user, group, tenant, link } = params;\n        const keys = {\n            PK: this.createUserPartitionKey(user),\n            SK: this.createLinkSortKey(tenant, group),\n            GSI1_PK: this.createGsiPartitionKey(tenant),\n            GSI1_SK: this.createGsiSortKey(group, user)\n        };\n\n        try {\n            await this.linksEntity.put({\n                ...keys,\n                TYPE: \"security.user2tenant\",\n                ...link\n            });\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not create user <-> group link.\",\n                ex.code || \"CREATE_USER_LINK_ERROR\",\n                {\n                    link,\n                    keys\n                }\n            );\n        }\n    }\n\n    public async unlinkUserFromTenant(\n        params: UserStorageOperationsUnlinkUserFromTenantParams\n    ): Promise<void> {\n        const { tenant, user } = params;\n        let userTenantAccessList: DbItem<TenantAccess>[] = [];\n        const usersPartitionKey = this.createUserPartitionKey(user);\n        const usersOptions = {\n            beginsWith: `LINK#T#${tenant.id}#G#`,\n            limit: 1\n        };\n        try {\n            userTenantAccessList = await queryAll({\n                entity: this.linksEntity,\n                partitionKey: usersPartitionKey,\n                options: usersOptions\n            });\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Cannot load users via secondary index.\",\n                ex.code || \"LIST_USERS_VIA_SECONDARY_INDEX_ERROR\",\n                {\n                    partitionKey: usersPartitionKey,\n                    options: usersOptions\n                }\n            );\n        }\n        if (userTenantAccessList.length === 0) {\n            throw new WebinyError(\"Could not find a relation user <-> tenant\");\n        }\n        const keys = {\n            PK: userTenantAccessList[0].PK,\n            SK: userTenantAccessList[0].SK\n        };\n        try {\n            await this.entity.delete(keys);\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not delete link user <-> tenant.\",\n                ex.code || \"DELETE_LINK_USER_TENANT_ERROR\",\n                {\n                    keys,\n                    user\n                }\n            );\n        }\n    }\n\n    public async createToken(\n        params: UserStorageOperationsCreateTokenParams\n    ): Promise<UserPersonalAccessToken> {\n        const { identity, token } = params;\n        const keys = {\n            PK: this.createPartitionKey(identity.id),\n            SK: `PAT#${token.id}`,\n            GSI1_PK: \"PAT\",\n            GSI1_SK: token.token\n        };\n        try {\n            await this.tokenEntity.put({\n                ...token,\n                ...keys,\n                TYPE: \"security.pat\"\n            });\n            return token;\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Cannot create user access token.\",\n                ex.code || \"CREATE_USER_ACCESS_TOKEN_ERROR\",\n                {\n                    keys,\n                    token\n                }\n            );\n        }\n    }\n\n    public async updateToken(\n        params: UserStorageOperationsUpdateTokenParams\n    ): Promise<UserPersonalAccessToken> {\n        const { original, token } = params;\n        const keys = {\n            PK: `U#${original.login}`,\n            SK: `PAT#${original.id}`\n        };\n\n        try {\n            await this.tokenEntity.put({\n                ...token,\n                ...keys\n            });\n            return token;\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Cannot update user access token.\",\n                ex.code || \"UPDATE_USER_ACCESS_TOKEN_ERROR\",\n                {\n                    keys,\n                    token,\n                    original\n                }\n            );\n        }\n    }\n\n    public async deleteToken(\n        params: UserStorageOperationsDeleteTokenParams\n    ): Promise<UserPersonalAccessToken> {\n        const { identity, token } = params;\n        const keys = {\n            PK: this.createPartitionKey(identity.id),\n            SK: `PAT#${token.id}`\n        };\n\n        try {\n            await this.tokenEntity.delete(keys);\n            return token;\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Cannot delete user access token.\",\n                ex.code || \"DELETE_USER_ACCESS_TOKEN_ERROR\",\n                {\n                    keys,\n                    token\n                }\n            );\n        }\n    }\n\n    public async getPersonalAccessToken(\n        params: UserStorageOperationsGetTokenParams\n    ): Promise<UserPersonalAccessToken> {\n        const { login, tokenId } = params;\n        const keys = {\n            PK: `U#${login}`,\n            SK: `PAT#${tokenId}`\n        };\n        try {\n            const result = await this.tokenEntity.get(keys);\n            if (!result || !result.Item) {\n                return null;\n            }\n            return this.cleanupTokenItem(result.Item);\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Cannot get user access token.\",\n                ex.code || \"GET_USER_ACCESS_TOKEN_ERROR\",\n                {\n                    login,\n                    tokenId\n                }\n            );\n        }\n    }\n\n    public async listTokens(\n        params: UserStorageOperationsListTokensParams\n    ): Promise<UserPersonalAccessToken[]> {\n        const { login } = params;\n        const queryParams: QueryAllParams = {\n            entity: this.tokenEntity,\n            partitionKey: `U#${login}`,\n            options: {\n                beginsWith: \"PAT#\"\n            }\n        };\n        try {\n            return await queryAll<UserPersonalAccessToken>(queryParams);\n        } catch (ex) {\n            throw new WebinyError(\n                ex.messsage || \"Cannot list user tokens.\",\n                ex.code || \"LIST_TOKENS_ERROR\",\n                {\n                    login\n                }\n            );\n        }\n    }\n\n    public async listUsersLinks(\n        params: UserStorageOperationsListUsersLinksParams\n    ): Promise<TenantAccess[]> {\n        const ids = params.where.id_in;\n        if (ids.length === 0) {\n            return [];\n        }\n        const queries: Promise<TenantAccess[]>[] = ids.map(id => {\n            return queryAll<TenantAccess>({\n                partitionKey: `U#${id}`,\n                entity: this.linksEntity,\n                options: {\n                    beginsWith: \"LINK#\"\n                }\n            });\n        });\n        try {\n            const results = await Promise.all(queries);\n            const items = [];\n            for (const result of results) {\n                items.push(...result);\n            }\n            return items.map(item => this.cleanupLinksItem(item));\n        } catch (ex) {\n            throw new WebinyError(\n                ex.messsage || \"Cannot list user links.\",\n                ex.code || \"LIST_USER_LINKS_ERROR\",\n                {\n                    ids\n                }\n            );\n        }\n    }\n\n    private async listUsersByIds(ids: string[]): Promise<User[]> {\n        const items = ids.map(id => {\n            return this.entity.getBatch({\n                PK: this.createPartitionKey(id),\n                SK: this.createUserSortKey()\n            });\n        });\n        try {\n            const results = await batchReadAll<User>({\n                table: this.table,\n                items\n            });\n            return results.map(item => this.cleanupItem(item));\n        } catch (ex) {\n            throw new WebinyError(\n                ex.messsage || \"Cannot batch read users by ID.\",\n                ex.code || \"BATCH_READ_BY_ID_ERROR\",\n                {\n                    ids\n                }\n            );\n        }\n    }\n\n    private cleanupItem(item: User & Record<string, any>): User {\n        return cleanupItem(this.entity, item);\n    }\n\n    private cleanupTokenItem(\n        item: UserPersonalAccessToken & Record<string, any>\n    ): UserPersonalAccessToken {\n        return cleanupItem(this.tokenEntity, item);\n    }\n\n    private cleanupLinksItem(item: TenantAccess & Record<string, any>): TenantAccess {\n        return cleanupItem(this.linksEntity, item);\n    }\n    /**\n     * There is a need for this method because of the old way of saving the user data.\n     */\n    private createUserPartitionKey(user: User): string {\n        return this.createPartitionKey(user.id || user.login);\n    }\n\n    private createPartitionKey(id: string): string {\n        return `U#${id}`;\n    }\n\n    private createUserSortKey(): string {\n        return \"A\";\n    }\n\n    private createLinkSortKey(tenant: Tenant, group: Group): string {\n        return `LINK#T#${tenant.id}#G#${group.slug}`;\n    }\n\n    private createGsiPartitionKey(tenant: Tenant): string {\n        return `T#${tenant.id}`;\n    }\n\n    private createGsiSortKey(group: Group, user: User): string {\n        return `G#${group.slug}#U#${user.id || user.login}`;\n    }\n}\n"],"file":"UserStorageOperations.js"}