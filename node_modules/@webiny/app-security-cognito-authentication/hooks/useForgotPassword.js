import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { useCallback, useReducer } from "react";
import Auth from "@aws-amplify/auth";
import { useAuthenticator } from "./useAuthenticator";
export function useForgotPassword() {
  var _useReducer = useReducer(function (prev, next) {
    return _objectSpread(_objectSpread({}, prev), next);
  }, {
    codeSent: null,
    error: null,
    loading: false
  }),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      state = _useReducer2[0],
      setState = _useReducer2[1];

  var _useAuthenticator = useAuthenticator(),
      authState = _useAuthenticator.authState,
      changeState = _useAuthenticator.changeState;

  var requestCode = useCallback( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {
      var username, res;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              setState({
                loading: true
              });
              username = data.username;
              _context.prev = 2;
              _context.next = 5;
              return Auth.forgotPassword(username.toLowerCase());

            case 5:
              res = _context.sent;
              setState({
                loading: false,
                codeSent: res.CodeDeliveryDetails,
                error: null
              });
              _context.next = 15;
              break;

            case 9:
              _context.prev = 9;
              _context.t0 = _context["catch"](2);

              if (!(_context.t0.code === "LimitExceededException")) {
                _context.next = 14;
                break;
              }

              setState({
                loading: false,
                error: "You can't change password that often. Please try later."
              });
              return _context.abrupt("return");

            case 14:
              setState({
                loading: false,
                error: _context.t0.message
              });

            case 15:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[2, 9]]);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }(), []);
  var setPassword = useCallback( /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2) {
      var username;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              username = _ref2.username;
              setState({
                codeSent: null,
                error: null
              });
              changeState("setNewPassword", username);

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x2) {
      return _ref3.apply(this, arguments);
    };
  }(), [changeState]);
  return _objectSpread({
    requestCode: requestCode,
    setPassword: setPassword,
    shouldRender: authState === "forgotPassword"
  }, state);
}
//# sourceMappingURL=useForgotPassword.js.map