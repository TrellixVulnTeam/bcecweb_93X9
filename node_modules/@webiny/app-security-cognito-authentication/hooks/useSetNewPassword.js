import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { useCallback, useReducer } from "react";
import Auth from "@aws-amplify/auth";
import { useAuthenticator } from "./useAuthenticator";
export function useSetNewPassword() {
  var _useReducer = useReducer(function (prev, next) {
    return _objectSpread(_objectSpread({}, prev), next);
  }, {
    error: null,
    loading: false
  }),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      state = _useReducer2[0],
      setState = _useReducer2[1];

  var _useAuthenticator = useAuthenticator(),
      authState = _useAuthenticator.authState,
      authData = _useAuthenticator.authData,
      changeState = _useAuthenticator.changeState;

  var setPassword = useCallback( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {
      var code, password;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              setState({
                loading: true
              });
              code = data.code, password = data.password;
              _context.prev = 2;
              _context.next = 5;
              return Auth.forgotPasswordSubmit(authData.toLowerCase(), code, password);

            case 5:
              changeState("signIn", null, {
                title: "Password updated",
                text: "You can now login using your new password!",
                type: "success"
              });
              setState({
                loading: false,
                error: null
              });
              _context.next = 12;
              break;

            case 9:
              _context.prev = 9;
              _context.t0 = _context["catch"](2);
              setState({
                loading: false,
                error: _context.t0.message
              });

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[2, 9]]);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }(), [changeState]);
  return _objectSpread({
    setPassword: setPassword,
    shouldRender: authState === "setNewPassword"
  }, state);
}
//# sourceMappingURL=useSetNewPassword.js.map