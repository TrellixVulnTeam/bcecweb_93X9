import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { useCallback } from "react";
import Auth from "@aws-amplify/auth";
import get from "lodash.get";
import { useAuthenticator } from "./useAuthenticator";
export function useRequireNewPassword() {
  var _useAuthenticator = useAuthenticator(),
      authState = _useAuthenticator.authState,
      authData = _useAuthenticator.authData,
      changeState = _useAuthenticator.changeState;

  var checkContact = useCallback(function (user) {
    Auth.verifiedContact(user).then(function (data) {
      if (data.verified) {
        changeState("signedIn", user);
      } else {
        changeState("verifyContact", _objectSpread(_objectSpread({}, user), data));
      }
    });
  }, [changeState]);
  var confirm = useCallback( /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {
      var password, requiredAttributes, user;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              password = _ref.password, requiredAttributes = _ref.requiredAttributes;
              _context.prev = 1;
              _context.next = 4;
              return Auth.completeNewPassword(authData, password, requiredAttributes);

            case 4:
              user = _context.sent;

              if (user.challengeName === "SMS_MFA") {
                changeState("confirmSignIn", user);
              } else if (user.challengeName === "MFA_SETUP") {
                changeState("TOTPSetup", user);
              } else {
                checkContact(user);
              }

              _context.next = 11;
              break;

            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](1);
              console.log(_context.t0);

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[1, 8]]);
    }));

    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), [changeState]);
  return {
    confirm: confirm,
    shouldRender: authState === "requireNewPassword",
    requiredAttributes: get(authData, "challengeParam.requiredAttributes", [])
  };
}
//# sourceMappingURL=useRequireNewPassword.js.map