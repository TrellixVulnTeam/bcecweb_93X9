import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { useCallback, useReducer } from "react";
import Auth from "@aws-amplify/auth";
import { useAuthenticator } from "./useAuthenticator";
export function useSignIn() {
  var _useReducer = useReducer(function (prev, next) {
    return _objectSpread(_objectSpread({}, prev), next);
  }, {
    error: null,
    loading: false
  }),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      state = _useReducer2[0],
      setState = _useReducer2[1];

  var _useAuthenticator = useAuthenticator(),
      authState = _useAuthenticator.authState,
      changeState = _useAuthenticator.changeState;

  var checkContact = useCallback(function (user) {
    Auth.verifiedContact(user).then(function (data) {
      if (data.verified) {
        changeState("signedIn", user);
      } else {
        changeState("verifyContact", _objectSpread(_objectSpread({}, user), data));
      }
    });
  }, [changeState]);
  var signIn = useCallback( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(input) {
      var username, password, user;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              setState({
                loading: true,
                error: null
              });
              username = input.username, password = input.password;
              _context.prev = 2;
              _context.next = 5;
              return Auth.signIn(username.toLowerCase(), password);

            case 5:
              user = _context.sent;
              setState({
                loading: false
              });

              if (user.challengeName === "SMS_MFA" || user.challengeName === "SOFTWARE_TOKEN_MFA") {
                changeState("confirmSignIn", user);
              } else if (user.challengeName === "NEW_PASSWORD_REQUIRED") {
                changeState("requireNewPassword", user);
              } else if (user.challengeName === "MFA_SETUP") {
                changeState("TOTPSetup", user);
              } else {
                checkContact(user);
              }

              _context.next = 15;
              break;

            case 10:
              _context.prev = 10;
              _context.t0 = _context["catch"](2);
              console.log(_context.t0);
              setState({
                loading: false
              });

              if (_context.t0.code === "UserNotConfirmedException") {
                changeState("confirmSignUp", {
                  username: username
                });
              } else if (_context.t0.code === "PasswordResetRequiredException") {
                changeState("forgotPassword", {
                  username: username,
                  system: true
                });
              } else {
                setState({
                  error: _context.t0
                });
              }

            case 15:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[2, 10]]);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }(), [changeState]);
  return _objectSpread({
    shouldRender: ["signIn", "signedOut", "signedUp"].includes(authState),
    signIn: signIn
  }, state);
}
//# sourceMappingURL=useSignIn.js.map