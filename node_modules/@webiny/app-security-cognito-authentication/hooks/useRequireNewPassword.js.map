{"version":3,"sources":["../../src/hooks/useRequireNewPassword.ts"],"names":["useCallback","Auth","get","useAuthenticator","useRequireNewPassword","authState","authData","changeState","checkContact","user","verifiedContact","then","data","verified","confirm","password","requiredAttributes","completeNewPassword","challengeName","console","log","shouldRender"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,SAASC,gBAAT;AAaA,OAAO,SAASC,qBAAT,GAAqD;AACxD,0BAA6CD,gBAAgB,EAA7D;AAAA,MAAQE,SAAR,qBAAQA,SAAR;AAAA,MAAmBC,QAAnB,qBAAmBA,QAAnB;AAAA,MAA6BC,WAA7B,qBAA6BA,WAA7B;;AAEA,MAAMC,YAAY,GAAGR,WAAW,CAC5B,UAAAS,IAAI,EAAI;AACJR,IAAAA,IAAI,CAACS,eAAL,CAAqBD,IAArB,EAA2BE,IAA3B,CAAgC,UAAAC,IAAI,EAAI;AACpC,UAAIA,IAAI,CAACC,QAAT,EAAmB;AACfN,QAAAA,WAAW,CAAC,UAAD,EAAaE,IAAb,CAAX;AACH,OAFD,MAEO;AACHF,QAAAA,WAAW,CAAC,eAAD,kCAAuBE,IAAvB,GAAgCG,IAAhC,EAAX;AACH;AACJ,KAND;AAOH,GAT2B,EAU5B,CAACL,WAAD,CAV4B,CAAhC;AAaA,MAAMO,OAAO,GAAGd,WAAW;AAAA,yEACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASe,cAAAA,QAAT,QAASA,QAAT,EAAmBC,kBAAnB,QAAmBA,kBAAnB;AAAA;AAAA;AAAA,qBAE2Bf,IAAI,CAACgB,mBAAL,CAAyBX,QAAzB,EAAmCS,QAAnC,EAA6CC,kBAA7C,CAF3B;;AAAA;AAEcP,cAAAA,IAFd;;AAGQ,kBAAIA,IAAI,CAACS,aAAL,KAAuB,SAA3B,EAAsC;AAClCX,gBAAAA,WAAW,CAAC,eAAD,EAAkBE,IAAlB,CAAX;AACH,eAFD,MAEO,IAAIA,IAAI,CAACS,aAAL,KAAuB,WAA3B,EAAwC;AAC3CX,gBAAAA,WAAW,CAAC,WAAD,EAAcE,IAAd,CAAX;AACH,eAFM,MAEA;AACHD,gBAAAA,YAAY,CAACC,IAAD,CAAZ;AACH;;AATT;AAAA;;AAAA;AAAA;AAAA;AAWQU,cAAAA,OAAO,CAACC,GAAR;;AAXR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADuB;;AAAA;AAAA;AAAA;AAAA,OAevB,CAACb,WAAD,CAfuB,CAA3B;AAkBA,SAAO;AACHO,IAAAA,OAAO,EAAPA,OADG;AAEHO,IAAAA,YAAY,EAAEhB,SAAS,KAAK,oBAFzB;AAGHW,IAAAA,kBAAkB,EAAEd,GAAG,CAACI,QAAD,EAAW,mCAAX,EAAgD,EAAhD;AAHpB,GAAP;AAKH","sourcesContent":["import { useCallback } from \"react\";\nimport Auth from \"@aws-amplify/auth\";\nimport get from \"lodash.get\";\nimport { useAuthenticator } from \"./useAuthenticator\";\n\nexport interface RequireNewPassword {\n    shouldRender: boolean;\n\n    confirm(params: {\n        password: string;\n        requiredAttributes: { [key: string]: string };\n    }): Promise<void>;\n\n    requiredAttributes: string[];\n}\n\nexport function useRequireNewPassword(): RequireNewPassword {\n    const { authState, authData, changeState } = useAuthenticator();\n\n    const checkContact = useCallback(\n        user => {\n            Auth.verifiedContact(user).then(data => {\n                if (data.verified) {\n                    changeState(\"signedIn\", user);\n                } else {\n                    changeState(\"verifyContact\", { ...user, ...data });\n                }\n            });\n        },\n        [changeState]\n    );\n\n    const confirm = useCallback(\n        async ({ password, requiredAttributes }) => {\n            try {\n                const user = await Auth.completeNewPassword(authData, password, requiredAttributes);\n                if (user.challengeName === \"SMS_MFA\") {\n                    changeState(\"confirmSignIn\", user);\n                } else if (user.challengeName === \"MFA_SETUP\") {\n                    changeState(\"TOTPSetup\", user);\n                } else {\n                    checkContact(user);\n                }\n            } catch (err) {\n                console.log(err);\n            }\n        },\n        [changeState]\n    );\n\n    return {\n        confirm,\n        shouldRender: authState === \"requireNewPassword\",\n        requiredAttributes: get(authData, \"challengeParam.requiredAttributes\", [])\n    };\n}\n"],"file":"useRequireNewPassword.js"}