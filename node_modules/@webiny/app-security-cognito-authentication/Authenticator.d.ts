import React from "react";
import { ApolloClient } from "apollo-client";
export declare type AuthState = "signIn" | "signedIn" | "signedOut" | "signedUp" | "verifyContact" | "confirmSignIn" | "requireNewPassword" | "setNewPassword" | "TOTPSetup" | "confirmSignUp" | "forgotPassword";
export interface AuthData {
    [key: string]: any;
}
export interface AuthMessage {
    title: string;
    text: string;
    type: "success" | "info" | "warning" | "danger";
}
export interface AuthChangeState {
    (state: AuthState, data?: AuthData, message?: AuthMessage): Promise<void>;
}
export interface AuthContextValue {
    authState: AuthState;
    authData: AuthData;
    changeState: AuthChangeState;
    checkingUser?: boolean;
    message: AuthMessage;
}
export interface AuthenticatorProps {
    getIdentityData(params: {
        client: ApolloClient<any>;
        payload: {
            [key: string]: any;
        };
    }): Promise<{
        [key: string]: any;
    }>;
    children: React.ReactNode;
}
export declare const AuthenticatorContext: React.Context<AuthContextValue>;
export declare const Authenticator: (props: AuthenticatorProps) => JSX.Element;
