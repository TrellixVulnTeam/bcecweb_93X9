{"version":3,"sources":["../src/index.tsx"],"names":["Auth","setContext","ApolloLinkPlugin","options","configure","_","headers","currentSession","user","console","error","Authorization","idToken","getIdToken","getJwtToken"],"mappings":";;;AAAA,SAASA,IAAT,QAAqB,mBAArB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AAEA,SAASC,gBAAT,QAAiC,sCAAjC;AAKA,gBAAe,UAACC,OAAD,EAAwC;AACnDH,EAAAA,IAAI,CAACI,SAAL,CAAeD,OAAf;AAEA,SAAO,CACH,IAAID,gBAAJ,CAAqB,YAAM;AACvB,WAAOD,UAAU;AAAA,2EAAC,iBAAOI,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAYC,gBAAAA,OAAZ,QAAYA,OAAZ;AAAA;AAAA;AAAA,uBAGGN,IAAI,CAACO,cAAL,EAHH;;AAAA;AAGVC,gBAAAA,IAHU;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKVC,gBAAAA,OAAO,CAACC,KAAR;;AALU;AAAA,oBAQTF,IARS;AAAA;AAAA;AAAA;;AAAA,iDASH;AAAEF,kBAAAA,OAAO,EAAPA;AAAF,iBATG;;AAAA;AAAA,sBAaVA,OAAO,IAAIA,OAAO,CAACK,aAbT;AAAA;AAAA;AAAA;;AAAA,iDAcH;AAAEL,kBAAAA,OAAO,EAAPA;AAAF,iBAdG;;AAAA;AAiBRM,gBAAAA,OAjBQ,GAiBEJ,IAAI,CAACK,UAAL,GAAkBC,WAAlB,EAjBF;AAAA,iDAkBP;AACHR,kBAAAA,OAAO,kCACAA,OADA;AAEHK,oBAAAA,aAAa,mBAAYC,OAAZ;AAFV;AADJ,iBAlBO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAD;;AAAA;AAAA;AAAA;AAAA,QAAjB;AAyBH,GA1BD,CADG,CAAP;AA6BH,CAhCD","sourcesContent":["import { Auth } from \"@aws-amplify/auth\";\nimport { setContext } from \"apollo-link-context\";\nimport { PluginCollection } from \"@webiny/plugins/types\";\nimport { ApolloLinkPlugin } from \"@webiny/app/plugins/ApolloLinkPlugin\";\nimport { AuthOptions } from \"@aws-amplify/auth/lib-esm/types\";\n\nexport type Options = AuthOptions;\n\nexport default (options: Options): PluginCollection => {\n    Auth.configure(options);\n\n    return [\n        new ApolloLinkPlugin(() => {\n            return setContext(async (_, { headers }) => {\n                let user;\n                try {\n                    user = await Auth.currentSession();\n                } catch (error) {\n                    console.error(error);\n                }\n\n                if (!user) {\n                    return { headers };\n                }\n\n                // If \"Authorization\" header is already set, don't overwrite it.\n                if (headers && headers.Authorization) {\n                    return { headers };\n                }\n\n                const idToken = user.getIdToken().getJwtToken();\n                return {\n                    headers: {\n                        ...headers,\n                        Authorization: `Bearer ${idToken}`\n                    }\n                };\n            });\n        })\n    ];\n};\n"],"file":"index.js"}