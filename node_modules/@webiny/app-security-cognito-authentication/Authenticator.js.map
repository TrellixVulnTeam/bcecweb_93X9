{"version":3,"sources":["../src/Authenticator.tsx"],"names":["React","useReducer","useEffect","useMemo","Auth","useApolloClient","useSecurity","SecurityIdentity","AuthenticatorContext","createContext","Authenticator","props","setIdentity","client","prev","next","authState","authData","message","checkingUser","state","setState","checkUrl","query","URLSearchParams","window","location","search","queryData","forEach","value","key","params","onChangeState","checkUser","currentSession","cognitoUser","console","log","data","user","getIdentityData","payload","getIdToken","login","logout","signOut","changeState","children"],"mappings":"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","sourcesContent":["import React, { useReducer, useEffect, useMemo } from \"react\";\nimport Auth from \"@aws-amplify/auth\";\nimport { ApolloClient } from \"apollo-client\";\nimport { useApolloClient } from \"@apollo/react-hooks\";\nimport { useSecurity } from \"@webiny/app-security\";\nimport { SecurityIdentity } from \"@webiny/app-security/SecurityIdentity\";\n\nexport type AuthState =\n    | \"signIn\"\n    | \"signedIn\"\n    | \"signedOut\"\n    | \"signedUp\"\n    | \"verifyContact\"\n    | \"confirmSignIn\"\n    | \"requireNewPassword\"\n    | \"setNewPassword\"\n    | \"TOTPSetup\"\n    | \"confirmSignUp\"\n    | \"forgotPassword\";\n\nexport interface AuthData {\n    [key: string]: any;\n}\n\nexport interface AuthMessage {\n    title: string;\n    text: string;\n    type: \"success\" | \"info\" | \"warning\" | \"danger\";\n}\n\nexport interface AuthChangeState {\n    (state: AuthState, data?: AuthData, message?: AuthMessage): Promise<void>;\n}\n\nexport interface AuthContextValue {\n    authState: AuthState;\n    authData: AuthData;\n    changeState: AuthChangeState;\n    checkingUser?: boolean;\n    message: AuthMessage;\n}\n\nexport interface AuthenticatorProps {\n    getIdentityData(params: {\n        client: ApolloClient<any>;\n        payload: { [key: string]: any };\n    }): Promise<{ [key: string]: any }>;\n    children: React.ReactNode;\n}\n\nexport const AuthenticatorContext = React.createContext<AuthContextValue>({} as any);\n\nexport const Authenticator = (props: AuthenticatorProps) => {\n    const { setIdentity } = useSecurity();\n    const client = useApolloClient();\n\n    const [state, setState] = useReducer((prev, next) => ({ ...prev, ...next }), {\n        authState: \"signIn\",\n        authData: null,\n        message: null,\n        checkingUser: false\n    });\n\n    const checkUrl = async () => {\n        const query = new URLSearchParams(window.location.search);\n        const queryData: any = {};\n        query.forEach((value, key) => (queryData[key] = value));\n        const { state, ...params } = queryData;\n\n        if (state) {\n            await onChangeState(state, params);\n            return;\n        }\n        return checkUser();\n    };\n\n    useEffect(() => {\n        checkUrl();\n    }, []);\n\n    const checkUser = async () => {\n        setState({ checkingUser: true });\n        try {\n            const cognitoUser = await Auth.currentSession();\n            if (!cognitoUser) {\n                await onChangeState(\"signIn\");\n                setState({ checkingUser: false });\n            } else {\n                await onChangeState(\"signedIn\");\n                setState({ checkingUser: false });\n            }\n        } catch (e) {\n            console.log(\"error\", e);\n            setState({ checkingUser: false });\n        }\n    };\n\n    const onChangeState = async (state, data = null, message: AuthMessage = null) => {\n        setState({ message });\n\n        if (state === state.authState) {\n            return;\n        }\n\n        // Cognito states call this state with user data.\n        if (state === \"signedIn\") {\n            setState({ checkingUser: true });\n            const user = await Auth.currentSession();\n\n            const { login, ...data } = await props.getIdentityData({\n                client,\n                payload: user.getIdToken().payload\n            });\n\n            setIdentity(\n                new SecurityIdentity({\n                    login,\n                    ...data,\n                    logout() {\n                        Auth.signOut();\n                        setIdentity(null);\n                        setState({ authState: \"signIn\" });\n                    }\n                })\n            );\n            setState({ checkingUser: false });\n        }\n\n        setState({ authState: state, authData: data });\n    };\n\n    const value = useMemo(() => {\n        return { ...state, changeState: onChangeState };\n    }, [state]);\n\n    return (\n        <AuthenticatorContext.Provider value={value}>\n            {props.children}\n        </AuthenticatorContext.Provider>\n    );\n};\n"],"file":"Authenticator.js"}