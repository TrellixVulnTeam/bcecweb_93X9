{"version":3,"sources":["../../../src/operations/locales/LocalesStorageOperations.ts"],"names":["DEFAULT_SORT_KEY","LocalesStorageOperations","partitionKey","tenant","_context","tenancy","getCurrentTenant","WebinyError","id","defaultPartitionKey","constructor","context","_table","_entity","table","getDefault","locale","get","PK","SK","Item","ex","message","code","create","keys","getSortKey","put","update","updateDefault","previous","batch","push","default","batchWrite","map","item","putBatch","delete","list","params","where","initialWhere","after","limit","sort","queryAllParams","createQueryAllParamsOptions","results","filteredFiles","items","totalCount","length","sortedFiles","fields","entity","options"],"mappings":"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","sourcesContent":["import {\n    I18NContext,\n    I18NLocale,\n    I18NLocalesStorageOperations,\n    I18NLocalesStorageOperationsCreateParams,\n    I18NLocalesStorageOperationsDeleteParams,\n    I18NLocalesStorageOperationsListParams,\n    I18NLocalesStorageOperationsListResponse,\n    I18NLocalesStorageOperationsUpdateDefaultParams,\n    I18NLocalesStorageOperationsUpdateParams\n} from \"@webiny/api-i18n/types\";\nimport { Entity, Table } from \"dynamodb-toolbox\";\nimport WebinyError from \"@webiny/error\";\nimport defineTable from \"~/definitions/table\";\nimport defineLocaleEntity from \"~/definitions/localeEntity\";\nimport { queryAll, QueryAllParams } from \"@webiny/db-dynamodb/utils/query\";\nimport { filterItems } from \"@webiny/db-dynamodb/utils/filter\";\nimport { sortItems } from \"@webiny/db-dynamodb/utils/sort\";\nimport { createListResponse } from \"@webiny/db-dynamodb/utils/listResponse\";\nimport { cleanupItem, cleanupItems } from \"@webiny/db-dynamodb/utils/cleanup\";\n\ninterface ConstructorParams {\n    context: I18NContext;\n}\n\nconst DEFAULT_SORT_KEY = \"default\";\n\nexport class LocalesStorageOperations implements I18NLocalesStorageOperations {\n    private readonly _context: I18NContext;\n    private readonly _table: Table;\n    private readonly _entity: Entity<any>;\n\n    private get partitionKey(): string {\n        const tenant = this._context.tenancy.getCurrentTenant();\n        if (!tenant) {\n            throw new WebinyError(\"Tenant missing.\", \"TENANT_NOT_FOUND\");\n        }\n        return `T#${tenant.id}#I18N#L`;\n    }\n\n    private get defaultPartitionKey(): string {\n        return `${this.partitionKey}#D`;\n    }\n\n    public constructor({ context }: ConstructorParams) {\n        this._context = context;\n        this._table = defineTable({\n            context\n        });\n\n        this._entity = defineLocaleEntity({\n            context,\n            table: this._table\n        });\n    }\n\n    public async getDefault(): Promise<I18NLocale> {\n        try {\n            const locale = await this._entity.get({\n                PK: this.defaultPartitionKey,\n                SK: DEFAULT_SORT_KEY\n            });\n            if (!locale || !locale.Item) {\n                return null;\n            }\n            return cleanupItem(this._entity, locale.Item);\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not fetch the I18N locale.\",\n                ex.code || \"GET_DEFAULT_LOCALE_ERROR\"\n            );\n        }\n    }\n\n    public async get(code: string): Promise<I18NLocale> {\n        try {\n            const locale = await this._entity.get({\n                PK: this.partitionKey,\n                SK: code\n            });\n            if (!locale || !locale.Item) {\n                return null;\n            }\n            return cleanupItem(this._entity, locale.Item);\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Could not fetch the I18N locale.\",\n                ex.code || \"GET_LOCALE_ERROR\"\n            );\n        }\n    }\n\n    public async create({ locale }: I18NLocalesStorageOperationsCreateParams): Promise<I18NLocale> {\n        const keys = {\n            PK: this.partitionKey,\n            SK: this.getSortKey(locale)\n        };\n\n        try {\n            await this._entity.put({\n                ...locale,\n                ...keys\n            });\n            return locale;\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Cannot create I18N locale.\",\n                ex.code || \"CREATE_LOCALE_ERROR\",\n                {\n                    locale,\n                    keys\n                }\n            );\n        }\n    }\n\n    public async update({ locale }: I18NLocalesStorageOperationsUpdateParams): Promise<I18NLocale> {\n        const keys = {\n            PK: this.partitionKey,\n            SK: this.getSortKey(locale)\n        };\n        try {\n            await this._entity.put({\n                ...locale,\n                ...keys\n            });\n            return locale;\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Cannot update I18N locale.\",\n                ex.code || \"UPDATE_LOCALE_ERROR\",\n                {\n                    locale,\n                    keys\n                }\n            );\n        }\n    }\n\n    public async updateDefault({\n        previous,\n        locale\n    }: I18NLocalesStorageOperationsUpdateDefaultParams): Promise<I18NLocale> {\n        /**\n         * Set the locale as the default one.\n         */\n        const batch = [\n            {\n                ...locale,\n                PK: this.partitionKey,\n                SK: this.getSortKey(locale)\n            },\n            {\n                ...locale,\n                PK: this.defaultPartitionKey,\n                SK: DEFAULT_SORT_KEY\n            }\n        ];\n        /**\n         * Set the previous locale not to be default in its data.\n         */\n        if (previous) {\n            batch.push({\n                ...previous,\n                default: false,\n                PK: this.partitionKey,\n                SK: this.getSortKey(previous)\n            });\n        }\n\n        try {\n            await this._table.batchWrite(batch.map(item => this._entity.putBatch(item)));\n            return locale;\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Cannot update I18N locale.\",\n                ex.code || \"UPDATE_LOCALE_ERROR\",\n                {\n                    locale,\n                    previous,\n                    batch\n                }\n            );\n        }\n    }\n\n    public async delete({ locale }: I18NLocalesStorageOperationsDeleteParams): Promise<void> {\n        const keys = {\n            PK: this.partitionKey,\n            SK: this.getSortKey(locale)\n        };\n        try {\n            await this._entity.delete(keys);\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Cannot delete I18N locale.\",\n                ex.code || \"DELETE_LOCALE_ERROR\",\n                {\n                    locale,\n                    keys\n                }\n            );\n        }\n    }\n\n    public async list(\n        params: I18NLocalesStorageOperationsListParams\n    ): Promise<I18NLocalesStorageOperationsListResponse> {\n        const { where: initialWhere, after, limit, sort } = params;\n        const where = {\n            ...(initialWhere || {})\n        };\n        const queryAllParams = this.createQueryAllParamsOptions({\n            ...params,\n            where\n        });\n\n        let results: I18NLocale[] = [];\n        try {\n            results = await queryAll<I18NLocale>(queryAllParams);\n        } catch (ex) {\n            throw new WebinyError(\n                ex.message || \"Cannot list I18N locales.\",\n                ex.code || \"LIST_LOCALES_ERROR\",\n                params\n            );\n        }\n        /**\n         * Filter the read items via the code.\n         * It will build the filters out of the where input and transform the values it is using.\n         */\n        const filteredFiles = filterItems({\n            items: results,\n            where,\n            context: this._context\n        });\n\n        const totalCount = filteredFiles.length;\n        /**\n         * Sorting is also done via the code.\n         * It takes the sort input and sorts by it via the lodash sortBy method.\n         */\n        const sortedFiles = sortItems({\n            context: this._context,\n            items: filteredFiles,\n            sort,\n            // TODO: add possibility to add more fields via plugins\n            fields: [\"code\", \"createdBy\", \"createdOn\"]\n        });\n        /**\n         * Use the common db-dynamodb method to create the required response.\n         */\n        return createListResponse<I18NLocale>({\n            items: cleanupItems(this._entity, sortedFiles),\n            after,\n            totalCount,\n            limit\n        });\n    }\n\n    private getSortKey(locale: I18NLocale): string {\n        if (!locale.code) {\n            throw new WebinyError(\"Missing locale code.\", \"CODE_ERROR\", {\n                locale\n            });\n        }\n        return locale.code;\n    }\n\n    private createQueryAllParamsOptions(\n        params: I18NLocalesStorageOperationsListParams\n    ): QueryAllParams {\n        const { where } = params;\n        let partitionKey = this.partitionKey;\n        if (where.default === true) {\n            partitionKey = this.defaultPartitionKey;\n            delete where.default;\n        }\n        return {\n            entity: this._entity,\n            partitionKey,\n            options: {}\n        };\n    }\n}\n"],"file":"LocalesStorageOperations.js"}