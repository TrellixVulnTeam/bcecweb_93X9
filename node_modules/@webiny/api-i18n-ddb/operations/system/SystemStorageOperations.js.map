{"version":3,"sources":["../../../src/operations/system/SystemStorageOperations.ts"],"names":["SORT_KEY","SystemStorageOperations","partitionKey","tenant","_context","tenancy","getCurrentTenant","WebinyError","id","constructor","context","table","_entity","get","keys","PK","SK","result","Item","ex","create","system","put","update"],"mappings":";;;;;;;;;;;AAEA;;AACA;;AACA;;AACA;;;;;;AAMA,MAAMA,QAAQ,GAAG,MAAjB;;AAEO,MAAMC,uBAAN,CAAqE;AAIhD,MAAZC,YAAY,GAAW;AAC/B,UAAMC,MAAM,GAAG,KAAKC,QAAL,CAAcC,OAAd,CAAsBC,gBAAtB,EAAf;;AACA,QAAI,CAACH,MAAL,EAAa;AACT,YAAM,IAAII,cAAJ,CAAgB,iBAAhB,EAAmC,kBAAnC,CAAN;AACH;;AACD,WAAQ,KAAIJ,MAAM,CAACK,EAAG,SAAtB;AACH;;AAEMC,EAAAA,WAAW,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAiC;AAAA;AAAA;AAC/C,SAAKN,QAAL,GAAgBM,OAAhB;AACA,UAAMC,KAAK,GAAG,oBAAY;AACtBD,MAAAA;AADsB,KAAZ,CAAd;AAIA,SAAKE,OAAL,GAAe,2BAAmB;AAC9BF,MAAAA,OAD8B;AAE9BC,MAAAA;AAF8B,KAAnB,CAAf;AAIH;;AAEe,QAAHE,GAAG,GAAwB;AACpC,UAAMC,IAAI,GAAG;AACTC,MAAAA,EAAE,EAAE,KAAKb,YADA;AAETc,MAAAA,EAAE,EAAEhB;AAFK,KAAb;;AAKA,QAAI;AACA,YAAMiB,MAAM,GAAG,MAAM,KAAKL,OAAL,CAAaC,GAAb,CAAiBC,IAAjB,CAArB;AAEA,aAAO,0BAAY,KAAKF,OAAjB,EAA0BK,MAA1B,aAA0BA,MAA1B,uBAA0BA,MAAM,CAAEC,IAAlC,CAAP;AACH,KAJD,CAIE,OAAOC,EAAP,EAAW;AACT,YAAM,IAAIZ,cAAJ,CACF,+CADE,EAEF,kBAFE,EAGFO,IAHE,CAAN;AAKH;AACJ;;AAEkB,QAANM,MAAM,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAkC;AACjD,UAAMP,IAAI,GAAG;AACTC,MAAAA,EAAE,EAAE,KAAKb,YADA;AAETc,MAAAA,EAAE,EAAEhB;AAFK,KAAb;;AAIA,QAAI;AACA,YAAM,KAAKY,OAAL,CAAaU,GAAb,iCACCR,IADD,GAECO,MAFD,EAAN;AAIA,aAAOA,MAAP;AACH,KAND,CAME,OAAOF,EAAP,EAAW;AACT,YAAM,IAAIZ,cAAJ,CACF,+CADE,EAEF,qBAFE,EAGFO,IAHE,CAAN;AAKH;AACJ;;AAEkB,QAANS,MAAM,CAAC;AAAEF,IAAAA;AAAF,GAAD,EAAkC;AACjD,UAAMP,IAAI,GAAG;AACTC,MAAAA,EAAE,EAAE,KAAKb,YADA;AAETc,MAAAA,EAAE,EAAEhB;AAFK,KAAb;;AAIA,QAAI;AACA,YAAM,KAAKY,OAAL,CAAaU,GAAb,iCACCR,IADD,GAECO,MAFD,EAAN;AAIA,aAAOA,MAAP;AACH,KAND,CAME,OAAOF,EAAP,EAAW;AACT,YAAM,IAAIZ,cAAJ,CACF,+CADE,EAEF,sBAFE,EAGFO,IAHE,CAAN;AAKH;AACJ;;AAjFuE","sourcesContent":["import { I18NContext, I18NSystem, I18NSystemStorageOperations } from \"@webiny/api-i18n/types\";\nimport { Entity } from \"dynamodb-toolbox\";\nimport WebinyError from \"@webiny/error\";\nimport defineSystemEntity from \"~/definitions/systemEntity\";\nimport defineTable from \"~/definitions/table\";\nimport { cleanupItem } from \"@webiny/db-dynamodb/utils/cleanup\";\n\ninterface ConstructorParams {\n    context: I18NContext;\n}\n\nconst SORT_KEY = \"I18N\";\n\nexport class SystemStorageOperations implements I18NSystemStorageOperations {\n    private readonly _context: I18NContext;\n    private readonly _entity: Entity<any>;\n\n    private get partitionKey(): string {\n        const tenant = this._context.tenancy.getCurrentTenant();\n        if (!tenant) {\n            throw new WebinyError(\"Tenant missing.\", \"TENANT_NOT_FOUND\");\n        }\n        return `T#${tenant.id}#SYSTEM`;\n    }\n\n    public constructor({ context }: ConstructorParams) {\n        this._context = context;\n        const table = defineTable({\n            context\n        });\n\n        this._entity = defineSystemEntity({\n            context,\n            table\n        });\n    }\n\n    public async get(): Promise<I18NSystem> {\n        const keys = {\n            PK: this.partitionKey,\n            SK: SORT_KEY\n        };\n\n        try {\n            const result = await this._entity.get(keys);\n\n            return cleanupItem(this._entity, result?.Item);\n        } catch (ex) {\n            throw new WebinyError(\n                \"Could not load system data from the database.\",\n                \"GET_SYSTEM_ERROR\",\n                keys\n            );\n        }\n    }\n\n    public async create({ system }): Promise<I18NSystem> {\n        const keys = {\n            PK: this.partitionKey,\n            SK: SORT_KEY\n        };\n        try {\n            await this._entity.put({\n                ...keys,\n                ...system\n            });\n            return system;\n        } catch (ex) {\n            throw new WebinyError(\n                \"Could not create system data in the database.\",\n                \"CREATE_SYSTEM_ERROR\",\n                keys\n            );\n        }\n    }\n\n    public async update({ system }): Promise<I18NSystem> {\n        const keys = {\n            PK: this.partitionKey,\n            SK: SORT_KEY\n        };\n        try {\n            await this._entity.put({\n                ...keys,\n                ...system\n            });\n            return system;\n        } catch (ex) {\n            throw new WebinyError(\n                \"Could not update system data in the database.\",\n                \"UPDATE_VERSION_ERROR\",\n                keys\n            );\n        }\n    }\n}\n"],"file":"SystemStorageOperations.js"}