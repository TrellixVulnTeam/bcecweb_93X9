{"version":3,"sources":["../src/CognitoAuthenticationPlugin.ts"],"names":["verify","util","promisify","jwt","isJwt","token","split","length","jwksCache","Map","CognitoAuthenticationPlugin","AuthenticationPlugin","constructor","config","_config","authenticate","context","method","httpMethod","headers","http","request","idToken","replace","jwks","getJWKs","header","decode","complete","jwk","find","key","kid","token_use","error","Error","Object","assign","code","getIdentity","identityType","SecurityIdentity","id","email","type","displayName","given_name","family_name","firstName","lastName","getJWKsURL","region","userPoolId","has","response","then","res","json","set","keys","get"],"mappings":"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","sourcesContent":["import jwt from \"jsonwebtoken\";\nimport jwkToPem from \"jwk-to-pem\";\nimport fetch from \"node-fetch\";\nimport util from \"util\";\nimport { SecurityIdentity } from \"@webiny/api-security\";\nimport { HttpContext } from \"@webiny/handler-http/types\";\nimport { Context as HandlerContext } from \"@webiny/handler/types\";\nimport { AuthenticationPlugin } from \"@webiny/api-security/plugins/AuthenticationPlugin\";\nconst verify = util.promisify<string, string, Record<string, any>>(jwt.verify);\n\n// All JWTs are split into 3 parts by two periods\nconst isJwt = token => token.split(\".\").length === 3;\n\ntype Context = HandlerContext<HttpContext>;\n\nexport interface Config {\n    region: string;\n    userPoolId: string;\n    identityType: string;\n    getIdentity?(\n        params: { identityType: string; token: { [key: string]: any } },\n        context: Context\n    ): SecurityIdentity;\n}\n\nconst jwksCache = new Map<string, Record<string, any>[]>();\n\nexport class CognitoAuthenticationPlugin extends AuthenticationPlugin {\n    private _config: Config;\n\n    constructor(config: Config) {\n        super();\n        this._config = config;\n    }\n\n    async authenticate(context: Context): Promise<SecurityIdentity | undefined> {\n        const { method: httpMethod, headers = {} } = context.http.request;\n        let idToken = headers[\"Authorization\"] || headers[\"authorization\"] || \"\";\n\n        if (!idToken) {\n            return;\n        }\n\n        idToken = idToken.replace(/bearer\\s/i, \"\");\n\n        if (isJwt(idToken) && httpMethod === \"POST\") {\n            const jwks = await this.getJWKs();\n            const { header } = jwt.decode(idToken, { complete: true });\n            const jwk = jwks.find(key => key.kid === header.kid);\n\n            if (!jwk) {\n                return;\n            }\n\n            const token = await verify(idToken, jwkToPem(jwk));\n            if (token.token_use !== \"id\") {\n                const error = new Error(\"idToken is invalid!\");\n                throw Object.assign(error, {\n                    code: \"SECURITY_COGNITO_INVALID_TOKEN\"\n                });\n            }\n\n            if (typeof this._config.getIdentity === \"function\") {\n                return this._config.getIdentity(\n                    { identityType: this._config.identityType, token },\n                    context\n                );\n            }\n\n            return new SecurityIdentity({\n                id: token.email,\n                type: this._config.identityType,\n                displayName: `${token.given_name} ${token.family_name}`,\n                firstName: token.given_name,\n                lastName: token.family_name\n            });\n        }\n    }\n\n    private getJWKsURL() {\n        const { region, userPoolId } = this._config;\n        return `https://cognito-idp.${region}.amazonaws.com/${userPoolId}/.well-known/jwks.json`;\n    }\n\n    private async getJWKs() {\n        const { region, userPoolId } = this._config;\n        const key = `${region}:${userPoolId}`;\n\n        if (!jwksCache.has(key)) {\n            const response = await fetch(this.getJWKsURL()).then(res => res.json());\n            jwksCache.set(key, response.keys);\n        }\n\n        return jwksCache.get(key);\n    }\n}\n"],"file":"CognitoAuthenticationPlugin.js"}