"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CognitoAuthenticationPlugin = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _jsonwebtoken = _interopRequireDefault(require("jsonwebtoken"));

var _jwkToPem = _interopRequireDefault(require("jwk-to-pem"));

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

var _util = _interopRequireDefault(require("util"));

var _apiSecurity = require("@webiny/api-security");

var _AuthenticationPlugin = require("@webiny/api-security/plugins/AuthenticationPlugin");

const verify = _util.default.promisify(_jsonwebtoken.default.verify); // All JWTs are split into 3 parts by two periods


const isJwt = token => token.split(".").length === 3;

const jwksCache = new Map();

class CognitoAuthenticationPlugin extends _AuthenticationPlugin.AuthenticationPlugin {
  constructor(config) {
    super();
    (0, _defineProperty2.default)(this, "_config", void 0);
    this._config = config;
  }

  async authenticate(context) {
    const {
      method: httpMethod,
      headers = {}
    } = context.http.request;
    let idToken = headers["Authorization"] || headers["authorization"] || "";

    if (!idToken) {
      return;
    }

    idToken = idToken.replace(/bearer\s/i, "");

    if (isJwt(idToken) && httpMethod === "POST") {
      const jwks = await this.getJWKs();

      const {
        header
      } = _jsonwebtoken.default.decode(idToken, {
        complete: true
      });

      const jwk = jwks.find(key => key.kid === header.kid);

      if (!jwk) {
        return;
      }

      const token = await verify(idToken, (0, _jwkToPem.default)(jwk));

      if (token.token_use !== "id") {
        const error = new Error("idToken is invalid!");
        throw Object.assign(error, {
          code: "SECURITY_COGNITO_INVALID_TOKEN"
        });
      }

      if (typeof this._config.getIdentity === "function") {
        return this._config.getIdentity({
          identityType: this._config.identityType,
          token
        }, context);
      }

      return new _apiSecurity.SecurityIdentity({
        id: token.email,
        type: this._config.identityType,
        displayName: `${token.given_name} ${token.family_name}`,
        firstName: token.given_name,
        lastName: token.family_name
      });
    }
  }

  getJWKsURL() {
    const {
      region,
      userPoolId
    } = this._config;
    return `https://cognito-idp.${region}.amazonaws.com/${userPoolId}/.well-known/jwks.json`;
  }

  async getJWKs() {
    const {
      region,
      userPoolId
    } = this._config;
    const key = `${region}:${userPoolId}`;

    if (!jwksCache.has(key)) {
      const response = await (0, _nodeFetch.default)(this.getJWKsURL()).then(res => res.json());
      jwksCache.set(key, response.keys);
    }

    return jwksCache.get(key);
  }

}

exports.CognitoAuthenticationPlugin = CognitoAuthenticationPlugin;
//# sourceMappingURL=CognitoAuthenticationPlugin.js.map