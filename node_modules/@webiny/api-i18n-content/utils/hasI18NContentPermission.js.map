{"version":3,"sources":["../../src/utils/hasI18NContentPermission.ts"],"names":["context","contentPermission","security","getPermission","Array","isArray","locales","includes","i18nContent","locale","code"],"mappings":";;;;;;;eAEe,MAAOA,OAAP,IAAyD;AAAA;;AACpE;AACA,QAAMC,iBAAiB,GAAG,MAAMD,OAAO,CAACE,QAAR,CAAiBC,aAAjB,CAA+B,cAA/B,CAAhC;;AACA,MAAI,CAACF,iBAAL,EAAwB;AACpB,WAAO,KAAP;AACH,GALmE,CAOpE;AACA;AACA;AACA;;;AACA,SACI,CAACG,KAAK,CAACC,OAAN,CAAcJ,iBAAiB,CAACK,OAAhC,CAAD,IACAL,iBAAiB,CAACK,OAAlB,CAA0BC,QAA1B,CAAmCP,OAAnC,aAAmCA,OAAnC,+CAAmCA,OAAO,CAAEQ,WAA5C,kFAAmC,qBAAsBC,MAAzD,0DAAmC,sBAA8BC,IAAjE,CAFJ;AAIH,C","sourcesContent":["import { I18NContentContext } from \"../types\";\n\nexport default async (context: I18NContentContext): Promise<boolean> => {\n    // If `content.i18n` permission is not present, immediately throw.\n    const contentPermission = await context.security.getPermission(\"content.i18n\");\n    if (!contentPermission) {\n        return false;\n    }\n\n    // Otherwise, let's check if the identity has access to current content locale.\n    // If `contentPermission.locales` array is present, that means identity's access is restricted\n    // to the locales listed in it. If it's not present, that means there are no restrictions, or\n    // in other words - identity can access all locales.\n    return (\n        !Array.isArray(contentPermission.locales) ||\n        contentPermission.locales.includes(context?.i18nContent?.locale?.code)\n    );\n};\n"],"file":"hasI18NContentPermission.js"}