{"version":3,"sources":["../../src/DynamicFieldset/Fieldset.tsx"],"names":["React","dotProp","FormElementMessage","styled","DynamicFieldsetRow","paddingBottom","padding","Fieldset","add","index","addData","remove","removeData","props","value","onChange","delete","slice","cb","header","rows","map","record","data","empty","children","actions","renderHeader","row","renderRow","renderEmpty","length","description","validation","isValid","renderComponent","message","Component"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport dotProp from \"dot-prop-immutable\";\nimport { FormElementMessage } from \"../FormElementMessage\";\nimport styled from \"@emotion/styled\";\n\ninterface ChildrenRenderProp {\n    actions: { add: Function; remove: Function };\n    header: Function;\n    row: Function;\n    empty: Function;\n}\n\ntype FieldsetProps = {\n    value?: Array<Object>;\n    description?: string;\n    validation?: { isValid: null | boolean; message?: string };\n    onChange?: Function;\n    children: (props: ChildrenRenderProp) => React.ReactNode;\n};\n\nconst DynamicFieldsetRow = styled(\"div\")({\n    paddingBottom: 10,\n    \"> .mdc-layout-grid\": {\n        padding: 0\n    }\n});\n\nclass Fieldset extends React.Component<FieldsetProps> {\n    static defaultProps = {\n        value: [],\n        description: null\n    };\n\n    header: React.ReactNode = null;\n    rows: React.ReactNode = null;\n    empty: React.ReactNode = null;\n\n    actions = {\n        add:\n            (index = -1) =>\n            () =>\n                this.addData(index),\n        remove:\n            (index = -1) =>\n            () =>\n                this.removeData(index)\n    };\n\n    removeData = (index: number) => {\n        const { value, onChange } = this.props;\n        onChange(dotProp.delete(value, index));\n    };\n\n    addData = (index = -1) => {\n        const { value, onChange } = this.props;\n        if (index < 0) {\n            onChange([...value, {}]);\n        } else {\n            onChange([...value.slice(0, index + 1), {}, ...value.slice(index + 1)]);\n        }\n    };\n\n    renderHeader = (cb: () => React.ReactNode) => {\n        this.header = cb();\n    };\n\n    renderRow = (cb: (params: Object) => React.ReactNode) => {\n        const { value } = this.props;\n        this.rows = value.map((record, index) => {\n            return (\n                <DynamicFieldsetRow key={index}>{cb({ data: record, index })}</DynamicFieldsetRow>\n            );\n        });\n    };\n\n    renderEmpty = (cb: () => React.ReactNode) => {\n        this.empty = cb();\n    };\n\n    renderComponent() {\n        const { value } = this.props;\n        const { children } = this.props;\n\n        children({\n            actions: this.actions,\n            header: this.renderHeader,\n            row: this.renderRow,\n            empty: this.renderEmpty\n        });\n\n        if (value.length) {\n            return (\n                <React.Fragment>\n                    {this.header}\n                    {this.rows}\n                </React.Fragment>\n            );\n        }\n\n        return this.empty;\n    }\n\n    render() {\n        const { description, validation = { isValid: null } } = this.props;\n\n        return (\n            <>\n                {this.renderComponent()}\n                {validation.isValid === false && (\n                    <FormElementMessage error>{validation.message}</FormElementMessage>\n                )}\n\n                {validation.isValid !== false && description && (\n                    <FormElementMessage>{description}</FormElementMessage>\n                )}\n            </>\n        );\n    }\n}\n\nexport default Fieldset;\n"],"file":"Fieldset.js"}