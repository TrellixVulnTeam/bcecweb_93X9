{"version":3,"sources":["../../src/RichTextEditor/RichTextEditor.tsx"],"names":["React","Fragment","useEffect","useRef","shortid","EditorJS","FormElementMessage","css","classNames","classes","wrapper","backgroundColor","padding","label","marginBottom","disable","opacity","pointerEvents","RichTextEditor","props","elementId","generate","editorRef","value","context","onReady","nativeProps","initialData","blocks","current","holder","logLevel","data","onChange","save","editor","tools","Object","keys","reduce","name","tool","config","destroy","description","disabled"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useRef } from \"react\";\nimport shortid from \"shortid\";\nimport EditorJS from \"@editorjs/editorjs\";\nimport {\n    LogLevels,\n    OutputBlockData,\n    OutputData,\n    SanitizerConfig,\n    ToolSettings\n} from \"@editorjs/editorjs/types\";\nimport { FormElementMessage } from \"../FormElementMessage\";\nimport { css } from \"emotion\";\nimport classNames from \"classnames\";\n\nconst classes = {\n    wrapper: css({\n        backgroundColor: \"var(--mdc-theme-background)\",\n        padding: \"20px 16px 6px\"\n    }),\n    label: css({\n        marginBottom: \"10px !important\"\n    }),\n    disable: css({\n        opacity: 0.7,\n        pointerEvents: \"none\"\n    })\n};\n\ntype EditorJSType = {\n    destroy?: () => void;\n    save: () => Promise<any>;\n};\n\nexport type OnReadyParams = { editor: any; initialData: OutputData };\n\nexport type RichTextEditorProps = {\n    autofocus?: boolean;\n    context?: { [key: string]: any };\n    logLevel?: string;\n    minHeight?: number;\n    onChange?: (data: OutputBlockData[]) => void;\n    onReady?: (params: OnReadyParams) => void;\n    placeholder?: string;\n    readOnly?: boolean;\n    sanitizer?: SanitizerConfig;\n    tools?: { [toolName: string]: ToolSettings };\n    value?: OutputBlockData[];\n    label?: string;\n    description?: string;\n    disabled?: boolean;\n};\n\nexport const RichTextEditor = (props: RichTextEditorProps) => {\n    const elementId = useRef(\"rte-\" + shortid.generate());\n    const editorRef = useRef<EditorJSType>();\n\n    useEffect(() => {\n        const { value, context, onReady, ...nativeProps } = props;\n        const initialData = value ? { blocks: value } : { blocks: [] };\n\n        editorRef.current = new EditorJS({\n            ...nativeProps,\n            holder: elementId.current,\n            logLevel: \"ERROR\" as LogLevels.ERROR,\n            data: initialData,\n            onChange: async () => {\n                const { blocks: data } = await editorRef.current.save();\n                props.onChange(data);\n            },\n            onReady() {\n                if (typeof onReady !== \"function\") {\n                    return;\n                }\n                onReady({ editor: editorRef.current, initialData });\n            },\n            tools: Object.keys(props.tools || {}).reduce((tools, name) => {\n                const tool = props.tools[name];\n                tools[name] = tool;\n                if (!tool.config) {\n                    tool.config = { context };\n                } else if (typeof tool.config === \"function\") {\n                    tool.config = tool.config();\n                } else {\n                    tool.config = { ...tool.config, context };\n                }\n                return tools;\n            }, {})\n        });\n\n        return async () => {\n            if (!editorRef.current || typeof editorRef.current.destroy !== \"function\") {\n                return;\n            }\n\n            editorRef.current.destroy();\n        };\n    }, []);\n\n    const { label, description, disabled } = props;\n\n    return (\n        <Fragment>\n            <div className={classNames(classes.wrapper, { [classes.disable]: disabled })}>\n                {label && (\n                    <div\n                        className={classNames(\n                            \"mdc-text-field-helper-text mdc-text-field-helper-text--persistent\",\n                            classes.label\n                        )}\n                    >\n                        {label}\n                    </div>\n                )}\n                <div id={elementId.current} />\n            </div>\n            {description && <FormElementMessage>{description}</FormElementMessage>}\n        </Fragment>\n    );\n};\n"],"file":"RichTextEditor.js"}