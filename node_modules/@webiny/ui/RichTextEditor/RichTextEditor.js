import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["value", "context", "onReady"];
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { Fragment, useEffect, useRef } from "react";
import shortid from "shortid";
import EditorJS from "@editorjs/editorjs";
import { FormElementMessage } from "../FormElementMessage";
import { css } from "emotion";
import classNames from "classnames";
var classes = {
  wrapper: /*#__PURE__*/css({
    backgroundColor: "var(--mdc-theme-background)",
    padding: "20px 16px 6px"
  }, "label:wrapper;"),
  label: /*#__PURE__*/css({
    marginBottom: "10px !important"
  }, "label:label;"),
  disable: /*#__PURE__*/css({
    opacity: 0.7,
    pointerEvents: "none"
  }, "label:disable;")
};
export var RichTextEditor = function RichTextEditor(props) {
  var elementId = useRef("rte-" + shortid.generate());
  var editorRef = useRef();
  useEffect(function () {
    var value = props.value,
        context = props.context,
        _onReady = props.onReady,
        nativeProps = _objectWithoutProperties(props, _excluded);

    var initialData = value ? {
      blocks: value
    } : {
      blocks: []
    };
    editorRef.current = new EditorJS(_objectSpread(_objectSpread({}, nativeProps), {}, {
      holder: elementId.current,
      logLevel: "ERROR",
      data: initialData,
      onChange: function () {
        var _onChange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
          var _yield$editorRef$curr, data;

          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return editorRef.current.save();

                case 2:
                  _yield$editorRef$curr = _context.sent;
                  data = _yield$editorRef$curr.blocks;
                  props.onChange(data);

                case 5:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function onChange() {
          return _onChange.apply(this, arguments);
        }

        return onChange;
      }(),
      onReady: function onReady() {
        if (typeof _onReady !== "function") {
          return;
        }

        _onReady({
          editor: editorRef.current,
          initialData: initialData
        });
      },
      tools: Object.keys(props.tools || {}).reduce(function (tools, name) {
        var tool = props.tools[name];
        tools[name] = tool;

        if (!tool.config) {
          tool.config = {
            context: context
          };
        } else if (typeof tool.config === "function") {
          tool.config = tool.config();
        } else {
          tool.config = _objectSpread(_objectSpread({}, tool.config), {}, {
            context: context
          });
        }

        return tools;
      }, {})
    }));
    return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(!editorRef.current || typeof editorRef.current.destroy !== "function")) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return");

            case 2:
              editorRef.current.destroy();

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
  }, []);
  var label = props.label,
      description = props.description,
      disabled = props.disabled;
  return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: classNames(classes.wrapper, _defineProperty({}, classes.disable, disabled))
  }, label && /*#__PURE__*/React.createElement("div", {
    className: classNames("mdc-text-field-helper-text mdc-text-field-helper-text--persistent", classes.label)
  }, label), /*#__PURE__*/React.createElement("div", {
    id: elementId.current
  })), description && /*#__PURE__*/React.createElement(FormElementMessage, null, description));
};
//# sourceMappingURL=RichTextEditor.js.map