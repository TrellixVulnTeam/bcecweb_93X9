{"version":3,"sources":["../../src/AutoComplete/MultiAutoComplete.tsx"],"names":["React","Downshift","MaterialSpinner","Input","Chips","Chip","getOptionValue","getOptionText","findInAliases","List","ListItem","ListItemMeta","IconButton","classNames","Elevation","Typography","autoCompleteStyle","suggestionList","FormElementMessage","css","ListItemGraphic","style","pagination","bar","display","justifyContent","alignItems","borderBottom","padding","pages","searchInput","height","list","secondaryText","color","listStyles","listStyle","paddingLeft","margin","Spinner","DEFAULT_PER_PAGE","paginateMultipleSelection","multipleSelection","limit","page","search","data","Array","isArray","map","item","index","filter","name","toLowerCase","includes","lastPage","Math","ceil","length","totalCount","slice","from","to","meta","hasData","hasPrevious","hasNext","MultiAutoComplete","inputValue","multipleSelectionPage","multipleSelectionSearch","reorderFormVisible","reorderFormValue","createRef","set","selection","setState","props","unique","value","allowFreeInput","useSimpleValues","options","filtered","values","find","state","aliases","existingValue","unshift","textProp","isOpen","highlightedIndex","getMenuProps","getItemProps","renderItem","itemValue","itemClassNames","className","call","onChange","disabled","useMultipleSelectionList","description","renderListItemLabel","setMultipleSelectionSearch","setMultipleSelectionPage","key","e","newValue","splice","target","marginRight","minWidth","hasItems","rawOptions","valueProp","onInput","validation","isValid","otherInputProps","getOptions","downshift","assignedValueAfterClearing","current","clearSelection","getInputProps","openMenu","rest","rawOnChange","trailingIcon","loading","onBlur","onKeyUp","onFocus","renderOptions","renderMultipleSelection","Component"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport Downshift from \"downshift\";\nimport MaterialSpinner from \"react-spinner-material\";\nimport { Input } from \"../Input\";\nimport { Chips, Chip } from \"../Chips\";\nimport { getOptionValue, getOptionText, findInAliases } from \"./utils\";\nimport { List, ListItem, ListItemMeta } from \"@webiny/ui/List\";\nimport { IconButton } from \"@webiny/ui/Button\";\nimport classNames from \"classnames\";\nimport { Elevation } from \"../Elevation\";\nimport { Typography } from \"../Typography\";\nimport { autoCompleteStyle, suggestionList } from \"./styles\";\nimport { AutoCompleteBaseProps } from \"./types\";\nimport { FormElementMessage } from \"../FormElementMessage\";\n\nimport { ReactComponent as BaselineCloseIcon } from \"./icons/baseline-close-24px.svg\";\nimport { ReactComponent as PrevIcon } from \"./icons/navigate_before-24px.svg\";\nimport { ReactComponent as NextIcon } from \"./icons/navigate_next-24px.svg\";\nimport { ReactComponent as PrevAllIcon } from \"./icons/skip_previous-24px.svg\";\nimport { ReactComponent as NextAllIcon } from \"./icons/skip_next-24px.svg\";\nimport { ReactComponent as DeleteIcon } from \"./icons/baseline-close-24px.svg\";\nimport { ReactComponent as ReorderIcon } from \"./icons/reorder_black_24dp.svg\";\n\nimport { css } from \"emotion\";\nimport { ListItemGraphic } from \"../List\";\nconst style = {\n    pagination: {\n        bar: css({\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            borderBottom: \"2px solid #fa5723\",\n            padding: \"6px 0\"\n        }),\n        pages: css({\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\"\n        }),\n        searchInput: css({\n            height: \"42px !important\"\n        }),\n        list: css({\n            padding: \"0 0 5px 0 !important\",\n            \".mdc-list-item\": {\n                borderBottom: \"1px solid var(--mdc-theme-on-background)\"\n            }\n        }),\n        secondaryText: css({\n            color: \"var(--mdc-theme-text-secondary-on-background)\"\n        })\n    }\n};\nconst listStyles = css({\n    \"&.multi-autocomplete__options-list\": {\n        listStyle: \"none\",\n        paddingLeft: 0,\n        \"& li\": {\n            margin: 0\n        }\n    }\n});\n\nexport type MultiAutoCompleteProps = AutoCompleteBaseProps & {\n    /**\n     * Prevents adding the same item to the list twice.\n     */\n    unique: boolean;\n\n    /**\n     * Set if custom values (not from list of suggestions) are allowed.\n     */\n    allowFreeInput?: boolean;\n\n    /**\n     *  If true, will show a loading spinner on the right side of the input.\n     */\n    loading?: boolean;\n\n    /**\n     * Use data list instead of default Chips component. Useful when expecting a lot of data.\n     */\n    useMultipleSelectionList?: boolean;\n\n    /**\n     * Render list item when `useMultipleSelectionList` is used.\n     */\n    renderListItemLabel?: Function;\n};\n\ntype State = {\n    inputValue: string;\n    multipleSelectionPage: number;\n    multipleSelectionSearch: string;\n    reorderFormVisible: string;\n    reorderFormValue: string;\n};\n\nfunction Spinner() {\n    return <MaterialSpinner size={24} spinnerColor={\"#fa5723\"} spinnerWidth={2} visible />;\n}\n\nconst DEFAULT_PER_PAGE = 10;\nfunction paginateMultipleSelection(multipleSelection, limit, page, search) {\n    // Assign a real index, so that later when we press delete, we know what is the actual index we're deleting.\n    let data = Array.isArray(multipleSelection)\n        ? multipleSelection.map((item, index) => ({ ...item, index }))\n        : [];\n\n    if (typeof search === \"string\" && search) {\n        data = data.filter(item => {\n            return (\n                typeof item.name === \"string\" &&\n                item.name.toLowerCase().includes(search.toLowerCase())\n            );\n        });\n    }\n\n    const lastPage = Math.ceil(data.length / limit);\n    const totalCount = data.length;\n\n    page = page || lastPage;\n    data = data.slice((page - 1) * limit, page * limit);\n\n    let from = 0;\n    let to = 0;\n    if (data.length) {\n        from = (page - 1) * limit + 1;\n        to = from + (data.length - 1);\n    }\n\n    const meta = {\n        hasData: data.length > 0,\n        totalCount,\n        from,\n        to,\n        page: page,\n        lastPage,\n        limit,\n        hasPrevious: page > 1,\n        hasNext: page < lastPage\n    };\n\n    return { data, meta };\n}\n\nexport class MultiAutoComplete extends React.Component<MultiAutoCompleteProps, State> {\n    static defaultProps = {\n        valueProp: \"id\",\n        textProp: \"name\",\n        unique: true,\n        options: [],\n        useSimpleValues: false,\n        useMultipleSelectionList: false,\n        renderItem(item: any) {\n            return <Typography use={\"body2\"}>{getOptionText(item, this.props)}</Typography>;\n        },\n        renderListItemLabel(item: any) {\n            return getOptionText(item, this.props);\n        }\n    };\n\n    state = {\n        inputValue: \"\",\n        multipleSelectionPage: 0,\n        multipleSelectionSearch: \"\",\n        reorderFormVisible: \"\",\n        reorderFormValue: \"\"\n    };\n\n    /**\n     * Helps us trigger some of the downshift's methods (eg. clearSelection) and helps us to avoid adding state.\n     */\n    downshift: any = React.createRef();\n\n    assignedValueAfterClearing = {\n        set: false,\n        selection: null\n    };\n\n    setMultipleSelectionPage = multipleSelectionPage => {\n        this.setState({ multipleSelectionPage });\n    };\n\n    setMultipleSelectionSearch = multipleSelectionSearch => {\n        this.setState({ multipleSelectionSearch });\n    };\n\n    getOptions() {\n        const { unique, value, allowFreeInput, useSimpleValues, options } = this.props;\n\n        const filtered = options.filter(item => {\n            // We need to filter received options.\n            // 1) If \"unique\" prop was passed, we don't want to show already picked options again.\n            if (unique) {\n                const values = value;\n                if (Array.isArray(values)) {\n                    if (\n                        values.find(\n                            value =>\n                                getOptionValue(value, this.props) ===\n                                getOptionValue(item, this.props)\n                        )\n                    ) {\n                        return false;\n                    }\n                }\n            }\n\n            // 2) At the end, we want to show only options that are matched by typed text.\n            if (!this.state.inputValue) {\n                return true;\n            }\n\n            if (item.aliases) {\n                return findInAliases(item, this.state.inputValue);\n            }\n\n            return getOptionText(item, this.props)\n                .toLowerCase()\n                .includes(this.state.inputValue.toLowerCase());\n        });\n\n        // If free input is allowed, prepend typed value to the list.\n        if (allowFreeInput && this.state.inputValue) {\n            if (useSimpleValues) {\n                const existingValue = filtered.includes(this.state.inputValue);\n                if (!existingValue) {\n                    filtered.unshift(this.state.inputValue);\n                }\n            } else {\n                const existingValue = filtered.find(\n                    item => this.state.inputValue === getOptionText(item, this.props)\n                );\n                if (!existingValue) {\n                    filtered.unshift({ [this.props.textProp]: this.state.inputValue });\n                }\n            }\n        }\n\n        return filtered;\n    }\n\n    /**\n     * Renders options - based on user's input. It will try to match input text with available options.\n     * @param options\n     * @param isOpen\n     * @param highlightedIndex\n     * @param selectedItem\n     * @param getMenuProps\n     * @param getItemProps\n     * @returns {*}\n     */\n    renderOptions({ options, isOpen, highlightedIndex, getMenuProps, getItemProps }: any) {\n        if (!isOpen) {\n            return null;\n        }\n\n        if (!options.length) {\n            return (\n                <Elevation z={1}>\n                    <ul\n                        className={classNames(\"multi-autocomplete__options-list\", listStyles)}\n                        {...getMenuProps()}\n                    >\n                        <li>\n                            <Typography use={\"body2\"}>No results.</Typography>\n                        </li>\n                    </ul>\n                </Elevation>\n            );\n        }\n\n        const { renderItem } = this.props;\n        return (\n            <Elevation z={1}>\n                <ul\n                    className={classNames(\"multi-autocomplete__options-list\", listStyles)}\n                    {...getMenuProps()}\n                >\n                    {options.map((item, index) => {\n                        const itemValue = getOptionValue(item, this.props);\n\n                        // Base classes.\n                        const itemClassNames = {\n                            [suggestionList]: true,\n                            highlighted: highlightedIndex === index,\n                            selected: false\n                        };\n\n                        // Render the item.\n                        return (\n                            <li\n                                key={itemValue + index}\n                                {...getItemProps({\n                                    index,\n                                    item,\n                                    className: classNames(itemClassNames)\n                                })}\n                            >\n                                {renderItem.call(this, item, index)}\n                            </li>\n                        );\n                    })}\n                </ul>\n            </Elevation>\n        );\n    }\n\n    /**\n     * Once added, items can also be removed by clicking on the ✕ icon. This is the method that is responsible for\n     * rendering selected items (we are using already existing \"Chips\" component).\n     * @returns {*}\n     */\n    renderMultipleSelection() {\n        const {\n            value,\n            onChange,\n            disabled,\n            useMultipleSelectionList,\n            description,\n            renderListItemLabel\n        } = this.props;\n\n        if (useMultipleSelectionList) {\n            const { data, meta } = paginateMultipleSelection(\n                value,\n                DEFAULT_PER_PAGE,\n                this.state.multipleSelectionPage,\n                this.state.multipleSelectionSearch\n            );\n\n            return (\n                <>\n                    <div className={style.pagination.bar}>\n                        <div>\n                            <Input\n                                className={style.pagination.searchInput}\n                                placeholder={\"Search selected...\"}\n                                value={this.state.multipleSelectionSearch}\n                                onChange={value => {\n                                    this.setMultipleSelectionSearch(value);\n                                    this.setMultipleSelectionPage(value ? 1 : 0);\n                                }}\n                            />\n                        </div>\n\n                        <div className={style.pagination.pages}>\n                            <div className={meta.hasData ? \"\" : style.pagination.secondaryText}>\n                                {meta.from} - {meta.to} of {meta.totalCount}\n                            </div>\n                            <div>\n                                <IconButton\n                                    icon={<PrevAllIcon />}\n                                    disabled={!meta.hasData || meta.page === 1}\n                                    onClick={() => this.setMultipleSelectionPage(1)}\n                                />\n                                <IconButton\n                                    icon={<PrevIcon />}\n                                    disabled={!meta.hasData || !meta.hasPrevious}\n                                    onClick={() => this.setMultipleSelectionPage(meta.page - 1)}\n                                />\n                                <IconButton\n                                    icon={<NextIcon />}\n                                    disabled={!meta.hasData || !meta.hasNext}\n                                    onClick={() => this.setMultipleSelectionPage(meta.page + 1)}\n                                />\n                                <IconButton\n                                    icon={<NextAllIcon />}\n                                    disabled={!meta.hasData || meta.page === meta.lastPage}\n                                    onClick={() => this.setMultipleSelectionPage(meta.lastPage)}\n                                />\n                            </div>\n                        </div>\n                    </div>\n\n                    <List className={style.pagination.list}>\n                        {meta.hasData ? (\n                            data.map((item, index) => {\n                                const key = `${getOptionValue(item, this.props)}-${index}`;\n                                if (this.state.reorderFormVisible === key) {\n                                    return (\n                                        <ListItem key={key}>\n                                            <ListItemGraphic>\n                                                <IconButton disabled icon={<ReorderIcon />} />\n                                            </ListItemGraphic>\n                                            <Input\n                                                value={this.state.reorderFormValue}\n                                                onKeyDown={(e: any) => {\n                                                    const key = e.key;\n                                                    if (key !== \"Escape\" && key !== \"Enter\") {\n                                                        return;\n                                                    }\n\n                                                    if (key === \"Enter\") {\n                                                        // Reorder the item.\n                                                        const newValue = [...value];\n                                                        newValue.splice(\n                                                            e.target.value - 1,\n                                                            0,\n                                                            newValue.splice(item.index, 1)[0]\n                                                        );\n\n                                                        onChange(newValue);\n                                                    }\n\n                                                    this.setState({\n                                                        reorderFormVisible: \"\",\n                                                        reorderFormValue: \"\"\n                                                    });\n                                                }}\n                                                onChange={value =>\n                                                    this.setState({ reorderFormValue: value })\n                                                }\n                                                type={\"number\"}\n                                                autoFocus\n                                                className={style.pagination.searchInput}\n                                                placeholder={\n                                                    \"Type a new order number and press Enter, or press Esc to cancel.\"\n                                                }\n                                            />\n                                            <ListItemMeta>\n                                                <IconButton icon={<DeleteIcon />} disabled />\n                                            </ListItemMeta>\n                                        </ListItem>\n                                    );\n                                }\n\n                                return (\n                                    <ListItem key={key}>\n                                        <ListItemGraphic>\n                                            <IconButton\n                                                icon={<ReorderIcon />}\n                                                onClick={() => {\n                                                    this.setState({ reorderFormVisible: key });\n                                                }}\n                                            />\n                                        </ListItemGraphic>\n                                        <div\n                                            style={{\n                                                color: \"var(--mdc-theme-text-secondary-on-background)\",\n                                                marginRight: 8,\n                                                minWidth: 32\n                                            }}\n                                        >\n                                            {item.index + 1}.\n                                        </div>{\" \"}\n                                        {renderListItemLabel.call(this, item)}\n                                        <ListItemMeta>\n                                            <IconButton\n                                                icon={<DeleteIcon />}\n                                                onClick={() => {\n                                                    if (onChange) {\n                                                        onChange([\n                                                            ...value.slice(0, item.index),\n                                                            ...value.slice(item.index + 1)\n                                                        ]);\n                                                    }\n                                                }}\n                                            />\n                                        </ListItemMeta>\n                                    </ListItem>\n                                );\n                            })\n                        ) : (\n                            <ListItem>\n                                <span className={style.pagination.secondaryText}>\n                                    Nothing to show.\n                                </span>\n                            </ListItem>\n                        )}\n                    </List>\n                    <div>\n                        <FormElementMessage>{description}</FormElementMessage>\n                    </div>\n                </>\n            );\n        }\n\n        const hasItems = Array.isArray(value) && value.length;\n        if (!hasItems) {\n            return null;\n        }\n\n        return (\n            <Chips disabled={disabled}>\n                {value.map((item, index) => (\n                    <Chip\n                        label={getOptionText(item, this.props)}\n                        key={`${getOptionValue(item, this.props)}-${index}`}\n                        trailingIcon={<BaselineCloseIcon />}\n                        onRemove={() => {\n                            if (onChange) {\n                                onChange([...value.slice(0, index), ...value.slice(index + 1)]);\n                            }\n                        }}\n                    />\n                ))}\n            </Chips>\n        );\n    }\n\n    render() {\n        const {\n            props,\n            props: {\n                options: rawOptions, // eslint-disable-line\n                allowFreeInput, // eslint-disable-line\n                useSimpleValues, // eslint-disable-line\n                unique,\n                value,\n                onChange,\n                valueProp, // eslint-disable-line\n                textProp, // eslint-disable-line\n                onInput,\n                validation = { isValid: null },\n                useMultipleSelectionList,\n                description,\n                ...otherInputProps\n            }\n        } = this;\n\n        const options = this.getOptions();\n\n        return (\n            <div className={classNames(autoCompleteStyle, props.className)}>\n                <Downshift\n                    defaultSelectedItem={null}\n                    // @ts-ignore\n                    className={autoCompleteStyle}\n                    itemToString={item => item && getOptionText(item, props)}\n                    ref={this.downshift}\n                    onChange={selection => {\n                        if (!this.assignedValueAfterClearing.set) {\n                            this.assignedValueAfterClearing = {\n                                set: true,\n                                selection\n                            };\n                            this.downshift.current.clearSelection();\n                            this.setMultipleSelectionPage(0);\n                            return;\n                        }\n\n                        if (this.assignedValueAfterClearing.set) {\n                            this.setState({ inputValue: \"\" });\n                            this.assignedValueAfterClearing.set = false;\n                            if (Array.isArray(value)) {\n                                onChange &&\n                                    onChange([...value, this.assignedValueAfterClearing.selection]);\n                            } else {\n                                onChange && onChange([this.assignedValueAfterClearing.selection]);\n                            }\n                        }\n                    }}\n                >\n                    {/* \"getInputProps\" and \"openMenu\" are not needed in renderOptions method. */}\n                    {({ getInputProps, openMenu, ...rest }) => (\n                        <div>\n                            <Input\n                                {...getInputProps({\n                                    ...otherInputProps,\n                                    // @ts-ignore\n                                    validation,\n\n                                    // Only pass description if not using \"useMultipleSelectionList\".\n                                    description: useMultipleSelectionList ? null : description,\n                                    rawOnChange: true,\n                                    trailingIcon: this.props.loading && <Spinner />,\n                                    onChange: e => e,\n                                    onBlur: e => e,\n                                    onKeyUp: (e: any) => {\n                                        const inputValue = e.target.value || \"\";\n\n                                        // Set current input value into state and trigger onInput if different.\n                                        if (inputValue !== this.state.inputValue) {\n                                            this.setState({ inputValue }, () => {\n                                                onInput && onInput(inputValue);\n                                            });\n                                        }\n                                    },\n                                    onFocus: e => {\n                                        openMenu();\n                                        otherInputProps.onFocus && otherInputProps.onFocus(e);\n                                    }\n                                })}\n                            />\n                            {this.renderOptions({ ...rest, unique, options })}\n                            {this.renderMultipleSelection()}\n                        </div>\n                    )}\n                </Downshift>\n            </div>\n        );\n    }\n}\n"],"file":"MultiAutoComplete.js"}