import * as React from "react";
import { AutoCompleteBaseProps } from "./types";
export declare type MultiAutoCompleteProps = AutoCompleteBaseProps & {
    /**
     * Prevents adding the same item to the list twice.
     */
    unique: boolean;
    /**
     * Set if custom values (not from list of suggestions) are allowed.
     */
    allowFreeInput?: boolean;
    /**
     *  If true, will show a loading spinner on the right side of the input.
     */
    loading?: boolean;
    /**
     * Use data list instead of default Chips component. Useful when expecting a lot of data.
     */
    useMultipleSelectionList?: boolean;
    /**
     * Render list item when `useMultipleSelectionList` is used.
     */
    renderListItemLabel?: Function;
};
declare type State = {
    inputValue: string;
    multipleSelectionPage: number;
    multipleSelectionSearch: string;
    reorderFormVisible: string;
    reorderFormValue: string;
};
export declare class MultiAutoComplete extends React.Component<MultiAutoCompleteProps, State> {
    static defaultProps: {
        valueProp: string;
        textProp: string;
        unique: boolean;
        options: any[];
        useSimpleValues: boolean;
        useMultipleSelectionList: boolean;
        renderItem(item: any): JSX.Element;
        renderListItemLabel(item: any): any;
    };
    state: {
        inputValue: string;
        multipleSelectionPage: number;
        multipleSelectionSearch: string;
        reorderFormVisible: string;
        reorderFormValue: string;
    };
    /**
     * Helps us trigger some of the downshift's methods (eg. clearSelection) and helps us to avoid adding state.
     */
    downshift: any;
    assignedValueAfterClearing: {
        set: boolean;
        selection: any;
    };
    setMultipleSelectionPage: (multipleSelectionPage: any) => void;
    setMultipleSelectionSearch: (multipleSelectionSearch: any) => void;
    getOptions(): any[];
    /**
     * Renders options - based on user's input. It will try to match input text with available options.
     * @param options
     * @param isOpen
     * @param highlightedIndex
     * @param selectedItem
     * @param getMenuProps
     * @param getItemProps
     * @returns {*}
     */
    renderOptions({ options, isOpen, highlightedIndex, getMenuProps, getItemProps }: any): JSX.Element;
    /**
     * Once added, items can also be removed by clicking on the âœ• icon. This is the method that is responsible for
     * rendering selected items (we are using already existing "Chips" component).
     * @returns {*}
     */
    renderMultipleSelection(): JSX.Element;
    render(): JSX.Element;
}
export {};
