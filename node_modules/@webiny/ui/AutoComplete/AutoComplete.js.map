{"version":3,"sources":["../../src/AutoComplete/AutoComplete.tsx"],"names":["React","Downshift","Input","classNames","Elevation","Typography","keycode","autoCompleteStyle","suggestionList","getOptionValue","getOptionText","findInAliases","MaterialSpinner","css","menuStyles","top","bottom","listStyles","listStyle","paddingLeft","margin","Placement","Spinner","AutoComplete","inputValue","createRef","previousProps","props","value","options","previousValue","item","find","option","downshift","current","selectItem","isOpen","highlightedIndex","selectedItem","getMenuProps","getItemProps","placement","renderItem","filtered","filter","state","aliases","toLowerCase","includes","length","map","index","itemValue","itemClassNames","selected","className","call","onChange","valueProp","textProp","onInput","validation","isValid","otherInputProps","downshiftProps","itemToString","defaultSelectedItem","selection","setState","getInputProps","openMenu","rest","trailingIcon","loading","rawOnChange","ev","onBlur","onFocus","onKeyDown","keyCode","setTimeout","onKeyUp","target","currentTarget","disabled","readOnly","renderOptions","Component"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport Downshift from \"downshift\";\nimport { Input } from \"../Input\";\nimport classNames from \"classnames\";\nimport { Elevation } from \"../Elevation\";\nimport { Typography } from \"../Typography\";\nimport keycode from \"keycode\";\nimport { autoCompleteStyle, suggestionList } from \"./styles\";\nimport { AutoCompleteBaseProps } from \"./types\";\nimport { getOptionValue, getOptionText, findInAliases } from \"./utils\";\nimport { isEqual } from \"lodash\";\nimport MaterialSpinner from \"react-spinner-material\";\nimport { css } from \"emotion\";\n\nconst menuStyles = css({\n    top: \"unset !important\",\n    bottom: 75\n});\n\nconst listStyles = css({\n    \"&.autocomplete__options-list\": {\n        listStyle: \"none\",\n        paddingLeft: 0,\n        \"& li\": {\n            margin: 0\n        }\n    }\n});\n\nexport enum Placement {\n    top = \"top\",\n    bottom = \"bottom\"\n}\n\nexport type Props = AutoCompleteBaseProps & {\n    /* Placement position of dropdown menu, can be either `top` or `bottom`. */\n    placement?: Placement;\n\n    /* A callback that is executed each time a value is changed. */\n    onChange?: (value: any, selection: any) => void;\n\n    /* If true, will show a loading spinner on the right side of the input. */\n    loading?: boolean;\n};\n\ntype State = {\n    inputValue: string;\n};\n\nfunction Spinner() {\n    return <MaterialSpinner size={24} spinnerColor={\"#fa5723\"} spinnerWidth={2} visible />;\n}\n\nclass AutoComplete extends React.Component<Props, State> {\n    static defaultProps = {\n        valueProp: \"id\",\n        textProp: \"name\",\n        options: [],\n        placement: Placement.bottom,\n        renderItem(item: any) {\n            return <Typography use={\"body2\"}>{getOptionText(item, this.props)}</Typography>;\n        }\n    };\n\n    state = {\n        inputValue: \"\"\n    };\n\n    /**\n     * Helps us trigger some of the downshift's methods (eg. clearSelection) and helps us to avoid adding state.\n     */\n    downshift: any = React.createRef();\n\n    componentDidUpdate(previousProps: any) {\n        const { value, options } = this.props;\n        const { value: previousValue } = previousProps;\n\n        if (!isEqual(value, previousValue)) {\n            let item = null;\n\n            if (value) {\n                if (typeof value === \"object\") {\n                    item = value;\n                } else {\n                    item =\n                        options.find(option => {\n                            return value === getOptionValue(option, this.props);\n                        }) || null;\n                }\n            }\n\n            const { current: downshift } = this.downshift;\n            downshift && downshift.selectItem(item);\n        }\n    }\n\n    /**\n     * Renders options - based on user's input. It will try to match input text with available options.\n     */\n    renderOptions({\n        options,\n        isOpen,\n        highlightedIndex,\n        selectedItem,\n        getMenuProps,\n        getItemProps,\n        placement\n    }: any) {\n        if (!isOpen) {\n            return null;\n        }\n\n        const { renderItem } = this.props;\n\n        const filtered = options.filter(item => {\n            // 2) At the end, we want to show only options that are matched by typed text.\n            if (!this.state.inputValue) {\n                return true;\n            }\n\n            if (item.aliases) {\n                return findInAliases(item, this.state.inputValue);\n            }\n\n            return getOptionText(item, this.props)\n                .toLowerCase()\n                .includes(this.state.inputValue.toLowerCase());\n        });\n\n        if (!filtered.length) {\n            return (\n                <Elevation\n                    z={1}\n                    className={classNames({\n                        [menuStyles]: placement === Placement.top\n                    })}\n                >\n                    <ul\n                        className={classNames(\"autocomplete__options-list\", listStyles)}\n                        {...getMenuProps()}\n                    >\n                        <li>\n                            <Typography use={\"body2\"}>No results.</Typography>\n                        </li>\n                    </ul>\n                </Elevation>\n            );\n        }\n\n        return (\n            <Elevation z={1} className={classNames({ [menuStyles]: placement === Placement.top })}>\n                <ul\n                    className={classNames(\"autocomplete__options-list\", listStyles)}\n                    {...getMenuProps()}\n                >\n                    {filtered.map((item, index) => {\n                        const itemValue = getOptionValue(item, this.props);\n\n                        // Base classes.\n                        const itemClassNames = {\n                            [suggestionList]: true,\n                            highlighted: highlightedIndex === index,\n                            selected: false\n                        };\n\n                        // Add \"selected\" class if the item is selected.\n                        if (\n                            selectedItem &&\n                            getOptionValue(selectedItem, this.props) === itemValue\n                        ) {\n                            itemClassNames.selected = true;\n                        }\n\n                        // Render the item.\n                        return (\n                            <li\n                                key={itemValue}\n                                {...getItemProps({\n                                    index,\n                                    item,\n                                    className: classNames(itemClassNames)\n                                })}\n                            >\n                                {renderItem.call(this, item, index)}\n                            </li>\n                        );\n                    })}\n                </ul>\n            </Elevation>\n        );\n    }\n\n    render() {\n        const {\n            className,\n            options,\n            onChange,\n            value, // eslint-disable-line\n            valueProp, // eslint-disable-line\n            textProp, // eslint-disable-line\n            onInput,\n            validation = { isValid: null },\n            placement,\n            ...otherInputProps\n        } = this.props;\n\n        // Downshift related props.\n        const downshiftProps = {\n            className: autoCompleteStyle,\n            itemToString: item => getOptionText(item, this.props),\n            defaultSelectedItem: value,\n            onChange: selection => {\n                if (!selection || !onChange) {\n                    return;\n                }\n                onChange(getOptionValue(selection, this.props), selection);\n                this.setState(state => ({\n                    ...state,\n                    inputValue: \"\"\n                }));\n            }\n        };\n\n        return (\n            <div className={classNames(autoCompleteStyle, className)}>\n                <Downshift {...downshiftProps} ref={this.downshift}>\n                    {({ getInputProps, openMenu, ...rest }) => (\n                        <div>\n                            <Input\n                                {...getInputProps({\n                                    // This prop is above `otherInputProps` since it can be overridden by the user.\n                                    trailingIcon: this.props.loading && <Spinner />,\n                                    ...otherInputProps,\n                                    // @ts-ignore\n                                    validation,\n                                    rawOnChange: true,\n                                    onChange: ev => ev,\n                                    onBlur: ev => ev,\n                                    onFocus: ev => {\n                                        openMenu();\n                                        otherInputProps.onFocus && otherInputProps.onFocus(ev);\n                                    },\n                                    onKeyDown: (ev: React.KeyboardEvent<HTMLInputElement>) => {\n                                        const keyCode: string = keycode(ev as unknown as Event);\n\n                                        if (keyCode === \"backspace\") {\n                                            onChange(null);\n                                            setTimeout(() => openMenu(), 50);\n                                        }\n                                    },\n                                    onKeyUp: (ev: React.KeyboardEvent<HTMLInputElement>) => {\n                                        const keyCode: string = keycode(ev as unknown as Event);\n\n                                        const target = ev.currentTarget;\n                                        const inputValue = target.value || \"\";\n\n                                        // If user pressed 'esc', 'enter' or similar...\n                                        if (\n                                            keyCode &&\n                                            keyCode.length > 1 &&\n                                            keyCode !== \"backspace\"\n                                        ) {\n                                            return;\n                                        }\n\n                                        // If values are the same, exit, do not update current search term.\n                                        if (inputValue === this.state.inputValue) {\n                                            return;\n                                        }\n\n                                        this.setState(\n                                            state => ({\n                                                ...state,\n                                                inputValue\n                                            }),\n                                            () => {\n                                                onInput && onInput(inputValue);\n                                            }\n                                        );\n                                    }\n                                })}\n                            />\n                            {!otherInputProps.disabled &&\n                                !otherInputProps.readOnly &&\n                                this.renderOptions({ ...rest, options, placement })}\n                        </div>\n                    )}\n                </Downshift>\n            </div>\n        );\n    }\n}\n\nexport { AutoComplete };\n"],"file":"AutoComplete.js"}