import { useCallback, useMemo } from "react";
import { useSecurity } from "@webiny/app-security";
import get from "lodash/get";
import { useI18N } from "@webiny/app-i18n/hooks/useI18N";

var usePermission = function usePermission() {
  var _useSecurity = useSecurity(),
      identity = _useSecurity.identity;

  var _useI18N = useI18N(),
      getCurrentLocale = _useI18N.getCurrentLocale;

  var currentLocale = getCurrentLocale("content");
  var hasFullAccess = useMemo(function () {
    return identity.getPermission("cms.*");
  }, []);
  var canRead = useCallback(function (permissionName) {
    var permission = identity.getPermission(permissionName);

    if (!permission) {
      return false;
    }

    if (typeof permission.rwd !== "string") {
      return true;
    }

    return permission.rwd.includes("r");
  }, []);
  var canReadEntries = useCallback(function (_ref) {
    var contentModelGroup = _ref.contentModelGroup,
        contentModel = _ref.contentModel;

    if (hasFullAccess) {
      return true;
    }

    var permission = identity.getPermission("cms.contentEntry");
    var contentModelPermission = identity.getPermission("cms.contentModel");
    var contentModelGroupPermission = identity.getPermission("cms.contentModelGroup");

    if (!permission) {
      return false;
    } // Check "contentModel" list.


    var models = get(contentModelPermission, "models.".concat(currentLocale));

    if (Array.isArray(models)) {
      return models.includes(contentModel.modelId);
    } // Check "contentModelGroup" list.


    var groups = get(contentModelGroupPermission, "groups.".concat(currentLocale));

    if (Array.isArray(groups)) {
      return groups.includes(contentModelGroup.id);
    }

    if (typeof permission.rwd === "string") {
      return permission.rwd.includes("r");
    }

    return true;
  }, [identity, hasFullAccess, currentLocale]);
  var canEdit = useCallback(function (item, permissionName) {
    var permission = identity.getPermission(permissionName);

    if (!permission) {
      return false;
    }

    if (permission.own) {
      /**
       * There will be no "createdBy" field for a new entry therefore we enable the access.
       */
      if (!item.createdBy) {
        return true;
      }

      return get(item, "createdBy.id") === identity.login;
    }

    if (typeof permission.rwd === "string") {
      return permission.rwd.includes("w");
    }

    return true;
  }, [identity]);
  /**
   * @description This checks whether the user has the "write" access for given permission;
   * without talking the "own" property in account.
   * @param {string} permissionName
   * */

  var canCreate = useCallback(function (permissionName) {
    var permission = identity.getPermission(permissionName);

    if (!permission) {
      return false;
    }

    if (typeof permission.rwd !== "string") {
      return true;
    }

    return permission.rwd.includes("w");
  }, []);
  var canDelete = useCallback(function (item, permissionName) {
    var permission = identity.getPermission(permissionName);

    if (!permission) {
      return false;
    }

    if (permission.own) {
      return get(item, "createdBy.id") === identity.login;
    }

    if (typeof permission.rwd === "string") {
      return permission.rwd.includes("d");
    }

    return true;
  }, [identity]);
  var canPublish = useCallback(function (permissionName) {
    if (hasFullAccess) {
      return true;
    }

    var permission = identity.getPermission(permissionName);

    if (!permission) {
      return false;
    }

    if (typeof permission.pw === "string") {
      return permission.pw.includes("p");
    }

    return false;
  }, [identity, hasFullAccess]);
  var canUnpublish = useCallback(function (permissionName) {
    if (hasFullAccess) {
      return true;
    }

    var permission = identity.getPermission(permissionName);

    if (!permission) {
      return false;
    }

    if (typeof permission.pw === "string") {
      return permission.pw.includes("u");
    }

    return false;
  }, [identity, hasFullAccess]);
  var canRequestReview = useCallback(function (permissionName) {
    if (hasFullAccess) {
      return true;
    }

    var permission = identity.getPermission(permissionName);

    if (!permission) {
      return false;
    }

    if (typeof permission.pw === "string") {
      return permission.pw.includes("r");
    }

    return false;
  }, [identity, hasFullAccess]);
  var canRequestChange = useCallback(function (permissionName) {
    if (hasFullAccess) {
      return true;
    }

    var permission = identity.getPermission(permissionName);

    if (!permission) {
      return false;
    }

    if (typeof permission.pw === "string") {
      return permission.pw.includes("c");
    }

    return false;
  }, [identity, hasFullAccess]);
  var canReadContentModels = canRead("cms.contentModel");
  var canReadContentModelGroups = canRead("cms.contentModelGroup");
  var canCreateContentModels = canCreate("cms.contentModel");
  var canCreateContentModelGroups = canCreate("cms.contentModelGroup");
  var canAccessManageEndpoint = useMemo(function () {
    return identity.getPermission("cms.endpoint.manage") !== undefined;
  }, [identity]);
  return {
    canReadEntries: canReadEntries,
    canEdit: canEdit,
    canCreate: canCreate,
    canDelete: canDelete,
    canPublish: canPublish,
    canUnpublish: canUnpublish,
    canRequestReview: canRequestReview,
    canRequestChange: canRequestChange,
    canReadContentModels: canReadContentModels,
    canReadContentModelGroups: canReadContentModelGroups,
    canCreateContentModels: canCreateContentModels,
    canCreateContentModelGroups: canCreateContentModelGroups,
    canAccessManageEndpoint: canAccessManageEndpoint
  };
};

export default usePermission;
//# sourceMappingURL=usePermission.js.map