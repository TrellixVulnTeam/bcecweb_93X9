import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2, _templateObject3, _templateObject4;

import React, { useState, useMemo } from "react";
import { useSecurity } from "@webiny/app-security";
import { i18n } from "@webiny/app/i18n";
var t = i18n.ns("app-headless-cms/admin/contents/entries");
var SORTERS = [{
  label: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Newest to oldest"]))),
  value: "savedOn_DESC"
}, {
  label: t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Oldest to newest"]))),
  value: "savedOn_ASC"
}];
export var Context = /*#__PURE__*/React.createContext(null);
export var Provider = function Provider(_ref) {
  var contentModel = _ref.contentModel,
      children = _ref.children;

  var _useSecurity = useSecurity(),
      identity = _useSecurity.identity;

  var _useState = useState({
    sort: SORTERS[0].value
  }),
      _useState2 = _slicedToArray(_useState, 2),
      listQueryVariables = _useState2[0],
      setListQueryVariables = _useState2[1];

  var canCreate = useMemo(function () {
    var permission = identity.getPermission("cms.contentEntry");

    if (!permission) {
      return false;
    }

    if (typeof permission.rwd !== "string") {
      return true;
    }

    return permission.rwd.includes("w");
  }, []);
  var sorters = useMemo(function () {
    var titleField = contentModel.fields.find(function (field) {
      return field.fieldId === contentModel.titleFieldId;
    });
    var titleFieldLabel = titleField ? titleField.label : null;

    if (!titleFieldLabel) {
      return SORTERS;
    }

    return [].concat(SORTERS, [{
      label: t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["{titleFieldLabel} A-Z"])))({
        titleFieldLabel: titleFieldLabel
      }),
      value: "".concat(contentModel.titleFieldId, "_ASC")
    }, {
      label: t(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["{titleFieldLabel} Z-A"])))({
        titleFieldLabel: titleFieldLabel
      }),
      value: "".concat(contentModel.titleFieldId, "_DESC")
    }]);
  }, [contentModel.modelId]);
  var value = {
    contentModel: contentModel,
    sorters: sorters,
    canCreate: canCreate,
    listQueryVariables: listQueryVariables,
    setListQueryVariables: setListQueryVariables
  };
  return /*#__PURE__*/React.createElement(Context.Provider, {
    value: value
  }, children);
};
Provider.displayName = "ContentEntriesProvider";
//# sourceMappingURL=ContentEntriesContext.js.map