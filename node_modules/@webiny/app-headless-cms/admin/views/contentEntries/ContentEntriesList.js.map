{"version":3,"sources":["../../../../src/admin/views/contentEntries/ContentEntriesList.tsx"],"names":["React","useMemo","debounce","css","TimeAgo","pluralize","styled","i18n","Form","Typography","UIList","ButtonIcon","ButtonSecondary","Cell","Grid","Select","Scrollbar","SearchUI","statusLabels","useCallback","useContentEntriesList","t","ns","rightAlign","alignItems","justifyContent","ModelId","color","InlineLoaderWrapper","position","bottom","left","display","width","height","backgroundColor","listItemMinHeight","minHeight","ContentEntriesList","contentModel","entryId","loading","canCreate","onCreate","data","editEntry","loadMore","loadMoreLoading","listQueryVariables","setListQueryVariables","sorters","filter","setFilter","loadMoreOnScroll","scrollFrame","top","entriesDataListModalOverlay","status","sort","prevState","Bind","map","label","value","name","modelId","title","item","id","meta","time","savedOn","version"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,SAASC,GAAT,QAAoB,SAApB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,OAAO,KAAKC,MAAZ,MAAwB,iBAAxB;AACA,SAASC,UAAT,EAAqBC,eAArB,QAA4C,mBAA5C;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,iBAA3B;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,SAAT,QAA0B,sBAA1B;;;AAGA,OAAOC,QAAP,MAAqB,uCAArB;AACA,OAAOC,YAAP;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,qBAAT;AAEA,IAAMC,CAAC,GAAGd,IAAI,CAACe,EAAL,CAAQ,2CAAR,CAAV;AAEA,IAAMC,UAAU,gBAAGpB,GAAG,CAAC;AACnBqB,EAAAA,UAAU,EAAE,qBADO;AAEnBC,EAAAA,cAAc,EAAE;AAFG,CAAD,sBAAtB;AAKA,IAAMC,OAAO,gBAAGpB,MAAH,CAAU,MAAV;AAAA;AAAA;AAAA,GAAkB;AAC3BqB,EAAAA,KAAK,EAAE;AADoB,CAAlB,CAAb;AAIA,IAAMC,mBAAmB,gBAAGtB,MAAH,CAAU,KAAV;AAAA;AAAA;AAAA,GAAiB;AACtCuB,EAAAA,QAAQ,EAAE,UAD4B;AAEtCC,EAAAA,MAAM,EAAE,CAF8B;AAGtCC,EAAAA,IAAI,EAAE,CAHgC;AAItCC,EAAAA,OAAO,EAAE,MAJ6B;AAKtCP,EAAAA,cAAc,EAAE,QALsB;AAMtCD,EAAAA,UAAU,EAAE,QAN0B;AAOtCS,EAAAA,KAAK,EAAE,MAP+B;AAQtCC,EAAAA,MAAM,EAAE,EAR8B;AAStCC,EAAAA,eAAe,EAAE;AATqB,CAAjB,CAAzB;AAYA,IAAMC,iBAAiB,gBAAGjC,GAAG,CAAC;AAC1BkC,EAAAA,SAAS,EAAE;AADe,CAAD,6BAA7B;;AAIA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC7B,8BAeIlB,qBAAqB,EAfzB;AAAA,MACImB,YADJ,yBACIA,YADJ;AAAA,MAEIC,OAFJ,yBAEIA,OAFJ;AAAA,MAGIC,OAHJ,yBAGIA,OAHJ;AAAA,MAIIC,SAJJ,yBAIIA,SAJJ;AAAA,MAKIC,QALJ,yBAKIA,QALJ;AAAA,MAMIC,IANJ,yBAMIA,IANJ;AAAA,MAOIC,SAPJ,yBAOIA,SAPJ;AAAA,MAQIC,QARJ,yBAQIA,QARJ;AAAA,MASIC,eATJ,yBASIA,eATJ;AAAA,MAUIC,kBAVJ,yBAUIA,kBAVJ;AAAA,MAWIC,qBAXJ,yBAWIA,qBAXJ;AAAA,MAYIC,OAZJ,yBAYIA,OAZJ;AAAA,MAaIC,MAbJ,yBAaIA,MAbJ;AAAA,MAcIC,SAdJ,yBAcIA,SAdJ;;AAiBA,MAAMC,gBAAgB,GAAGlC,WAAW,CAChCjB,QAAQ,CAAC,UAAAoD,WAAW,EAAI;AACpB,QAAIA,WAAW,CAACC,GAAZ,GAAkB,GAAtB,EAA2B;AACvBT,MAAAA,QAAQ;AACX;AACJ,GAJO,EAIL,GAJK,CADwB,EAMhC,CAACF,IAAD,CANgC,CAApC;AASA,MAAMY,2BAA2B,GAAGvD,OAAO,CACvC;AAAA,wBACI,oBAAC,MAAD,CAAQ,oBAAR,qBACI,oBAAC,IAAD;AACI,MAAA,IAAI,EAAE+C,kBADV;AAEI,MAAA,QAAQ,EAAE,wBAAsB;AAAA,YAAnBS,MAAmB,QAAnBA,MAAmB;AAAA,YAAXC,IAAW,QAAXA,IAAW;AAC5BT,QAAAA,qBAAqB,CAAC,UAAAU,SAAS;AAAA,iDAAUA,SAAV;AAAqBD,YAAAA,IAAI,EAAJA,IAArB;AAA2BD,YAAAA,MAAM,EAANA;AAA3B;AAAA,SAAV,CAArB;AACH;AAJL,OAMK;AAAA,UAAGG,IAAH,SAAGA,IAAH;AAAA,0BACG,oBAAC,IAAD,qBACI,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAE;AAAZ,sBACI,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAE;AAAZ,sBACI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAEvC,CAAF;AAAb,SACK6B,OAAO,CAACW,GAAR,CAAY,iBAAsB;AAAA,YAAnBC,KAAmB,SAAnBA,KAAmB;AAAA,YAAZC,KAAY,SAAZA,KAAY;AAC/B,4BACI;AAAQ,UAAA,GAAG,EAAED,KAAb;AAAoB,UAAA,KAAK,EAAEC;AAA3B,WACKD,KADL,CADJ;AAKH,OANA,CADL,CADJ,CADJ,CADJ,eAcI,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAE;AAAZ,sBACI,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAE;AAAZ,sBACI,oBAAC,MAAD;AACI,QAAA,KAAK,EAAEzC,CAAF,uFADT;AAEI,QAAA,WAAW,EAAE;AAFjB,sBAII;AAAQ,QAAA,KAAK,EAAE;AAAf,SAAuBA,CAAvB,2EAJJ,eAKI;AAAQ,QAAA,KAAK,EAAE;AAAf,SAAyBA,CAAzB,6EALJ,eAMI;AAAQ,QAAA,KAAK,EAAE;AAAf,SAA6BA,CAA7B,iFANJ,eAOI;AAAQ,QAAA,KAAK,EAAE;AAAf,SAA+BA,CAA/B,mFAPJ,eAQI;AACI,QAAA,KAAK,EAAE;AADX,SAEEA,CAFF,wFARJ,eAWI;AACI,QAAA,KAAK,EAAE;AADX,SAEEA,CAFF,yFAXJ,CADJ,CADJ,CAdJ,CADH;AAAA,KANL,CADJ,CADJ;AAAA,GADuC,EAgDvC,CAAC2B,kBAAD,CAhDuC,CAA3C;AAmDA,sBACI,oBAAC,MAAD,CAAQ,QAAR;AACI,IAAA,OAAO,EAAEP,OADb;AAEI,IAAA,IAAI,EAAEG,IAFV;AAGI,IAAA,KAAK,eACD,kCACKvC,SAAS,CAACkC,YAAY,CAACyB,IAAd,CADd,eAEI,+BAFJ,eAGI,oBAAC,UAAD;AAAY,MAAA,GAAG,EAAE;AAAjB,oBACI,oBAAC,OAAD,sBAAoBzB,YAAY,CAAC0B,OAAjC,CADJ,CAHJ,CAJR;AAYI,IAAA,OAAO,EACHvB,SAAS,gBACL,oBAAC,eAAD;AAAiB,qBAAY,mBAA7B;AAAiD,MAAA,OAAO,EAAEC;AAA1D,oBACI,oBAAC,UAAD;AAAY,MAAA,IAAI,eAAE,oBAAC,OAAD;AAAlB,MADJ,OACuCtB,CADvC,iFADK,GAIL,IAjBZ;AAmBI,IAAA,MAAM,eACF,oBAAC,QAAD;AACI,MAAA,KAAK,EAAE8B,MADX;AAEI,MAAA,QAAQ,EAAEC,SAFd;AAGI,MAAA,gBAAgB,EAAE/B,CAAC,uFAAD,CAAkB;AAAE6C,QAAAA,KAAK,EAAE7D,SAAS,CAACkC,YAAY,CAACyB,IAAd;AAAlB,OAAlB;AAHtB,MApBR;AA0BI,IAAA,YAAY,EAAER,2BA1BlB;AA2BI,IAAA,kBAAkB,eACd,oBAAC,MAAD,CAAQ,0BAAR;AACI,MAAA,IAAI,eAAE,oBAAC,UAAD,OADV;AAEI,qBAAa;AAFjB;AA5BR,KAkCK;AAAA,QAAGZ,IAAH,SAAGA,IAAH;AAAA,wBACG,uDACI,oBAAC,SAAD;AACI,qBAAY,mBADhB;AAEI,MAAA,aAAa,EAAE,uBAAAU,WAAW;AAAA,eAAID,gBAAgB,CAACC,WAAD,CAApB;AAAA;AAF9B,OAIKV,IAAI,CAACiB,GAAL,CAAS,UAAAM,IAAI;AAAA,0BACV,oBAAC,MAAD,CAAQ,QAAR;AACI,QAAA,GAAG,EAAEA,IAAI,CAACC,EADd;AAEI,QAAA,SAAS,EAAEhC,iBAFf;AAGI,QAAA,QAAQ,EAAE+B,IAAI,CAACC,EAAL,KAAY5B;AAH1B,sBAKI,oBAAC,MAAD,CAAQ,YAAR;AAAqB,QAAA,OAAO,EAAEK,SAAS,CAACsB,IAAD;AAAvC,SACKA,IAAI,CAACE,IAAL,CAAUH,KAAV,IAAmB,UADxB,eAEI,oBAAC,MAAD,CAAQ,qBAAR,QACK7C,CAAC,+FAAD,CAA0B;AACvBiD,QAAAA,IAAI,eAAE,oBAAC,OAAD;AAAS,UAAA,QAAQ,EAAEH,IAAI,CAACI;AAAxB;AADiB,OAA1B,CADL,CAFJ,CALJ,eAcI,oBAAC,MAAD,CAAQ,YAAR;AAAqB,QAAA,SAAS,EAAEhD;AAAhC,sBACI,oBAAC,UAAD;AAAY,QAAA,GAAG,EAAE;AAAjB,SACKL,YAAY,CAACiD,IAAI,CAACE,IAAL,CAAUZ,MAAX,CADjB,SACwCU,IAAI,CAACE,IAAL,CAAUG,OADlD,MADJ,CAdJ,CADU;AAAA,KAAb,CAJL,CADJ,EA4BKzB,eAAe,iBACZ,oBAAC,mBAAD,qBACI,oBAAC,UAAD;AAAY,MAAA,GAAG,EAAE;AAAjB,OAA8B1B,CAA9B,iGADJ,CA7BR,CADH;AAAA,GAlCL,CADJ;AAyEH,CAvJD;;AAyJA,eAAeiB,kBAAf","sourcesContent":["import React, { useMemo } from \"react\";\nimport debounce from \"lodash/debounce\";\nimport { css } from \"emotion\";\nimport TimeAgo from \"timeago-react\";\nimport pluralize from \"pluralize\";\nimport styled from \"@emotion/styled\";\nimport { i18n } from \"@webiny/app/i18n\";\nimport { Form } from \"@webiny/form\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport * as UIList from \"@webiny/ui/List\";\nimport { ButtonIcon, ButtonSecondary } from \"@webiny/ui/Button\";\nimport { Cell, Grid } from \"@webiny/ui/Grid\";\nimport { Select } from \"@webiny/ui/Select\";\nimport { Scrollbar } from \"@webiny/ui/Scrollbar\";\nimport { ReactComponent as AddIcon } from \"@webiny/app-admin/assets/icons/add-18px.svg\";\nimport { ReactComponent as FilterIcon } from \"@webiny/app-admin/assets/icons/filter-24px.svg\";\nimport SearchUI from \"@webiny/app-admin/components/SearchUI\";\nimport statusLabels from \"../../constants/statusLabels\";\nimport { useCallback } from \"react\";\nimport { useContentEntriesList } from \"~/admin/views/contentEntries/hooks/useContentEntriesList\";\n\nconst t = i18n.ns(\"app-headless-cms/admin/contents/data-list\");\n\nconst rightAlign = css({\n    alignItems: \"flex-end !important\",\n    justifyContent: \"center !important\"\n});\n\nconst ModelId = styled(\"span\")({\n    color: \"var(--mdc-theme-text-secondary-on-background)\"\n});\n\nconst InlineLoaderWrapper = styled(\"div\")({\n    position: \"absolute\",\n    bottom: 0,\n    left: 0,\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"100%\",\n    height: 40,\n    backgroundColor: \"var(--mdc-theme-surface)\"\n});\n\nconst listItemMinHeight = css({\n    minHeight: \"66px !important\"\n});\n\nconst ContentEntriesList = () => {\n    const {\n        contentModel,\n        entryId,\n        loading,\n        canCreate,\n        onCreate,\n        data,\n        editEntry,\n        loadMore,\n        loadMoreLoading,\n        listQueryVariables,\n        setListQueryVariables,\n        sorters,\n        filter,\n        setFilter\n    } = useContentEntriesList();\n\n    const loadMoreOnScroll = useCallback(\n        debounce(scrollFrame => {\n            if (scrollFrame.top > 0.9) {\n                loadMore();\n            }\n        }, 500),\n        [data]\n    );\n\n    const entriesDataListModalOverlay = useMemo(\n        () => (\n            <UIList.DataListModalOverlay>\n                <Form\n                    data={listQueryVariables}\n                    onChange={({ status, sort }) => {\n                        setListQueryVariables(prevState => ({ ...prevState, sort, status }));\n                    }}\n                >\n                    {({ Bind }) => (\n                        <Grid>\n                            <Cell span={12}>\n                                <Bind name={\"sort\"}>\n                                    <Select label={t`Sort by`}>\n                                        {sorters.map(({ label, value }) => {\n                                            return (\n                                                <option key={label} value={value}>\n                                                    {label}\n                                                </option>\n                                            );\n                                        })}\n                                    </Select>\n                                </Bind>\n                            </Cell>\n                            <Cell span={12}>\n                                <Bind name={\"status\"}>\n                                    <Select\n                                        label={t`Filter by status`}\n                                        description={\"Filter by a specific page status.\"}\n                                    >\n                                        <option value={\"all\"}>{t`All`}</option>\n                                        <option value={\"draft\"}>{t`Draft`}</option>\n                                        <option value={\"published\"}>{t`Published`}</option>\n                                        <option value={\"unpublished\"}>{t`Unpublished`}</option>\n                                        <option\n                                            value={\"reviewRequested\"}\n                                        >{t`Review requested`}</option>\n                                        <option\n                                            value={\"changesRequested\"}\n                                        >{t`Changes requested`}</option>\n                                    </Select>\n                                </Bind>\n                            </Cell>\n                        </Grid>\n                    )}\n                </Form>\n            </UIList.DataListModalOverlay>\n        ),\n        [listQueryVariables]\n    );\n\n    return (\n        <UIList.DataList\n            loading={loading}\n            data={data}\n            title={\n                <span>\n                    {pluralize(contentModel.name)}\n                    <br />\n                    <Typography use={\"subtitle1\"}>\n                        <ModelId>Model ID: {contentModel.modelId}</ModelId>\n                    </Typography>\n                </span>\n            }\n            actions={\n                canCreate ? (\n                    <ButtonSecondary data-testid=\"new-record-button\" onClick={onCreate}>\n                        <ButtonIcon icon={<AddIcon />} /> {t`New Entry`}\n                    </ButtonSecondary>\n                ) : null\n            }\n            search={\n                <SearchUI\n                    value={filter}\n                    onChange={setFilter}\n                    inputPlaceholder={t`Search {title}`({ title: pluralize(contentModel.name) })}\n                />\n            }\n            modalOverlay={entriesDataListModalOverlay}\n            modalOverlayAction={\n                <UIList.DataListModalOverlayAction\n                    icon={<FilterIcon />}\n                    data-testid={\"default-data-list.filter\"}\n                />\n            }\n        >\n            {({ data }) => (\n                <>\n                    <Scrollbar\n                        data-testid=\"default-data-list\"\n                        onScrollFrame={scrollFrame => loadMoreOnScroll(scrollFrame)}\n                    >\n                        {data.map(item => (\n                            <UIList.ListItem\n                                key={item.id}\n                                className={listItemMinHeight}\n                                selected={item.id === entryId}\n                            >\n                                <UIList.ListItemText onClick={editEntry(item)}>\n                                    {item.meta.title || \"Untitled\"}\n                                    <UIList.ListItemTextSecondary>\n                                        {t`Last modified: {time}.`({\n                                            time: <TimeAgo datetime={item.savedOn} />\n                                        })}\n                                    </UIList.ListItemTextSecondary>\n                                </UIList.ListItemText>\n\n                                <UIList.ListItemMeta className={rightAlign}>\n                                    <Typography use={\"subtitle2\"}>\n                                        {statusLabels[item.meta.status]} (v{item.meta.version})\n                                    </Typography>\n                                </UIList.ListItemMeta>\n                            </UIList.ListItem>\n                        ))}\n                    </Scrollbar>\n                    {loadMoreLoading && (\n                        <InlineLoaderWrapper>\n                            <Typography use={\"overline\"}>{t`Loading more entries...`}</Typography>\n                        </InlineLoaderWrapper>\n                    )}\n                </>\n            )}\n        </UIList.DataList>\n    );\n};\n\nexport default ContentEntriesList;\n"],"file":"ContentEntriesList.js"}