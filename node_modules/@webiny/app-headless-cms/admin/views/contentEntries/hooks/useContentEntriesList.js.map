{"version":3,"sources":["../../../../../src/admin/views/contentEntries/hooks/useContentEntriesList.ts"],"names":["useCallback","useEffect","useMemo","useState","get","set","unset","cloneDeep","debounce","useRouter","createListQuery","useQuery","useContentEntries","useContentEntriesList","contentModel","listQueryVariables","setListQueryVariables","sorters","canCreate","loadMoreLoading","setLoadMoreLoading","filter","setFilter","history","baseUrl","modelId","query","URLSearchParams","location","search","entryId","searchQuery","updateSearch","searchField","titleFieldId","prev","next","push","toString","LIST_QUERY","variables","data","loading","fetchMore","onCreate","filterByStatus","entries","status","item","meta","loadMore","hasMoreItems","after","cursor","updateQuery","fetchMoreResult","content","editEntry","entry","encodeURIComponent","id"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport get from \"lodash/get\";\nimport set from \"lodash/set\";\nimport unset from \"lodash/unset\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport debounce from \"lodash/debounce\";\nimport { useRouter } from \"@webiny/react-router\";\nimport { createListQuery } from \"~/admin/graphql/contentEntries\";\nimport { useQuery } from \"~/admin/hooks\";\nimport { useContentEntries } from \"./useContentEntries\";\nimport { CmsEditorContentEntry } from \"~/types\";\n\nexport function useContentEntriesList() {\n    const { contentModel, listQueryVariables, setListQueryVariables, sorters, canCreate } =\n        useContentEntries();\n\n    const [loadMoreLoading, setLoadMoreLoading] = useState(false);\n    const [filter, setFilter] = useState(\"\");\n\n    const { history } = useRouter();\n    const baseUrl = `/cms/content-entries/${contentModel.modelId}`;\n\n    // Get entry ID and search query (if any)\n    const query = new URLSearchParams(location.search);\n    const entryId = query.get(\"id\");\n    const searchQuery = query.get(\"search\");\n    const updateSearch = useCallback(\n        debounce(({ filter, query }) => {\n            const search = query.get(\"search\");\n            if (typeof search !== \"string\" && !filter) {\n                return;\n            }\n\n            // We use the title field with the \"contains\" operator for doing basic searches.\n            const searchField = contentModel.titleFieldId + \"_contains\";\n            setListQueryVariables(prev => {\n                const next = cloneDeep(prev);\n                if (filter) {\n                    set(next, `where.${searchField}`, filter);\n                } else {\n                    unset(next, `where.${searchField}`);\n                }\n\n                return next;\n            });\n\n            if (search !== filter) {\n                query.set(\"search\", filter);\n                history.push(`${baseUrl}?${query.toString()}`);\n            }\n        }, 250),\n        [baseUrl]\n    );\n\n    // Set \"filter\" from search \"query\" on page load.\n    useEffect(() => {\n        if (searchQuery) {\n            setFilter(searchQuery);\n        }\n    }, [baseUrl, searchQuery]);\n\n    // When filter changes, run GQL query\n    useEffect(() => updateSearch({ filter, query }), [baseUrl, filter]);\n\n    // Generate a query based on current content model\n    const LIST_QUERY = useMemo(() => createListQuery(contentModel), [contentModel.modelId]);\n    const { data, loading, fetchMore } = useQuery(LIST_QUERY, { variables: listQueryVariables });\n\n    const onCreate = useCallback(() => {\n        history.push(`/cms/content-entries/${contentModel.modelId}?new=true`);\n    }, [contentModel]);\n\n    const filterByStatus = useCallback((entries, status) => {\n        if (!status || status === \"all\") {\n            return entries;\n        }\n        return entries.filter(item => item.meta.status === status);\n    }, []);\n\n    // Load more entries on scroll\n    const loadMore = useCallback(() => {\n        const meta = get(data, \"content.meta\", {});\n        if (meta.hasMoreItems) {\n            setLoadMoreLoading(true);\n            fetchMore({\n                variables: { after: meta.cursor },\n                updateQuery: (prev, { fetchMoreResult }) => {\n                    if (!fetchMoreResult) {\n                        return prev;\n                    }\n\n                    const next = { ...fetchMoreResult };\n\n                    next.content.data = [...prev.content.data, ...fetchMoreResult.content.data];\n                    setLoadMoreLoading(false);\n                    return next;\n                }\n            });\n        }\n    }, [data]);\n\n    const editEntry = useCallback(\n        (entry: CmsEditorContentEntry) => () => {\n            history.push(\n                `/cms/content-entries/${contentModel.modelId}?id=${encodeURIComponent(entry.id)}`\n            );\n        },\n        [contentModel.modelId]\n    );\n\n    return {\n        contentModel,\n        listQueryVariables,\n        setListQueryVariables,\n        sorters,\n        entryId,\n        loading,\n        data: filterByStatus(get(data, \"content.data\", []), listQueryVariables.status),\n        loadMore,\n        loadMoreLoading,\n        canCreate,\n        onCreate,\n        filter,\n        setFilter,\n        editEntry\n    };\n}\n"],"file":"useContentEntriesList.js"}