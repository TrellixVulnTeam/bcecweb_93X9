import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2;

import React from "react";
import { css } from "emotion";
import styled from "@emotion/styled";
import EmptyView from "@webiny/app-admin/components/EmptyView";
import { ButtonDefault, ButtonIcon } from "@webiny/ui/Button";
import { ReactComponent as AddIcon } from "@svgr/webpack!@webiny/app-admin/assets/icons/add-18px.svg";
import { i18n } from "@webiny/app/i18n";
import { Tab, Tabs } from "@webiny/ui/Tabs";
import { Elevation } from "@webiny/ui/Elevation";
import { CircularProgress } from "@webiny/ui/Progress";
import RevisionsList from "./ContentEntry/RevisionsList";
import Header from "./ContentEntry/header/Header";
import { useContentEntry } from "./hooks/useContentEntry";
import { ContentEntryForm } from "../../components/ContentEntryForm/ContentEntryForm";
var t = i18n.namespace("app-headless-cms/admin/content-model-entries/details");
var DetailsContainer = /*#__PURE__*/styled("div", {
  target: "e68rq0j0",
  label: "DetailsContainer"
})({
  height: "calc(100% - 10px)",
  overflow: "hidden",
  position: "relative",
  nav: {
    backgroundColor: "var(--mdc-theme-surface)"
  }
});
var RenderBlock = /*#__PURE__*/styled("div", {
  target: "e68rq0j1",
  label: "RenderBlock"
})({
  position: "relative",
  zIndex: 0,
  backgroundColor: "var(--mdc-theme-background)",
  height: "100%",

  /*overflow: "scroll",*/
  padding: 25
});
var elevationStyles = /*#__PURE__*/css({
  position: "relative"
}, "label:elevationStyles;");

var ContentEntry = function ContentEntry() {
  var _useContentEntry = useContentEntry(),
      contentModel = _useContentEntry.contentModel,
      loading = _useContentEntry.loading,
      entry = _useContentEntry.entry,
      showEmptyView = _useContentEntry.showEmptyView,
      canCreate = _useContentEntry.canCreate,
      createEntry = _useContentEntry.createEntry,
      setTabsRef = _useContentEntry.setTabsRef,
      setFormRef = _useContentEntry.setFormRef; // Render "No content selected" view.


  if (showEmptyView) {
    return /*#__PURE__*/React.createElement(EmptyView, {
      title: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Click on the left side list to display entry details {message}"])))({
        message: canCreate ? "or create a..." : ""
      }),
      action: canCreate ? /*#__PURE__*/React.createElement(ButtonDefault, {
        "data-testid": "new-record-button",
        onClick: createEntry
      }, /*#__PURE__*/React.createElement(ButtonIcon, {
        icon: /*#__PURE__*/React.createElement(AddIcon, null)
      }), " ", t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["New Entry"])))) : null
    });
  }

  return /*#__PURE__*/React.createElement(DetailsContainer, null, /*#__PURE__*/React.createElement("test-id", {
    "data-testid": "cms-content-details"
  }, /*#__PURE__*/React.createElement(Tabs, {
    ref: function ref(tabs) {
      return setTabsRef(tabs);
    }
  }, /*#__PURE__*/React.createElement(Tab, {
    label: "Content",
    disabled: loading,
    "data-testid": "cms.content-form.tabs.content"
  }, /*#__PURE__*/React.createElement(RenderBlock, null, /*#__PURE__*/React.createElement(Elevation, {
    z: 2,
    className: elevationStyles
  }, loading && /*#__PURE__*/React.createElement(CircularProgress, null), /*#__PURE__*/React.createElement(Header, null), /*#__PURE__*/React.createElement(ContentEntryForm, {
    contentModel: contentModel,
    entry: entry,
    onForm: function onForm(form) {
      return setFormRef(form);
    }
  })))), /*#__PURE__*/React.createElement(Tab, {
    label: "Revisions",
    disabled: loading,
    "data-testid": "cms.content-form.tabs.revisions"
  }, /*#__PURE__*/React.createElement(RevisionsList, null)))));
};

export default ContentEntry;
//# sourceMappingURL=ContentEntry.js.map