{"version":3,"sources":["../../../../../src/admin/views/contentEntries/ContentEntry/cache.ts"],"names":["dotProp","orderBy","GQL","sortEntries","list","sort","split","key","value","order","toLowerCase","addEntryToListCache","model","cache","entry","variables","gqlParams","query","createListQuery","readQuery","content","data","writeQuery","updateLatestRevisionInListCache","revision","id","uniqueId","index","findIndex","item","startsWith","set","removeEntryFromListCache","entryId","delete","removeRevisionFromEntryCache","createRevisionsQuery","revisions","newRevisions","addRevisionToRevisionsCache","unpublishPreviouslyPublishedRevision","publishedId","prevPublished","meta","status"],"mappings":"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","sourcesContent":["import dotProp from \"dot-prop-immutable\";\nimport orderBy from \"lodash/orderBy\";\nimport { CmsEditorContentEntry } from \"~/types\";\nimport * as GQL from \"~/admin/graphql/contentEntries\";\n\n/*\n * We need to preserve the order of entries with new entry addition\n * because we're not re-fetching the list but updating it directly inside cache.\n * */\nconst sortEntries = (list, sort) => {\n    if (!sort || typeof sort !== \"string\") {\n        return list;\n    }\n    const [key, value] = sort.split(\"_\");\n    const order = value.toLowerCase() as \"asc\" | \"desc\";\n    return orderBy(list, [key], [order]);\n};\n\nexport const addEntryToListCache = (model, cache, entry: CmsEditorContentEntry, variables) => {\n    const gqlParams = { query: GQL.createListQuery(model), variables };\n    const { content } = cache.readQuery(gqlParams);\n    if (!content || !content.data) {\n        return;\n    }\n    cache.writeQuery({\n        ...gqlParams,\n        data: {\n            content: {\n                ...content,\n                data: sortEntries([entry, ...content.data], variables.sort)\n            }\n        }\n    });\n};\n\nexport const updateLatestRevisionInListCache = (model, cache, revision, variables) => {\n    const gqlParams = { query: GQL.createListQuery(model), variables };\n\n    const [uniqueId] = revision.id.split(\"#\");\n\n    const { content } = cache.readQuery(gqlParams);\n    if (!content || !content.data) {\n        return;\n    }\n    const index = content.data.findIndex(item => item.id.startsWith(uniqueId));\n    if (index === -1) {\n        return;\n    }\n\n    cache.writeQuery({\n        ...gqlParams,\n        data: {\n            content: dotProp.set(content, `data.${index}`, revision)\n        }\n    });\n};\n\nexport const removeEntryFromListCache = (model, cache, revision, variables) => {\n    // Delete the item from list cache\n    const gqlParams = { query: GQL.createListQuery(model), variables };\n    const { content } = cache.readQuery(gqlParams);\n    if (!content || !content.data) {\n        return;\n    }\n    const entryId = revision.id.split(\"#\")[0];\n    const index = content.data.findIndex(item => item.id.startsWith(entryId));\n    if (index === -1) {\n        return;\n    }\n\n    cache.writeQuery({\n        ...gqlParams,\n        data: {\n            content: dotProp.delete(content, `data.${index}`)\n        }\n    });\n};\n\nexport const removeRevisionFromEntryCache = (model, cache, revision) => {\n    const gqlParams = {\n        query: GQL.createRevisionsQuery(model),\n        variables: { id: revision.id.split(\"#\")[0] }\n    };\n\n    const { revisions } = cache.readQuery(gqlParams);\n    if (!revisions || !revisions.data) {\n        return;\n    }\n    const index = revisions.data.findIndex(item => item.id === revision.id);\n    const newRevisions = dotProp.delete(revisions, `data.${index}`);\n\n    cache.writeQuery({\n        ...gqlParams,\n        data: {\n            revisions: newRevisions\n        }\n    });\n\n    // Return new revisions\n    return newRevisions.data;\n};\n\nexport const addRevisionToRevisionsCache = (model, cache, revision) => {\n    const gqlParams = {\n        query: GQL.createRevisionsQuery(model),\n        variables: { id: revision.id.split(\"#\")[0] }\n    };\n\n    const { revisions } = cache.readQuery(gqlParams);\n\n    if (!revisions || !revisions.data) {\n        return;\n    }\n\n    cache.writeQuery({\n        ...gqlParams,\n        data: {\n            revisions: dotProp.set(revisions, `data`, [revision, ...revisions.data])\n        }\n    });\n};\n\nexport const unpublishPreviouslyPublishedRevision = (model, cache, publishedId) => {\n    const gqlParams = {\n        query: GQL.createRevisionsQuery(model),\n        variables: { id: publishedId.split(\"#\")[0] }\n    };\n\n    const { revisions } = cache.readQuery(gqlParams);\n\n    if (!revisions || !revisions.data) {\n        return;\n    }\n\n    const prevPublished = revisions.data.findIndex(\n        item => item.id !== publishedId && item.meta.status === \"published\"\n    );\n\n    if (prevPublished === -1) {\n        return;\n    }\n\n    cache.writeQuery({\n        ...gqlParams,\n        data: {\n            revisions: dotProp.set(revisions, `data.${prevPublished}.meta.status`, \"unpublished\")\n        }\n    });\n};\n"],"file":"cache.js"}