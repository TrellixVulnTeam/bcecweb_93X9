{"version":3,"sources":["../../../../../src/admin/views/contentEntries/ContentEntry/useRevision.tsx"],"names":["React","useMemo","useRouter","useHandlers","useSnackbar","GQL","GQLCache","useApolloClient","useContentEntry","useRevision","revision","contentModel","entry","setLoading","listQueryVariables","history","showSnackbar","client","modelId","CREATE_REVISION","createCreateFromMutation","DELETE_REVISION","createDeleteMutation","PUBLISH_REVISION","createPublishMutation","UNPUBLISH_REVISION","createUnpublishMutation","REQUEST_REVIEW","createRequestReviewMutation","REQUEST_CHANGES","createRequestChangesMutation","createRevision","mutate","mutation","variables","id","update","cache","data","newRevision","content","updateLatestRevisionInListCache","addRevisionToRevisionsCache","res","error","message","push","encodeURIComponent","editRevision","deleteRevision","revisions","removeRevisionFromEntryCache","publishRevision","published","unpublishPreviouslyPublishedRevision","meta","version","unpublishRevision","requestReview","requestChanges"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,WAAT,QAA4B,+BAA5B;AACA,SAASC,WAAT,QAA4B,qCAA5B;AAEA,OAAO,KAAKC,GAAZ;AACA,OAAO,KAAKC,QAAZ;AACA,SAASC,eAAT;AACA,SAASC,eAAT;AAMA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAoC;AAAA,MAAjCC,QAAiC,QAAjCA,QAAiC;;AAC3D,yBAAgEF,eAAe,EAA/E;AAAA,MAAQG,YAAR,oBAAQA,YAAR;AAAA,MAAsBC,KAAtB,oBAAsBA,KAAtB;AAAA,MAA6BC,UAA7B,oBAA6BA,UAA7B;AAAA,MAAyCC,kBAAzC,oBAAyCA,kBAAzC;;AAEA,mBAAoBZ,SAAS,EAA7B;AAAA,MAAQa,OAAR,cAAQA,OAAR;;AACA,qBAAyBX,WAAW,EAApC;AAAA,MAAQY,YAAR,gBAAQA,YAAR;;AACA,MAAMC,MAAM,GAAGV,eAAe,EAA9B;AACA,MAAQW,OAAR,GAAoBP,YAApB,CAAQO,OAAR;;AAEA,iBAOIjB,OAAO,CAAC,YAAM;AACd,WAAO;AACHkB,MAAAA,eAAe,EAAEd,GAAG,CAACe,wBAAJ,CAA6BT,YAA7B,CADd;AAEHU,MAAAA,eAAe,EAAEhB,GAAG,CAACiB,oBAAJ,CAAyBX,YAAzB,CAFd;AAGHY,MAAAA,gBAAgB,EAAElB,GAAG,CAACmB,qBAAJ,CAA0Bb,YAA1B,CAHf;AAIHc,MAAAA,kBAAkB,EAAEpB,GAAG,CAACqB,uBAAJ,CAA4Bf,YAA5B,CAJjB;AAKHgB,MAAAA,cAAc,EAAEtB,GAAG,CAACuB,2BAAJ,CAAgCjB,YAAhC,CALb;AAMHkB,MAAAA,eAAe,EAAExB,GAAG,CAACyB,4BAAJ,CAAiCnB,YAAjC;AANd,KAAP;AAQH,GATU,EASR,CAACO,OAAD,CATQ,CAPX;AAAA,MACIC,eADJ,YACIA,eADJ;AAAA,MAEIE,eAFJ,YAEIA,eAFJ;AAAA,MAGIE,gBAHJ,YAGIA,gBAHJ;AAAA,MAIIE,kBAJJ,YAIIA,kBAJJ;AAAA,MAKIE,cALJ,YAKIA,cALJ;AAAA,MAMIE,eANJ,YAMIA,eANJ;;AAkBA,qBAQI1B,WAAW,CACX;AAAES,IAAAA,KAAK,EAALA;AAAF,GADW,EAEX;AACImB,IAAAA,cAAc,EAAE;AAAA,mFAAM;AAAA;;AAAA;AAAA;AAAA;AAAA;AAClBlB,gBAAAA,UAAU,CAAC,IAAD,CAAV;AADkB;AAAA,uBAEUI,MAAM,CAACe,MAAP,CAAc;AACtCC,kBAAAA,QAAQ,EAAEd,eAD4B;AAEtCe,kBAAAA,SAAS,EAAE;AAAExB,oBAAAA,QAAQ,EAAEA,QAAQ,CAACyB;AAArB,mBAF2B;AAGtCC,kBAAAA,MAHsC,kBAG/BC,KAH+B,SAGd;AAAA,wBAARC,IAAQ,SAARA,IAAQ;AACpB,wBAAMC,WAAW,GAAGD,IAAI,CAACE,OAAL,CAAaF,IAAjC;AAEAhC,oBAAAA,QAAQ,CAACmC,+BAAT,CACI9B,YADJ,EAEI0B,KAFJ,EAGIE,WAHJ,EAIIzB,kBAJJ;AAMAR,oBAAAA,QAAQ,CAACoC,2BAAT,CAAqC/B,YAArC,EAAmD0B,KAAnD,EAA0DE,WAA1D;AACH;AAbqC,iBAAd,CAFV;;AAAA;AAAA;AAEJI,gBAAAA,GAFI,wBAEVL,IAFU;AAkBlBzB,gBAAAA,UAAU,CAAC,KAAD,CAAV;AAlBkB,+BAoBM8B,GAAG,CAACH,OApBV,EAoBVF,IApBU,gBAoBVA,IApBU,EAoBJM,KApBI,gBAoBJA,KApBI;;AAAA,qBAsBdA,KAtBc;AAAA;AAAA;AAAA;;AAAA,iDAuBP5B,YAAY,CAAC4B,KAAK,CAACC,OAAP,CAvBL;;AAAA;AA0BlB9B,gBAAAA,OAAO,CAAC+B,IAAR,gCAAqC5B,OAArC,iBAAmD6B,kBAAkB,CAACT,IAAI,CAACH,EAAN,CAArE;;AA1BkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAN;AAAA,KADpB;AA6BIa,IAAAA,YAAY,EAAE;AAAA,aAAM,YAAM;AACtBjC,QAAAA,OAAO,CAAC+B,IAAR,gCAC4B5B,OAD5B,kBAC2C6B,kBAAkB,CAACrC,QAAQ,CAACyB,EAAV,CAD7D;AAGH,OAJa;AAAA,KA7BlB;AAkCIc,IAAAA,cAAc,EACV;AAAA,UAAGrC,KAAH,SAAGA,KAAH;AAAA,mFACA;AAAA;AAAA;AAAA;AAAA;AACIC,gBAAAA,UAAU,CAAC,IAAD,CAAV;AADJ;AAAA,uBAEUI,MAAM,CAACe,MAAP,CAAc;AAChBC,kBAAAA,QAAQ,EAAEZ,eADM;AAEhBa,kBAAAA,SAAS,EAAE;AAAExB,oBAAAA,QAAQ,EAAEA,QAAQ,CAACyB;AAArB,mBAFK;AAGhBC,kBAAAA,MAAM,EAAE,gBAACC,KAAD,SAAqB;AAAA,wBAAXC,IAAW,SAAXA,IAAW;AACzB,wBAAQM,KAAR,GAAkBN,IAAI,CAACE,OAAvB,CAAQI,KAAR;;AACA,wBAAIA,KAAJ,EAAW;AACP,6BAAO5B,YAAY,CAAC4B,KAAK,CAACC,OAAP,CAAnB;AACH,qBAJwB,CAMzB;;;AAAA;AACA,wBAAMK,SAAS,GAAG5C,QAAQ,CAAC6C,4BAAT,CACdxC,YADc,EAEd0B,KAFc,EAGd3B,QAHc,CAAlB;;AAMA,wBAAIA,QAAQ,CAACyB,EAAT,KAAgBvB,KAAK,CAACuB,EAA1B,EAA8B;AAC1B7B,sBAAAA,QAAQ,CAACmC,+BAAT,CACI9B,YADJ,EAEI0B,KAFJ,EAGIa,SAAS,CAAC,CAAD,CAHb,EAIIpC,kBAJJ,EAD0B,CAO1B;;AAAA;AACA,6BAAOC,OAAO,CAAC+B,IAAR,CACH,+BAAwB5B,OAAxB,YACI6B,kBAAkB,CAACG,SAAS,CAAC,CAAD,CAAT,CAAaf,EAAd,CAFnB,CAAP;AAIH;AACJ;AA7Be,iBAAd,CAFV;;AAAA;AAkCItB,gBAAAA,UAAU,CAAC,KAAD,CAAV;;AAlCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADA;AAAA,KAnCR;AAwEIuC,IAAAA,eAAe,EAAE;AAAA;AAAA,6EAAM,kBAAMjB,EAAN;AAAA;AAAA;AAAA;AAAA;AACnBtB,kBAAAA,UAAU,CAAC,IAAD,CAAV;AADmB;AAAA,yBAEbI,MAAM,CAACe,MAAP,CAAc;AAChBC,oBAAAA,QAAQ,EAAEV,gBADM;AAEhBW,oBAAAA,SAAS,EAAE;AAAExB,sBAAAA,QAAQ,EAAEyB,EAAE,IAAIzB,QAAQ,CAACyB;AAA3B,qBAFK;AAGhBC,oBAAAA,MAHgB,kBAGTC,KAHS,SAGQ;AAAA,0BAARC,IAAQ,SAARA,IAAQ;AACpB,0CAAmCA,IAAI,CAACE,OAAxC;AAAA,0BAAca,SAAd,iBAAQf,IAAR;AAAA,0BAAyBM,KAAzB,iBAAyBA,KAAzB;;AACA,0BAAIA,KAAJ,EAAW;AACP,+BAAO5B,YAAY,CAAC4B,KAAK,CAACC,OAAP,CAAnB;AACH;;AAEDvC,sBAAAA,QAAQ,CAACgD,oCAAT,CACI3C,YADJ,EAEI0B,KAFJ,EAGIgB,SAAS,CAAClB,EAHd;AAMAnB,sBAAAA,YAAY,eACR,qEACoC,GADpC,eAEI,yCAAUqC,SAAS,CAACE,IAAV,CAAeC,OAAzB,CAFJ,MADQ,CAAZ;AAMH;AArBe,mBAAd,CAFa;;AAAA;AA0BnB3C,kBAAAA,UAAU,CAAC,KAAD,CAAV;;AA1BmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAN;;AAAA;AAAA;AAAA;AAAA;AAAA,KAxErB;AAoGI4C,IAAAA,iBAAiB,EAAE;AAAA,mFAAM;AAAA;;AAAA;AAAA;AAAA;AAAA;AACrB5C,gBAAAA,UAAU,CAAC,IAAD,CAAV;AADqB;AAAA,uBAEEI,MAAM,CAACe,MAAP,CAAc;AACjCC,kBAAAA,QAAQ,EAAER,kBADuB;AAEjCS,kBAAAA,SAAS,EAAE;AAAExB,oBAAAA,QAAQ,EAAEA,QAAQ,CAACyB;AAArB;AAFsB,iBAAd,CAFF;;AAAA;AAAA;AAEbG,gBAAAA,IAFa,yBAEbA,IAFa;AAOrBzB,gBAAAA,UAAU,CAAC,KAAD,CAAV;AAEQ+B,gBAAAA,KATa,GASHN,IAAI,CAACE,OATF,CASbI,KATa;;AAAA,qBAUjBA,KAViB;AAAA;AAAA;AAAA;;AAAA,kDAWV5B,YAAY,CAAC4B,KAAK,CAACC,OAAP,CAXF;;AAAA;AAcrB7B,gBAAAA,YAAY,eACR,qFACsC,yCAAUN,QAAQ,CAAC6C,IAAT,CAAcC,OAAxB,CADtC,MADQ,CAAZ;;AAdqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAN;AAAA,KApGvB;AAwHIE,IAAAA,aAAa,EAAE;AAAA;AAAA,8EAAM,kBAAMvB,EAAN;AAAA;AAAA;AAAA;AAAA;AACjBtB,kBAAAA,UAAU,CAAC,IAAD,CAAV;AADiB;AAAA,yBAEXI,MAAM,CAACe,MAAP,CAAc;AAChBC,oBAAAA,QAAQ,EAAEN,cADM;AAEhBO,oBAAAA,SAAS,EAAE;AAAExB,sBAAAA,QAAQ,EAAEyB,EAAE,IAAIzB,QAAQ,CAACyB;AAA3B,qBAFK;AAGhBC,oBAAAA,MAHgB,kBAGTC,KAHS,UAGQ;AAAA,0BAARC,IAAQ,UAARA,IAAQ;AACpB,0BAAQM,KAAR,GAAkBN,IAAI,CAACE,OAAvB,CAAQI,KAAR;;AACA,0BAAIA,KAAJ,EAAW;AACP,+BAAO5B,YAAY,CAAC4B,KAAK,CAACC,OAAP,CAAnB;AACH;;AAED7B,sBAAAA,YAAY,eAAC,mEAAD,CAAZ;AACH;AAVe,mBAAd,CAFW;;AAAA;AAejBH,kBAAAA,UAAU,CAAC,KAAD,CAAV;;AAfiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAN;;AAAA;AAAA;AAAA;AAAA;AAAA,KAxHnB;AAyII8C,IAAAA,cAAc,EAAE;AAAA;AAAA,8EAAM,kBAAMxB,EAAN;AAAA;AAAA;AAAA;AAAA;AAClBtB,kBAAAA,UAAU,CAAC,IAAD,CAAV;AADkB;AAAA,yBAEZI,MAAM,CAACe,MAAP,CAAc;AAChBC,oBAAAA,QAAQ,EAAEJ,eADM;AAEhBK,oBAAAA,SAAS,EAAE;AAAExB,sBAAAA,QAAQ,EAAEyB,EAAE,IAAIzB,QAAQ,CAACyB;AAA3B,qBAFK;AAGhBC,oBAAAA,MAHgB,kBAGTC,KAHS,UAGQ;AAAA,0BAARC,IAAQ,UAARA,IAAQ;AACpB,0BAAQM,KAAR,GAAkBN,IAAI,CAACE,OAAvB,CAAQI,KAAR;;AACA,0BAAIA,KAAJ,EAAW;AACP,+BAAO5B,YAAY,CAAC4B,KAAK,CAACC,OAAP,CAAnB;AACH;;AAED7B,sBAAAA,YAAY,eAAC,oEAAD,CAAZ;AACH;AAVe,mBAAd,CAFY;;AAAA;AAelBH,kBAAAA,UAAU,CAAC,KAAD,CAAV;;AAfkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAzIpB,GAFW,CARf;AAAA,MACIkB,cADJ,gBACIA,cADJ;AAAA,MAEIiB,YAFJ,gBAEIA,YAFJ;AAAA,MAGIC,cAHJ,gBAGIA,cAHJ;AAAA,MAIIG,eAJJ,gBAIIA,eAJJ;AAAA,MAKIK,iBALJ,gBAKIA,iBALJ;AAAA,MAMIC,aANJ,gBAMIA,aANJ;AAAA,MAOIC,cAPJ,gBAOIA,cAPJ;;AAuKA,SAAO;AACH5B,IAAAA,cAAc,EAAdA,cADG;AAEHiB,IAAAA,YAAY,EAAZA,YAFG;AAGHC,IAAAA,cAAc,EAAdA,cAHG;AAIHG,IAAAA,eAAe,EAAfA,eAJG;AAKHK,IAAAA,iBAAiB,EAAjBA,iBALG;AAMHC,IAAAA,aAAa,EAAbA,aANG;AAOHC,IAAAA,cAAc,EAAdA;AAPG,GAAP;AASH,CA1MM","sourcesContent":["import React, { useMemo } from \"react\";\nimport { useRouter } from \"@webiny/react-router\";\nimport { useHandlers } from \"@webiny/app/hooks/useHandlers\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nimport { CmsEditorContentEntry } from \"~/types\";\nimport * as GQL from \"~/admin/graphql/contentEntries\";\nimport * as GQLCache from \"./cache\";\nimport { useApolloClient } from \"~/admin/hooks\";\nimport { useContentEntry } from \"~/admin/views/contentEntries/hooks/useContentEntry\";\n\nexport type UseRevisionProps = {\n    revision: CmsEditorContentEntry;\n};\n\nexport const useRevision = ({ revision }: UseRevisionProps) => {\n    const { contentModel, entry, setLoading, listQueryVariables } = useContentEntry();\n\n    const { history } = useRouter();\n    const { showSnackbar } = useSnackbar();\n    const client = useApolloClient();\n    const { modelId } = contentModel;\n\n    const {\n        CREATE_REVISION,\n        DELETE_REVISION,\n        PUBLISH_REVISION,\n        UNPUBLISH_REVISION,\n        REQUEST_REVIEW,\n        REQUEST_CHANGES\n    } = useMemo(() => {\n        return {\n            CREATE_REVISION: GQL.createCreateFromMutation(contentModel),\n            DELETE_REVISION: GQL.createDeleteMutation(contentModel),\n            PUBLISH_REVISION: GQL.createPublishMutation(contentModel),\n            UNPUBLISH_REVISION: GQL.createUnpublishMutation(contentModel),\n            REQUEST_REVIEW: GQL.createRequestReviewMutation(contentModel),\n            REQUEST_CHANGES: GQL.createRequestChangesMutation(contentModel)\n        };\n    }, [modelId]);\n\n    const {\n        createRevision,\n        editRevision,\n        deleteRevision,\n        publishRevision,\n        unpublishRevision,\n        requestReview,\n        requestChanges\n    } = useHandlers(\n        { entry },\n        {\n            createRevision: () => async () => {\n                setLoading(true);\n                const { data: res } = await client.mutate({\n                    mutation: CREATE_REVISION,\n                    variables: { revision: revision.id },\n                    update(cache, { data }) {\n                        const newRevision = data.content.data;\n\n                        GQLCache.updateLatestRevisionInListCache(\n                            contentModel,\n                            cache,\n                            newRevision,\n                            listQueryVariables\n                        );\n                        GQLCache.addRevisionToRevisionsCache(contentModel, cache, newRevision);\n                    }\n                });\n\n                setLoading(false);\n\n                const { data, error } = res.content;\n\n                if (error) {\n                    return showSnackbar(error.message);\n                }\n\n                history.push(`/cms/content-entries/${modelId}?id=${encodeURIComponent(data.id)}`);\n            },\n            editRevision: () => () => {\n                history.push(\n                    `/cms/content-entries/${modelId}/?id=${encodeURIComponent(revision.id)}`\n                );\n            },\n            deleteRevision:\n                ({ entry }) =>\n                async () => {\n                    setLoading(true);\n                    await client.mutate({\n                        mutation: DELETE_REVISION,\n                        variables: { revision: revision.id },\n                        update: (cache, { data }) => {\n                            const { error } = data.content;\n                            if (error) {\n                                return showSnackbar(error.message);\n                            }\n\n                            // We have other revisions, update entry's cache\n                            const revisions = GQLCache.removeRevisionFromEntryCache(\n                                contentModel,\n                                cache,\n                                revision\n                            );\n\n                            if (revision.id === entry.id) {\n                                GQLCache.updateLatestRevisionInListCache(\n                                    contentModel,\n                                    cache,\n                                    revisions[0],\n                                    listQueryVariables\n                                );\n                                // Redirect to the first revision in the list of all entry revisions.\n                                return history.push(\n                                    `/cms/content-entries/${modelId}?id=` +\n                                        encodeURIComponent(revisions[0].id)\n                                );\n                            }\n                        }\n                    });\n\n                    setLoading(false);\n                },\n            publishRevision: () => async id => {\n                setLoading(true);\n                await client.mutate({\n                    mutation: PUBLISH_REVISION,\n                    variables: { revision: id || revision.id },\n                    update(cache, { data }) {\n                        const { data: published, error } = data.content;\n                        if (error) {\n                            return showSnackbar(error.message);\n                        }\n\n                        GQLCache.unpublishPreviouslyPublishedRevision(\n                            contentModel,\n                            cache,\n                            published.id\n                        );\n\n                        showSnackbar(\n                            <span>\n                                Successfully published revision{\" \"}\n                                <strong>#{published.meta.version}</strong>!\n                            </span>\n                        );\n                    }\n                });\n\n                setLoading(false);\n            },\n            unpublishRevision: () => async () => {\n                setLoading(true);\n                const { data } = await client.mutate({\n                    mutation: UNPUBLISH_REVISION,\n                    variables: { revision: revision.id }\n                });\n\n                setLoading(false);\n\n                const { error } = data.content;\n                if (error) {\n                    return showSnackbar(error.message);\n                }\n\n                showSnackbar(\n                    <span>\n                        Successfully unpublished revision <strong>#{revision.meta.version}</strong>!\n                    </span>\n                );\n            },\n            requestReview: () => async id => {\n                setLoading(true);\n                await client.mutate({\n                    mutation: REQUEST_REVIEW,\n                    variables: { revision: id || revision.id },\n                    update(cache, { data }) {\n                        const { error } = data.content;\n                        if (error) {\n                            return showSnackbar(error.message);\n                        }\n\n                        showSnackbar(<span>Review requested successfully!</span>);\n                    }\n                });\n\n                setLoading(false);\n            },\n            requestChanges: () => async id => {\n                setLoading(true);\n                await client.mutate({\n                    mutation: REQUEST_CHANGES,\n                    variables: { revision: id || revision.id },\n                    update(cache, { data }) {\n                        const { error } = data.content;\n                        if (error) {\n                            return showSnackbar(error.message);\n                        }\n\n                        showSnackbar(<span>Changes requested successfully!</span>);\n                    }\n                });\n\n                setLoading(false);\n            }\n        }\n    );\n\n    return {\n        createRevision,\n        editRevision,\n        deleteRevision,\n        publishRevision,\n        unpublishRevision,\n        requestReview,\n        requestChanges\n    };\n};\n"],"file":"useRevision.js"}