import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useMemo } from "react";
import { useRouter } from "@webiny/react-router";
import { useHandlers } from "@webiny/app/hooks/useHandlers";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import * as GQL from "../../../graphql/contentEntries";
import * as GQLCache from "./cache";
import { useApolloClient } from "../../../hooks";
import { useContentEntry } from "../hooks/useContentEntry";
export var useRevision = function useRevision(_ref) {
  var revision = _ref.revision;

  var _useContentEntry = useContentEntry(),
      contentModel = _useContentEntry.contentModel,
      entry = _useContentEntry.entry,
      setLoading = _useContentEntry.setLoading,
      listQueryVariables = _useContentEntry.listQueryVariables;

  var _useRouter = useRouter(),
      history = _useRouter.history;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var client = useApolloClient();
  var modelId = contentModel.modelId;

  var _useMemo = useMemo(function () {
    return {
      CREATE_REVISION: GQL.createCreateFromMutation(contentModel),
      DELETE_REVISION: GQL.createDeleteMutation(contentModel),
      PUBLISH_REVISION: GQL.createPublishMutation(contentModel),
      UNPUBLISH_REVISION: GQL.createUnpublishMutation(contentModel),
      REQUEST_REVIEW: GQL.createRequestReviewMutation(contentModel),
      REQUEST_CHANGES: GQL.createRequestChangesMutation(contentModel)
    };
  }, [modelId]),
      CREATE_REVISION = _useMemo.CREATE_REVISION,
      DELETE_REVISION = _useMemo.DELETE_REVISION,
      PUBLISH_REVISION = _useMemo.PUBLISH_REVISION,
      UNPUBLISH_REVISION = _useMemo.UNPUBLISH_REVISION,
      REQUEST_REVIEW = _useMemo.REQUEST_REVIEW,
      REQUEST_CHANGES = _useMemo.REQUEST_CHANGES;

  var _useHandlers = useHandlers({
    entry: entry
  }, {
    createRevision: function createRevision() {
      return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _yield$client$mutate, res, _res$content, data, error;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                setLoading(true);
                _context.next = 3;
                return client.mutate({
                  mutation: CREATE_REVISION,
                  variables: {
                    revision: revision.id
                  },
                  update: function update(cache, _ref3) {
                    var data = _ref3.data;
                    var newRevision = data.content.data;
                    GQLCache.updateLatestRevisionInListCache(contentModel, cache, newRevision, listQueryVariables);
                    GQLCache.addRevisionToRevisionsCache(contentModel, cache, newRevision);
                  }
                });

              case 3:
                _yield$client$mutate = _context.sent;
                res = _yield$client$mutate.data;
                setLoading(false);
                _res$content = res.content, data = _res$content.data, error = _res$content.error;

                if (!error) {
                  _context.next = 9;
                  break;
                }

                return _context.abrupt("return", showSnackbar(error.message));

              case 9:
                history.push("/cms/content-entries/".concat(modelId, "?id=").concat(encodeURIComponent(data.id)));

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
    },
    editRevision: function editRevision() {
      return function () {
        history.push("/cms/content-entries/".concat(modelId, "/?id=").concat(encodeURIComponent(revision.id)));
      };
    },
    deleteRevision: function deleteRevision(_ref4) {
      var entry = _ref4.entry;
      return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                setLoading(true);
                _context2.next = 3;
                return client.mutate({
                  mutation: DELETE_REVISION,
                  variables: {
                    revision: revision.id
                  },
                  update: function update(cache, _ref6) {
                    var data = _ref6.data;
                    var error = data.content.error;

                    if (error) {
                      return showSnackbar(error.message);
                    } // We have other revisions, update entry's cache


                    // We have other revisions, update entry's cache
                    var revisions = GQLCache.removeRevisionFromEntryCache(contentModel, cache, revision);

                    if (revision.id === entry.id) {
                      GQLCache.updateLatestRevisionInListCache(contentModel, cache, revisions[0], listQueryVariables); // Redirect to the first revision in the list of all entry revisions.

                      // Redirect to the first revision in the list of all entry revisions.
                      return history.push("/cms/content-entries/".concat(modelId, "?id=") + encodeURIComponent(revisions[0].id));
                    }
                  }
                });

              case 3:
                setLoading(false);

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
    },
    publishRevision: function publishRevision() {
      return /*#__PURE__*/function () {
        var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {
          return _regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  setLoading(true);
                  _context3.next = 3;
                  return client.mutate({
                    mutation: PUBLISH_REVISION,
                    variables: {
                      revision: id || revision.id
                    },
                    update: function update(cache, _ref8) {
                      var data = _ref8.data;
                      var _data$content = data.content,
                          published = _data$content.data,
                          error = _data$content.error;

                      if (error) {
                        return showSnackbar(error.message);
                      }

                      GQLCache.unpublishPreviouslyPublishedRevision(contentModel, cache, published.id);
                      showSnackbar( /*#__PURE__*/React.createElement("span", null, "Successfully published revision", " ", /*#__PURE__*/React.createElement("strong", null, "#", published.meta.version), "!"));
                    }
                  });

                case 3:
                  setLoading(false);

                case 4:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }));

        return function (_x) {
          return _ref7.apply(this, arguments);
        };
      }();
    },
    unpublishRevision: function unpublishRevision() {
      return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        var _yield$client$mutate2, data, error;

        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                setLoading(true);
                _context4.next = 3;
                return client.mutate({
                  mutation: UNPUBLISH_REVISION,
                  variables: {
                    revision: revision.id
                  }
                });

              case 3:
                _yield$client$mutate2 = _context4.sent;
                data = _yield$client$mutate2.data;
                setLoading(false);
                error = data.content.error;

                if (!error) {
                  _context4.next = 9;
                  break;
                }

                return _context4.abrupt("return", showSnackbar(error.message));

              case 9:
                showSnackbar( /*#__PURE__*/React.createElement("span", null, "Successfully unpublished revision ", /*#__PURE__*/React.createElement("strong", null, "#", revision.meta.version), "!"));

              case 10:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));
    },
    requestReview: function requestReview() {
      return /*#__PURE__*/function () {
        var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(id) {
          return _regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  setLoading(true);
                  _context5.next = 3;
                  return client.mutate({
                    mutation: REQUEST_REVIEW,
                    variables: {
                      revision: id || revision.id
                    },
                    update: function update(cache, _ref11) {
                      var data = _ref11.data;
                      var error = data.content.error;

                      if (error) {
                        return showSnackbar(error.message);
                      }

                      showSnackbar( /*#__PURE__*/React.createElement("span", null, "Review requested successfully!"));
                    }
                  });

                case 3:
                  setLoading(false);

                case 4:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5);
        }));

        return function (_x2) {
          return _ref10.apply(this, arguments);
        };
      }();
    },
    requestChanges: function requestChanges() {
      return /*#__PURE__*/function () {
        var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(id) {
          return _regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  setLoading(true);
                  _context6.next = 3;
                  return client.mutate({
                    mutation: REQUEST_CHANGES,
                    variables: {
                      revision: id || revision.id
                    },
                    update: function update(cache, _ref13) {
                      var data = _ref13.data;
                      var error = data.content.error;

                      if (error) {
                        return showSnackbar(error.message);
                      }

                      showSnackbar( /*#__PURE__*/React.createElement("span", null, "Changes requested successfully!"));
                    }
                  });

                case 3:
                  setLoading(false);

                case 4:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6);
        }));

        return function (_x3) {
          return _ref12.apply(this, arguments);
        };
      }();
    }
  }),
      createRevision = _useHandlers.createRevision,
      editRevision = _useHandlers.editRevision,
      deleteRevision = _useHandlers.deleteRevision,
      publishRevision = _useHandlers.publishRevision,
      unpublishRevision = _useHandlers.unpublishRevision,
      requestReview = _useHandlers.requestReview,
      requestChanges = _useHandlers.requestChanges;

  return {
    createRevision: createRevision,
    editRevision: editRevision,
    deleteRevision: deleteRevision,
    publishRevision: publishRevision,
    unpublishRevision: unpublishRevision,
    requestReview: requestReview,
    requestChanges: requestChanges
  };
};
//# sourceMappingURL=useRevision.js.map