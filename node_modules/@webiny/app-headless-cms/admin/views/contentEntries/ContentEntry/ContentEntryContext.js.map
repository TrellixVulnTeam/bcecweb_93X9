{"version":3,"sources":["../../../../../src/admin/views/contentEntries/ContentEntry/ContentEntryContext.tsx"],"names":["React","useRef","useState","useCallback","useMemo","isEmpty","get","useRouter","useSnackbar","GQL","useQuery","useContentEntries","Context","createContext","Provider","children","contentModel","canCreate","listQueryVariables","setListQueryVariables","sorters","formRef","tabsRef","history","location","showSnackbar","isLoading","setLoading","newEntry","URLSearchParams","search","query","contentId","revisionId","decodeURIComponent","entryId","split","READ_CONTENT","createReadQuery","modelId","GET_REVISIONS","createRevisionsQuery","setFormRef","form","current","setTabsRef","tabs","createEntry","push","getEntry","variables","revision","skip","onCompleted","data","error","content","message","getRevisions","id","loading","entry","value","revisions","refetchContent","refetch","showEmptyView","displayName"],"mappings":"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","sourcesContent":["import React, {\n    useRef,\n    useState,\n    useCallback,\n    useMemo,\n    Dispatch,\n    SetStateAction,\n    MutableRefObject\n} from \"react\";\nimport isEmpty from \"lodash/isEmpty\";\nimport get from \"lodash/get\";\nimport { useRouter } from \"@webiny/react-router\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nimport { Form } from \"@webiny/form\";\nimport * as GQL from \"~/admin/graphql/contentEntries\";\nimport { useQuery } from \"~/admin/hooks\";\nimport { ContentEntriesContext } from \"~/admin/views/contentEntries/ContentEntriesContext\";\nimport { useContentEntries } from \"~/admin/views/contentEntries/hooks/useContentEntries\";\nimport { CmsContentEntryRevision, CmsEditorContentEntry } from \"~/types\";\nimport { Tabs } from \"@webiny/ui/Tabs\";\n\nexport interface ContentEntryContext extends ContentEntriesContext {\n    createEntry: () => void;\n    entry: CmsEditorContentEntry;\n    form: MutableRefObject<Form>;\n    setFormRef: (form: Form) => void;\n    loading: boolean;\n    setLoading: Dispatch<SetStateAction<boolean>>;\n    revisions: CmsContentEntryRevision[];\n    refetchContent: () => void;\n    tabs: MutableRefObject<Tabs>;\n    setTabsRef: (tabs: Tabs) => void;\n    showEmptyView: boolean;\n}\n\nexport const Context = React.createContext<ContentEntryContext>(null);\n\nexport const Provider = ({ children }) => {\n    const { contentModel, canCreate, listQueryVariables, setListQueryVariables, sorters } =\n        useContentEntries();\n\n    const formRef = useRef(null);\n    const tabsRef = useRef(null);\n    const { history, location } = useRouter();\n    const { showSnackbar } = useSnackbar();\n    const [isLoading, setLoading] = useState(false);\n\n    const newEntry = new URLSearchParams(location.search).get(\"new\") === \"true\";\n    const query = new URLSearchParams(location.search);\n    const contentId = query.get(\"id\");\n    const revisionId = contentId ? decodeURIComponent(contentId) : null;\n    const entryId = revisionId ? revisionId.split(\"#\")[0] : null;\n\n    const { READ_CONTENT } = useMemo(() => {\n        return {\n            READ_CONTENT: GQL.createReadQuery(contentModel)\n        };\n    }, [contentModel.modelId]);\n\n    const { GET_REVISIONS } = useMemo(() => {\n        return {\n            GET_REVISIONS: GQL.createRevisionsQuery(contentModel)\n        };\n    }, [contentModel.modelId]);\n\n    const setFormRef = useCallback(\n        form => {\n            formRef.current = form;\n        },\n        [formRef]\n    );\n\n    const setTabsRef = useCallback(\n        tabs => {\n            tabsRef.current = tabs;\n        },\n        [tabsRef]\n    );\n\n    const createEntry = useCallback(() => {\n        history.push(`/cms/content-entries/${contentModel.modelId}?new=true`);\n    }, [contentModel.modelId]);\n\n    const getEntry = useQuery(READ_CONTENT, {\n        variables: { revision: decodeURIComponent(contentId) },\n        skip: !contentId,\n        onCompleted: data => {\n            if (!data) {\n                return;\n            }\n\n            const { error } = data.content;\n            if (error) {\n                history.push(`/cms/content-entries/${contentModel.modelId}`);\n                showSnackbar(error.message);\n            }\n        }\n    });\n\n    const getRevisions = useQuery(GET_REVISIONS, {\n        variables: { id: entryId },\n        skip: !entryId\n    });\n\n    const loading = isLoading || getEntry.loading || getRevisions.loading;\n    const entry = get(getEntry, \"data.content.data\") || {};\n\n    const value = {\n        canCreate,\n        contentModel,\n        createEntry,\n        listQueryVariables,\n        setListQueryVariables,\n        sorters,\n        entry,\n        form: formRef,\n        loading,\n        revisions: get(getRevisions, \"data.revisions.data\") || {},\n        refetchContent: getEntry.refetch,\n        setFormRef,\n        setLoading,\n        setTabsRef,\n        showEmptyView: !newEntry && !loading && isEmpty(entry),\n        tabs: tabsRef\n    };\n\n    return <Context.Provider value={value}>{children}</Context.Provider>;\n};\n\nProvider.displayName = \"ContentEntryProvider\";\n"],"file":"ContentEntryContext.js"}