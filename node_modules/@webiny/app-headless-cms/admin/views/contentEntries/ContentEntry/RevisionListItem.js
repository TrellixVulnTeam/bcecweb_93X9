import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9;

import React from "react";
import { css } from "emotion";
import TimeAgo from "timeago-react";
import { ListItem, ListItemText, ListItemTextPrimary, ListItemTextSecondary, ListItemGraphic, ListItemMeta } from "@webiny/ui/List";
import { IconButton } from "@webiny/ui/Button";
import { Icon } from "@webiny/ui/Icon";
import { MenuItem, Menu, MenuDivider } from "@webiny/ui/Menu";
import { ConfirmationDialog } from "@webiny/ui/ConfirmationDialog";
import { Tooltip } from "@webiny/ui/Tooltip";
import { ReactComponent as MoreVerticalIcon } from "@svgr/webpack!../../../icons/more_vert.svg";
import { ReactComponent as LockIcon } from "@svgr/webpack!../../../icons/lock.svg";
import { ReactComponent as BeenHereIcon } from "@svgr/webpack!../../../icons/beenhere.svg";
import { ReactComponent as GestureIcon } from "@svgr/webpack!../../../icons/gesture.svg";
import { ReactComponent as AddIcon } from "@svgr/webpack!../../../icons/add.svg";
import { ReactComponent as EditIcon } from "@svgr/webpack!../../../icons/edit.svg";
import { ReactComponent as PublishIcon } from "@svgr/webpack!../../../icons/publish.svg";
import { ReactComponent as UnpublishIcon } from "@svgr/webpack!../../../icons/unpublish.svg";
import { ReactComponent as DeleteIcon } from "@svgr/webpack!../../../icons/delete.svg";
import { i18n } from "@webiny/app/i18n";
import { useRevision } from "./useRevision";
import usePermission from "../../../hooks/usePermission";
import { useContentEntry } from "../hooks/useContentEntry";
var t = i18n.ns("app-headless-cms/admin/plugins/content-details/content-revisions");
var primaryColor = /*#__PURE__*/css({
  color: "var(--mdc-theme-primary)"
}, "label:primaryColor;");
var revisionsMenu = /*#__PURE__*/css({
  width: 250,
  right: -105,
  left: "auto !important"
}, "label:revisionsMenu;");

var getIcon = function getIcon(rev) {
  switch (true) {
    case rev.meta.locked && rev.meta.status !== "published":
      return {
        icon: /*#__PURE__*/React.createElement(Icon, {
          icon: /*#__PURE__*/React.createElement(LockIcon, null),
          "data-testid": "cms.revision.status.locked"
        }),
        text: "This revision is locked (it has already been published)"
      };

    case rev.meta.status === "published":
      return {
        icon: /*#__PURE__*/React.createElement(Icon, {
          icon: /*#__PURE__*/React.createElement(BeenHereIcon, null),
          className: primaryColor,
          "data-testid": "cms.revision.status.published"
        }),
        text: "This revision is currently published!"
      };

    default:
      return {
        icon: /*#__PURE__*/React.createElement(Icon, {
          icon: /*#__PURE__*/React.createElement(GestureIcon, null),
          "data-testid": "cms.revision.status.draft"
        }),
        text: "This is a draft"
      };
  }
};

var RevisionListItem = function RevisionListItem(_ref) {
  var revision = _ref.revision;

  var _useRevision = useRevision({
    revision: revision
  }),
      createRevision = _useRevision.createRevision,
      deleteRevision = _useRevision.deleteRevision,
      publishRevision = _useRevision.publishRevision,
      unpublishRevision = _useRevision.unpublishRevision,
      editRevision = _useRevision.editRevision;

  var _useContentEntry = useContentEntry(),
      entry = _useContentEntry.entry,
      tabs = _useContentEntry.tabs;

  var _usePermission = usePermission(),
      canEdit = _usePermission.canEdit,
      canDelete = _usePermission.canDelete,
      canPublish = _usePermission.canPublish,
      canUnpublish = _usePermission.canUnpublish;

  var _getIcon = getIcon(revision),
      icon = _getIcon.icon,
      tooltipText = _getIcon.text;

  return /*#__PURE__*/React.createElement(ConfirmationDialog, {
    title: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Confirmation required!"]))),
    message: /*#__PURE__*/React.createElement("span", null, t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["You are about to delete revision {revision}. Are you sure you want to continue?"])))({
      revision: /*#__PURE__*/React.createElement("strong", null, "#", revision.meta.version)
    }))
  }, function (_ref2) {
    var showConfirmation = _ref2.showConfirmation;
    return /*#__PURE__*/React.createElement(ListItem, null, /*#__PURE__*/React.createElement(ListItemGraphic, null, /*#__PURE__*/React.createElement(Tooltip, {
      content: tooltipText,
      placement: "bottom"
    }, icon)), /*#__PURE__*/React.createElement(ListItemText, null, /*#__PURE__*/React.createElement(ListItemTextPrimary, null, revision.meta.title || t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["N/A"])))), /*#__PURE__*/React.createElement(ListItemTextSecondary, null, t(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Last modified {time} (#{version})"])))({
      time: /*#__PURE__*/React.createElement(TimeAgo, {
        datetime: revision.savedOn
      }),
      version: revision.meta.version
    }))), /*#__PURE__*/React.createElement(ListItemMeta, null, /*#__PURE__*/React.createElement(Menu, {
      handle: /*#__PURE__*/React.createElement(IconButton, {
        icon: /*#__PURE__*/React.createElement(MoreVerticalIcon, null)
      }),
      className: revisionsMenu,
      "data-testid": "cms.content-form.revisions.more-options"
    }, canEdit(entry, "cms.contentEntry") && /*#__PURE__*/React.createElement(MenuItem, {
      onClick: createRevision,
      "data-testid": "cms.revision.create-revision"
    }, /*#__PURE__*/React.createElement(ListItemGraphic, null, /*#__PURE__*/React.createElement(Icon, {
      icon: /*#__PURE__*/React.createElement(AddIcon, null)
    })), t(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["New from current"])))), !revision.meta.locked && canEdit(entry, "cms.contentEntry") && /*#__PURE__*/React.createElement(MenuItem, {
      onClick: function onClick() {
        editRevision();

        if (tabs.current) {
          tabs.current.switchTab(0);
        }
      }
    }, /*#__PURE__*/React.createElement(ListItemGraphic, null, /*#__PURE__*/React.createElement(Icon, {
      icon: /*#__PURE__*/React.createElement(EditIcon, null)
    })), t(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([" Edit"])))), revision.meta.status !== "published" && canPublish("cms.contentEntry") && /*#__PURE__*/React.createElement(MenuItem, {
      onClick: function onClick() {
        return publishRevision(revision.id);
      }
    }, /*#__PURE__*/React.createElement(ListItemGraphic, null, /*#__PURE__*/React.createElement(Icon, {
      icon: /*#__PURE__*/React.createElement(PublishIcon, null)
    })), t(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["Publish"])))), revision.meta.status === "published" && canUnpublish("cms.contentEntry") && /*#__PURE__*/React.createElement(MenuItem, {
      onClick: unpublishRevision,
      "data-testid": "cms.revision.unpublish"
    }, /*#__PURE__*/React.createElement(ListItemGraphic, null, /*#__PURE__*/React.createElement(Icon, {
      icon: /*#__PURE__*/React.createElement(UnpublishIcon, null)
    })), t(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["Unpublish"])))), !revision.meta.locked && canDelete(entry, "cms.contentEntry") && /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(MenuDivider, null), /*#__PURE__*/React.createElement(MenuItem, {
      onClick: function onClick() {
        return showConfirmation(deleteRevision);
      }
    }, /*#__PURE__*/React.createElement(ListItemGraphic, null, /*#__PURE__*/React.createElement(Icon, {
      icon: /*#__PURE__*/React.createElement(DeleteIcon, null)
    })), t(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral([" Delete"]))))))));
  });
};

export default RevisionListItem;
//# sourceMappingURL=RevisionListItem.js.map