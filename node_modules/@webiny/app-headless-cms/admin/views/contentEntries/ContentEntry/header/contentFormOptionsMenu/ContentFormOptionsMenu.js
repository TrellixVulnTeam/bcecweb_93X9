import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;

import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useCallback, useMemo } from "react";
import { css } from "emotion";
import get from "lodash/get";
import { IconButton } from "@webiny/ui/Button";
import { Menu, MenuItem } from "@webiny/ui/Menu";
import { ListItemGraphic } from "@webiny/ui/List";
import { Icon } from "@webiny/ui/Icon";
import { useRouter } from "@webiny/react-router";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { useDialog } from "@webiny/app-admin/hooks/useDialog";
import { useConfirmationDialog } from "@webiny/app-admin/hooks/useConfirmationDialog";
import { i18n } from "@webiny/app/i18n";
import { createDeleteMutation } from "../../../../../graphql/contentEntries";
import usePermission from "../../../../../hooks/usePermission";
import { ReactComponent as MoreVerticalIcon } from "@svgr/webpack!../../../../../icons/more_vert.svg";
import { ReactComponent as DeleteIcon } from "@svgr/webpack!../../../../../icons/delete.svg";
import { removeEntryFromListCache } from "../../cache";
import { useMutation } from "../../../../../hooks";
import { useContentEntry } from "../../../hooks/useContentEntry";
var t = i18n.ns("app-headless-cms/admin/plugins/content-details/header/content-form-options-menu");
var menuStyles = /*#__PURE__*/css({
  width: 250,
  right: -105,
  left: "auto !important",
  ".disabled": {
    opacity: 0.5,
    pointerEvents: "none"
  }
}, "label:menuStyles;");

var ContentFormOptionsMenu = function ContentFormOptionsMenu() {
  var _useContentEntry = useContentEntry(),
      contentModel = _useContentEntry.contentModel,
      entry = _useContentEntry.entry,
      loading = _useContentEntry.loading,
      setLoading = _useContentEntry.setLoading,
      listQueryVariables = _useContentEntry.listQueryVariables;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var _useRouter = useRouter(),
      history = _useRouter.history;

  var _useDialog = useDialog(),
      showDialog = _useDialog.showDialog;

  var _usePermission = usePermission(),
      canDelete = _usePermission.canDelete;

  var DELETE_CONTENT = useMemo(function () {
    return createDeleteMutation(contentModel);
  }, [contentModel.modelId]);

  var _useMutation = useMutation(DELETE_CONTENT),
      _useMutation2 = _slicedToArray(_useMutation, 1),
      deleteContentMutation = _useMutation2[0];

  var title = get(entry, "meta.title");

  var _useConfirmationDialo = useConfirmationDialog({
    title: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Delete content entry"]))),
    message: /*#__PURE__*/React.createElement("p", null, t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["You are about to delete this content entry and all of its revisions!"]))), /*#__PURE__*/React.createElement("br", null), t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["Are you sure you want to permanently delete {title}?"])))({
      title: /*#__PURE__*/React.createElement("strong", null, title)
    })),
    dataTestId: "cms.content-form.header.delete-dialog"
  }),
      showConfirmation = _useConfirmationDialo.showConfirmation;

  var confirmDelete = useCallback(function () {
    showConfirmation( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var _entry$id$split, _entry$id$split2, uniqueId;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              setLoading(true);
              _entry$id$split = entry.id.split("#"), _entry$id$split2 = _slicedToArray(_entry$id$split, 1), uniqueId = _entry$id$split2[0];
              _context.next = 4;
              return deleteContentMutation({
                variables: {
                  revision: uniqueId
                },
                update: function update(cache, _ref2) {
                  var data = _ref2.data;
                  var error = data.content.error;

                  if (error) {
                    return showDialog(error.message, {
                      title: t(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Could not delete content"])))
                    });
                  }

                  removeEntryFromListCache(contentModel, cache, entry, listQueryVariables);
                  showSnackbar(t(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["{title} was deleted successfully!"])))({
                    title: /*#__PURE__*/React.createElement("strong", null, title)
                  }));
                  history.push("/cms/content-entries/".concat(contentModel.modelId));
                }
              });

            case 4:
              setLoading(false);

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));
  }, null);

  if (!canDelete(entry, "cms.contentEntry")) {
    return null;
  }

  return /*#__PURE__*/React.createElement(Menu, {
    className: menuStyles,
    handle: /*#__PURE__*/React.createElement(IconButton, {
      icon: /*#__PURE__*/React.createElement(MoreVerticalIcon, null),
      "data-testid": "cms.content-form.header.more-options"
    })
  }, /*#__PURE__*/React.createElement(MenuItem, {
    onClick: confirmDelete,
    disabled: !entry.id || loading,
    "data-testid": "cms.content-form.header.delete"
  }, /*#__PURE__*/React.createElement(ListItemGraphic, null, /*#__PURE__*/React.createElement(Icon, {
    icon: /*#__PURE__*/React.createElement(DeleteIcon, null)
  })), "Delete"));
};

export default ContentFormOptionsMenu;
//# sourceMappingURL=ContentFormOptionsMenu.js.map