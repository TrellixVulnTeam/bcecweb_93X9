import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2, _templateObject3;

import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useCallback } from "react";
import { IconButton } from "@webiny/ui/Button";
import { Tooltip } from "@webiny/ui/Tooltip";
import { useConfirmationDialog } from "@webiny/app-admin/hooks/useConfirmationDialog";
import { i18n } from "@webiny/app/i18n";
import { ReactComponent as RequestReviewIcon } from "@svgr/webpack!./emoji_people-24px.svg";
import { useRevision } from "../../useRevision";
import usePermission from "../../../../../hooks/usePermission";
import { useContentEntry } from "../../../hooks/useContentEntry";
var t = i18n.ns("app-headless-cms/admin/content-details/header/request-review");

var RequestReview = function RequestReview() {
  var _useContentEntry = useContentEntry(),
      entry = _useContentEntry.entry;

  var _useRevision = useRevision({
    revision: entry
  }),
      requestReview = _useRevision.requestReview;

  var _usePermission = usePermission(),
      canRequestReview = _usePermission.canRequestReview;

  var _useConfirmationDialo = useConfirmationDialog({
    title: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Request Review"]))),
    message: /*#__PURE__*/React.createElement("p", null, t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["You are about to request a review of this content entry. Are you sure you want to continue?"]))))
  }),
      showConfirmation = _useConfirmationDialo.showConfirmation;

  var onClick = useCallback(function () {
    showConfirmation( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return requestReview(entry.id);

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));
  }, [entry.id]);

  if (!canRequestReview("cms.contentEntry")) {
    return null;
  }

  var buttonEnabled = entry.id && (entry.meta.status === "draft" || entry.meta.status === "changesRequested");
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tooltip, {
    content: t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["Request Review"]))),
    placement: "top"
  }, /*#__PURE__*/React.createElement(IconButton, {
    disabled: !buttonEnabled,
    icon: /*#__PURE__*/React.createElement(RequestReviewIcon, null),
    onClick: onClick
  })));
};

export default RequestReview;
//# sourceMappingURL=RequestReview.js.map