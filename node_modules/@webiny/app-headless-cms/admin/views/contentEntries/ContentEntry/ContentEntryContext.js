import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useRef, useState, useCallback, useMemo } from "react";
import isEmpty from "lodash/isEmpty";
import get from "lodash/get";
import { useRouter } from "@webiny/react-router";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import * as GQL from "../../../graphql/contentEntries";
import { useQuery } from "../../../hooks";
import { useContentEntries } from "../hooks/useContentEntries";
export var Context = /*#__PURE__*/React.createContext(null);
export var Provider = function Provider(_ref) {
  var children = _ref.children;

  var _useContentEntries = useContentEntries(),
      contentModel = _useContentEntries.contentModel,
      canCreate = _useContentEntries.canCreate,
      listQueryVariables = _useContentEntries.listQueryVariables,
      setListQueryVariables = _useContentEntries.setListQueryVariables,
      sorters = _useContentEntries.sorters;

  var formRef = useRef(null);
  var tabsRef = useRef(null);

  var _useRouter = useRouter(),
      history = _useRouter.history,
      location = _useRouter.location;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isLoading = _useState2[0],
      setLoading = _useState2[1];

  var newEntry = new URLSearchParams(location.search).get("new") === "true";
  var query = new URLSearchParams(location.search);
  var contentId = query.get("id");
  var revisionId = contentId ? decodeURIComponent(contentId) : null;
  var entryId = revisionId ? revisionId.split("#")[0] : null;

  var _useMemo = useMemo(function () {
    return {
      READ_CONTENT: GQL.createReadQuery(contentModel)
    };
  }, [contentModel.modelId]),
      READ_CONTENT = _useMemo.READ_CONTENT;

  var _useMemo2 = useMemo(function () {
    return {
      GET_REVISIONS: GQL.createRevisionsQuery(contentModel)
    };
  }, [contentModel.modelId]),
      GET_REVISIONS = _useMemo2.GET_REVISIONS;

  var setFormRef = useCallback(function (form) {
    formRef.current = form;
  }, [formRef]);
  var setTabsRef = useCallback(function (tabs) {
    tabsRef.current = tabs;
  }, [tabsRef]);
  var createEntry = useCallback(function () {
    history.push("/cms/content-entries/".concat(contentModel.modelId, "?new=true"));
  }, [contentModel.modelId]);
  var getEntry = useQuery(READ_CONTENT, {
    variables: {
      revision: decodeURIComponent(contentId)
    },
    skip: !contentId,
    onCompleted: function onCompleted(data) {
      if (!data) {
        return;
      }

      var error = data.content.error;

      if (error) {
        history.push("/cms/content-entries/".concat(contentModel.modelId));
        showSnackbar(error.message);
      }
    }
  });
  var getRevisions = useQuery(GET_REVISIONS, {
    variables: {
      id: entryId
    },
    skip: !entryId
  });
  var loading = isLoading || getEntry.loading || getRevisions.loading;
  var entry = get(getEntry, "data.content.data") || {};
  var value = {
    canCreate: canCreate,
    contentModel: contentModel,
    createEntry: createEntry,
    listQueryVariables: listQueryVariables,
    setListQueryVariables: setListQueryVariables,
    sorters: sorters,
    entry: entry,
    form: formRef,
    loading: loading,
    revisions: get(getRevisions, "data.revisions.data") || {},
    refetchContent: getEntry.refetch,
    setFormRef: setFormRef,
    setLoading: setLoading,
    setTabsRef: setTabsRef,
    showEmptyView: !newEntry && !loading && isEmpty(entry),
    tabs: tabsRef
  };
  return /*#__PURE__*/React.createElement(Context.Provider, {
    value: value
  }, children);
};
Provider.displayName = "ContentEntryProvider";
//# sourceMappingURL=ContentEntryContext.js.map