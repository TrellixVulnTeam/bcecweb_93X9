{"version":3,"sources":["../../../../src/admin/views/contentModelGroups/ContentModelGroupsForm.tsx"],"names":["React","useCallback","styled","isEmpty","get","pick","Form","Grid","Cell","Input","ButtonDefault","ButtonIcon","ButtonPrimary","CircularProgress","i18n","validation","SimpleFormHeader","SimpleForm","SimpleFormFooter","SimpleFormContent","IconPicker","useRouter","useSnackbar","EmptyView","useMutation","useQuery","GQL","usePermission","Tooltip","t","ns","ButtonWrapper","display","justifyContent","ContentModelGroupsForm","canCreate","location","history","showSnackbar","canEdit","newEntry","URLSearchParams","search","id","getQuery","GET_CONTENT_MODEL_GROUP","variables","skip","onCompleted","data","error","contentModelGroup","push","message","CREATE_CONTENT_MODEL_GROUP","update","cache","gqlParams","query","LIST_CONTENT_MODEL_GROUPS","readQuery","listContentModelGroups","writeQuery","create","createMutation","UPDATE_CONTENT_MODEL_GROUP","updateMutation","loading","find","item","onSubmit","group","operation","args","response","showEmptyView","icon","form","Bind","name","plugin","submit"],"mappings":"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","sourcesContent":["import React, { useCallback } from \"react\";\nimport styled from \"@emotion/styled\";\nimport isEmpty from \"lodash/isEmpty\";\nimport get from \"lodash/get\";\nimport pick from \"lodash/pick\";\nimport { Form } from \"@webiny/form\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { Input } from \"@webiny/ui/Input\";\nimport { ButtonDefault, ButtonIcon, ButtonPrimary } from \"@webiny/ui/Button\";\nimport { CircularProgress } from \"@webiny/ui/Progress\";\nimport { i18n } from \"@webiny/app/i18n\";\nimport { validation } from \"@webiny/validation\";\n\nimport {\n    SimpleFormHeader,\n    SimpleForm,\n    SimpleFormFooter,\n    SimpleFormContent\n} from \"@webiny/app-admin/components/SimpleForm\";\nimport IconPicker from \"./IconPicker\";\nimport { useRouter } from \"@webiny/react-router\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nimport EmptyView from \"@webiny/app-admin/components/EmptyView\";\nimport { ReactComponent as AddIcon } from \"@webiny/app-admin/assets/icons/add-18px.svg\";\nimport { useMutation, useQuery } from \"../../hooks\";\nimport * as GQL from \"./graphql\";\nimport usePermission from \"../../hooks/usePermission\";\nimport { Tooltip } from \"@webiny/ui/Tooltip\";\n\nconst t = i18n.ns(\"app-headless-cms/admin/content-model-groups/form\");\nconst ButtonWrapper = styled(\"div\")({\n    display: \"flex\",\n    justifyContent: \"space-between\"\n});\n\ntype ContentModelGroupsFormProps = {\n    canCreate: boolean;\n};\nfunction ContentModelGroupsForm({ canCreate }: ContentModelGroupsFormProps) {\n    const { location, history } = useRouter();\n    const { showSnackbar } = useSnackbar();\n    const { canEdit } = usePermission();\n\n    const newEntry = new URLSearchParams(location.search).get(\"new\") === \"true\";\n    const id = new URLSearchParams(location.search).get(\"id\");\n\n    const getQuery = useQuery(GQL.GET_CONTENT_MODEL_GROUP, {\n        variables: { id },\n        skip: !id,\n        onCompleted: data => {\n            if (!data) {\n                return;\n            }\n\n            const { error } = data.contentModelGroup;\n            if (error) {\n                history.push(\"/cms/content-model-group\");\n                showSnackbar(error.message);\n            }\n        }\n    });\n\n    // Create a new group and update list cache\n    const [create, createMutation] = useMutation(GQL.CREATE_CONTENT_MODEL_GROUP, {\n        update(cache, { data }) {\n            if (data.contentModelGroup.error) {\n                return;\n            }\n\n            const gqlParams = { query: GQL.LIST_CONTENT_MODEL_GROUPS };\n            const { listContentModelGroups } = cache.readQuery(gqlParams);\n            cache.writeQuery({\n                ...gqlParams,\n                data: {\n                    listContentModelGroups: {\n                        ...listContentModelGroups,\n                        data: [data.contentModelGroup.data, ...listContentModelGroups.data]\n                    }\n                }\n            });\n        }\n    });\n    const [update, updateMutation] = useMutation(GQL.UPDATE_CONTENT_MODEL_GROUP);\n\n    const loading = [getQuery, createMutation, updateMutation].find(item => item.loading);\n\n    const onSubmit = useCallback(\n        async ({ id, ...group }) => {\n            const [operation, args] = id\n                ? [\n                      update,\n                      {\n                          variables: {\n                              id,\n                              data: pick(group, [\"name\", \"description\", \"icon\"])\n                          }\n                      }\n                  ]\n                : [create, { variables: { data: pick(group, [\"name\", \"description\", \"icon\"]) } }];\n\n            const response = await operation(args);\n\n            const { data, error } = response.data.contentModelGroup;\n            if (error) {\n                return showSnackbar(error.message);\n            }\n\n            !id && history.push(`/cms/content-model-groups?id=${data.id}`);\n            showSnackbar(t`Content model group saved successfully!`);\n        },\n        [id]\n    );\n\n    const data = getQuery.loading ? null : get(getQuery, \"data.contentModelGroup.data\", null);\n\n    const showEmptyView = !newEntry && !loading && isEmpty(data);\n    // Render \"No content selected\" view.\n    if (showEmptyView) {\n        return (\n            <EmptyView\n                title={t`Click on the left side list to display group details {message}`({\n                    message: canCreate ? \"or create a...\" : \"\"\n                })}\n                action={\n                    canCreate ? (\n                        <ButtonDefault\n                            data-testid=\"new-record-button\"\n                            onClick={() => history.push(\"/cms/content-model-groups?new=true\")}\n                        >\n                            <ButtonIcon icon={<AddIcon />} /> {t`New Group`}\n                        </ButtonDefault>\n                    ) : null\n                }\n            />\n        );\n    }\n\n    return (\n        <Form onSubmit={onSubmit} data={data || { icon: \"fas/star\" }}>\n            {({ data, form, Bind }) => (\n                <SimpleForm data-testid={\"pb-content-model-groups-form\"}>\n                    <SimpleFormHeader title={data.name ? data.name : t`New content model group`} />\n                    {loading && <CircularProgress />}\n                    <SimpleFormContent>\n                        <Grid>\n                            <Cell span={12}>\n                                <Bind\n                                    name=\"name\"\n                                    validators={validation.create(\"required,maxLength:100\")}\n                                >\n                                    <Input label={t`Name`} />\n                                </Bind>\n                            </Cell>\n\n                            <Cell span={12}>\n                                <Bind name=\"icon\" validators={validation.create(\"required\")}>\n                                    <IconPicker\n                                        label={t`Group icon`}\n                                        description={t`Icon that will be displayed in the main menu.`}\n                                    />\n                                </Bind>\n                            </Cell>\n                            <Cell span={12}>\n                                <Bind name=\"description\">\n                                    <Input rows={5} label={t`Description`} />\n                                </Bind>\n                            </Cell>\n                        </Grid>\n                    </SimpleFormContent>\n                    <SimpleFormFooter>\n                        <ButtonWrapper>\n                            <ButtonDefault\n                                onClick={() => history.push(\"/cms/content-model-groups\")}\n                            >{t`Cancel`}</ButtonDefault>\n\n                            {canEdit(data, \"cms.contentModelGroup\") && (\n                                <React.Fragment>\n                                    {!data.plugin ? (\n                                        <ButtonPrimary\n                                            onClick={form.submit}\n                                        >{t`Save content model group`}</ButtonPrimary>\n                                    ) : (\n                                        <Tooltip\n                                            content={\n                                                \"Content model group is registered via a plugin.\"\n                                            }\n                                            placement={\"bottom\"}\n                                        >\n                                            <ButtonPrimary\n                                                disabled\n                                            >{t`Save content model group`}</ButtonPrimary>\n                                        </Tooltip>\n                                    )}\n                                </React.Fragment>\n                            )}\n                        </ButtonWrapper>\n                    </SimpleFormFooter>\n                </SimpleForm>\n            )}\n        </Form>\n    );\n}\n\nexport default ContentModelGroupsForm;\n"],"file":"ContentModelGroupsForm.js"}