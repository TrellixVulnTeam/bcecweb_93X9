import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11;

var _excluded = ["id"];
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useCallback } from "react";
import styled from "@emotion/styled";
import isEmpty from "lodash/isEmpty";
import get from "lodash/get";
import pick from "lodash/pick";
import { Form } from "@webiny/form";
import { Grid, Cell } from "@webiny/ui/Grid";
import { Input } from "@webiny/ui/Input";
import { ButtonDefault, ButtonIcon, ButtonPrimary } from "@webiny/ui/Button";
import { CircularProgress } from "@webiny/ui/Progress";
import { i18n } from "@webiny/app/i18n";
import { validation } from "@webiny/validation";
import { SimpleFormHeader, SimpleForm, SimpleFormFooter, SimpleFormContent } from "@webiny/app-admin/components/SimpleForm";
import IconPicker from "./IconPicker";
import { useRouter } from "@webiny/react-router";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import EmptyView from "@webiny/app-admin/components/EmptyView";
import { ReactComponent as AddIcon } from "@svgr/webpack!@webiny/app-admin/assets/icons/add-18px.svg";
import { useMutation, useQuery } from "../../hooks";
import * as GQL from "./graphql";
import usePermission from "../../hooks/usePermission";
import { Tooltip } from "@webiny/ui/Tooltip";
var t = i18n.ns("app-headless-cms/admin/content-model-groups/form");
var ButtonWrapper = /*#__PURE__*/styled("div", {
  target: "e7xbi20",
  label: "ButtonWrapper"
})({
  display: "flex",
  justifyContent: "space-between"
});

function ContentModelGroupsForm(_ref) {
  var canCreate = _ref.canCreate;

  var _useRouter = useRouter(),
      location = _useRouter.location,
      history = _useRouter.history;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var _usePermission = usePermission(),
      canEdit = _usePermission.canEdit;

  var newEntry = new URLSearchParams(location.search).get("new") === "true";
  var id = new URLSearchParams(location.search).get("id");
  var getQuery = useQuery(GQL.GET_CONTENT_MODEL_GROUP, {
    variables: {
      id: id
    },
    skip: !id,
    onCompleted: function onCompleted(data) {
      if (!data) {
        return;
      }

      var error = data.contentModelGroup.error;

      if (error) {
        history.push("/cms/content-model-group");
        showSnackbar(error.message);
      }
    }
  }); // Create a new group and update list cache

  var _useMutation = useMutation(GQL.CREATE_CONTENT_MODEL_GROUP, {
    update: function update(cache, _ref2) {
      var data = _ref2.data;

      if (data.contentModelGroup.error) {
        return;
      }

      var gqlParams = {
        query: GQL.LIST_CONTENT_MODEL_GROUPS
      };

      var _cache$readQuery = cache.readQuery(gqlParams),
          listContentModelGroups = _cache$readQuery.listContentModelGroups;

      cache.writeQuery(_objectSpread(_objectSpread({}, gqlParams), {}, {
        data: {
          listContentModelGroups: _objectSpread(_objectSpread({}, listContentModelGroups), {}, {
            data: [data.contentModelGroup.data].concat(_toConsumableArray(listContentModelGroups.data))
          })
        }
      }));
    }
  }),
      _useMutation2 = _slicedToArray(_useMutation, 2),
      create = _useMutation2[0],
      createMutation = _useMutation2[1];

  var _useMutation3 = useMutation(GQL.UPDATE_CONTENT_MODEL_GROUP),
      _useMutation4 = _slicedToArray(_useMutation3, 2),
      update = _useMutation4[0],
      updateMutation = _useMutation4[1];

  var loading = [getQuery, createMutation, updateMutation].find(function (item) {
    return item.loading;
  });
  var onSubmit = useCallback( /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref3) {
      var id, group, _ref5, _ref6, operation, args, response, _response$data$conten, data, error;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              id = _ref3.id, group = _objectWithoutProperties(_ref3, _excluded);
              _ref5 = id ? [update, {
                variables: {
                  id: id,
                  data: pick(group, ["name", "description", "icon"])
                }
              }] : [create, {
                variables: {
                  data: pick(group, ["name", "description", "icon"])
                }
              }], _ref6 = _slicedToArray(_ref5, 2), operation = _ref6[0], args = _ref6[1];
              _context.next = 4;
              return operation(args);

            case 4:
              response = _context.sent;
              _response$data$conten = response.data.contentModelGroup, data = _response$data$conten.data, error = _response$data$conten.error;

              if (!error) {
                _context.next = 8;
                break;
              }

              return _context.abrupt("return", showSnackbar(error.message));

            case 8:
              !id && history.push("/cms/content-model-groups?id=".concat(data.id));
              showSnackbar(t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Content model group saved successfully!"]))));

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref4.apply(this, arguments);
    };
  }(), [id]);
  var data = getQuery.loading ? null : get(getQuery, "data.contentModelGroup.data", null);
  var showEmptyView = !newEntry && !loading && isEmpty(data); // Render "No content selected" view.

  if (showEmptyView) {
    return /*#__PURE__*/React.createElement(EmptyView, {
      title: t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Click on the left side list to display group details {message}"])))({
        message: canCreate ? "or create a..." : ""
      }),
      action: canCreate ? /*#__PURE__*/React.createElement(ButtonDefault, {
        "data-testid": "new-record-button",
        onClick: function onClick() {
          return history.push("/cms/content-model-groups?new=true");
        }
      }, /*#__PURE__*/React.createElement(ButtonIcon, {
        icon: /*#__PURE__*/React.createElement(AddIcon, null)
      }), " ", t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["New Group"])))) : null
    });
  }

  return /*#__PURE__*/React.createElement(Form, {
    onSubmit: onSubmit,
    data: data || {
      icon: "fas/star"
    }
  }, function (_ref7) {
    var data = _ref7.data,
        form = _ref7.form,
        Bind = _ref7.Bind;
    return /*#__PURE__*/React.createElement(SimpleForm, {
      "data-testid": "pb-content-model-groups-form"
    }, /*#__PURE__*/React.createElement(SimpleFormHeader, {
      title: data.name ? data.name : t(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["New content model group"])))
    }), loading && /*#__PURE__*/React.createElement(CircularProgress, null), /*#__PURE__*/React.createElement(SimpleFormContent, null, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "name",
      validators: validation.create("required,maxLength:100")
    }, /*#__PURE__*/React.createElement(Input, {
      label: t(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["Name"])))
    }))), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "icon",
      validators: validation.create("required")
    }, /*#__PURE__*/React.createElement(IconPicker, {
      label: t(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["Group icon"]))),
      description: t(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["Icon that will be displayed in the main menu."])))
    }))), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "description"
    }, /*#__PURE__*/React.createElement(Input, {
      rows: 5,
      label: t(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["Description"])))
    }))))), /*#__PURE__*/React.createElement(SimpleFormFooter, null, /*#__PURE__*/React.createElement(ButtonWrapper, null, /*#__PURE__*/React.createElement(ButtonDefault, {
      onClick: function onClick() {
        return history.push("/cms/content-model-groups");
      }
    }, t(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["Cancel"])))), canEdit(data, "cms.contentModelGroup") && /*#__PURE__*/React.createElement(React.Fragment, null, !data.plugin ? /*#__PURE__*/React.createElement(ButtonPrimary, {
      onClick: form.submit
    }, t(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["Save content model group"])))) : /*#__PURE__*/React.createElement(Tooltip, {
      content: "Content model group is registered via a plugin.",
      placement: "bottom"
    }, /*#__PURE__*/React.createElement(ButtonPrimary, {
      disabled: true
    }, t(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["Save content model group"])))))))));
  });
}

export default ContentModelGroupsForm;
//# sourceMappingURL=ContentModelGroupsForm.js.map