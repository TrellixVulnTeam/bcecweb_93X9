{"version":3,"sources":["../../../../src/admin/views/contentModels/NewContentModelDialog.tsx"],"names":["React","useCallback","css","get","useRouter","Form","Input","Select","useSnackbar","CircularProgress","validation","useQuery","useMutation","i18n","ButtonDefault","UID","Grid","Cell","addModelToGroupCache","addModelToListCache","GQL","t","ns","narrowDialog","width","minWidth","noPadding","padding","NewContentModelDialog","open","onClose","useState","loading","setLoading","showSnackbar","history","CREATE_CONTENT_MODEL","update","cache","data","createContentModel","model","error","message","push","modelId","LIST_MENU_CONTENT_GROUPS_MODELS","skip","contentModelGroups","map","item","value","id","label","name","nameValidator","charAt","match","Error","trim","toLowerCase","undefined","group","variables","Bind","submit","create","props"],"mappings":"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","sourcesContent":["import React, { useCallback } from \"react\";\nimport { css } from \"emotion\";\nimport get from \"lodash/get\";\nimport { useRouter } from \"@webiny/react-router\";\nimport { Form } from \"@webiny/form\";\nimport { Input } from \"@webiny/ui/Input\";\nimport { Select } from \"@webiny/ui/Select\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nimport { CircularProgress } from \"@webiny/ui/Progress\";\nimport { validation } from \"@webiny/validation\";\nimport { useQuery, useMutation } from \"../../hooks\";\nimport { i18n } from \"@webiny/app/i18n\";\nimport { ButtonDefault } from \"@webiny/ui/Button\";\nimport * as UID from \"@webiny/ui/Dialog\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { addModelToGroupCache, addModelToListCache } from \"./cache\";\nimport * as GQL from \"../../viewsGraphql\";\n\nconst t = i18n.ns(\"app-headless-cms/admin/views/content-models/new-content-model-dialog\");\n\nconst narrowDialog = css({\n    \".mdc-dialog__surface\": {\n        width: 600,\n        minWidth: 600\n    }\n});\n\nconst noPadding = css({\n    padding: \"5px !important\"\n});\n\nexport type NewContentModelDialogProps = {\n    open: boolean;\n    onClose: UID.DialogOnClose;\n};\n\nconst NewContentModelDialog: React.FC<NewContentModelDialogProps> = ({ open, onClose }) => {\n    const [loading, setLoading] = React.useState(false);\n    const { showSnackbar } = useSnackbar();\n    const { history } = useRouter();\n\n    const [createContentModel] = useMutation(GQL.CREATE_CONTENT_MODEL, {\n        update(cache, { data }) {\n            const { data: model, error } = data.createContentModel;\n\n            if (error) {\n                return showSnackbar(error.message);\n            }\n\n            addModelToListCache(cache, model);\n            addModelToGroupCache(cache, model);\n\n            history.push(\"/cms/content-models/\" + model.modelId);\n        }\n    });\n\n    const { data } = useQuery(GQL.LIST_MENU_CONTENT_GROUPS_MODELS, {\n        skip: !open\n    });\n\n    const contentModelGroups = get(data, \"listContentModelGroups.data\", []).map(item => {\n        return { value: item.id, label: item.name };\n    });\n\n    const nameValidator = useCallback(name => {\n        if (!name.charAt(0).match(/[a-zA-Z]/)) {\n            throw new Error(\"Value is not valid - must not start with a number.\");\n        }\n        if (name.trim().toLowerCase() === \"id\") {\n            throw new Error('Value is not valid - \"id\" is an auto-generated field.');\n        }\n        return true;\n    }, undefined);\n\n    return (\n        <UID.Dialog\n            open={open}\n            onClose={onClose}\n            className={narrowDialog}\n            data-testid=\"cms-new-content-model-modal\"\n        >\n            {open && (\n                <Form\n                    data={{\n                        group: get(contentModelGroups, \"0.value\")\n                    }}\n                    onSubmit={async data => {\n                        setLoading(true);\n                        await createContentModel({\n                            variables: { data }\n                        });\n                    }}\n                >\n                    {({ Bind, submit }) => (\n                        <>\n                            {loading && <CircularProgress />}\n                            <UID.DialogTitle>{t`New Content Model`}</UID.DialogTitle>\n                            <UID.DialogContent>\n                                <Grid className={noPadding}>\n                                    <Cell span={12}>\n                                        <Bind\n                                            name={\"name\"}\n                                            validators={[\n                                                validation.create(\"required,maxLength:100\"),\n                                                nameValidator\n                                            ]}\n                                        >\n                                            <Input\n                                                label={t`Name`}\n                                                description={t`The name of the content model`}\n                                            />\n                                        </Bind>\n                                    </Cell>\n                                    <Cell span={12}>\n                                        <Bind\n                                            name={\"group\"}\n                                            validators={validation.create(\"required\")}\n                                        >\n                                            <Select\n                                                description={t`Choose a content model group`}\n                                                label={t`Content model group`}\n                                                options={contentModelGroups}\n                                            />\n                                        </Bind>\n                                    </Cell>\n                                    <Cell span={12}>\n                                        <Bind name=\"description\">\n                                            {props => (\n                                                <Input\n                                                    {...props}\n                                                    rows={4}\n                                                    maxLength={200}\n                                                    characterCount\n                                                    label={t`Description`}\n                                                />\n                                            )}\n                                        </Bind>\n                                    </Cell>\n                                </Grid>\n                            </UID.DialogContent>\n                            <UID.DialogActions>\n                                <ButtonDefault onClick={submit}>+ {t`Create`}</ButtonDefault>\n                            </UID.DialogActions>\n                        </>\n                    )}\n                </Form>\n            )}\n        </UID.Dialog>\n    );\n};\n\nexport default NewContentModelDialog;\n"],"file":"NewContentModelDialog.js"}