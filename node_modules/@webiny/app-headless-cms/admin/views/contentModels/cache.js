import dotProp from "dot-prop-immutable";
import * as GQL from "../../viewsGraphql";
export var addModelToListCache = function addModelToListCache(cache, model) {
  var _cache$readQuery = cache.readQuery({
    query: GQL.LIST_CONTENT_MODELS
  }),
      listContentModels = _cache$readQuery.listContentModels;

  var newModelIndex = listContentModels.data.length;
  cache.writeQuery({
    query: GQL.LIST_CONTENT_MODELS,
    data: {
      listContentModels: dotProp.set(listContentModels, "data.".concat(newModelIndex), model)
    }
  });
};
export var addModelToGroupCache = function addModelToGroupCache(cache, model) {
  var _cache$readQuery2 = cache.readQuery({
    query: GQL.LIST_MENU_CONTENT_GROUPS_MODELS
  }),
      groupsList = _cache$readQuery2.listContentModelGroups;

  var groupIndex = groupsList.data.findIndex(function (g) {
    return g.id === model.group.id;
  });
  var newGroupModelIndex = groupsList.data[groupIndex].contentModels.length;
  cache.writeQuery({
    query: GQL.LIST_MENU_CONTENT_GROUPS_MODELS,
    data: {
      listContentModelGroups: dotProp.set(groupsList, "data.".concat(groupIndex, ".contentModels.").concat(newGroupModelIndex), model)
    }
  });
};
export var removeModelFromListCache = function removeModelFromListCache(cache, model) {
  var _cache$readQuery3 = cache.readQuery({
    query: GQL.LIST_CONTENT_MODELS
  }),
      listContentModels = _cache$readQuery3.listContentModels;

  var modelIndex = listContentModels.data.findIndex(function (m) {
    return m.modelId === model.modelId;
  });
  cache.writeQuery({
    query: GQL.LIST_CONTENT_MODELS,
    data: {
      listContentModels: dotProp.delete(listContentModels, "data.".concat(modelIndex))
    }
  });
};
export var removeModelFromGroupCache = function removeModelFromGroupCache(cache, model) {
  var _cache$readQuery4 = cache.readQuery({
    query: GQL.LIST_MENU_CONTENT_GROUPS_MODELS
  }),
      groupsList = _cache$readQuery4.listContentModelGroups;

  var groupIndex = groupsList.data.findIndex(function (g) {
    return g.id === model.group.id;
  });
  var modelIndex = groupsList.data[groupIndex].contentModels.findIndex(function (m) {
    return m.modelId === model.modelId;
  });
  cache.writeQuery({
    query: GQL.LIST_MENU_CONTENT_GROUPS_MODELS,
    data: {
      listContentModelGroups: dotProp.delete(groupsList, "data.".concat(groupIndex, ".contentModels.").concat(modelIndex))
    }
  });
};
//# sourceMappingURL=cache.js.map