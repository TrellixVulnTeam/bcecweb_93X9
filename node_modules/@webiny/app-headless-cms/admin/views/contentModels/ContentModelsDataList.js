import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17;

import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useCallback, useMemo, useState } from "react";
import TimeAgo from "timeago-react";
import { css } from "emotion";
import get from "lodash/get";
import { useRouter } from "@webiny/react-router";
import { DeleteIcon, EditIcon } from "@webiny/ui/List/DataList/icons";
import { ReactComponent as ViewListIcon } from "@svgr/webpack!../../icons/view_list.svg";
import { useApolloClient, useQuery } from "../../hooks";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import * as UIL from "@webiny/ui/List";
import { ButtonIcon, ButtonSecondary, IconButton } from "@webiny/ui/Button";
import { Tooltip } from "@webiny/ui/Tooltip";
import { i18n } from "@webiny/app/i18n";
import { useConfirmationDialog } from "@webiny/app-admin/hooks/useConfirmationDialog";
import { removeModelFromGroupCache, removeModelFromListCache } from "./cache";
import * as GQL from "../../viewsGraphql";
import { ReactComponent as AddIcon } from "@svgr/webpack!@webiny/app-admin/assets/icons/add-18px.svg";
import SearchUI from "@webiny/app-admin/components/SearchUI";
import { deserializeSorters, serializeSorters } from "../utils";
import orderBy from "lodash/orderBy";
import { Cell, Grid } from "@webiny/ui/Grid";
import { Select } from "@webiny/ui/Select";
import { ReactComponent as FilterIcon } from "@svgr/webpack!@webiny/app-admin/assets/icons/filter-24px.svg";
import usePermission from "../../hooks/usePermission";
var t = i18n.namespace("FormsApp.ContentModelsDataList");
var SORTERS = [{
  label: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Newest to oldest"]))),
  sorters: {
    savedOn: "desc"
  }
}, {
  label: t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Oldest to newest"]))),
  sorters: {
    savedOn: "asc"
  }
}, {
  label: t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["Name A-Z"]))),
  sorters: {
    name: "asc"
  }
}, {
  label: t(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Name Z-A"]))),
  sorters: {
    name: "desc"
  }
}];
var rightAlign = /*#__PURE__*/css({
  alignItems: "flex-end !important",
  justifyContent: "center !important"
}, "label:rightAlign;");
var listItemMinHeight = /*#__PURE__*/css({
  minHeight: "66px !important"
}, "label:listItemMinHeight;");

var ContentModelsDataList = function ContentModelsDataList(_ref) {
  var canCreate = _ref.canCreate,
      onCreate = _ref.onCreate;

  var _useState = useState(""),
      _useState2 = _slicedToArray(_useState, 2),
      filter = _useState2[0],
      setFilter = _useState2[1];

  var _useState3 = useState(serializeSorters(SORTERS[0].sorters)),
      _useState4 = _slicedToArray(_useState3, 2),
      sort = _useState4[0],
      setSort = _useState4[1];

  var _useRouter = useRouter(),
      history = _useRouter.history;

  var client = useApolloClient();

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var _useConfirmationDialo = useConfirmationDialog({
    dataTestId: "cms-delete-content-model-dialog"
  }),
      showConfirmation = _useConfirmationDialo.showConfirmation;

  var _useQuery = useQuery(GQL.LIST_CONTENT_MODELS),
      data = _useQuery.data,
      loading = _useQuery.loading;

  var _usePermission = usePermission(),
      canDelete = _usePermission.canDelete,
      canEdit = _usePermission.canEdit;

  var filterData = useCallback(function (_ref2) {
    var name = _ref2.name;
    return name.toLowerCase().includes(filter);
  }, [filter]);
  var sortData = useCallback(function (list) {
    if (!sort) {
      return list;
    }

    var _Object$entries = Object.entries(deserializeSorters(sort)),
        _Object$entries2 = _slicedToArray(_Object$entries, 1),
        _Object$entries2$ = _slicedToArray(_Object$entries2[0], 2),
        key = _Object$entries2$[0],
        value = _Object$entries2$[1];

    return orderBy(list, [key], [value]);
  }, [sort]);
  var models = loading ? [] : get(data, "listContentModels.data", []);

  var deleteRecord = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(item) {
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              showConfirmation( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
                return _regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return client.mutate({
                          mutation: GQL.DELETE_CONTENT_MODEL,
                          variables: {
                            modelId: item.modelId
                          },
                          update: function update(cache, _ref5) {
                            var data = _ref5.data;
                            var error = data.deleteContentModel.error;

                            if (error) {
                              return showSnackbar(error.message, {
                                title: t(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["Something unexpected happened."])))
                              });
                            }

                            removeModelFromListCache(cache, item);
                            removeModelFromGroupCache(cache, item);
                            showSnackbar(t(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["Content model {name} deleted successfully!."])))({
                              name: item.name
                            }));
                          }
                        });

                      case 2:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              })));

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function deleteRecord(_x) {
      return _ref3.apply(this, arguments);
    };
  }();

  var editRecord = function editRecord(contentModel) {
    history.push("/cms/content-models/" + contentModel.modelId);
  };

  var viewContentEntries = useCallback(function (contentModel) {
    return function () {
      return history.push("/cms/content-entries/" + contentModel.modelId);
    };
  }, undefined);
  var contentModelsDataListModalOverlay = useMemo(function () {
    return /*#__PURE__*/React.createElement(UIL.DataListModalOverlay, null, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Select, {
      value: sort,
      onChange: setSort,
      label: t(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["Sort by"]))),
      description: "Sort content models by"
    }, SORTERS.map(function (_ref6) {
      var label = _ref6.label,
          sorters = _ref6.sorters;
      return /*#__PURE__*/React.createElement("option", {
        key: label,
        value: serializeSorters(sorters)
      }, label);
    })))));
  }, [sort]);
  var filteredData = filter === "" ? models : models.filter(filterData);
  var contentModels = sortData(filteredData);
  return /*#__PURE__*/React.createElement(UIL.DataList, {
    loading: loading,
    data: contentModels,
    title: t(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["Content Models"]))),
    actions: canCreate ? /*#__PURE__*/React.createElement(ButtonSecondary, {
      "data-testid": "new-record-button",
      onClick: onCreate
    }, /*#__PURE__*/React.createElement(ButtonIcon, {
      icon: /*#__PURE__*/React.createElement(AddIcon, null)
    }), " ", t(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["New Model"])))) : null,
    search: /*#__PURE__*/React.createElement(SearchUI, {
      value: filter,
      onChange: setFilter,
      inputPlaceholder: t(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["Search content models"])))
    }),
    modalOverlay: contentModelsDataListModalOverlay,
    modalOverlayAction: /*#__PURE__*/React.createElement(UIL.DataListModalOverlayAction, {
      icon: /*#__PURE__*/React.createElement(FilterIcon, null),
      "data-testid": "default-data-list.filter"
    })
  }, function (_ref7) {
    var _ref7$data = _ref7.data,
        data = _ref7$data === void 0 ? [] : _ref7$data;
    return /*#__PURE__*/React.createElement(UIL.List, {
      "data-testid": "default-data-list"
    }, data.map(function (contentModel) {
      var disableViewContent = contentModel.fields.length === 0;
      var message = disableViewContent ? "To view the content, you first need to add a field and save the model" : "View content";
      return /*#__PURE__*/React.createElement(UIL.ListItem, {
        key: contentModel.modelId,
        className: listItemMinHeight
      }, /*#__PURE__*/React.createElement(UIL.ListItemText, null, contentModel.name, /*#__PURE__*/React.createElement(UIL.ListItemTextSecondary, null, t(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["Last modified: {time}."])))({
        time: /*#__PURE__*/React.createElement(TimeAgo, {
          datetime: contentModel.savedOn
        })
      }))), /*#__PURE__*/React.createElement(UIL.ListItemMeta, {
        className: rightAlign
      }, /*#__PURE__*/React.createElement(UIL.ListActions, null, canEdit(contentModel, "cms.contentModel") && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tooltip, {
        content: t(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["{message}"])))({
          message: message
        }),
        placement: "top"
      }, /*#__PURE__*/React.createElement(IconButton, {
        "data-testid": "cms-view-content-model-button",
        icon: /*#__PURE__*/React.createElement(ViewListIcon, null),
        label: t(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["View entries"]))),
        onClick: viewContentEntries(contentModel),
        disabled: disableViewContent
      })), contentModel.plugin ? /*#__PURE__*/React.createElement(Tooltip, {
        content: t(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["Content model is registered via a plugin."]))),
        placement: "top"
      }, /*#__PURE__*/React.createElement(EditIcon, {
        disabled: true,
        "data-testid": "cms-edit-content-model-button"
      })) : /*#__PURE__*/React.createElement(Tooltip, {
        content: t(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["Edit content model"]))),
        placement: "top"
      }, /*#__PURE__*/React.createElement(EditIcon, {
        onClick: function onClick() {
          return editRecord(contentModel);
        },
        "data-testid": "cms-edit-content-model-button"
      }))), canDelete(contentModel, "cms.contentModel") && contentModel.plugin ? /*#__PURE__*/React.createElement(Tooltip, {
        content: t(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["Content model is registered via a plugin."]))),
        placement: "top"
      }, /*#__PURE__*/React.createElement(DeleteIcon, {
        disabled: true,
        "data-testid": "cms-delete-content-model-button"
      })) : /*#__PURE__*/React.createElement(Tooltip, {
        content: t(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["Delete content model"]))),
        placement: "top"
      }, /*#__PURE__*/React.createElement(DeleteIcon, {
        onClick: function onClick() {
          return deleteRecord(contentModel);
        },
        "data-testid": "cms-delete-content-model-button"
      })))));
    }));
  });
};

export default ContentModelsDataList;
//# sourceMappingURL=ContentModelsDataList.js.map