import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7;

import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useCallback } from "react";
import { css } from "emotion";
import get from "lodash/get";
import { useRouter } from "@webiny/react-router";
import { Form } from "@webiny/form";
import { Input } from "@webiny/ui/Input";
import { Select } from "@webiny/ui/Select";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { CircularProgress } from "@webiny/ui/Progress";
import { validation } from "@webiny/validation";
import { useQuery, useMutation } from "../../hooks";
import { i18n } from "@webiny/app/i18n";
import { ButtonDefault } from "@webiny/ui/Button";
import * as UID from "@webiny/ui/Dialog";
import { Grid, Cell } from "@webiny/ui/Grid";
import { addModelToGroupCache, addModelToListCache } from "./cache";
import * as GQL from "../../viewsGraphql";
var t = i18n.ns("app-headless-cms/admin/views/content-models/new-content-model-dialog");
var narrowDialog = /*#__PURE__*/css({
  ".mdc-dialog__surface": {
    width: 600,
    minWidth: 600
  }
}, "label:narrowDialog;");
var noPadding = /*#__PURE__*/css({
  padding: "5px !important"
}, "label:noPadding;");

var NewContentModelDialog = function NewContentModelDialog(_ref) {
  var open = _ref.open,
      onClose = _ref.onClose;

  var _React$useState = React.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      loading = _React$useState2[0],
      setLoading = _React$useState2[1];

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var _useRouter = useRouter(),
      history = _useRouter.history;

  var _useMutation = useMutation(GQL.CREATE_CONTENT_MODEL, {
    update: function update(cache, _ref2) {
      var data = _ref2.data;
      var _data$createContentMo = data.createContentModel,
          model = _data$createContentMo.data,
          error = _data$createContentMo.error;

      if (error) {
        return showSnackbar(error.message);
      }

      addModelToListCache(cache, model);
      addModelToGroupCache(cache, model);
      history.push("/cms/content-models/" + model.modelId);
    }
  }),
      _useMutation2 = _slicedToArray(_useMutation, 1),
      createContentModel = _useMutation2[0];

  var _useQuery = useQuery(GQL.LIST_MENU_CONTENT_GROUPS_MODELS, {
    skip: !open
  }),
      data = _useQuery.data;

  var contentModelGroups = get(data, "listContentModelGroups.data", []).map(function (item) {
    return {
      value: item.id,
      label: item.name
    };
  });
  var nameValidator = useCallback(function (name) {
    if (!name.charAt(0).match(/[a-zA-Z]/)) {
      throw new Error("Value is not valid - must not start with a number.");
    }

    if (name.trim().toLowerCase() === "id") {
      throw new Error('Value is not valid - "id" is an auto-generated field.');
    }

    return true;
  }, undefined);
  return /*#__PURE__*/React.createElement(UID.Dialog, {
    open: open,
    onClose: onClose,
    className: narrowDialog,
    "data-testid": "cms-new-content-model-modal"
  }, open && /*#__PURE__*/React.createElement(Form, {
    data: {
      group: get(contentModelGroups, "0.value")
    },
    onSubmit: /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                setLoading(true);
                _context.next = 3;
                return createContentModel({
                  variables: {
                    data: data
                  }
                });

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }()
  }, function (_ref4) {
    var Bind = _ref4.Bind,
        submit = _ref4.submit;
    return /*#__PURE__*/React.createElement(React.Fragment, null, loading && /*#__PURE__*/React.createElement(CircularProgress, null), /*#__PURE__*/React.createElement(UID.DialogTitle, null, t(_templateObject || (_templateObject = _taggedTemplateLiteral(["New Content Model"])))), /*#__PURE__*/React.createElement(UID.DialogContent, null, /*#__PURE__*/React.createElement(Grid, {
      className: noPadding
    }, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "name",
      validators: [validation.create("required,maxLength:100"), nameValidator]
    }, /*#__PURE__*/React.createElement(Input, {
      label: t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Name"]))),
      description: t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["The name of the content model"])))
    }))), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "group",
      validators: validation.create("required")
    }, /*#__PURE__*/React.createElement(Select, {
      description: t(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Choose a content model group"]))),
      label: t(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["Content model group"]))),
      options: contentModelGroups
    }))), /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "description"
    }, function (props) {
      return /*#__PURE__*/React.createElement(Input, Object.assign({}, props, {
        rows: 4,
        maxLength: 200,
        characterCount: true,
        label: t(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["Description"])))
      }));
    })))), /*#__PURE__*/React.createElement(UID.DialogActions, null, /*#__PURE__*/React.createElement(ButtonDefault, {
      onClick: submit
    }, "+ ", t(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["Create"]))))));
  }));
};

export default NewContentModelDialog;
//# sourceMappingURL=NewContentModelDialog.js.map