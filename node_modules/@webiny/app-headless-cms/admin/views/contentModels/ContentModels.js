import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useCallback, useMemo } from "react";
import { css } from "emotion";
import { useSecurity } from "@webiny/app-security";
import ContentModelsDataList from "./ContentModelsDataList";
import NewContentModelDialog from "./NewContentModelDialog";
import { Cell } from "@webiny/ui/Grid";
import { Grid } from "@webiny/ui/Grid";
var grid = /*#__PURE__*/css({
  "&.mdc-layout-grid": {
    padding: 0,
    backgroundColor: "var(--mdc-theme-background)",
    ">.mdc-layout-grid__inner": {
      gridGap: 0
    }
  }
}, "label:grid;");
var centeredContent = /*#__PURE__*/css({
  backgroundColor: "var(--mdc-theme-surface)",
  ">.webiny-data-list": {
    display: "flex",
    flexDirection: "column",
    height: "calc(100vh - 70px)",
    ".mdc-list": {
      overflow: "auto"
    }
  },
  ">.mdc-list": {
    display: "flex",
    flexDirection: "column",
    maxHeight: "calc(100vh - 70px)",
    overflow: "auto"
  }
}, "label:centeredContent;");

function ContentModels() {
  var _React$useState = React.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      newContentModelDialogOpened = _React$useState2[0],
      openNewContentModelDialog = _React$useState2[1];

  var _useSecurity = useSecurity(),
      identity = _useSecurity.identity;

  var canCreate = useMemo(function () {
    var permission = identity.getPermission("cms.contentModel");

    if (!permission) {
      return false;
    }

    if (typeof permission.rwd !== "string") {
      return true;
    }

    return permission.rwd.includes("w");
  }, []);
  var onCreate = useCallback(function () {
    return openNewContentModelDialog(true);
  }, []);
  var onClose = useCallback(function () {
    return openNewContentModelDialog(false);
  }, []);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(NewContentModelDialog, {
    open: newContentModelDialogOpened,
    onClose: onClose
  }), /*#__PURE__*/React.createElement(Grid, {
    className: grid
  }, /*#__PURE__*/React.createElement(Cell, {
    span: 3
  }), /*#__PURE__*/React.createElement(Cell, {
    span: 6,
    className: centeredContent
  }, /*#__PURE__*/React.createElement(ContentModelsDataList, {
    canCreate: canCreate,
    onCreate: onCreate
  })), /*#__PURE__*/React.createElement(Cell, {
    span: 3
  })));
}

export default ContentModels;
//# sourceMappingURL=ContentModels.js.map