{"version":3,"sources":["../../../../src/admin/plugins/fieldRenderers/DynamicSection.tsx"],"names":["React","css","i18n","Cell","Grid","ButtonDefault","ButtonIcon","FormElementMessage","t","ns","style","addButton","width","borderTop","paddingTop","DynamicSection","field","getBind","Label","children","showLabel","emptyValue","renderTitle","gridClassName","Bind","FirstFieldBind","bindField","value","appendValue","bindFieldValue","label","bindIndex","bind","index","slice","map","item","realIndex","BindField","validation","isValid","message","undefined"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { css } from \"emotion\";\nimport { i18n } from \"@webiny/app/i18n\";\nimport { Cell, Grid } from \"@webiny/ui/Grid\";\nimport { ButtonDefault, ButtonIcon } from \"@webiny/ui/Button\";\nimport { CmsEditorField } from \"~/types\";\nimport { FormElementMessage } from \"@webiny/ui/FormElementMessage\";\nimport { ReactComponent as AddIcon } from \"@webiny/app-admin/assets/icons/add-18px.svg\";\n\nconst t = i18n.ns(\"app-headless-cms/admin/fields/text\");\n\nconst style = {\n    addButton: css({\n        width: \"100%\",\n        borderTop: \"1px solid var(--mdc-theme-background)\",\n        paddingTop: 8\n    })\n};\n\ntype Props = {\n    field: CmsEditorField;\n    getBind(index?: number): React.ComponentType<any>;\n    showLabel?: boolean;\n    Label: React.ComponentType<any>;\n    children: (params: any) => React.ReactNode;\n    emptyValue?: any;\n    renderTitle?: (value: any[]) => React.ReactElement;\n    gridClassName?: string;\n};\n\nconst DynamicSection = ({\n    field,\n    getBind,\n    Label,\n    children,\n    showLabel = true,\n    emptyValue = \"\",\n    renderTitle,\n    gridClassName\n}: Props) => {\n    const Bind = getBind();\n    const FirstFieldBind = getBind(0);\n\n    return (\n        /* First we mount the top level field, for example: \"items\" */\n        <Bind>\n            {bindField => {\n                /**\n                 * \"value\" -> an array of items\n                 * \"appendValue\" -> a callback to add a new value to the top level \"items\" array\n                 */\n                const { value, appendValue } = bindField;\n\n                const bindFieldValue = value || [];\n                return (\n                    <Grid className={gridClassName}>\n                        {typeof renderTitle === \"function\" && renderTitle(bindFieldValue)}\n                        <Cell span={12}>\n                            {/* We always render the first item, for better UX */}\n                            {showLabel && field.label && <Label>{field.label}</Label>}\n                            <FirstFieldBind>\n                                {bindIndex =>\n                                    /* We bind it to index \"0\", so when you start typing, that index in parent array will be populated */\n                                    children({\n                                        Bind: FirstFieldBind,\n                                        field,\n                                        // \"index\" contains Bind props for this particular item in the array\n                                        // \"field\" contains Bind props for the main (parent) field.\n                                        bind: { index: bindIndex, field: bindField },\n                                        index: 0 // Binds to \"items.0\" in the <Form>.\n                                    })\n                                }\n                            </FirstFieldBind>\n                        </Cell>\n\n                        {/* Now we skip the first item, because we already rendered it above, and proceed with all other items. */}\n                        {bindFieldValue.slice(1).map((item, index) => {\n                            /* We simply increase index, and as you type, the appropriate indexes in the parent array will be updated. */\n                            const realIndex = index + 1;\n                            const BindField = getBind(realIndex);\n                            return (\n                                <Cell span={12} key={realIndex}>\n                                    <BindField>\n                                        {bindIndex =>\n                                            children({\n                                                Bind: BindField,\n                                                field,\n                                                bind: { index: bindIndex, field: bindField },\n                                                index: realIndex\n                                            })\n                                        }\n                                    </BindField>\n                                </Cell>\n                            );\n                        })}\n\n                        {bindField.validation.isValid === false && (\n                            <Cell span={12}>\n                                <FormElementMessage error>\n                                    {bindField.validation.message}\n                                </FormElementMessage>\n                            </Cell>\n                        )}\n                        <Cell span={12} className={style.addButton}>\n                            <ButtonDefault\n                                disabled={bindFieldValue[0] === undefined}\n                                onClick={() => appendValue(emptyValue)}\n                            >\n                                <ButtonIcon icon={<AddIcon />} />\n                                {t`Add value`}\n                            </ButtonDefault>\n                        </Cell>\n                    </Grid>\n                );\n            }}\n        </Bind>\n    );\n};\n\nexport default DynamicSection;\n"],"file":"DynamicSection.js"}