import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";

var _templateObject, _templateObject2, _templateObject3, _templateObject4;

import React from "react";
import dotProp from "dot-prop-immutable";
import { i18n } from "@webiny/app/i18n";
import { Cell, GridInner } from "@webiny/ui/Grid";
import { imageWrapperStyles } from "./utils";
import { FileManager } from "@webiny/app-admin/components";
import styled from "@emotion/styled";
import File from "./File";
import { FormElementMessage } from "@webiny/ui/FormElementMessage";
var t = i18n.ns("app-headless-cms/admin/fields/file");
var FileUploadWrapper = /*#__PURE__*/styled("div", {
  target: "eq80mh0",
  label: "FileUploadWrapper"
})({
  position: "relative",
  ".disabled": {
    opacity: 0.75,
    pointerEvents: "none"
  },
  ".mdc-text-field-helper-text": {
    color: "var(--mdc-theme-text-secondary-on-background)"
  }
});

function FieldRenderer(_ref) {
  var getBind = _ref.getBind,
      Label = _ref.Label,
      field = _ref.field;
  var Bind = getBind();
  return /*#__PURE__*/React.createElement(Bind, null, function (_ref2) {
    var value = _ref2.value,
        onChange = _ref2.onChange,
        validation = _ref2.validation;
    return /*#__PURE__*/React.createElement(FileUploadWrapper, {
      className: imageWrapperStyles
    }, /*#__PURE__*/React.createElement(FileManager, {
      multiple: true
    }, function (_ref3) {
      var showFileManager = _ref3.showFileManager;

      var selectFiles = function selectFiles() {
        var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
        showFileManager(function (files) {
          if (!files) {
            return;
          }

          var urls = files.map(function (f) {
            return f.src;
          });

          if (index === -1) {
            onChange([].concat(_toConsumableArray(value || []), _toConsumableArray(urls)));
          } else {
            onChange([].concat(_toConsumableArray(value.slice(0, index)), _toConsumableArray(urls), _toConsumableArray(value.slice(index + 1))));
          }
        });
      };

      return /*#__PURE__*/React.createElement(GridInner, null, /*#__PURE__*/React.createElement(Cell, {
        span: 12
      }, /*#__PURE__*/React.createElement(Label, null, field.label)), value.map(function (url, index) {
        return /*#__PURE__*/React.createElement(Cell, {
          span: 3,
          key: url
        }, /*#__PURE__*/React.createElement(File, {
          url: url,
          showFileManager: function showFileManager() {
            return selectFiles(index);
          },
          onRemove: function onRemove() {
            return onChange(dotProp.delete(value, index));
          },
          placeholder: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Select a file\""])))
        }));
      }), /*#__PURE__*/React.createElement(Cell, {
        span: 3
      }, /*#__PURE__*/React.createElement(File, {
        showFileManager: function showFileManager() {
          return selectFiles();
        },
        placeholder: t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Select a file\""])))
      })), validation.isValid === false && /*#__PURE__*/React.createElement(Cell, {
        span: 12
      }, /*#__PURE__*/React.createElement(FormElementMessage, {
        error: true
      }, validation.message)));
    }));
  });
}

FieldRenderer.defaultProps = {
  validation: {
    isValid: null
  },
  styles: {
    width: "100%",
    height: "auto"
  }
};
var plugin = {
  type: "cms-editor-field-renderer",
  name: "cms-editor-field-renderer-files",
  renderer: {
    rendererName: "file-inputs",
    name: t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["File Inputs"]))),
    description: t(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Enables selecting multiple files via File Manager."]))),
    canUse: function canUse(_ref4) {
      var field = _ref4.field;
      return field.type === "file" && field.multipleValues;
    },
    render: function render(_ref5) {
      var field = _ref5.field,
          getBind = _ref5.getBind,
          Label = _ref5.Label;
      return /*#__PURE__*/React.createElement(FieldRenderer, {
        field: field,
        getBind: getBind,
        Label: Label
      });
    }
  }
};
export default plugin;
//# sourceMappingURL=fileFields.js.map