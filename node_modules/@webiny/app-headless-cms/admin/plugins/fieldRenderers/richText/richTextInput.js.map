{"version":3,"sources":["../../../../../src/admin/plugins/fieldRenderers/richText/richTextInput.tsx"],"names":["React","useMemo","get","i18n","createPropsFromConfig","RichTextEditor","plugins","t","ns","getKey","field","bind","formId","form","state","data","id","fieldId","plugin","type","name","renderer","rendererName","description","canUse","multipleValues","render","getBind","Bind","rteProps","byType","map","pl","config","onChange","label","placeholderText","helpText"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,SAASC,qBAAT,EAAgCC,cAAhC,QAAsD,6CAAtD;AACA,SAASC,OAAT,QAAwB,iBAAxB;AAEA,IAAMC,CAAC,GAAGJ,IAAI,CAACK,EAAL,CAAQ,yCAAR,CAAV;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAQC,IAAR,EAAiB;AAC5B,MAAMC,MAAM,GAAGD,IAAI,CAACE,IAAL,CAAUC,KAAV,CAAgBC,IAAhB,CAAqBC,EAArB,IAA2B,KAA1C;AACA,mBAAUJ,MAAV,cAAoBF,KAAK,CAACO,OAA1B;AACH,CAHD;;AAKA,IAAMC,MAAoC,GAAG;AACzCC,EAAAA,IAAI,EAAE,2BADmC;AAEzCC,EAAAA,IAAI,EAAE,qCAFmC;AAGzCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,YAAY,EAAE,iBADR;AAENF,IAAAA,IAAI,EAAEb,CAAF,oFAFE;AAGNgB,IAAAA,WAAW,EAAEhB,CAAF,kGAHL;AAINiB,IAAAA,MAJM,wBAIY;AAAA,UAATd,KAAS,QAATA,KAAS;AACd,aACIA,KAAK,CAACS,IAAN,KAAe,WAAf,IACA,CAACT,KAAK,CAACe,cADP,IAEA,CAACvB,GAAG,CAACQ,KAAD,EAAQ,0BAAR,CAHR;AAKH,KAVK;AAWNgB,IAAAA,MAXM,yBAWqB;AAAA,UAAlBhB,KAAkB,SAAlBA,KAAkB;AAAA,UAAXiB,OAAW,SAAXA,OAAW;AACvB,UAAMC,IAAI,GAAGD,OAAO,EAApB;AAEA,UAAME,QAAQ,GAAG5B,OAAO,CAAC,YAAM;AAC3B,eAAOG,qBAAqB,CAACE,OAAO,CAACwB,MAAR,CAAe,gBAAf,EAAiCC,GAAjC,CAAqC,UAAAC,EAAE;AAAA,iBAAIA,EAAE,CAACC,MAAP;AAAA,SAAvC,CAAD,CAA5B;AACH,OAFuB,EAErB,EAFqB,CAAxB;AAIA,0BACI,oBAAC,IAAD,QACK,UAAAtB,IAAI;AAAA,4BACD,oBAAC,cAAD;AACI,UAAA,GAAG,EAAEF,MAAM,CAACC,KAAD,EAAQC,IAAR;AADf,WAEQkB,QAFR,EAGQlB,IAHR;AAII,UAAA,QAAQ,EAAEA,IAAI,CAACuB,QAJnB;AAKI,UAAA,KAAK,EAAExB,KAAK,CAACyB,KALjB;AAMI,UAAA,WAAW,EAAEzB,KAAK,CAAC0B,eANvB;AAOI,UAAA,WAAW,EAAE1B,KAAK,CAAC2B;AAPvB,WADC;AAAA,OADT,CADJ;AAeH;AAjCK;AAH+B,CAA7C;AAwCA,eAAenB,MAAf","sourcesContent":["import React, { useMemo } from \"react\";\nimport get from \"lodash/get\";\nimport { i18n } from \"@webiny/app/i18n\";\nimport { CmsEditorFieldRendererPlugin } from \"~/types\";\nimport { createPropsFromConfig, RichTextEditor } from \"@webiny/app-admin/components/RichTextEditor\";\nimport { plugins } from \"@webiny/plugins\";\n\nconst t = i18n.ns(\"app-headless-cms/admin/fields/rich-text\");\n\nconst getKey = (field, bind) => {\n    const formId = bind.form.state.data.id || \"new\";\n    return `${formId}.${field.fieldId}`;\n};\n\nconst plugin: CmsEditorFieldRendererPlugin = {\n    type: \"cms-editor-field-renderer\",\n    name: \"cms-editor-field-renderer-rich-text\",\n    renderer: {\n        rendererName: \"rich-text-input\",\n        name: t`Rich Text Input`,\n        description: t`Renders a rich text editor.`,\n        canUse({ field }) {\n            return (\n                field.type === \"rich-text\" &&\n                !field.multipleValues &&\n                !get(field, \"predefinedValues.enabled\")\n            );\n        },\n        render({ field, getBind }) {\n            const Bind = getBind();\n\n            const rteProps = useMemo(() => {\n                return createPropsFromConfig(plugins.byType(\"cms-rte-config\").map(pl => pl.config));\n            }, []);\n\n            return (\n                <Bind>\n                    {bind => (\n                        <RichTextEditor\n                            key={getKey(field, bind)}\n                            {...rteProps}\n                            {...bind}\n                            onChange={bind.onChange}\n                            label={field.label}\n                            placeholder={field.placeholderText}\n                            description={field.helpText}\n                        />\n                    )}\n                </Bind>\n            );\n        }\n    }\n};\n\nexport default plugin;\n"],"file":"richTextInput.js"}