import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2;

import React, { useMemo } from "react";
import get from "lodash/get";
import { i18n } from "@webiny/app/i18n";
import { ReactComponent as DeleteIcon } from "@svgr/webpack!../../../icons/close.svg";
import DynamicSection from "../DynamicSection";
import { RichTextEditor, createPropsFromConfig } from "@webiny/app-admin/components/RichTextEditor";
import { IconButton } from "@webiny/ui/Button";
import { plugins } from "@webiny/plugins";
import styled from "@emotion/styled";
var t = i18n.ns("app-headless-cms/admin/fields/rich-text");

var getKey = function getKey(field, bind, index) {
  var formId = bind.index.form.state.data.id || "new";
  return "".concat(formId, ".").concat(field.fieldId, ".").concat(index);
};

var emptyValue = [{
  type: "paragraph",
  data: {
    textAlign: "left",
    className: null,
    text: ""
  }
}];
var EditorWrapper = /*#__PURE__*/styled("div", {
  target: "es2hini0",
  label: "EditorWrapper"
})({
  position: "relative",
  "> button": {
    position: "absolute",
    top: 5,
    right: 5
  }
});
var plugin = {
  type: "cms-editor-field-renderer",
  name: "cms-editor-field-renderer-rich-text-inputs",
  renderer: {
    rendererName: "rich-text-inputs",
    name: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Rich Text Inputs"]))),
    description: t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Renders a simple list of rich text editors."]))),
    canUse: function canUse(_ref) {
      var field = _ref.field;
      return field.type === "rich-text" && field.multipleValues && !get(field, "predefinedValues.enabled");
    },
    render: function render(props) {
      var field = props.field;
      var rteProps = useMemo(function () {
        return createPropsFromConfig(plugins.byType("cms-rte-config").map(function (pl) {
          return pl.config;
        }));
      }, []);
      return /*#__PURE__*/React.createElement(DynamicSection, Object.assign({}, props, {
        emptyValue: emptyValue
      }), function (_ref2) {
        var bind = _ref2.bind,
            index = _ref2.index;
        return /*#__PURE__*/React.createElement(EditorWrapper, null, index > 0 && /*#__PURE__*/React.createElement(IconButton, {
          icon: /*#__PURE__*/React.createElement(DeleteIcon, null),
          onClick: function onClick() {
            return bind.field.removeValue(index);
          }
        }), /*#__PURE__*/React.createElement(RichTextEditor, Object.assign({
          key: getKey(field, bind, index)
        }, rteProps, bind.index, {
          label: "Value ".concat(index + 1),
          placeholder: field.placeholderText,
          description: field.helpText
        })));
      });
    }
  }
};
export default plugin;
//# sourceMappingURL=richTextInputs.js.map