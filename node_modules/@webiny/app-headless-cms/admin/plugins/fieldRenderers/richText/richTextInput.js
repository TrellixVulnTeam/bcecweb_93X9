import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2;

import React, { useMemo } from "react";
import get from "lodash/get";
import { i18n } from "@webiny/app/i18n";
import { createPropsFromConfig, RichTextEditor } from "@webiny/app-admin/components/RichTextEditor";
import { plugins } from "@webiny/plugins";
var t = i18n.ns("app-headless-cms/admin/fields/rich-text");

var getKey = function getKey(field, bind) {
  var formId = bind.form.state.data.id || "new";
  return "".concat(formId, ".").concat(field.fieldId);
};

var plugin = {
  type: "cms-editor-field-renderer",
  name: "cms-editor-field-renderer-rich-text",
  renderer: {
    rendererName: "rich-text-input",
    name: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Rich Text Input"]))),
    description: t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Renders a rich text editor."]))),
    canUse: function canUse(_ref) {
      var field = _ref.field;
      return field.type === "rich-text" && !field.multipleValues && !get(field, "predefinedValues.enabled");
    },
    render: function render(_ref2) {
      var field = _ref2.field,
          getBind = _ref2.getBind;
      var Bind = getBind();
      var rteProps = useMemo(function () {
        return createPropsFromConfig(plugins.byType("cms-rte-config").map(function (pl) {
          return pl.config;
        }));
      }, []);
      return /*#__PURE__*/React.createElement(Bind, null, function (bind) {
        return /*#__PURE__*/React.createElement(RichTextEditor, Object.assign({
          key: getKey(field, bind)
        }, rteProps, bind, {
          onChange: bind.onChange,
          label: field.label,
          placeholder: field.placeholderText,
          description: field.helpText
        }));
      });
    }
  }
};
export default plugin;
//# sourceMappingURL=richTextInput.js.map