import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useState, useEffect } from "react";
import Input from "./Input";
import Select from "./Select";
import { Grid, Cell } from "@webiny/ui/Grid";
import { UTC_TIMEZONES, DEFAULT_TIME, DEFAULT_DATE, DEFAULT_TIMEZONE, RemoveFieldButton } from "./utils";

var parseDateTime = function parseDateTime(value) {
  if (!value || typeof value !== "string") {
    return {};
  }

  var _value$split = value.split("T"),
      _value$split2 = _slicedToArray(_value$split, 2),
      formattedDate = _value$split2[0],
      rest = _value$split2[1];

  if (!formattedDate || !rest) {
    throw new Error("Could not extract date and time from \"".concat(value, "\"."));
  }

  return {
    formattedDate: formattedDate,
    rest: rest
  };
};

var parseTime = function parseTime(value) {
  if (!value) {
    return {};
  }

  var sign = value.includes("+") ? "+" : "-";

  var _value$split3 = value.split(sign),
      _value$split4 = _slicedToArray(_value$split3, 2),
      fullTime = _value$split4[0],
      zone = _value$split4[1];

  return {
    formattedTime: fullTime,
    formattedTimezone: sign + zone
  };
};

var DateTimeWithTimezone = function DateTimeWithTimezone(_ref) {
  var bind = _ref.bind,
      trailingIcon = _ref.trailingIcon,
      field = _ref.field;

  // "2020-05-18T09:00+10:00"
  var _parseDateTime = parseDateTime(bind.value),
      formattedDate = _parseDateTime.formattedDate,
      rest = _parseDateTime.rest;

  var _parseTime = parseTime(rest),
      formattedTime = _parseTime.formattedTime,
      formattedTimezone = _parseTime.formattedTimezone;

  var _useState = useState({
    date: formattedDate || DEFAULT_DATE,
    time: formattedTime || DEFAULT_TIME,
    timezone: formattedTimezone || DEFAULT_TIMEZONE
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var date = state.date,
      time = state.time,
      timezone = state.timezone;
  useEffect(function () {
    if (!formattedDate || !formattedTime || !formattedTimezone) {
      return;
    }

    setState(function () {
      return {
        date: formattedDate,
        time: formattedTime,
        timezone: formattedTimezone
      };
    });
  }, [formattedDate, formattedTime, formattedTimezone]);
  var cellSize = trailingIcon ? 3 : 4;
  return /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
    span: 4
  }, /*#__PURE__*/React.createElement(Input, {
    bind: _objectSpread(_objectSpread({}, bind), {}, {
      value: date,
      onChange: function onChange(value) {
        setState(function (prev) {
          return _objectSpread(_objectSpread({}, prev), {}, {
            date: value
          });
        });
        return bind.onChange("".concat(value, "T").concat(time).concat(timezone));
      }
    }),
    field: _objectSpread(_objectSpread({}, field), {}, {
      label: "".concat(field.label, " date")
    }),
    type: "date"
  })), /*#__PURE__*/React.createElement(Cell, {
    span: 4
  }, /*#__PURE__*/React.createElement(Input, {
    bind: _objectSpread(_objectSpread({}, bind), {}, {
      value: time,
      onChange: function onChange(value) {
        setState(function (prev) {
          return _objectSpread(_objectSpread({}, prev), {}, {
            time: value
          });
        });
        return bind.onChange("".concat(date, "T").concat(value).concat(timezone));
      }
    }),
    field: _objectSpread(_objectSpread({}, field), {}, {
      label: "".concat(field.label, " time")
    }),
    type: "time",
    step: 5
  })), /*#__PURE__*/React.createElement(Cell, {
    span: cellSize
  }, /*#__PURE__*/React.createElement(Select, {
    label: "Timezone",
    value: timezone,
    onChange: function onChange(value) {
      setState(function (prev) {
        return _objectSpread(_objectSpread({}, prev), {}, {
          timezone: value
        });
      });
      return bind.onChange("".concat(date, "T").concat(time).concat(value));
    },
    options: UTC_TIMEZONES.map(function (t) {
      return {
        value: t.value,
        label: t.label
      };
    })
  })), /*#__PURE__*/React.createElement(RemoveFieldButton, {
    trailingIcon: trailingIcon
  }));
};

export default DateTimeWithTimezone;
//# sourceMappingURL=DateTimeWithTimezone.js.map