import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;

import React from "react";
import get from "lodash/get";
import { i18n } from "@webiny/app/i18n";
import { ReactComponent as DeleteIcon } from "@svgr/webpack!../../../icons/close.svg";
import DynamicSection from "../DynamicSection";
import DateTimeWithoutTimezone from "./DateTimeWithoutTimezone";
import DateTimeWithTimezone from "./DateTimeWithTimezone";
import Time from "./Time";
import Input from "./Input";
var t = i18n.ns("app-headless-cms/admin/fields/date-time");
var plugin = {
  type: "cms-editor-field-renderer",
  name: "cms-editor-field-renderer-date-times",
  renderer: {
    rendererName: "date-time-inputs",
    name: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Date/Time Inputs"]))),
    description: t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Renders inputs for various formats of dates and times."]))),
    canUse: function canUse(_ref) {
      var field = _ref.field;
      return field.type === "datetime" && field.multipleValues && !get(field, "predefinedValues.enabled");
    },
    render: function render(props) {
      var field = props.field;
      return /*#__PURE__*/React.createElement(DynamicSection, props, function (_ref2) {
        var bind = _ref2.bind,
            index = _ref2.index;
        var trailingIcon = index > 0 && {
          icon: /*#__PURE__*/React.createElement(DeleteIcon, null),
          onClick: function onClick() {
            return bind.field.removeValue(index);
          }
        };

        if (field.settings.type === "dateTimeWithoutTimezone") {
          return /*#__PURE__*/React.createElement(DateTimeWithoutTimezone, {
            field: field,
            bind: bind.index,
            trailingIcon: trailingIcon
          });
        }

        if (field.settings.type === "dateTimeWithTimezone") {
          return /*#__PURE__*/React.createElement(DateTimeWithTimezone, {
            field: field,
            bind: bind.index,
            trailingIcon: trailingIcon
          });
        }

        if (field.settings.type === "time") {
          return /*#__PURE__*/React.createElement(Time, {
            field: _objectSpread(_objectSpread({}, props.field), {}, {
              label: props.field.label + t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([" Value {number}"])))({
                number: index + 1
              })
            }),
            bind: bind.index,
            label: t(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Value {number}"])))({
              number: index + 1
            }),
            trailingIcon: trailingIcon
          });
        }

        return /*#__PURE__*/React.createElement(Input, {
          bind: bind.index,
          field: _objectSpread(_objectSpread({}, props.field), {}, {
            label: props.field.label + t(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([" Value {number}"])))({
              number: index + 1
            })
          }),
          type: field.settings.type,
          trailingIcon: trailingIcon
        });
      });
    }
  }
};
export default plugin;
//# sourceMappingURL=dateTimeFields.js.map