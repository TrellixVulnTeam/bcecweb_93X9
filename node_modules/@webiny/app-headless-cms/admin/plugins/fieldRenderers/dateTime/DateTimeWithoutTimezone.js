import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useEffect, useState } from "react";
import { Grid, Cell } from "@webiny/ui/Grid";
import { DEFAULT_DATE, DEFAULT_TIME, RemoveFieldButton } from "./utils";
import Input from "./Input";

var parseDateTime = function parseDateTime(value) {
  if (!value) {
    return {};
  }

  if (value.includes("T")) {
    var _value$split$0$split = value.split(".")[0].split("T"),
        _value$split$0$split2 = _slicedToArray(_value$split$0$split, 2),
        _formattedDate = _value$split$0$split2[0],
        _formattedTime = _value$split$0$split2[1];

    return {
      formattedDate: _formattedDate,
      formattedTime: _formattedTime
    };
  }

  var _value$split = value.split(" "),
      _value$split2 = _slicedToArray(_value$split, 2),
      formattedDate = _value$split2[0],
      formattedTime = _value$split2[1];

  if (!formattedDate || !formattedTime) {
    throw new Error("Could not extract date and time from \"".concat(value, "\"."));
  }

  return {
    formattedDate: formattedDate,
    formattedTime: formattedTime
  };
};

var DateTimeWithoutTimezone = function DateTimeWithoutTimezone(_ref) {
  var field = _ref.field,
      bind = _ref.bind,
      trailingIcon = _ref.trailingIcon;

  // "2020-05-18 09:00:00"
  var _parseDateTime = parseDateTime(bind.value),
      formattedDate = _parseDateTime.formattedDate,
      formattedTime = _parseDateTime.formattedTime;

  var _useState = useState({
    date: formattedDate || DEFAULT_DATE,
    time: formattedTime || DEFAULT_TIME
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var date = state.date,
      time = state.time;
  useEffect(function () {
    if (!formattedDate || !formattedTime) {
      return;
    }

    setState(function () {
      return {
        date: formattedDate,
        time: formattedTime
      };
    });
  }, [formattedDate, formattedTime]);
  var cellSize = trailingIcon ? 5 : 6;
  return /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
    span: 6
  }, /*#__PURE__*/React.createElement(Input, {
    bind: _objectSpread(_objectSpread({}, bind), {}, {
      value: date,
      onChange: function onChange(value) {
        setState(function (prev) {
          return _objectSpread(_objectSpread({}, prev), {}, {
            date: value
          });
        });
        return bind.onChange("".concat(value, " ").concat(time));
      }
    }),
    field: _objectSpread(_objectSpread({}, field), {}, {
      label: "".concat(field.label, " date")
    }),
    type: "date"
  })), /*#__PURE__*/React.createElement(Cell, {
    span: cellSize
  }, /*#__PURE__*/React.createElement(Input, {
    bind: _objectSpread(_objectSpread({}, bind), {}, {
      value: time,
      onChange: function onChange(value) {
        setState(function (prev) {
          return _objectSpread(_objectSpread({}, prev), {}, {
            time: value
          });
        });
        return bind.onChange("".concat(date, " ").concat(value));
      }
    }),
    field: _objectSpread(_objectSpread({}, field), {}, {
      label: "".concat(field.label, " time")
    }),
    type: "time",
    step: 5
  })), /*#__PURE__*/React.createElement(RemoveFieldButton, {
    trailingIcon: trailingIcon
  }));
};

export default DateTimeWithoutTimezone;
//# sourceMappingURL=DateTimeWithoutTimezone.js.map