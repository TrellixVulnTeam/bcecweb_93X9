{"version":3,"sources":["../../../../../src/admin/plugins/fieldRenderers/dateTime/DateTimeWithTimezone.tsx"],"names":["React","useState","useEffect","Input","Select","Grid","Cell","UTC_TIMEZONES","DEFAULT_TIME","DEFAULT_DATE","DEFAULT_TIMEZONE","RemoveFieldButton","parseDateTime","value","split","formattedDate","rest","Error","parseTime","sign","includes","fullTime","zone","formattedTime","formattedTimezone","DateTimeWithTimezone","bind","trailingIcon","field","date","time","timezone","state","setState","cellSize","onChange","prev","label","map","t"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Input from \"./Input\";\nimport Select from \"./Select\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport {\n    UTC_TIMEZONES,\n    DEFAULT_TIME,\n    DEFAULT_DATE,\n    DEFAULT_TIMEZONE,\n    RemoveFieldButton\n} from \"./utils\";\nimport { CmsEditorField } from \"~/types\";\n\ninterface DateTimeWithTimezoneProps {\n    bind: any;\n    trailingIcon?: any;\n    field: CmsEditorField;\n}\ninterface DateTimeWithTimezoneState {\n    date: string;\n    time: string;\n    timezone: string;\n}\nconst parseDateTime = (value?: string) => {\n    if (!value || typeof value !== \"string\") {\n        return {};\n    }\n    const [formattedDate, rest] = value.split(\"T\");\n    if (!formattedDate || !rest) {\n        throw new Error(`Could not extract date and time from \"${value}\".`);\n    }\n    return {\n        formattedDate,\n        rest\n    };\n};\n\nconst parseTime = (value?: string) => {\n    if (!value) {\n        return {};\n    }\n    const sign = value.includes(\"+\") ? \"+\" : \"-\";\n    const [fullTime, zone] = value.split(sign);\n\n    return {\n        formattedTime: fullTime,\n        formattedTimezone: sign + zone\n    };\n};\n\nconst DateTimeWithTimezone: React.FunctionComponent<DateTimeWithTimezoneProps> = ({\n    bind,\n    trailingIcon,\n    field\n}) => {\n    // \"2020-05-18T09:00+10:00\"\n    const { formattedDate, rest } = parseDateTime(bind.value);\n    const { formattedTime, formattedTimezone } = parseTime(rest);\n    const [state, setState] = useState<DateTimeWithTimezoneState>({\n        date: formattedDate || DEFAULT_DATE,\n        time: formattedTime || DEFAULT_TIME,\n        timezone: formattedTimezone || DEFAULT_TIMEZONE\n    });\n    const { date, time, timezone } = state;\n\n    useEffect(() => {\n        if (!formattedDate || !formattedTime || !formattedTimezone) {\n            return;\n        }\n        setState(() => ({\n            date: formattedDate,\n            time: formattedTime,\n            timezone: formattedTimezone\n        }));\n    }, [formattedDate, formattedTime, formattedTimezone]);\n\n    const cellSize = trailingIcon ? 3 : 4;\n\n    return (\n        <Grid>\n            <Cell span={4}>\n                <Input\n                    bind={{\n                        ...bind,\n                        value: date,\n                        onChange: value => {\n                            setState(prev => ({\n                                ...prev,\n                                date: value\n                            }));\n                            return bind.onChange(`${value}T${time}${timezone}`);\n                        }\n                    }}\n                    field={{\n                        ...field,\n                        label: `${field.label} date`\n                    }}\n                    type={\"date\"}\n                />\n            </Cell>\n            <Cell span={4}>\n                <Input\n                    bind={{\n                        ...bind,\n                        value: time,\n                        onChange: value => {\n                            setState(prev => ({\n                                ...prev,\n                                time: value\n                            }));\n                            return bind.onChange(`${date}T${value}${timezone}`);\n                        }\n                    }}\n                    field={{\n                        ...field,\n                        label: `${field.label} time`\n                    }}\n                    type={\"time\"}\n                    step={5}\n                />\n            </Cell>\n            <Cell span={cellSize}>\n                <Select\n                    label=\"Timezone\"\n                    value={timezone}\n                    onChange={value => {\n                        setState(prev => ({\n                            ...prev,\n                            timezone: value\n                        }));\n                        return bind.onChange(`${date}T${time}${value}`);\n                    }}\n                    options={UTC_TIMEZONES.map(t => ({ value: t.value, label: t.label }))}\n                />\n            </Cell>\n            <RemoveFieldButton trailingIcon={trailingIcon} />\n        </Grid>\n    );\n};\n\nexport default DateTimeWithTimezone;\n"],"file":"DateTimeWithTimezone.js"}