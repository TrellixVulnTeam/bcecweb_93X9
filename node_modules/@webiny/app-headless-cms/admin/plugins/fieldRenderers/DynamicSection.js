import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject;

import React from "react";
import { css } from "emotion";
import { i18n } from "@webiny/app/i18n";
import { Cell, Grid } from "@webiny/ui/Grid";
import { ButtonDefault, ButtonIcon } from "@webiny/ui/Button";
import { FormElementMessage } from "@webiny/ui/FormElementMessage";
import { ReactComponent as AddIcon } from "@svgr/webpack!@webiny/app-admin/assets/icons/add-18px.svg";
var t = i18n.ns("app-headless-cms/admin/fields/text");
var style = {
  addButton: /*#__PURE__*/css({
    width: "100%",
    borderTop: "1px solid var(--mdc-theme-background)",
    paddingTop: 8
  }, "label:addButton;")
};

var DynamicSection = function DynamicSection(_ref) {
  var field = _ref.field,
      getBind = _ref.getBind,
      Label = _ref.Label,
      children = _ref.children,
      _ref$showLabel = _ref.showLabel,
      showLabel = _ref$showLabel === void 0 ? true : _ref$showLabel,
      _ref$emptyValue = _ref.emptyValue,
      emptyValue = _ref$emptyValue === void 0 ? "" : _ref$emptyValue,
      renderTitle = _ref.renderTitle,
      gridClassName = _ref.gridClassName;
  var Bind = getBind();
  var FirstFieldBind = getBind(0);
  return (
    /*#__PURE__*/

    /* First we mount the top level field, for example: "items" */
    React.createElement(Bind, null, function (bindField) {
      /**
       * "value" -> an array of items
       * "appendValue" -> a callback to add a new value to the top level "items" array
       */
      var value = bindField.value,
          appendValue = bindField.appendValue;
      var bindFieldValue = value || [];
      return /*#__PURE__*/React.createElement(Grid, {
        className: gridClassName
      }, typeof renderTitle === "function" && renderTitle(bindFieldValue), /*#__PURE__*/React.createElement(Cell, {
        span: 12
      }, showLabel && field.label && /*#__PURE__*/React.createElement(Label, null, field.label), /*#__PURE__*/React.createElement(FirstFieldBind, null, function (bindIndex) {
        return (
          /* We bind it to index "0", so when you start typing, that index in parent array will be populated */
          children({
            Bind: FirstFieldBind,
            field: field,
            // "index" contains Bind props for this particular item in the array
            // "field" contains Bind props for the main (parent) field.
            bind: {
              index: bindIndex,
              field: bindField
            },
            index: 0 // Binds to "items.0" in the <Form>.

          })
        );
      })), bindFieldValue.slice(1).map(function (item, index) {
        /* We simply increase index, and as you type, the appropriate indexes in the parent array will be updated. */
        var realIndex = index + 1;
        var BindField = getBind(realIndex);
        return /*#__PURE__*/React.createElement(Cell, {
          span: 12,
          key: realIndex
        }, /*#__PURE__*/React.createElement(BindField, null, function (bindIndex) {
          return children({
            Bind: BindField,
            field: field,
            bind: {
              index: bindIndex,
              field: bindField
            },
            index: realIndex
          });
        }));
      }), bindField.validation.isValid === false && /*#__PURE__*/React.createElement(Cell, {
        span: 12
      }, /*#__PURE__*/React.createElement(FormElementMessage, {
        error: true
      }, bindField.validation.message)), /*#__PURE__*/React.createElement(Cell, {
        span: 12,
        className: style.addButton
      }, /*#__PURE__*/React.createElement(ButtonDefault, {
        disabled: bindFieldValue[0] === undefined,
        onClick: function onClick() {
          return appendValue(emptyValue);
        }
      }, /*#__PURE__*/React.createElement(ButtonIcon, {
        icon: /*#__PURE__*/React.createElement(AddIcon, null)
      }), t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Add value"]))))));
    })
  );
};

export default DynamicSection;
//# sourceMappingURL=DynamicSection.js.map