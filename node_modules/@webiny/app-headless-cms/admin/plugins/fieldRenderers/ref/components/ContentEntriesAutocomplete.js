import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2;

import React from "react";
import debounce from "lodash/debounce";
import { AutoComplete } from "@webiny/ui/AutoComplete";
import { i18n } from "@webiny/app/i18n";
import { Link } from "@webiny/react-router";
import { useReference } from "./useReference";
import { renderItem } from "./renderItem";
var t = i18n.ns("app-headless-cms/admin/fields/ref");
var label = t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Selected content entry is not published. Make sure to {publishItLink} before publishing the main content entry."])));

function ContentEntriesAutocomplete(_ref) {
  var bind = _ref.bind,
      field = _ref.field;

  var _useReference = useReference({
    bind: bind,
    field: field
  }),
      options = _useReference.options,
      setSearch = _useReference.setSearch,
      value = _useReference.value,
      loading = _useReference.loading,
      onChange = _useReference.onChange;

  var unpublishedEntryInfo = null;

  if (value && !value.published) {
    var link = "/cms/content-entries/".concat(value.modelId, "?id=").concat(encodeURIComponent(value.id));
    unpublishedEntryInfo = label({
      publishItLink: /*#__PURE__*/React.createElement(Link, {
        to: link
      }, t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["publish it"]))))
    });
  }

  return /*#__PURE__*/React.createElement(AutoComplete, Object.assign({}, bind, {
    renderItem: renderItem,
    onChange: onChange,
    loading: loading,
    value: value ? value.id : null,
    options: options,
    label: field.label,
    description: /*#__PURE__*/React.createElement(React.Fragment, null, field.helpText, unpublishedEntryInfo),
    onInput: debounce(function (search) {
      return setSearch(search);
    }, 250)
  }));
}

export default ContentEntriesAutocomplete;
//# sourceMappingURL=ContentEntriesAutocomplete.js.map