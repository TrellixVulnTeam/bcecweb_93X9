{"version":3,"sources":["../../../../../../src/admin/plugins/fieldRenderers/ref/components/useReference.ts"],"names":["useCallback","useEffect","useMemo","useRef","useState","useApolloClient","GQL","getOptions","convertQueryDataToEntryList","data","reduce","collection","entry","id","convertValueEntryToData","model","modelId","name","modelName","status","published","title","convertDataEntryToValue","assignValueEntry","useReference","bind","field","allEntries","client","search","setSearch","loading","setLoading","entries","setEntries","latestEntries","setLatestEntries","valueEntry","setValueEntry","models","settings","modelsHash","join","value","valueHash","searchEntries","query","SEARCH_CONTENT_ENTRIES","variables","modelIds","map","m","content","Object","assign","current","limit","then","latestEntryData","GET_CONTENT_ENTRY","entryId","res","dataEntry","prev","onChange","options","values","defaultOptions","outputOptions","some","opt","push"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { useApolloClient } from \"~/admin/hooks\";\nimport * as GQL from \"./graphql\";\nimport { getOptions } from \"./getOptions\";\nimport { CmsEditorField } from \"~/types\";\n\ninterface ValueEntry {\n    id: string;\n    modelId: string;\n    modelName: string;\n    published: boolean;\n    name: string;\n}\ninterface DataEntry {\n    id: string;\n    model: {\n        modelId: string;\n        name: string;\n    };\n    status: \"published\" | \"draft\";\n    title: string;\n}\ninterface UseReferenceHookArgs {\n    bind: any;\n    field: CmsEditorField;\n}\ninterface UseReferenceHookValue {\n    onChange: (value: any, entry: ValueEntry) => void;\n    setSearch: (value: string) => void;\n    value: ValueEntry | null;\n    loading: boolean;\n    options: ValueEntry[];\n}\ntype UseReferenceHook = (args: UseReferenceHookArgs) => UseReferenceHookValue;\n\ntype EntryCollection = Record<string, DataEntry>;\n\nconst convertQueryDataToEntryList = (data: DataEntry[]): EntryCollection => {\n    return data.reduce((collection, entry) => {\n        collection[entry.id] = entry;\n        return collection;\n    }, {});\n};\n\nconst convertValueEntryToData = (entry: ValueEntry): DataEntry => {\n    return {\n        id: entry.id,\n        model: {\n            modelId: entry.modelId,\n            name: entry.modelName\n        },\n        status: entry.published ? \"published\" : \"draft\",\n        title: entry.name\n    };\n};\n\nconst convertDataEntryToValue = (entry: DataEntry): ValueEntry => {\n    return {\n        id: entry.id,\n        modelId: entry.model.modelId,\n        modelName: entry.model.name,\n        published: entry.status === \"published\",\n        name: entry.title\n    };\n};\n\nconst assignValueEntry = (entry: ValueEntry | null, collection: EntryCollection): void => {\n    if (!entry) {\n        return;\n    }\n    collection[entry.id] = convertValueEntryToData(entry);\n};\n\nexport const useReference: UseReferenceHook = ({ bind, field }) => {\n    const allEntries = useRef<EntryCollection>({});\n    const client = useApolloClient();\n    const [search, setSearch] = useState<string>(\"\");\n    const [loading, setLoading] = useState<boolean>(false);\n    const [entries, setEntries] = useState<EntryCollection>({});\n    const [latestEntries, setLatestEntries] = useState<EntryCollection>({});\n    const [valueEntry, setValueEntry] = useState<ValueEntry>(null);\n\n    const { models } = field.settings;\n    const modelsHash = models.join(\",\");\n\n    const value = bind.value;\n    const valueHash = value ? value.id : null;\n\n    const searchEntries = async () => {\n        if (!search) {\n            return;\n        }\n\n        setLoading(true);\n        const { data } = await client.query({\n            query: GQL.SEARCH_CONTENT_ENTRIES,\n            variables: { modelIds: models.map(m => m.modelId), query: search }\n        });\n\n        setLoading(false);\n\n        const searchEntries = convertQueryDataToEntryList(data.content.data);\n        assignValueEntry(valueEntry, searchEntries);\n        Object.assign(allEntries.current, searchEntries);\n\n        setEntries(searchEntries);\n    };\n\n    useEffect(() => {\n        searchEntries();\n    }, [search]);\n\n    useEffect(() => {\n        client\n            .query({\n                query: GQL.SEARCH_CONTENT_ENTRIES,\n                variables: {\n                    modelIds: models.map(m => m.modelId),\n                    query: \"__latest__\",\n                    limit: 10\n                }\n            })\n            .then(({ data }) => {\n                const latestEntryData = convertQueryDataToEntryList(data.content.data);\n                assignValueEntry(valueEntry, latestEntryData);\n\n                setLatestEntries(latestEntryData);\n                Object.assign(allEntries.current, latestEntryData);\n            });\n    }, [modelsHash]);\n\n    useEffect(() => {\n        if (!value || !models) {\n            setValueEntry(() => null);\n            return;\n        }\n\n        const entry = allEntries.current[valueHash];\n        if (entry) {\n            // if entry exists set valueEntry to that one so we do not load new one\n            setValueEntry(() => {\n                return convertDataEntryToValue(entry);\n            });\n            return;\n        }\n\n        setLoading(true);\n        client\n            .query({\n                query: GQL.GET_CONTENT_ENTRY,\n                variables: { entry: { modelId: value.modelId, entryId: value.entryId } }\n            })\n            .then(res => {\n                setLoading(false);\n                const dataEntry: DataEntry | null = res.data.content.data;\n                if (!dataEntry) {\n                    return;\n                }\n                allEntries.current[dataEntry.id] = dataEntry;\n                setLatestEntries(prev => {\n                    return {\n                        ...prev,\n                        [dataEntry.id]: dataEntry\n                    };\n                });\n                // Calculate a couple of props for the Autocomplete component.\n                setValueEntry(() => {\n                    return convertDataEntryToValue(dataEntry);\n                });\n            });\n    }, [valueHash, modelsHash]);\n\n    const onChange = useCallback((value, entry) => {\n        if (value !== null) {\n            setSearch(\"\");\n\n            setValueEntry(() => {\n                return entry;\n            });\n            return bind.onChange({ modelId: entry.modelId, entryId: entry.id });\n        }\n\n        setValueEntry(() => null);\n        bind.onChange(null);\n    }, []);\n\n    // Format options for the Autocomplete component.\n    const options = useMemo(() => getOptions(Object.values(entries)), [entries]);\n\n    // Format default options for the Autocomplete component.\n    const defaultOptions = useMemo(() => getOptions(Object.values(latestEntries)), [latestEntries]);\n\n    const outputOptions: ValueEntry[] = search ? options : defaultOptions || [];\n\n    if (valueEntry && outputOptions.some(opt => opt.id === valueEntry.id) === false) {\n        outputOptions.push(valueEntry);\n    }\n\n    return {\n        onChange,\n        setSearch,\n        value: valueEntry,\n        loading,\n        options: outputOptions\n    };\n};\n"],"file":"useReference.js"}