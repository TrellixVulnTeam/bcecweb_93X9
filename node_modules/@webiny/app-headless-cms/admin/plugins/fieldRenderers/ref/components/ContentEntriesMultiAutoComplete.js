import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject;

import React from "react";
import debounce from "lodash/debounce";
import { MultiAutoComplete } from "@webiny/ui/AutoComplete";
import { Link } from "@webiny/react-router";
import { i18n } from "@webiny/app/i18n";
import { useReferences } from "./useReferences";
import { renderItem } from "./renderItem";
var t = i18n.ns("app-headless-cms/admin/fields/ref");
var warn = t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Before publishing the main content entry, make sure you publish the following referenced entries: {entries}"])));

function ContentEntriesMultiAutocomplete(_ref) {
  var bind = _ref.bind,
      field = _ref.field;

  var _useReferences = useReferences({
    bind: bind,
    field: field
  }),
      options = _useReferences.options,
      setSearch = _useReferences.setSearch,
      entries = _useReferences.entries,
      loading = _useReferences.loading,
      onChange = _useReferences.onChange;

  var entryWarning = function entryWarning(_ref2, index) {
    var id = _ref2.id,
        modelId = _ref2.modelId,
        name = _ref2.name,
        published = _ref2.published;
    return !published && /*#__PURE__*/React.createElement(React.Fragment, {
      key: id
    }, index > 0 && ", ", /*#__PURE__*/React.createElement(Link, {
      to: "/cms/content-entries/".concat(modelId, "?id=").concat(encodeURIComponent(id))
    }, name));
  };

  var warning = entries.filter(function (item) {
    return item.published === false;
  });

  if (warning.length) {
    warning = warn({
      entries: /*#__PURE__*/React.createElement(React.Fragment, null, warning.map(entryWarning))
    });
  }

  return /*#__PURE__*/React.createElement(MultiAutoComplete, Object.assign({}, bind, {
    renderItem: renderItem,
    renderListItemLabel: renderItem,
    useMultipleSelectionList: true,
    onChange: onChange,
    loading: loading,
    value: entries,
    options: options,
    label: field.label,
    onInput: debounce(setSearch, 250),
    description: /*#__PURE__*/React.createElement(React.Fragment, null, field.helpText, warning)
  }));
}

export default ContentEntriesMultiAutocomplete;
//# sourceMappingURL=ContentEntriesMultiAutoComplete.js.map