{"version":3,"sources":["../../../../../../src/admin/plugins/fieldRenderers/ref/components/useReferences.ts"],"names":["useCallback","useEffect","useMemo","useRef","useState","useApolloClient","GQL","getOptions","distinctBy","key","array","keys","map","value","filter","index","indexOf","useReferences","bind","field","allEntries","client","search","setSearch","loading","setLoading","entries","setEntries","latestEntries","setLatestEntries","valueEntries","setValueEntries","models","settings","modelsHash","join","values","searchEntries","query","SEARCH_CONTENT_ENTRIES","variables","modelIds","m","modelId","data","current","content","limit","then","length","GET_CONTENT_ENTRIES","res","entry","id","model","modelName","name","published","status","title","onChange","item","entryId","options","defaultOptions"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { useApolloClient } from \"~/admin/hooks\";\nimport * as GQL from \"./graphql\";\nimport { getOptions } from \"./getOptions\";\n\ntype ValueEntry = {\n    id: string;\n    modelId: string;\n    modelName: string;\n    published: boolean;\n    name: string;\n};\n\nfunction distinctBy(key, array) {\n    const keys = array.map(value => value[key]);\n    return array.filter((value, index) => keys.indexOf(value[key]) === index);\n}\n\nexport const useReferences = ({ bind, field }) => {\n    const allEntries = useRef([]);\n    const client = useApolloClient();\n    const [search, setSearch] = useState(\"\");\n    const [loading, setLoading] = useState(false);\n    const [entries, setEntries] = useState([]);\n    const [latestEntries, setLatestEntries] = useState([]);\n    const [valueEntries, setValueEntries] = useState<ValueEntry[]>([]);\n\n    const { models } = field.settings;\n    const modelsHash = models.join(\",\");\n    const values = bind.value ? bind.value : [];\n\n    const searchEntries = async () => {\n        if (!search) {\n            return;\n        }\n\n        setLoading(true);\n        const { data } = await client.query({\n            query: GQL.SEARCH_CONTENT_ENTRIES,\n            variables: { modelIds: models.map(m => m.modelId), query: search }\n        });\n        setLoading(false);\n\n        allEntries.current = distinctBy(\"id\", [...allEntries.current, ...data.content.data]);\n        setEntries(data.content.data);\n    };\n\n    useEffect(() => {\n        searchEntries();\n    }, [search]);\n\n    useEffect(() => {\n        client\n            .query({\n                query: GQL.SEARCH_CONTENT_ENTRIES,\n                variables: {\n                    modelIds: models.map(m => m.modelId),\n                    query: \"__latest__\",\n                    limit: 10\n                }\n            })\n            .then(({ data }) => {\n                setLatestEntries(data.content.data);\n                allEntries.current = [...data.content.data];\n            });\n    }, [modelsHash]);\n\n    useEffect(() => {\n        if (!values || !values.length) {\n            return;\n        }\n\n        setLoading(true);\n\n        client\n            .query({ query: GQL.GET_CONTENT_ENTRIES, variables: { entries: values } })\n            .then(res => {\n                setLoading(false);\n                const entries = res.data.content.data;\n\n                // Calculate a couple of props for the Autocomplete component.\n                setValueEntries(\n                    entries.map(entry => ({\n                        id: entry.id,\n                        modelId: entry.model.modelId,\n                        modelName: entry.model.name,\n                        published: entry.status === \"published\",\n                        name: entry.title\n                    }))\n                );\n            });\n    }, []);\n\n    /**\n     * onChange callback will update internal component state using the previously loaded entries by IDs.\n     * It will also format the value to store to the DB.\n     */\n    const onChange = useCallback(values => {\n        setSearch(\"\");\n        setValueEntries(values);\n\n        // Update parent form\n        bind.onChange(values.map(item => ({ modelId: item.modelId, entryId: item.id })));\n    }, []);\n\n    // Format options for the Autocomplete component.\n    const options = useMemo(() => getOptions(entries), [entries]);\n\n    // Format default options for the Autocomplete component.\n    const defaultOptions = useMemo(() => getOptions(latestEntries), [latestEntries]);\n\n    return {\n        onChange,\n        loading,\n        setSearch,\n        // Selected entries\n        entries: valueEntries,\n        // Options to show when the autocomplete dropdown is visible\n        options: search ? options : defaultOptions || []\n    };\n};\n"],"file":"useReferences.js"}