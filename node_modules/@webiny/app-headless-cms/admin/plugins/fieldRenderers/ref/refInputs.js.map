{"version":3,"sources":["../../../../../src/admin/plugins/fieldRenderers/ref/refInputs.tsx"],"names":["React","ContentEntriesMultiAutocomplete","i18n","t","ns","getKey","field","bind","form","state","data","id","fieldId","plugin","type","name","renderer","rendererName","description","canUse","multipleValues","render","props","Bind","getBind"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,+BAAP;AAEA,SAASC,IAAT,QAAqB,kBAArB;AACA,IAAMC,CAAC,GAAGD,IAAI,CAACE,EAAL,CAAQ,mCAAR,CAAV;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAQC,IAAR,EAAiB;AAC5B,SAAOA,IAAI,CAACC,IAAL,CAAUC,KAAV,CAAgBC,IAAhB,CAAqBC,EAArB,GAA0B,GAA1B,GAAgCL,KAAK,CAACM,OAA7C;AACH,CAFD;;AAIA,IAAMC,MAAoC,GAAG;AACzCC,EAAAA,IAAI,EAAE,2BADmC;AAEzCC,EAAAA,IAAI,EAAE,sCAFmC;AAGzCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,YAAY,EAAE,YADR;AAENF,IAAAA,IAAI,EAAEZ,CAAF,qFAFE;AAGNe,IAAAA,WAAW,EAAEf,CAAF,6IAHL;AAINgB,IAAAA,MAJM,wBAIY;AAAA,UAATb,KAAS,QAATA,KAAS;AACd,aAAOA,KAAK,CAACQ,IAAN,KAAe,KAAf,IAAwBR,KAAK,CAACc,cAArC;AACH,KANK;AAONC,IAAAA,MAPM,kBAOCC,KAPD,EAOQ;AACV,UAAMC,IAAI,GAAGD,KAAK,CAACE,OAAN,EAAb;AACA,0BACI,oBAAC,IAAD,QACK,UAAAjB,IAAI;AAAA,4BACD,oBAAC,+BAAD;AACI,UAAA,GAAG,EAAEF,MAAM,CAACiB,KAAK,CAAChB,KAAP,EAAcC,IAAd;AADf,WAEQe,KAFR;AAGI,UAAA,IAAI,EAAEf;AAHV,WADC;AAAA,OADT,CADJ;AAWH;AApBK;AAH+B,CAA7C;AA2BA,eAAeM,MAAf","sourcesContent":["import React from \"react\";\nimport { CmsEditorFieldRendererPlugin } from \"~/types\";\nimport ContentEntriesMultiAutocomplete from \"./components/ContentEntriesMultiAutoComplete\";\n\nimport { i18n } from \"@webiny/app/i18n\";\nconst t = i18n.ns(\"app-headless-cms/admin/fields/ref\");\n\nconst getKey = (field, bind) => {\n    return bind.form.state.data.id + \".\" + field.fieldId;\n};\n\nconst plugin: CmsEditorFieldRendererPlugin = {\n    type: \"cms-editor-field-renderer\",\n    name: \"cms-editor-field-renderer-ref-inputs\",\n    renderer: {\n        rendererName: \"ref-inputs\",\n        name: t`Reference Inputs`,\n        description: t`Renders an auto-complete input, allowing selection of multiple values.`,\n        canUse({ field }) {\n            return field.type === \"ref\" && field.multipleValues;\n        },\n        render(props) {\n            const Bind = props.getBind();\n            return (\n                <Bind>\n                    {bind => (\n                        <ContentEntriesMultiAutocomplete\n                            key={getKey(props.field, bind)}\n                            {...props}\n                            bind={bind}\n                        />\n                    )}\n                </Bind>\n            );\n        }\n    }\n};\n\nexport default plugin;\n"],"file":"refInputs.js"}