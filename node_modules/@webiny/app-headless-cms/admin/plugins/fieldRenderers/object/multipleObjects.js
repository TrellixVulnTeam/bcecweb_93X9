import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2;

import React from "react";
import { i18n } from "@webiny/app/i18n";
import DynamicSection from "../DynamicSection";
import { Fields } from "../../../components/ContentEntryForm/Fields";
import { ReactComponent as DeleteIcon } from "@svgr/webpack!../../../icons/close.svg";
import { IconButton } from "@webiny/ui/Button";
import { Cell } from "@webiny/ui/Grid";
import { FormElementMessage } from "@webiny/ui/FormElementMessage";
import { Typography } from "@webiny/ui/Typography";
import Accordion from "../Accordion";
import { fieldsWrapperStyle, dynamicSectionTitleStyle, dynamicSectionGridStyle, fieldsGridStyle } from "./StyledComponents";
var t = i18n.ns("app-headless-cms/admin/fields/text");
var plugin = {
  type: "cms-editor-field-renderer",
  name: "cms-editor-field-renderer-objects",
  renderer: {
    rendererName: "objects",
    name: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Objects"]))),
    description: t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Renders a set of fields."]))),
    canUse: function canUse(_ref) {
      var field = _ref.field;
      return field.type === "object" && field.multipleValues;
    },
    render: function render(props) {
      var field = props.field,
          contentModel = props.contentModel;
      return /*#__PURE__*/React.createElement(DynamicSection, Object.assign({}, props, {
        emptyValue: {},
        showLabel: false,
        renderTitle: function renderTitle(value) {
          return /*#__PURE__*/React.createElement(Cell, {
            span: 12,
            className: dynamicSectionTitleStyle
          }, /*#__PURE__*/React.createElement(Typography, {
            use: "headline5"
          }, "".concat(field.label, " ").concat(value.length ? "(".concat(value.length, ")") : "")), field.helpText && /*#__PURE__*/React.createElement(FormElementMessage, null, field.helpText));
        },
        gridClassName: dynamicSectionGridStyle
      }), function (_ref2) {
        var Bind = _ref2.Bind,
            bind = _ref2.bind,
            index = _ref2.index;
        return /*#__PURE__*/React.createElement(Accordion, {
          title: "".concat(props.field.label, " #").concat(index + 1),
          action: index > 0 && /*#__PURE__*/React.createElement(IconButton, {
            icon: /*#__PURE__*/React.createElement(DeleteIcon, null),
            onClick: function onClick() {
              return bind.field.removeValue(index);
            }
          }) // Open first Accordion by default
          ,
          defaultValue: index === 0
        }, /*#__PURE__*/React.createElement(Cell, {
          span: 12,
          className: fieldsWrapperStyle
        }, /*#__PURE__*/React.createElement(Fields, Object.assign({
          Bind: Bind
        }, bind.index, {
          contentModel: contentModel,
          fields: field.settings.fields,
          layout: field.settings.layout,
          gridClassName: fieldsGridStyle
        }))));
      });
    }
  }
};
export default plugin;
//# sourceMappingURL=multipleObjects.js.map