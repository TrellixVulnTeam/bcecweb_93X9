import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7;

import React, { Fragment, useCallback, useMemo } from "react";
import { Grid, Cell } from "@webiny/ui/Grid";
import { Select } from "@webiny/ui/Select";
import { i18n } from "@webiny/app/i18n";
import { PermissionInfo, gridNoPaddingClass } from "@webiny/app-admin/components/Permissions";
import { Form } from "@webiny/form";
import ContentModelGroupPermission from "./components/ContentModelGroupPermission";
import { ContentModelPermission } from "./components/ContentModelPermission";
import { ContentEntryPermission } from "./components/ContentEntryPermission";
import { Checkbox, CheckboxGroup } from "@webiny/ui/Checkbox";
import { useI18N } from "@webiny/app-i18n/hooks/useI18N";
import { Link } from "@webiny/react-router";
var t = i18n.ns("app-headless-cms/admin/plugins/permissionRenderer");
var CMS_PERMISSION = "cms";
var CMS_PERMISSION_FULL_ACCESS = "cms.*";
var FULL_ACCESS = "full";
var NO_ACCESS = "no";
var CUSTOM_ACCESS = "custom";
var ENTITIES = ["contentModel", "contentModelGroup", "contentEntry"];
var API_ENDPOINTS = [{
  id: "read",
  name: "Read"
}, {
  id: "manage",
  name: "Manage"
}, {
  id: "preview",
  name: "Preview"
}];
var GRAPHQL_API_TYPES_LINK = "https://www.webiny.com/docs/key-topics/webiny-applications/headless-cms/graphql-api/#graphql-api-types";
export var CMSPermissions = function CMSPermissions(_ref) {
  var value = _ref.value,
      onChange = _ref.onChange;

  var _useI18N = useI18N(),
      getLocales = _useI18N.getLocales;

  var canRead = useCallback(function (value, permissionName) {
    var permission = value.find(function (item) {
      return item.name === permissionName;
    });

    if (!permission) {
      return false;
    }

    if (typeof permission.rwd !== "string") {
      return true;
    }

    return permission.rwd.includes("r");
  }, []);

  var getFormLocales = function getFormLocales() {
    var localePermission = (value || []).find(function (item) {
      return item.name.startsWith("content.i18n");
    });

    if (!localePermission) {
      return getLocales().map(function (l) {
        return l.code;
      });
    }

    return Array.isArray(localePermission.locales) ? localePermission.locales : getLocales().map(function (l) {
      return l.code;
    });
  };

  var onFormChange = useCallback(function (data) {
    var newValue = [];

    if (Array.isArray(value)) {
      // Let's just filter out the `cms*` permission objects.
      // Based on the `data` we rebuild new permission object from scratch.
      newValue = value.filter(function (item) {
        return !item.name.startsWith(CMS_PERMISSION);
      });
    }

    if (data.accessLevel === NO_ACCESS) {
      onChange(newValue);
      return;
    }

    if (data.accessLevel === FULL_ACCESS) {
      newValue.push({
        name: CMS_PERMISSION_FULL_ACCESS
      });
      onChange(newValue);
      return;
    } // Handling custom access level.


    if (Array.isArray(data.endpoints)) {
      API_ENDPOINTS.forEach(function (api) {
        if (data.endpoints.includes(api.id)) {
          newValue.push({
            name: "".concat(CMS_PERMISSION, ".endpoint.").concat(api.id)
          });
        }
      });
    }

    var locales = getFormLocales(); // Content models, content model groups, content entries

    ENTITIES.forEach(function (entity) {
      var accessScope = data["".concat(entity, "AccessScope")];

      if (accessScope && accessScope !== NO_ACCESS) {
        var permission = {
          name: "".concat(CMS_PERMISSION, ".").concat(entity),
          own: false,
          rwd: "r",
          pw: "",
          groups: undefined,
          models: undefined
        };

        if (accessScope === "own") {
          permission.own = true;
          permission.rwd = "rwd";
        } else {
          permission.rwd = data["".concat(entity, "RWD")] || "r";
        }

        permission.pw = (data["".concat(entity, "PW")] || []).join("");

        if (accessScope === "models") {
          permission.models = {};
        }

        if (accessScope === "groups") {
          permission.groups = {};
        }

        var props = data["".concat(entity, "Props")];

        if (props) {
          ["models", "groups"].forEach(function (entity) {
            if (accessScope === entity && props[entity]) {
              permission[entity] = locales.reduce(function (acc, locale) {
                if (props[entity][locale]) {
                  acc[locale] = props[entity][locale];
                }

                return acc;
              }, {});
            }
          });
        }

        newValue.push(permission);
      }
    }); // Remove dependent permissions.
    // The "cms.contentModel" permission can only be assigned if the user has the "read" access for the "cms.contentModelGroup".

    if (!canRead(newValue, "cms.contentModelGroup")) {
      newValue = newValue.filter(function (item) {
        return item.name !== "cms.contentModel";
      });
    } // The "cms.contentEntry" permission can only be assigned if the user has the "read" access for the "cms.contentModel".


    if (!canRead(newValue, "cms.contentModel")) {
      newValue = newValue.filter(function (item) {
        return item.name !== "cms.contentEntry";
      });
    }

    onChange(newValue);
  }, [value]);
  var formData = useMemo(function () {
    // This function only runs once on Form mount
    if (!Array.isArray(value)) {
      return {
        accessLevel: NO_ACCESS,
        endpoints: []
      };
    }

    var hasFullAccess = value.find(function (item) {
      return item.name === CMS_PERMISSION_FULL_ACCESS || item.name === "*";
    });

    if (hasFullAccess) {
      return {
        accessLevel: FULL_ACCESS,
        endpoints: API_ENDPOINTS.map(function (item) {
          return item.id;
        })
      };
    }

    var permissions = value.filter(function (item) {
      return item.name.startsWith(CMS_PERMISSION);
    });

    if (!permissions.length) {
      return {
        accessLevel: NO_ACCESS,
        endpoints: []
      };
    } // We're dealing with custom permissions. Let's first prepare data for "content models", "content model groups", "content entries" and "environments".


    var returnData = {
      accessLevel: CUSTOM_ACCESS,
      endpoints: permissions.filter(function (p) {
        return p.name.startsWith("cms.endpoint.");
      }).map(function (p) {
        return p.name.replace("cms.endpoint.", "");
      })
    };
    ENTITIES.forEach(function (entity) {
      var _data;

      var data = (_data = {}, _defineProperty(_data, "".concat(entity, "AccessScope"), FULL_ACCESS), _defineProperty(_data, "".concat(entity, "RWD"), "r"), _defineProperty(_data, "".concat(entity, "Props"), {}), _data);
      var entityPermission = permissions.find(function (item) {
        return item.name === "".concat(CMS_PERMISSION, ".").concat(entity);
      });

      if (entityPermission) {
        data["".concat(entity, "AccessScope")] = entityPermission.own ? "own" : FULL_ACCESS;

        if (data["".concat(entity, "AccessScope")] === "own") {
          data["".concat(entity, "RWD")] = "rwd";
        } else {
          data["".concat(entity, "RWD")] = entityPermission.rwd;
        } // If there are any non-empty props we'll set "AccessScope" to that prop.


        if (entityPermission.models) {
          data["".concat(entity, "AccessScope")] = "models";
          data["".concat(entity, "Props")] = {
            models: entityPermission.models
          };
        }

        if (entityPermission.groups) {
          data["".concat(entity, "AccessScope")] = "groups";
          data["".concat(entity, "Props")] = {
            groups: entityPermission.groups
          };
        }

        if (entity === "contentEntry") {
          data["".concat(entity, "PW")] = entityPermission.pw ? entityPermission.pw.split("") : [];
        }
      }

      Object.assign(returnData, data);
    });
    return returnData;
  }, []);
  var locales = getFormLocales();
  var getSelectedContentModelGroups = useCallback(function (data) {
    if (data && data.contentModelGroupAccessScope === "groups" && data.contentModelGroupProps) {
      return data.contentModelGroupProps.groups;
    }
  }, []);
  return /*#__PURE__*/React.createElement(Form, {
    data: formData,
    onChange: onFormChange
  }, function (_ref2) {
    var data = _ref2.data,
        Bind = _ref2.Bind,
        setValue = _ref2.setValue,
        form = _ref2.form;
    var graphQLEndpointAccess = data.endpoints.includes("read") || data.endpoints.includes("manage") || data.endpoints.includes("preview");
    return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(Grid, {
      className: gridNoPaddingClass
    }, /*#__PURE__*/React.createElement(Cell, {
      span: 6
    }, /*#__PURE__*/React.createElement(PermissionInfo, {
      title: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Access Level"])))
    })), /*#__PURE__*/React.createElement(Cell, {
      span: 6
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "accessLevel"
    }, /*#__PURE__*/React.createElement(Select, {
      label: t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Access Level"])))
    }, /*#__PURE__*/React.createElement("option", {
      value: NO_ACCESS
    }, t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["No access"])))), /*#__PURE__*/React.createElement("option", {
      value: FULL_ACCESS
    }, t(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Full access"])))), /*#__PURE__*/React.createElement("option", {
      value: CUSTOM_ACCESS
    }, t(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["Custom access"])))))))), data.accessLevel === CUSTOM_ACCESS && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
      span: 12
    }, /*#__PURE__*/React.createElement(Bind, {
      name: "endpoints"
    }, /*#__PURE__*/React.createElement(CheckboxGroup, {
      label: t(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["GraphQL API types"]))),
      description: t(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["Each type has a separate URL and a specific purpose.\n                                                 Check out the {link} key topic to learn more."])))({
        link: /*#__PURE__*/React.createElement(Link, {
          to: GRAPHQL_API_TYPES_LINK,
          target: "_blank"
        }, "Headless CMS GraphQL API")
      })
    }, function (_ref3) {
      var getValue = _ref3.getValue,
          onChange = _ref3.onChange;
      return API_ENDPOINTS.map(function (_ref4) {
        var id = _ref4.id,
            name = _ref4.name;
        return /*#__PURE__*/React.createElement(Checkbox, {
          key: id,
          label: name,
          value: getValue(id),
          onChange: onChange(id)
        });
      });
    })))), graphQLEndpointAccess && /*#__PURE__*/React.createElement(ContentModelGroupPermission, {
      data: data,
      setValue: setValue,
      form: form,
      Bind: Bind,
      entity: "contentModelGroup",
      title: "Content Model Groups",
      locales: locales
    }), graphQLEndpointAccess && canRead(value, "cms.contentModelGroup") && /*#__PURE__*/React.createElement(ContentModelPermission, {
      locales: locales,
      data: data,
      setValue: setValue,
      form: form,
      Bind: Bind,
      entity: "contentModel",
      title: "Content Models",
      selectedContentModelGroups: getSelectedContentModelGroups(data)
    }), graphQLEndpointAccess && canRead(value, "cms.contentModel") && /*#__PURE__*/React.createElement(ContentEntryPermission, {
      data: data,
      Bind: Bind,
      setValue: setValue,
      form: form,
      entity: "contentEntry",
      title: "Content Entries"
    })));
  });
};
//# sourceMappingURL=CmsPermissions.js.map