{"version":3,"sources":["../../../../src/admin/plugins/permissionRenderer/CmsPermissions.tsx"],"names":["React","Fragment","useCallback","useMemo","Grid","Cell","Select","i18n","PermissionInfo","gridNoPaddingClass","Form","ContentModelGroupPermission","ContentModelPermission","ContentEntryPermission","Checkbox","CheckboxGroup","useI18N","Link","t","ns","CMS_PERMISSION","CMS_PERMISSION_FULL_ACCESS","FULL_ACCESS","NO_ACCESS","CUSTOM_ACCESS","ENTITIES","API_ENDPOINTS","id","name","GRAPHQL_API_TYPES_LINK","CMSPermissions","value","onChange","getLocales","canRead","permissionName","permission","find","item","rwd","includes","getFormLocales","localePermission","startsWith","map","l","code","Array","isArray","locales","onFormChange","data","newValue","filter","accessLevel","push","endpoints","forEach","api","entity","accessScope","own","pw","groups","undefined","models","join","props","reduce","acc","locale","formData","hasFullAccess","permissions","length","returnData","p","replace","entityPermission","split","Object","assign","getSelectedContentModelGroups","contentModelGroupAccessScope","contentModelGroupProps","Bind","setValue","form","graphQLEndpointAccess","link","getValue"],"mappings":"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","sourcesContent":["import React, { Fragment, useCallback, useMemo } from \"react\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { Select } from \"@webiny/ui/Select\";\nimport { i18n } from \"@webiny/app/i18n\";\nimport { PermissionInfo, gridNoPaddingClass } from \"@webiny/app-admin/components/Permissions\";\nimport { Form } from \"@webiny/form\";\nimport ContentModelGroupPermission from \"./components/ContentModelGroupPermission\";\nimport { ContentModelPermission } from \"./components/ContentModelPermission\";\nimport { ContentEntryPermission } from \"./components/ContentEntryPermission\";\nimport { Checkbox, CheckboxGroup } from \"@webiny/ui/Checkbox\";\nimport { useI18N } from \"@webiny/app-i18n/hooks/useI18N\";\nimport { Link } from \"@webiny/react-router\";\n\nconst t = i18n.ns(\"app-headless-cms/admin/plugins/permissionRenderer\");\n\nconst CMS_PERMISSION = \"cms\";\nconst CMS_PERMISSION_FULL_ACCESS = \"cms.*\";\nconst FULL_ACCESS = \"full\";\nconst NO_ACCESS = \"no\";\nconst CUSTOM_ACCESS = \"custom\";\nconst ENTITIES = [\"contentModel\", \"contentModelGroup\", \"contentEntry\"];\nconst API_ENDPOINTS = [\n    { id: \"read\", name: \"Read\" },\n    { id: \"manage\", name: \"Manage\" },\n    { id: \"preview\", name: \"Preview\" }\n];\n\nconst GRAPHQL_API_TYPES_LINK =\n    \"https://www.webiny.com/docs/key-topics/webiny-applications/headless-cms/graphql-api/#graphql-api-types\";\n\nexport const CMSPermissions = ({ value, onChange }) => {\n    const { getLocales } = useI18N();\n\n    const canRead = useCallback((value: any[], permissionName: string) => {\n        const permission = value.find(item => item.name === permissionName);\n\n        if (!permission) {\n            return false;\n        }\n\n        if (typeof permission.rwd !== \"string\") {\n            return true;\n        }\n\n        return permission.rwd.includes(\"r\");\n    }, []);\n\n    const getFormLocales = () => {\n        const localePermission = (value || []).find(item => item.name.startsWith(\"content.i18n\"));\n        if (!localePermission) {\n            return getLocales().map(l => l.code);\n        }\n\n        return Array.isArray(localePermission.locales)\n            ? localePermission.locales\n            : getLocales().map(l => l.code);\n    };\n\n    const onFormChange = useCallback(\n        data => {\n            let newValue = [];\n            if (Array.isArray(value)) {\n                // Let's just filter out the `cms*` permission objects.\n                // Based on the `data` we rebuild new permission object from scratch.\n                newValue = value.filter(item => !item.name.startsWith(CMS_PERMISSION));\n            }\n\n            if (data.accessLevel === NO_ACCESS) {\n                onChange(newValue);\n                return;\n            }\n\n            if (data.accessLevel === FULL_ACCESS) {\n                newValue.push({ name: CMS_PERMISSION_FULL_ACCESS });\n                onChange(newValue);\n                return;\n            }\n\n            // Handling custom access level.\n            if (Array.isArray(data.endpoints)) {\n                API_ENDPOINTS.forEach(api => {\n                    if (data.endpoints.includes(api.id)) {\n                        newValue.push({\n                            name: `${CMS_PERMISSION}.endpoint.${api.id}`\n                        });\n                    }\n                });\n            }\n\n            const locales = getFormLocales();\n\n            // Content models, content model groups, content entries\n            ENTITIES.forEach(entity => {\n                const accessScope = data[`${entity}AccessScope`];\n                if (accessScope && accessScope !== NO_ACCESS) {\n                    const permission = {\n                        name: `${CMS_PERMISSION}.${entity}`,\n                        own: false,\n                        rwd: \"r\",\n                        pw: \"\",\n                        groups: undefined,\n                        models: undefined\n                    };\n\n                    if (accessScope === \"own\") {\n                        permission.own = true;\n                        permission.rwd = \"rwd\";\n                    } else {\n                        permission.rwd = data[`${entity}RWD`] || \"r\";\n                    }\n\n                    permission.pw = (data[`${entity}PW`] || []).join(\"\");\n\n                    if (accessScope === \"models\") {\n                        permission.models = {};\n                    }\n\n                    if (accessScope === \"groups\") {\n                        permission.groups = {};\n                    }\n\n                    const props = data[`${entity}Props`];\n                    if (props) {\n                        [\"models\", \"groups\"].forEach(entity => {\n                            if (accessScope === entity && props[entity]) {\n                                permission[entity] = locales.reduce((acc, locale) => {\n                                    if (props[entity][locale]) {\n                                        acc[locale] = props[entity][locale];\n                                    }\n                                    return acc;\n                                }, {});\n                            }\n                        });\n                    }\n\n                    newValue.push(permission);\n                }\n            });\n            // Remove dependent permissions.\n            // The \"cms.contentModel\" permission can only be assigned if the user has the \"read\" access for the \"cms.contentModelGroup\".\n            if (!canRead(newValue, \"cms.contentModelGroup\")) {\n                newValue = newValue.filter(item => item.name !== \"cms.contentModel\");\n            }\n            // The \"cms.contentEntry\" permission can only be assigned if the user has the \"read\" access for the \"cms.contentModel\".\n            if (!canRead(newValue, \"cms.contentModel\")) {\n                newValue = newValue.filter(item => item.name !== \"cms.contentEntry\");\n            }\n\n            onChange(newValue);\n        },\n        [value]\n    );\n\n    const formData = useMemo(() => {\n        // This function only runs once on Form mount\n        if (!Array.isArray(value)) {\n            return { accessLevel: NO_ACCESS, endpoints: [] };\n        }\n\n        const hasFullAccess = value.find(\n            item => item.name === CMS_PERMISSION_FULL_ACCESS || item.name === \"*\"\n        );\n\n        if (hasFullAccess) {\n            return { accessLevel: FULL_ACCESS, endpoints: API_ENDPOINTS.map(item => item.id) };\n        }\n\n        const permissions = value.filter(item => item.name.startsWith(CMS_PERMISSION));\n\n        if (!permissions.length) {\n            return { accessLevel: NO_ACCESS, endpoints: [] };\n        }\n\n        // We're dealing with custom permissions. Let's first prepare data for \"content models\", \"content model groups\", \"content entries\" and \"environments\".\n        const returnData = {\n            accessLevel: CUSTOM_ACCESS,\n            endpoints: permissions\n                .filter(p => p.name.startsWith(\"cms.endpoint.\"))\n                .map(p => p.name.replace(\"cms.endpoint.\", \"\"))\n        };\n\n        ENTITIES.forEach(entity => {\n            const data = {\n                [`${entity}AccessScope`]: FULL_ACCESS,\n                [`${entity}RWD`]: \"r\",\n                [`${entity}Props`]: {}\n            };\n\n            const entityPermission = permissions.find(\n                item => item.name === `${CMS_PERMISSION}.${entity}`\n            );\n\n            if (entityPermission) {\n                data[`${entity}AccessScope`] = entityPermission.own ? \"own\" : FULL_ACCESS;\n                if (data[`${entity}AccessScope`] === \"own\") {\n                    data[`${entity}RWD`] = \"rwd\";\n                } else {\n                    data[`${entity}RWD`] = entityPermission.rwd;\n                }\n\n                // If there are any non-empty props we'll set \"AccessScope\" to that prop.\n                if (entityPermission.models) {\n                    data[`${entity}AccessScope`] = \"models\";\n                    data[`${entity}Props`] = { models: entityPermission.models };\n                }\n\n                if (entityPermission.groups) {\n                    data[`${entity}AccessScope`] = \"groups\";\n                    data[`${entity}Props`] = { groups: entityPermission.groups };\n                }\n\n                if (entity === \"contentEntry\") {\n                    data[`${entity}PW`] = entityPermission.pw ? entityPermission.pw.split(\"\") : [];\n                }\n            }\n\n            Object.assign(returnData, data);\n        });\n\n        return returnData;\n    }, []);\n\n    const locales = getFormLocales();\n\n    const getSelectedContentModelGroups = useCallback(data => {\n        if (data && data.contentModelGroupAccessScope === \"groups\" && data.contentModelGroupProps) {\n            return data.contentModelGroupProps.groups;\n        }\n    }, []);\n\n    return (\n        <Form data={formData} onChange={onFormChange}>\n            {({ data, Bind, setValue, form }) => {\n                const graphQLEndpointAccess =\n                    data.endpoints.includes(\"read\") ||\n                    data.endpoints.includes(\"manage\") ||\n                    data.endpoints.includes(\"preview\");\n\n                return (\n                    <Fragment>\n                        <Grid className={gridNoPaddingClass}>\n                            <Cell span={6}>\n                                <PermissionInfo title={t`Access Level`} />\n                            </Cell>\n                            <Cell span={6}>\n                                <Bind name={\"accessLevel\"}>\n                                    <Select label={t`Access Level`}>\n                                        <option value={NO_ACCESS}>{t`No access`}</option>\n                                        <option value={FULL_ACCESS}>{t`Full access`}</option>\n                                        <option value={CUSTOM_ACCESS}>{t`Custom access`}</option>\n                                    </Select>\n                                </Bind>\n                            </Cell>\n                        </Grid>\n                        {data.accessLevel === CUSTOM_ACCESS && (\n                            <>\n                                <Grid>\n                                    <Cell span={12}>\n                                        <Bind name={\"endpoints\"}>\n                                            <CheckboxGroup\n                                                label={t`GraphQL API types`}\n                                                description={t`Each type has a separate URL and a specific purpose.\n                                                 Check out the {link} key topic to learn more.`({\n                                                    link: (\n                                                        <Link\n                                                            to={GRAPHQL_API_TYPES_LINK}\n                                                            target={\"_blank\"}\n                                                        >\n                                                            Headless CMS GraphQL API\n                                                        </Link>\n                                                    )\n                                                })}\n                                            >\n                                                {({ getValue, onChange }) =>\n                                                    API_ENDPOINTS.map(({ id, name }) => (\n                                                        <Checkbox\n                                                            key={id}\n                                                            label={name}\n                                                            value={getValue(id)}\n                                                            onChange={onChange(id)}\n                                                        />\n                                                    ))\n                                                }\n                                            </CheckboxGroup>\n                                        </Bind>\n                                    </Cell>\n                                </Grid>\n                                {graphQLEndpointAccess && (\n                                    <ContentModelGroupPermission\n                                        data={data}\n                                        setValue={setValue}\n                                        form={form}\n                                        Bind={Bind}\n                                        entity={\"contentModelGroup\"}\n                                        title={\"Content Model Groups\"}\n                                        locales={locales}\n                                    />\n                                )}\n\n                                {graphQLEndpointAccess &&\n                                    canRead(value, \"cms.contentModelGroup\") && (\n                                        <ContentModelPermission\n                                            locales={locales}\n                                            data={data}\n                                            setValue={setValue}\n                                            form={form}\n                                            Bind={Bind}\n                                            entity={\"contentModel\"}\n                                            title={\"Content Models\"}\n                                            selectedContentModelGroups={getSelectedContentModelGroups(\n                                                data\n                                            )}\n                                        />\n                                    )}\n\n                                {graphQLEndpointAccess && canRead(value, \"cms.contentModel\") && (\n                                    <ContentEntryPermission\n                                        data={data}\n                                        Bind={Bind}\n                                        setValue={setValue}\n                                        form={form}\n                                        entity={\"contentEntry\"}\n                                        title={\"Content Entries\"}\n                                    />\n                                )}\n                            </>\n                        )}\n                    </Fragment>\n                );\n            }}\n        </Form>\n    );\n};\n"],"file":"CmsPermissions.js"}