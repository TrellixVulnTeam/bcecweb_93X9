import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14;

import React, { useEffect } from "react";
import get from "lodash/get";
import { Grid, Cell } from "@webiny/ui/Grid";
import { Typography } from "@webiny/ui/Typography";
import { Select } from "@webiny/ui/Select";
import { i18n } from "@webiny/app/i18n";
import { Elevation } from "@webiny/ui/Elevation";
import { Checkbox, CheckboxGroup } from "@webiny/ui/Checkbox";
import { Note } from "./StyledComponents";
var t = i18n.ns("app-headless-cms/admin/plugins/permissionRenderer");
var pwOptions = [{
  id: "p",
  name: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Publish"])))
}, {
  id: "u",
  name: t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Unpublish"])))
}, {
  id: "r",
  name: t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["Request review"])))
}, {
  id: "c",
  name: t(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Request changes"])))
}];
export var ContentEntryPermission = function ContentEntryPermission(_ref) {
  var Bind = _ref.Bind,
      data = _ref.data,
      entity = _ref.entity,
      setValue = _ref.setValue,
      form = _ref.form,
      title = _ref.title;
  // Set "cms.contentEntry" access scope to "own" if "cms.contentModel" === "own".
  useEffect(function () {
    if (get(data, "contentModelAccessScope") === "own" && get(data, "".concat(entity, "AccessScope")) !== "own") {
      setValue("".concat(entity, "AccessScope"), "own");
    }
  }, [data]); // Let's set default values for "accessScopes"

  useEffect(function () {
    if (data.endpoints.length > 0 && !data["".concat(entity, "AccessScope")] && form.onChangeFns["".concat(entity, "AccessScope")]) {
      setValue("".concat(entity, "AccessScope"), "full");
    }
  }, [data, form]);
  var disabledPrimaryActions = [undefined, "own", "no"].includes(data["".concat(entity, "AccessScope")]) || !data.endpoints.includes("manage");
  return /*#__PURE__*/React.createElement(Elevation, {
    z: 1,
    style: {
      marginTop: 10
    }
  }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(Typography, {
    use: "overline"
  }, title)), /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(Grid, {
    style: {
      padding: 0,
      paddingBottom: 24
    }
  }, /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(Bind, {
    name: "".concat(entity, "AccessScope"),
    beforeChange: function beforeChange(value, cb) {
      if (value === "own") {
        setValue("".concat(entity, "RWD"), "rwd");
      }

      cb(value);
    }
  }, /*#__PURE__*/React.createElement(Select, {
    label: t(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["Access Scope"]))),
    disabled: data["contentModelAccessScope"] === "own"
  }, /*#__PURE__*/React.createElement("option", {
    value: "full"
  }, t(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["All entries"])))), data.endpoints.includes("manage") && /*#__PURE__*/React.createElement("option", {
    value: "own"
  }, t(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["Only entries created by the user"])))))), data["contentModelAccessScope"] === "own" && /*#__PURE__*/React.createElement(Note, null, /*#__PURE__*/React.createElement(Typography, {
    use: "caption"
  }, /*#__PURE__*/React.createElement("span", {
    className: "highlight"
  }, "Content Entry"), "\xA0", t(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["access depends upon"]))), "\xA0", /*#__PURE__*/React.createElement("span", {
    className: "highlight"
  }, "Content Model")))), /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(Bind, {
    name: "".concat(entity, "RWD")
  }, /*#__PURE__*/React.createElement(Select, {
    label: t(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["Primary Actions"]))),
    disabled: disabledPrimaryActions
  }, /*#__PURE__*/React.createElement("option", {
    value: "r"
  }, t(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["Read"])))), data.endpoints.includes("manage") ? /*#__PURE__*/React.createElement("option", {
    value: "rw"
  }, t(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["Read, write"])))) : null, data.endpoints.includes("manage") ? /*#__PURE__*/React.createElement("option", {
    value: "rwd"
  }, t(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["Read, write, delete"])))) : null))), data.endpoints.includes("manage") ? /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(Bind, {
    name: "".concat(entity, "PW")
  }, /*#__PURE__*/React.createElement(CheckboxGroup, {
    label: t(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["Publishing actions"]))),
    description: t(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["Publishing-related actions that can be performed on content entries."])))
  }, function (_ref2) {
    var getValue = _ref2.getValue,
        onChange = _ref2.onChange;
    return pwOptions.map(function (_ref3) {
      var id = _ref3.id,
          name = _ref3.name;
      return /*#__PURE__*/React.createElement(Checkbox, {
        disabled: [undefined, "no"].includes(data["".concat(entity, "AccessScope")]),
        key: id,
        label: name,
        value: getValue(id),
        onChange: onChange(id)
      });
    });
  }))) : null))));
};
//# sourceMappingURL=ContentEntryPermission.js.map