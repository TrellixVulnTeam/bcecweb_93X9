import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10;

import React, { useCallback, useEffect } from "react";
import get from "lodash/get";
import { Grid, Cell } from "@webiny/ui/Grid";
import { Typography } from "@webiny/ui/Typography";
import { Select } from "@webiny/ui/Select";
import { i18n } from "@webiny/app/i18n";
import { Elevation } from "@webiny/ui/Elevation";
import { PermissionSelector, PermissionSelectorWrapper } from "./PermissionSelector";
import { useCmsData } from "./useCmsData";
import { Note } from "./StyledComponents";
import ContentModelList from "./ContentModelList";
var t = i18n.ns("app-headless-cms/admin/plugins/permissionRenderer");
export var ContentModelPermission = function ContentModelPermission(_ref) {
  var Bind = _ref.Bind,
      data = _ref.data,
      setValue = _ref.setValue,
      form = _ref.form,
      entity = _ref.entity,
      title = _ref.title,
      locales = _ref.locales,
      selectedContentModelGroups = _ref.selectedContentModelGroups;
  var modelsGroups = useCmsData(locales); // Set "cms.contentModel" access scope to "own" if "cms.contentModelGroup" === "own".

  useEffect(function () {
    if (get(data, "contentModelGroupAccessScope") === "own" && get(data, "".concat(entity, "AccessScope")) !== "own") {
      setValue("".concat(entity, "AccessScope"), "own");
    }
  }, [data]);
  useEffect(function () {
    // Let's set default values for "accessScopes"
    if (data.endpoints.length > 0 && !data["".concat(entity, "AccessScope")] && form.onChangeFns["".concat(entity, "AccessScope")]) {
      setValue("".concat(entity, "AccessScope"), "full");
    }
  }, [data, form]);
  var getItems = useCallback(function (code) {
    var list = get(modelsGroups, "".concat(code, ".models"), []);
    var groups = selectedContentModelGroups && selectedContentModelGroups[code] || [];

    if (groups.length) {
      // Filter by groups
      list = list.filter(function (item) {
        return groups.includes(item.group.id);
      });
    }

    return list;
  }, [modelsGroups]);
  var disabledPrimaryActions = [undefined, "own", "no"].includes(data["".concat(entity, "AccessScope")]) || !data.endpoints.includes("manage");
  return /*#__PURE__*/React.createElement(Elevation, {
    z: 1,
    style: {
      marginTop: 10
    }
  }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(Typography, {
    use: "overline"
  }, title)), /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(Grid, {
    style: {
      padding: 0,
      paddingBottom: 24
    }
  }, /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(Bind, {
    name: "".concat(entity, "AccessScope")
  }, /*#__PURE__*/React.createElement(Select, {
    label: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Access Scope"]))),
    disabled: data["contentModelGroupAccessScope"] === "own",
    description: t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["The list of available models is defined by the options set in the content model groups section above."])))
  }, /*#__PURE__*/React.createElement("option", {
    value: "full"
  }, t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["All models"])))), /*#__PURE__*/React.createElement("option", {
    value: "models"
  }, t(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Only specific models"])))), data.endpoints.includes("manage") && /*#__PURE__*/React.createElement("option", {
    value: "own"
  }, t(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["Only models created by the user"])))))), data["contentModelGroupAccessScope"] === "own" && /*#__PURE__*/React.createElement(Note, null, /*#__PURE__*/React.createElement(Typography, {
    use: "caption"
  }, /*#__PURE__*/React.createElement("span", {
    className: "highlight"
  }, "Content Model"), "\xA0", t(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["access depends upon"]))), "\xA0", /*#__PURE__*/React.createElement("span", {
    className: "highlight"
  }, "Content Model Group")))), data["".concat(entity, "AccessScope")] === "models" && /*#__PURE__*/React.createElement(PermissionSelectorWrapper, null, /*#__PURE__*/React.createElement(PermissionSelector, {
    locales: locales,
    Bind: Bind,
    entity: entity,
    selectorKey: "models",
    getItems: getItems,
    RenderItems: ContentModelList
  })), /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(Bind, {
    name: "".concat(entity, "RWD")
  }, /*#__PURE__*/React.createElement(Select, {
    label: t(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["Primary Actions"]))),
    disabled: disabledPrimaryActions
  }, /*#__PURE__*/React.createElement("option", {
    value: "r"
  }, t(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["Read"])))), data.endpoints.includes("manage") ? /*#__PURE__*/React.createElement("option", {
    value: "rw"
  }, t(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["Read, write"])))) : null, data.endpoints.includes("manage") ? /*#__PURE__*/React.createElement("option", {
    value: "rwd"
  }, t(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["Read, write, delete"])))) : null)))))));
};
//# sourceMappingURL=ContentModelPermission.js.map