import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject;

import _regeneratorRuntime from "@babel/runtime/regenerator";
import { useEffect, useReducer } from "react";
import gql from "graphql-tag";
import { useCms } from "../../../hooks";
var LIST_DATA = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    query CmsLoadPermissionsData {\n        listContentModels {\n            data {\n                id: modelId\n                label: name\n                group {\n                    id\n                    label: name\n                }\n            }\n        }\n        listContentModelGroups {\n            data {\n                id\n                label: name\n            }\n        }\n    }\n"])));
export var useCmsData = function useCmsData(locales) {
  var _useCms = useCms(),
      getApolloClient = _useCms.getApolloClient;

  var _useReducer = useReducer(function (prev, next) {
    return _objectSpread(_objectSpread({}, prev), next);
  }, {}),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      state = _useReducer2[0],
      setState = _useReducer2[1];

  var loadData = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var _loop, i;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _loop = function _loop(i) {
                var code = locales[i];
                var client = getApolloClient(code);

                if (!state[code]) {
                  client.query({
                    query: LIST_DATA
                  }).then(function (_ref2) {
                    var data = _ref2.data;
                    var models = data.listContentModels.data;
                    var groups = data.listContentModelGroups.data;
                    setState(_objectSpread(_objectSpread({}, state), {}, _defineProperty({}, code, {
                      models: models,
                      groups: groups
                    })));
                  });
                }
              };

              for (i = 0; i < locales.length; i++) {
                _loop(i);
              }

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function loadData() {
      return _ref.apply(this, arguments);
    };
  }();

  useEffect(function () {
    loadData();
  }, [locales.sort().join(":")]);
  return locales.reduce(function (acc, code) {
    acc[code] = state[code] || {
      models: [],
      groups: []
    };
    return acc;
  }, {});
};
//# sourceMappingURL=useCmsData.js.map