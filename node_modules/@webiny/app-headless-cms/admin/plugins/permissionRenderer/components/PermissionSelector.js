import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject;

import React, { Fragment } from "react";
import { i18n } from "@webiny/app/i18n";
import { Checkbox, CheckboxGroup } from "@webiny/ui/Checkbox";
import { Cell } from "@webiny/ui/Grid";
import { FormElementMessage } from "@webiny/ui/FormElementMessage";
var t = i18n.ns("app-headless-cms/admin/plugins/permissionRenderer");

var DefaultRenderItems = function DefaultRenderItems(_ref) {
  var items = _ref.items,
      getValue = _ref.getValue,
      onChange = _ref.onChange;
  return /*#__PURE__*/React.createElement(React.Fragment, null, items.map(function (_ref2) {
    var id = _ref2.id,
        label = _ref2.label;
    return /*#__PURE__*/React.createElement("div", {
      key: id
    }, /*#__PURE__*/React.createElement(Checkbox, {
      key: id,
      label: label,
      value: getValue(id),
      onChange: onChange(id)
    }));
  }));
};

export var PermissionSelector = function PermissionSelector(_ref3) {
  var Bind = _ref3.Bind,
      entity = _ref3.entity,
      locales = _ref3.locales,
      selectorKey = _ref3.selectorKey,
      getItems = _ref3.getItems,
      _ref3$RenderItems = _ref3.RenderItems,
      RenderItems = _ref3$RenderItems === void 0 ? DefaultRenderItems : _ref3$RenderItems;
  var description = t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Select the {selectorKey} user will be allowed to access."])))({
    selectorKey: selectorKey
  });
  return /*#__PURE__*/React.createElement(Fragment, null, locales.map(function (code) {
    var items = getItems(code);
    return /*#__PURE__*/React.createElement(Bind, {
      key: code,
      name: "".concat(entity, "Props.").concat(selectorKey, ".").concat(code)
    }, items.length && /*#__PURE__*/React.createElement(CheckboxGroup, {
      label: code
    }, function (_ref4) {
      var onChange = _ref4.onChange,
          getValue = _ref4.getValue;
      return /*#__PURE__*/React.createElement(RenderItems, {
        items: items,
        onChange: onChange,
        getValue: getValue
      });
    }));
  }), /*#__PURE__*/React.createElement(FormElementMessage, null, description));
};
export var PermissionSelectorWrapper = function PermissionSelectorWrapper(_ref5) {
  var children = _ref5.children;
  return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(Cell, {
    span: 1
  }), /*#__PURE__*/React.createElement(Cell, {
    span: 11
  }, children));
};
//# sourceMappingURL=PermissionSelector.js.map