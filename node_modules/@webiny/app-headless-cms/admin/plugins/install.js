import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;

import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useState, useEffect, lazy } from "react";
import gql from "graphql-tag";
import { useApolloClient } from "@apollo/react-hooks";
import { i18n } from "@webiny/app/i18n";
import { Alert } from "@webiny/ui/Alert";
import { CircularProgress } from "@webiny/ui/Progress";
import { SimpleForm, SimpleFormContent } from "@webiny/app-admin/components/SimpleForm";
import styled from "@emotion/styled";
var SimpleFormPlaceholder = /*#__PURE__*/styled("div", {
  target: "e1pjb6uy0",
  label: "SimpleFormPlaceholder"
})({
  minHeight: 300,
  minWidth: 400
});
var t = i18n.ns("app-headless-cms/admin/installation");
var IS_INSTALLED = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    query IsCMSInstalled {\n        cms {\n            version\n        }\n    }\n"])));
var INSTALL = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    mutation InstallCms {\n        cms {\n            install {\n                data\n                error {\n                    code\n                    message\n                    data\n                }\n            }\n        }\n    }\n"])));

var CMSInstaller = function CMSInstaller(_ref) {
  var onInstalled = _ref.onInstalled;
  var client = useApolloClient();

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      error = _useState2[0],
      setError = _useState2[1];

  useEffect(function () {
    // Temporary fix for the ES index creation failure.
    // Let's try waiting a bit before running the installation.
    setTimeout(function () {
      client.mutate({
        mutation: INSTALL
      }).then(function (_ref2) {
        var data = _ref2.data;
        var error = data.cms.install.error;

        if (error) {
          setError(error.message);
          return;
        } // Just so the user sees the actual message.


        setTimeout(onInstalled, 3000);
      });
    }, 10000);
  }, []);
  var label = error ? /*#__PURE__*/React.createElement(Alert, {
    title: t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["Something went wrong"]))),
    type: "danger"
  }, error) : t(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Installing Headless CMS..."])));
  return /*#__PURE__*/React.createElement(SimpleForm, null, /*#__PURE__*/React.createElement(CircularProgress, {
    label: label
  }), /*#__PURE__*/React.createElement(SimpleFormContent, null, /*#__PURE__*/React.createElement(SimpleFormPlaceholder, null)));
};

var plugin = {
  name: "admin-installation-cms",
  type: "admin-installation",
  title: t(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["Headless CMS"]))),
  dependencies: ["admin-installation-security", "admin-installation-i18n"],
  secure: true,
  getInstalledVersion: function getInstalledVersion(_ref3) {
    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var client, _yield$client$query, data;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              client = _ref3.client;
              _context.next = 3;
              return client.query({
                query: IS_INSTALLED
              });

            case 3:
              _yield$client$query = _context.sent;
              data = _yield$client$query.data;
              return _context.abrupt("return", data.cms.version);

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  },
  render: function render(_ref4) {
    var onInstalled = _ref4.onInstalled;
    return /*#__PURE__*/React.createElement(CMSInstaller, {
      onInstalled: onInstalled
    });
  },
  upgrades: [{
    version: "5.0.0",
    getComponent: function getComponent() {
      return /*#__PURE__*/lazy(function () {
        return import("./upgrades/v5.0.0");
      });
    }
  }, {
    version: "5.5.0",
    getComponent: function getComponent() {
      return /*#__PURE__*/lazy(function () {
        return import("./upgrades/v5.5.0");
      });
    }
  }, {
    version: "5.8.0",
    getComponent: function getComponent() {
      return /*#__PURE__*/lazy(function () {
        return import("./upgrades/v5.8.0");
      });
    }
  }]
};
export default plugin;
//# sourceMappingURL=install.js.map