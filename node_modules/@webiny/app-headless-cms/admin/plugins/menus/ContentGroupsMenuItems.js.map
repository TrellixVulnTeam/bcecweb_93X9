{"version":3,"sources":["../../../../src/admin/plugins/menus/ContentGroupsMenuItems.tsx"],"names":["React","useEffect","get","pluralize","FontAwesomeIcon","LIST_MENU_CONTENT_GROUPS_MODELS","useQuery","usePermission","ContentGroupMenuElement","NothingToShowElement","ContentModelMenuElement","ContentGroupsMenuItems","view","response","groups","data","canReadEntries","createMenuItems","awaitElement","mainMenu","group","hasContentEntryPermission","contentModels","some","contentModel","contentModelGroup","length","groupMenuItem","addElement","id","label","name","icon","color","split","shouldRender","forEach","modelId","path","refresh"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AAGA,SAASC,+BAAT;AACA,OAAOC,QAAP;AACA,OAAOC,aAAP;AACA,SAASC,uBAAT;AACA,SAASC,oBAAT;AACA,SAASC,uBAAT;AAMA,OAAO,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,OAAqB;AAAA,MAAlBC,IAAkB,QAAlBA,IAAkB;AACvD,MAAMC,QAAQ,GAAGP,QAAQ,CAACD,+BAAD,CAAzB;;AACA,cAAyBH,GAAG,CAACW,QAAD,EAAW,6BAAX,CAAH,IAAgD,EAAzE;AAAA,MAAcC,MAAd,SAAQC,IAAR;;AAEA,uBAA2BR,aAAa,EAAxC;AAAA,MAAQS,cAAR,kBAAQA,cAAR;;AAJuD,WAMxCC,eANwC;AAAA;AAAA;;AAAA;AAAA,gFAMvD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAY2BL,IAAI,CAACM,YAAL,CAAyC,sBAAzC,CAZ3B;;AAAA;AAYUC,cAAAA,QAZV;;AAAA,kBAaSA,QAbT;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,qDAiBwBL,MAjBxB;AAAA;;AAAA;AAAA,oBAiBeM,KAjBf;AAkBQ;AACA,oBAAMC,yBAAyB,GAAGD,KAAK,CAACE,aAAN,CAAoBC,IAApB,CAAyB,UAAAC,YAAY;AAAA,yBACnER,cAAc,CAAC;AACXS,oBAAAA,iBAAiB,EAAEL,KADR;AAEXI,oBAAAA,YAAY,EAAZA;AAFW,mBAAD,CADqD;AAAA,iBAArC,CAAlC;;AAOA,oBAAIJ,KAAK,CAACE,aAAN,CAAoBI,MAApB,GAA6B,CAA7B,IAAkC,CAACL,yBAAvC,EAAkE;AAC9D;AACH;;AAED,oBAAMM,aAAa,GAAGR,QAAQ,CAACS,UAAT,CAClB,IAAIpB,uBAAJ,8BAAkDY,KAAK,CAACS,EAAxD,GAA8D;AAC1DC,kBAAAA,KAAK,EAAEV,KAAK,CAACW,IAD6C;AAE1DC,kBAAAA,IAAI,eACA,oBAAC,eAAD;AACI,oBAAA,KAAK,EAAE;AAAEC,sBAAAA,KAAK,EAAE;AAAT,qBADX;AAEI,oBAAA,IAAI,EAAEb,KAAK,CAACY,IAAN,CAAWE,KAAX,CAAiB,GAAjB;AAFV;AAHsD,iBAA9D,CADkB,CAAtB;AAYAP,gBAAAA,aAAa,CAACC,UAAd,CACI,IAAInB,oBAAJ,8BAA+CW,KAAK,CAACS,EAArD,aAAiE;AAC7DC,kBAAAA,KAAK,EAAE,kBADsD;AAE7DK,kBAAAA,YAF6D,0BAE9C;AACX,2BAAOf,KAAK,CAACE,aAAN,CAAoBI,MAApB,KAA+B,CAAtC;AACH;AAJ4D,iBAAjE,CADJ;AASAN,gBAAAA,KAAK,CAACE,aAAN,CAAoBc,OAApB,CAA4B,UAAAZ,YAAY,EAAI;AACxC,sBAAIR,cAAc,CAAC;AAAES,oBAAAA,iBAAiB,EAAEL,KAArB;AAA4BI,oBAAAA,YAAY,EAAZA;AAA5B,mBAAD,CAAlB,EAAgE;AAC5DG,oBAAAA,aAAa,CAACC,UAAd,CACI,IAAIlB,uBAAJ,CAA4Bc,YAAY,CAACa,OAAzC,EAAkD;AAC9CP,sBAAAA,KAAK,EAAE3B,SAAS,CAACqB,YAAY,CAACO,IAAd,CAD8B;AAE9CO,sBAAAA,IAAI,iCAA0Bd,YAAY,CAACa,OAAvC;AAF0C,qBAAlD,CADJ;AAMH;AACJ,iBATD;AAnDR;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AA+DIzB,cAAAA,IAAI,CAAC2B,OAAL;;AA/DJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KANuD;AAAA;AAAA;;AAwEvDtC,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAI,CAACa,MAAL,EAAa;AACT;AACH;;AAEDG,IAAAA,eAAe;AAClB,GANQ,EAMN,CAACH,MAAD,CANM,CAAT;AAQA,SAAO,IAAP;AACH,CAjFM","sourcesContent":["import React, { useEffect } from \"react\";\nimport get from \"lodash/get\";\nimport pluralize from \"pluralize\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { NavigationView } from \"@webiny/app-admin/ui/views/NavigationView\";\nimport { NavigationMenuElement } from \"@webiny/app-admin/ui/elements/NavigationMenuElement\";\nimport { LIST_MENU_CONTENT_GROUPS_MODELS } from \"~/admin/viewsGraphql\";\nimport useQuery from \"~/admin/hooks/useQuery\";\nimport usePermission from \"~/admin/hooks/usePermission\";\nimport { ContentGroupMenuElement } from \"~/admin/elements/ContentGroupMenuElement\";\nimport { NothingToShowElement } from \"~/admin/elements/NothingToShowElement\";\nimport { ContentModelMenuElement } from \"~/admin/elements/ContentModelMenuElement\";\n\ninterface Props {\n    view: NavigationView;\n}\n\nexport const ContentGroupsMenuItems = ({ view }: Props) => {\n    const response = useQuery(LIST_MENU_CONTENT_GROUPS_MODELS);\n    const { data: groups } = get(response, \"data.listContentModelGroups\") || {};\n\n    const { canReadEntries } = usePermission();\n\n    async function createMenuItems() {\n        /**\n         * !EDGE CASE ALERT!\n         * We need to `awaitElement` because there's a case where you create a new Content Model, and immediately\n         * leave the editor by clicking the \"back\" button. ApolloClient cache is already updated with the new content model,\n         * and this current component's `useEffect` is triggered. The problem is that it all happens so fast that the\n         * NavigationView is not yet mounted (because it uses a different layout component, <AdminLayout>, which\n         * is not used in the Content Model Editor view), and `mainMenu` is not yet created.\n         *\n         * To fix this, we have the \"awaitElement\" method, which will poll the view in 200ms intervals to check for\n         * existence of the element.\n         */\n        const mainMenu = await view.awaitElement<NavigationMenuElement>(\"headlessCms.mainMenu\");\n        if (!mainMenu) {\n            return;\n        }\n\n        for (const group of groups) {\n            // Check if user has \"contentEntry\" permission for any content model for a content model group\n            const hasContentEntryPermission = group.contentModels.some(contentModel =>\n                canReadEntries({\n                    contentModelGroup: group,\n                    contentModel\n                })\n            );\n\n            if (group.contentModels.length > 0 && !hasContentEntryPermission) {\n                continue;\n            }\n\n            const groupMenuItem = mainMenu.addElement(\n                new ContentGroupMenuElement(`cms-content-models-${group.id}`, {\n                    label: group.name,\n                    icon: (\n                        <FontAwesomeIcon\n                            style={{ color: \"var(--mdc-theme-text-secondary-on-background)\" }}\n                            icon={group.icon.split(\"/\")}\n                        />\n                    )\n                })\n            );\n\n            groupMenuItem.addElement(\n                new NothingToShowElement(`cms-content-models-${group.id}-empty`, {\n                    label: \"Nothing to show.\",\n                    shouldRender() {\n                        return group.contentModels.length === 0;\n                    }\n                })\n            );\n\n            group.contentModels.forEach(contentModel => {\n                if (canReadEntries({ contentModelGroup: group, contentModel })) {\n                    groupMenuItem.addElement(\n                        new ContentModelMenuElement(contentModel.modelId, {\n                            label: pluralize(contentModel.name),\n                            path: `/cms/content-entries/${contentModel.modelId}`\n                        })\n                    );\n                }\n            });\n        }\n\n        view.refresh();\n    }\n\n    useEffect(() => {\n        if (!groups) {\n            return;\n        }\n\n        createMenuItems();\n    }, [groups]);\n\n    return null;\n};\n"],"file":"ContentGroupsMenuItems.js"}