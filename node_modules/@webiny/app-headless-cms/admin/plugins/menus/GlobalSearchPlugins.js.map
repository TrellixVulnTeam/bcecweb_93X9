{"version":3,"sources":["../../../../src/admin/plugins/menus/GlobalSearchPlugins.tsx"],"names":["useEffect","get","useI18N","plugins","useQuery","LIST_MENU_CONTENT_GROUPS_MODELS","GlobalSearchPlugins","getCurrentLocale","response","locale","contentModelGroups","cmgHash","reduce","returnValue","currentValue","contentModels","modelId","byType","filter","item","name","startsWith","forEach","unregister","group","contentModel","pluginName","byName","register","type","route","label"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,SAASC,OAAT,QAAwB,gCAAxB;AAEA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,QAAT;AACA,SAASC,+BAAT;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAC9B,iBAA6BJ,OAAO,EAApC;AAAA,MAAQK,gBAAR,YAAQA,gBAAR;;AACA,MAAMC,QAAQ,GAAGJ,QAAQ,CAACC,+BAAD,CAAzB;AAEA,MAAMI,MAAM,GAAGF,gBAAgB,CAAC,SAAD,CAA/B;AAEA,MAAMG,kBAAkB,GAAGT,GAAG,CAACO,QAAD,EAAW,kCAAX,EAA+C,EAA/C,CAAH,IAAyD,EAApF;AAEA,MAAMG,OAAO,GAAGD,kBAAkB,CAACE,MAAnB,CAA0B,UAACC,WAAD,EAAcC,YAAd,EAA+B;AACrE,WACID,WAAW,GACXC,YAAY,CAACC,aAAb,CAA2BH,MAA3B,CAAkC,UAACC,WAAD,EAAcC,YAAd,EAA+B;AAC7D,aAAOD,WAAW,GAAGC,YAAY,CAACE,OAAlC;AACH,KAFD,EAEG,EAFH,CAFJ;AAMH,GAPe,EAOb,EAPa,CAAhB,CAR8B,CAiB9B;;AACAhB,EAAAA,SAAS,CAAC,YAAM;AACZ;AACAG,IAAAA,OAAO,CACFc,MADL,CACqC,qBADrC,EAEKC,MAFL,CAEY,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACC,IAAL,CAAUC,UAAV,CAAqB,kCAArB,CAAJ;AAAA,KAFhB,EAGKC,OAHL,CAGa,UAAAH,IAAI;AAAA,aAAIhB,OAAO,CAACoB,UAAR,CAAmBJ,IAAI,CAACC,IAAxB,CAAJ;AAAA,KAHjB,EAFY,CAOZ;;AACAV,IAAAA,kBAAkB,CAACY,OAAnB,CAA2B,UAAAE,KAAK,EAAI;AAChCA,MAAAA,KAAK,CAACT,aAAN,CAAoBO,OAApB,CAA4B,UAAAG,YAAY,EAAI;AACxC,YAAMC,UAAU,GAAG,sCAAsCD,YAAY,CAACT,OAAtE;;AACA,YAAI,CAACb,OAAO,CAACwB,MAAR,CAAeD,UAAf,CAAL,EAAiC;AAC7BvB,UAAAA,OAAO,CAACyB,QAAR,CAAiB;AACbC,YAAAA,IAAI,EAAE,qBADO;AAEbT,YAAAA,IAAI,EAAE,sCAAsCK,YAAY,CAACT,OAF5C;AAGbc,YAAAA,KAAK,EAAE,0BAA0BL,YAAY,CAACT,OAHjC;AAIbe,YAAAA,KAAK,EAAEN,YAAY,CAACL;AAJP,WAAjB;AAMH;AACJ,OAVD;AAWH,KAZD;AAaH,GArBQ,EAqBN,CAACX,MAAD,EAASE,OAAT,CArBM,CAAT;AAuBA,SAAO,IAAP;AACH,CA1CD;;AA4CA,eAAeL,mBAAf","sourcesContent":["import { useEffect } from \"react\";\nimport get from \"lodash/get\";\nimport { useI18N } from \"@webiny/app-i18n/hooks/useI18N\";\nimport { AdminGlobalSearchPlugin } from \"@webiny/app-admin/types\";\nimport { plugins } from \"@webiny/plugins\";\nimport { useQuery } from \"~/admin/hooks\";\nimport { LIST_MENU_CONTENT_GROUPS_MODELS } from \"~/admin/viewsGraphql\";\n\n/**\n * DISCLAIMER!\n * This file is OLD and needs refactoring into something that makes more sense in the context of the new UI Composer.\n * Even if we keep a dedicated `AdminGlobalSearchPlugin`, it needs to be converted to a proper class.\n * This can be a \"good first issue\" for community to solve.\n */\nconst GlobalSearchPlugins = () => {\n    const { getCurrentLocale } = useI18N();\n    const response = useQuery(LIST_MENU_CONTENT_GROUPS_MODELS);\n\n    const locale = getCurrentLocale(\"content\");\n\n    const contentModelGroups = get(response, \"data.listContentModelGroups.data\", []) || [];\n\n    const cmgHash = contentModelGroups.reduce((returnValue, currentValue) => {\n        return (\n            returnValue +\n            currentValue.contentModels.reduce((returnValue, currentValue) => {\n                return returnValue + currentValue.modelId;\n            }, \"\")\n        );\n    }, \"\");\n\n    // Generate \"admin-global-search\" plugins - enables the user to search content via the global search bar.\n    useEffect(() => {\n        // 1. Unregister all previously registered plugins.\n        plugins\n            .byType<AdminGlobalSearchPlugin>(\"admin-global-search\")\n            .filter(item => item.name.startsWith(\"admin-global-search-headless-cms\"))\n            .forEach(item => plugins.unregister(item.name));\n\n        // 2. Register a new set of plugins via the latest list of content models.\n        contentModelGroups.forEach(group => {\n            group.contentModels.forEach(contentModel => {\n                const pluginName = \"admin-global-search-headless-cms-\" + contentModel.modelId;\n                if (!plugins.byName(pluginName)) {\n                    plugins.register({\n                        type: \"admin-global-search\",\n                        name: \"admin-global-search-headless-cms-\" + contentModel.modelId,\n                        route: \"/cms/content-entries/\" + contentModel.modelId,\n                        label: contentModel.name\n                    });\n                }\n            });\n        });\n    }, [locale, cmgHash]);\n\n    return null;\n};\n\nexport default GlobalSearchPlugins;\n"],"file":"GlobalSearchPlugins.js"}