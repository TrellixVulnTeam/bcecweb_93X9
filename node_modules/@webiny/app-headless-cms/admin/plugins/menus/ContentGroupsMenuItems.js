import _createForOfIteratorHelper from "@babel/runtime/helpers/createForOfIteratorHelper";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useEffect } from "react";
import get from "lodash/get";
import pluralize from "pluralize";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { LIST_MENU_CONTENT_GROUPS_MODELS } from "../../viewsGraphql";
import useQuery from "../../hooks/useQuery";
import usePermission from "../../hooks/usePermission";
import { ContentGroupMenuElement } from "../../elements/ContentGroupMenuElement";
import { NothingToShowElement } from "../../elements/NothingToShowElement";
import { ContentModelMenuElement } from "../../elements/ContentModelMenuElement";
export var ContentGroupsMenuItems = function ContentGroupsMenuItems(_ref) {
  var view = _ref.view;
  var response = useQuery(LIST_MENU_CONTENT_GROUPS_MODELS);

  var _ref2 = get(response, "data.listContentModelGroups") || {},
      groups = _ref2.data;

  var _usePermission = usePermission(),
      canReadEntries = _usePermission.canReadEntries;

  function createMenuItems() {
    return _createMenuItems.apply(this, arguments);
  }

  function _createMenuItems() {
    _createMenuItems = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var mainMenu, _iterator, _step, _loop, _ret;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return view.awaitElement("headlessCms.mainMenu");

            case 2:
              mainMenu = _context.sent;

              if (mainMenu) {
                _context.next = 5;
                break;
              }

              return _context.abrupt("return");

            case 5:
              _iterator = _createForOfIteratorHelper(groups);
              _context.prev = 6;

              _loop = function _loop() {
                var group = _step.value;
                // Check if user has "contentEntry" permission for any content model for a content model group
                var hasContentEntryPermission = group.contentModels.some(function (contentModel) {
                  return canReadEntries({
                    contentModelGroup: group,
                    contentModel: contentModel
                  });
                });

                if (group.contentModels.length > 0 && !hasContentEntryPermission) {
                  return "continue";
                }

                var groupMenuItem = mainMenu.addElement(new ContentGroupMenuElement("cms-content-models-".concat(group.id), {
                  label: group.name,
                  icon: /*#__PURE__*/React.createElement(FontAwesomeIcon, {
                    style: {
                      color: "var(--mdc-theme-text-secondary-on-background)"
                    },
                    icon: group.icon.split("/")
                  })
                }));
                groupMenuItem.addElement(new NothingToShowElement("cms-content-models-".concat(group.id, "-empty"), {
                  label: "Nothing to show.",
                  shouldRender: function shouldRender() {
                    return group.contentModels.length === 0;
                  }
                }));
                group.contentModels.forEach(function (contentModel) {
                  if (canReadEntries({
                    contentModelGroup: group,
                    contentModel: contentModel
                  })) {
                    groupMenuItem.addElement(new ContentModelMenuElement(contentModel.modelId, {
                      label: pluralize(contentModel.name),
                      path: "/cms/content-entries/".concat(contentModel.modelId)
                    }));
                  }
                });
              };

              _iterator.s();

            case 9:
              if ((_step = _iterator.n()).done) {
                _context.next = 15;
                break;
              }

              _ret = _loop();

              if (!(_ret === "continue")) {
                _context.next = 13;
                break;
              }

              return _context.abrupt("continue", 13);

            case 13:
              _context.next = 9;
              break;

            case 15:
              _context.next = 20;
              break;

            case 17:
              _context.prev = 17;
              _context.t0 = _context["catch"](6);

              _iterator.e(_context.t0);

            case 20:
              _context.prev = 20;

              _iterator.f();

              return _context.finish(20);

            case 23:
              view.refresh();

            case 24:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[6, 17, 20, 23]]);
    }));
    return _createMenuItems.apply(this, arguments);
  }

  useEffect(function () {
    if (!groups) {
      return;
    }

    createMenuItems();
  }, [groups]);
  return null;
};
//# sourceMappingURL=ContentGroupsMenuItems.js.map