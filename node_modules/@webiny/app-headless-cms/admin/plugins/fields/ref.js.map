{"version":3,"sources":["../../../../src/admin/plugins/fields/ref.tsx"],"names":["React","useCallback","useMemo","get","useQuery","LIST_CONTENT_MODELS","validation","ValidationError","Cell","Grid","MultiAutoComplete","CircularProgress","useSnackbar","i18n","t","ns","plugin","type","name","field","validators","label","description","icon","allowMultipleValues","allowPredefinedValues","multipleValuesLabel","createField","settings","models","renderer","renderSettings","form","Bind","formData","data","contentModel","lockedFields","fieldId","lockedField","find","loading","error","showSnackbar","message","options","map","model","id","modelId","atLeastOneItem","value","validate","bind","formattedValueForAutoComplete","filter","option","some","values","onChange","graphql","queryField"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo } from \"react\";\nimport get from \"lodash/get\";\nimport { useQuery } from \"../../hooks\";\nimport { LIST_CONTENT_MODELS } from \"../../viewsGraphql\";\nimport { validation, ValidationError } from \"@webiny/validation\";\nimport { Cell, Grid } from \"@webiny/ui/Grid\";\nimport { MultiAutoComplete } from \"@webiny/ui/AutoComplete\";\nimport { CircularProgress } from \"@webiny/ui/Progress\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nimport { CmsEditorFieldTypePlugin } from \"~/types\";\nimport { ReactComponent as RefIcon } from \"./icons/round-link-24px.svg\";\n\nimport { i18n } from \"@webiny/app/i18n\";\n\nconst t = i18n.ns(\"app-headless-cms/admin/fields\");\n\nconst plugin: CmsEditorFieldTypePlugin = {\n    type: \"cms-editor-field-type\",\n    name: \"cms-editor-field-type-ref\",\n    field: {\n        type: \"ref\",\n        validators: [],\n        label: t`Reference`,\n        description: t`Reference existing content entries. For example, a book can reference one or more authors.`,\n        icon: <RefIcon />,\n        allowMultipleValues: true,\n        allowPredefinedValues: false,\n        multipleValuesLabel: t`Use as a list of references`,\n        createField() {\n            return {\n                type: this.type,\n                settings: {\n                    models: []\n                },\n                validation: [],\n                renderer: {\n                    name: \"\"\n                }\n            };\n        },\n        renderSettings({ form: { Bind, data: formData }, contentModel }) {\n            const lockedFields = get(contentModel, \"lockedFields\", []);\n            const fieldId = get(formData, \"fieldId\", null);\n            const lockedField = lockedFields.find(lockedField => lockedField.fieldId === fieldId);\n\n            const { data, loading, error } = useQuery(LIST_CONTENT_MODELS);\n            const { showSnackbar } = useSnackbar();\n\n            if (error) {\n                showSnackbar(error.message);\n                return null;\n            }\n\n            // Format options for the Autocomplete component.\n            const options = useMemo(() => {\n                return get(data, \"listContentModels.data\", []).map(model => {\n                    return { id: model.modelId, name: model.name };\n                });\n            }, [data]);\n\n            const atLeastOneItem = useCallback(async value => {\n                try {\n                    await validation.validate(value, \"required,minLength:1\");\n                } catch (err) {\n                    throw new ValidationError(`Please select at least 1 item`);\n                }\n            }, []);\n\n            return (\n                <Grid>\n                    {loading && <CircularProgress />}\n                    <Cell span={12}>\n                        <Bind name={\"settings.models\"} validators={atLeastOneItem}>\n                            {bind => {\n                                // Format value prop for MultiAutoComplete component.\n                                const formattedValueForAutoComplete = options.filter(option =>\n                                    bind.value.some(({ modelId }) => option.id === modelId)\n                                );\n\n                                return (\n                                    <MultiAutoComplete\n                                        {...bind}\n                                        value={formattedValueForAutoComplete}\n                                        onChange={values => {\n                                            bind.onChange(\n                                                values.map(value => ({ modelId: value.id }))\n                                            );\n                                        }}\n                                        label={t`Content Models`}\n                                        description={t`Cannot be changed later`}\n                                        options={options}\n                                        disabled={lockedField && lockedField.modelId}\n                                    />\n                                );\n                            }}\n                        </Bind>\n                    </Cell>\n                </Grid>\n            );\n        },\n        graphql: {\n            queryField: /* GraphQL */ `\n                {\n                    modelId\n                    entryId\n                }\n            `\n        }\n    }\n};\n\nexport default plugin;\n"],"file":"ref.js"}