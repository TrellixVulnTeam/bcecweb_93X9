import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;

import React from "react";
import styled from "@emotion/styled";
import { css } from "emotion";
import { Grid, Cell, GridInner } from "@webiny/ui/Grid";
import { i18n } from "@webiny/app/i18n";
import { DynamicFieldset } from "@webiny/ui/DynamicFieldset";
import { Typography } from "@webiny/ui/Typography";
import { ButtonPrimary, ButtonSecondary } from "@webiny/ui/Button";
import { Input } from "@webiny/ui/Input";
var t = i18n.ns("app-headless-cms/admin/fields/dynamic-fieldset-predefined-values");
var Fieldset = /*#__PURE__*/styled("div", {
  target: "e1vzahbl0",
  label: "Fieldset"
})({
  position: "relative",
  width: "100%",
  marginBottom: 15,
  ".webiny-ui-button": {
    position: "absolute",
    display: "block",
    right: 10,
    top: 13
  }
});
var controlButtons = /*#__PURE__*/css({
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  ">button": {
    marginRight: 15
  }
}, "label:controlButtons;");
var emptyStyles = /*#__PURE__*/css({
  textAlign: "center"
}, "label:emptyStyles;");
var Header = /*#__PURE__*/styled("div", {
  target: "e1vzahbl1",
  label: "Header"
})({
  display: "flex",
  justifyContent: "space-between",
  marginBottom: 15
});

function PredefinedValuesDynamicFieldset(_ref) {
  var getBind = _ref.getBind,
      _ref$renderValueInput = _ref.renderValueInput,
      renderValueInput = _ref$renderValueInput === void 0 ? null : _ref$renderValueInput;
  var Bind = getBind();
  return /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
    span: 12
  }, /*#__PURE__*/React.createElement(Bind, null, /*#__PURE__*/React.createElement(DynamicFieldset, null, function (_ref2) {
    var actions = _ref2.actions,
        header = _ref2.header,
        row = _ref2.row,
        empty = _ref2.empty;
    return /*#__PURE__*/React.createElement(React.Fragment, null, row(function (_ref3) {
      var index = _ref3.index;
      var Bind = getBind(index);
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GridInner, null, /*#__PURE__*/React.createElement(Cell, {
        span: 5
      }, /*#__PURE__*/React.createElement(Fieldset, null, /*#__PURE__*/React.createElement(Bind, {
        name: "label"
      }, /*#__PURE__*/React.createElement(Input, {
        label: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Label"])))
      })))), /*#__PURE__*/React.createElement(Cell, {
        span: 5
      }, /*#__PURE__*/React.createElement(Fieldset, null, renderValueInput ? renderValueInput(Bind) : /*#__PURE__*/React.createElement(Bind, {
        name: "value"
      }, /*#__PURE__*/React.createElement(Input, {
        label: t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Value"])))
      })))), /*#__PURE__*/React.createElement(Cell, {
        span: 2,
        className: controlButtons
      }, /*#__PURE__*/React.createElement(ButtonPrimary, {
        small: true,
        onClick: actions.add(index)
      }, "+"), /*#__PURE__*/React.createElement(ButtonSecondary, {
        small: true,
        onClick: actions.remove(index)
      }, "-"))));
    }), empty(function () {
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Typography, {
        use: "overline"
      }, t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["Predefined values"]))))), /*#__PURE__*/React.createElement(GridInner, {
        className: emptyStyles
      }, /*#__PURE__*/React.createElement(Cell, {
        span: 12
      }, /*#__PURE__*/React.createElement(Typography, {
        use: "subtitle1"
      }, t(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["There are no predefined values available."]))))), /*#__PURE__*/React.createElement(Cell, {
        span: 12
      }, /*#__PURE__*/React.createElement(ButtonPrimary, {
        onClick: actions.add()
      }, t(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["Add a predefined value"])))))));
    }), header(function () {
      return /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Typography, {
        use: "overline"
      }, t(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["Predefined values"])))));
    }));
  }))));
}

export default PredefinedValuesDynamicFieldset;
//# sourceMappingURL=PredefinedValuesDynamicFieldset.js.map