import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _get from "lodash/get";

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15;

import React from "react";
import { Grid, Cell } from "@webiny/ui/Grid";
import { Select } from "@webiny/ui/Select";
import { Input } from "@webiny/ui/Input";
import { i18n } from "@webiny/app/i18n";
import { ReactComponent as DateTimeIcon } from "@svgr/webpack!./icons/schedule-black-24px.svg";
var t = i18n.ns("app-headless-cms/admin/fields");
var plugin = {
  type: "cms-editor-field-type",
  name: "cms-editor-field-type-dateTime",
  field: {
    type: "datetime",
    label: t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Date/Time"]))),
    description: t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Store date and time."]))),
    icon: /*#__PURE__*/React.createElement(DateTimeIcon, null),
    validators: ["required", "dateGte", "dateLte"],
    allowMultipleValues: true,
    allowPredefinedValues: false,
    // TODO: implement "renderPredefinedValues" and set to true.
    multipleValuesLabel: t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["Use as a list of dates and times"]))),
    createField: function createField() {
      return {
        type: this.type,
        settings: {
          type: "date"
        },
        validation: [],
        renderer: {
          name: ""
        }
      };
    },
    renderSettings: function renderSettings(_ref) {
      var _ref$form = _ref.form,
          Bind = _ref$form.Bind,
          data = _ref$form.data,
          contentModel = _ref.contentModel;
      var lockedFields = contentModel.lockedFields || [];

      var fieldId = _get(data, "fieldId", null);

      var lockedField = lockedFields.find(function (lockedField) {
        return lockedField.fieldId === fieldId;
      });
      return /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
        span: 12
      }, /*#__PURE__*/React.createElement(Bind, {
        name: "placeholderText"
      }, /*#__PURE__*/React.createElement(Input, {
        label: t(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Placeholder text"]))),
        description: t(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["Placeholder text (optional)"])))
      }))), /*#__PURE__*/React.createElement(Cell, {
        span: 12
      }, /*#__PURE__*/React.createElement(Bind, {
        name: "settings.type"
      }, /*#__PURE__*/React.createElement(Select, {
        label: t(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["Format"]))),
        description: t(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["Cannot be changed later"]))),
        disabled: lockedField && Boolean(lockedField.formatType)
      }, /*#__PURE__*/React.createElement("option", {
        value: t(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["date"])))
      }, t(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["Date only"])))), /*#__PURE__*/React.createElement("option", {
        value: t(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["time"])))
      }, t(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["Time only"])))), /*#__PURE__*/React.createElement("option", {
        value: t(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["dateTimeWithTimezone"])))
      }, t(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["Date and time with timezone"])))), /*#__PURE__*/React.createElement("option", {
        value: t(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["dateTimeWithoutTimezone"])))
      }, t(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["Date and time without timezone"]))))))));
    }
  }
};
export default plugin;
//# sourceMappingURL=dateTime.js.map