{"version":3,"sources":["../../../../src/admin/components/ContentEntryForm/useBind.tsx"],"names":["React","useRef","useCallback","cloneElement","createValidators","useBind","ParentBind","Bind","field","memoizedBindComponents","index","parentName","name","fieldId","undefined","filter","v","join","current","validators","validation","listValidators","listValidation","defaultValue","multipleValues","isMultipleValues","inputValidators","UseBind","childName","childValidators","children","bind","props","appendValue","newValue","onChange","value","prependValue","appendValues","newValues","removeValue","slice","form","validateInput"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,WAAxB,EAAqCC,YAArC,QAAyD,OAAzD;AAEA,SAASC,gBAAT;AASA,OAAO,SAASC,OAAT,OAA8C;AAAA,MAArBC,UAAqB,QAA3BC,IAA2B;AAAA,MAATC,KAAS,QAATA,KAAS;AACjD,MAAMC,sBAAsB,GAAGR,MAAM,CAAC,EAAD,CAArC;AAEA,SAAOC,WAAW,CACd,YAAgB;AAAA,QAAfQ,KAAe,uEAAP,CAAC,CAAM;AACZ,QAAQC,UAAR,GAAuBL,UAAvB,CAAQK,UAAR,CADY,CAEZ;AACA;;AACA,QAAMC,IAAI,GAAG,CAACD,UAAD,EAAaH,KAAK,CAACK,OAAnB,EAA4BH,KAAK,IAAI,CAAT,GAAaA,KAAb,GAAqBI,SAAjD,EACRC,MADQ,CACD,UAAAC,CAAC;AAAA,aAAIA,CAAC,KAAKF,SAAV;AAAA,KADA,EAERG,IAFQ,CAEH,GAFG,CAAb;;AAIA,QAAIR,sBAAsB,CAACS,OAAvB,CAA+BN,IAA/B,CAAJ,EAA0C;AACtC,aAAOH,sBAAsB,CAACS,OAAvB,CAA+BN,IAA/B,CAAP;AACH;;AAED,QAAMO,UAAU,GAAGf,gBAAgB,CAACI,KAAK,CAACY,UAAN,IAAoB,EAArB,CAAnC;AACA,QAAMC,cAAc,GAAGjB,gBAAgB,CAACI,KAAK,CAACc,cAAN,IAAwB,EAAzB,CAAvC;AACA,QAAMC,YAAY,GAAGf,KAAK,CAACgB,cAAN,GAAuB,EAAvB,GAA4BV,SAAjD;AACA,QAAMW,gBAAgB,GAAGf,KAAK,KAAK,CAAC,CAAX,IAAgBF,KAAK,CAACgB,cAA/C;AACA,QAAME,eAAe,GAAGD,gBAAgB,GAAGJ,cAAH,GAAoBF,UAA5D;;AAEAV,IAAAA,sBAAsB,CAACS,OAAvB,CAA+BN,IAA/B,IAAuC,SAASe,OAAT,QAIpC;AAAA,UAHOC,SAGP,SAHChB,IAGD;AAAA,UAFaiB,eAEb,SAFCV,UAED;AAAA,UADCW,QACD,SADCA,QACD;AACC,0BACI,oBAAC,UAAD;AACI,QAAA,IAAI,EAAEF,SAAS,IAAIhB,IADvB;AAEI,QAAA,UAAU,EAAEiB,eAAe,IAAIH,eAFnC;AAGI,QAAA,YAAY,EAAEhB,KAAK,KAAK,CAAC,CAAX,GAAea,YAAf,GAA8B;AAHhD,SAKK,UAAAQ,IAAI,EAAI;AACL;AACA,YAAMC,KAA8B,qBAAQD,IAAR,CAApC;;AACA,YAAIvB,KAAK,CAACgB,cAAN,IAAwBd,KAAK,KAAK,CAAC,CAAvC,EAA0C;AACtCsB,UAAAA,KAAK,CAACC,WAAN,GAAoB,UAAAC,QAAQ,EAAI;AAC5BH,YAAAA,IAAI,CAACI,QAAL,8BAAkBJ,IAAI,CAACK,KAAvB,IAA8BF,QAA9B;AACH,WAFD;;AAGAF,UAAAA,KAAK,CAACK,YAAN,GAAqB,UAAAH,QAAQ,EAAI;AAC7BH,YAAAA,IAAI,CAACI,QAAL,EAAeD,QAAf,4BAA4BH,IAAI,CAACK,KAAjC;AACH,WAFD;;AAGAJ,UAAAA,KAAK,CAACM,YAAN,GAAqB,UAAAC,SAAS,EAAI;AAC9BR,YAAAA,IAAI,CAACI,QAAL,8BAAkBJ,IAAI,CAACK,KAAvB,sBAAiCG,SAAjC;AACH,WAFD;;AAIAP,UAAAA,KAAK,CAACQ,WAAN,GAAoB,UAAA9B,KAAK,EAAI;AACzB,gBAAIA,KAAK,IAAI,CAAb,EAAgB;AACZ,kBAAI0B,MAAK,GAAGL,IAAI,CAACK,KAAjB;AACAA,cAAAA,MAAK,gCACEA,MAAK,CAACK,KAAN,CAAY,CAAZ,EAAe/B,KAAf,CADF,sBAEE0B,MAAK,CAACK,KAAN,CAAY/B,KAAK,GAAG,CAApB,CAFF,EAAL;AAKAqB,cAAAA,IAAI,CAACI,QAAL,CAAcC,MAAd,EAPY,CASZ;;AACAL,cAAAA,IAAI,CAACW,IAAL,CAAUC,aAAV,CAAwBnC,KAAK,CAACK,OAA9B;AACH;AACJ,WAbD;AAcH;;AAED,YAAI,OAAOiB,QAAP,KAAoB,UAAxB,EAAoC;AAChC,iBAAOA,QAAQ,CAACE,KAAD,CAAf;AACH;;AAED,4BAAO7B,YAAY,CAAC2B,QAAD,EAAWE,KAAX,CAAnB;AACH,OAxCL,CADJ;AA4CH,KAjDD,CAlBY,CAqEZ;;;AACAvB,IAAAA,sBAAsB,CAACS,OAAvB,CAA+BN,IAA/B,EAAqCD,UAArC,GAAkDC,IAAlD;AAEA,WAAOH,sBAAsB,CAACS,OAAvB,CAA+BN,IAA/B,CAAP;AACH,GA1Ea,EA2Ed,CAACJ,KAAK,CAACK,OAAP,CA3Ec,CAAlB;AA6EH","sourcesContent":["import React, { useRef, useCallback, cloneElement } from \"react\";\nimport { BindComponentRenderProp } from \"@webiny/form\";\nimport { createValidators } from \"./functions/createValidators\";\n\ninterface FieldBindProps extends BindComponentRenderProp {\n    appendValue: (value: any) => void;\n    prependValue: (value: any) => void;\n    appendValues: (values: any[]) => void;\n    removeValue: (index: number) => void;\n}\n\nexport function useBind({ Bind: ParentBind, field }) {\n    const memoizedBindComponents = useRef({});\n\n    return useCallback(\n        (index = -1) => {\n            const { parentName } = ParentBind;\n            // If there's a parent name assigned to the given Bind component, we need to include it in the new field \"name\".\n            // This allows us to have nested fields (like \"object\" field with nested properties)\n            const name = [parentName, field.fieldId, index >= 0 ? index : undefined]\n                .filter(v => v !== undefined)\n                .join(\".\");\n\n            if (memoizedBindComponents.current[name]) {\n                return memoizedBindComponents.current[name];\n            }\n\n            const validators = createValidators(field.validation || []);\n            const listValidators = createValidators(field.listValidation || []);\n            const defaultValue = field.multipleValues ? [] : undefined;\n            const isMultipleValues = index === -1 && field.multipleValues;\n            const inputValidators = isMultipleValues ? listValidators : validators;\n\n            memoizedBindComponents.current[name] = function UseBind({\n                name: childName,\n                validators: childValidators,\n                children\n            }) {\n                return (\n                    <ParentBind\n                        name={childName || name}\n                        validators={childValidators || inputValidators}\n                        defaultValue={index === -1 ? defaultValue : null}\n                    >\n                        {bind => {\n                            // Multiple-values functions below.\n                            const props: Partial<FieldBindProps> = { ...bind };\n                            if (field.multipleValues && index === -1) {\n                                props.appendValue = newValue => {\n                                    bind.onChange([...bind.value, newValue]);\n                                };\n                                props.prependValue = newValue => {\n                                    bind.onChange([newValue, ...bind.value]);\n                                };\n                                props.appendValues = newValues => {\n                                    bind.onChange([...bind.value, ...newValues]);\n                                };\n\n                                props.removeValue = index => {\n                                    if (index >= 0) {\n                                        let value = bind.value;\n                                        value = [\n                                            ...value.slice(0, index),\n                                            ...value.slice(index + 1)\n                                        ];\n\n                                        bind.onChange(value);\n\n                                        // To make sure the field is still valid, we must trigger validation.\n                                        bind.form.validateInput(field.fieldId);\n                                    }\n                                };\n                            }\n\n                            if (typeof children === \"function\") {\n                                return children(props);\n                            }\n\n                            return cloneElement(children, props);\n                        }}\n                    </ParentBind>\n                );\n            };\n\n            // We need to keep track of current field name, to support nested fields.\n            memoizedBindComponents.current[name].parentName = name;\n\n            return memoizedBindComponents.current[name];\n        },\n        [field.fieldId]\n    );\n}\n"],"file":"useBind.js"}