{"version":3,"sources":["../../../../src/admin/components/ContentEntryForm/useContentEntryForm.ts"],"names":["useCallback","useMemo","useState","pick","useRouter","useSnackbar","GQL","useMutation","GQLCache","prepareFormData","useContentEntry","plugins","useContentEntryForm","params","listQueryVariables","contentModel","entry","history","showSnackbar","invalidFields","setInvalidFields","loading","setLoading","renderPlugins","byType","goToRevision","id","push","modelId","encodeURIComponent","LIST_CONTENT","createListQuery","CREATE_CONTENT","createCreateMutation","UPDATE_CONTENT","createUpdateMutation","CREATE_CONTENT_FROM","createCreateFromMutation","createMutation","updateMutation","createFromMutation","setInvalidFieldValues","errors","values","reduce","acc","er","fieldId","error","resetInvalidFieldValues","createContent","data","variables","update","cache","content","message","addEntryToListCache","response","name","updateContent","revision","createContentFrom","formData","newRevision","updateLatestRevisionInListCache","addRevisionToRevisionsCache","onSubmit","fieldsIds","fields","map","item","gqlData","meta","isLocked","locked","getDefaultValues","overrides","onChange"],"mappings":";;;;;AAAA,SAAmCA,WAAnC,EAAgDC,OAAhD,EAAyDC,QAAzD,QAAyE,OAAzE;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,WAAT,QAA4B,qCAA5B;AAEA,OAAO,KAAKC,GAAZ;AACA,SAASC,WAAT;AACA,OAAO,KAAKC,QAAZ;AACA,SAASC,eAAT;AAEA,SAASC,eAAT;AACA,SAASC,OAAT,QAAwB,iBAAxB;AAmBA,OAAO,SAASC,mBAAT,CAA6BC,MAA7B,EAAqF;AACxF,yBAA+BH,eAAe,EAA9C;AAAA,MAAQI,kBAAR,oBAAQA,kBAAR;;AACA,MAAQC,YAAR,GAAgCF,MAAhC,CAAQE,YAAR;AAAA,MAAsBC,KAAtB,GAAgCH,MAAhC,CAAsBG,KAAtB;;AACA,mBAAoBZ,SAAS,EAA7B;AAAA,MAAQa,OAAR,cAAQA,OAAR;;AACA,qBAAyBZ,WAAW,EAApC;AAAA,MAAQa,YAAR,gBAAQA,YAAR;;AACA,kBAA0ChB,QAAQ,CAAyB,EAAzB,CAAlD;AAAA;AAAA,MAAOiB,aAAP;AAAA,MAAsBC,gBAAtB;;AACA,mBAA8BlB,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOmB,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,MAAMC,aAAa,GAAGtB,OAAO,CACzB;AAAA,WAAMU,OAAO,CAACa,MAAR,CAA6C,2BAA7C,CAAN;AAAA,GADyB,EAEzB,EAFyB,CAA7B;AAKA,MAAMC,YAAY,GAAGzB,WAAW,CAAC,UAAA0B,EAAE,EAAI;AACnCT,IAAAA,OAAO,CAACU,IAAR,gCAAqCZ,YAAY,CAACa,OAAlD,iBAAgEC,kBAAkB,CAACH,EAAD,CAAlF;AACH,GAF+B,EAE7B,EAF6B,CAAhC;;AAIA,iBAAgEzB,OAAO,CAAC,YAAM;AAC1E,WAAO;AACH6B,MAAAA,YAAY,EAAExB,GAAG,CAACyB,eAAJ,CAAoBhB,YAApB,CADX;AAEHiB,MAAAA,cAAc,EAAE1B,GAAG,CAAC2B,oBAAJ,CAAyBlB,YAAzB,CAFb;AAGHmB,MAAAA,cAAc,EAAE5B,GAAG,CAAC6B,oBAAJ,CAAyBpB,YAAzB,CAHb;AAIHqB,MAAAA,mBAAmB,EAAE9B,GAAG,CAAC+B,wBAAJ,CAA6BtB,YAA7B;AAJlB,KAAP;AAMH,GAPsE,EAOpE,CAACA,YAAY,CAACa,OAAd,CAPoE,CAAvE;AAAA,MAAQI,cAAR,YAAQA,cAAR;AAAA,MAAwBE,cAAxB,YAAwBA,cAAxB;AAAA,MAAwCE,mBAAxC,YAAwCA,mBAAxC;;AASA,qBAAyB7B,WAAW,CAACyB,cAAD,CAApC;AAAA;AAAA,MAAOM,cAAP;;AACA,sBAAyB/B,WAAW,CAAC2B,cAAD,CAApC;AAAA;AAAA,MAAOK,cAAP;;AACA,sBAA6BhC,WAAW,CAAC6B,mBAAD,CAAxC;AAAA;AAAA,MAAOI,kBAAP;;AAEA,MAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAC,MAAM,EAAI;AACpC,QAAMC,MAAM,GAAG,CAACD,MAAM,IAAI,EAAX,EAAeE,MAAf,CAAsB,UAACC,GAAD,EAAMC,EAAN,EAAa;AAC9CD,MAAAA,GAAG,CAACC,EAAE,CAACC,OAAJ,CAAH,GAAkBD,EAAE,CAACE,KAArB;AACA,aAAOH,GAAP;AACH,KAHc,EAGZ,EAHY,CAAf;AAIAzB,IAAAA,gBAAgB,CAAC;AAAA,aAAMuB,MAAN;AAAA,KAAD,CAAhB;AACH,GAND;;AAQA,MAAMM,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAM;AAClC7B,IAAAA,gBAAgB,CAAC;AAAA,aAAO,EAAP;AAAA,KAAD,CAAhB;AACH,GAFD;;AAIA,MAAM8B,aAAa,GAAGlD,WAAW;AAAA,wEAC7B,iBAAMmD,IAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACI7B,cAAAA,UAAU,CAAC,IAAD,CAAV;AADJ;AAAA,qBAE2BgB,cAAc,CAAC;AAClCc,gBAAAA,SAAS,EAAE;AAAED,kBAAAA,IAAI,EAAJA;AAAF,iBADuB;AAElCE,gBAAAA,MAFkC,kBAE3BC,KAF2B,SAEV;AAAA,sBAARH,IAAQ,SAARA,IAAQ;AACpB,sCAA+BA,IAAI,CAACI,OAApC;AAAA,sBAAcvC,KAAd,iBAAQmC,IAAR;AAAA,sBAAqBH,KAArB,iBAAqBA,KAArB;;AACA,sBAAIA,KAAJ,EAAW;AACP9B,oBAAAA,YAAY,CAAC8B,KAAK,CAACQ,OAAP,CAAZ;AACAf,oBAAAA,qBAAqB,CAACO,KAAK,CAACG,IAAP,CAArB;AACA;AACH;;AACDF,kBAAAA,uBAAuB;AACvBzC,kBAAAA,QAAQ,CAACiD,mBAAT,CAA6B1C,YAA7B,EAA2CuC,KAA3C,EAAkDtC,KAAlD,EAAyDF,kBAAzD;AACH;AAXiC,eAAD,CAFzC;;AAAA;AAEU4C,cAAAA,QAFV;AAeIpC,cAAAA,UAAU,CAAC,KAAD,CAAV;AAfJ,sCAiBmCoC,QAAQ,CAACP,IAAT,CAAcI,OAjBjD,EAiBYP,KAjBZ,yBAiBYA,KAjBZ,EAiByBhC,KAjBzB,yBAiBmBmC,IAjBnB;;AAAA,mBAkBQH,KAlBR;AAAA;AAAA;AAAA;;AAmBQ9B,cAAAA,YAAY,CAAC8B,KAAK,CAACQ,OAAP,CAAZ;AACAf,cAAAA,qBAAqB,CAACO,KAAK,CAACG,IAAP,CAArB;AApBR,+CAqBe,IArBf;;AAAA;AAuBIF,cAAAA,uBAAuB;AACvB/B,cAAAA,YAAY,WAAIH,YAAY,CAAC4C,IAAjB,kCAAZ;AACAlC,cAAAA,YAAY,CAACT,KAAK,CAACU,EAAP,CAAZ;AAzBJ,+CA0BWV,KA1BX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD6B;;AAAA;AAAA;AAAA;AAAA,OA6B7B,CAACD,YAAY,CAACa,OAAd,EAAuBd,kBAAvB,CA7B6B,CAAjC;AAgCA,MAAM8C,aAAa,GAAG5D,WAAW;AAAA,yEAC7B,kBAAO6D,QAAP,EAAiBV,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACI7B,cAAAA,UAAU,CAAC,IAAD,CAAV;AADJ;AAAA,qBAE2BiB,cAAc,CAAC;AAClCa,gBAAAA,SAAS,EAAE;AAAES,kBAAAA,QAAQ,EAARA,QAAF;AAAYV,kBAAAA,IAAI,EAAJA;AAAZ;AADuB,eAAD,CAFzC;;AAAA;AAEUO,cAAAA,QAFV;AAKIpC,cAAAA,UAAU,CAAC,KAAD,CAAV;AAEQ0B,cAAAA,KAPZ,GAOsBU,QAAQ,CAACP,IAAT,CAAcI,OAPpC,CAOYP,KAPZ;;AAAA,mBAQQA,KARR;AAAA;AAAA;AAAA;;AASQ9B,cAAAA,YAAY,CAAC8B,KAAK,CAACQ,OAAP,CAAZ;AACAf,cAAAA,qBAAqB,CAACO,KAAK,CAACG,IAAP,CAArB;AAVR,gDAWe,IAXf;;AAAA;AAcIF,cAAAA,uBAAuB;AACvB/B,cAAAA,YAAY,CAAC,6BAAD,CAAZ;AACcF,cAAAA,KAhBlB,GAgB4B0C,QAAQ,CAACP,IAAT,CAAcI,OAhB1C,CAgBYJ,IAhBZ;AAAA,gDAiBWnC,KAjBX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD6B;;AAAA;AAAA;AAAA;AAAA,OAoB7B,CAACD,YAAY,CAACa,OAAd,CApB6B,CAAjC;AAuBA,MAAMkC,iBAAiB,GAAG9D,WAAW;AAAA,yEACjC,kBAAO6D,QAAP,EAAiBE,QAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACIzC,cAAAA,UAAU,CAAC,IAAD,CAAV;AADJ;AAAA,qBAE2BkB,kBAAkB,CAAC;AACtCY,gBAAAA,SAAS,EAAE;AAAES,kBAAAA,QAAQ,EAARA,QAAF;AAAYV,kBAAAA,IAAI,EAAEY;AAAlB,iBAD2B;AAEtCV,gBAAAA,MAFsC,kBAE/BC,KAF+B,SAEd;AAAA,sBAARH,IAAQ,SAARA,IAAQ;AACpB,uCAAqCA,IAAI,CAACI,OAA1C;AAAA,sBAAcS,WAAd,kBAAQb,IAAR;AAAA,sBAA2BH,KAA3B,kBAA2BA,KAA3B;;AACA,sBAAIA,KAAJ,EAAW;AACP9B,oBAAAA,YAAY,CAAC8B,KAAK,CAACQ,OAAP,CAAZ;AACAf,oBAAAA,qBAAqB,CAACO,KAAK,CAACG,IAAP,CAArB;AACA;AACH;;AACDF,kBAAAA,uBAAuB;AACvBzC,kBAAAA,QAAQ,CAACyD,+BAAT,CACIlD,YADJ,EAEIuC,KAFJ,EAGIU,WAHJ,EAIIlD,kBAJJ;AAMAN,kBAAAA,QAAQ,CAAC0D,2BAAT,CAAqCnD,YAArC,EAAmDuC,KAAnD,EAA0DU,WAA1D;AAEA9C,kBAAAA,YAAY,CAAC,6BAAD,CAAZ;AAEAD,kBAAAA,OAAO,CAACU,IAAR,gCAC4BZ,YAAY,CAACa,OADzC,iBACuDC,kBAAkB,CACjEmC,WAAW,CAACtC,EADqD,CADzE;AAKH;AAzBqC,eAAD,CAF7C;;AAAA;AAEUgC,cAAAA,QAFV;AA6BIpC,cAAAA,UAAU,CAAC,KAAD,CAAV;AA7BJ,uCA+B4BoC,QAAQ,CAACP,IAAT,CAAcI,OA/B1C,EA+BYJ,IA/BZ,0BA+BYA,IA/BZ,EA+BkBH,KA/BlB,0BA+BkBA,KA/BlB;;AAAA,mBAgCQA,KAhCR;AAAA;AAAA;AAAA;;AAiCQ9B,cAAAA,YAAY,CAAC8B,KAAK,CAACQ,OAAP,CAAZ;AACAf,cAAAA,qBAAqB,CAACO,KAAK,CAACG,IAAP,CAArB;AAlCR,gDAmCe,IAnCf;;AAAA;AAqCIF,cAAAA,uBAAuB;AArC3B,gDAuCWE,IAvCX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADiC;;AAAA;AAAA;AAAA;AAAA,OA0CjC,CAACpC,YAAY,CAACa,OAAd,EAAuBd,kBAAvB,CA1CiC,CAArC;;AA6CA,MAAMqD,QAAQ;AAAA,yEAAG,kBAAMhB,IAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACPiB,cAAAA,SADO,GACKrD,YAAY,CAACsD,MAAb,CAAoBC,GAApB,CAAwB,UAAAC,IAAI;AAAA,uBAAIA,IAAI,CAACxB,OAAT;AAAA,eAA5B,CADL;AAEPgB,cAAAA,QAFO,GAEI5D,IAAI,CAACgD,IAAD,qBAAWiB,SAAX,EAFR;AAIPI,cAAAA,OAJO,GAIG/D,eAAe,CAACsD,QAAD,EAAWhD,YAAX,CAJlB;;AAAA,kBAKRC,KAAK,CAACU,EALE;AAAA;AAAA;AAAA;;AAAA,gDAMFwB,aAAa,CAACsB,OAAD,CANX;;AAAA;AASLC,cAAAA,IATK,GASIzD,KATJ,CASLyD,IATK;AAAA,sBAUgBA,IAAI,IAAI,EAVxB,EAUGC,QAVH,SAULC,MAVK;;AAAA,kBAYRD,QAZQ;AAAA;AAAA;AAAA;;AAAA,gDAaFd,aAAa,CAAC5C,KAAK,CAACU,EAAP,EAAW8C,OAAX,CAbX;;AAAA;AAAA,gDAeNV,iBAAiB,CAAC9C,KAAK,CAACU,EAAP,EAAW8C,OAAX,CAfX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAARL,QAAQ;AAAA;AAAA;AAAA,KAAd;;AAkBA,MAAMS,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAoB;AAAA,QAAnBC,SAAmB,uEAAP,EAAO;AACzC,QAAMlC,MAAM,GAAG,EAAf,CADyC,CAEzC;;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ,2CAAYA,MAAZ,GAAuBkC,SAAvB;AACH,GAfD;;AAiBA,SAAO;AACH1B,IAAAA,IAAI,EAAEnC,KAAK,GAAGA,KAAH,GAAW4D,gBAAgB,EADnC;AAEHvD,IAAAA,OAAO,EAAPA,OAFG;AAGHC,IAAAA,UAAU,EAAVA,UAHG;AAIHwD,IAAAA,QAAQ,EAAEjE,MAAM,CAACiE,QAJd;AAKHX,IAAAA,QAAQ,EAARA,QALG;AAMHhD,IAAAA,aAAa,EAAbA,aANG;AAOHI,IAAAA,aAAa,EAAbA;AAPG,GAAP;AASH","sourcesContent":["import { Dispatch, SetStateAction, useCallback, useMemo, useState } from \"react\";\nimport pick from \"lodash/pick\";\nimport { useRouter } from \"@webiny/react-router\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nimport { FormOnSubmit } from \"@webiny/form\";\nimport * as GQL from \"~/admin/graphql/contentEntries\";\nimport { useMutation } from \"~/admin/hooks\";\nimport * as GQLCache from \"~/admin/views/contentEntries/ContentEntry/cache\";\nimport { prepareFormData } from \"~/admin/views/contentEntries/ContentEntry/prepareFormData\";\nimport { CmsEditorContentModel, CmsEditorFieldRendererPlugin } from \"~/types\";\nimport { useContentEntry } from \"~/admin/views/contentEntries/hooks/useContentEntry\";\nimport { plugins } from \"@webiny/plugins\";\n\ninterface UseContentEntryForm {\n    data: Record<string, any>;\n    loading: boolean;\n    setLoading: Dispatch<SetStateAction<boolean>>;\n    onChange: FormOnSubmit;\n    onSubmit: (data: Record<string, any>) => void;\n    invalidFields: Record<string, string>;\n    renderPlugins: CmsEditorFieldRendererPlugin[];\n}\n\nexport interface UseContentEntryFormParams {\n    contentModel: CmsEditorContentModel;\n    entry?: { [key: string]: any };\n    onChange?: FormOnSubmit;\n    onSubmit?: FormOnSubmit;\n}\n\nexport function useContentEntryForm(params: UseContentEntryFormParams): UseContentEntryForm {\n    const { listQueryVariables } = useContentEntry();\n    const { contentModel, entry } = params;\n    const { history } = useRouter();\n    const { showSnackbar } = useSnackbar();\n    const [invalidFields, setInvalidFields] = useState<Record<string, string>>({});\n    const [loading, setLoading] = useState(false);\n\n    const renderPlugins = useMemo(\n        () => plugins.byType<CmsEditorFieldRendererPlugin>(\"cms-editor-field-renderer\"),\n        []\n    );\n\n    const goToRevision = useCallback(id => {\n        history.push(`/cms/content-entries/${contentModel.modelId}?id=${encodeURIComponent(id)}`);\n    }, []);\n\n    const { CREATE_CONTENT, UPDATE_CONTENT, CREATE_CONTENT_FROM } = useMemo(() => {\n        return {\n            LIST_CONTENT: GQL.createListQuery(contentModel),\n            CREATE_CONTENT: GQL.createCreateMutation(contentModel),\n            UPDATE_CONTENT: GQL.createUpdateMutation(contentModel),\n            CREATE_CONTENT_FROM: GQL.createCreateFromMutation(contentModel)\n        };\n    }, [contentModel.modelId]);\n\n    const [createMutation] = useMutation(CREATE_CONTENT);\n    const [updateMutation] = useMutation(UPDATE_CONTENT);\n    const [createFromMutation] = useMutation(CREATE_CONTENT_FROM);\n\n    const setInvalidFieldValues = errors => {\n        const values = (errors || []).reduce((acc, er) => {\n            acc[er.fieldId] = er.error;\n            return acc;\n        }, {});\n        setInvalidFields(() => values);\n    };\n\n    const resetInvalidFieldValues = () => {\n        setInvalidFields(() => ({}));\n    };\n\n    const createContent = useCallback(\n        async data => {\n            setLoading(true);\n            const response = await createMutation({\n                variables: { data },\n                update(cache, { data }) {\n                    const { data: entry, error } = data.content;\n                    if (error) {\n                        showSnackbar(error.message);\n                        setInvalidFieldValues(error.data);\n                        return;\n                    }\n                    resetInvalidFieldValues();\n                    GQLCache.addEntryToListCache(contentModel, cache, entry, listQueryVariables);\n                }\n            });\n            setLoading(false);\n\n            const { error, data: entry } = response.data.content;\n            if (error) {\n                showSnackbar(error.message);\n                setInvalidFieldValues(error.data);\n                return null;\n            }\n            resetInvalidFieldValues();\n            showSnackbar(`${contentModel.name} entry created successfully!`);\n            goToRevision(entry.id);\n            return entry;\n        },\n        [contentModel.modelId, listQueryVariables]\n    );\n\n    const updateContent = useCallback(\n        async (revision, data) => {\n            setLoading(true);\n            const response = await updateMutation({\n                variables: { revision, data }\n            });\n            setLoading(false);\n\n            const { error } = response.data.content;\n            if (error) {\n                showSnackbar(error.message);\n                setInvalidFieldValues(error.data);\n                return null;\n            }\n\n            resetInvalidFieldValues();\n            showSnackbar(\"Content saved successfully.\");\n            const { data: entry } = response.data.content;\n            return entry;\n        },\n        [contentModel.modelId]\n    );\n\n    const createContentFrom = useCallback(\n        async (revision, formData) => {\n            setLoading(true);\n            const response = await createFromMutation({\n                variables: { revision, data: formData },\n                update(cache, { data }) {\n                    const { data: newRevision, error } = data.content;\n                    if (error) {\n                        showSnackbar(error.message);\n                        setInvalidFieldValues(error.data);\n                        return;\n                    }\n                    resetInvalidFieldValues();\n                    GQLCache.updateLatestRevisionInListCache(\n                        contentModel,\n                        cache,\n                        newRevision,\n                        listQueryVariables\n                    );\n                    GQLCache.addRevisionToRevisionsCache(contentModel, cache, newRevision);\n\n                    showSnackbar(\"A new revision was created!\");\n\n                    history.push(\n                        `/cms/content-entries/${contentModel.modelId}?id=${encodeURIComponent(\n                            newRevision.id\n                        )}`\n                    );\n                }\n            });\n            setLoading(false);\n\n            const { data, error } = response.data.content;\n            if (error) {\n                showSnackbar(error.message);\n                setInvalidFieldValues(error.data);\n                return null;\n            }\n            resetInvalidFieldValues();\n\n            return data;\n        },\n        [contentModel.modelId, listQueryVariables]\n    );\n\n    const onSubmit = async data => {\n        const fieldsIds = contentModel.fields.map(item => item.fieldId);\n        const formData = pick(data, [...fieldsIds]);\n\n        const gqlData = prepareFormData(formData, contentModel);\n        if (!entry.id) {\n            return createContent(gqlData);\n        }\n\n        const { meta } = entry;\n        const { locked: isLocked } = meta || {};\n\n        if (!isLocked) {\n            return updateContent(entry.id, gqlData);\n        }\n        return createContentFrom(entry.id, gqlData);\n    };\n\n    const getDefaultValues = (overrides = {}) => {\n        const values = {};\n        // TODO: finish default values.\n        /*fields.forEach(field => {\n            const fieldId = field.fieldId;\n\n            if (\n                fieldId &&\n                \"defaultValue\" in field.settings &&\n                typeof field.settings.defaultValue !== \"undefined\"\n            ) {\n                values[fieldId] = field.settings.defaultValue;\n            }\n        });*/\n        return { ...values, ...overrides };\n    };\n\n    return {\n        data: entry ? entry : getDefaultValues(),\n        loading,\n        setLoading,\n        onChange: params.onChange,\n        onSubmit,\n        invalidFields,\n        renderPlugins\n    };\n}\n"],"file":"useContentEntryForm.js"}