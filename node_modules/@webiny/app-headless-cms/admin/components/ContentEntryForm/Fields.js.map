{"version":3,"sources":["../../../../src/admin/components/ContentEntryForm/Fields.tsx"],"names":["React","Cell","Grid","RenderFieldElement","getFieldById","fields","id","find","field","Fields","Bind","layout","contentModel","gridClassName","map","row","rowIndex","fieldId","Math","floor","length"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,IAAT,EAAeC,IAAf,QAA2B,iBAA3B;AACA,OAAOC,kBAAP;;AAWA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD,EAASC,EAAT;AAAA,SAAgBD,MAAM,CAACE,IAAP,CAAY,UAAAC,KAAK;AAAA,WAAIA,KAAK,CAACF,EAAN,KAAaA,EAAjB;AAAA,GAAjB,CAAhB;AAAA,CAArB;;AAEA,OAAO,IAAMG,MAAM,GAAG,SAATA,MAAS,OAAkE;AAAA,MAA/DC,IAA+D,QAA/DA,IAA+D;AAAA,MAAzDL,MAAyD,QAAzDA,MAAyD;AAAA,MAAjDM,MAAiD,QAAjDA,MAAiD;AAAA,MAAzCC,YAAyC,QAAzCA,YAAyC;AAAA,MAA3BC,aAA2B,QAA3BA,aAA2B;AACpF,sBACI,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAEA;AAAjB,KACKF,MAAM,CAACG,GAAP,CAAW,UAACC,GAAD,EAAMC,QAAN;AAAA,wBACR,oBAAC,KAAD,CAAO,QAAP;AAAgB,MAAA,GAAG,EAAEA;AAArB,OACKD,GAAG,CAACD,GAAJ,CAAQ,UAAAG,OAAO;AAAA,0BACZ,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAW,KAAKJ,GAAG,CAACK,MAApB,CAAZ;AAAyC,QAAA,GAAG,EAAEH;AAA9C,sBACI,oBAAC,kBAAD;AACI,QAAA,KAAK,EAAEb,YAAY,CAACC,MAAD,EAASY,OAAT,CADvB;AAEI,QAAA,IAAI,EAAEP,IAFV;AAGI,QAAA,YAAY,EAAEE;AAHlB,QADJ,CADY;AAAA,KAAf,CADL,CADQ;AAAA,GAAX,CADL,CADJ;AAiBH,CAlBM","sourcesContent":["import React from \"react\";\nimport { BindComponent } from \"@webiny/form\";\nimport { Cell, Grid } from \"@webiny/ui/Grid\";\nimport RenderFieldElement from \"./RenderFieldElement\";\nimport { CmsEditorContentModel, CmsEditorField, CmsEditorFieldsLayout } from \"~/types\";\n\ninterface Props {\n    Bind: BindComponent;\n    contentModel: CmsEditorContentModel;\n    fields: CmsEditorField[];\n    layout: CmsEditorFieldsLayout;\n    gridClassName?: string;\n}\n\nconst getFieldById = (fields, id) => fields.find(field => field.id === id);\n\nexport const Fields = ({ Bind, fields, layout, contentModel, gridClassName }: Props) => {\n    return (\n        <Grid className={gridClassName}>\n            {layout.map((row, rowIndex) => (\n                <React.Fragment key={rowIndex}>\n                    {row.map(fieldId => (\n                        <Cell span={Math.floor(12 / row.length)} key={fieldId}>\n                            <RenderFieldElement\n                                field={getFieldById(fields, fieldId)}\n                                Bind={Bind}\n                                contentModel={contentModel}\n                            />\n                        </Cell>\n                    ))}\n                </React.Fragment>\n            ))}\n        </Grid>\n    );\n};\n"],"file":"Fields.js"}