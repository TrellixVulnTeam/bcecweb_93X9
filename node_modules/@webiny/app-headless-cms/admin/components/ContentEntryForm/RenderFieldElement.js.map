{"version":3,"sources":["../../../../src/admin/components/ContentEntryForm/RenderFieldElement.tsx"],"names":["React","get","i18n","Label","useBind","useRenderPlugins","t","ns","RenderFieldElement","props","renderPlugins","field","Bind","contentModel","getBind","renderPlugin","find","plugin","renderer","rendererName","fieldName","fieldId","render"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,GAAP,MAAgB,YAAhB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,KAAP;AAEA,SAASC,OAAT;AACA,SAASC,gBAAT;AAEA,IAAMC,CAAC,GAAGJ,IAAI,CAACK,EAAL,CAAQ,gDAAR,CAAV;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAIrB;AACF,MAAMC,aAAa,GAAGL,gBAAgB,EAAtC;AACA,MAAQM,KAAR,GAAsCF,KAAtC,CAAQE,KAAR;AAAA,MAAeC,IAAf,GAAsCH,KAAtC,CAAeG,IAAf;AAAA,MAAqBC,YAArB,GAAsCJ,KAAtC,CAAqBI,YAArB;AACA,MAAMC,OAAO,GAAGV,OAAO,CAAC;AAAEQ,IAAAA,IAAI,EAAJA,IAAF;AAAQD,IAAAA,KAAK,EAALA;AAAR,GAAD,CAAvB;AAEA,MAAMI,YAAY,GAAGL,aAAa,CAACM,IAAd,CACjB,UAAAC,MAAM;AAAA,WAAIA,MAAM,CAACC,QAAP,CAAgBC,YAAhB,KAAiClB,GAAG,CAACU,KAAD,EAAQ,eAAR,CAAxC;AAAA,GADW,CAArB;;AAIA,MAAI,CAACI,YAAL,EAAmB;AACf,WAAOT,CAAC,kIAAD,CAA+D;AAClEc,MAAAA,SAAS,eAAE,oCAAST,KAAK,CAACU,OAAf;AADuD,KAA/D,CAAP;AAGH;;AAED,SAAON,YAAY,CAACG,QAAb,CAAsBI,MAAtB,CAA6B;AAAEX,IAAAA,KAAK,EAALA,KAAF;AAASG,IAAAA,OAAO,EAAPA,OAAT;AAAkBX,IAAAA,KAAK,EAALA,KAAlB;AAAyBU,IAAAA,YAAY,EAAZA;AAAzB,GAA7B,CAAP;AACH,CApBD;;AAsBA,eAAeL,kBAAf","sourcesContent":["import React from \"react\";\nimport { CmsEditorField, CmsEditorContentModel } from \"~/types\";\nimport get from \"lodash/get\";\nimport { i18n } from \"@webiny/app/i18n\";\nimport Label from \"./Label\";\nimport { BindComponent } from \"@webiny/form\";\nimport { useBind } from \"./useBind\";\nimport { useRenderPlugins } from \"./useRenderPlugins\";\n\nconst t = i18n.ns(\"app-headless-cms/admin/components/content-form\");\n\nconst RenderFieldElement = (props: {\n    field: CmsEditorField;\n    Bind: BindComponent;\n    contentModel: CmsEditorContentModel;\n}) => {\n    const renderPlugins = useRenderPlugins();\n    const { field, Bind, contentModel } = props;\n    const getBind = useBind({ Bind, field });\n\n    const renderPlugin = renderPlugins.find(\n        plugin => plugin.renderer.rendererName === get(field, \"renderer.name\")\n    );\n\n    if (!renderPlugin) {\n        return t`Cannot render \"{fieldName}\" field - field renderer missing.`({\n            fieldName: <strong>{field.fieldId}</strong>\n        });\n    }\n\n    return renderPlugin.renderer.render({ field, getBind, Label, contentModel });\n};\n\nexport default RenderFieldElement;\n"],"file":"RenderFieldElement.js"}