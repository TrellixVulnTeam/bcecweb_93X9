import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject;

import React from "react";
import get from "lodash/get";
import { i18n } from "@webiny/app/i18n";
import Label from "./Label";
import { useBind } from "./useBind";
import { useRenderPlugins } from "./useRenderPlugins";
var t = i18n.ns("app-headless-cms/admin/components/content-form");

var RenderFieldElement = function RenderFieldElement(props) {
  var renderPlugins = useRenderPlugins();
  var field = props.field,
      Bind = props.Bind,
      contentModel = props.contentModel;
  var getBind = useBind({
    Bind: Bind,
    field: field
  });
  var renderPlugin = renderPlugins.find(function (plugin) {
    return plugin.renderer.rendererName === get(field, "renderer.name");
  });

  if (!renderPlugin) {
    return t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Cannot render \"{fieldName}\" field - field renderer missing."])))({
      fieldName: /*#__PURE__*/React.createElement("strong", null, field.fieldId)
    });
  }

  return renderPlugin.renderer.render({
    field: field,
    getBind: getBind,
    Label: Label,
    contentModel: contentModel
  });
};

export default RenderFieldElement;
//# sourceMappingURL=RenderFieldElement.js.map