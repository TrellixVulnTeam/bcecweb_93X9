import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { useCallback, useMemo, useState } from "react";
import pick from "lodash/pick";
import { useRouter } from "@webiny/react-router";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import * as GQL from "../../graphql/contentEntries";
import { useMutation } from "../../hooks";
import * as GQLCache from "../../views/contentEntries/ContentEntry/cache";
import { prepareFormData } from "../../views/contentEntries/ContentEntry/prepareFormData";
import { useContentEntry } from "../../views/contentEntries/hooks/useContentEntry";
import { plugins } from "@webiny/plugins";
export function useContentEntryForm(params) {
  var _useContentEntry = useContentEntry(),
      listQueryVariables = _useContentEntry.listQueryVariables;

  var contentModel = params.contentModel,
      entry = params.entry;

  var _useRouter = useRouter(),
      history = _useRouter.history;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var _useState = useState({}),
      _useState2 = _slicedToArray(_useState, 2),
      invalidFields = _useState2[0],
      setInvalidFields = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      loading = _useState4[0],
      setLoading = _useState4[1];

  var renderPlugins = useMemo(function () {
    return plugins.byType("cms-editor-field-renderer");
  }, []);
  var goToRevision = useCallback(function (id) {
    history.push("/cms/content-entries/".concat(contentModel.modelId, "?id=").concat(encodeURIComponent(id)));
  }, []);

  var _useMemo = useMemo(function () {
    return {
      LIST_CONTENT: GQL.createListQuery(contentModel),
      CREATE_CONTENT: GQL.createCreateMutation(contentModel),
      UPDATE_CONTENT: GQL.createUpdateMutation(contentModel),
      CREATE_CONTENT_FROM: GQL.createCreateFromMutation(contentModel)
    };
  }, [contentModel.modelId]),
      CREATE_CONTENT = _useMemo.CREATE_CONTENT,
      UPDATE_CONTENT = _useMemo.UPDATE_CONTENT,
      CREATE_CONTENT_FROM = _useMemo.CREATE_CONTENT_FROM;

  var _useMutation = useMutation(CREATE_CONTENT),
      _useMutation2 = _slicedToArray(_useMutation, 1),
      createMutation = _useMutation2[0];

  var _useMutation3 = useMutation(UPDATE_CONTENT),
      _useMutation4 = _slicedToArray(_useMutation3, 1),
      updateMutation = _useMutation4[0];

  var _useMutation5 = useMutation(CREATE_CONTENT_FROM),
      _useMutation6 = _slicedToArray(_useMutation5, 1),
      createFromMutation = _useMutation6[0];

  var setInvalidFieldValues = function setInvalidFieldValues(errors) {
    var values = (errors || []).reduce(function (acc, er) {
      acc[er.fieldId] = er.error;
      return acc;
    }, {});
    setInvalidFields(function () {
      return values;
    });
  };

  var resetInvalidFieldValues = function resetInvalidFieldValues() {
    setInvalidFields(function () {
      return {};
    });
  };

  var createContent = useCallback( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {
      var response, _response$data$conten, error, entry;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              setLoading(true);
              _context.next = 3;
              return createMutation({
                variables: {
                  data: data
                },
                update: function update(cache, _ref2) {
                  var data = _ref2.data;
                  var _data$content = data.content,
                      entry = _data$content.data,
                      error = _data$content.error;

                  if (error) {
                    showSnackbar(error.message);
                    setInvalidFieldValues(error.data);
                    return;
                  }

                  resetInvalidFieldValues();
                  GQLCache.addEntryToListCache(contentModel, cache, entry, listQueryVariables);
                }
              });

            case 3:
              response = _context.sent;
              setLoading(false);
              _response$data$conten = response.data.content, error = _response$data$conten.error, entry = _response$data$conten.data;

              if (!error) {
                _context.next = 10;
                break;
              }

              showSnackbar(error.message);
              setInvalidFieldValues(error.data);
              return _context.abrupt("return", null);

            case 10:
              resetInvalidFieldValues();
              showSnackbar("".concat(contentModel.name, " entry created successfully!"));
              goToRevision(entry.id);
              return _context.abrupt("return", entry);

            case 14:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }(), [contentModel.modelId, listQueryVariables]);
  var updateContent = useCallback( /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(revision, data) {
      var response, error, entry;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              setLoading(true);
              _context2.next = 3;
              return updateMutation({
                variables: {
                  revision: revision,
                  data: data
                }
              });

            case 3:
              response = _context2.sent;
              setLoading(false);
              error = response.data.content.error;

              if (!error) {
                _context2.next = 10;
                break;
              }

              showSnackbar(error.message);
              setInvalidFieldValues(error.data);
              return _context2.abrupt("return", null);

            case 10:
              resetInvalidFieldValues();
              showSnackbar("Content saved successfully.");
              entry = response.data.content.data;
              return _context2.abrupt("return", entry);

            case 14:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x2, _x3) {
      return _ref3.apply(this, arguments);
    };
  }(), [contentModel.modelId]);
  var createContentFrom = useCallback( /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(revision, formData) {
      var response, _response$data$conten2, data, error;

      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              setLoading(true);
              _context3.next = 3;
              return createFromMutation({
                variables: {
                  revision: revision,
                  data: formData
                },
                update: function update(cache, _ref5) {
                  var data = _ref5.data;
                  var _data$content2 = data.content,
                      newRevision = _data$content2.data,
                      error = _data$content2.error;

                  if (error) {
                    showSnackbar(error.message);
                    setInvalidFieldValues(error.data);
                    return;
                  }

                  resetInvalidFieldValues();
                  GQLCache.updateLatestRevisionInListCache(contentModel, cache, newRevision, listQueryVariables);
                  GQLCache.addRevisionToRevisionsCache(contentModel, cache, newRevision);
                  showSnackbar("A new revision was created!");
                  history.push("/cms/content-entries/".concat(contentModel.modelId, "?id=").concat(encodeURIComponent(newRevision.id)));
                }
              });

            case 3:
              response = _context3.sent;
              setLoading(false);
              _response$data$conten2 = response.data.content, data = _response$data$conten2.data, error = _response$data$conten2.error;

              if (!error) {
                _context3.next = 10;
                break;
              }

              showSnackbar(error.message);
              setInvalidFieldValues(error.data);
              return _context3.abrupt("return", null);

            case 10:
              resetInvalidFieldValues();
              return _context3.abrupt("return", data);

            case 12:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x4, _x5) {
      return _ref4.apply(this, arguments);
    };
  }(), [contentModel.modelId, listQueryVariables]);

  var onSubmit = /*#__PURE__*/function () {
    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(data) {
      var fieldsIds, formData, gqlData, meta, _ref7, isLocked;

      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              fieldsIds = contentModel.fields.map(function (item) {
                return item.fieldId;
              });
              formData = pick(data, _toConsumableArray(fieldsIds));
              gqlData = prepareFormData(formData, contentModel);

              if (entry.id) {
                _context4.next = 5;
                break;
              }

              return _context4.abrupt("return", createContent(gqlData));

            case 5:
              meta = entry.meta;
              _ref7 = meta || {}, isLocked = _ref7.locked;

              if (isLocked) {
                _context4.next = 9;
                break;
              }

              return _context4.abrupt("return", updateContent(entry.id, gqlData));

            case 9:
              return _context4.abrupt("return", createContentFrom(entry.id, gqlData));

            case 10:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function onSubmit(_x6) {
      return _ref6.apply(this, arguments);
    };
  }();

  var getDefaultValues = function getDefaultValues() {
    var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var values = {}; // TODO: finish default values.

    /*fields.forEach(field => {
        const fieldId = field.fieldId;
         if (
            fieldId &&
            "defaultValue" in field.settings &&
            typeof field.settings.defaultValue !== "undefined"
        ) {
            values[fieldId] = field.settings.defaultValue;
        }
    });*/

    return _objectSpread(_objectSpread({}, values), overrides);
  };

  return {
    data: entry ? entry : getDefaultValues(),
    loading: loading,
    setLoading: setLoading,
    onChange: params.onChange,
    onSubmit: onSubmit,
    invalidFields: invalidFields,
    renderPlugins: renderPlugins
  };
}
//# sourceMappingURL=useContentEntryForm.js.map