import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { plugins } from "@webiny/plugins";
export var createValidators = function createValidators(validation) {
  var validatorPlugins = plugins.byType("cms-model-field-validator");
  return validation.map(function (item) {
    var validatorPlugin = validatorPlugins.find(function (plugin) {
      return plugin.validator.name === item.name;
    });

    if (!validatorPlugin || typeof validatorPlugin.validator.validate !== "function") {
      return;
    }

    return /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value) {
        var isInvalid, result;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return validatorPlugin.validator.validate(value, item);

              case 3:
                result = _context.sent;
                isInvalid = result === false;
                _context.next = 10;
                break;

              case 7:
                _context.prev = 7;
                _context.t0 = _context["catch"](0);
                isInvalid = true;

              case 10:
                if (!isInvalid) {
                  _context.next = 12;
                  break;
                }

                throw new Error(item.message || "Invalid value.");

              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[0, 7]]);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();
  }).filter(Boolean);
};
//# sourceMappingURL=createValidators.js.map