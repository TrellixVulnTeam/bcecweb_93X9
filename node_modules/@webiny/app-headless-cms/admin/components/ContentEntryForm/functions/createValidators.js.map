{"version":3,"sources":["../../../../../src/admin/components/ContentEntryForm/functions/createValidators.ts"],"names":["plugins","createValidators","validation","validatorPlugins","byType","map","item","validatorPlugin","find","plugin","validator","name","validate","value","result","isInvalid","Error","message","filter","Boolean"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,iBAAxB;AAGA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,UAAU,EAAI;AAC1C,MAAMC,gBAAgB,GAAGH,OAAO,CAACI,MAAR,CACrB,2BADqB,CAAzB;AAIA,SAAOF,UAAU,CACZG,GADE,CACE,UAAAC,IAAI,EAAI;AACT,QAAMC,eAAe,GAAGJ,gBAAgB,CAACK,IAAjB,CACpB,UAAAC,MAAM;AAAA,aAAIA,MAAM,CAACC,SAAP,CAAiBC,IAAjB,KAA0BL,IAAI,CAACK,IAAnC;AAAA,KADc,CAAxB;;AAIA,QAAI,CAACJ,eAAD,IAAoB,OAAOA,eAAe,CAACG,SAAhB,CAA0BE,QAAjC,KAA8C,UAAtE,EAAkF;AAC9E;AACH;;AAED;AAAA,0EAAO,iBAAMC,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAGsBN,eAAe,CAACG,SAAhB,CAA0BE,QAA1B,CAAmCC,KAAnC,EAA0CP,IAA1C,CAHtB;;AAAA;AAGOQ,gBAAAA,MAHP;AAICC,gBAAAA,SAAS,GAAGD,MAAM,KAAK,KAAvB;AAJD;AAAA;;AAAA;AAAA;AAAA;AAMCC,gBAAAA,SAAS,GAAG,IAAZ;;AAND;AAAA,qBASCA,SATD;AAAA;AAAA;AAAA;;AAAA,sBAUO,IAAIC,KAAJ,CAAUV,IAAI,CAACW,OAAL,IAAgB,gBAA1B,CAVP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAaH,GAvBE,EAwBFC,MAxBE,CAwBKC,OAxBL,CAAP;AAyBH,CA9BM","sourcesContent":["import { plugins } from \"@webiny/plugins\";\nimport { CmsModelFieldValidatorPlugin } from \"~/types\";\n\nexport const createValidators = validation => {\n    const validatorPlugins = plugins.byType<CmsModelFieldValidatorPlugin>(\n        \"cms-model-field-validator\"\n    );\n\n    return validation\n        .map(item => {\n            const validatorPlugin = validatorPlugins.find(\n                plugin => plugin.validator.name === item.name\n            );\n\n            if (!validatorPlugin || typeof validatorPlugin.validator.validate !== \"function\") {\n                return;\n            }\n\n            return async value => {\n                let isInvalid;\n                try {\n                    const result = await validatorPlugin.validator.validate(value, item);\n                    isInvalid = result === false;\n                } catch (e) {\n                    isInvalid = true;\n                }\n\n                if (isInvalid) {\n                    throw new Error(item.message || \"Invalid value.\");\n                }\n            };\n        })\n        .filter(Boolean);\n};\n"],"file":"createValidators.js"}