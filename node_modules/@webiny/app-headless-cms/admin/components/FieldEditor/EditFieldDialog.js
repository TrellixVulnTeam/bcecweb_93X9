import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _cloneDeep from "lodash/cloneDeep";

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7;

var _excluded = ["field", "onSubmit"];
import React, { useState, useEffect, useCallback } from "react";
import { css } from "emotion";
import { Dialog, DialogContent, DialogTitle, DialogActions, DialogButton } from "@webiny/ui/Dialog";
import { Form } from "@webiny/form";
import { Tabs, Tab } from "@webiny/ui/Tabs";
import { i18n } from "@webiny/app/i18n";
import { plugins } from "@webiny/plugins";
import GeneralTab from "./EditFieldDialog/GeneralTab";
import AppearanceTab from "./EditFieldDialog/AppearanceTab";
import PredefinedValues from "./EditFieldDialog/PredefinedValues";
import ValidatorsTab from "./EditFieldDialog/ValidatorsTab";
import { Grid, Cell } from "@webiny/ui/Grid";
import { Typography } from "@webiny/ui/Typography";
import { Elevation } from "@webiny/ui/Elevation";
import { useFieldEditor } from "./useFieldEditor";
var t = i18n.namespace("app-headless-cms/admin/components/editor");
var dialogBody = /*#__PURE__*/css({
  "&.webiny-ui-dialog__content": {
    width: 875,
    height: 450
  }
}, "label:dialogBody;");

var getValidators = function getValidators(fieldPlugin, key) {
  var defaultValidators = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  return plugins.byType("cms-editor-field-validator").map(function (plugin) {
    return plugin.validator;
  }).map(function (validator) {
    var allowedValidators = fieldPlugin.field[key] || defaultValidators;

    if (allowedValidators.includes(validator.name)) {
      return {
        optional: true,
        validator: validator
      };
    } else if (allowedValidators.includes("!".concat(validator.name))) {
      return {
        optional: false,
        validator: validator
      };
    }

    return null;
  }).filter(Boolean).sort(function (a, b) {
    if (!a.optional && b.optional) {
      return -1;
    }

    if (a.optional && !b.optional) {
      return 1;
    }

    return 0;
  });
};

var getListValidators = function getListValidators(fieldPlugin) {
  return getValidators(fieldPlugin, "listValidators", ["minLength", "maxLength"]);
};

var getFieldValidators = function getFieldValidators(fieldPlugin) {
  return getValidators(fieldPlugin, "validators");
};

var fieldEditorDialog = /*#__PURE__*/css({
  width: "100vw",
  height: "100vh",
  ".mdc-dialog__surface": {
    maxWidth: "100% !important",
    maxHeight: "100% !important",
    ".webiny-ui-dialog__content": {
      maxWidth: "100% !important",
      maxHeight: "100% !important",
      width: "100vw",
      height: "calc(100vh - 155px)",
      paddingTop: "0 !important"
    }
  }
}, "label:fieldEditorDialog;");

var EditFieldDialog = function EditFieldDialog(_ref) {
  var field = _ref.field,
      onSubmit = _ref.onSubmit,
      props = _objectWithoutProperties(_ref, _excluded);

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      current = _useState2[0],
      setCurrent = _useState2[1];

  var _useFieldEditor = useFieldEditor(),
      getFieldPlugin = _useFieldEditor.getFieldPlugin;

  useEffect(function () {
    if (!field) {
      return setCurrent(field);
    }

    var clonedField = _cloneDeep(field);

    if (!clonedField.renderer || !clonedField.renderer.name) {
      var _plugins$byType$filte = plugins.byType("cms-editor-field-renderer").filter(function (item) {
        return item.renderer.canUse({
          field: field
        });
      }),
          _plugins$byType$filte2 = _slicedToArray(_plugins$byType$filte, 1),
          renderPlugin = _plugins$byType$filte2[0];

      if (renderPlugin) {
        clonedField.renderer = {
          name: renderPlugin.renderer.rendererName
        };
      }
    }

    setCurrent(clonedField);
  }, [field]);
  var onClose = useCallback(function () {
    setCurrent(null);
    props.onClose();
  }, undefined);
  var render = null;
  var headerTitle = t(_templateObject || (_templateObject = _taggedTemplateLiteral(["Field Settings"])));

  if (current) {
    var fieldPlugin = getFieldPlugin(current.type);

    if (fieldPlugin) {
      headerTitle = t(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Field Settings - {fieldTypeLabel}"])))({
        fieldTypeLabel: fieldPlugin.field.label
      });
    }

    render = /*#__PURE__*/React.createElement(Form, {
      data: current,
      onSubmit: onSubmit
    }, function (form) {
      var predefinedValuesTabEnabled = fieldPlugin.field.allowPredefinedValues && form.data.predefinedValues && form.data.predefinedValues.enabled;
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DialogContent, {
        className: dialogBody
      }, /*#__PURE__*/React.createElement(Tabs, null, /*#__PURE__*/React.createElement(Tab, {
        label: t(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["General"])))
      }, /*#__PURE__*/React.createElement(GeneralTab, {
        form: form,
        field: form.data,
        fieldPlugin: fieldPlugin
      })), /*#__PURE__*/React.createElement(Tab, {
        label: t(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Predefined Values"]))),
        disabled: !predefinedValuesTabEnabled
      }, predefinedValuesTabEnabled && /*#__PURE__*/React.createElement(PredefinedValues, {
        form: form,
        field: form.data,
        fieldPlugin: fieldPlugin
      })), form.data.multipleValues && /*#__PURE__*/React.createElement(Tab, {
        label: "Validators",
        "data-testid": "cms.editor.field.tabs.validators"
      }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
        span: 12
      }, /*#__PURE__*/React.createElement(Typography, {
        use: "headline5"
      }, "List validators"), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement(Typography, {
        use: "body2"
      }, "These validators are applied to the entire list of values.")), /*#__PURE__*/React.createElement(Cell, {
        span: 12
      }, /*#__PURE__*/React.createElement(Elevation, {
        z: 2
      }, /*#__PURE__*/React.createElement(ValidatorsTab, {
        field: field,
        name: "listValidation",
        validators: getListValidators(fieldPlugin),
        form: form
      })))), /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
        span: 12
      }, /*#__PURE__*/React.createElement(Typography, {
        use: "headline5"
      }, "Individual value validators"), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement(Typography, {
        use: "body2"
      }, "These validators are applied to each value in the list.")), /*#__PURE__*/React.createElement(Cell, {
        span: 12
      }, /*#__PURE__*/React.createElement(Elevation, {
        z: 2
      }, /*#__PURE__*/React.createElement(ValidatorsTab, {
        field: current,
        form: form,
        name: "validation",
        validators: getFieldValidators(fieldPlugin)
      }))))), !form.data.multipleValues && Array.isArray(fieldPlugin.field.validators) && fieldPlugin.field.validators.length > 0 && /*#__PURE__*/React.createElement(Tab, {
        label: "Validators",
        "data-testid": "cms.editor.field.tabs.validators"
      }, /*#__PURE__*/React.createElement(ValidatorsTab, {
        field: current,
        form: form,
        name: "validation",
        validators: getFieldValidators(fieldPlugin)
      })), /*#__PURE__*/React.createElement(Tab, {
        label: t(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["Appearance"])))
      }, /*#__PURE__*/React.createElement(AppearanceTab, {
        form: form,
        field: form.data,
        fieldPlugin: fieldPlugin
      })))), /*#__PURE__*/React.createElement(DialogActions, {
        style: {
          justifyContent: "flex-end"
        }
      }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(DialogButton, {
        onClick: onClose
      }, t(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["Cancel"])))), /*#__PURE__*/React.createElement(DialogButton, {
        onClick: form.submit
      }, t(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["Save"])))))));
    });
  }

  return /*#__PURE__*/React.createElement(Dialog, {
    preventOutsideDismiss: true,
    open: !!current,
    onClose: onClose,
    "data-testid": "cms-editor-edit-fields-dialog",
    className: fieldEditorDialog
  }, /*#__PURE__*/React.createElement(DialogTitle, null, headerTitle), render);
};

export default EditFieldDialog;
//# sourceMappingURL=EditFieldDialog.js.map