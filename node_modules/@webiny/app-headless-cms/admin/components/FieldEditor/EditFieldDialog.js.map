{"version":3,"sources":["../../../../src/admin/components/FieldEditor/EditFieldDialog.tsx"],"names":["React","useState","useEffect","useCallback","css","Dialog","DialogContent","DialogTitle","DialogActions","DialogButton","Form","Tabs","Tab","i18n","plugins","GeneralTab","AppearanceTab","PredefinedValues","ValidatorsTab","Grid","Cell","Typography","Elevation","useFieldEditor","t","namespace","dialogBody","width","height","getValidators","fieldPlugin","key","defaultValidators","byType","map","plugin","validator","allowedValidators","field","includes","name","optional","filter","Boolean","sort","a","b","getListValidators","getFieldValidators","fieldEditorDialog","maxWidth","maxHeight","paddingTop","EditFieldDialog","onSubmit","props","current","setCurrent","getFieldPlugin","clonedField","renderer","item","canUse","renderPlugin","rendererName","onClose","undefined","render","headerTitle","type","fieldTypeLabel","label","form","predefinedValuesTabEnabled","allowPredefinedValues","data","predefinedValues","enabled","multipleValues","Array","isArray","validators","length","justifyContent","submit"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AAEA,SAASC,GAAT,QAAoB,SAApB;AACA,SAASC,MAAT,EAAiBC,aAAjB,EAAgCC,WAAhC,EAA6CC,aAA7C,EAA4DC,YAA5D,QAAgF,mBAAhF;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,iBAA1B;AACA,SAASC,IAAT,QAAqB,kBAArB;AAOA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,UAAP;AACA,OAAOC,aAAP;AACA,OAAOC,gBAAP;AACA,OAAOC,aAAP;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,iBAA3B;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,cAAT;AAEA,IAAMC,CAAC,GAAGX,IAAI,CAACY,SAAL,CAAe,0CAAf,CAAV;AAEA,IAAMC,UAAU,gBAAGtB,GAAG,CAAC;AACnB,iCAA+B;AAC3BuB,IAAAA,KAAK,EAAE,GADoB;AAE3BC,IAAAA,MAAM,EAAE;AAFmB;AADZ,CAAD,sBAAtB;;AAaA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAClBC,WADkB,EAElBC,GAFkB,EAIjB;AAAA,MADDC,iBACC,uEAD6B,EAC7B;AACD,SAAOlB,OAAO,CACTmB,MADE,CACoC,4BADpC,EAEFC,GAFE,CAEE,UAAAC,MAAM;AAAA,WAAIA,MAAM,CAACC,SAAX;AAAA,GAFR,EAGFF,GAHE,CAGE,UAAAE,SAAS,EAAI;AACd,QAAMC,iBAAiB,GAAGP,WAAW,CAACQ,KAAZ,CAAkBP,GAAlB,KAA0BC,iBAApD;;AACA,QAAIK,iBAAiB,CAACE,QAAlB,CAA2BH,SAAS,CAACI,IAArC,CAAJ,EAAgD;AAC5C,aAAO;AAAEC,QAAAA,QAAQ,EAAE,IAAZ;AAAkBL,QAAAA,SAAS,EAATA;AAAlB,OAAP;AACH,KAFD,MAEO,IAAIC,iBAAiB,CAACE,QAAlB,YAA+BH,SAAS,CAACI,IAAzC,EAAJ,EAAsD;AACzD,aAAO;AAAEC,QAAAA,QAAQ,EAAE,KAAZ;AAAmBL,QAAAA,SAAS,EAATA;AAAnB,OAAP;AACH;;AAED,WAAO,IAAP;AACH,GAZE,EAaFM,MAbE,CAaKC,OAbL,EAcFC,IAdE,CAcG,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACZ,QAAI,CAACD,CAAC,CAACJ,QAAH,IAAeK,CAAC,CAACL,QAArB,EAA+B;AAC3B,aAAO,CAAC,CAAR;AACH;;AAED,QAAII,CAAC,CAACJ,QAAF,IAAc,CAACK,CAAC,CAACL,QAArB,EAA+B;AAC3B,aAAO,CAAP;AACH;;AAED,WAAO,CAAP;AACH,GAxBE,CAAP;AAyBH,CA9BD;;AAgCA,IAAMM,iBAAiB,GAAG,SAApBA,iBAAoB,CAACjB,WAAD,EAA2C;AACjE,SAAOD,aAAa,CAACC,WAAD,EAAc,gBAAd,EAAgC,CAAC,WAAD,EAAc,WAAd,CAAhC,CAApB;AACH,CAFD;;AAIA,IAAMkB,kBAAkB,GAAG,SAArBA,kBAAqB,CAAClB,WAAD,EAA2C;AAClE,SAAOD,aAAa,CAACC,WAAD,EAAc,YAAd,CAApB;AACH,CAFD;;AAIA,IAAMmB,iBAAiB,gBAAG7C,GAAG,CAAC;AAC1BuB,EAAAA,KAAK,EAAE,OADmB;AAE1BC,EAAAA,MAAM,EAAE,OAFkB;AAG1B,0BAAwB;AACpBsB,IAAAA,QAAQ,EAAE,iBADU;AAEpBC,IAAAA,SAAS,EAAE,iBAFS;AAGpB,kCAA8B;AAC1BD,MAAAA,QAAQ,EAAE,iBADgB;AAE1BC,MAAAA,SAAS,EAAE,iBAFe;AAG1BxB,MAAAA,KAAK,EAAE,OAHmB;AAI1BC,MAAAA,MAAM,EAAE,qBAJkB;AAK1BwB,MAAAA,UAAU,EAAE;AALc;AAHV;AAHE,CAAD,6BAA7B;;AAgBA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,OAAyD;AAAA,MAAtDf,KAAsD,QAAtDA,KAAsD;AAAA,MAA/CgB,QAA+C,QAA/CA,QAA+C;AAAA,MAAlCC,KAAkC;;AAC7E,kBAA8BtD,QAAQ,CAAC,IAAD,CAAtC;AAAA;AAAA,MAAOuD,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,wBAA2BlC,cAAc,EAAzC;AAAA,MAAQmC,cAAR,mBAAQA,cAAR;;AAEAxD,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAI,CAACoC,KAAL,EAAY;AACR,aAAOmB,UAAU,CAACnB,KAAD,CAAjB;AACH;;AAED,QAAMqB,WAAW,GAAG,WAAUrB,KAAV,CAApB;;AAEA,QAAI,CAACqB,WAAW,CAACC,QAAb,IAAyB,CAACD,WAAW,CAACC,QAAZ,CAAqBpB,IAAnD,EAAyD;AACrD,kCAAuB1B,OAAO,CACzBmB,MADkB,CACmB,2BADnB,EAElBS,MAFkB,CAEX,UAAAmB,IAAI;AAAA,eAAIA,IAAI,CAACD,QAAL,CAAcE,MAAd,CAAqB;AAAExB,UAAAA,KAAK,EAALA;AAAF,SAArB,CAAJ;AAAA,OAFO,CAAvB;AAAA;AAAA,UAAOyB,YAAP;;AAIA,UAAIA,YAAJ,EAAkB;AACdJ,QAAAA,WAAW,CAACC,QAAZ,GAAuB;AAAEpB,UAAAA,IAAI,EAAEuB,YAAY,CAACH,QAAb,CAAsBI;AAA9B,SAAvB;AACH;AACJ;;AAEDP,IAAAA,UAAU,CAACE,WAAD,CAAV;AACH,GAlBQ,EAkBN,CAACrB,KAAD,CAlBM,CAAT;AAoBA,MAAM2B,OAAO,GAAG9D,WAAW,CAAC,YAAM;AAC9BsD,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAF,IAAAA,KAAK,CAACU,OAAN;AACH,GAH0B,EAGxBC,SAHwB,CAA3B;AAKA,MAAIC,MAAM,GAAG,IAAb;AACA,MAAIC,WAAW,GAAG5C,CAAH,mFAAf;;AAEA,MAAIgC,OAAJ,EAAa;AACT,QAAM1B,WAAW,GAAG4B,cAAc,CAACF,OAAO,CAACa,IAAT,CAAlC;;AACA,QAAIvC,WAAJ,EAAiB;AACbsC,MAAAA,WAAW,GAAG5C,CAAC,wGAAD,CAAqC;AAC/C8C,QAAAA,cAAc,EAAExC,WAAW,CAACQ,KAAZ,CAAkBiC;AADa,OAArC,CAAd;AAGH;;AAEDJ,IAAAA,MAAM,gBACF,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAEX,OAAZ;AAAqB,MAAA,QAAQ,EAAEF;AAA/B,OACK,UAAAkB,IAAI,EAAI;AACL,UAAMC,0BAA0B,GAC5B3C,WAAW,CAACQ,KAAZ,CAAkBoC,qBAAlB,IACAF,IAAI,CAACG,IAAL,CAAUC,gBADV,IAEAJ,IAAI,CAACG,IAAL,CAAUC,gBAAV,CAA2BC,OAH/B;AAKA,0BACI,uDACI,oBAAC,aAAD;AAAe,QAAA,SAAS,EAAEnD;AAA1B,sBACI,oBAAC,IAAD,qBACI,oBAAC,GAAD;AAAK,QAAA,KAAK,EAAEF,CAAF;AAAV,sBACI,oBAAC,UAAD;AACI,QAAA,IAAI,EAAEgD,IADV;AAEI,QAAA,KAAK,EAAEA,IAAI,CAACG,IAFhB;AAGI,QAAA,WAAW,EAAE7C;AAHjB,QADJ,CADJ,eAQI,oBAAC,GAAD;AACI,QAAA,KAAK,EAAEN,CAAF,wFADT;AAEI,QAAA,QAAQ,EAAE,CAACiD;AAFf,SAIKA,0BAA0B,iBACvB,oBAAC,gBAAD;AACI,QAAA,IAAI,EAAED,IADV;AAEI,QAAA,KAAK,EAAEA,IAAI,CAACG,IAFhB;AAGI,QAAA,WAAW,EAAE7C;AAHjB,QALR,CARJ,EAqBK0C,IAAI,CAACG,IAAL,CAAUG,cAAV,iBACG,oBAAC,GAAD;AACI,QAAA,KAAK,EAAE,YADX;AAEI,uBAAa;AAFjB,sBAII,oBAAC,IAAD,qBACI,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAE;AAAZ,sBACI,oBAAC,UAAD;AAAY,QAAA,GAAG,EAAE;AAAjB,2BADJ,eAII,+BAJJ,eAKI,oBAAC,UAAD;AAAY,QAAA,GAAG,EAAE;AAAjB,sEALJ,CADJ,eAWI,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAE;AAAZ,sBACI,oBAAC,SAAD;AAAW,QAAA,CAAC,EAAE;AAAd,sBACI,oBAAC,aAAD;AACI,QAAA,KAAK,EAAExC,KADX;AAEI,QAAA,IAAI,EAAE,gBAFV;AAGI,QAAA,UAAU,EAAES,iBAAiB,CACzBjB,WADyB,CAHjC;AAMI,QAAA,IAAI,EAAE0C;AANV,QADJ,CADJ,CAXJ,CAJJ,eA6BI,oBAAC,IAAD,qBACI,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAE;AAAZ,sBACI,oBAAC,UAAD;AAAY,QAAA,GAAG,EAAE;AAAjB,uCADJ,eAII,+BAJJ,eAKI,oBAAC,UAAD;AAAY,QAAA,GAAG,EAAE;AAAjB,mEALJ,CADJ,eAWI,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAE;AAAZ,sBACI,oBAAC,SAAD;AAAW,QAAA,CAAC,EAAE;AAAd,sBACI,oBAAC,aAAD;AACI,QAAA,KAAK,EAAEhB,OADX;AAEI,QAAA,IAAI,EAAEgB,IAFV;AAGI,QAAA,IAAI,EAAE,YAHV;AAII,QAAA,UAAU,EAAExB,kBAAkB,CAC1BlB,WAD0B;AAJlC,QADJ,CADJ,CAXJ,CA7BJ,CAtBR,EA8EK,CAAC0C,IAAI,CAACG,IAAL,CAAUG,cAAX,IACGC,KAAK,CAACC,OAAN,CAAclD,WAAW,CAACQ,KAAZ,CAAkB2C,UAAhC,CADH,IAEGnD,WAAW,CAACQ,KAAZ,CAAkB2C,UAAlB,CAA6BC,MAA7B,GAAsC,CAFzC,iBAGO,oBAAC,GAAD;AACI,QAAA,KAAK,EAAE,YADX;AAEI,uBAAa;AAFjB,sBAII,oBAAC,aAAD;AACI,QAAA,KAAK,EAAE1B,OADX;AAEI,QAAA,IAAI,EAAEgB,IAFV;AAGI,QAAA,IAAI,EAAE,YAHV;AAII,QAAA,UAAU,EAAExB,kBAAkB,CAAClB,WAAD;AAJlC,QAJJ,CAjFZ,eA6FI,oBAAC,GAAD;AAAK,QAAA,KAAK,EAAEN,CAAF;AAAV,sBACI,oBAAC,aAAD;AACI,QAAA,IAAI,EAAEgD,IADV;AAEI,QAAA,KAAK,EAAEA,IAAI,CAACG,IAFhB;AAGI,QAAA,WAAW,EAAE7C;AAHjB,QADJ,CA7FJ,CADJ,CADJ,eAwGI,oBAAC,aAAD;AACI,QAAA,KAAK,EAAE;AACHqD,UAAAA,cAAc,EAAE;AADb;AADX,sBAKI,8CACI,oBAAC,YAAD;AAAc,QAAA,OAAO,EAAElB;AAAvB,SAAiCzC,CAAjC,8EADJ,eAEI,oBAAC,YAAD;AAAc,QAAA,OAAO,EAAEgD,IAAI,CAACY;AAA5B,SAAqC5D,CAArC,4EAFJ,CALJ,CAxGJ,CADJ;AAqHH,KA5HL,CADJ;AAgIH;;AAED,sBACI,oBAAC,MAAD;AACI,IAAA,qBAAqB,MADzB;AAEI,IAAA,IAAI,EAAE,CAAC,CAACgC,OAFZ;AAGI,IAAA,OAAO,EAAES,OAHb;AAII,mBAAa,+BAJjB;AAKI,IAAA,SAAS,EAAEhB;AALf,kBAOI,oBAAC,WAAD,QAAcmB,WAAd,CAPJ,EAQKD,MARL,CADJ;AAYH,CAvLD;;AAyLA,eAAed,eAAf","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { cloneDeep } from \"lodash\";\nimport { css } from \"emotion\";\nimport { Dialog, DialogContent, DialogTitle, DialogActions, DialogButton } from \"@webiny/ui/Dialog\";\nimport { Form } from \"@webiny/form\";\nimport { Tabs, Tab } from \"@webiny/ui/Tabs\";\nimport { i18n } from \"@webiny/app/i18n\";\nimport {\n    CmsEditorField,\n    CmsEditorFieldRendererPlugin,\n    CmsEditorFieldTypePlugin,\n    CmsEditorFieldValidatorPlugin\n} from \"~/types\";\nimport { plugins } from \"@webiny/plugins\";\nimport GeneralTab from \"./EditFieldDialog/GeneralTab\";\nimport AppearanceTab from \"./EditFieldDialog/AppearanceTab\";\nimport PredefinedValues from \"./EditFieldDialog/PredefinedValues\";\nimport ValidatorsTab from \"./EditFieldDialog/ValidatorsTab\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { Typography } from \"@webiny/ui/Typography\";\nimport { Elevation } from \"@webiny/ui/Elevation\";\nimport { useFieldEditor } from \"~/admin/components/FieldEditor/useFieldEditor\";\n\nconst t = i18n.namespace(\"app-headless-cms/admin/components/editor\");\n\nconst dialogBody = css({\n    \"&.webiny-ui-dialog__content\": {\n        width: 875,\n        height: 450\n    }\n});\n\ntype EditFieldDialogProps = {\n    field: CmsEditorField;\n    onClose: Function;\n    onSubmit: (data: any) => void;\n};\n\nconst getValidators = (\n    fieldPlugin: CmsEditorFieldTypePlugin,\n    key: string,\n    defaultValidators: string[] = []\n) => {\n    return plugins\n        .byType<CmsEditorFieldValidatorPlugin>(\"cms-editor-field-validator\")\n        .map(plugin => plugin.validator)\n        .map(validator => {\n            const allowedValidators = fieldPlugin.field[key] || defaultValidators;\n            if (allowedValidators.includes(validator.name)) {\n                return { optional: true, validator };\n            } else if (allowedValidators.includes(`!${validator.name}`)) {\n                return { optional: false, validator };\n            }\n\n            return null;\n        })\n        .filter(Boolean)\n        .sort((a, b) => {\n            if (!a.optional && b.optional) {\n                return -1;\n            }\n\n            if (a.optional && !b.optional) {\n                return 1;\n            }\n\n            return 0;\n        });\n};\n\nconst getListValidators = (fieldPlugin: CmsEditorFieldTypePlugin) => {\n    return getValidators(fieldPlugin, \"listValidators\", [\"minLength\", \"maxLength\"]);\n};\n\nconst getFieldValidators = (fieldPlugin: CmsEditorFieldTypePlugin) => {\n    return getValidators(fieldPlugin, \"validators\");\n};\n\nconst fieldEditorDialog = css({\n    width: \"100vw\",\n    height: \"100vh\",\n    \".mdc-dialog__surface\": {\n        maxWidth: \"100% !important\",\n        maxHeight: \"100% !important\",\n        \".webiny-ui-dialog__content\": {\n            maxWidth: \"100% !important\",\n            maxHeight: \"100% !important\",\n            width: \"100vw\",\n            height: \"calc(100vh - 155px)\",\n            paddingTop: \"0 !important\"\n        }\n    }\n});\n\nconst EditFieldDialog = ({ field, onSubmit, ...props }: EditFieldDialogProps) => {\n    const [current, setCurrent] = useState(null);\n\n    const { getFieldPlugin } = useFieldEditor();\n\n    useEffect(() => {\n        if (!field) {\n            return setCurrent(field);\n        }\n\n        const clonedField = cloneDeep(field);\n\n        if (!clonedField.renderer || !clonedField.renderer.name) {\n            const [renderPlugin] = plugins\n                .byType<CmsEditorFieldRendererPlugin>(\"cms-editor-field-renderer\")\n                .filter(item => item.renderer.canUse({ field }));\n\n            if (renderPlugin) {\n                clonedField.renderer = { name: renderPlugin.renderer.rendererName };\n            }\n        }\n\n        setCurrent(clonedField);\n    }, [field]);\n\n    const onClose = useCallback(() => {\n        setCurrent(null);\n        props.onClose();\n    }, undefined);\n\n    let render = null;\n    let headerTitle = t`Field Settings`;\n\n    if (current) {\n        const fieldPlugin = getFieldPlugin(current.type);\n        if (fieldPlugin) {\n            headerTitle = t`Field Settings - {fieldTypeLabel}`({\n                fieldTypeLabel: fieldPlugin.field.label\n            });\n        }\n\n        render = (\n            <Form data={current} onSubmit={onSubmit}>\n                {form => {\n                    const predefinedValuesTabEnabled =\n                        fieldPlugin.field.allowPredefinedValues &&\n                        form.data.predefinedValues &&\n                        form.data.predefinedValues.enabled;\n\n                    return (\n                        <>\n                            <DialogContent className={dialogBody}>\n                                <Tabs>\n                                    <Tab label={t`General`}>\n                                        <GeneralTab\n                                            form={form}\n                                            field={form.data as CmsEditorField}\n                                            fieldPlugin={fieldPlugin}\n                                        />\n                                    </Tab>\n                                    <Tab\n                                        label={t`Predefined Values`}\n                                        disabled={!predefinedValuesTabEnabled}\n                                    >\n                                        {predefinedValuesTabEnabled && (\n                                            <PredefinedValues\n                                                form={form}\n                                                field={form.data as CmsEditorField}\n                                                fieldPlugin={fieldPlugin}\n                                            />\n                                        )}\n                                    </Tab>\n\n                                    {form.data.multipleValues && (\n                                        <Tab\n                                            label={\"Validators\"}\n                                            data-testid={\"cms.editor.field.tabs.validators\"}\n                                        >\n                                            <Grid>\n                                                <Cell span={12}>\n                                                    <Typography use={\"headline5\"}>\n                                                        List validators\n                                                    </Typography>\n                                                    <br />\n                                                    <Typography use={\"body2\"}>\n                                                        These validators are applied to the entire\n                                                        list of values.\n                                                    </Typography>\n                                                </Cell>\n                                                <Cell span={12}>\n                                                    <Elevation z={2}>\n                                                        <ValidatorsTab\n                                                            field={field}\n                                                            name={\"listValidation\"}\n                                                            validators={getListValidators(\n                                                                fieldPlugin\n                                                            )}\n                                                            form={form}\n                                                        />\n                                                    </Elevation>\n                                                </Cell>\n                                            </Grid>\n\n                                            <Grid>\n                                                <Cell span={12}>\n                                                    <Typography use={\"headline5\"}>\n                                                        Individual value validators\n                                                    </Typography>\n                                                    <br />\n                                                    <Typography use={\"body2\"}>\n                                                        These validators are applied to each value\n                                                        in the list.\n                                                    </Typography>\n                                                </Cell>\n                                                <Cell span={12}>\n                                                    <Elevation z={2}>\n                                                        <ValidatorsTab\n                                                            field={current}\n                                                            form={form}\n                                                            name={\"validation\"}\n                                                            validators={getFieldValidators(\n                                                                fieldPlugin\n                                                            )}\n                                                        />\n                                                    </Elevation>\n                                                </Cell>\n                                            </Grid>\n                                        </Tab>\n                                    )}\n\n                                    {!form.data.multipleValues &&\n                                        Array.isArray(fieldPlugin.field.validators) &&\n                                        fieldPlugin.field.validators.length > 0 && (\n                                            <Tab\n                                                label={\"Validators\"}\n                                                data-testid={\"cms.editor.field.tabs.validators\"}\n                                            >\n                                                <ValidatorsTab\n                                                    field={current}\n                                                    form={form}\n                                                    name={\"validation\"}\n                                                    validators={getFieldValidators(fieldPlugin)}\n                                                />\n                                            </Tab>\n                                        )}\n                                    <Tab label={t`Appearance`}>\n                                        <AppearanceTab\n                                            form={form}\n                                            field={form.data as CmsEditorField}\n                                            fieldPlugin={fieldPlugin}\n                                        />\n                                    </Tab>\n                                </Tabs>\n                            </DialogContent>\n                            <DialogActions\n                                style={{\n                                    justifyContent: \"flex-end\"\n                                }}\n                            >\n                                <div>\n                                    <DialogButton onClick={onClose}>{t`Cancel`}</DialogButton>\n                                    <DialogButton onClick={form.submit}>{t`Save`}</DialogButton>\n                                </div>\n                            </DialogActions>\n                        </>\n                    );\n                }}\n            </Form>\n        );\n    }\n\n    return (\n        <Dialog\n            preventOutsideDismiss\n            open={!!current}\n            onClose={onClose}\n            data-testid={\"cms-editor-edit-fields-dialog\"}\n            className={fieldEditorDialog}\n        >\n            <DialogTitle>{headerTitle}</DialogTitle>\n            {render}\n        </Dialog>\n    );\n};\n\nexport default EditFieldDialog;\n"],"file":"EditFieldDialog.js"}