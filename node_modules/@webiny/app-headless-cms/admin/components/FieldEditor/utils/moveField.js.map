{"version":3,"sources":["../../../../../src/admin/components/FieldEditor/utils/moveField.ts"],"names":["dot","getFieldPosition","moveField","field","position","data","row","index","fieldId","id","existingPosition","delete","layout","set","newLayout","splice","params","filter","length"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,oBAAhB;AAEA,OAAOC,gBAAP;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAA+B;AAAA,MAA5BC,KAA4B,QAA5BA,KAA4B;AAAA,MAArBC,QAAqB,QAArBA,QAAqB;AAAA,MAAXC,IAAW,QAAXA,IAAW;AAC7C,MAAQC,GAAR,GAAuBF,QAAvB,CAAQE,GAAR;AAAA,MAAaC,KAAb,GAAuBH,QAAvB,CAAaG,KAAb;AACA,MAAMC,OAAO,GAAG,OAAOL,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCA,KAAK,CAACM,EAA1D;AAEA,MAAMC,gBAAgB,GAAGT,gBAAgB,CAAC;AAAEE,IAAAA,KAAK,EAAEK,OAAT;AAAkBH,IAAAA,IAAI,EAAJA;AAAlB,GAAD,CAAzC;;AAEA,MAAIK,gBAAJ,EAAsB;AAClBL,IAAAA,IAAI,GAAGL,GAAG,CAACW,MAAJ,CAAWN,IAAX,mBAA2BK,gBAAgB,CAACJ,GAA5C,cAAmDI,gBAAgB,CAACH,KAApE,EAAP;AACH,GAR4C,CAU7C;;;AACA,MAAI,CAACF,IAAI,CAACO,MAAL,CAAYN,GAAZ,CAAL,EAAuB;AACnB,WAAON,GAAG,CAACa,GAAJ,CAAQR,IAAR,mBAAwBC,GAAxB,GAA+B,CAACE,OAAD,CAA/B,CAAP;AACH,GAb4C,CAe7C;;;AACA,MAAID,KAAK,KAAK,IAAd,EAAoB;AAChB;AACA,WAAOP,GAAG,CAACa,GAAJ,CAAQR,IAAR,EAAc,QAAd,EAAwB,UAAAO,MAAM,EAAI;AACrC,UAAME,SAAS,sBAAOF,MAAP,CAAf;;AACAE,MAAAA,SAAS,CAACC,MAAV,CAAiBT,GAAjB,EAAsB,CAAtB,EAAyB,CAACE,OAAD,CAAzB;AACA,aAAOM,SAAP;AACH,KAJM,CAAP;AAKH;;AAED,SAAOd,GAAG,CAACa,GAAJ,CAAQR,IAAR,mBAAwBC,GAAxB,GAA+B,UAAAM,MAAM,EAAI;AAC5C,QAAME,SAAS,sBAAOF,MAAP,CAAf;;AACAE,IAAAA,SAAS,CAACC,MAAV,CAAiBR,KAAjB,EAAwB,CAAxB,EAA2BC,OAA3B;AACA,WAAOM,SAAP;AACH,GAJM,CAAP;AAKH,CA9BD;;AAgCA,gBAAe,UAACE,MAAD,EAIT;AACF,SAAOhB,GAAG,CAACa,GAAJ,CAAQX,SAAS,CAACc,MAAD,CAAjB,EAA2B,QAA3B,EAAqC,UAAAJ,MAAM,EAAI;AAClD,WAAO,mBAAIA,MAAJ,EAAYK,MAAZ,CAAmB,UAAAX,GAAG;AAAA,aAAIA,GAAG,CAACY,MAAJ,GAAa,CAAjB;AAAA,KAAtB,CAAP;AACH,GAFM,CAAP;AAGH,CARD","sourcesContent":["import dot from \"dot-prop-immutable\";\nimport { CmsEditorField, CmsEditorFieldId, FieldLayoutPosition } from \"~/types\";\nimport getFieldPosition from \"./getFieldPosition\";\n\nconst moveField = ({ field, position, data }) => {\n    const { row, index } = position;\n    const fieldId = typeof field === \"string\" ? field : field.id;\n\n    const existingPosition = getFieldPosition({ field: fieldId, data });\n\n    if (existingPosition) {\n        data = dot.delete(data, `layout.${existingPosition.row}.${existingPosition.index}`);\n    }\n\n    // Setting a form field into a new non-existing row.\n    if (!data.layout[row]) {\n        return dot.set(data, `layout.${row}`, [fieldId]);\n    }\n\n    // Drop the field at the specified index.\n    if (index === null) {\n        // Create a new row with the new field at the given row index,\n        return dot.set(data, \"layout\", layout => {\n            const newLayout = [...layout];\n            newLayout.splice(row, 0, [fieldId]);\n            return newLayout;\n        });\n    }\n\n    return dot.set(data, `layout.${row}`, layout => {\n        const newLayout = [...layout];\n        newLayout.splice(index, 0, fieldId);\n        return newLayout;\n    });\n};\n\nexport default (params: {\n    field: CmsEditorFieldId | CmsEditorField;\n    position: FieldLayoutPosition;\n    data: object;\n}) => {\n    return dot.set(moveField(params), \"layout\", layout => {\n        return [...layout].filter(row => row.length > 0);\n    });\n};\n"],"file":"moveField.js"}