import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import dot from "dot-prop-immutable";
import getFieldPosition from "./getFieldPosition";

var moveField = function moveField(_ref) {
  var field = _ref.field,
      position = _ref.position,
      data = _ref.data;
  var row = position.row,
      index = position.index;
  var fieldId = typeof field === "string" ? field : field.id;
  var existingPosition = getFieldPosition({
    field: fieldId,
    data: data
  });

  if (existingPosition) {
    data = dot.delete(data, "layout.".concat(existingPosition.row, ".").concat(existingPosition.index));
  } // Setting a form field into a new non-existing row.


  if (!data.layout[row]) {
    return dot.set(data, "layout.".concat(row), [fieldId]);
  } // Drop the field at the specified index.


  if (index === null) {
    // Create a new row with the new field at the given row index,
    return dot.set(data, "layout", function (layout) {
      var newLayout = _toConsumableArray(layout);

      newLayout.splice(row, 0, [fieldId]);
      return newLayout;
    });
  }

  return dot.set(data, "layout.".concat(row), function (layout) {
    var newLayout = _toConsumableArray(layout);

    newLayout.splice(index, 0, fieldId);
    return newLayout;
  });
};

export default (function (params) {
  return dot.set(moveField(params), "layout", function (layout) {
    return _toConsumableArray(layout).filter(function (row) {
      return row.length > 0;
    });
  });
});
//# sourceMappingURL=moveField.js.map