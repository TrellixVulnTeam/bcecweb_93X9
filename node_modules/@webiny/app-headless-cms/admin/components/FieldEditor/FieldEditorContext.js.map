{"version":3,"sources":["../../../../src/admin/components/FieldEditor/FieldEditorContext.tsx"],"names":["React","useCallback","useState","dot","shortid","cloneDeep","useDeepCompareEffect","plugins","utils","useFieldEditor","FieldEditorContext","createContext","FieldEditorProvider","parent","fields","layout","onChange","children","depth","editor","field","dropTarget","state","setState","editField","onDropTarget","fieldId","onFieldDrop","source","pos","type","fieldType","parentId","forEach","index","insertField","position","row","moveRow","moveField","plugin","getFieldPlugin","createField","onEndDrag","monitor","didDrop","getDropResult","removeFields","deleteField","getFieldsInLayout","filter","arr","length","rowIndex","fieldIndex","getField","id","byType","find","query","key","generate","Error","fieldPlugin","data","set","Array","isArray","concat","destination","updateField","i","noConflict","isVisible","item","sameParent","draggedFields","push","some","includes","map","f","join","value"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from \"react\";\nimport dot from \"dot-prop-immutable\";\nimport shortid from \"shortid\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport useDeepCompareEffect from \"use-deep-compare-effect\";\nimport {\n    CmsEditorField,\n    CmsEditorFieldId,\n    CmsEditorFieldsLayout,\n    CmsEditorFieldTypePlugin,\n    FieldLayoutPosition\n} from \"~/types\";\nimport { plugins } from \"@webiny/plugins\";\nimport * as utils from \"./utils\";\nimport { FieldEditorProps } from \"./FieldEditor\";\nimport { DragObjectWithType, DragSourceMonitor } from \"react-dnd\";\nimport { useFieldEditor } from \"~/admin/components/FieldEditor/useFieldEditor\";\n\ninterface DropTarget {\n    row: number;\n    index: number;\n}\n\ninterface Position {\n    row: number;\n    index: number;\n}\n\nexport interface DragSource extends DragObjectWithType {\n    parent?: string;\n    pos: Partial<Position>;\n    type: \"row\" | \"field\" | \"newField\";\n    fieldType?: string;\n    field?: CmsEditorField;\n    fields?: CmsEditorField[];\n}\n\nexport interface FieldEditorContextValue {\n    fields: CmsEditorField[][];\n    noConflict: Function;\n    layout: CmsEditorFieldsLayout;\n    onChange?: (data: any) => void;\n    getFieldsInLayout: () => CmsEditorField[][];\n    getFieldPlugin: (type: string) => CmsEditorFieldTypePlugin;\n    getField: (query: Record<string, string>) => CmsEditorField;\n    editField: (field: CmsEditorField) => void;\n    field: CmsEditorField;\n    parent: CmsEditorField;\n    depth: number;\n    dropTarget?: DropTarget;\n    onFieldDrop: (source: Partial<DragSource>, target: DropTarget) => void;\n    onEndDrag: (item: DragSource, monitor: DragSourceMonitor) => void;\n    insertField: (params: { field: CmsEditorField; position: FieldLayoutPosition }) => void;\n    moveField: (params: {\n        field: CmsEditorFieldId | CmsEditorField;\n        position: FieldLayoutPosition;\n    }) => void;\n    moveRow: (source: number, destination: number) => void;\n    updateField: (field: CmsEditorField) => void;\n    deleteField: (field: CmsEditorField) => void;\n}\n\ninterface FieldEditorProviderProps extends FieldEditorProps {\n    children: React.ReactElement;\n}\n\nexport const FieldEditorContext = React.createContext<FieldEditorContextValue>(null);\n\nexport const FieldEditorProvider = ({\n    parent,\n    fields,\n    layout,\n    onChange,\n    children\n}: FieldEditorProviderProps) => {\n    // We need to determine depth of this provider so we can render drop zones with correct z-indexes.\n    let depth = 0;\n    try {\n        const editor = useFieldEditor();\n        depth = editor.depth + 1;\n    } catch {\n        // There's no parent provider, so this is the top-level one.\n    }\n\n    const [state, setState] = useState({\n        layout,\n        fields,\n        field: null,\n        dropTarget: null\n    });\n\n    useDeepCompareEffect(() => {\n        onChange({ fields: state.fields, layout: state.layout });\n    }, [state.fields, state.layout]);\n\n    const editField = useCallback(field => {\n        setState(state => ({ ...state, field }));\n    }, []);\n\n    const onDropTarget = { dropTarget: parent ? parent.fieldId : null };\n\n    const onFieldDrop = useCallback<FieldEditorContextValue[\"onFieldDrop\"]>(\n        (source, dropTarget) => {\n            const { pos, type, fieldType, field, fields } = source;\n\n            const parentId = parent ? parent.fieldId : null;\n\n            if (type === \"row\") {\n                if (parentId !== source.parent) {\n                    // We're dragging an existing row from another fieldset\n                    fields.forEach((field, index) => {\n                        insertField({\n                            field,\n                            position: {\n                                row: dropTarget.row,\n                                index: index === 0 ? null : index\n                            }\n                        });\n                    });\n                } else {\n                    // We're dragging a row within the same fieldset\n                    moveRow(pos.row, dropTarget.row);\n                }\n\n                return onDropTarget;\n            }\n\n            // If source pos is set, we are moving an existing field.\n            if (pos) {\n                if (parentId !== source.parent) {\n                    // We're dragging an existing field from another fieldset\n                    insertField({ field, position: dropTarget });\n                } else {\n                    // We're dragging a field within the same fieldset\n                    moveField({ field, position: dropTarget });\n                }\n                return onDropTarget;\n            }\n\n            const plugin = getFieldPlugin(fieldType);\n            editField(plugin.field.createField());\n            setState(state => ({ ...state, dropTarget }));\n        },\n        []\n    );\n\n    const onEndDrag: FieldEditorContextValue[\"onEndDrag\"] = ({ type, field, fields }, monitor) => {\n        if (!monitor.didDrop()) {\n            return;\n        }\n\n        // Check if we dropped outside of the source fieldset, and if yes, remove the field from the original parent.\n        const { dropTarget } = monitor.getDropResult();\n        const parentId = parent ? parent.fieldId : null;\n        if (dropTarget === parentId) {\n            return;\n        }\n\n        const removeFields = type === \"row\" ? fields : [field];\n        removeFields.forEach(field => deleteField(field));\n    };\n\n    const getFieldsInLayout: FieldEditorContextValue[\"getFieldsInLayout\"] = () => {\n        // Replace every field ID with actual field object.\n        const fields = cloneDeep(state.layout.filter(arr => arr.length));\n        fields.forEach((row, rowIndex) => {\n            row.forEach((fieldId, fieldIndex) => {\n                fields[rowIndex][fieldIndex] = getField({ id: fieldId });\n            });\n        });\n        return fields;\n    };\n\n    /**\n     * Return field plugin.\n     */\n    const getFieldPlugin: FieldEditorContextValue[\"getFieldPlugin\"] = type => {\n        return plugins\n            .byType<CmsEditorFieldTypePlugin>(\"cms-editor-field-type\")\n            .find(({ field }) => field.type === type);\n    };\n\n    /**\n     * Checks if field of given type already exists in the list of fields.\n     */\n    const getField: FieldEditorContextValue[\"getField\"] = query => {\n        return state.fields.find(field => {\n            for (const key in query) {\n                if (!(key in field)) {\n                    return null;\n                }\n\n                if (field[key] !== query[key]) {\n                    return null;\n                }\n            }\n\n            return true;\n        });\n    };\n\n    /**\n     * Inserts a new field into the target position.\n     */\n    const insertField: FieldEditorContextValue[\"insertField\"] = ({ field, position }) => {\n        if (!field.id) {\n            field.id = shortid.generate();\n        }\n\n        if (!field.type) {\n            throw new Error(`Field \"type\" missing.`);\n        }\n\n        const fieldPlugin = getFieldPlugin(field.type);\n        if (!fieldPlugin) {\n            throw new Error(`Invalid field \"type\".`);\n        }\n\n        setState(data => {\n            data = dot.set(data, \"fields\", fields => {\n                if (Array.isArray(fields)) {\n                    return fields.concat(field);\n                }\n                return [field];\n            });\n\n            // Move field to position where it was dropped.\n            return utils.moveField({ field, position, data });\n        });\n    };\n\n    /**\n     * Moves field to the given target position.\n     */\n    const moveField: FieldEditorContextValue[\"moveField\"] = ({ field, position }) => {\n        setState(data => {\n            return utils.moveField({ field, position, data });\n        });\n    };\n\n    /**\n     * Moves row to a destination row.\n     */\n    const moveRow: FieldEditorContextValue[\"moveRow\"] = (source, destination) => {\n        setState(data => {\n            return utils.moveRow({ data, source, destination });\n        });\n    };\n\n    /**\n     * Updates field.\n     */\n    const updateField: FieldEditorContextValue[\"updateField\"] = field => {\n        setState(data => {\n            for (let i = 0; i < data.fields.length; i++) {\n                if (data.fields[i].id === field.id) {\n                    return dot.set(data, `fields.${i}`, field);\n                }\n            }\n        });\n    };\n\n    /**\n     * Deletes a field (both from the list of field and the layout).\n     */\n    const deleteField: FieldEditorContextValue[\"deleteField\"] = field => {\n        setState(data => {\n            return utils.deleteField({ field, data });\n        });\n    };\n\n    const noConflict = useCallback(\n        isVisible => item => {\n            const sameParent = item.parent === onDropTarget.dropTarget;\n            const draggedFields = [];\n            switch (item.type) {\n                case \"row\":\n                    item.fields.forEach(field => draggedFields.push(field.fieldId));\n                    break;\n                case \"field\":\n                    draggedFields.push(item.field.fieldId);\n                    break;\n                default:\n                    break;\n            }\n\n            if (\n                draggedFields.length &&\n                !sameParent &&\n                fields.some(field => draggedFields.includes(field.fieldId))\n            ) {\n                return false;\n            }\n\n            return typeof isVisible === \"function\" ? isVisible(item) : true;\n        },\n        [fields.map(f => f.fieldId).join(\".\")]\n    );\n\n    const value = {\n        parent,\n        depth,\n        getFieldsInLayout,\n        getFieldPlugin,\n        getField,\n        editField,\n        field: state.field,\n        dropTarget: state.dropTarget,\n        onFieldDrop,\n        onEndDrag,\n        insertField,\n        moveField,\n        moveRow,\n        updateField,\n        deleteField,\n        fields: getFieldsInLayout(),\n        noConflict,\n        layout: state.layout\n    };\n\n    return <FieldEditorContext.Provider value={value}>{children}</FieldEditorContext.Provider>;\n};\n"],"file":"FieldEditorContext.js"}