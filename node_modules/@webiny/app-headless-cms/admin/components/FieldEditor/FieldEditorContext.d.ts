import React from "react";
import { CmsEditorField, CmsEditorFieldId, CmsEditorFieldsLayout, CmsEditorFieldTypePlugin, FieldLayoutPosition } from "../../../types";
import { FieldEditorProps } from "./FieldEditor";
import { DragObjectWithType, DragSourceMonitor } from "react-dnd";
interface DropTarget {
    row: number;
    index: number;
}
interface Position {
    row: number;
    index: number;
}
export interface DragSource extends DragObjectWithType {
    parent?: string;
    pos: Partial<Position>;
    type: "row" | "field" | "newField";
    fieldType?: string;
    field?: CmsEditorField;
    fields?: CmsEditorField[];
}
export interface FieldEditorContextValue {
    fields: CmsEditorField[][];
    noConflict: Function;
    layout: CmsEditorFieldsLayout;
    onChange?: (data: any) => void;
    getFieldsInLayout: () => CmsEditorField[][];
    getFieldPlugin: (type: string) => CmsEditorFieldTypePlugin;
    getField: (query: Record<string, string>) => CmsEditorField;
    editField: (field: CmsEditorField) => void;
    field: CmsEditorField;
    parent: CmsEditorField;
    depth: number;
    dropTarget?: DropTarget;
    onFieldDrop: (source: Partial<DragSource>, target: DropTarget) => void;
    onEndDrag: (item: DragSource, monitor: DragSourceMonitor) => void;
    insertField: (params: {
        field: CmsEditorField;
        position: FieldLayoutPosition;
    }) => void;
    moveField: (params: {
        field: CmsEditorFieldId | CmsEditorField;
        position: FieldLayoutPosition;
    }) => void;
    moveRow: (source: number, destination: number) => void;
    updateField: (field: CmsEditorField) => void;
    deleteField: (field: CmsEditorField) => void;
}
interface FieldEditorProviderProps extends FieldEditorProps {
    children: React.ReactElement;
}
export declare const FieldEditorContext: React.Context<FieldEditorContextValue>;
export declare const FieldEditorProvider: ({ parent, fields, layout, onChange, children }: FieldEditorProviderProps) => JSX.Element;
export {};
