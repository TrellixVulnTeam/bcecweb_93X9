{"version":3,"sources":["../../../../src/admin/components/FieldEditor/FieldEditor.tsx"],"names":["React","Fragment","get","Icon","i18n","Center","Vertical","Horizontal","Draggable","EditFieldDialog","Field","rowHandle","fieldHandle","fieldContainer","Row","RowContainer","useFieldEditor","FieldEditorProvider","t","namespace","fieldTypes","Editor","parent","depth","insertField","updateField","deleteField","fields","noConflict","editField","onFieldDrop","onEndDrag","field","dropTarget","length","item","row","index","padding","map","fieldId","type","pos","f","join","drag","isDragging","opacity","fieldIndex","includes","id","position","FieldEditor","props"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,IAAT,QAAqB,kBAArB;;AAEA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,UAA3B;AACA,OAAOC,SAAP;AACA,OAAOC,eAAP;AACA,OAAOC,KAAP;AACA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,cAAjC,EAAiDC,GAAjD,EAAsDC,YAAtD;AACA,SAASC,cAAT;AACA,SAASC,mBAAT;AAGA,IAAMC,CAAC,GAAGd,IAAI,CAACe,SAAL,CAAe,0CAAf,CAAV;AAEA,IAAMC,UAAU,GAAG,CAAC,OAAD,EAAU,UAAV,CAAnB;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AACjB,wBAaIL,cAAc,EAblB;AAAA,MACIM,MADJ,mBACIA,MADJ;AAAA,MAEIC,KAFJ,mBAEIA,KAFJ;AAAA,MAGIC,WAHJ,mBAGIA,WAHJ;AAAA,MAIIC,WAJJ,mBAIIA,WAJJ;AAAA,MAKIC,WALJ,mBAKIA,WALJ;AAAA,MAMIC,MANJ,mBAMIA,MANJ;AAAA,MAOIC,UAPJ,mBAOIA,UAPJ;AAAA,MAQIC,SARJ,mBAQIA,SARJ;AAAA,MASIC,WATJ,mBASIA,WATJ;AAAA,MAUIC,SAVJ,mBAUIA,SAVJ;AAAA,MAWIC,KAXJ,mBAWIA,KAXJ;AAAA,MAYIC,UAZJ,mBAYIA,UAZJ;;AAeA,sBACI,oBAAC,QAAD,QACKN,MAAM,CAACO,MAAP,KAAkB,CAAlB,iBACG,oBAAC,MAAD;AACI,IAAA,MAAM,EAAE,gBAAAC,IAAI;AAAA,aAAIL,WAAW,CAACK,IAAD,EAAO;AAAEC,QAAAA,GAAG,EAAE,CAAP;AAAUC,QAAAA,KAAK,EAAE;AAAjB,OAAP,CAAf;AAAA,KADhB;AAEI,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE;AAAX;AAFX,KAIKpB,CAJL,gGAFR,EAUKS,MAAM,CAACY,GAAP,CAAW,UAACH,GAAD,EAAMC,KAAN;AAAA,wBACR,oBAAC,SAAD;AACI,MAAA,SAAS,EAAE;AACPf,QAAAA,MAAM,EAAEA,MAAM,GAAGA,MAAM,CAACkB,OAAV,GAAoB,IAD3B;AAEPC,QAAAA,IAAI,EAAE,KAFC;AAGPd,QAAAA,MAAM,EAAES,GAHD;AAIPM,QAAAA,GAAG,EAAE;AAAEN,UAAAA,GAAG,EAAEC;AAAP;AAJE,OADf;AAOI,MAAA,OAAO,EAAEN,SAPb;AAQI,MAAA,GAAG,EAAEK,GAAG,CAACG,GAAJ,CAAQ,UAAAI,CAAC;AAAA,eAAIA,CAAC,CAACH,OAAN;AAAA,OAAT,EAAwBI,IAAxB,CAA6B,GAA7B;AART,OAUK;AAIK;AAJL;AAAA,UAEOC,IAFP,QAEOA,IAFP;AAAA,UAGOC,UAHP,QAGOA,UAHP;AAAA,0BAMG,oBAAC,YAAD;AAAc,QAAA,KAAK,EAAE;AAAEC,UAAAA,OAAO,EAAED,UAAU,GAAG,GAAH,GAAS;AAA9B;AAArB,sBACI;AAAK,QAAA,SAAS,EAAEnC,SAAhB;AAA2B,QAAA,GAAG,EAAEkC;AAAhC,sBACI,oBAAC,IAAD;AAAM,QAAA,IAAI,eAAE,oBAAC,UAAD;AAAZ,QADJ,CADJ,eAII,oBAAC,UAAD;AACI,8DAA6CR,KAA7C,CADJ;AAEI,QAAA,SAAS,EAAET,UAAU,EAFzB;AAGI,QAAA,MAAM,EAAE,gBAAAO,IAAI;AAAA,iBAAIL,WAAW,CAACK,IAAD,EAAO;AAAEC,YAAAA,GAAG,EAAEC,KAAP;AAAcA,YAAAA,KAAK,EAAE;AAArB,WAAP,CAAf;AAAA;AAHhB,QAJJ,eAUI,oBAAC,GAAD;AAAK,uBAAa;AAAlB,SACKD,GAAG,CAACG,GAAJ,CAAQ,UAACP,KAAD,EAAQgB,UAAR;AAAA,4BACL,oBAAC,SAAD;AACI,UAAA,GAAG,EAAEhB,KAAK,CAACQ,OADf;AAEI,UAAA,SAAS,EAAE;AACPlB,YAAAA,MAAM,EAAEA,MAAM,GAAGA,MAAM,CAACkB,OAAV,GAAoB,IAD3B;AAEPC,YAAAA,IAAI,EAAE,OAFC;AAGPT,YAAAA,KAAK,EAALA,KAHO;AAIPU,YAAAA,GAAG,EAAE;AACDN,cAAAA,GAAG,EAAEC,KADJ;AAEDA,cAAAA,KAAK,EAAEW;AAFN;AAJE,WAFf;AAWI,UAAA,OAAO,EAAEjB;AAXb,WAaK;AAAA,cAAGc,IAAH,SAAGA,IAAH;AAAA,8BACG;AAAK,YAAA,SAAS,EAAEhC,cAAhB;AAAgC,YAAA,GAAG,EAAEgC;AAArC,0BACI,oBAAC,QAAD;AACI,YAAA,KAAK,EAAEtB,KADX;AAEI,YAAA,MAAM,EAAE,gBAAAY,IAAI;AAAA,qBACRL,WAAW,CAACK,IAAD,EAAO;AACdC,gBAAAA,GAAG,EAAEC,KADS;AAEdA,gBAAAA,KAAK,EAAEW;AAFO,eAAP,CADH;AAAA,aAFhB;AAQI,YAAA,SAAS,EAAEpB,UAAU,CACjB,UAAAO,IAAI;AAAA,qBACAf,UAAU,CAAC6B,QAAX,CAAoBd,IAAI,CAACM,IAAzB,MACCL,GAAG,CAACF,MAAJ,GAAa,CAAb,IACGhC,GAAG,CAACiC,IAAD,EAAO,SAAP,CAAH,KAAyBE,KAF7B,CADA;AAAA,aADa;AARzB,YADJ,eAiBI;AAAK,YAAA,SAAS,EAAEzB;AAAhB,0BACI,oBAAC,KAAD;AACI,YAAA,MAAM,EAAEU,MADZ;AAEI,YAAA,KAAK,EAAEU,KAFX;AAGI,YAAA,MAAM,EAAEH,SAHZ;AAII,YAAA,QAAQ,EAAEH;AAJd,YADJ,CAjBJ,EA2BKsB,UAAU,KAAKZ,GAAG,CAACF,MAAJ,GAAa,CAA5B,iBACG,oBAAC,QAAD;AACI,YAAA,IAAI,MADR;AAEI,YAAA,KAAK,EAAEX,KAFX;AAGI,YAAA,SAAS,EAAEK,UAAU,CACjB,UAAAO,IAAI;AAAA,qBACAf,UAAU,CAAC6B,QAAX,CAAoBd,IAAI,CAACM,IAAzB,MACCL,GAAG,CAACF,MAAJ,GAAa,CAAb,IACGhC,GAAG,CAACiC,IAAD,EAAO,SAAP,CAAH,KAAyBE,KAF7B,CADA;AAAA,aADa,CAHzB;AASI,YAAA,MAAM,EAAE,gBAAAF,IAAI;AAAA,qBACRL,WAAW,CAACK,IAAD,EAAO;AACdC,gBAAAA,GAAG,EAAEC,KADS;AAEdA,gBAAAA,KAAK,EAAEW,UAAU,GAAG;AAFN,eAAP,CADH;AAAA;AAThB,YA5BR,CADH;AAAA,SAbL,CADK;AAAA,OAAR,CADL,CAVJ,EA6EKX,KAAK,KAAKV,MAAM,CAACO,MAAP,GAAgB,CAA1B,iBACG,oBAAC,UAAD;AACI,iEAAgDG,KAAhD,CADJ;AAEI,QAAA,IAAI,MAFR;AAGI,QAAA,SAAS,EAAET,UAAU,EAHzB;AAII,QAAA,MAAM,EAAE,gBAAAO,IAAI;AAAA,iBACRL,WAAW,CAACK,IAAD,EAAO;AACdC,YAAAA,GAAG,EAAEC,KAAK,GAAG,CADC;AAEdA,YAAAA,KAAK,EAAE;AAFO,WAAP,CADH;AAAA;AAJhB,QA9ER,CANH;AAAA,KAVL,CADQ;AAAA,GAAX,CAVL,eA0HI,oBAAC,eAAD;AACI,IAAA,KAAK,EAAEL,KADX;AAEI,IAAA,OAAO,EAAEH,SAFb;AAGI,IAAA,QAAQ,EAAE,kBAAAG,KAAK,EAAI;AACf,UAAIA,KAAK,CAACkB,EAAV,EAAc;AACVzB,QAAAA,WAAW,CAACO,KAAD,CAAX;AACH,OAFD,MAEO;AACHR,QAAAA,WAAW,CAAC;AAAEQ,UAAAA,KAAK,EAALA,KAAF;AAASmB,UAAAA,QAAQ,EAAElB;AAAnB,SAAD,CAAX;AACH;;AACDJ,MAAAA,SAAS,CAAC,IAAD,CAAT;AACH;AAVL,IA1HJ,CADJ;AAyIH,CAzJD;;AAkKA,OAAO,IAAMuB,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAA6B;AACpD,sBACI,oBAAC,mBAAD,EAAyBA,KAAzB,eACI,oBAAC,MAAD,OADJ,CADJ;AAKH,CANM","sourcesContent":["import React, { Fragment } from \"react\";\nimport get from \"lodash/get\";\nimport { Icon } from \"@webiny/ui/Icon\";\nimport { i18n } from \"@webiny/app/i18n\";\nimport { ReactComponent as HandleIcon } from \"~/admin/icons/round-drag_indicator-24px.svg\";\nimport { Center, Vertical, Horizontal } from \"../DropZone\";\nimport Draggable from \"../Draggable\";\nimport EditFieldDialog from \"./EditFieldDialog\";\nimport Field from \"./Field\";\nimport { rowHandle, fieldHandle, fieldContainer, Row, RowContainer } from \"./Styled\";\nimport { useFieldEditor } from \"./useFieldEditor\";\nimport { FieldEditorProvider } from \"./FieldEditorContext\";\nimport { CmsEditorField, CmsEditorFieldsLayout } from \"~/types\";\n\nconst t = i18n.namespace(\"app-headless-cms/admin/components/editor\");\n\nconst fieldTypes = [\"field\", \"newField\"];\n\nconst Editor = () => {\n    const {\n        parent,\n        depth,\n        insertField,\n        updateField,\n        deleteField,\n        fields,\n        noConflict,\n        editField,\n        onFieldDrop,\n        onEndDrag,\n        field,\n        dropTarget\n    } = useFieldEditor();\n\n    return (\n        <Fragment>\n            {fields.length === 0 && (\n                <Center\n                    onDrop={item => onFieldDrop(item, { row: 0, index: 0 })}\n                    style={{ padding: \"5px 0 15px 0\" }}\n                >\n                    {t`Drop your first field here`}\n                </Center>\n            )}\n\n            {fields.map((row, index) => (\n                <Draggable\n                    beginDrag={{\n                        parent: parent ? parent.fieldId : null,\n                        type: \"row\",\n                        fields: row,\n                        pos: { row: index }\n                    }}\n                    endDrag={onEndDrag}\n                    key={row.map(f => f.fieldId).join(\".\")}\n                >\n                    {(\n                        {\n                            drag,\n                            isDragging\n                        } /* RowContainer start - includes drag handle, drop zones and the Row itself. */\n                    ) => (\n                        <RowContainer style={{ opacity: isDragging ? 0.3 : 1 }}>\n                            <div className={rowHandle} ref={drag}>\n                                <Icon icon={<HandleIcon />} />\n                            </div>\n                            <Horizontal\n                                data-testid={`cms-editor-row-droppable-top-${index}`}\n                                isVisible={noConflict()}\n                                onDrop={item => onFieldDrop(item, { row: index, index: null })}\n                            />\n                            {/* Row start - includes field drop zones and fields */}\n                            <Row data-testid={\"cms.editor.field-row\"}>\n                                {row.map((field, fieldIndex) => (\n                                    <Draggable\n                                        key={field.fieldId}\n                                        beginDrag={{\n                                            parent: parent ? parent.fieldId : null,\n                                            type: \"field\",\n                                            field,\n                                            pos: {\n                                                row: index,\n                                                index: fieldIndex\n                                            }\n                                        }}\n                                        endDrag={onEndDrag}\n                                    >\n                                        {({ drag }) => (\n                                            <div className={fieldContainer} ref={drag}>\n                                                <Vertical\n                                                    depth={depth}\n                                                    onDrop={item =>\n                                                        onFieldDrop(item, {\n                                                            row: index,\n                                                            index: fieldIndex\n                                                        })\n                                                    }\n                                                    isVisible={noConflict(\n                                                        item =>\n                                                            fieldTypes.includes(item.type) &&\n                                                            (row.length < 4 ||\n                                                                get(item, \"pos.row\") === index)\n                                                    )}\n                                                />\n\n                                                <div className={fieldHandle}>\n                                                    <Field\n                                                        parent={parent}\n                                                        field={field}\n                                                        onEdit={editField}\n                                                        onDelete={deleteField}\n                                                    />\n                                                </div>\n\n                                                {/* Field end */}\n                                                {fieldIndex === row.length - 1 && (\n                                                    <Vertical\n                                                        last\n                                                        depth={depth}\n                                                        isVisible={noConflict(\n                                                            item =>\n                                                                fieldTypes.includes(item.type) &&\n                                                                (row.length < 4 ||\n                                                                    get(item, \"pos.row\") === index)\n                                                        )}\n                                                        onDrop={item =>\n                                                            onFieldDrop(item, {\n                                                                row: index,\n                                                                index: fieldIndex + 1\n                                                            })\n                                                        }\n                                                    />\n                                                )}\n                                            </div>\n                                        )}\n                                    </Draggable>\n                                ))}\n                            </Row>\n                            {/* Row end */}\n                            {index === fields.length - 1 && (\n                                <Horizontal\n                                    data-testid={`cms-editor-row-droppable-bottom-${index}`}\n                                    last\n                                    isVisible={noConflict()}\n                                    onDrop={item =>\n                                        onFieldDrop(item, {\n                                            row: index + 1,\n                                            index: null\n                                        })\n                                    }\n                                />\n                            )}\n                        </RowContainer>\n                    )}\n                </Draggable>\n            ))}\n\n            <EditFieldDialog\n                field={field}\n                onClose={editField}\n                onSubmit={field => {\n                    if (field.id) {\n                        updateField(field);\n                    } else {\n                        insertField({ field, position: dropTarget });\n                    }\n                    editField(null);\n                }}\n            />\n        </Fragment>\n    );\n};\n\nexport interface FieldEditorProps {\n    parent?: CmsEditorField;\n    layout: CmsEditorFieldsLayout;\n    fields: CmsEditorField[];\n    onChange: (params: { fields: CmsEditorField[]; layout: CmsEditorFieldsLayout }) => void;\n}\n\nexport const FieldEditor = (props: FieldEditorProps) => {\n    return (\n        <FieldEditorProvider {...props}>\n            <Editor />\n        </FieldEditorProvider>\n    );\n};\n"],"file":"FieldEditor.js"}