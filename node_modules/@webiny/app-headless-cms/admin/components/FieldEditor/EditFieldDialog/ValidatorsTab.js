import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _debounce from "lodash/debounce";
import _cloneDeep from "lodash/cloneDeep";
import React from "react";
import { css } from "emotion";
import { Switch } from "@webiny/ui/Switch";
import { SimpleForm, SimpleFormContent, SimpleFormHeader } from "@webiny/app-admin/components/SimpleForm";
import { Form } from "@webiny/form";
import { Grid, Cell } from "@webiny/ui/Grid";
import { validation } from "@webiny/validation";
import { Input } from "@webiny/ui/Input";

var onEnabledChange = function onEnabledChange(_ref) {
  var data = _ref.data,
      validationValue = _ref.validationValue,
      onChangeValidation = _ref.onChangeValidation,
      validator = _ref.validator;

  if (data) {
    var index = validationValue.findIndex(function (item) {
      return item.name === validator.name;
    });
    onChangeValidation([].concat(_toConsumableArray(validationValue.slice(0, index)), _toConsumableArray(validationValue.slice(index + 1))));
  } else {
    onChangeValidation([].concat(_toConsumableArray(validationValue), [{
      name: validator.name,
      settings: validator.defaultSettings,
      message: validator.defaultMessage
    }]));
  }
};

var onFormChange = _debounce(function (_ref2) {
  var data = _ref2.data,
      validationValue = _ref2.validationValue,
      onChangeValidation = _ref2.onChangeValidation,
      validatorIndex = _ref2.validatorIndex;

  var newValidationValue = _cloneDeep(validationValue);

  newValidationValue[validatorIndex] = _objectSpread(_objectSpread({}, newValidationValue[validatorIndex]), _cloneDeep(data));
  onChangeValidation(newValidationValue);
}, 200);

var noMargin = /*#__PURE__*/css({
  margin: "0 !important"
}, "label:noMargin;");

var ValidatorsTab = function ValidatorsTab(props) {
  var field = props.field,
      name = props.name,
      validators = props.validators,
      Bind = props.form.Bind;
  return /*#__PURE__*/React.createElement(Bind, {
    name: name,
    defaultValue: []
  }, function (_ref3) {
    var validationValue = _ref3.value,
        onChangeValidation = _ref3.onChange;
    return validators.map(function (_ref4) {
      var optional = _ref4.optional,
          validator = _ref4.validator;
      var validatorIndex = (validationValue || []).findIndex(function (item) {
        return item.name === validator.name;
      });
      var data = (validationValue || [])[validatorIndex];
      return /*#__PURE__*/React.createElement(SimpleForm, {
        key: validator.name,
        noElevation: true,
        className: noMargin,
        "data-testid": "cms.editor.field-validator.".concat(validator.name)
      }, /*#__PURE__*/React.createElement(SimpleFormHeader, {
        title: validator.label
      }, optional && /*#__PURE__*/React.createElement(Switch, {
        label: "Enabled",
        value: validatorIndex >= 0,
        onChange: function onChange() {
          return onEnabledChange({
            data: data,
            validationValue: validationValue,
            onChangeValidation: onChangeValidation,
            validator: validator
          });
        }
      })), data && /*#__PURE__*/React.createElement(Form, {
        data: data,
        onChange: function onChange(data) {
          return onFormChange({
            data: data,
            validationValue: validationValue,
            onChangeValidation: onChangeValidation,
            validatorIndex: validatorIndex
          });
        }
      }, function (_ref5) {
        var Bind = _ref5.Bind,
            setValue = _ref5.setValue;
        return /*#__PURE__*/React.createElement(SimpleFormContent, null, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Cell, {
          span: 12
        }, /*#__PURE__*/React.createElement(Bind, {
          name: "message",
          validators: validation.create("required")
        }, /*#__PURE__*/React.createElement(Input, {
          label: "Message",
          description: "This message will be displayed to the user"
        })))), typeof validator.renderSettings === "function" && validator.renderSettings({
          field: field,
          setValue: setValue,
          setMessage: function setMessage(message) {
            setValue("message", message);
          },
          data: data,
          Bind: Bind
        }));
      }));
    });
  });
};

export default ValidatorsTab;
//# sourceMappingURL=ValidatorsTab.js.map