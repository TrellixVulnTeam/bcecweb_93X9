{"version":3,"sources":["../../../../../src/admin/components/FieldEditor/EditFieldDialog/ValidatorsTab.tsx"],"names":["React","css","Switch","SimpleForm","SimpleFormContent","SimpleFormHeader","Form","Grid","Cell","validation","Input","onEnabledChange","data","validationValue","onChangeValidation","validator","index","findIndex","item","name","slice","settings","defaultSettings","message","defaultMessage","onFormChange","validatorIndex","newValidationValue","noMargin","margin","ValidatorsTab","props","field","validators","Bind","form","value","onChange","map","optional","label","setValue","create","renderSettings","setMessage"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,SAApB;AAEA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SACIC,UADJ,EAEIC,iBAFJ,EAGIC,gBAHJ,QAIO,yCAJP;AAKA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,iBAA3B;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,KAAT,QAAsB,kBAAtB;;AAGA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,OAA8D;AAAA,MAA3DC,IAA2D,QAA3DA,IAA2D;AAAA,MAArDC,eAAqD,QAArDA,eAAqD;AAAA,MAApCC,kBAAoC,QAApCA,kBAAoC;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;;AAClF,MAAIH,IAAJ,EAAU;AACN,QAAMI,KAAK,GAAGH,eAAe,CAACI,SAAhB,CAA0B,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACC,IAAL,KAAcJ,SAAS,CAACI,IAA5B;AAAA,KAA9B,CAAd;AACAL,IAAAA,kBAAkB,8BACXD,eAAe,CAACO,KAAhB,CAAsB,CAAtB,EAAyBJ,KAAzB,CADW,sBAEXH,eAAe,CAACO,KAAhB,CAAsBJ,KAAK,GAAG,CAA9B,CAFW,GAAlB;AAIH,GAND,MAMO;AACHF,IAAAA,kBAAkB,8BACXD,eADW,IAEd;AACIM,MAAAA,IAAI,EAAEJ,SAAS,CAACI,IADpB;AAEIE,MAAAA,QAAQ,EAAEN,SAAS,CAACO,eAFxB;AAGIC,MAAAA,OAAO,EAAER,SAAS,CAACS;AAHvB,KAFc,GAAlB;AAQH;AACJ,CAjBD;;AAmBA,IAAMC,YAAY,GAAG,UAAS,iBAAmE;AAAA,MAAhEb,IAAgE,SAAhEA,IAAgE;AAAA,MAA1DC,eAA0D,SAA1DA,eAA0D;AAAA,MAAzCC,kBAAyC,SAAzCA,kBAAyC;AAAA,MAArBY,cAAqB,SAArBA,cAAqB;;AAC7F,MAAMC,kBAAkB,GAAG,WAAUd,eAAV,CAA3B;;AACAc,EAAAA,kBAAkB,CAACD,cAAD,CAAlB,mCACOC,kBAAkB,CAACD,cAAD,CADzB,GAEO,WAAUd,IAAV,CAFP;AAIAE,EAAAA,kBAAkB,CAACa,kBAAD,CAAlB;AACH,CAPoB,EAOlB,GAPkB,CAArB;;AASA,IAAMC,QAAQ,gBAAG3B,GAAG,CAAC;AACjB4B,EAAAA,MAAM,EAAE;AADS,CAAD,oBAApB;;AAWA,IAAMC,aAA0D,GAAG,SAA7DA,aAA6D,CAAAC,KAAK,EAAI;AACxE,MACIC,KADJ,GAKID,KALJ,CACIC,KADJ;AAAA,MAEIb,IAFJ,GAKIY,KALJ,CAEIZ,IAFJ;AAAA,MAGIc,UAHJ,GAKIF,KALJ,CAGIE,UAHJ;AAAA,MAIYC,IAJZ,GAKIH,KALJ,CAIII,IAJJ,CAIYD,IAJZ;AAOA,sBACI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEf,IAAZ;AAAkB,IAAA,YAAY,EAAE;AAAhC,KACK,iBAA8D;AAAA,QAApDN,eAAoD,SAA3DuB,KAA2D;AAAA,QAAzBtB,kBAAyB,SAAnCuB,QAAmC;AAC3D,WAAOJ,UAAU,CAACK,GAAX,CAAe,iBAA6B;AAAA,UAA1BC,QAA0B,SAA1BA,QAA0B;AAAA,UAAhBxB,SAAgB,SAAhBA,SAAgB;AAC/C,UAAMW,cAAc,GAAG,CAACb,eAAe,IAAI,EAApB,EAAwBI,SAAxB,CACnB,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACC,IAAL,KAAcJ,SAAS,CAACI,IAA5B;AAAA,OADe,CAAvB;AAGA,UAAMP,IAAI,GAAG,CAACC,eAAe,IAAI,EAApB,EAAwBa,cAAxB,CAAb;AAEA,0BACI,oBAAC,UAAD;AACI,QAAA,GAAG,EAAEX,SAAS,CAACI,IADnB;AAEI,QAAA,WAAW,MAFf;AAGI,QAAA,SAAS,EAAES,QAHf;AAII,4DAA2Cb,SAAS,CAACI,IAArD;AAJJ,sBAMI,oBAAC,gBAAD;AAAkB,QAAA,KAAK,EAAEJ,SAAS,CAACyB;AAAnC,SACKD,QAAQ,iBACL,oBAAC,MAAD;AACI,QAAA,KAAK,EAAC,SADV;AAEI,QAAA,KAAK,EAAEb,cAAc,IAAI,CAF7B;AAGI,QAAA,QAAQ,EAAE;AAAA,iBACNf,eAAe,CAAC;AACZC,YAAAA,IAAI,EAAJA,IADY;AAEZC,YAAAA,eAAe,EAAfA,eAFY;AAGZC,YAAAA,kBAAkB,EAAlBA,kBAHY;AAIZC,YAAAA,SAAS,EAATA;AAJY,WAAD,CADT;AAAA;AAHd,QAFR,CANJ,EAsBKH,IAAI,iBACD,oBAAC,IAAD;AACI,QAAA,IAAI,EAAEA,IADV;AAEI,QAAA,QAAQ,EAAE,kBAAAA,IAAI;AAAA,iBACVa,YAAY,CAAC;AACTb,YAAAA,IAAI,EAAJA,IADS;AAETC,YAAAA,eAAe,EAAfA,eAFS;AAGTC,YAAAA,kBAAkB,EAAlBA,kBAHS;AAITY,YAAAA,cAAc,EAAdA;AAJS,WAAD,CADF;AAAA;AAFlB,SAWK;AAAA,YAAGQ,IAAH,SAAGA,IAAH;AAAA,YAASO,QAAT,SAASA,QAAT;AAAA,4BACG,oBAAC,iBAAD,qBACI,oBAAC,IAAD,qBACI,oBAAC,IAAD;AAAM,UAAA,IAAI,EAAE;AAAZ,wBACI,oBAAC,IAAD;AACI,UAAA,IAAI,EAAE,SADV;AAEI,UAAA,UAAU,EAAEhC,UAAU,CAACiC,MAAX,CAAkB,UAAlB;AAFhB,wBAII,oBAAC,KAAD;AACI,UAAA,KAAK,EAAE,SADX;AAEI,UAAA,WAAW,EACP;AAHR,UAJJ,CADJ,CADJ,CADJ,EAiBK,OAAO3B,SAAS,CAAC4B,cAAjB,KAAoC,UAApC,IACG5B,SAAS,CAAC4B,cAAV,CAAyB;AACrBX,UAAAA,KAAK,EAALA,KADqB;AAErBS,UAAAA,QAAQ,EAARA,QAFqB;AAGrBG,UAAAA,UAAU,EAAE,oBAAArB,OAAO,EAAI;AACnBkB,YAAAA,QAAQ,CAAC,SAAD,EAAYlB,OAAZ,CAAR;AACH,WALoB;AAMrBX,UAAAA,IAAI,EAAJA,IANqB;AAOrBsB,UAAAA,IAAI,EAAJA;AAPqB,SAAzB,CAlBR,CADH;AAAA,OAXL,CAvBR,CADJ;AAqEH,KA3EM,CAAP;AA4EH,GA9EL,CADJ;AAkFH,CA1FD;;AA4FA,eAAeJ,aAAf","sourcesContent":["import React from \"react\";\nimport { css } from \"emotion\";\nimport { cloneDeep, debounce } from \"lodash\";\nimport { Switch } from \"@webiny/ui/Switch\";\nimport {\n    SimpleForm,\n    SimpleFormContent,\n    SimpleFormHeader\n} from \"@webiny/app-admin/components/SimpleForm\";\nimport { Form } from \"@webiny/form\";\nimport { Grid, Cell } from \"@webiny/ui/Grid\";\nimport { validation } from \"@webiny/validation\";\nimport { Input } from \"@webiny/ui/Input\";\nimport { CmsEditorField } from \"~/types\";\n\nconst onEnabledChange = ({ data, validationValue, onChangeValidation, validator }) => {\n    if (data) {\n        const index = validationValue.findIndex(item => item.name === validator.name);\n        onChangeValidation([\n            ...validationValue.slice(0, index),\n            ...validationValue.slice(index + 1)\n        ]);\n    } else {\n        onChangeValidation([\n            ...validationValue,\n            {\n                name: validator.name,\n                settings: validator.defaultSettings,\n                message: validator.defaultMessage\n            }\n        ]);\n    }\n};\n\nconst onFormChange = debounce(({ data, validationValue, onChangeValidation, validatorIndex }) => {\n    const newValidationValue = cloneDeep(validationValue);\n    newValidationValue[validatorIndex] = {\n        ...newValidationValue[validatorIndex],\n        ...cloneDeep(data)\n    };\n    onChangeValidation(newValidationValue);\n}, 200);\n\nconst noMargin = css({\n    margin: \"0 !important\"\n});\n\ninterface ValidatorsTabProps {\n    name: string;\n    validators: any[];\n    form: any;\n    field: CmsEditorField;\n}\n\nconst ValidatorsTab: React.FunctionComponent<ValidatorsTabProps> = props => {\n    const {\n        field,\n        name,\n        validators,\n        form: { Bind }\n    } = props;\n\n    return (\n        <Bind name={name} defaultValue={[]}>\n            {({ value: validationValue, onChange: onChangeValidation }) => {\n                return validators.map(({ optional, validator }) => {\n                    const validatorIndex = (validationValue || []).findIndex(\n                        item => item.name === validator.name\n                    );\n                    const data = (validationValue || [])[validatorIndex];\n\n                    return (\n                        <SimpleForm\n                            key={validator.name}\n                            noElevation\n                            className={noMargin}\n                            data-testid={`cms.editor.field-validator.${validator.name}`}\n                        >\n                            <SimpleFormHeader title={validator.label}>\n                                {optional && (\n                                    <Switch\n                                        label=\"Enabled\"\n                                        value={validatorIndex >= 0}\n                                        onChange={() =>\n                                            onEnabledChange({\n                                                data,\n                                                validationValue,\n                                                onChangeValidation,\n                                                validator\n                                            })\n                                        }\n                                    />\n                                )}\n                            </SimpleFormHeader>\n                            {data && (\n                                <Form\n                                    data={data}\n                                    onChange={data =>\n                                        onFormChange({\n                                            data,\n                                            validationValue,\n                                            onChangeValidation,\n                                            validatorIndex\n                                        })\n                                    }\n                                >\n                                    {({ Bind, setValue }) => (\n                                        <SimpleFormContent>\n                                            <Grid>\n                                                <Cell span={12}>\n                                                    <Bind\n                                                        name={\"message\"}\n                                                        validators={validation.create(\"required\")}\n                                                    >\n                                                        <Input\n                                                            label={\"Message\"}\n                                                            description={\n                                                                \"This message will be displayed to the user\"\n                                                            }\n                                                        />\n                                                    </Bind>\n                                                </Cell>\n                                            </Grid>\n\n                                            {typeof validator.renderSettings === \"function\" &&\n                                                validator.renderSettings({\n                                                    field,\n                                                    setValue,\n                                                    setMessage: message => {\n                                                        setValue(\"message\", message);\n                                                    },\n                                                    data,\n                                                    Bind\n                                                })}\n                                        </SimpleFormContent>\n                                    )}\n                                </Form>\n                            )}\n                        </SimpleForm>\n                    );\n                });\n            }}\n        </Bind>\n    );\n};\n\nexport default ValidatorsTab;\n"],"file":"ValidatorsTab.js"}