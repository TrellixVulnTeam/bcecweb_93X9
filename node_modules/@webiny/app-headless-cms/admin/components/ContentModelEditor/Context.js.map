{"version":3,"sources":["../../../../src/admin/components/ContentModelEditor/Context.tsx"],"names":["React","useEffect","useMemo","useReducer","get","pick","useRouter","useSnackbar","GET_CONTENT_MODEL","UPDATE_CONTENT_MODEL","LIST_MENU_CONTENT_GROUPS_MODELS","contentModelEditorContext","createContext","contentModelEditorReducer","prev","data","type","cleanupModelDataFields","fields","map","field","predefinedValues","enabled","values","label","value","String","cleanupModelData","ContentModelEditorProvider","children","apolloClient","modelId","isPristine","state","dispatch","history","showSnackbar","setPristine","flag","saveContentModel","modelData","mutate","mutation","variables","refetchQueries","query","response","setData","setter","saveModel","getContentModel","error","Error","catch","push","Provider"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useReducer } from \"react\";\nimport get from \"lodash/get\";\nimport pick from \"lodash/pick\";\nimport { ApolloClient } from \"apollo-client\";\nimport { useRouter } from \"@webiny/react-router\";\nimport { useSnackbar } from \"@webiny/app-admin/hooks/useSnackbar\";\nimport { GET_CONTENT_MODEL, UPDATE_CONTENT_MODEL } from \"~/admin/graphql/contentModels\";\nimport { LIST_MENU_CONTENT_GROUPS_MODELS } from \"~/admin/viewsGraphql\";\nimport { CmsEditorContentModel, CmsEditorField } from \"~/types\";\n\nexport interface Context {\n    apolloClient: ApolloClient<any>;\n    data: CmsEditorContentModel;\n    isPristine: boolean;\n    getContentModel: (modelId: string) => Promise<any>;\n    saveContentModel: (data?: Record<string, any>) => Promise<any>;\n    setData: (setter: Function, saveContentModel?: boolean) => Promise<any>;\n}\n\nexport const contentModelEditorContext = React.createContext<Context>(null);\n\nexport function contentModelEditorReducer(prev, { data, type }) {\n    switch (type) {\n        case \"state\":\n            return { ...prev, ...data };\n\n        case \"data\":\n            return { ...prev, data };\n    }\n}\n\ntype PickedCmsEditorContentModel = Pick<\n    CmsEditorContentModel,\n    \"layout\" | \"fields\" | \"name\" | \"settings\" | \"description\" | \"titleFieldId\" | \"group\"\n>;\n\n/**\n * Cleanup is required because backend always expects string value in predefined values entries\n */\nconst cleanupModelDataFields = (fields: CmsEditorField[]): CmsEditorField[] => {\n    return fields.map(field => {\n        const { predefinedValues } = field;\n        const { enabled = false, values = [] } = predefinedValues || {};\n        return {\n            ...field,\n            predefinedValues: {\n                enabled,\n                values: values.map(({ label, value }) => {\n                    return {\n                        label,\n                        value: String(value)\n                    };\n                })\n            }\n        };\n    });\n};\n\nconst cleanupModelData = (data: PickedCmsEditorContentModel): PickedCmsEditorContentModel => {\n    return {\n        ...data,\n        fields: cleanupModelDataFields(data.fields)\n    };\n};\n\ninterface Props {\n    apolloClient: ApolloClient<any>;\n    modelId: string;\n    children: React.ReactElement;\n}\n\nexport function ContentModelEditorProvider({ children, apolloClient, modelId }: Props) {\n    const [state, dispatch] = useReducer(contentModelEditorReducer, { modelId, isPristine: true });\n    const { history } = useRouter();\n    const { showSnackbar } = useSnackbar();\n\n    const setPristine = flag => {\n        dispatch({ type: \"state\", data: { isPristine: flag } });\n    };\n\n    const saveContentModel = async (data = state.data) => {\n        const modelData: PickedCmsEditorContentModel = pick(data, [\n            \"group\",\n            \"layout\",\n            \"fields\",\n            \"name\",\n            \"settings\",\n            \"description\",\n            \"titleFieldId\"\n        ]);\n        const response = await apolloClient.mutate({\n            mutation: UPDATE_CONTENT_MODEL,\n            variables: {\n                modelId: data.modelId,\n                data: cleanupModelData(modelData)\n            },\n            refetchQueries: [{ query: LIST_MENU_CONTENT_GROUPS_MODELS }]\n        });\n\n        setPristine(true);\n\n        return get(response, \"data.updateContentModel\");\n    };\n\n    /**\n     * Set form data by providing a callback, which receives a fresh copy of data on which you can work on.\n     * Return new data once finished.\n     */\n    const setData = (setter: Function, saveModel = false) => {\n        setPristine(false);\n        const data = setter(state.data);\n        dispatch({ type: \"data\", data });\n        return saveModel !== false && saveContentModel(data);\n    };\n\n    const getContentModel = async (modelId: string) => {\n        const response = await apolloClient.query({\n            query: GET_CONTENT_MODEL,\n            variables: { modelId }\n        });\n\n        const { data, error } = get(response, \"data.getContentModel\");\n        if (error) {\n            throw new Error(error);\n        }\n\n        setData(() => {\n            setPristine(true);\n            return data;\n        }, false);\n        return response;\n    };\n\n    useEffect(() => {\n        getContentModel(modelId).catch(() => {\n            history.push(`/cms/content-models`);\n            showSnackbar(`Could not load content model with given ID.`);\n        });\n    }, [modelId]);\n\n    const value = useMemo(\n        () => ({\n            data: state.data,\n            modelId,\n            apolloClient,\n            dispatch,\n            isPristine: state.isPristine,\n            getContentModel,\n            saveContentModel,\n            setData\n        }),\n        [state, apolloClient]\n    );\n\n    const { Provider } = contentModelEditorContext;\n\n    return <Provider value={value}>{children}</Provider>;\n}\n"],"file":"Context.js"}