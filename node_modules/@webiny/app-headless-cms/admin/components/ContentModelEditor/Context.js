import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useEffect, useMemo, useReducer } from "react";
import get from "lodash/get";
import pick from "lodash/pick";
import { useRouter } from "@webiny/react-router";
import { useSnackbar } from "@webiny/app-admin/hooks/useSnackbar";
import { GET_CONTENT_MODEL, UPDATE_CONTENT_MODEL } from "../../graphql/contentModels";
import { LIST_MENU_CONTENT_GROUPS_MODELS } from "../../viewsGraphql";
export var contentModelEditorContext = /*#__PURE__*/React.createContext(null);
export function contentModelEditorReducer(prev, _ref) {
  var data = _ref.data,
      type = _ref.type;

  switch (type) {
    case "state":
      return _objectSpread(_objectSpread({}, prev), data);

    case "data":
      return _objectSpread(_objectSpread({}, prev), {}, {
        data: data
      });
  }
}

/**
 * Cleanup is required because backend always expects string value in predefined values entries
 */
var cleanupModelDataFields = function cleanupModelDataFields(fields) {
  return fields.map(function (field) {
    var predefinedValues = field.predefinedValues;

    var _ref2 = predefinedValues || {},
        _ref2$enabled = _ref2.enabled,
        enabled = _ref2$enabled === void 0 ? false : _ref2$enabled,
        _ref2$values = _ref2.values,
        values = _ref2$values === void 0 ? [] : _ref2$values;

    return _objectSpread(_objectSpread({}, field), {}, {
      predefinedValues: {
        enabled: enabled,
        values: values.map(function (_ref3) {
          var label = _ref3.label,
              value = _ref3.value;
          return {
            label: label,
            value: String(value)
          };
        })
      }
    });
  });
};

var cleanupModelData = function cleanupModelData(data) {
  return _objectSpread(_objectSpread({}, data), {}, {
    fields: cleanupModelDataFields(data.fields)
  });
};

export function ContentModelEditorProvider(_ref4) {
  var children = _ref4.children,
      apolloClient = _ref4.apolloClient,
      modelId = _ref4.modelId;

  var _useReducer = useReducer(contentModelEditorReducer, {
    modelId: modelId,
    isPristine: true
  }),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      state = _useReducer2[0],
      dispatch = _useReducer2[1];

  var _useRouter = useRouter(),
      history = _useRouter.history;

  var _useSnackbar = useSnackbar(),
      showSnackbar = _useSnackbar.showSnackbar;

  var setPristine = function setPristine(flag) {
    dispatch({
      type: "state",
      data: {
        isPristine: flag
      }
    });
  };

  var saveContentModel = /*#__PURE__*/function () {
    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var data,
          modelData,
          response,
          _args = arguments;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              data = _args.length > 0 && _args[0] !== undefined ? _args[0] : state.data;
              modelData = pick(data, ["group", "layout", "fields", "name", "settings", "description", "titleFieldId"]);
              _context.next = 4;
              return apolloClient.mutate({
                mutation: UPDATE_CONTENT_MODEL,
                variables: {
                  modelId: data.modelId,
                  data: cleanupModelData(modelData)
                },
                refetchQueries: [{
                  query: LIST_MENU_CONTENT_GROUPS_MODELS
                }]
              });

            case 4:
              response = _context.sent;
              setPristine(true);
              return _context.abrupt("return", get(response, "data.updateContentModel"));

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function saveContentModel() {
      return _ref5.apply(this, arguments);
    };
  }();
  /**
   * Set form data by providing a callback, which receives a fresh copy of data on which you can work on.
   * Return new data once finished.
   */


  var setData = function setData(setter) {
    var saveModel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    setPristine(false);
    var data = setter(state.data);
    dispatch({
      type: "data",
      data: data
    });
    return saveModel !== false && saveContentModel(data);
  };

  var getContentModel = /*#__PURE__*/function () {
    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(modelId) {
      var response, _get, data, error;

      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return apolloClient.query({
                query: GET_CONTENT_MODEL,
                variables: {
                  modelId: modelId
                }
              });

            case 2:
              response = _context2.sent;
              _get = get(response, "data.getContentModel"), data = _get.data, error = _get.error;

              if (!error) {
                _context2.next = 6;
                break;
              }

              throw new Error(error);

            case 6:
              setData(function () {
                setPristine(true);
                return data;
              }, false);
              return _context2.abrupt("return", response);

            case 8:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function getContentModel(_x) {
      return _ref6.apply(this, arguments);
    };
  }();

  useEffect(function () {
    getContentModel(modelId).catch(function () {
      history.push("/cms/content-models");
      showSnackbar("Could not load content model with given ID.");
    });
  }, [modelId]);
  var value = useMemo(function () {
    return {
      data: state.data,
      modelId: modelId,
      apolloClient: apolloClient,
      dispatch: dispatch,
      isPristine: state.isPristine,
      getContentModel: getContentModel,
      saveContentModel: saveContentModel,
      setData: setData
    };
  }, [state, apolloClient]);
  var Provider = contentModelEditorContext.Provider;
  return /*#__PURE__*/React.createElement(Provider, {
    value: value
  }, children);
}
//# sourceMappingURL=Context.js.map