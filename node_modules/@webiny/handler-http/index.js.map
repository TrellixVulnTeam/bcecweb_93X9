{"version":3,"sources":["../src/index.ts"],"names":["DEFAULT_HEADERS","options","type","apply","context","invocationArgs","method","path","request","body","headers","cookies","base","parameters","query","http","response","statusCode","handle","error","debug","JSON","stringify","name","constructor","message","stack"],"mappings":";;;;;;;AAEA;;AAEA,MAAMA,eAAe,GAAG;AACpB,mBAAiB,UADG;AAEpB,kBAAgB,kBAFI;AAGpB,iCAA+B,GAHX;AAIpB,kCAAgC,GAJZ;AAKpB,kCAAgC;AALZ,CAAxB;;eAQe,CAACC,OAA2B,GAAG,EAA/B,KAAsC,CACjD;AACIC,EAAAA,IAAI,EAAE,SADV;;AAEIC,EAAAA,KAAK,CAACC,OAAD,EAAU;AAAA;;AACX,UAAM;AAAEC,MAAAA;AAAF,QAAqBD,OAA3B;;AACA,QAAI,CAACC,cAAD,IAAmB,CAACA,cAAc,CAACC,MAAvC,EAA+C;AAC3C;AACH;;AAED,UAAMC,IAAI,2BAAGF,cAAc,CAACE,IAAlB,uEAA0B,EAApC;AAEA,UAAMC,OAAO,GAAG;AACZF,MAAAA,MAAM,EAAED,cAAc,CAACC,MADX;AAEZG,MAAAA,IAAI,EAAEJ,cAAc,CAACI,IAFT;AAGZC,MAAAA,OAAO,EAAEL,cAAc,CAACK,OAHZ;AAIZC,MAAAA,OAAO,EAAEN,cAAc,CAACM,OAJZ;AAKZJ,MAAAA,IAAI,EAAE;AACFK,QAAAA,IAAI,EAAEL,IAAI,CAACK,IADT;AAEFC,QAAAA,UAAU,EAAEN,IAAI,CAACM,UAFf;AAGFC,QAAAA,KAAK,EAAEP,IAAI,CAACO;AAHV;AALM,KAAhB;AAYAV,IAAAA,OAAO,CAACW,IAAR,GAAe;AACXP,MAAAA,OADW;;AAEXQ,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,UAAU,GAAG,GAAf;AAAoBR,QAAAA,IAAI,GAAG,EAA3B;AAA+BC,QAAAA,OAAO,GAAG;AAAzC,OAAD,EAAgD;AACpD,eAAO;AACHO,UAAAA,UADG;AAEHR,UAAAA,IAFG;AAGHC,UAAAA;AAHG,SAAP;AAKH;;AARU,KAAf;AAUH;;AAhCL,CADiD,EAmCjD;AACIR,EAAAA,IAAI,EAAE,eADV;AAEIgB,EAAAA,MAAM,EAAE,CAACd,OAAD,EAAUe,KAAV,KAAoB;AACxB,QAAI,CAACf,OAAO,CAACW,IAAT,IAAiB,OAAOX,OAAO,CAACW,IAAR,CAAaC,QAApB,KAAiC,UAAtD,EAAkE;AAC9D,aAAOG,KAAP;AACH;;AACD,UAAMC,KAAK,GAAG,sBAAQnB,OAAO,CAACmB,KAAhB,CAAd;;AAEA,QAAIA,KAAJ,EAAW;AACP,aAAOhB,OAAO,CAACW,IAAR,CAAaC,QAAb,CAAsB;AACzBC,QAAAA,UAAU,EAAE,GADa;AAEzBR,QAAAA,IAAI,EAAEY,IAAI,CAACC,SAAL,CAAe;AACjBH,UAAAA,KAAK,EAAE;AACHI,YAAAA,IAAI,EAAEJ,KAAK,CAACK,WAAN,CAAkBD,IADrB;AAEHE,YAAAA,OAAO,EAAEN,KAAK,CAACM,OAFZ;AAGHC,YAAAA,KAAK,EAAEP,KAAK,CAACO;AAHV;AADU,SAAf,CAFmB;AASzBhB,QAAAA,OAAO,EAAEV;AATgB,OAAtB,CAAP;AAWH;;AAED,WAAOI,OAAO,CAACW,IAAR,CAAaC,QAAb,CAAsB;AACzBC,MAAAA,UAAU,EAAE,GADa;AAEzBR,MAAAA,IAAI,EAAEY,IAAI,CAACC,SAAL,CAAe;AACjBH,QAAAA,KAAK,EAAE;AACHI,UAAAA,IAAI,EAAE,OADH;AAEHE,UAAAA,OAAO,EAAE;AAFN;AADU,OAAf,CAFmB;AAQzBf,MAAAA,OAAO,EAAEV;AARgB,KAAtB,CAAP;AAUH;AAhCL,CAnCiD,C","sourcesContent":["import { HttpContext, HandlerHttpOptions } from \"./types\";\nimport { ContextPlugin, HandlerErrorPlugin } from \"@webiny/handler/types\";\nimport { boolean } from \"boolean\";\n\nconst DEFAULT_HEADERS = {\n    \"Cache-Control\": \"no-store\",\n    \"Content-Type\": \"application/json\",\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Access-Control-Allow-Headers\": \"*\",\n    \"Access-Control-Allow-Methods\": \"OPTIONS,POST\"\n};\n\nexport default (options: HandlerHttpOptions = {}) => [\n    {\n        type: \"context\",\n        apply(context) {\n            const { invocationArgs } = context;\n            if (!invocationArgs || !invocationArgs.method) {\n                return;\n            }\n\n            const path = invocationArgs.path ?? {};\n\n            const request = {\n                method: invocationArgs.method,\n                body: invocationArgs.body,\n                headers: invocationArgs.headers,\n                cookies: invocationArgs.cookies,\n                path: {\n                    base: path.base,\n                    parameters: path.parameters,\n                    query: path.query\n                }\n            };\n\n            context.http = {\n                request,\n                response({ statusCode = 200, body = \"\", headers = {} }) {\n                    return {\n                        statusCode,\n                        body,\n                        headers\n                    };\n                }\n            };\n        }\n    } as ContextPlugin<HttpContext>,\n    {\n        type: \"handler-error\",\n        handle: (context, error) => {\n            if (!context.http || typeof context.http.response !== \"function\") {\n                return error;\n            }\n            const debug = boolean(options.debug);\n\n            if (debug) {\n                return context.http.response({\n                    statusCode: 500,\n                    body: JSON.stringify({\n                        error: {\n                            name: error.constructor.name,\n                            message: error.message,\n                            stack: error.stack\n                        }\n                    }),\n                    headers: DEFAULT_HEADERS\n                });\n            }\n\n            return context.http.response({\n                statusCode: 500,\n                body: JSON.stringify({\n                    error: {\n                        name: \"Error\",\n                        message: \"Internal Server Error\"\n                    }\n                }),\n                headers: DEFAULT_HEADERS\n            });\n        }\n    } as HandlerErrorPlugin<HttpContext>\n];\n"],"file":"index.js"}