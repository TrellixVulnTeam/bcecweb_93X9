{"version":3,"sources":["../src/index.ts"],"names":["ncp","util","promisify","ncpBase","createPackageName","initial","location","Case","kebab","name","type","scaffold","description","questions","message","default","validate","match","answers","componentName","locationPath","path","resolve","fs","existsSync","packageName","generate","input","ora","initialPackageName","fullLocation","sourcePath","join","__dirname","WebinyError","project","cwd","locationRelative","relative","root","relativeRootPath","baseTsConfigFullPath","baseTsConfigRelativePath","baseTsConfigBuildJsonPath","replace","baseTsConfigBuildRelativePath","baseTsConfigBuildJson","start","chalk","green","mkdirSync","recursive","plural","camel","singular","pluralize","codeReplacements","find","replaceWith","pascal","constant","fileNameReplacements","key","hasOwnProperty","fileNameReplacement","renameSync","packageJsonFile","packageJson","readJson","sync","version","require","Object","keys","dependencies","forEach","startsWith","devDependencies","stopAndPersist","symbol","text","packageTsConfigFilePath","packageTsConfig","extends","packageTsConfigBuildFilePath","packageTsConfigBuild","rootPackageJsonPath","rootPackageJson","workspaces","packages","includes","push","compilerOptions","paths","process","chdir","err","onSuccess","console","log"],"mappings":"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","sourcesContent":["import {\n    CliCommandScaffoldTemplate,\n    TsConfigJson,\n    PackageJson\n} from \"@webiny/cli-plugin-scaffold/types\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport util from \"util\";\nimport ncpBase from \"ncp\";\nimport readJson from \"load-json-file\";\nimport writeJson from \"write-json-file\";\nimport pluralize from \"pluralize\";\nimport Case from \"case\";\nimport { replaceInPath } from \"replace-in-path\";\nimport chalk from \"chalk\";\nimport indentString from \"indent-string\";\nimport WebinyError from \"@webiny/error\";\nimport execa from \"execa\";\nimport validateNpmPackageName from \"validate-npm-package-name\";\nimport { getProject } from \"@webiny/cli/utils\";\n\nconst ncp = util.promisify(ncpBase.ncp);\n\ninterface Input {\n    componentName: string;\n    location: string;\n    packageName: string;\n}\n\nconst createPackageName = ({\n    initial,\n    location\n}: {\n    initial?: string;\n    location: string;\n}): string => {\n    if (initial) {\n        return initial;\n    }\n    return Case.kebab(location);\n};\n\nexport default (): CliCommandScaffoldTemplate<Input> => ({\n    name: \"cli-plugin-scaffold-template-react-component\",\n    type: \"cli-plugin-scaffold-template\",\n    scaffold: {\n        name: \"React Component Package\",\n        description: \"Creates a new package that exports a simple React component.\",\n        questions: () => {\n            return [\n                {\n                    name: \"componentName\",\n                    message: \"Enter the name of the component (in pascal-case)\",\n                    default: \"DisplayComponent\",\n                    validate: name => {\n                        if (!name.match(/^([a-zA-Z]+)$/)) {\n                            return \"A valid component name must consist of letters only.\";\n                        } else if (!name.match(/^[A-Z]/)) {\n                            return \"A valid component name must start with uppercase letter.\";\n                        }\n\n                        return true;\n                    }\n                },\n                {\n                    name: \"location\",\n                    message: `Enter the package location`,\n                    default: answers => {\n                        return `packages/${Case.kebab(answers.componentName)}`;\n                    },\n                    validate: location => {\n                        if (!location) {\n                            return \"Please enter the package location.\";\n                        }\n\n                        const locationPath = path.resolve(location);\n                        if (fs.existsSync(locationPath)) {\n                            return `The target location already exists \"${location}\".`;\n                        }\n\n                        return true;\n                    }\n                },\n                {\n                    name: \"packageName\",\n                    message: \"Enter the package name\",\n                    default: answers => {\n                        return `@custom-components/${Case.kebab(answers.componentName)}`;\n                    },\n                    validate: packageName => {\n                        if (!packageName) {\n                            return true;\n                        } else if (validateNpmPackageName(packageName)) {\n                            return true;\n                        }\n                        return `Package name must look something like \"@custom-components/display\".`;\n                    }\n                }\n            ];\n        },\n        generate: async ({ input, ora }) => {\n            const { componentName, location, packageName: initialPackageName } = input;\n\n            const fullLocation = path.resolve(location);\n            const packageName = createPackageName({\n                initial: initialPackageName,\n                location\n            });\n\n            // Then we also copy the template folder\n            const sourcePath = path.join(__dirname, \"template\");\n\n            if (fs.existsSync(fullLocation)) {\n                throw new WebinyError(`Destination folder ${fullLocation} already exists.`);\n            }\n\n            const project = getProject({\n                cwd: fullLocation\n            });\n\n            const locationRelative = path.relative(project.root, fullLocation);\n\n            const relativeRootPath = path.relative(fullLocation, project.root);\n\n            const baseTsConfigFullPath = path.resolve(project.root, \"tsconfig.json\");\n            const baseTsConfigRelativePath = path.relative(fullLocation, baseTsConfigFullPath);\n\n            const baseTsConfigBuildJsonPath = baseTsConfigFullPath.replace(\n                \"tsconfig.json\",\n                \"tsconfig.build.json\"\n            );\n            const baseTsConfigBuildRelativePath = path.relative(\n                fullLocation,\n                baseTsConfigBuildJsonPath\n            );\n            const baseTsConfigBuildJson = await readJson<TsConfigJson>(baseTsConfigBuildJsonPath);\n\n            ora.start(`Creating new Admin app module files in ${chalk.green(fullLocation)}...`);\n\n            await fs.mkdirSync(fullLocation, { recursive: true });\n\n            // Copy template files\n            await ncp(sourcePath, fullLocation);\n\n            // Replace generic \"Target\" with received \"input.componentName\"\n            const name = {\n                plural: pluralize(Case.camel(componentName)),\n                singular: pluralize.singular(Case.camel(componentName))\n            };\n\n            const codeReplacements = [\n                { find: \"targets\", replaceWith: Case.camel(name.plural) },\n                { find: \"Targets\", replaceWith: Case.pascal(name.plural) },\n                { find: \"TARGETS\", replaceWith: Case.constant(name.plural) },\n                { find: \"target\", replaceWith: Case.camel(name.singular) },\n                { find: \"Target\", replaceWith: Case.pascal(name.singular) },\n                { find: \"TARGET\", replaceWith: Case.constant(name.singular) },\n                { find: \"PACKAGE_NAME\", replaceWith: packageName },\n                { find: \"RELATIVE_ROOT_PATH\", replaceWith: relativeRootPath.replace(/\\\\/g, \"/\") }\n            ];\n\n            replaceInPath(path.join(fullLocation, \".babelrc.js\"), codeReplacements);\n            replaceInPath(path.join(fullLocation, \"**/*.ts\"), codeReplacements);\n            replaceInPath(path.join(fullLocation, \"**/*.tsx\"), codeReplacements);\n\n            // Make sure to also rename base file names.\n            const fileNameReplacements = [\n                {\n                    find: \"src/Target.tsx\",\n                    replaceWith: `src/${Case.pascal(name.singular)}.tsx`\n                }\n            ];\n\n            for (const key in fileNameReplacements) {\n                if (!fileNameReplacements.hasOwnProperty(key)) {\n                    continue;\n                }\n                const fileNameReplacement = fileNameReplacements[key];\n                fs.renameSync(\n                    path.join(fullLocation, fileNameReplacement.find),\n                    path.join(fullLocation, fileNameReplacement.replaceWith)\n                );\n            }\n\n            // Generated package file changes\n            ora.start(`Setting package name...`);\n            const packageJsonFile = path.resolve(fullLocation, \"package.json\");\n            const packageJson = readJson.sync<PackageJson>(packageJsonFile);\n            packageJson.name = packageName;\n\n            const { version } = require(\"@webiny/cli-plugin-scaffold/package.json\");\n\n            // Inject Webiny packages version\n            Object.keys(packageJson.dependencies).forEach(name => {\n                if (name.startsWith(\"@webiny\")) {\n                    packageJson.dependencies[name] = version;\n                }\n            });\n\n            Object.keys(packageJson.devDependencies).forEach(name => {\n                if (name.startsWith(\"@webiny\")) {\n                    packageJson.devDependencies[name] = version;\n                }\n            });\n\n            await writeJson(packageJsonFile, packageJson);\n            ora.stopAndPersist({\n                symbol: chalk.green(\"✔\"),\n                text: \"Package name set.\"\n            });\n            ora.start(`Setting tsconfig.json extends path...`);\n            const packageTsConfigFilePath = path.resolve(fullLocation, \"tsconfig.json\");\n            const packageTsConfig = readJson.sync<TsConfigJson>(packageTsConfigFilePath);\n            packageTsConfig.extends = baseTsConfigRelativePath;\n            await writeJson(packageTsConfigFilePath, packageTsConfig);\n            ora.stopAndPersist({\n                symbol: chalk.green(\"✔\"),\n                text: \"tsconfig.json extends set.\"\n            });\n            ora.start(`Setting tsconfig.build.json extends path...`);\n            const packageTsConfigBuildFilePath = path.resolve(fullLocation, \"tsconfig.build.json\");\n            const packageTsConfigBuild = readJson.sync<TsConfigJson>(packageTsConfigBuildFilePath);\n            packageTsConfigBuild.extends = baseTsConfigBuildRelativePath;\n            await writeJson(packageTsConfigBuildFilePath, packageTsConfigBuild);\n            ora.stopAndPersist({\n                symbol: chalk.green(\"✔\"),\n                text: \"tsconfig.build.json extends set.\"\n            });\n\n            // Add package to workspaces\n            const rootPackageJsonPath = path.join(project.root, \"package.json\");\n            const rootPackageJson = await readJson<PackageJson>(rootPackageJsonPath);\n            if (!rootPackageJson.workspaces.packages.includes(location)) {\n                rootPackageJson.workspaces.packages.push(location);\n                await writeJson(rootPackageJsonPath, rootPackageJson);\n            }\n\n            // Update root tsconfig.build.json file paths\n            ora.start(`Updating base tsconfig compilerOptions.paths to contain the package...`);\n            if (!baseTsConfigBuildJson.compilerOptions) {\n                baseTsConfigBuildJson.compilerOptions = {};\n            }\n            baseTsConfigBuildJson.compilerOptions.paths[`${packageName}`] = [\n                `./${locationRelative}/src`\n            ];\n            baseTsConfigBuildJson.compilerOptions.paths[`${packageName}/*`] = [\n                `./${locationRelative}/src/*`\n            ];\n            await writeJson(baseTsConfigBuildJsonPath, baseTsConfigBuildJson);\n            ora.stopAndPersist({\n                symbol: chalk.green(\"✔\"),\n                text: `Updated base tsconfig compilerOptions.paths.`\n            });\n\n            // Once everything is done, run `yarn` so the new packages are automatically installed.\n            try {\n                ora.start(`Installing dependencies...`);\n                await execa(\"yarn\");\n                ora.stopAndPersist({\n                    symbol: chalk.green(\"✔\"),\n                    text: \"Dependencies installed.\"\n                });\n                ora.start(`Building generated package...`);\n                const cwd = process.cwd();\n                process.chdir(fullLocation);\n                await execa(\"yarn\", [\"build\"]);\n                process.chdir(cwd);\n                ora.stopAndPersist({\n                    symbol: chalk.green(\"✔\"),\n                    text: \"Package built.\"\n                });\n                ora.start(`Linking package...`);\n                await execa(\"yarn\", [\"postinstall\"]);\n                ora.stopAndPersist({\n                    symbol: chalk.green(\"✔\"),\n                    text: \"Package linked.\"\n                });\n            } catch (err) {\n                throw new WebinyError(\n                    `Unable to install dependencies. Try running \"yarn\" in project root manually.`,\n                    err.message\n                );\n            }\n        },\n        onSuccess: async ({ input }) => {\n            const { componentName, location, packageName: initialPackageName } = input;\n\n            const name = Case.pascal(componentName);\n            const packageName = createPackageName({\n                initial: initialPackageName,\n                location\n            });\n\n            console.log(\"1. Include the package in your applications package.json file:\");\n            console.log(\n                indentString(\n                    chalk.green(`\n// somewhere in your dependencies\n\"${packageName}\": \"^1.0.0\"\n`),\n                    2\n                )\n            );\n\n            console.log(\"2. Import your component:\");\n            console.log(\n                indentString(\n                    chalk.green(`\n// at the top of the file\nimport { ${name} } from \"${packageName}\";\n\n// use in the code\n<${name} />\n`),\n                    2\n                )\n            );\n\n            console.log(\n                \"Learn more about app development at https://www.webiny.com/docs/tutorials/create-an-application/introduction.\"\n            );\n        }\n    }\n});\n"],"file":"index.js"}